hello
wandb: Currently logged in as: janezdu (janezdu-uiuc). Use `wandb login --relogin` to force relogin
wandb: wandb version 0.17.9 is available!  To upgrade, please run:
wandb:  $ pip install wandb --upgrade
wandb: Tracking run with wandb version 0.17.7
wandb: Run data is saved locally in /scratch/users/zd16/sparseIRM-resnet-ver/wandb/run-20240906_145610-bqpjap2f
wandb: Run `wandb offline` to turn off syncing.
wandb: Syncing run name_random
wandb: ⭐️ View project at https://wandb.ai/janezdu-uiuc/irm
wandb: 🚀 View run at https://wandb.ai/janezdu-uiuc/irm/runs/bqpjap2f
=> Reading YAML config from configs/smallscale/resnet18/resnet18-usc-unsigned.yaml
Namespace(data='dataset/', optimizer='adam', weight_opt='adam', set='mnistcifar', arch='ResNet18', config='configs/smallscale/resnet18/resnet18-usc-unsigned.yaml', log_dir=None, workers=4, epochs=50, start_epoch=None, batch_size=390, lr=0.006, warmup_length=0, momentum=0.9, weight_decay=0.0, print_freq=10, num_classes=1, resume='', resume_train_weights='', evaluate=False, pretrained=None, pretrained_distill=None, alpha_distill=0.95, T_distill=2, seed=0, multigpu=[0], lr_policy='cosine_lr', lr_adjust=30, lr_gamma=0.1, name='baseline', save_every=-1, prune_rate=1.0, param_prune_rate=0.0, pr_start=1.0, low_data=1, width_mult=1.0, nesterov=False, threetimes=False, random_subnet=False, one_batch=False, conv_type='DenseConv', freeze_weights=False, st=False, mode='fan_in', nonlinearity='relu', bn_type='LearnedBatchNorm', init='kaiming_normal', no_bn_decay=False, scale_fan=False, first_layer_dense=False, last_layer_dense=True, approx=False, zero=False, flip=False, bs=False, gumbel_sample=False, multiply_prob=False, no_multiply=False, multiply_cont=False, multiply_prob_bs=False, indiv=False, label_smoothing=None, first_layer_type=None, trainer='default', score_init_constant=1.0, K=1, update_freq=20, D=0.01, T=1, TA=True, TA2=False, TA_grow=False, center=False, straight_through=False, PLA_factor=0.1, PLA_patience=10, gradient_loss_para=0, abs_loss_para=0, thres=0.9, runs_name='name_random', resume_compare_loss1='', resume_compare_loss2='', init_weights='', trained_mask='', weight_rescaling=False, constrain_by_layer=False, weight_rescaling_data=False, use_running_stats=False, not_clipping=False, rescaling_para=False, lasso_para=0, dont_freeze_weights=False, iterative=True, prob_by_weight=False, rescale_at_fix_subnet=False, train_weights_at_the_same_time=False, sample_from_training_set=False, load_true_para=False, distill=False, finetune=False, stablize=False, prev_best=0, weight_opt_lr=0.0006, n=500, ts=0.28, te=0.6, d=20000, s=80, c=0.75, init_prob=False, thres_before=0.001, wide_ratio=0.001, noise=1, cal_p_q=False, just_finetune=False, snip=False, envs_num=2, l2_regularizer_weight=0.001, data_num=50000, env_type='linear', irm_type='irmv1', hidden_dim=390, penalty_anneal_iters=400, penalty_weight=10000.0, grayscale_model=0, weight_lr_schedule=False, fix_subnet=False, freeze_weight=False, step='ours', prior_sd_coef=0, dim_inv=2, variance_gamma=1.0, dim_spu=10, image_scale=32, cons_ratio='0.999_0.7_0.1', noise_ratio=0.2, step_gamma=0.1, step_round=3, inner_steps=1, use_pgd=True, z=3.0, pgd_anneal_iters=600)
=> Creating model 'ResNet18'
Here!!!!!!!!
==> Conv Type: DenseConv
==> BN Type: LearnedBatchNorm
<class 'torch.nn.modules.conv.Conv2d'>
<class 'torch.nn.modules.batchnorm.BatchNorm2d'>
==> Building first layer with <class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
ResNet(
  (conv1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
  (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (relu): ReLU(inplace=True)
  (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
  (layer1): Sequential(
    (0): BasicBlock(
      (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (1): BasicBlock(
      (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (layer2): Sequential(
    (0): BasicBlock(
      (conv1): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (downsample): Sequential(
        (0): Conv2d(64, 128, kernel_size=(1, 1), stride=(2, 2), bias=False)
        (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (1): BasicBlock(
      (conv1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (layer3): Sequential(
    (0): BasicBlock(
      (conv1): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (downsample): Sequential(
        (0): Conv2d(128, 256, kernel_size=(1, 1), stride=(2, 2), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (1): BasicBlock(
      (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (layer4): Sequential(
    (0): BasicBlock(
      (conv1): Conv2d(256, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (downsample): Sequential(
        (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (1): BasicBlock(
      (conv1): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (avgpool): AdaptiveAvgPool2d(output_size=1)
  (fc): Linear(in_features=512, out_features=1, bias=True)
)
=> Parallelizing on [0] gpus
<DEBUG> gradient to module.conv1.weight
<DEBUG> gradient to module.bn1.weight
<DEBUG> gradient to module.bn1.bias
<DEBUG> gradient to module.layer1.0.conv1.weight
<DEBUG> gradient to module.layer1.0.bn1.weight
<DEBUG> gradient to module.layer1.0.bn1.bias
<DEBUG> gradient to module.layer1.0.conv2.weight
<DEBUG> gradient to module.layer1.0.bn2.weight
<DEBUG> gradient to module.layer1.0.bn2.bias
<DEBUG> gradient to module.layer1.1.conv1.weight
<DEBUG> gradient to module.layer1.1.bn1.weight
<DEBUG> gradient to module.layer1.1.bn1.bias
<DEBUG> gradient to module.layer1.1.conv2.weight
<DEBUG> gradient to module.layer1.1.bn2.weight
<DEBUG> gradient to module.layer1.1.bn2.bias
<DEBUG> gradient to module.layer2.0.conv1.weight
<DEBUG> gradient to module.layer2.0.bn1.weight
<DEBUG> gradient to module.layer2.0.bn1.bias
<DEBUG> gradient to module.layer2.0.conv2.weight
<DEBUG> gradient to module.layer2.0.bn2.weight
<DEBUG> gradient to module.layer2.0.bn2.bias
<DEBUG> gradient to module.layer2.0.downsample.0.weight
<DEBUG> gradient to module.layer2.0.downsample.1.weight
<DEBUG> gradient to module.layer2.0.downsample.1.bias
<DEBUG> gradient to module.layer2.1.conv1.weight
<DEBUG> gradient to module.layer2.1.bn1.weight
<DEBUG> gradient to module.layer2.1.bn1.bias
<DEBUG> gradient to module.layer2.1.conv2.weight
<DEBUG> gradient to module.layer2.1.bn2.weight
<DEBUG> gradient to module.layer2.1.bn2.bias
<DEBUG> gradient to module.layer3.0.conv1.weight
<DEBUG> gradient to module.layer3.0.bn1.weight
<DEBUG> gradient to module.layer3.0.bn1.bias
<DEBUG> gradient to module.layer3.0.conv2.weight
<DEBUG> gradient to module.layer3.0.bn2.weight
<DEBUG> gradient to module.layer3.0.bn2.bias
<DEBUG> gradient to module.layer3.0.downsample.0.weight
<DEBUG> gradient to module.layer3.0.downsample.1.weight
<DEBUG> gradient to module.layer3.0.downsample.1.bias
<DEBUG> gradient to module.layer3.1.conv1.weight
<DEBUG> gradient to module.layer3.1.bn1.weight
<DEBUG> gradient to module.layer3.1.bn1.bias
<DEBUG> gradient to module.layer3.1.conv2.weight
<DEBUG> gradient to module.layer3.1.bn2.weight
<DEBUG> gradient to module.layer3.1.bn2.bias
<DEBUG> gradient to module.layer4.0.conv1.weight
<DEBUG> gradient to module.layer4.0.bn1.weight
<DEBUG> gradient to module.layer4.0.bn1.bias
<DEBUG> gradient to module.layer4.0.conv2.weight
<DEBUG> gradient to module.layer4.0.bn2.weight
<DEBUG> gradient to module.layer4.0.bn2.bias
<DEBUG> gradient to module.layer4.0.downsample.0.weight
<DEBUG> gradient to module.layer4.0.downsample.1.weight
<DEBUG> gradient to module.layer4.0.downsample.1.bias
<DEBUG> gradient to module.layer4.1.conv1.weight
<DEBUG> gradient to module.layer4.1.bn1.weight
<DEBUG> gradient to module.layer4.1.bn1.bias
<DEBUG> gradient to module.layer4.1.conv2.weight
<DEBUG> gradient to module.layer4.1.bn2.weight
<DEBUG> gradient to module.layer4.1.bn2.bias
<DEBUG> gradient to module.fc.weight
<DEBUG> gradient to module.fc.bias
Files already downloaded and verified
Files already downloaded and verified
Adding Noise to Label, len(Y)=12000, Label_noise=1245
Xmp (7877, 3, 32, 32) (6903, 3, 32, 32)
Xcp (5977, 3, 32, 32) (6023, 3, 32, 32)
env=0 2497 2497 3 3
xn 2500 xp 2500
env=1 1750 1750 750 750
xn 2500 xp 2500
env=2 50 50 450 450
xn 500 xp 500
=> Creating model 'EBD'
EBD(
  (embedings): Embedding(2, 1)
)
=> Parallelizing on [0] gpus
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:01<00:40,  1.63s/it] 19%|#9        | 5/26 [00:01<00:05,  3.73it/s] 35%|###4      | 9/26 [00:01<00:02,  7.31it/s] 50%|#####     | 13/26 [00:01<00:01, 11.18it/s] 65%|######5   | 17/26 [00:02<00:00, 15.12it/s] 81%|########  | 21/26 [00:02<00:00, 18.87it/s] 96%|#########6| 25/26 [00:02<00:00, 22.11it/s]100%|##########| 26/26 [00:02<00:00,  9.60it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 0 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 2 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 3 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 4 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 5 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 6 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 7 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 8 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 9 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 10 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 11 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 12 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 13 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 14 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 15 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 16 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 17 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 18 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 19 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 20 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 21 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 22 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 23 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 24 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 25 400
penalty weights 0.0
Epoch: [0][  26/  26]	Loss 9.651 (12.403)	train_nll   0.43 (  0.60)	train_penalty   0.04 (  0.36)	weight_norm   9.23 ( 11.80)	train_acc   0.84 (  0.77)	train_minacc   0.03 (  0.12)	train_majacc   0.98 (  0.88)	train_corr   0.00 (  0.00)	l1 6.9671 (7.5680)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.35it/s] 27%|##6       | 7/26 [00:00<00:00, 28.05it/s]                                               27%|##6       | 7/26 [00:00<00:00, 28.05it/s] 50%|#####     | 13/26 [00:00<00:00, 38.11it/s] 73%|#######3  | 19/26 [00:00<00:00, 43.88it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 43.88it/s] 96%|#########6| 25/26 [00:00<00:00, 46.33it/s]100%|##########| 26/26 [00:00<00:00, 36.68it/s]
Test: [   0/  26]	Loss 0.444 (0.444)	test_acc   0.83 (  0.83)	test_minacc   0.02 (  0.02)	test_majacc   0.98 (  0.98)	Loss_d 0.444 (0.444)	test_acc_d   0.83 (  0.83)	test_minacc_d   0.02 (  0.02)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.96 (  0.96)
Test: [  10/  26]	Loss 0.428 (0.423)	test_acc   0.84 (  0.84)	test_minacc   0.02 (  0.01)	test_majacc   1.00 (  0.99)	Loss_d 0.428 (0.423)	test_acc_d   0.84 (  0.84)	test_minacc_d   0.02 (  0.01)	test_majacc_d   1.00 (  0.99)	test_corr_d   0.97 (  0.97)
Test: [  20/  26]	Loss 0.426 (0.419)	test_acc   0.83 (  0.85)	test_minacc   0.00 (  0.01)	test_majacc   0.99 (  0.99)	Loss_d 0.426 (0.419)	test_acc_d   0.83 (  0.85)	test_minacc_d   0.00 (  0.01)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.97 (  0.97)
Test: [  26/  26]	Loss 0.418 (0.423)	test_acc   0.85 (  0.84)	test_minacc   0.03 (  0.01)	test_majacc   0.99 (  0.99)	Loss_d 0.418 (0.423)	test_acc_d   0.85 (  0.84)	test_minacc_d   0.03 (  0.01)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.96 (  0.97)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00,  2.56it/s]100%|##########| 1/1 [00:00<00:00,  2.55it/s]
Test: [  0/  1]	Loss 1.537 (1.537)	test_acc   0.11 (  0.11)	test_minacc   0.01 (  0.01)	test_majacc   0.98 (  0.98)	Loss_d 1.537 (1.537)	test_acc_d   0.11 (  0.11)	test_minacc_d   0.01 (  0.01)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.95 (  0.95)
Test: [  1/  1]	Loss 1.537 (1.537)	test_acc   0.11 (  0.11)	test_minacc   0.01 (  0.01)	test_majacc   0.98 (  0.98)	Loss_d 1.537 (1.537)	test_acc_d   0.11 (  0.11)	test_minacc_d   0.01 (  0.01)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.95 (  0.95)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/28/checkpoints/model_best.pth
Overall Timing[  0/  1]	epoch_time 0.0851 (0.0851)	validation_time 0.0066 (0.0066)	train_time 0.0649 (0.0649)
record: (train_acc, test_acc) (0.8439000277519226, 0.11000000685453415)
last accs (train_acc, test_acc) (0.8439000277519226, 0.11000000685453415)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.10it/s] 19%|#9        | 5/26 [00:00<00:00, 22.72it/s] 35%|###4      | 9/26 [00:00<00:00, 27.55it/s] 50%|#####     | 13/26 [00:00<00:00, 30.26it/s] 65%|######5   | 17/26 [00:00<00:00, 31.40it/s] 81%|########  | 21/26 [00:00<00:00, 32.76it/s] 96%|#########6| 25/26 [00:00<00:00, 33.24it/s]100%|##########| 26/26 [00:00<00:00, 28.41it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 26 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 27 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 28 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 29 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 30 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 31 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 32 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 33 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 34 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 35 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 36 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 37 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 38 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 39 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 40 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 41 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 42 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 43 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 44 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 45 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 46 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 47 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 48 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 49 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 50 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 51 400
penalty weights 0.0
Epoch: [1][  26/  26]	Loss 4.998 (6.928)	train_nll   0.42 (  0.41)	train_penalty   0.03 (  0.05)	weight_norm   4.58 (  6.52)	train_acc   0.84 (  0.84)	train_minacc   0.00 (  0.03)	train_majacc   0.98 (  0.99)	train_corr   0.00 (  0.00)	l1 6.5379 (6.8555)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 16.73it/s] 31%|###       | 8/26 [00:00<00:00, 38.70it/s]                                               31%|###       | 8/26 [00:00<00:00, 38.70it/s] 54%|#####3    | 14/26 [00:00<00:00, 44.09it/s] 77%|#######6  | 20/26 [00:00<00:00, 49.25it/s]                                                77%|#######6  | 20/26 [00:00<00:00, 49.25it/s]100%|##########| 26/26 [00:00<00:00, 51.95it/s]100%|##########| 26/26 [00:00<00:00, 41.64it/s]
Test: [   0/  26]	Loss 0.414 (0.414)	test_acc   0.84 (  0.84)	test_minacc   0.03 (  0.03)	test_majacc   0.98 (  0.98)	Loss_d 0.414 (0.414)	test_acc_d   0.84 (  0.84)	test_minacc_d   0.03 (  0.03)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.95 (  0.95)
Test: [  10/  26]	Loss 0.394 (0.394)	test_acc   0.84 (  0.85)	test_minacc   0.02 (  0.02)	test_majacc   1.00 (  0.99)	Loss_d 0.394 (0.394)	test_acc_d   0.84 (  0.85)	test_minacc_d   0.02 (  0.02)	test_majacc_d   1.00 (  0.99)	test_corr_d   0.96 (  0.95)
Test: [  20/  26]	Loss 0.391 (0.390)	test_acc   0.84 (  0.85)	test_minacc   0.03 (  0.02)	test_majacc   0.99 (  0.99)	Loss_d 0.391 (0.390)	test_acc_d   0.84 (  0.85)	test_minacc_d   0.03 (  0.02)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.95 (  0.95)
Test: [  26/  26]	Loss 0.392 (0.394)	test_acc   0.85 (  0.85)	test_minacc   0.03 (  0.02)	test_majacc   0.99 (  0.99)	Loss_d 0.392 (0.394)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.03 (  0.02)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.95 (  0.95)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.91it/s]
Test: [  0/  1]	Loss 1.540 (1.540)	test_acc   0.12 (  0.12)	test_minacc   0.03 (  0.03)	test_majacc   0.97 (  0.97)	Loss_d 1.540 (1.540)	test_acc_d   0.12 (  0.12)	test_minacc_d   0.03 (  0.03)	test_majacc_d   0.97 (  0.97)	test_corr_d   0.91 (  0.91)
Test: [  1/  1]	Loss 1.540 (1.540)	test_acc   0.12 (  0.12)	test_minacc   0.03 (  0.03)	test_majacc   0.97 (  0.97)	Loss_d 1.540 (1.540)	test_acc_d   0.12 (  0.12)	test_minacc_d   0.03 (  0.03)	test_majacc_d   0.97 (  0.97)	test_corr_d   0.91 (  0.91)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/28/checkpoints/model_best.pth
Overall Timing[  1/  1]	epoch_time 0.0370 (0.0610)	validation_time 0.0004 (0.0035)	train_time 0.0365 (0.0507)
record: (train_acc, test_acc) (0.8464000264406204, 0.12000000476837158)
last accs (train_acc, test_acc) (0.8464000264406204, 0.12000000476837158)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.96it/s] 19%|#9        | 5/26 [00:00<00:00, 23.60it/s] 35%|###4      | 9/26 [00:00<00:00, 28.12it/s] 46%|####6     | 12/26 [00:00<00:00, 26.81it/s] 58%|#####7    | 15/26 [00:00<00:00, 27.58it/s] 73%|#######3  | 19/26 [00:00<00:00, 30.31it/s] 88%|########8 | 23/26 [00:00<00:00, 31.85it/s]100%|##########| 26/26 [00:00<00:00, 27.23it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 52 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 53 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 54 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 55 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 56 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 57 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 58 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 59 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 60 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 61 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 62 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 63 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 64 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 65 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 66 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 67 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 68 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 69 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 70 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 71 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 72 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 73 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 74 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 75 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 76 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 77 400
penalty weights 0.0
Epoch: [2][  26/  26]	Loss 3.056 (3.852)	train_nll   0.41 (  0.40)	train_penalty   0.03 (  0.05)	weight_norm   2.64 (  3.46)	train_acc   0.82 (  0.84)	train_minacc   0.00 (  0.06)	train_majacc   0.96 (  0.98)	train_corr   0.00 (  0.00)	l1 5.6949 (6.0975)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 17.89it/s] 27%|##6       | 7/26 [00:00<00:00, 35.36it/s]                                               27%|##6       | 7/26 [00:00<00:00, 35.36it/s] 46%|####6     | 12/26 [00:00<00:00, 40.39it/s] 69%|######9   | 18/26 [00:00<00:00, 47.60it/s]                                                69%|######9   | 18/26 [00:00<00:00, 47.60it/s] 92%|#########2| 24/26 [00:00<00:00, 48.06it/s]100%|##########| 26/26 [00:00<00:00, 40.42it/s]
Test: [   0/  26]	Loss 0.390 (0.390)	test_acc   0.85 (  0.85)	test_minacc   0.02 (  0.02)	test_majacc   1.00 (  1.00)	Loss_d 0.390 (0.390)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.02 (  0.02)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.96 (  0.96)
Test: [  10/  26]	Loss 0.397 (0.374)	test_acc   0.84 (  0.85)	test_minacc   0.00 (  0.01)	test_majacc   1.00 (  1.00)	Loss_d 0.397 (0.374)	test_acc_d   0.84 (  0.85)	test_minacc_d   0.00 (  0.01)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.97 (  0.97)
Test: [  20/  26]	Loss 0.381 (0.373)	test_acc   0.84 (  0.85)	test_minacc   0.00 (  0.01)	test_majacc   1.00 (  1.00)	Loss_d 0.381 (0.373)	test_acc_d   0.84 (  0.85)	test_minacc_d   0.00 (  0.01)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.97 (  0.97)
Test: [  26/  26]	Loss 0.374 (0.376)	test_acc   0.86 (  0.85)	test_minacc   0.00 (  0.01)	test_majacc   1.00 (  1.00)	Loss_d 0.374 (0.376)	test_acc_d   0.86 (  0.85)	test_minacc_d   0.00 (  0.01)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.97 (  0.96)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 65.64it/s]
Test: [  0/  1]	Loss 1.673 (1.673)	test_acc   0.11 (  0.11)	test_minacc   0.01 (  0.01)	test_majacc   1.00 (  1.00)	Loss_d 1.673 (1.673)	test_acc_d   0.11 (  0.11)	test_minacc_d   0.01 (  0.01)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.93 (  0.93)
Test: [  1/  1]	Loss 1.673 (1.673)	test_acc   0.11 (  0.11)	test_minacc   0.01 (  0.01)	test_majacc   1.00 (  1.00)	Loss_d 1.673 (1.673)	test_acc_d   0.11 (  0.11)	test_minacc_d   0.01 (  0.01)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.93 (  0.93)
Overall Timing[  2/  1]	epoch_time 0.0371 (0.0530)	validation_time 0.0003 (0.0024)	train_time 0.0367 (0.0461)
record: (train_acc, test_acc) (0.8464000264406204, 0.12000000476837158)
last accs (train_acc, test_acc) (0.8483000255823135, 0.1120000034570694)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.36it/s] 19%|#9        | 5/26 [00:00<00:01, 18.23it/s] 35%|###4      | 9/26 [00:00<00:00, 24.88it/s] 50%|#####     | 13/26 [00:00<00:00, 28.86it/s] 65%|######5   | 17/26 [00:00<00:00, 31.34it/s] 81%|########  | 21/26 [00:00<00:00, 32.75it/s] 96%|#########6| 25/26 [00:00<00:00, 33.69it/s]100%|##########| 26/26 [00:00<00:00, 27.14it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 78 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 79 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 80 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 81 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 82 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 83 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 84 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 85 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 86 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 87 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 88 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 89 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 90 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 91 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 92 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 93 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 94 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 95 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 96 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 97 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 98 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 99 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 100 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 101 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 102 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 103 400
penalty weights 0.0
Epoch: [3][  26/  26]	Loss 2.080 (2.482)	train_nll   0.41 (  0.38)	train_penalty   0.02 (  0.04)	weight_norm   1.67 (  2.10)	train_acc   0.84 (  0.85)	train_minacc   0.22 (  0.06)	train_majacc   0.94 (  0.99)	train_corr   0.00 (  0.00)	l1 5.0135 (5.3494)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 17.92it/s] 27%|##6       | 7/26 [00:00<00:00, 35.74it/s]                                               27%|##6       | 7/26 [00:00<00:00, 35.74it/s] 50%|#####     | 13/26 [00:00<00:00, 40.70it/s] 73%|#######3  | 19/26 [00:00<00:00, 46.93it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 46.93it/s] 96%|#########6| 25/26 [00:00<00:00, 48.19it/s]100%|##########| 26/26 [00:00<00:00, 40.52it/s]
Test: [   0/  26]	Loss 0.379 (0.379)	test_acc   0.85 (  0.85)	test_minacc   0.02 (  0.02)	test_majacc   1.00 (  1.00)	Loss_d 0.379 (0.379)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.02 (  0.02)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.96 (  0.96)
Test: [  10/  26]	Loss 0.385 (0.369)	test_acc   0.84 (  0.85)	test_minacc   0.02 (  0.02)	test_majacc   1.00 (  1.00)	Loss_d 0.385 (0.369)	test_acc_d   0.84 (  0.85)	test_minacc_d   0.02 (  0.02)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.96 (  0.96)
Test: [  20/  26]	Loss 0.366 (0.366)	test_acc   0.84 (  0.85)	test_minacc   0.00 (  0.02)	test_majacc   1.00 (  1.00)	Loss_d 0.366 (0.366)	test_acc_d   0.84 (  0.85)	test_minacc_d   0.00 (  0.02)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.96 (  0.96)
Test: [  26/  26]	Loss 0.371 (0.369)	test_acc   0.86 (  0.85)	test_minacc   0.00 (  0.02)	test_majacc   1.00 (  1.00)	Loss_d 0.371 (0.369)	test_acc_d   0.86 (  0.85)	test_minacc_d   0.00 (  0.02)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.96 (  0.96)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 64.27it/s]
Test: [  0/  1]	Loss 1.519 (1.519)	test_acc   0.11 (  0.11)	test_minacc   0.01 (  0.01)	test_majacc   1.00 (  1.00)	Loss_d 1.519 (1.519)	test_acc_d   0.11 (  0.11)	test_minacc_d   0.01 (  0.01)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.92 (  0.92)
Test: [  1/  1]	Loss 1.519 (1.519)	test_acc   0.11 (  0.11)	test_minacc   0.01 (  0.01)	test_majacc   1.00 (  1.00)	Loss_d 1.519 (1.519)	test_acc_d   0.11 (  0.11)	test_minacc_d   0.01 (  0.01)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.92 (  0.92)
Overall Timing[  3/  1]	epoch_time 0.0370 (0.0490)	validation_time 0.0004 (0.0019)	train_time 0.0366 (0.0437)
record: (train_acc, test_acc) (0.8464000264406204, 0.12000000476837158)
last accs (train_acc, test_acc) (0.8499000254869461, 0.11300000548362732)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.17it/s] 19%|#9        | 5/26 [00:00<00:00, 23.60it/s] 35%|###4      | 9/26 [00:00<00:00, 27.73it/s] 50%|#####     | 13/26 [00:00<00:00, 30.94it/s] 65%|######5   | 17/26 [00:00<00:00, 32.40it/s] 81%|########  | 21/26 [00:00<00:00, 33.69it/s] 96%|#########6| 25/26 [00:00<00:00, 34.00it/s]100%|##########| 26/26 [00:00<00:00, 29.23it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 104 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 105 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 106 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 107 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 108 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 109 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 110 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 111 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 112 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 113 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 114 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 115 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 116 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 117 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 118 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 119 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 120 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 121 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 122 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 123 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 124 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 125 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 126 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 127 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 128 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 129 400
penalty weights 0.0
Epoch: [4][  26/  26]	Loss 1.465 (1.721)	train_nll   0.38 (  0.37)	train_penalty   0.03 (  0.04)	weight_norm   1.09 (  1.35)	train_acc   0.85 (  0.85)	train_minacc   0.03 (  0.06)	train_majacc   0.99 (  0.98)	train_corr   0.00 (  0.00)	l1 5.0926 (5.0425)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.09it/s] 27%|##6       | 7/26 [00:00<00:00, 36.40it/s]                                               27%|##6       | 7/26 [00:00<00:00, 36.40it/s] 50%|#####     | 13/26 [00:00<00:00, 40.78it/s] 73%|#######3  | 19/26 [00:00<00:00, 47.43it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 47.43it/s] 96%|#########6| 25/26 [00:00<00:00, 48.21it/s]100%|##########| 26/26 [00:00<00:00, 40.18it/s]
Test: [   0/  26]	Loss 0.372 (0.372)	test_acc   0.85 (  0.85)	test_minacc   0.00 (  0.00)	test_majacc   1.00 (  1.00)	Loss_d 0.372 (0.372)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.00 (  0.00)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.95 (  0.95)
Test: [  10/  26]	Loss 0.365 (0.357)	test_acc   0.84 (  0.85)	test_minacc   0.00 (  0.01)	test_majacc   1.00 (  1.00)	Loss_d 0.365 (0.357)	test_acc_d   0.84 (  0.85)	test_minacc_d   0.00 (  0.01)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.96 (  0.96)
Test: [  20/  26]	Loss 0.360 (0.356)	test_acc   0.84 (  0.85)	test_minacc   0.00 (  0.00)	test_majacc   1.00 (  1.00)	Loss_d 0.360 (0.356)	test_acc_d   0.84 (  0.85)	test_minacc_d   0.00 (  0.00)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.96 (  0.96)
Test: [  26/  26]	Loss 0.363 (0.359)	test_acc   0.86 (  0.85)	test_minacc   0.00 (  0.00)	test_majacc   1.00 (  1.00)	Loss_d 0.363 (0.359)	test_acc_d   0.86 (  0.85)	test_minacc_d   0.00 (  0.00)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.96 (  0.96)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 67.22it/s]
Test: [  0/  1]	Loss 1.502 (1.502)	test_acc   0.11 (  0.11)	test_minacc   0.01 (  0.01)	test_majacc   1.00 (  1.00)	Loss_d 1.502 (1.502)	test_acc_d   0.11 (  0.11)	test_minacc_d   0.01 (  0.01)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.91 (  0.91)
Test: [  1/  1]	Loss 1.502 (1.502)	test_acc   0.11 (  0.11)	test_minacc   0.01 (  0.01)	test_majacc   1.00 (  1.00)	Loss_d 1.502 (1.502)	test_acc_d   0.11 (  0.11)	test_minacc_d   0.01 (  0.01)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.91 (  0.91)
Overall Timing[  4/  1]	epoch_time 0.0376 (0.0467)	validation_time 0.0004 (0.0016)	train_time 0.0372 (0.0424)
record: (train_acc, test_acc) (0.8464000264406204, 0.12000000476837158)
last accs (train_acc, test_acc) (0.8492000243663788, 0.10600000619888306)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.84it/s] 19%|#9        | 5/26 [00:00<00:00, 21.03it/s] 35%|###4      | 9/26 [00:00<00:00, 26.51it/s] 50%|#####     | 13/26 [00:00<00:00, 29.02it/s] 65%|######5   | 17/26 [00:00<00:00, 31.28it/s] 81%|########  | 21/26 [00:00<00:00, 32.61it/s] 96%|#########6| 25/26 [00:00<00:00, 33.16it/s]100%|##########| 26/26 [00:00<00:00, 27.76it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 130 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 131 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 132 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 133 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 134 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 135 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 136 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 137 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 138 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 139 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 140 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 141 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 142 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 143 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 144 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 145 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 146 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 147 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 148 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 149 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 150 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 151 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 152 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 153 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 154 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 155 400
penalty weights 0.0
Epoch: [5][  26/  26]	Loss 1.075 (1.247)	train_nll   0.36 (  0.36)	train_penalty   0.01 (  0.03)	weight_norm   0.72 (  0.88)	train_acc   0.83 (  0.85)	train_minacc   0.28 (  0.09)	train_majacc   0.93 (  0.98)	train_corr   0.00 (  0.00)	l1 5.4383 (5.3252)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.79it/s] 23%|##3       | 6/26 [00:00<00:00, 25.61it/s]                                               23%|##3       | 6/26 [00:00<00:00, 25.61it/s] 42%|####2     | 11/26 [00:00<00:00, 35.10it/s] 65%|######5   | 17/26 [00:00<00:00, 39.47it/s]                                                65%|######5   | 17/26 [00:00<00:00, 39.47it/s] 88%|########8 | 23/26 [00:00<00:00, 44.40it/s]100%|##########| 26/26 [00:00<00:00, 35.51it/s]
Test: [   0/  26]	Loss 0.353 (0.353)	test_acc   0.84 (  0.84)	test_minacc   0.12 (  0.12)	test_majacc   0.97 (  0.97)	Loss_d 0.353 (0.353)	test_acc_d   0.84 (  0.84)	test_minacc_d   0.12 (  0.12)	test_majacc_d   0.97 (  0.97)	test_corr_d   0.90 (  0.90)
Test: [  10/  26]	Loss 0.346 (0.342)	test_acc   0.84 (  0.85)	test_minacc   0.07 (  0.10)	test_majacc   0.98 (  0.98)	Loss_d 0.346 (0.342)	test_acc_d   0.84 (  0.85)	test_minacc_d   0.07 (  0.10)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.92 (  0.91)
Test: [  20/  26]	Loss 0.345 (0.340)	test_acc   0.84 (  0.85)	test_minacc   0.10 (  0.09)	test_majacc   0.98 (  0.98)	Loss_d 0.345 (0.340)	test_acc_d   0.84 (  0.85)	test_minacc_d   0.10 (  0.09)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.90 (  0.91)
Test: [  26/  26]	Loss 0.327 (0.342)	test_acc   0.85 (  0.85)	test_minacc   0.08 (  0.09)	test_majacc   0.98 (  0.98)	Loss_d 0.327 (0.342)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.08 (  0.09)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.91 (  0.91)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.36it/s]
Test: [  0/  1]	Loss 1.513 (1.513)	test_acc   0.18 (  0.18)	test_minacc   0.09 (  0.09)	test_majacc   0.96 (  0.96)	Loss_d 1.513 (1.513)	test_acc_d   0.18 (  0.18)	test_minacc_d   0.09 (  0.09)	test_majacc_d   0.96 (  0.96)	test_corr_d   0.78 (  0.78)
Test: [  1/  1]	Loss 1.513 (1.513)	test_acc   0.18 (  0.18)	test_minacc   0.09 (  0.09)	test_majacc   0.96 (  0.96)	Loss_d 1.513 (1.513)	test_acc_d   0.18 (  0.18)	test_minacc_d   0.09 (  0.09)	test_majacc_d   0.96 (  0.96)	test_corr_d   0.78 (  0.78)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/28/checkpoints/model_best.pth
Overall Timing[  5/  1]	epoch_time 0.0379 (0.0453)	validation_time 0.0003 (0.0014)	train_time 0.0375 (0.0416)
record: (train_acc, test_acc) (0.8495000264644623, 0.17800000309944153)
last accs (train_acc, test_acc) (0.8495000264644623, 0.17800000309944153)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.75it/s] 19%|#9        | 5/26 [00:00<00:01, 19.64it/s] 35%|###4      | 9/26 [00:00<00:00, 25.64it/s] 50%|#####     | 13/26 [00:00<00:00, 29.21it/s] 65%|######5   | 17/26 [00:00<00:00, 30.87it/s] 81%|########  | 21/26 [00:00<00:00, 32.31it/s] 96%|#########6| 25/26 [00:00<00:00, 32.69it/s]100%|##########| 26/26 [00:00<00:00, 27.06it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 156 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 157 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 158 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 159 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 160 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 161 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 162 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 163 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 164 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 165 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 166 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 167 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 168 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 169 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 170 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 171 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 172 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 173 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 174 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 175 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 176 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 177 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 178 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 179 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 180 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 181 400
penalty weights 0.0
Epoch: [6][  26/  26]	Loss 0.860 (0.970)	train_nll   0.37 (  0.37)	train_penalty   0.03 (  0.03)	weight_norm   0.49 (  0.60)	train_acc   0.85 (  0.85)	train_minacc   0.00 (  0.08)	train_majacc   1.00 (  0.98)	train_corr   0.00 (  0.00)	l1 6.6321 (6.1922)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.95it/s] 27%|##6       | 7/26 [00:00<00:00, 32.44it/s]                                               27%|##6       | 7/26 [00:00<00:00, 32.44it/s] 50%|#####     | 13/26 [00:00<00:00, 41.52it/s] 73%|#######3  | 19/26 [00:00<00:00, 47.85it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 47.85it/s] 92%|#########2| 24/26 [00:00<00:00, 47.98it/s]100%|##########| 26/26 [00:00<00:00, 39.12it/s]
Test: [   0/  26]	Loss 0.344 (0.344)	test_acc   0.85 (  0.85)	test_minacc   0.03 (  0.03)	test_majacc   1.00 (  1.00)	Loss_d 0.344 (0.344)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.03 (  0.03)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.95 (  0.95)
Test: [  10/  26]	Loss 0.361 (0.344)	test_acc   0.84 (  0.85)	test_minacc   0.02 (  0.03)	test_majacc   1.00 (  1.00)	Loss_d 0.361 (0.344)	test_acc_d   0.84 (  0.85)	test_minacc_d   0.02 (  0.03)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.95 (  0.95)
Test: [  20/  26]	Loss 0.350 (0.345)	test_acc   0.85 (  0.85)	test_minacc   0.02 (  0.02)	test_majacc   1.00 (  1.00)	Loss_d 0.350 (0.345)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.02 (  0.02)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.96 (  0.95)
Test: [  26/  26]	Loss 0.341 (0.348)	test_acc   0.86 (  0.85)	test_minacc   0.00 (  0.02)	test_majacc   1.00 (  1.00)	Loss_d 0.341 (0.348)	test_acc_d   0.86 (  0.85)	test_minacc_d   0.00 (  0.02)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.96 (  0.95)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.75it/s]
Test: [  0/  1]	Loss 1.645 (1.645)	test_acc   0.12 (  0.12)	test_minacc   0.03 (  0.03)	test_majacc   1.00 (  1.00)	Loss_d 1.645 (1.645)	test_acc_d   0.12 (  0.12)	test_minacc_d   0.03 (  0.03)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.89 (  0.89)
Test: [  1/  1]	Loss 1.645 (1.645)	test_acc   0.12 (  0.12)	test_minacc   0.03 (  0.03)	test_majacc   1.00 (  1.00)	Loss_d 1.645 (1.645)	test_acc_d   0.12 (  0.12)	test_minacc_d   0.03 (  0.03)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.89 (  0.89)
Overall Timing[  6/  1]	epoch_time 0.0372 (0.0441)	validation_time 0.0004 (0.0013)	train_time 0.0367 (0.0409)
record: (train_acc, test_acc) (0.8495000264644623, 0.17800000309944153)
last accs (train_acc, test_acc) (0.8502000196576118, 0.125)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.60it/s] 15%|#5        | 4/26 [00:00<00:01, 19.63it/s] 31%|###       | 8/26 [00:00<00:00, 26.33it/s] 46%|####6     | 12/26 [00:00<00:00, 30.10it/s] 62%|######1   | 16/26 [00:00<00:00, 31.44it/s] 77%|#######6  | 20/26 [00:00<00:00, 31.78it/s] 92%|#########2| 24/26 [00:00<00:00, 33.46it/s]100%|##########| 26/26 [00:00<00:00, 28.35it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 182 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 183 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 184 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 185 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 186 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 187 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 188 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 189 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 190 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 191 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 192 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 193 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 194 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 195 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 196 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 197 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 198 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 199 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 200 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 201 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 202 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 203 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 204 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 205 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 206 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 207 400
penalty weights 0.0
Epoch: [7][  26/  26]	Loss 0.707 (0.747)	train_nll   0.37 (  0.34)	train_penalty   0.01 (  0.03)	weight_norm   0.34 (  0.40)	train_acc   0.83 (  0.85)	train_minacc   0.42 (  0.14)	train_majacc   0.90 (  0.98)	train_corr   0.00 (  0.00)	l1 8.5697 (7.6647)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 17.60it/s] 31%|###       | 8/26 [00:00<00:00, 39.42it/s]                                               31%|###       | 8/26 [00:00<00:00, 39.42it/s] 50%|#####     | 13/26 [00:00<00:00, 43.57it/s] 73%|#######3  | 19/26 [00:00<00:00, 48.67it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 48.67it/s] 96%|#########6| 25/26 [00:00<00:00, 48.92it/s]100%|##########| 26/26 [00:00<00:00, 41.80it/s]
Test: [   0/  26]	Loss 0.341 (0.341)	test_acc   0.84 (  0.84)	test_minacc   0.32 (  0.32)	test_majacc   0.94 (  0.94)	Loss_d 0.341 (0.341)	test_acc_d   0.84 (  0.84)	test_minacc_d   0.32 (  0.32)	test_majacc_d   0.94 (  0.94)	test_corr_d   0.89 (  0.89)
Test: [  10/  26]	Loss 0.335 (0.337)	test_acc   0.84 (  0.85)	test_minacc   0.21 (  0.24)	test_majacc   0.96 (  0.96)	Loss_d 0.335 (0.337)	test_acc_d   0.84 (  0.85)	test_minacc_d   0.21 (  0.24)	test_majacc_d   0.96 (  0.96)	test_corr_d   0.91 (  0.91)
Test: [  20/  26]	Loss 0.327 (0.335)	test_acc   0.86 (  0.85)	test_minacc   0.23 (  0.23)	test_majacc   0.98 (  0.96)	Loss_d 0.327 (0.335)	test_acc_d   0.86 (  0.85)	test_minacc_d   0.23 (  0.23)	test_majacc_d   0.98 (  0.96)	test_corr_d   0.92 (  0.91)
Test: [  26/  26]	Loss 0.316 (0.336)	test_acc   0.87 (  0.85)	test_minacc   0.33 (  0.24)	test_majacc   0.96 (  0.96)	Loss_d 0.316 (0.336)	test_acc_d   0.87 (  0.85)	test_minacc_d   0.33 (  0.24)	test_majacc_d   0.96 (  0.96)	test_corr_d   0.91 (  0.91)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 60.06it/s]
Test: [  0/  1]	Loss 1.715 (1.715)	test_acc   0.30 (  0.30)	test_minacc   0.22 (  0.22)	test_majacc   0.93 (  0.93)	Loss_d 1.715 (1.715)	test_acc_d   0.30 (  0.30)	test_minacc_d   0.22 (  0.22)	test_majacc_d   0.93 (  0.93)	test_corr_d   0.75 (  0.75)
Test: [  1/  1]	Loss 1.715 (1.715)	test_acc   0.30 (  0.30)	test_minacc   0.22 (  0.22)	test_majacc   0.93 (  0.93)	Loss_d 1.715 (1.715)	test_acc_d   0.30 (  0.30)	test_minacc_d   0.22 (  0.22)	test_majacc_d   0.93 (  0.93)	test_corr_d   0.75 (  0.75)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/28/checkpoints/model_best.pth
Overall Timing[  7/  1]	epoch_time 0.0355 (0.0430)	validation_time 0.0004 (0.0012)	train_time 0.0351 (0.0402)
record: (train_acc, test_acc) (0.8518000245094299, 0.29500001668930054)
last accs (train_acc, test_acc) (0.8518000245094299, 0.29500001668930054)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.27it/s] 19%|#9        | 5/26 [00:00<00:00, 21.82it/s] 35%|###4      | 9/26 [00:00<00:00, 26.55it/s] 50%|#####     | 13/26 [00:00<00:00, 29.81it/s] 65%|######5   | 17/26 [00:00<00:00, 31.90it/s] 81%|########  | 21/26 [00:00<00:00, 33.09it/s] 96%|#########6| 25/26 [00:00<00:00, 34.00it/s]100%|##########| 26/26 [00:00<00:00, 28.18it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 208 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 209 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 210 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 211 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 212 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 213 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 214 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 215 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 216 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 217 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 218 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 219 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 220 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 221 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 222 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 223 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 224 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 225 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 226 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 227 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 228 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 229 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 230 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 231 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 232 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 233 400
penalty weights 0.0
Epoch: [8][  26/  26]	Loss 0.597 (0.634)	train_nll   0.36 (  0.35)	train_penalty   0.01 (  0.03)	weight_norm   0.24 (  0.29)	train_acc   0.84 (  0.85)	train_minacc   0.31 (  0.13)	train_majacc   0.93 (  0.98)	train_corr   0.00 (  0.00)	l1 9.6535 (9.3021)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.92it/s] 27%|##6       | 7/26 [00:00<00:00, 33.63it/s]                                               27%|##6       | 7/26 [00:00<00:00, 33.63it/s] 50%|#####     | 13/26 [00:00<00:00, 40.86it/s] 73%|#######3  | 19/26 [00:00<00:00, 45.47it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 45.47it/s] 96%|#########6| 25/26 [00:00<00:00, 47.62it/s]100%|##########| 26/26 [00:00<00:00, 39.07it/s]
Test: [   0/  26]	Loss 0.340 (0.340)	test_acc   0.86 (  0.86)	test_minacc   0.23 (  0.23)	test_majacc   0.97 (  0.97)	Loss_d 0.340 (0.340)	test_acc_d   0.86 (  0.86)	test_minacc_d   0.23 (  0.23)	test_majacc_d   0.97 (  0.97)	test_corr_d   0.90 (  0.90)
Test: [  10/  26]	Loss 0.337 (0.339)	test_acc   0.86 (  0.85)	test_minacc   0.25 (  0.20)	test_majacc   0.97 (  0.97)	Loss_d 0.337 (0.339)	test_acc_d   0.86 (  0.85)	test_minacc_d   0.25 (  0.20)	test_majacc_d   0.97 (  0.97)	test_corr_d   0.90 (  0.91)
Test: [  20/  26]	Loss 0.334 (0.337)	test_acc   0.85 (  0.86)	test_minacc   0.16 (  0.19)	test_majacc   0.98 (  0.97)	Loss_d 0.334 (0.337)	test_acc_d   0.85 (  0.86)	test_minacc_d   0.16 (  0.19)	test_majacc_d   0.98 (  0.97)	test_corr_d   0.92 (  0.91)
Test: [  26/  26]	Loss 0.313 (0.339)	test_acc   0.87 (  0.85)	test_minacc   0.31 (  0.19)	test_majacc   0.96 (  0.97)	Loss_d 0.313 (0.339)	test_acc_d   0.87 (  0.85)	test_minacc_d   0.31 (  0.19)	test_majacc_d   0.96 (  0.97)	test_corr_d   0.91 (  0.91)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.75it/s]
Test: [  0/  1]	Loss 1.665 (1.665)	test_acc   0.27 (  0.27)	test_minacc   0.20 (  0.20)	test_majacc   0.94 (  0.94)	Loss_d 1.665 (1.665)	test_acc_d   0.27 (  0.27)	test_minacc_d   0.20 (  0.20)	test_majacc_d   0.94 (  0.94)	test_corr_d   0.76 (  0.76)
Test: [  1/  1]	Loss 1.665 (1.665)	test_acc   0.27 (  0.27)	test_minacc   0.20 (  0.20)	test_majacc   0.94 (  0.94)	Loss_d 1.665 (1.665)	test_acc_d   0.27 (  0.27)	test_minacc_d   0.20 (  0.20)	test_majacc_d   0.94 (  0.94)	test_corr_d   0.76 (  0.76)
Overall Timing[  8/  1]	epoch_time 0.0356 (0.0422)	validation_time 0.0003 (0.0011)	train_time 0.0353 (0.0396)
record: (train_acc, test_acc) (0.8518000245094299, 0.29500001668930054)
last accs (train_acc, test_acc) (0.8524000198245049, 0.2720000147819519)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.11it/s] 19%|#9        | 5/26 [00:00<00:00, 23.88it/s] 35%|###4      | 9/26 [00:00<00:00, 28.40it/s] 50%|#####     | 13/26 [00:00<00:00, 31.40it/s] 65%|######5   | 17/26 [00:00<00:00, 33.38it/s] 81%|########  | 21/26 [00:00<00:00, 34.19it/s] 96%|#########6| 25/26 [00:00<00:00, 34.67it/s]100%|##########| 26/26 [00:00<00:00, 29.66it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 234 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 235 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 236 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 237 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 238 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 239 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 240 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 241 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 242 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 243 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 244 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 245 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 246 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 247 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 248 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 249 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 250 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 251 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 252 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 253 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 254 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 255 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 256 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 257 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 258 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 259 400
penalty weights 0.0
Epoch: [9][  26/  26]	Loss 0.558 (0.568)	train_nll   0.37 (  0.35)	train_penalty   0.01 (  0.03)	weight_norm   0.19 (  0.22)	train_acc   0.84 (  0.85)	train_minacc   0.28 (  0.13)	train_majacc   0.94 (  0.98)	train_corr   0.00 (  0.00)	l1 11.2802 (10.3366)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.30it/s] 27%|##6       | 7/26 [00:00<00:00, 31.08it/s]                                               27%|##6       | 7/26 [00:00<00:00, 31.08it/s] 50%|#####     | 13/26 [00:00<00:00, 39.34it/s] 73%|#######3  | 19/26 [00:00<00:00, 45.18it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 45.18it/s] 96%|#########6| 25/26 [00:00<00:00, 47.00it/s]100%|##########| 26/26 [00:00<00:00, 38.41it/s]
Test: [   0/  26]	Loss 0.332 (0.332)	test_acc   0.85 (  0.85)	test_minacc   0.18 (  0.18)	test_majacc   0.97 (  0.97)	Loss_d 0.332 (0.332)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.18 (  0.18)	test_majacc_d   0.97 (  0.97)	test_corr_d   0.89 (  0.89)
Test: [  10/  26]	Loss 0.330 (0.321)	test_acc   0.85 (  0.85)	test_minacc   0.20 (  0.18)	test_majacc   0.97 (  0.97)	Loss_d 0.330 (0.321)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.20 (  0.18)	test_majacc_d   0.97 (  0.97)	test_corr_d   0.91 (  0.91)
Test: [  20/  26]	Loss 0.325 (0.321)	test_acc   0.85 (  0.86)	test_minacc   0.16 (  0.17)	test_majacc   0.98 (  0.97)	Loss_d 0.325 (0.321)	test_acc_d   0.85 (  0.86)	test_minacc_d   0.16 (  0.17)	test_majacc_d   0.98 (  0.97)	test_corr_d   0.91 (  0.91)
Test: [  26/  26]	Loss 0.323 (0.323)	test_acc   0.86 (  0.85)	test_minacc   0.19 (  0.18)	test_majacc   0.97 (  0.97)	Loss_d 0.323 (0.323)	test_acc_d   0.86 (  0.85)	test_minacc_d   0.19 (  0.18)	test_majacc_d   0.97 (  0.97)	test_corr_d   0.92 (  0.91)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.92it/s]
Test: [  0/  1]	Loss 1.744 (1.744)	test_acc   0.21 (  0.21)	test_minacc   0.12 (  0.12)	test_majacc   0.97 (  0.97)	Loss_d 1.744 (1.744)	test_acc_d   0.21 (  0.21)	test_minacc_d   0.12 (  0.12)	test_majacc_d   0.97 (  0.97)	test_corr_d   0.83 (  0.83)
Test: [  1/  1]	Loss 1.744 (1.744)	test_acc   0.21 (  0.21)	test_minacc   0.12 (  0.12)	test_majacc   0.97 (  0.97)	Loss_d 1.744 (1.744)	test_acc_d   0.21 (  0.21)	test_minacc_d   0.12 (  0.12)	test_majacc_d   0.97 (  0.97)	test_corr_d   0.83 (  0.83)
Overall Timing[  9/  1]	epoch_time 0.0375 (0.0417)	validation_time 0.0006 (0.0010)	train_time 0.0369 (0.0393)
record: (train_acc, test_acc) (0.8518000245094299, 0.29500001668930054)
last accs (train_acc, test_acc) (0.8535000275969505, 0.20500001311302185)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.32it/s] 19%|#9        | 5/26 [00:00<00:01, 19.89it/s] 35%|###4      | 9/26 [00:00<00:00, 25.78it/s] 50%|#####     | 13/26 [00:00<00:00, 28.20it/s] 65%|######5   | 17/26 [00:00<00:00, 30.24it/s] 81%|########  | 21/26 [00:00<00:00, 31.45it/s] 96%|#########6| 25/26 [00:00<00:00, 32.99it/s]100%|##########| 26/26 [00:00<00:00, 27.19it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 260 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 261 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 262 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 263 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 264 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 265 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 266 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 267 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 268 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 269 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 270 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 271 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 272 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 273 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 274 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 275 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 276 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 277 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 278 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 279 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 280 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 281 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 282 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 283 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 284 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 285 400
penalty weights 0.0
Epoch: [10][  26/  26]	Loss 0.473 (0.514)	train_nll   0.32 (  0.34)	train_penalty   0.01 (  0.02)	weight_norm   0.15 (  0.18)	train_acc   0.85 (  0.85)	train_minacc   0.44 (  0.18)	train_majacc   0.92 (  0.97)	train_corr   0.00 (  0.00)	l1 13.0975 (12.1987)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.62it/s] 31%|###       | 8/26 [00:00<00:00, 37.29it/s]                                               31%|###       | 8/26 [00:00<00:00, 37.29it/s] 50%|#####     | 13/26 [00:00<00:00, 40.96it/s] 77%|#######6  | 20/26 [00:00<00:00, 47.65it/s]                                                77%|#######6  | 20/26 [00:00<00:00, 47.65it/s] 96%|#########6| 25/26 [00:00<00:00, 48.32it/s]100%|##########| 26/26 [00:00<00:00, 40.19it/s]
Test: [   0/  26]	Loss 0.328 (0.328)	test_acc   0.85 (  0.85)	test_minacc   0.18 (  0.18)	test_majacc   0.98 (  0.98)	Loss_d 0.328 (0.328)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.18 (  0.18)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.93 (  0.93)
Test: [  10/  26]	Loss 0.334 (0.334)	test_acc   0.85 (  0.85)	test_minacc   0.18 (  0.14)	test_majacc   0.97 (  0.98)	Loss_d 0.334 (0.334)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.18 (  0.14)	test_majacc_d   0.97 (  0.98)	test_corr_d   0.94 (  0.94)
Test: [  20/  26]	Loss 0.351 (0.331)	test_acc   0.85 (  0.86)	test_minacc   0.07 (  0.13)	test_majacc   0.99 (  0.98)	Loss_d 0.351 (0.331)	test_acc_d   0.85 (  0.86)	test_minacc_d   0.07 (  0.13)	test_majacc_d   0.99 (  0.98)	test_corr_d   0.95 (  0.94)
Test: [  26/  26]	Loss 0.302 (0.333)	test_acc   0.86 (  0.85)	test_minacc   0.08 (  0.13)	test_majacc   0.99 (  0.98)	Loss_d 0.302 (0.333)	test_acc_d   0.86 (  0.85)	test_minacc_d   0.08 (  0.13)	test_majacc_d   0.99 (  0.98)	test_corr_d   0.94 (  0.94)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.80it/s]
Test: [  0/  1]	Loss 1.801 (1.801)	test_acc   0.19 (  0.19)	test_minacc   0.10 (  0.10)	test_majacc   1.00 (  1.00)	Loss_d 1.801 (1.801)	test_acc_d   0.19 (  0.19)	test_minacc_d   0.10 (  0.10)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.86 (  0.86)
Test: [  1/  1]	Loss 1.801 (1.801)	test_acc   0.19 (  0.19)	test_minacc   0.10 (  0.10)	test_majacc   1.00 (  1.00)	Loss_d 1.801 (1.801)	test_acc_d   0.19 (  0.19)	test_minacc_d   0.10 (  0.10)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.86 (  0.86)
Overall Timing[ 10/  1]	epoch_time 0.0369 (0.0413)	validation_time 0.0003 (0.0010)	train_time 0.0366 (0.0391)
record: (train_acc, test_acc) (0.8518000245094299, 0.29500001668930054)
last accs (train_acc, test_acc) (0.8548000286817551, 0.19100001454353333)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.42it/s] 19%|#9        | 5/26 [00:00<00:01, 20.25it/s] 35%|###4      | 9/26 [00:00<00:00, 25.97it/s] 50%|#####     | 13/26 [00:00<00:00, 28.99it/s] 65%|######5   | 17/26 [00:00<00:00, 30.96it/s] 81%|########  | 21/26 [00:00<00:00, 32.36it/s] 96%|#########6| 25/26 [00:00<00:00, 33.36it/s]100%|##########| 26/26 [00:00<00:00, 27.60it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 286 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 287 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 288 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 289 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 290 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 291 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 292 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 293 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 294 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 295 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 296 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 297 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 298 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 299 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 300 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 301 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 302 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 303 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 304 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 305 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 306 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 307 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 308 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 309 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 310 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 311 400
penalty weights 0.0
Epoch: [11][  26/  26]	Loss 0.473 (0.480)	train_nll   0.34 (  0.34)	train_penalty   0.01 (  0.02)	weight_norm   0.13 (  0.14)	train_acc   0.84 (  0.85)	train_minacc   0.47 (  0.20)	train_majacc   0.91 (  0.96)	train_corr   0.00 (  0.00)	l1 14.6517 (13.9334)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:00, 26.18it/s] 35%|###4      | 9/26 [00:00<00:00, 39.18it/s]                                               35%|###4      | 9/26 [00:00<00:00, 39.18it/s] 58%|#####7    | 15/26 [00:00<00:00, 46.15it/s]                                                58%|#####7    | 15/26 [00:00<00:00, 46.15it/s] 81%|########  | 21/26 [00:00<00:00, 47.52it/s]100%|##########| 26/26 [00:00<00:00, 41.71it/s]
Test: [   0/  26]	Loss 0.327 (0.327)	test_acc   0.85 (  0.85)	test_minacc   0.48 (  0.48)	test_majacc   0.92 (  0.92)	Loss_d 0.327 (0.327)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.48 (  0.48)	test_majacc_d   0.92 (  0.92)	test_corr_d   0.84 (  0.84)
Test: [  10/  26]	Loss 0.315 (0.318)	test_acc   0.86 (  0.85)	test_minacc   0.46 (  0.40)	test_majacc   0.94 (  0.93)	Loss_d 0.315 (0.318)	test_acc_d   0.86 (  0.85)	test_minacc_d   0.46 (  0.40)	test_majacc_d   0.94 (  0.93)	test_corr_d   0.86 (  0.86)
Test: [  20/  26]	Loss 0.316 (0.316)	test_acc   0.86 (  0.86)	test_minacc   0.48 (  0.41)	test_majacc   0.93 (  0.93)	Loss_d 0.316 (0.316)	test_acc_d   0.86 (  0.86)	test_minacc_d   0.48 (  0.41)	test_majacc_d   0.93 (  0.93)	test_corr_d   0.87 (  0.86)
Test: [  26/  26]	Loss 0.295 (0.317)	test_acc   0.87 (  0.86)	test_minacc   0.53 (  0.43)	test_majacc   0.93 (  0.93)	Loss_d 0.295 (0.317)	test_acc_d   0.87 (  0.86)	test_minacc_d   0.53 (  0.43)	test_majacc_d   0.93 (  0.93)	test_corr_d   0.87 (  0.86)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.89it/s]
Test: [  0/  1]	Loss 1.468 (1.468)	test_acc   0.42 (  0.42)	test_minacc   0.37 (  0.37)	test_majacc   0.93 (  0.93)	Loss_d 1.468 (1.468)	test_acc_d   0.42 (  0.42)	test_minacc_d   0.37 (  0.37)	test_majacc_d   0.93 (  0.93)	test_corr_d   0.56 (  0.56)
Test: [  1/  1]	Loss 1.468 (1.468)	test_acc   0.42 (  0.42)	test_minacc   0.37 (  0.37)	test_majacc   0.93 (  0.93)	Loss_d 1.468 (1.468)	test_acc_d   0.42 (  0.42)	test_minacc_d   0.37 (  0.37)	test_majacc_d   0.93 (  0.93)	test_corr_d   0.56 (  0.56)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/28/checkpoints/model_best.pth
Overall Timing[ 11/  1]	epoch_time 0.0365 (0.0409)	validation_time 0.0004 (0.0009)	train_time 0.0360 (0.0388)
record: (train_acc, test_acc) (0.858700021982193, 0.4240000247955322)
last accs (train_acc, test_acc) (0.858700021982193, 0.4240000247955322)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.62it/s] 19%|#9        | 5/26 [00:00<00:00, 23.49it/s] 35%|###4      | 9/26 [00:00<00:00, 28.19it/s] 50%|#####     | 13/26 [00:00<00:00, 30.67it/s] 65%|######5   | 17/26 [00:00<00:00, 31.68it/s] 81%|########  | 21/26 [00:00<00:00, 32.99it/s] 96%|#########6| 25/26 [00:00<00:00, 33.30it/s]100%|##########| 26/26 [00:00<00:00, 28.62it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 312 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 313 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 314 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 315 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 316 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 317 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 318 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 319 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 320 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 321 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 322 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 323 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 324 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 325 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 326 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 327 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 328 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 329 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 330 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 331 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 332 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 333 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 334 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 335 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 336 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 337 400
penalty weights 0.0
Epoch: [12][  26/  26]	Loss 0.435 (0.454)	train_nll   0.32 (  0.33)	train_penalty   0.01 (  0.02)	weight_norm   0.11 (  0.12)	train_acc   0.87 (  0.85)	train_minacc   0.47 (  0.25)	train_majacc   0.93 (  0.96)	train_corr   0.00 (  0.00)	l1 16.3309 (15.6068)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.52it/s] 23%|##3       | 6/26 [00:00<00:00, 32.72it/s]                                               23%|##3       | 6/26 [00:00<00:00, 32.72it/s] 46%|####6     | 12/26 [00:00<00:00, 43.68it/s] 65%|######5   | 17/26 [00:00<00:00, 45.12it/s]                                                65%|######5   | 17/26 [00:00<00:00, 45.12it/s] 88%|########8 | 23/26 [00:00<00:00, 49.51it/s]100%|##########| 26/26 [00:00<00:00, 40.67it/s]
Test: [   0/  26]	Loss 0.297 (0.297)	test_acc   0.86 (  0.86)	test_minacc   0.40 (  0.40)	test_majacc   0.94 (  0.94)	Loss_d 0.297 (0.297)	test_acc_d   0.86 (  0.86)	test_minacc_d   0.40 (  0.40)	test_majacc_d   0.94 (  0.94)	test_corr_d   0.87 (  0.87)
Test: [  10/  26]	Loss 0.321 (0.305)	test_acc   0.85 (  0.86)	test_minacc   0.36 (  0.34)	test_majacc   0.94 (  0.96)	Loss_d 0.321 (0.305)	test_acc_d   0.85 (  0.86)	test_minacc_d   0.36 (  0.34)	test_majacc_d   0.94 (  0.96)	test_corr_d   0.88 (  0.89)
Test: [  20/  26]	Loss 0.323 (0.305)	test_acc   0.86 (  0.87)	test_minacc   0.31 (  0.34)	test_majacc   0.96 (  0.96)	Loss_d 0.323 (0.305)	test_acc_d   0.86 (  0.87)	test_minacc_d   0.31 (  0.34)	test_majacc_d   0.96 (  0.96)	test_corr_d   0.89 (  0.89)
Test: [  26/  26]	Loss 0.272 (0.305)	test_acc   0.89 (  0.87)	test_minacc   0.44 (  0.35)	test_majacc   0.96 (  0.96)	Loss_d 0.272 (0.305)	test_acc_d   0.89 (  0.87)	test_minacc_d   0.44 (  0.35)	test_majacc_d   0.96 (  0.96)	test_corr_d   0.89 (  0.89)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.67it/s]
Test: [  0/  1]	Loss 1.533 (1.533)	test_acc   0.30 (  0.30)	test_minacc   0.22 (  0.22)	test_majacc   0.98 (  0.98)	Loss_d 1.533 (1.533)	test_acc_d   0.30 (  0.30)	test_minacc_d   0.22 (  0.22)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.68 (  0.68)
Test: [  1/  1]	Loss 1.533 (1.533)	test_acc   0.30 (  0.30)	test_minacc   0.22 (  0.22)	test_majacc   0.98 (  0.98)	Loss_d 1.533 (1.533)	test_acc_d   0.30 (  0.30)	test_minacc_d   0.22 (  0.22)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.68 (  0.68)
Overall Timing[ 12/  1]	epoch_time 0.0367 (0.0406)	validation_time 0.0004 (0.0009)	train_time 0.0362 (0.0386)
record: (train_acc, test_acc) (0.858700021982193, 0.4240000247955322)
last accs (train_acc, test_acc) (0.8657000247240066, 0.30000001192092896)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.21it/s] 19%|#9        | 5/26 [00:00<00:01, 20.96it/s] 35%|###4      | 9/26 [00:00<00:00, 26.34it/s] 50%|#####     | 13/26 [00:00<00:00, 29.31it/s] 65%|######5   | 17/26 [00:00<00:00, 31.06it/s] 81%|########  | 21/26 [00:00<00:00, 32.57it/s] 96%|#########6| 25/26 [00:00<00:00, 33.52it/s]100%|##########| 26/26 [00:00<00:00, 27.97it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 338 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 339 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 340 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 341 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 342 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 343 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 344 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 345 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 346 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 347 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 348 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 349 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 350 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 351 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 352 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 353 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 354 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 355 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 356 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 357 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 358 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 359 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 360 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 361 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 362 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 363 400
penalty weights 0.0
Epoch: [13][  26/  26]	Loss 0.396 (0.427)	train_nll   0.29 (  0.32)	train_penalty   0.01 (  0.02)	weight_norm   0.10 (  0.10)	train_acc   0.87 (  0.85)	train_minacc   0.44 (  0.28)	train_majacc   0.94 (  0.95)	train_corr   0.00 (  0.00)	l1 17.7130 (17.0279)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.28it/s] 27%|##6       | 7/26 [00:00<00:00, 33.22it/s]                                               27%|##6       | 7/26 [00:00<00:00, 33.22it/s] 50%|#####     | 13/26 [00:00<00:00, 40.02it/s] 73%|#######3  | 19/26 [00:00<00:00, 46.76it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 46.76it/s] 96%|#########6| 25/26 [00:00<00:00, 47.65it/s]100%|##########| 26/26 [00:00<00:00, 38.46it/s]
Test: [   0/  26]	Loss 0.317 (0.317)	test_acc   0.85 (  0.85)	test_minacc   0.18 (  0.18)	test_majacc   0.97 (  0.97)	Loss_d 0.317 (0.317)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.18 (  0.18)	test_majacc_d   0.97 (  0.97)	test_corr_d   0.90 (  0.90)
Test: [  10/  26]	Loss 0.322 (0.323)	test_acc   0.86 (  0.86)	test_minacc   0.28 (  0.21)	test_majacc   0.97 (  0.97)	Loss_d 0.322 (0.323)	test_acc_d   0.86 (  0.86)	test_minacc_d   0.28 (  0.21)	test_majacc_d   0.97 (  0.97)	test_corr_d   0.89 (  0.90)
Test: [  20/  26]	Loss 0.334 (0.320)	test_acc   0.85 (  0.86)	test_minacc   0.16 (  0.20)	test_majacc   0.97 (  0.97)	Loss_d 0.334 (0.320)	test_acc_d   0.85 (  0.86)	test_minacc_d   0.16 (  0.20)	test_majacc_d   0.97 (  0.97)	test_corr_d   0.91 (  0.91)
Test: [  26/  26]	Loss 0.287 (0.321)	test_acc   0.88 (  0.86)	test_minacc   0.33 (  0.21)	test_majacc   0.97 (  0.97)	Loss_d 0.287 (0.321)	test_acc_d   0.88 (  0.86)	test_minacc_d   0.33 (  0.21)	test_majacc_d   0.97 (  0.97)	test_corr_d   0.89 (  0.90)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 64.70it/s]
Test: [  0/  1]	Loss 1.653 (1.653)	test_acc   0.23 (  0.23)	test_minacc   0.14 (  0.14)	test_majacc   0.96 (  0.96)	Loss_d 1.653 (1.653)	test_acc_d   0.23 (  0.23)	test_minacc_d   0.14 (  0.14)	test_majacc_d   0.96 (  0.96)	test_corr_d   0.77 (  0.77)
Test: [  1/  1]	Loss 1.653 (1.653)	test_acc   0.23 (  0.23)	test_minacc   0.14 (  0.14)	test_majacc   0.96 (  0.96)	Loss_d 1.653 (1.653)	test_acc_d   0.23 (  0.23)	test_minacc_d   0.14 (  0.14)	test_majacc_d   0.96 (  0.96)	test_corr_d   0.77 (  0.77)
Overall Timing[ 13/  1]	epoch_time 0.0370 (0.0403)	validation_time 0.0003 (0.0008)	train_time 0.0367 (0.0385)
record: (train_acc, test_acc) (0.858700021982193, 0.4240000247955322)
last accs (train_acc, test_acc) (0.8569000271558762, 0.22500000894069672)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.52it/s] 19%|#9        | 5/26 [00:00<00:00, 22.14it/s] 35%|###4      | 9/26 [00:00<00:00, 27.10it/s] 50%|#####     | 13/26 [00:00<00:00, 30.19it/s] 65%|######5   | 17/26 [00:00<00:00, 31.88it/s] 81%|########  | 21/26 [00:00<00:00, 32.98it/s] 96%|#########6| 25/26 [00:00<00:00, 33.19it/s]100%|##########| 26/26 [00:00<00:00, 28.37it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 364 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 365 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 366 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 367 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 368 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 369 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 370 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 371 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 372 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 373 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 374 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 375 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 376 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 377 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 378 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 379 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 380 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 381 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 382 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 383 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 384 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 385 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 386 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 387 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 388 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 389 400
penalty weights 0.0
Epoch: [14][  26/  26]	Loss 0.407 (0.430)	train_nll   0.31 (  0.33)	train_penalty   0.01 (  0.02)	weight_norm   0.10 (  0.10)	train_acc   0.87 (  0.86)	train_minacc   0.36 (  0.27)	train_majacc   0.95 (  0.96)	train_corr   0.00 (  0.00)	l1 18.4887 (18.1200)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 19.85it/s] 27%|##6       | 7/26 [00:00<00:00, 36.69it/s]                                               27%|##6       | 7/26 [00:00<00:00, 36.69it/s] 50%|#####     | 13/26 [00:00<00:00, 45.47it/s] 73%|#######3  | 19/26 [00:00<00:00, 47.66it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 47.66it/s] 96%|#########6| 25/26 [00:00<00:00, 50.98it/s]100%|##########| 26/26 [00:00<00:00, 42.44it/s]
Test: [   0/  26]	Loss 0.308 (0.308)	test_acc   0.85 (  0.85)	test_minacc   0.13 (  0.13)	test_majacc   0.98 (  0.98)	Loss_d 0.308 (0.308)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.13 (  0.13)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.92 (  0.92)
Test: [  10/  26]	Loss 0.318 (0.311)	test_acc   0.85 (  0.85)	test_minacc   0.16 (  0.11)	test_majacc   0.98 (  0.99)	Loss_d 0.318 (0.311)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.16 (  0.11)	test_majacc_d   0.98 (  0.99)	test_corr_d   0.92 (  0.93)
Test: [  20/  26]	Loss 0.329 (0.311)	test_acc   0.86 (  0.86)	test_minacc   0.11 (  0.11)	test_majacc   0.99 (  0.99)	Loss_d 0.329 (0.311)	test_acc_d   0.86 (  0.86)	test_minacc_d   0.11 (  0.11)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.94 (  0.93)
Test: [  26/  26]	Loss 0.288 (0.313)	test_acc   0.88 (  0.85)	test_minacc   0.19 (  0.11)	test_majacc   0.99 (  0.99)	Loss_d 0.288 (0.313)	test_acc_d   0.88 (  0.85)	test_minacc_d   0.19 (  0.11)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.92 (  0.93)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.06it/s]
Test: [  0/  1]	Loss 1.507 (1.507)	test_acc   0.21 (  0.21)	test_minacc   0.12 (  0.12)	test_majacc   0.97 (  0.97)	Loss_d 1.507 (1.507)	test_acc_d   0.21 (  0.21)	test_minacc_d   0.12 (  0.12)	test_majacc_d   0.97 (  0.97)	test_corr_d   0.79 (  0.79)
Test: [  1/  1]	Loss 1.507 (1.507)	test_acc   0.21 (  0.21)	test_minacc   0.12 (  0.12)	test_majacc   0.97 (  0.97)	Loss_d 1.507 (1.507)	test_acc_d   0.21 (  0.21)	test_minacc_d   0.12 (  0.12)	test_majacc_d   0.97 (  0.97)	test_corr_d   0.79 (  0.79)
Overall Timing[ 14/  1]	epoch_time 0.0382 (0.0402)	validation_time 0.0004 (0.0008)	train_time 0.0378 (0.0384)
record: (train_acc, test_acc) (0.858700021982193, 0.4240000247955322)
last accs (train_acc, test_acc) (0.8546000201106071, 0.20600001513957977)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.36it/s] 19%|#9        | 5/26 [00:00<00:01, 20.15it/s] 35%|###4      | 9/26 [00:00<00:00, 25.83it/s] 50%|#####     | 13/26 [00:00<00:00, 29.03it/s] 65%|######5   | 17/26 [00:00<00:00, 30.36it/s] 81%|########  | 21/26 [00:00<00:00, 31.72it/s] 96%|#########6| 25/26 [00:00<00:00, 32.43it/s]100%|##########| 26/26 [00:00<00:00, 26.98it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 390 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 391 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 392 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 393 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 394 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 395 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 396 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 397 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 398 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 399 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 400 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 401 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 402 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 403 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 404 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 405 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 406 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 407 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 408 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 409 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 410 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 411 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 412 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 413 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 414 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 415 400
penalty weights 10000.0
Epoch: [15][  26/  26]	Loss 0.005 (0.164)	train_nll   0.64 (  0.41)	train_penalty   0.01 (  0.01)	weight_norm   0.13 (  0.10)	train_acc   0.60 (  0.79)	train_minacc   0.83 (  0.51)	train_majacc   0.56 (  0.84)	train_corr   0.00 (  0.00)	l1 18.9567 (18.9871)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 19.22it/s] 31%|###       | 8/26 [00:00<00:00, 38.77it/s]                                               31%|###       | 8/26 [00:00<00:00, 38.77it/s] 54%|#####3    | 14/26 [00:00<00:00, 45.43it/s] 77%|#######6  | 20/26 [00:00<00:00, 46.83it/s]                                                77%|#######6  | 20/26 [00:00<00:00, 46.83it/s]100%|##########| 26/26 [00:00<00:00, 50.74it/s]100%|##########| 26/26 [00:00<00:00, 41.28it/s]
Test: [   0/  26]	Loss 0.620 (0.620)	test_acc   0.65 (  0.65)	test_minacc   0.80 (  0.80)	test_majacc   0.62 (  0.62)	Loss_d 0.620 (0.620)	test_acc_d   0.65 (  0.65)	test_minacc_d   0.80 (  0.80)	test_majacc_d   0.62 (  0.62)	test_corr_d   0.19 (  0.19)
Test: [  10/  26]	Loss 0.623 (0.628)	test_acc   0.65 (  0.64)	test_minacc   0.85 (  0.84)	test_majacc   0.62 (  0.60)	Loss_d 0.623 (0.628)	test_acc_d   0.65 (  0.64)	test_minacc_d   0.85 (  0.84)	test_majacc_d   0.62 (  0.60)	test_corr_d   0.14 (  0.14)
Test: [  20/  26]	Loss 0.634 (0.635)	test_acc   0.62 (  0.63)	test_minacc   0.75 (  0.82)	test_majacc   0.59 (  0.60)	Loss_d 0.634 (0.635)	test_acc_d   0.62 (  0.63)	test_minacc_d   0.75 (  0.82)	test_majacc_d   0.59 (  0.60)	test_corr_d   0.18 (  0.14)
Test: [  26/  26]	Loss 0.623 (0.634)	test_acc   0.63 (  0.63)	test_minacc   0.83 (  0.82)	test_majacc   0.60 (  0.60)	Loss_d 0.623 (0.634)	test_acc_d   0.63 (  0.63)	test_minacc_d   0.83 (  0.82)	test_majacc_d   0.60 (  0.60)	test_corr_d   0.16 (  0.14)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.74it/s]
Test: [  0/  1]	Loss 0.589 (0.589)	test_acc   0.71 (  0.71)	test_minacc   0.73 (  0.73)	test_majacc   0.58 (  0.58)	Loss_d 0.589 (0.589)	test_acc_d   0.71 (  0.71)	test_minacc_d   0.73 (  0.73)	test_majacc_d   0.58 (  0.58)	test_corr_d  -0.45 ( -0.45)
Test: [  1/  1]	Loss 0.589 (0.589)	test_acc   0.71 (  0.71)	test_minacc   0.73 (  0.73)	test_majacc   0.58 (  0.58)	Loss_d 0.589 (0.589)	test_acc_d   0.71 (  0.71)	test_minacc_d   0.73 (  0.73)	test_majacc_d   0.58 (  0.58)	test_corr_d  -0.45 ( -0.45)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/28/checkpoints/model_best.pth
Overall Timing[ 15/  1]	epoch_time 0.0373 (0.0400)	validation_time 0.0003 (0.0008)	train_time 0.0370 (0.0384)
record: (train_acc, test_acc) (0.6315000070333481, 0.7120000123977661)
last accs (train_acc, test_acc) (0.6315000070333481, 0.7120000123977661)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 16.21it/s] 23%|##3       | 6/26 [00:00<00:00, 26.76it/s] 38%|###8      | 10/26 [00:00<00:00, 31.02it/s] 54%|#####3    | 14/26 [00:00<00:00, 33.05it/s] 69%|######9   | 18/26 [00:00<00:00, 34.41it/s] 85%|########4 | 22/26 [00:00<00:00, 35.12it/s]100%|##########| 26/26 [00:00<00:00, 35.93it/s]100%|##########| 26/26 [00:00<00:00, 30.54it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 416 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 417 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 418 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 419 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 420 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 421 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 422 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 423 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 424 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 425 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 426 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 427 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 428 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 429 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 430 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 431 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 432 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 433 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 434 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 435 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 436 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 437 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 438 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 439 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 440 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 441 400
penalty weights 10000.0
Epoch: [16][  26/  26]	Loss 0.000 (0.001)	train_nll   0.64 (  0.63)	train_penalty   0.00 (  0.00)	weight_norm   0.15 (  0.14)	train_acc   0.60 (  0.63)	train_minacc   0.56 (  0.70)	train_majacc   0.61 (  0.62)	train_corr   0.00 (  0.00)	l1 18.7201 (18.8036)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.91it/s] 27%|##6       | 7/26 [00:00<00:00, 34.80it/s]                                               27%|##6       | 7/26 [00:00<00:00, 34.80it/s] 50%|#####     | 13/26 [00:00<00:00, 40.41it/s] 73%|#######3  | 19/26 [00:00<00:00, 46.21it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 46.21it/s] 96%|#########6| 25/26 [00:00<00:00, 46.43it/s]100%|##########| 26/26 [00:00<00:00, 38.96it/s]
Test: [   0/  26]	Loss 0.637 (0.637)	test_acc   0.64 (  0.64)	test_minacc   0.63 (  0.63)	test_majacc   0.64 (  0.64)	Loss_d 0.637 (0.637)	test_acc_d   0.64 (  0.64)	test_minacc_d   0.63 (  0.63)	test_majacc_d   0.64 (  0.64)	test_corr_d   0.32 (  0.32)
Test: [  10/  26]	Loss 0.632 (0.641)	test_acc   0.63 (  0.62)	test_minacc   0.62 (  0.62)	test_majacc   0.63 (  0.62)	Loss_d 0.632 (0.641)	test_acc_d   0.63 (  0.62)	test_minacc_d   0.62 (  0.62)	test_majacc_d   0.63 (  0.62)	test_corr_d   0.36 (  0.30)
Test: [  20/  26]	Loss 0.639 (0.642)	test_acc   0.63 (  0.62)	test_minacc   0.56 (  0.60)	test_majacc   0.64 (  0.62)	Loss_d 0.639 (0.642)	test_acc_d   0.63 (  0.62)	test_minacc_d   0.56 (  0.60)	test_majacc_d   0.64 (  0.62)	test_corr_d   0.34 (  0.31)
Test: [  26/  26]	Loss 0.635 (0.640)	test_acc   0.60 (  0.62)	test_minacc   0.56 (  0.60)	test_majacc   0.61 (  0.63)	Loss_d 0.635 (0.640)	test_acc_d   0.60 (  0.62)	test_minacc_d   0.56 (  0.60)	test_majacc_d   0.61 (  0.63)	test_corr_d   0.34 (  0.31)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.75it/s]
Test: [  0/  1]	Loss 0.708 (0.708)	test_acc   0.55 (  0.55)	test_minacc   0.55 (  0.55)	test_majacc   0.58 (  0.58)	Loss_d 0.708 (0.708)	test_acc_d   0.55 (  0.55)	test_minacc_d   0.55 (  0.55)	test_majacc_d   0.58 (  0.58)	test_corr_d  -0.07 ( -0.07)
Test: [  1/  1]	Loss 0.708 (0.708)	test_acc   0.55 (  0.55)	test_minacc   0.55 (  0.55)	test_majacc   0.58 (  0.58)	Loss_d 0.708 (0.708)	test_acc_d   0.55 (  0.55)	test_minacc_d   0.55 (  0.55)	test_majacc_d   0.58 (  0.58)	test_corr_d  -0.07 ( -0.07)
Overall Timing[ 16/  1]	epoch_time 0.0376 (0.0399)	validation_time 0.0006 (0.0008)	train_time 0.0370 (0.0383)
record: (train_acc, test_acc) (0.6315000070333481, 0.7120000123977661)
last accs (train_acc, test_acc) (0.6216000109314919, 0.5490000247955322)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.45it/s] 19%|#9        | 5/26 [00:00<00:01, 18.55it/s] 35%|###4      | 9/26 [00:00<00:00, 24.76it/s] 50%|#####     | 13/26 [00:00<00:00, 28.51it/s] 65%|######5   | 17/26 [00:00<00:00, 30.84it/s] 81%|########  | 21/26 [00:00<00:00, 32.34it/s] 96%|#########6| 25/26 [00:00<00:00, 33.00it/s]100%|##########| 26/26 [00:00<00:00, 26.85it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 442 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 443 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 444 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 445 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 446 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 447 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 448 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 449 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 450 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 451 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 452 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 453 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 454 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 455 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 456 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 457 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 458 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 459 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 460 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 461 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 462 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 463 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 464 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 465 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 466 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 467 400
penalty weights 10000.0
Epoch: [17][  26/  26]	Loss 0.002 (0.001)	train_nll   0.69 (  0.65)	train_penalty   0.00 (  0.00)	weight_norm   0.15 (  0.15)	train_acc   0.54 (  0.61)	train_minacc   0.61 (  0.63)	train_majacc   0.53 (  0.61)	train_corr   0.00 (  0.00)	l1 18.6151 (18.6587)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 19.11it/s] 27%|##6       | 7/26 [00:00<00:00, 35.09it/s]                                               27%|##6       | 7/26 [00:00<00:00, 35.09it/s] 46%|####6     | 12/26 [00:00<00:00, 40.75it/s] 69%|######9   | 18/26 [00:00<00:00, 46.47it/s]                                                69%|######9   | 18/26 [00:00<00:00, 46.47it/s] 92%|#########2| 24/26 [00:00<00:00, 48.41it/s]100%|##########| 26/26 [00:00<00:00, 41.03it/s]
Test: [   0/  26]	Loss 0.683 (0.683)	test_acc   0.58 (  0.58)	test_minacc   0.65 (  0.65)	test_majacc   0.57 (  0.57)	Loss_d 0.683 (0.683)	test_acc_d   0.58 (  0.58)	test_minacc_d   0.65 (  0.65)	test_majacc_d   0.57 (  0.57)	test_corr_d   0.09 (  0.09)
Test: [  10/  26]	Loss 0.680 (0.688)	test_acc   0.57 (  0.57)	test_minacc   0.66 (  0.67)	test_majacc   0.56 (  0.55)	Loss_d 0.680 (0.688)	test_acc_d   0.57 (  0.57)	test_minacc_d   0.66 (  0.67)	test_majacc_d   0.56 (  0.55)	test_corr_d   0.10 (  0.06)
Test: [  20/  26]	Loss 0.686 (0.689)	test_acc   0.57 (  0.57)	test_minacc   0.61 (  0.65)	test_majacc   0.57 (  0.56)	Loss_d 0.686 (0.689)	test_acc_d   0.57 (  0.57)	test_minacc_d   0.61 (  0.65)	test_majacc_d   0.57 (  0.56)	test_corr_d   0.08 (  0.06)
Test: [  26/  26]	Loss 0.680 (0.687)	test_acc   0.56 (  0.57)	test_minacc   0.61 (  0.65)	test_majacc   0.56 (  0.56)	Loss_d 0.680 (0.687)	test_acc_d   0.56 (  0.57)	test_minacc_d   0.61 (  0.65)	test_majacc_d   0.56 (  0.56)	test_corr_d   0.12 (  0.06)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.62it/s]
Test: [  0/  1]	Loss 0.664 (0.664)	test_acc   0.60 (  0.60)	test_minacc   0.60 (  0.60)	test_majacc   0.56 (  0.56)	Loss_d 0.664 (0.664)	test_acc_d   0.60 (  0.60)	test_minacc_d   0.60 (  0.60)	test_majacc_d   0.56 (  0.56)	test_corr_d  -0.30 ( -0.30)
Test: [  1/  1]	Loss 0.664 (0.664)	test_acc   0.60 (  0.60)	test_minacc   0.60 (  0.60)	test_majacc   0.56 (  0.56)	Loss_d 0.664 (0.664)	test_acc_d   0.60 (  0.60)	test_minacc_d   0.60 (  0.60)	test_majacc_d   0.56 (  0.56)	test_corr_d  -0.30 ( -0.30)
Overall Timing[ 17/  1]	epoch_time 0.0388 (0.0398)	validation_time 0.0004 (0.0007)	train_time 0.0383 (0.0383)
record: (train_acc, test_acc) (0.6315000070333481, 0.7120000123977661)
last accs (train_acc, test_acc) (0.5736000099182129, 0.5950000286102295)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.57it/s] 19%|#9        | 5/26 [00:00<00:00, 22.90it/s] 35%|###4      | 9/26 [00:00<00:00, 27.74it/s] 50%|#####     | 13/26 [00:00<00:00, 30.54it/s] 65%|######5   | 17/26 [00:00<00:00, 32.42it/s] 81%|########  | 21/26 [00:00<00:00, 33.68it/s] 96%|#########6| 25/26 [00:00<00:00, 34.03it/s]100%|##########| 26/26 [00:00<00:00, 28.75it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 468 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 469 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 470 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 471 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 472 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 473 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 474 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 475 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 476 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 477 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 478 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 479 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 480 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 481 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 482 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 483 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 484 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 485 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 486 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 487 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 488 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 489 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 490 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 491 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 492 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 493 400
penalty weights 10000.0
Epoch: [18][  26/  26]	Loss 0.001 (0.000)	train_nll   0.68 (  0.65)	train_penalty   0.00 (  0.00)	weight_norm   0.15 (  0.15)	train_acc   0.57 (  0.61)	train_minacc   0.58 (  0.61)	train_majacc   0.57 (  0.61)	train_corr   0.00 (  0.00)	l1 18.5132 (18.5372)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s] 15%|#5        | 4/26 [00:00<00:00, 36.44it/s] 35%|###4      | 9/26 [00:00<00:00, 41.69it/s]                                               35%|###4      | 9/26 [00:00<00:00, 41.69it/s] 58%|#####7    | 15/26 [00:00<00:00, 48.63it/s]                                                58%|#####7    | 15/26 [00:00<00:00, 48.63it/s] 81%|########  | 21/26 [00:00<00:00, 48.78it/s]100%|##########| 26/26 [00:00<00:00, 44.18it/s]
Test: [   0/  26]	Loss 0.686 (0.686)	test_acc   0.58 (  0.58)	test_minacc   0.63 (  0.63)	test_majacc   0.57 (  0.57)	Loss_d 0.686 (0.686)	test_acc_d   0.58 (  0.58)	test_minacc_d   0.63 (  0.63)	test_majacc_d   0.57 (  0.57)	test_corr_d   0.09 (  0.09)
Test: [  10/  26]	Loss 0.685 (0.692)	test_acc   0.57 (  0.57)	test_minacc   0.64 (  0.64)	test_majacc   0.56 (  0.56)	Loss_d 0.685 (0.692)	test_acc_d   0.57 (  0.57)	test_minacc_d   0.64 (  0.64)	test_majacc_d   0.56 (  0.56)	test_corr_d   0.09 (  0.05)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.56 (  0.57)	test_minacc   0.59 (  0.62)	test_majacc   0.56 (  0.56)	Loss_d 0.693 (0.693)	test_acc_d   0.56 (  0.57)	test_minacc_d   0.59 (  0.62)	test_majacc_d   0.56 (  0.56)	test_corr_d   0.07 (  0.06)
Test: [  26/  26]	Loss 0.680 (0.690)	test_acc   0.56 (  0.58)	test_minacc   0.58 (  0.62)	test_majacc   0.56 (  0.57)	Loss_d 0.680 (0.690)	test_acc_d   0.56 (  0.58)	test_minacc_d   0.58 (  0.62)	test_majacc_d   0.56 (  0.57)	test_corr_d   0.13 (  0.06)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.97it/s]
Test: [  0/  1]	Loss 0.674 (0.674)	test_acc   0.57 (  0.57)	test_minacc   0.57 (  0.57)	test_majacc   0.56 (  0.56)	Loss_d 0.674 (0.674)	test_acc_d   0.57 (  0.57)	test_minacc_d   0.57 (  0.57)	test_majacc_d   0.56 (  0.56)	test_corr_d  -0.26 ( -0.26)
Test: [  1/  1]	Loss 0.674 (0.674)	test_acc   0.57 (  0.57)	test_minacc   0.57 (  0.57)	test_majacc   0.56 (  0.56)	Loss_d 0.674 (0.674)	test_acc_d   0.57 (  0.57)	test_minacc_d   0.57 (  0.57)	test_majacc_d   0.56 (  0.56)	test_corr_d  -0.26 ( -0.26)
Overall Timing[ 18/  1]	epoch_time 0.0368 (0.0396)	validation_time 0.0006 (0.0007)	train_time 0.0362 (0.0382)
record: (train_acc, test_acc) (0.6315000070333481, 0.7120000123977661)
last accs (train_acc, test_acc) (0.5759000086188316, 0.5700000524520874)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.67it/s] 19%|#9        | 5/26 [00:00<00:00, 22.23it/s] 35%|###4      | 9/26 [00:00<00:00, 27.60it/s] 50%|#####     | 13/26 [00:00<00:00, 30.91it/s] 65%|######5   | 17/26 [00:00<00:00, 31.98it/s] 81%|########  | 21/26 [00:00<00:00, 33.24it/s] 96%|#########6| 25/26 [00:00<00:00, 33.16it/s]100%|##########| 26/26 [00:00<00:00, 28.51it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 494 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 495 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 496 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 497 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 498 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 499 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 500 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 501 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 502 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 503 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 504 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 505 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 506 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 507 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 508 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 509 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 510 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 511 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 512 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 513 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 514 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 515 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 516 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 517 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 518 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 519 400
penalty weights 10000.0
Epoch: [19][  26/  26]	Loss 0.000 (0.001)	train_nll   0.67 (  0.66)	train_penalty   0.00 (  0.00)	weight_norm   0.15 (  0.15)	train_acc   0.60 (  0.60)	train_minacc   0.61 (  0.61)	train_majacc   0.60 (  0.60)	train_corr   0.00 (  0.00)	l1 18.4087 (18.4485)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.02it/s] 27%|##6       | 7/26 [00:00<00:00, 34.28it/s]                                               27%|##6       | 7/26 [00:00<00:00, 34.28it/s] 46%|####6     | 12/26 [00:00<00:00, 39.98it/s] 65%|######5   | 17/26 [00:00<00:00, 42.94it/s]                                                65%|######5   | 17/26 [00:00<00:00, 42.94it/s] 88%|########8 | 23/26 [00:00<00:00, 47.67it/s]100%|##########| 26/26 [00:00<00:00, 38.79it/s]
Test: [   0/  26]	Loss 0.691 (0.691)	test_acc   0.58 (  0.58)	test_minacc   0.62 (  0.62)	test_majacc   0.58 (  0.58)	Loss_d 0.691 (0.691)	test_acc_d   0.58 (  0.58)	test_minacc_d   0.62 (  0.62)	test_majacc_d   0.58 (  0.58)	test_corr_d   0.04 (  0.04)
Test: [  10/  26]	Loss 0.690 (0.698)	test_acc   0.57 (  0.55)	test_minacc   0.67 (  0.68)	test_majacc   0.55 (  0.53)	Loss_d 0.690 (0.698)	test_acc_d   0.57 (  0.55)	test_minacc_d   0.67 (  0.68)	test_majacc_d   0.55 (  0.53)	test_corr_d   0.02 ( -0.01)
Test: [  20/  26]	Loss 0.702 (0.699)	test_acc   0.56 (  0.55)	test_minacc   0.61 (  0.65)	test_majacc   0.55 (  0.54)	Loss_d 0.702 (0.699)	test_acc_d   0.56 (  0.55)	test_minacc_d   0.61 (  0.65)	test_majacc_d   0.55 (  0.54)	test_corr_d  -0.01 ( -0.00)
Test: [  26/  26]	Loss 0.682 (0.697)	test_acc   0.57 (  0.56)	test_minacc   0.61 (  0.65)	test_majacc   0.57 (  0.54)	Loss_d 0.682 (0.697)	test_acc_d   0.57 (  0.56)	test_minacc_d   0.61 (  0.65)	test_majacc_d   0.57 (  0.54)	test_corr_d   0.09 (  0.00)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 64.72it/s]
Test: [  0/  1]	Loss 0.665 (0.665)	test_acc   0.59 (  0.59)	test_minacc   0.59 (  0.59)	test_majacc   0.52 (  0.52)	Loss_d 0.665 (0.665)	test_acc_d   0.59 (  0.59)	test_minacc_d   0.59 (  0.59)	test_majacc_d   0.52 (  0.52)	test_corr_d  -0.28 ( -0.28)
Test: [  1/  1]	Loss 0.665 (0.665)	test_acc   0.59 (  0.59)	test_minacc   0.59 (  0.59)	test_majacc   0.52 (  0.52)	Loss_d 0.665 (0.665)	test_acc_d   0.59 (  0.59)	test_minacc_d   0.59 (  0.59)	test_majacc_d   0.52 (  0.52)	test_corr_d  -0.28 ( -0.28)
Overall Timing[ 19/  1]	epoch_time 0.0365 (0.0395)	validation_time 0.0003 (0.0007)	train_time 0.0361 (0.0381)
record: (train_acc, test_acc) (0.6315000070333481, 0.7120000123977661)
last accs (train_acc, test_acc) (0.5561000125408173, 0.5870000123977661)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.50it/s] 19%|#9        | 5/26 [00:00<00:00, 24.07it/s] 35%|###4      | 9/26 [00:00<00:00, 28.82it/s] 46%|####6     | 12/26 [00:00<00:00, 28.83it/s] 62%|######1   | 16/26 [00:00<00:00, 30.39it/s] 77%|#######6  | 20/26 [00:00<00:00, 31.85it/s] 92%|#########2| 24/26 [00:00<00:00, 32.52it/s]100%|##########| 26/26 [00:00<00:00, 28.09it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 520 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 521 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 522 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 523 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 524 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 525 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 526 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 527 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 528 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 529 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 530 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 531 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 532 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 533 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 534 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 535 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 536 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 537 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 538 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 539 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 540 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 541 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 542 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 543 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 544 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 545 400
penalty weights 10000.0
Epoch: [20][  26/  26]	Loss 0.001 (0.001)	train_nll   0.64 (  0.66)	train_penalty   0.00 (  0.00)	weight_norm   0.15 (  0.15)	train_acc   0.61 (  0.59)	train_minacc   0.56 (  0.63)	train_majacc   0.62 (  0.59)	train_corr   0.00 (  0.00)	l1 18.2453 (18.3230)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 19.92it/s] 31%|###       | 8/26 [00:00<00:00, 40.62it/s]                                               31%|###       | 8/26 [00:00<00:00, 40.62it/s] 50%|#####     | 13/26 [00:00<00:00, 42.99it/s] 73%|#######3  | 19/26 [00:00<00:00, 47.17it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 47.17it/s] 96%|#########6| 25/26 [00:00<00:00, 48.53it/s]100%|##########| 26/26 [00:00<00:00, 41.13it/s]
Test: [   0/  26]	Loss 0.663 (0.663)	test_acc   0.63 (  0.63)	test_minacc   0.65 (  0.65)	test_majacc   0.62 (  0.62)	Loss_d 0.663 (0.663)	test_acc_d   0.63 (  0.63)	test_minacc_d   0.65 (  0.65)	test_majacc_d   0.62 (  0.62)	test_corr_d   0.18 (  0.18)
Test: [  10/  26]	Loss 0.663 (0.670)	test_acc   0.59 (  0.58)	test_minacc   0.70 (  0.65)	test_majacc   0.57 (  0.56)	Loss_d 0.663 (0.670)	test_acc_d   0.59 (  0.58)	test_minacc_d   0.70 (  0.65)	test_majacc_d   0.57 (  0.56)	test_corr_d   0.16 (  0.14)
Test: [  20/  26]	Loss 0.677 (0.671)	test_acc   0.56 (  0.57)	test_minacc   0.57 (  0.63)	test_majacc   0.56 (  0.56)	Loss_d 0.677 (0.671)	test_acc_d   0.56 (  0.57)	test_minacc_d   0.57 (  0.63)	test_majacc_d   0.56 (  0.56)	test_corr_d   0.12 (  0.14)
Test: [  26/  26]	Loss 0.654 (0.670)	test_acc   0.59 (  0.58)	test_minacc   0.56 (  0.63)	test_majacc   0.60 (  0.57)	Loss_d 0.654 (0.670)	test_acc_d   0.59 (  0.58)	test_minacc_d   0.56 (  0.63)	test_majacc_d   0.60 (  0.57)	test_corr_d   0.23 (  0.14)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.39it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.57 (  0.57)	test_minacc   0.57 (  0.57)	test_majacc   0.58 (  0.58)	Loss_d 0.693 (0.693)	test_acc_d   0.57 (  0.57)	test_minacc_d   0.57 (  0.57)	test_majacc_d   0.58 (  0.58)	test_corr_d  -0.10 ( -0.10)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.57 (  0.57)	test_minacc   0.57 (  0.57)	test_majacc   0.58 (  0.58)	Loss_d 0.693 (0.693)	test_acc_d   0.57 (  0.57)	test_minacc_d   0.57 (  0.57)	test_majacc_d   0.58 (  0.58)	test_corr_d  -0.10 ( -0.10)
Overall Timing[ 20/  1]	epoch_time 0.0376 (0.0394)	validation_time 0.0004 (0.0007)	train_time 0.0371 (0.0380)
record: (train_acc, test_acc) (0.6315000070333481, 0.7120000123977661)
last accs (train_acc, test_acc) (0.5774000084996224, 0.5730000138282776)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.41it/s] 19%|#9        | 5/26 [00:00<00:00, 22.27it/s] 35%|###4      | 9/26 [00:00<00:00, 27.93it/s] 50%|#####     | 13/26 [00:00<00:00, 30.89it/s] 65%|######5   | 17/26 [00:00<00:00, 32.32it/s] 81%|########  | 21/26 [00:00<00:00, 33.22it/s] 96%|#########6| 25/26 [00:00<00:00, 33.66it/s]100%|##########| 26/26 [00:00<00:00, 28.57it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 546 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 547 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 548 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 549 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 550 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 551 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 552 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 553 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 554 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 555 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 556 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 557 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 558 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 559 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 560 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 561 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 562 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 563 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 564 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 565 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 566 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 567 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 568 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 569 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 570 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 571 400
penalty weights 10000.0
Epoch: [21][  26/  26]	Loss 0.001 (0.001)	train_nll   0.65 (  0.67)	train_penalty   0.00 (  0.00)	weight_norm   0.15 (  0.15)	train_acc   0.59 (  0.56)	train_minacc   0.56 (  0.63)	train_majacc   0.59 (  0.55)	train_corr   0.00 (  0.00)	l1 18.0646 (18.1526)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:00, 27.95it/s] 35%|###4      | 9/26 [00:00<00:00, 39.38it/s]                                               35%|###4      | 9/26 [00:00<00:00, 39.38it/s] 58%|#####7    | 15/26 [00:00<00:00, 46.38it/s]                                                58%|#####7    | 15/26 [00:00<00:00, 46.38it/s] 81%|########  | 21/26 [00:00<00:00, 47.58it/s]100%|##########| 26/26 [00:00<00:00, 42.07it/s]
Test: [   0/  26]	Loss 0.662 (0.662)	test_acc   0.60 (  0.60)	test_minacc   0.53 (  0.53)	test_majacc   0.61 (  0.61)	Loss_d 0.662 (0.662)	test_acc_d   0.60 (  0.60)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.61 (  0.61)	test_corr_d   0.21 (  0.21)
Test: [  10/  26]	Loss 0.662 (0.665)	test_acc   0.61 (  0.58)	test_minacc   0.67 (  0.63)	test_majacc   0.60 (  0.57)	Loss_d 0.662 (0.665)	test_acc_d   0.61 (  0.58)	test_minacc_d   0.67 (  0.63)	test_majacc_d   0.60 (  0.57)	test_corr_d   0.21 (  0.18)
Test: [  20/  26]	Loss 0.673 (0.667)	test_acc   0.57 (  0.57)	test_minacc   0.61 (  0.61)	test_majacc   0.56 (  0.57)	Loss_d 0.673 (0.667)	test_acc_d   0.57 (  0.57)	test_minacc_d   0.61 (  0.61)	test_majacc_d   0.56 (  0.57)	test_corr_d   0.16 (  0.18)
Test: [  26/  26]	Loss 0.655 (0.666)	test_acc   0.59 (  0.58)	test_minacc   0.56 (  0.61)	test_majacc   0.59 (  0.57)	Loss_d 0.655 (0.666)	test_acc_d   0.59 (  0.58)	test_minacc_d   0.56 (  0.61)	test_majacc_d   0.59 (  0.57)	test_corr_d   0.26 (  0.19)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 67.01it/s]
Test: [  0/  1]	Loss 0.697 (0.697)	test_acc   0.55 (  0.55)	test_minacc   0.55 (  0.55)	test_majacc   0.51 (  0.51)	Loss_d 0.697 (0.697)	test_acc_d   0.55 (  0.55)	test_minacc_d   0.55 (  0.55)	test_majacc_d   0.51 (  0.51)	test_corr_d  -0.04 ( -0.04)
Test: [  1/  1]	Loss 0.697 (0.697)	test_acc   0.55 (  0.55)	test_minacc   0.55 (  0.55)	test_majacc   0.51 (  0.51)	Loss_d 0.697 (0.697)	test_acc_d   0.55 (  0.55)	test_minacc_d   0.55 (  0.55)	test_majacc_d   0.51 (  0.51)	test_corr_d  -0.04 ( -0.04)
Overall Timing[ 21/  1]	epoch_time 0.0359 (0.0392)	validation_time 0.0004 (0.0007)	train_time 0.0355 (0.0379)
record: (train_acc, test_acc) (0.6315000070333481, 0.7120000123977661)
last accs (train_acc, test_acc) (0.578500008225441, 0.5460000038146973)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.30it/s] 19%|#9        | 5/26 [00:00<00:00, 23.26it/s] 35%|###4      | 9/26 [00:00<00:00, 28.88it/s] 50%|#####     | 13/26 [00:00<00:00, 31.95it/s] 65%|######5   | 17/26 [00:00<00:00, 32.77it/s] 81%|########  | 21/26 [00:00<00:00, 33.72it/s] 96%|#########6| 25/26 [00:00<00:00, 34.28it/s]100%|##########| 26/26 [00:00<00:00, 29.60it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 572 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 573 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 574 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 575 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 576 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 577 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 578 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 579 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 580 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 581 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 582 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 583 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 584 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 585 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 586 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 587 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 588 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 589 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 590 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 591 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 592 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 593 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 594 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 595 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 596 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 597 400
penalty weights 10000.0
Epoch: [22][  26/  26]	Loss 0.000 (0.000)	train_nll   0.68 (  0.68)	train_penalty   0.00 (  0.00)	weight_norm   0.15 (  0.15)	train_acc   0.55 (  0.55)	train_minacc   0.56 (  0.62)	train_majacc   0.55 (  0.54)	train_corr   0.00 (  0.00)	l1 18.0064 (18.0286)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.54it/s] 27%|##6       | 7/26 [00:00<00:00, 37.45it/s]                                               27%|##6       | 7/26 [00:00<00:00, 37.45it/s] 50%|#####     | 13/26 [00:00<00:00, 40.95it/s] 73%|#######3  | 19/26 [00:00<00:00, 47.01it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 47.01it/s] 96%|#########6| 25/26 [00:00<00:00, 47.48it/s]100%|##########| 26/26 [00:00<00:00, 40.17it/s]
Test: [   0/  26]	Loss 0.685 (0.685)	test_acc   0.55 (  0.55)	test_minacc   0.60 (  0.60)	test_majacc   0.54 (  0.54)	Loss_d 0.685 (0.685)	test_acc_d   0.55 (  0.55)	test_minacc_d   0.60 (  0.60)	test_majacc_d   0.54 (  0.54)	test_corr_d   0.06 (  0.06)
Test: [  10/  26]	Loss 0.685 (0.686)	test_acc   0.54 (  0.53)	test_minacc   0.69 (  0.67)	test_majacc   0.51 (  0.51)	Loss_d 0.685 (0.686)	test_acc_d   0.54 (  0.53)	test_minacc_d   0.69 (  0.67)	test_majacc_d   0.51 (  0.51)	test_corr_d   0.03 (  0.02)
Test: [  20/  26]	Loss 0.692 (0.688)	test_acc   0.52 (  0.53)	test_minacc   0.62 (  0.64)	test_majacc   0.50 (  0.50)	Loss_d 0.692 (0.688)	test_acc_d   0.52 (  0.53)	test_minacc_d   0.62 (  0.64)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.00 (  0.02)
Test: [  26/  26]	Loss 0.680 (0.687)	test_acc   0.55 (  0.53)	test_minacc   0.56 (  0.64)	test_majacc   0.55 (  0.51)	Loss_d 0.680 (0.687)	test_acc_d   0.55 (  0.53)	test_minacc_d   0.56 (  0.64)	test_majacc_d   0.55 (  0.51)	test_corr_d   0.09 (  0.02)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.22it/s]
Test: [  0/  1]	Loss 0.680 (0.680)	test_acc   0.59 (  0.59)	test_minacc   0.61 (  0.61)	test_majacc   0.42 (  0.42)	Loss_d 0.680 (0.680)	test_acc_d   0.59 (  0.59)	test_minacc_d   0.61 (  0.61)	test_majacc_d   0.42 (  0.42)	test_corr_d  -0.19 ( -0.19)
Test: [  1/  1]	Loss 0.680 (0.680)	test_acc   0.59 (  0.59)	test_minacc   0.61 (  0.61)	test_majacc   0.42 (  0.42)	Loss_d 0.680 (0.680)	test_acc_d   0.59 (  0.59)	test_minacc_d   0.61 (  0.61)	test_majacc_d   0.42 (  0.42)	test_corr_d  -0.19 ( -0.19)
Overall Timing[ 22/  1]	epoch_time 0.0374 (0.0392)	validation_time 0.0003 (0.0007)	train_time 0.0370 (0.0379)
record: (train_acc, test_acc) (0.6315000070333481, 0.7120000123977661)
last accs (train_acc, test_acc) (0.5299000108540058, 0.5900000333786011)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.51it/s] 15%|#5        | 4/26 [00:00<00:01, 18.85it/s] 23%|##3       | 6/26 [00:00<00:01, 17.45it/s] 31%|###       | 8/26 [00:00<00:01, 17.36it/s] 38%|###8      | 10/26 [00:00<00:00, 17.17it/s] 46%|####6     | 12/26 [00:00<00:00, 17.11it/s] 54%|#####3    | 14/26 [00:00<00:00, 16.85it/s] 62%|######1   | 16/26 [00:00<00:00, 16.87it/s] 69%|######9   | 18/26 [00:01<00:00, 16.84it/s] 77%|#######6  | 20/26 [00:01<00:00, 16.95it/s] 85%|########4 | 22/26 [00:01<00:00, 17.13it/s] 92%|#########2| 24/26 [00:01<00:00, 17.32it/s]100%|##########| 26/26 [00:01<00:00, 16.73it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 598 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 599 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 600 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 601 400
penalty weights 10000.0
args.step pgd_anneal_iters 601 600
dim_v 512
rho, theta 139 tensor(0.0303, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 602 400
penalty weights 10000.0
args.step pgd_anneal_iters 602 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 603 400
penalty weights 10000.0
args.step pgd_anneal_iters 603 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 604 400
penalty weights 10000.0
args.step pgd_anneal_iters 604 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 605 400
penalty weights 10000.0
args.step pgd_anneal_iters 605 600
dim_v 512
rho, theta 504 tensor(-0.0002, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 606 400
penalty weights 10000.0
args.step pgd_anneal_iters 606 600
dim_v 512
rho, theta 509 tensor(-0.0001, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 607 400
penalty weights 10000.0
args.step pgd_anneal_iters 607 600
dim_v 512
rho, theta 509 tensor(-0.0002, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 608 400
penalty weights 10000.0
args.step pgd_anneal_iters 608 600
dim_v 512
rho, theta 509 tensor(-0.0002, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 609 400
penalty weights 10000.0
args.step pgd_anneal_iters 609 600
dim_v 512
rho, theta 506 tensor(-0.0002, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 610 400
penalty weights 10000.0
args.step pgd_anneal_iters 610 600
dim_v 512
rho, theta 509 tensor(-0.0001, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 611 400
penalty weights 10000.0
args.step pgd_anneal_iters 611 600
dim_v 512
rho, theta 509 tensor(-0.0001, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 612 400
penalty weights 10000.0
args.step pgd_anneal_iters 612 600
dim_v 512
rho, theta 510 tensor(-0.0001, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 613 400
penalty weights 10000.0
args.step pgd_anneal_iters 613 600
dim_v 512
rho, theta 510 tensor(-0.0001, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 614 400
penalty weights 10000.0
args.step pgd_anneal_iters 614 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 615 400
penalty weights 10000.0
args.step pgd_anneal_iters 615 600
dim_v 512
rho, theta 504 tensor(-0.0002, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 616 400
penalty weights 10000.0
args.step pgd_anneal_iters 616 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 617 400
penalty weights 10000.0
args.step pgd_anneal_iters 617 600
dim_v 512
rho, theta 506 tensor(-0.0002, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 618 400
penalty weights 10000.0
args.step pgd_anneal_iters 618 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 619 400
penalty weights 10000.0
args.step pgd_anneal_iters 619 600
dim_v 512
rho, theta 510 tensor(-0.0001, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 620 400
penalty weights 10000.0
args.step pgd_anneal_iters 620 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 621 400
penalty weights 10000.0
args.step pgd_anneal_iters 621 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 622 400
penalty weights 10000.0
args.step pgd_anneal_iters 622 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 623 400
penalty weights 10000.0
args.step pgd_anneal_iters 623 600
dim_v 512
Epoch: [23][  26/  26]	Loss 0.000 (0.001)	train_nll   0.67 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.15 (  0.15)	train_acc   0.50 (  0.51)	train_minacc   0.58 (  0.52)	train_majacc   0.49 (  0.50)	train_corr   0.00 (  0.00)	l1 2.9980 (4.7766)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 19.26it/s] 31%|###       | 8/26 [00:00<00:00, 41.40it/s]                                               31%|###       | 8/26 [00:00<00:00, 41.40it/s] 50%|#####     | 13/26 [00:00<00:00, 43.56it/s] 73%|#######3  | 19/26 [00:00<00:00, 49.31it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 49.31it/s] 96%|#########6| 25/26 [00:00<00:00, 49.19it/s]100%|##########| 26/26 [00:00<00:00, 42.14it/s]
Test: [   0/  26]	Loss 0.675 (0.675)	test_acc   0.51 (  0.51)	test_minacc   0.50 (  0.50)	test_majacc   0.51 (  0.51)	Loss_d 0.675 (0.675)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.51 (  0.51)	test_corr_d   0.63 (  0.63)
Test: [  10/  26]	Loss 0.677 (0.675)	test_acc   0.48 (  0.49)	test_minacc   0.52 (  0.49)	test_majacc   0.47 (  0.49)	Loss_d 0.677 (0.675)	test_acc_d   0.48 (  0.49)	test_minacc_d   0.52 (  0.49)	test_majacc_d   0.47 (  0.49)	test_corr_d   0.68 (  0.65)
Test: [  20/  26]	Loss 0.674 (0.675)	test_acc   0.50 (  0.50)	test_minacc   0.48 (  0.49)	test_majacc   0.50 (  0.50)	Loss_d 0.674 (0.675)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.48 (  0.49)	test_majacc_d   0.50 (  0.50)	test_corr_d   0.65 (  0.65)
Test: [  26/  26]	Loss 0.670 (0.674)	test_acc   0.50 (  0.50)	test_minacc   0.58 (  0.50)	test_majacc   0.49 (  0.50)	Loss_d 0.670 (0.674)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.58 (  0.50)	test_majacc_d   0.49 (  0.50)	test_corr_d   0.65 (  0.65)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 64.54it/s]
Test: [  0/  1]	Loss 0.722 (0.722)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.722 (0.722)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d   0.57 (  0.57)
Test: [  1/  1]	Loss 0.722 (0.722)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.722 (0.722)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d   0.57 (  0.57)
Overall Timing[ 23/  1]	epoch_time 0.0468 (0.0395)	validation_time 0.0005 (0.0007)	train_time 0.0463 (0.0382)
record: (train_acc, test_acc) (0.6315000070333481, 0.7120000123977661)
last accs (train_acc, test_acc) (0.500000011831522, 0.5)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.69it/s] 19%|#9        | 5/26 [00:00<00:00, 21.79it/s] 35%|###4      | 9/26 [00:00<00:00, 26.07it/s] 50%|#####     | 13/26 [00:00<00:00, 29.57it/s] 65%|######5   | 17/26 [00:00<00:00, 31.42it/s] 81%|########  | 21/26 [00:00<00:00, 32.46it/s] 96%|#########6| 25/26 [00:00<00:00, 33.80it/s]100%|##########| 26/26 [00:00<00:00, 28.31it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 624 400
penalty weights 10000.0
args.step pgd_anneal_iters 624 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 625 400
penalty weights 10000.0
args.step pgd_anneal_iters 625 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 626 400
penalty weights 10000.0
args.step pgd_anneal_iters 626 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 627 400
penalty weights 10000.0
args.step pgd_anneal_iters 627 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 628 400
penalty weights 10000.0
args.step pgd_anneal_iters 628 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 629 400
penalty weights 10000.0
args.step pgd_anneal_iters 629 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 630 400
penalty weights 10000.0
args.step pgd_anneal_iters 630 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 631 400
penalty weights 10000.0
args.step pgd_anneal_iters 631 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 632 400
penalty weights 10000.0
args.step pgd_anneal_iters 632 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 633 400
penalty weights 10000.0
args.step pgd_anneal_iters 633 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 634 400
penalty weights 10000.0
args.step pgd_anneal_iters 634 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 635 400
penalty weights 10000.0
args.step pgd_anneal_iters 635 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 636 400
penalty weights 10000.0
args.step pgd_anneal_iters 636 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 637 400
penalty weights 10000.0
args.step pgd_anneal_iters 637 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 638 400
penalty weights 10000.0
args.step pgd_anneal_iters 638 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 639 400
penalty weights 10000.0
args.step pgd_anneal_iters 639 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 640 400
penalty weights 10000.0
args.step pgd_anneal_iters 640 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 641 400
penalty weights 10000.0
args.step pgd_anneal_iters 641 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 642 400
penalty weights 10000.0
args.step pgd_anneal_iters 642 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 643 400
penalty weights 10000.0
args.step pgd_anneal_iters 643 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 644 400
penalty weights 10000.0
args.step pgd_anneal_iters 644 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 645 400
penalty weights 10000.0
args.step pgd_anneal_iters 645 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 646 400
penalty weights 10000.0
args.step pgd_anneal_iters 646 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 647 400
penalty weights 10000.0
args.step pgd_anneal_iters 647 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 648 400
penalty weights 10000.0
args.step pgd_anneal_iters 648 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 649 400
penalty weights 10000.0
args.step pgd_anneal_iters 649 600
dim_v 512
Epoch: [24][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.68)	train_penalty   0.00 (  0.00)	weight_norm   0.15 (  0.15)	train_acc   0.50 (  0.50)	train_minacc   0.58 (  0.50)	train_majacc   0.49 (  0.50)	train_corr   0.00 (  0.00)	l1 2.8948 (2.9167)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 19.54it/s] 31%|###       | 8/26 [00:00<00:00, 40.39it/s]                                               31%|###       | 8/26 [00:00<00:00, 40.39it/s] 50%|#####     | 13/26 [00:00<00:00, 41.14it/s] 73%|#######3  | 19/26 [00:00<00:00, 47.30it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 47.30it/s] 96%|#########6| 25/26 [00:00<00:00, 47.83it/s]100%|##########| 26/26 [00:00<00:00, 40.74it/s]
Test: [   0/  26]	Loss 0.689 (0.689)	test_acc   0.51 (  0.51)	test_minacc   0.50 (  0.50)	test_majacc   0.51 (  0.51)	Loss_d 0.689 (0.689)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.51 (  0.51)	test_corr_d   0.37 (  0.37)
Test: [  10/  26]	Loss 0.693 (0.691)	test_acc   0.48 (  0.49)	test_minacc   0.52 (  0.49)	test_majacc   0.47 (  0.49)	Loss_d 0.693 (0.691)	test_acc_d   0.48 (  0.49)	test_minacc_d   0.52 (  0.49)	test_majacc_d   0.47 (  0.49)	test_corr_d   0.41 (  0.38)
Test: [  20/  26]	Loss 0.689 (0.690)	test_acc   0.50 (  0.50)	test_minacc   0.48 (  0.49)	test_majacc   0.50 (  0.50)	Loss_d 0.689 (0.690)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.48 (  0.49)	test_majacc_d   0.50 (  0.50)	test_corr_d   0.39 (  0.37)
Test: [  26/  26]	Loss 0.686 (0.690)	test_acc   0.50 (  0.50)	test_minacc   0.58 (  0.50)	test_majacc   0.49 (  0.50)	Loss_d 0.686 (0.690)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.58 (  0.50)	test_majacc_d   0.49 (  0.50)	test_corr_d   0.39 (  0.37)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.94it/s]
Test: [  0/  1]	Loss 0.705 (0.705)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.705 (0.705)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d   0.24 (  0.24)
Test: [  1/  1]	Loss 0.705 (0.705)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.705 (0.705)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d   0.24 (  0.24)
Overall Timing[ 24/  1]	epoch_time 0.0383 (0.0394)	validation_time 0.0004 (0.0007)	train_time 0.0379 (0.0382)
record: (train_acc, test_acc) (0.6315000070333481, 0.7120000123977661)
last accs (train_acc, test_acc) (0.500000011831522, 0.5)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.18it/s] 19%|#9        | 5/26 [00:00<00:01, 20.88it/s] 35%|###4      | 9/26 [00:00<00:00, 26.53it/s] 50%|#####     | 13/26 [00:00<00:00, 29.70it/s] 65%|######5   | 17/26 [00:00<00:00, 31.58it/s] 81%|########  | 21/26 [00:00<00:00, 32.54it/s] 96%|#########6| 25/26 [00:00<00:00, 33.36it/s]100%|##########| 26/26 [00:00<00:00, 27.74it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 650 400
penalty weights 10000.0
args.step pgd_anneal_iters 650 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 651 400
penalty weights 10000.0
args.step pgd_anneal_iters 651 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 652 400
penalty weights 10000.0
args.step pgd_anneal_iters 652 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 653 400
penalty weights 10000.0
args.step pgd_anneal_iters 653 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 654 400
penalty weights 10000.0
args.step pgd_anneal_iters 654 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 655 400
penalty weights 10000.0
args.step pgd_anneal_iters 655 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 656 400
penalty weights 10000.0
args.step pgd_anneal_iters 656 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 657 400
penalty weights 10000.0
args.step pgd_anneal_iters 657 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 658 400
penalty weights 10000.0
args.step pgd_anneal_iters 658 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 659 400
penalty weights 10000.0
args.step pgd_anneal_iters 659 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 660 400
penalty weights 10000.0
args.step pgd_anneal_iters 660 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 661 400
penalty weights 10000.0
args.step pgd_anneal_iters 661 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 662 400
penalty weights 10000.0
args.step pgd_anneal_iters 662 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 663 400
penalty weights 10000.0
args.step pgd_anneal_iters 663 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 664 400
penalty weights 10000.0
args.step pgd_anneal_iters 664 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 665 400
penalty weights 10000.0
args.step pgd_anneal_iters 665 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 666 400
penalty weights 10000.0
args.step pgd_anneal_iters 666 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 667 400
penalty weights 10000.0
args.step pgd_anneal_iters 667 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 668 400
penalty weights 10000.0
args.step pgd_anneal_iters 668 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 669 400
penalty weights 10000.0
args.step pgd_anneal_iters 669 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 670 400
penalty weights 10000.0
args.step pgd_anneal_iters 670 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 671 400
penalty weights 10000.0
args.step pgd_anneal_iters 671 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 672 400
penalty weights 10000.0
args.step pgd_anneal_iters 672 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 673 400
penalty weights 10000.0
args.step pgd_anneal_iters 673 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 674 400
penalty weights 10000.0
args.step pgd_anneal_iters 674 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 675 400
penalty weights 10000.0
args.step pgd_anneal_iters 675 600
dim_v 512
Epoch: [25][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.15 (  0.15)	train_acc   0.50 (  0.50)	train_minacc   0.58 (  0.50)	train_majacc   0.49 (  0.50)	train_corr   0.00 (  0.00)	l1 2.8399 (2.8607)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.57it/s] 27%|##6       | 7/26 [00:00<00:00, 35.82it/s]                                               27%|##6       | 7/26 [00:00<00:00, 35.82it/s] 50%|#####     | 13/26 [00:00<00:00, 41.40it/s] 73%|#######3  | 19/26 [00:00<00:00, 47.77it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 47.77it/s] 96%|#########6| 25/26 [00:00<00:00, 48.35it/s]100%|##########| 26/26 [00:00<00:00, 40.28it/s]
Test: [   0/  26]	Loss 0.688 (0.688)	test_acc   0.51 (  0.51)	test_minacc   0.50 (  0.50)	test_majacc   0.51 (  0.51)	Loss_d 0.688 (0.688)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.51 (  0.51)	test_corr_d   0.34 (  0.34)
Test: [  10/  26]	Loss 0.691 (0.690)	test_acc   0.48 (  0.49)	test_minacc   0.52 (  0.49)	test_majacc   0.47 (  0.49)	Loss_d 0.691 (0.690)	test_acc_d   0.48 (  0.49)	test_minacc_d   0.52 (  0.49)	test_majacc_d   0.47 (  0.49)	test_corr_d   0.38 (  0.35)
Test: [  20/  26]	Loss 0.688 (0.689)	test_acc   0.50 (  0.50)	test_minacc   0.48 (  0.49)	test_majacc   0.50 (  0.50)	Loss_d 0.688 (0.689)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.48 (  0.49)	test_majacc_d   0.50 (  0.50)	test_corr_d   0.36 (  0.34)
Test: [  26/  26]	Loss 0.686 (0.689)	test_acc   0.50 (  0.50)	test_minacc   0.58 (  0.50)	test_majacc   0.49 (  0.50)	Loss_d 0.686 (0.689)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.58 (  0.50)	test_majacc_d   0.49 (  0.50)	test_corr_d   0.36 (  0.34)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 67.09it/s]
Test: [  0/  1]	Loss 0.702 (0.702)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.702 (0.702)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d   0.20 (  0.20)
Test: [  1/  1]	Loss 0.702 (0.702)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.702 (0.702)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d   0.20 (  0.20)
Overall Timing[ 25/  1]	epoch_time 0.0369 (0.0393)	validation_time 0.0003 (0.0006)	train_time 0.0366 (0.0381)
record: (train_acc, test_acc) (0.6315000070333481, 0.7120000123977661)
last accs (train_acc, test_acc) (0.500000011831522, 0.5)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.30it/s] 19%|#9        | 5/26 [00:00<00:00, 24.53it/s] 35%|###4      | 9/26 [00:00<00:00, 29.71it/s] 50%|#####     | 13/26 [00:00<00:00, 32.40it/s] 65%|######5   | 17/26 [00:00<00:00, 33.78it/s] 81%|########  | 21/26 [00:00<00:00, 34.78it/s] 96%|#########6| 25/26 [00:00<00:00, 35.04it/s]100%|##########| 26/26 [00:00<00:00, 30.21it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 676 400
penalty weights 10000.0
args.step pgd_anneal_iters 676 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 677 400
penalty weights 10000.0
args.step pgd_anneal_iters 677 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 678 400
penalty weights 10000.0
args.step pgd_anneal_iters 678 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 679 400
penalty weights 10000.0
args.step pgd_anneal_iters 679 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 680 400
penalty weights 10000.0
args.step pgd_anneal_iters 680 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 681 400
penalty weights 10000.0
args.step pgd_anneal_iters 681 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 682 400
penalty weights 10000.0
args.step pgd_anneal_iters 682 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 683 400
penalty weights 10000.0
args.step pgd_anneal_iters 683 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 684 400
penalty weights 10000.0
args.step pgd_anneal_iters 684 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 685 400
penalty weights 10000.0
args.step pgd_anneal_iters 685 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 686 400
penalty weights 10000.0
args.step pgd_anneal_iters 686 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 687 400
penalty weights 10000.0
args.step pgd_anneal_iters 687 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 688 400
penalty weights 10000.0
args.step pgd_anneal_iters 688 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 689 400
penalty weights 10000.0
args.step pgd_anneal_iters 689 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 690 400
penalty weights 10000.0
args.step pgd_anneal_iters 690 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 691 400
penalty weights 10000.0
args.step pgd_anneal_iters 691 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 692 400
penalty weights 10000.0
args.step pgd_anneal_iters 692 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 693 400
penalty weights 10000.0
args.step pgd_anneal_iters 693 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 694 400
penalty weights 10000.0
args.step pgd_anneal_iters 694 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 695 400
penalty weights 10000.0
args.step pgd_anneal_iters 695 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 696 400
penalty weights 10000.0
args.step pgd_anneal_iters 696 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 697 400
penalty weights 10000.0
args.step pgd_anneal_iters 697 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 698 400
penalty weights 10000.0
args.step pgd_anneal_iters 698 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 699 400
penalty weights 10000.0
args.step pgd_anneal_iters 699 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 700 400
penalty weights 10000.0
args.step pgd_anneal_iters 700 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 701 400
penalty weights 10000.0
args.step pgd_anneal_iters 701 600
dim_v 512
Epoch: [26][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.15 (  0.15)	train_acc   0.50 (  0.50)	train_minacc   0.58 (  0.50)	train_majacc   0.49 (  0.50)	train_corr   0.00 (  0.00)	l1 2.8416 (2.8399)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:00, 26.25it/s] 23%|##3       | 6/26 [00:00<00:00, 26.56it/s]                                               23%|##3       | 6/26 [00:00<00:00, 26.56it/s] 46%|####6     | 12/26 [00:00<00:00, 40.26it/s] 65%|######5   | 17/26 [00:00<00:00, 41.78it/s]                                                65%|######5   | 17/26 [00:00<00:00, 41.78it/s] 88%|########8 | 23/26 [00:00<00:00, 46.79it/s]100%|##########| 26/26 [00:00<00:00, 39.08it/s]
Test: [   0/  26]	Loss 0.689 (0.689)	test_acc   0.51 (  0.51)	test_minacc   0.50 (  0.50)	test_majacc   0.51 (  0.51)	Loss_d 0.689 (0.689)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.51 (  0.51)	test_corr_d   0.28 (  0.28)
Test: [  10/  26]	Loss 0.692 (0.691)	test_acc   0.48 (  0.49)	test_minacc   0.52 (  0.49)	test_majacc   0.47 (  0.49)	Loss_d 0.692 (0.691)	test_acc_d   0.48 (  0.49)	test_minacc_d   0.52 (  0.49)	test_majacc_d   0.47 (  0.49)	test_corr_d   0.31 (  0.27)
Test: [  20/  26]	Loss 0.689 (0.690)	test_acc   0.50 (  0.50)	test_minacc   0.48 (  0.49)	test_majacc   0.50 (  0.50)	Loss_d 0.689 (0.690)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.48 (  0.49)	test_majacc_d   0.50 (  0.50)	test_corr_d   0.28 (  0.27)
Test: [  26/  26]	Loss 0.687 (0.690)	test_acc   0.50 (  0.50)	test_minacc   0.58 (  0.50)	test_majacc   0.49 (  0.50)	Loss_d 0.687 (0.690)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.58 (  0.50)	test_majacc_d   0.49 (  0.50)	test_corr_d   0.29 (  0.27)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 67.53it/s]
Test: [  0/  1]	Loss 0.699 (0.699)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.699 (0.699)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d   0.12 (  0.12)
Test: [  1/  1]	Loss 0.699 (0.699)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.699 (0.699)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d   0.12 (  0.12)
Overall Timing[ 26/  1]	epoch_time 0.0365 (0.0392)	validation_time 0.0003 (0.0006)	train_time 0.0362 (0.0381)
record: (train_acc, test_acc) (0.6315000070333481, 0.7120000123977661)
last accs (train_acc, test_acc) (0.500000011831522, 0.5)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.29it/s] 19%|#9        | 5/26 [00:00<00:00, 23.40it/s] 35%|###4      | 9/26 [00:00<00:00, 28.21it/s] 50%|#####     | 13/26 [00:00<00:00, 31.09it/s] 65%|######5   | 17/26 [00:00<00:00, 32.94it/s] 81%|########  | 21/26 [00:00<00:00, 34.12it/s] 96%|#########6| 25/26 [00:00<00:00, 34.87it/s]100%|##########| 26/26 [00:00<00:00, 29.64it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 702 400
penalty weights 10000.0
args.step pgd_anneal_iters 702 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 703 400
penalty weights 10000.0
args.step pgd_anneal_iters 703 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 704 400
penalty weights 10000.0
args.step pgd_anneal_iters 704 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 705 400
penalty weights 10000.0
args.step pgd_anneal_iters 705 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 706 400
penalty weights 10000.0
args.step pgd_anneal_iters 706 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 707 400
penalty weights 10000.0
args.step pgd_anneal_iters 707 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 708 400
penalty weights 10000.0
args.step pgd_anneal_iters 708 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 709 400
penalty weights 10000.0
args.step pgd_anneal_iters 709 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 710 400
penalty weights 10000.0
args.step pgd_anneal_iters 710 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 711 400
penalty weights 10000.0
args.step pgd_anneal_iters 711 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 712 400
penalty weights 10000.0
args.step pgd_anneal_iters 712 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 713 400
penalty weights 10000.0
args.step pgd_anneal_iters 713 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 714 400
penalty weights 10000.0
args.step pgd_anneal_iters 714 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 715 400
penalty weights 10000.0
args.step pgd_anneal_iters 715 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 716 400
penalty weights 10000.0
args.step pgd_anneal_iters 716 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 717 400
penalty weights 10000.0
args.step pgd_anneal_iters 717 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 718 400
penalty weights 10000.0
args.step pgd_anneal_iters 718 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 719 400
penalty weights 10000.0
args.step pgd_anneal_iters 719 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 720 400
penalty weights 10000.0
args.step pgd_anneal_iters 720 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 721 400
penalty weights 10000.0
args.step pgd_anneal_iters 721 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 722 400
penalty weights 10000.0
args.step pgd_anneal_iters 722 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 723 400
penalty weights 10000.0
args.step pgd_anneal_iters 723 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 724 400
penalty weights 10000.0
args.step pgd_anneal_iters 724 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 725 400
penalty weights 10000.0
args.step pgd_anneal_iters 725 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 726 400
penalty weights 10000.0
args.step pgd_anneal_iters 726 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 727 400
penalty weights 10000.0
args.step pgd_anneal_iters 727 600
dim_v 512
Epoch: [27][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.15 (  0.15)	train_acc   0.50 (  0.50)	train_minacc   0.58 (  0.50)	train_majacc   0.49 (  0.50)	train_corr   0.00 (  0.00)	l1 2.8482 (2.8440)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.67it/s] 27%|##6       | 7/26 [00:00<00:00, 30.26it/s]                                               27%|##6       | 7/26 [00:00<00:00, 30.26it/s] 46%|####6     | 12/26 [00:00<00:00, 37.99it/s] 65%|######5   | 17/26 [00:00<00:00, 41.22it/s]                                                65%|######5   | 17/26 [00:00<00:00, 41.22it/s] 88%|########8 | 23/26 [00:00<00:00, 47.02it/s]100%|##########| 26/26 [00:00<00:00, 37.46it/s]
Test: [   0/  26]	Loss 0.690 (0.690)	test_acc   0.51 (  0.51)	test_minacc   0.50 (  0.50)	test_majacc   0.51 (  0.51)	Loss_d 0.690 (0.690)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.51 (  0.51)	test_corr_d   0.22 (  0.22)
Test: [  10/  26]	Loss 0.692 (0.691)	test_acc   0.48 (  0.49)	test_minacc   0.52 (  0.49)	test_majacc   0.47 (  0.49)	Loss_d 0.692 (0.691)	test_acc_d   0.48 (  0.49)	test_minacc_d   0.52 (  0.49)	test_majacc_d   0.47 (  0.49)	test_corr_d   0.24 (  0.21)
Test: [  20/  26]	Loss 0.690 (0.691)	test_acc   0.50 (  0.50)	test_minacc   0.48 (  0.49)	test_majacc   0.50 (  0.50)	Loss_d 0.690 (0.691)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.48 (  0.49)	test_majacc_d   0.50 (  0.50)	test_corr_d   0.22 (  0.21)
Test: [  26/  26]	Loss 0.688 (0.690)	test_acc   0.50 (  0.50)	test_minacc   0.58 (  0.50)	test_majacc   0.49 (  0.50)	Loss_d 0.688 (0.690)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.58 (  0.50)	test_majacc_d   0.49 (  0.50)	test_corr_d   0.24 (  0.21)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 67.17it/s]
Test: [  0/  1]	Loss 0.697 (0.697)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.697 (0.697)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d   0.05 (  0.05)
Test: [  1/  1]	Loss 0.697 (0.697)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.697 (0.697)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d   0.05 (  0.05)
Overall Timing[ 27/  1]	epoch_time 0.0368 (0.0391)	validation_time 0.0004 (0.0006)	train_time 0.0364 (0.0380)
record: (train_acc, test_acc) (0.6315000070333481, 0.7120000123977661)
last accs (train_acc, test_acc) (0.500000011831522, 0.5)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.87it/s] 19%|#9        | 5/26 [00:00<00:00, 23.06it/s] 35%|###4      | 9/26 [00:00<00:00, 27.64it/s] 50%|#####     | 13/26 [00:00<00:00, 30.20it/s] 65%|######5   | 17/26 [00:00<00:00, 31.77it/s] 81%|########  | 21/26 [00:00<00:00, 33.11it/s] 96%|#########6| 25/26 [00:00<00:00, 33.73it/s]100%|##########| 26/26 [00:00<00:00, 28.69it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 728 400
penalty weights 10000.0
args.step pgd_anneal_iters 728 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 729 400
penalty weights 10000.0
args.step pgd_anneal_iters 729 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 730 400
penalty weights 10000.0
args.step pgd_anneal_iters 730 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 731 400
penalty weights 10000.0
args.step pgd_anneal_iters 731 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 732 400
penalty weights 10000.0
args.step pgd_anneal_iters 732 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 733 400
penalty weights 10000.0
args.step pgd_anneal_iters 733 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 734 400
penalty weights 10000.0
args.step pgd_anneal_iters 734 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 735 400
penalty weights 10000.0
args.step pgd_anneal_iters 735 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 736 400
penalty weights 10000.0
args.step pgd_anneal_iters 736 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 737 400
penalty weights 10000.0
args.step pgd_anneal_iters 737 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 738 400
penalty weights 10000.0
args.step pgd_anneal_iters 738 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 739 400
penalty weights 10000.0
args.step pgd_anneal_iters 739 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 740 400
penalty weights 10000.0
args.step pgd_anneal_iters 740 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 741 400
penalty weights 10000.0
args.step pgd_anneal_iters 741 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 742 400
penalty weights 10000.0
args.step pgd_anneal_iters 742 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 743 400
penalty weights 10000.0
args.step pgd_anneal_iters 743 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 744 400
penalty weights 10000.0
args.step pgd_anneal_iters 744 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 745 400
penalty weights 10000.0
args.step pgd_anneal_iters 745 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 746 400
penalty weights 10000.0
args.step pgd_anneal_iters 746 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 747 400
penalty weights 10000.0
args.step pgd_anneal_iters 747 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 748 400
penalty weights 10000.0
args.step pgd_anneal_iters 748 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 749 400
penalty weights 10000.0
args.step pgd_anneal_iters 749 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 750 400
penalty weights 10000.0
args.step pgd_anneal_iters 750 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 751 400
penalty weights 10000.0
args.step pgd_anneal_iters 751 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 752 400
penalty weights 10000.0
args.step pgd_anneal_iters 752 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 753 400
penalty weights 10000.0
args.step pgd_anneal_iters 753 600
dim_v 512
Epoch: [28][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.15 (  0.15)	train_acc   0.50 (  0.50)	train_minacc   0.58 (  0.50)	train_majacc   0.49 (  0.50)	train_corr   0.00 (  0.00)	l1 2.8573 (2.8521)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.73it/s] 27%|##6       | 7/26 [00:00<00:00, 34.83it/s]                                               27%|##6       | 7/26 [00:00<00:00, 34.83it/s] 50%|#####     | 13/26 [00:00<00:00, 39.89it/s] 73%|#######3  | 19/26 [00:00<00:00, 46.77it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 46.77it/s] 96%|#########6| 25/26 [00:00<00:00, 47.31it/s]100%|##########| 26/26 [00:00<00:00, 39.80it/s]
Test: [   0/  26]	Loss 0.691 (0.691)	test_acc   0.51 (  0.51)	test_minacc   0.50 (  0.50)	test_majacc   0.51 (  0.51)	Loss_d 0.691 (0.691)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.51 (  0.51)	test_corr_d   0.18 (  0.18)
Test: [  10/  26]	Loss 0.692 (0.691)	test_acc   0.48 (  0.49)	test_minacc   0.52 (  0.49)	test_majacc   0.47 (  0.49)	Loss_d 0.692 (0.691)	test_acc_d   0.48 (  0.49)	test_minacc_d   0.52 (  0.49)	test_majacc_d   0.47 (  0.49)	test_corr_d   0.20 (  0.17)
Test: [  20/  26]	Loss 0.690 (0.691)	test_acc   0.50 (  0.50)	test_minacc   0.48 (  0.49)	test_majacc   0.50 (  0.50)	Loss_d 0.690 (0.691)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.48 (  0.49)	test_majacc_d   0.50 (  0.50)	test_corr_d   0.17 (  0.16)
Test: [  26/  26]	Loss 0.688 (0.691)	test_acc   0.50 (  0.50)	test_minacc   0.58 (  0.50)	test_majacc   0.49 (  0.50)	Loss_d 0.688 (0.691)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.58 (  0.50)	test_majacc_d   0.49 (  0.50)	test_corr_d   0.20 (  0.16)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.94it/s]
Test: [  0/  1]	Loss 0.695 (0.695)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.695 (0.695)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.00 ( -0.00)
Test: [  1/  1]	Loss 0.695 (0.695)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.695 (0.695)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.00 ( -0.00)
Overall Timing[ 28/  1]	epoch_time 0.0370 (0.0391)	validation_time 0.0004 (0.0006)	train_time 0.0366 (0.0380)
record: (train_acc, test_acc) (0.6315000070333481, 0.7120000123977661)
last accs (train_acc, test_acc) (0.500000011831522, 0.5)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.45it/s] 19%|#9        | 5/26 [00:00<00:01, 18.08it/s] 35%|###4      | 9/26 [00:00<00:00, 24.62it/s] 50%|#####     | 13/26 [00:00<00:00, 28.32it/s] 65%|######5   | 17/26 [00:00<00:00, 30.14it/s] 81%|########  | 21/26 [00:00<00:00, 31.68it/s] 96%|#########6| 25/26 [00:00<00:00, 32.80it/s]100%|##########| 26/26 [00:00<00:00, 26.42it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 754 400
penalty weights 10000.0
args.step pgd_anneal_iters 754 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 755 400
penalty weights 10000.0
args.step pgd_anneal_iters 755 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 756 400
penalty weights 10000.0
args.step pgd_anneal_iters 756 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 757 400
penalty weights 10000.0
args.step pgd_anneal_iters 757 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 758 400
penalty weights 10000.0
args.step pgd_anneal_iters 758 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 759 400
penalty weights 10000.0
args.step pgd_anneal_iters 759 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 760 400
penalty weights 10000.0
args.step pgd_anneal_iters 760 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 761 400
penalty weights 10000.0
args.step pgd_anneal_iters 761 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 762 400
penalty weights 10000.0
args.step pgd_anneal_iters 762 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 763 400
penalty weights 10000.0
args.step pgd_anneal_iters 763 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 764 400
penalty weights 10000.0
args.step pgd_anneal_iters 764 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 765 400
penalty weights 10000.0
args.step pgd_anneal_iters 765 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 766 400
penalty weights 10000.0
args.step pgd_anneal_iters 766 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 767 400
penalty weights 10000.0
args.step pgd_anneal_iters 767 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 768 400
penalty weights 10000.0
args.step pgd_anneal_iters 768 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 769 400
penalty weights 10000.0
args.step pgd_anneal_iters 769 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 770 400
penalty weights 10000.0
args.step pgd_anneal_iters 770 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 771 400
penalty weights 10000.0
args.step pgd_anneal_iters 771 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 772 400
penalty weights 10000.0
args.step pgd_anneal_iters 772 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 773 400
penalty weights 10000.0
args.step pgd_anneal_iters 773 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 774 400
penalty weights 10000.0
args.step pgd_anneal_iters 774 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 775 400
penalty weights 10000.0
args.step pgd_anneal_iters 775 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 776 400
penalty weights 10000.0
args.step pgd_anneal_iters 776 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 777 400
penalty weights 10000.0
args.step pgd_anneal_iters 777 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 778 400
penalty weights 10000.0
args.step pgd_anneal_iters 778 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 779 400
penalty weights 10000.0
args.step pgd_anneal_iters 779 600
dim_v 512
Epoch: [29][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.15 (  0.15)	train_acc   0.50 (  0.50)	train_minacc   0.58 (  0.50)	train_majacc   0.49 (  0.50)	train_corr   0.00 (  0.00)	l1 2.8665 (2.8613)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:00, 26.94it/s] 35%|###4      | 9/26 [00:00<00:00, 38.94it/s]                                               35%|###4      | 9/26 [00:00<00:00, 38.94it/s] 58%|#####7    | 15/26 [00:00<00:00, 45.93it/s]                                                58%|#####7    | 15/26 [00:00<00:00, 45.93it/s] 81%|########  | 21/26 [00:00<00:00, 47.45it/s]100%|##########| 26/26 [00:00<00:00, 42.08it/s]
Test: [   0/  26]	Loss 0.691 (0.691)	test_acc   0.51 (  0.51)	test_minacc   0.50 (  0.50)	test_majacc   0.51 (  0.51)	Loss_d 0.691 (0.691)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.51 (  0.51)	test_corr_d   0.15 (  0.15)
Test: [  10/  26]	Loss 0.692 (0.692)	test_acc   0.48 (  0.49)	test_minacc   0.52 (  0.49)	test_majacc   0.47 (  0.49)	Loss_d 0.692 (0.692)	test_acc_d   0.48 (  0.49)	test_minacc_d   0.52 (  0.49)	test_majacc_d   0.47 (  0.49)	test_corr_d   0.16 (  0.13)
Test: [  20/  26]	Loss 0.691 (0.691)	test_acc   0.50 (  0.50)	test_minacc   0.48 (  0.49)	test_majacc   0.50 (  0.50)	Loss_d 0.691 (0.691)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.48 (  0.49)	test_majacc_d   0.50 (  0.50)	test_corr_d   0.13 (  0.12)
Test: [  26/  26]	Loss 0.689 (0.691)	test_acc   0.50 (  0.50)	test_minacc   0.58 (  0.50)	test_majacc   0.49 (  0.50)	Loss_d 0.689 (0.691)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.58 (  0.50)	test_majacc_d   0.49 (  0.50)	test_corr_d   0.17 (  0.13)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.90it/s]
Test: [  0/  1]	Loss 0.694 (0.694)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.694 (0.694)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.04 ( -0.04)
Test: [  1/  1]	Loss 0.694 (0.694)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.694 (0.694)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.04 ( -0.04)
Overall Timing[ 29/  1]	epoch_time 0.0384 (0.0390)	validation_time 0.0004 (0.0006)	train_time 0.0379 (0.0380)
record: (train_acc, test_acc) (0.6315000070333481, 0.7120000123977661)
last accs (train_acc, test_acc) (0.500000011831522, 0.5)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.91it/s] 19%|#9        | 5/26 [00:00<00:00, 23.82it/s] 35%|###4      | 9/26 [00:00<00:00, 27.78it/s] 50%|#####     | 13/26 [00:00<00:00, 30.03it/s] 65%|######5   | 17/26 [00:00<00:00, 31.13it/s] 81%|########  | 21/26 [00:00<00:00, 32.11it/s] 96%|#########6| 25/26 [00:00<00:00, 32.95it/s]100%|##########| 26/26 [00:00<00:00, 28.50it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 780 400
penalty weights 10000.0
args.step pgd_anneal_iters 780 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 781 400
penalty weights 10000.0
args.step pgd_anneal_iters 781 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 782 400
penalty weights 10000.0
args.step pgd_anneal_iters 782 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 783 400
penalty weights 10000.0
args.step pgd_anneal_iters 783 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 784 400
penalty weights 10000.0
args.step pgd_anneal_iters 784 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 785 400
penalty weights 10000.0
args.step pgd_anneal_iters 785 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 786 400
penalty weights 10000.0
args.step pgd_anneal_iters 786 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 787 400
penalty weights 10000.0
args.step pgd_anneal_iters 787 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 788 400
penalty weights 10000.0
args.step pgd_anneal_iters 788 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 789 400
penalty weights 10000.0
args.step pgd_anneal_iters 789 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 790 400
penalty weights 10000.0
args.step pgd_anneal_iters 790 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 791 400
penalty weights 10000.0
args.step pgd_anneal_iters 791 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 792 400
penalty weights 10000.0
args.step pgd_anneal_iters 792 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 793 400
penalty weights 10000.0
args.step pgd_anneal_iters 793 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 794 400
penalty weights 10000.0
args.step pgd_anneal_iters 794 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 795 400
penalty weights 10000.0
args.step pgd_anneal_iters 795 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 796 400
penalty weights 10000.0
args.step pgd_anneal_iters 796 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 797 400
penalty weights 10000.0
args.step pgd_anneal_iters 797 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 798 400
penalty weights 10000.0
args.step pgd_anneal_iters 798 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 799 400
penalty weights 10000.0
args.step pgd_anneal_iters 799 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 800 400
penalty weights 10000.0
args.step pgd_anneal_iters 800 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 801 400
penalty weights 10000.0
args.step pgd_anneal_iters 801 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 802 400
penalty weights 10000.0
args.step pgd_anneal_iters 802 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 803 400
penalty weights 10000.0
args.step pgd_anneal_iters 803 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 804 400
penalty weights 10000.0
args.step pgd_anneal_iters 804 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 805 400
penalty weights 10000.0
args.step pgd_anneal_iters 805 600
dim_v 512
Epoch: [30][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.15 (  0.15)	train_acc   0.50 (  0.50)	train_minacc   0.56 (  0.50)	train_majacc   0.49 (  0.50)	train_corr   0.00 (  0.00)	l1 2.8755 (2.8705)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  6.24it/s] 27%|##6       | 7/26 [00:00<00:00, 31.43it/s]                                               27%|##6       | 7/26 [00:00<00:00, 31.43it/s] 46%|####6     | 12/26 [00:00<00:00, 37.27it/s] 69%|######9   | 18/26 [00:00<00:00, 44.91it/s]                                                69%|######9   | 18/26 [00:00<00:00, 44.91it/s] 92%|#########2| 24/26 [00:00<00:00, 45.65it/s]100%|##########| 26/26 [00:00<00:00, 37.53it/s]
Test: [   0/  26]	Loss 0.691 (0.691)	test_acc   0.51 (  0.51)	test_minacc   0.50 (  0.50)	test_majacc   0.51 (  0.51)	Loss_d 0.691 (0.691)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.51 (  0.51)	test_corr_d   0.12 (  0.12)
Test: [  10/  26]	Loss 0.693 (0.692)	test_acc   0.48 (  0.49)	test_minacc   0.52 (  0.49)	test_majacc   0.47 (  0.49)	Loss_d 0.693 (0.692)	test_acc_d   0.48 (  0.49)	test_minacc_d   0.52 (  0.49)	test_majacc_d   0.47 (  0.49)	test_corr_d   0.13 (  0.10)
Test: [  20/  26]	Loss 0.691 (0.692)	test_acc   0.50 (  0.50)	test_minacc   0.48 (  0.49)	test_majacc   0.51 (  0.50)	Loss_d 0.691 (0.692)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.48 (  0.49)	test_majacc_d   0.51 (  0.50)	test_corr_d   0.10 (  0.09)
Test: [  26/  26]	Loss 0.689 (0.691)	test_acc   0.50 (  0.50)	test_minacc   0.56 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.689 (0.691)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.56 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d   0.14 (  0.10)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.61it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.07 ( -0.07)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.07 ( -0.07)
Overall Timing[ 30/  1]	epoch_time 0.0368 (0.0390)	validation_time 0.0003 (0.0006)	train_time 0.0365 (0.0379)
record: (train_acc, test_acc) (0.6315000070333481, 0.7120000123977661)
last accs (train_acc, test_acc) (0.5006000129580498, 0.5)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.97it/s] 19%|#9        | 5/26 [00:00<00:01, 19.01it/s] 35%|###4      | 9/26 [00:00<00:00, 24.82it/s] 50%|#####     | 13/26 [00:00<00:00, 28.23it/s] 65%|######5   | 17/26 [00:00<00:00, 30.20it/s] 81%|########  | 21/26 [00:00<00:00, 31.71it/s] 96%|#########6| 25/26 [00:00<00:00, 32.57it/s]100%|##########| 26/26 [00:00<00:00, 26.72it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 806 400
penalty weights 10000.0
args.step pgd_anneal_iters 806 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 807 400
penalty weights 10000.0
args.step pgd_anneal_iters 807 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 808 400
penalty weights 10000.0
args.step pgd_anneal_iters 808 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 809 400
penalty weights 10000.0
args.step pgd_anneal_iters 809 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 810 400
penalty weights 10000.0
args.step pgd_anneal_iters 810 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 811 400
penalty weights 10000.0
args.step pgd_anneal_iters 811 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 812 400
penalty weights 10000.0
args.step pgd_anneal_iters 812 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 813 400
penalty weights 10000.0
args.step pgd_anneal_iters 813 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 814 400
penalty weights 10000.0
args.step pgd_anneal_iters 814 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 815 400
penalty weights 10000.0
args.step pgd_anneal_iters 815 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 816 400
penalty weights 10000.0
args.step pgd_anneal_iters 816 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 817 400
penalty weights 10000.0
args.step pgd_anneal_iters 817 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 818 400
penalty weights 10000.0
args.step pgd_anneal_iters 818 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 819 400
penalty weights 10000.0
args.step pgd_anneal_iters 819 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 820 400
penalty weights 10000.0
args.step pgd_anneal_iters 820 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 821 400
penalty weights 10000.0
args.step pgd_anneal_iters 821 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 822 400
penalty weights 10000.0
args.step pgd_anneal_iters 822 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 823 400
penalty weights 10000.0
args.step pgd_anneal_iters 823 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 824 400
penalty weights 10000.0
args.step pgd_anneal_iters 824 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 825 400
penalty weights 10000.0
args.step pgd_anneal_iters 825 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 826 400
penalty weights 10000.0
args.step pgd_anneal_iters 826 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 827 400
penalty weights 10000.0
args.step pgd_anneal_iters 827 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 828 400
penalty weights 10000.0
args.step pgd_anneal_iters 828 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 829 400
penalty weights 10000.0
args.step pgd_anneal_iters 829 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 830 400
penalty weights 10000.0
args.step pgd_anneal_iters 830 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 831 400
penalty weights 10000.0
args.step pgd_anneal_iters 831 600
dim_v 512
Epoch: [31][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.15 (  0.15)	train_acc   0.51 (  0.50)	train_minacc   0.58 (  0.50)	train_majacc   0.50 (  0.50)	train_corr   0.00 (  0.00)	l1 2.8841 (2.8793)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:00, 29.79it/s] 31%|###       | 8/26 [00:00<00:00, 37.20it/s]                                               31%|###       | 8/26 [00:00<00:00, 37.20it/s] 54%|#####3    | 14/26 [00:00<00:00, 46.21it/s] 77%|#######6  | 20/26 [00:00<00:00, 47.08it/s]                                                77%|#######6  | 20/26 [00:00<00:00, 47.08it/s]100%|##########| 26/26 [00:00<00:00, 51.16it/s]100%|##########| 26/26 [00:00<00:00, 42.53it/s]
Test: [   0/  26]	Loss 0.691 (0.691)	test_acc   0.52 (  0.52)	test_minacc   0.55 (  0.55)	test_majacc   0.51 (  0.51)	Loss_d 0.691 (0.691)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.55 (  0.55)	test_majacc_d   0.51 (  0.51)	test_corr_d   0.10 (  0.10)
Test: [  10/  26]	Loss 0.693 (0.692)	test_acc   0.49 (  0.50)	test_minacc   0.52 (  0.50)	test_majacc   0.48 (  0.50)	Loss_d 0.693 (0.692)	test_acc_d   0.49 (  0.50)	test_minacc_d   0.52 (  0.50)	test_majacc_d   0.48 (  0.50)	test_corr_d   0.10 (  0.08)
Test: [  20/  26]	Loss 0.691 (0.692)	test_acc   0.51 (  0.51)	test_minacc   0.49 (  0.50)	test_majacc   0.51 (  0.51)	Loss_d 0.691 (0.692)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.49 (  0.50)	test_majacc_d   0.51 (  0.51)	test_corr_d   0.08 (  0.07)
Test: [  26/  26]	Loss 0.689 (0.692)	test_acc   0.51 (  0.51)	test_minacc   0.58 (  0.51)	test_majacc   0.50 (  0.51)	Loss_d 0.689 (0.692)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.58 (  0.51)	test_majacc_d   0.50 (  0.51)	test_corr_d   0.12 (  0.07)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.91it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.51 (  0.51)	test_minacc   0.51 (  0.51)	test_majacc   0.49 (  0.49)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.49 (  0.49)	test_corr_d  -0.10 ( -0.10)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.51 (  0.51)	test_minacc   0.51 (  0.51)	test_majacc   0.49 (  0.49)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.49 (  0.49)	test_corr_d  -0.10 ( -0.10)
Overall Timing[ 31/  1]	epoch_time 0.0372 (0.0389)	validation_time 0.0004 (0.0006)	train_time 0.0368 (0.0379)
record: (train_acc, test_acc) (0.6315000070333481, 0.7120000123977661)
last accs (train_acc, test_acc) (0.5090000149905681, 0.5070000290870667)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.57it/s] 15%|#5        | 4/26 [00:00<00:01, 19.91it/s] 31%|###       | 8/26 [00:00<00:00, 26.45it/s] 46%|####6     | 12/26 [00:00<00:00, 29.84it/s] 62%|######1   | 16/26 [00:00<00:00, 31.81it/s] 77%|#######6  | 20/26 [00:00<00:00, 32.62it/s] 92%|#########2| 24/26 [00:00<00:00, 33.15it/s]100%|##########| 26/26 [00:00<00:00, 28.28it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 832 400
penalty weights 10000.0
args.step pgd_anneal_iters 832 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 833 400
penalty weights 10000.0
args.step pgd_anneal_iters 833 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 834 400
penalty weights 10000.0
args.step pgd_anneal_iters 834 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 835 400
penalty weights 10000.0
args.step pgd_anneal_iters 835 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 836 400
penalty weights 10000.0
args.step pgd_anneal_iters 836 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 837 400
penalty weights 10000.0
args.step pgd_anneal_iters 837 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 838 400
penalty weights 10000.0
args.step pgd_anneal_iters 838 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 839 400
penalty weights 10000.0
args.step pgd_anneal_iters 839 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 840 400
penalty weights 10000.0
args.step pgd_anneal_iters 840 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 841 400
penalty weights 10000.0
args.step pgd_anneal_iters 841 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 842 400
penalty weights 10000.0
args.step pgd_anneal_iters 842 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 843 400
penalty weights 10000.0
args.step pgd_anneal_iters 843 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 844 400
penalty weights 10000.0
args.step pgd_anneal_iters 844 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 845 400
penalty weights 10000.0
args.step pgd_anneal_iters 845 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 846 400
penalty weights 10000.0
args.step pgd_anneal_iters 846 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 847 400
penalty weights 10000.0
args.step pgd_anneal_iters 847 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 848 400
penalty weights 10000.0
args.step pgd_anneal_iters 848 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 849 400
penalty weights 10000.0
args.step pgd_anneal_iters 849 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 850 400
penalty weights 10000.0
args.step pgd_anneal_iters 850 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 851 400
penalty weights 10000.0
args.step pgd_anneal_iters 851 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 852 400
penalty weights 10000.0
args.step pgd_anneal_iters 852 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 853 400
penalty weights 10000.0
args.step pgd_anneal_iters 853 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 854 400
penalty weights 10000.0
args.step pgd_anneal_iters 854 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 855 400
penalty weights 10000.0
args.step pgd_anneal_iters 855 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 856 400
penalty weights 10000.0
args.step pgd_anneal_iters 856 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 857 400
penalty weights 10000.0
args.step pgd_anneal_iters 857 600
dim_v 512
Epoch: [32][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.15 (  0.15)	train_acc   0.53 (  0.51)	train_minacc   0.64 (  0.51)	train_majacc   0.51 (  0.51)	train_corr   0.00 (  0.00)	l1 2.8922 (2.8876)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.17it/s] 27%|##6       | 7/26 [00:00<00:00, 36.64it/s]                                               27%|##6       | 7/26 [00:00<00:00, 36.64it/s] 50%|#####     | 13/26 [00:00<00:00, 43.85it/s] 73%|#######3  | 19/26 [00:00<00:00, 45.89it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 45.89it/s] 96%|#########6| 25/26 [00:00<00:00, 49.41it/s]100%|##########| 26/26 [00:00<00:00, 40.81it/s]
Test: [   0/  26]	Loss 0.692 (0.692)	test_acc   0.53 (  0.53)	test_minacc   0.57 (  0.57)	test_majacc   0.52 (  0.52)	Loss_d 0.692 (0.692)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.57 (  0.57)	test_majacc_d   0.52 (  0.52)	test_corr_d   0.08 (  0.08)
Test: [  10/  26]	Loss 0.693 (0.692)	test_acc   0.50 (  0.51)	test_minacc   0.56 (  0.53)	test_majacc   0.49 (  0.51)	Loss_d 0.693 (0.692)	test_acc_d   0.50 (  0.51)	test_minacc_d   0.56 (  0.53)	test_majacc_d   0.49 (  0.51)	test_corr_d   0.08 (  0.06)
Test: [  20/  26]	Loss 0.691 (0.692)	test_acc   0.52 (  0.51)	test_minacc   0.52 (  0.51)	test_majacc   0.52 (  0.51)	Loss_d 0.691 (0.692)	test_acc_d   0.52 (  0.51)	test_minacc_d   0.52 (  0.51)	test_majacc_d   0.52 (  0.51)	test_corr_d   0.05 (  0.05)
Test: [  26/  26]	Loss 0.690 (0.692)	test_acc   0.52 (  0.51)	test_minacc   0.64 (  0.52)	test_majacc   0.50 (  0.51)	Loss_d 0.690 (0.692)	test_acc_d   0.52 (  0.51)	test_minacc_d   0.64 (  0.52)	test_majacc_d   0.50 (  0.51)	test_corr_d   0.10 (  0.05)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.05it/s]
Test: [  0/  1]	Loss 0.692 (0.692)	test_acc   0.50 (  0.50)	test_minacc   0.51 (  0.51)	test_majacc   0.49 (  0.49)	Loss_d 0.692 (0.692)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.49 (  0.49)	test_corr_d  -0.11 ( -0.11)
Test: [  1/  1]	Loss 0.692 (0.692)	test_acc   0.50 (  0.50)	test_minacc   0.51 (  0.51)	test_majacc   0.49 (  0.49)	Loss_d 0.692 (0.692)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.49 (  0.49)	test_corr_d  -0.11 ( -0.11)
Overall Timing[ 32/  1]	epoch_time 0.0363 (0.0388)	validation_time 0.0006 (0.0006)	train_time 0.0357 (0.0378)
record: (train_acc, test_acc) (0.6315000070333481, 0.7120000123977661)
last accs (train_acc, test_acc) (0.5147000131607056, 0.5049999952316284)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.42it/s] 19%|#9        | 5/26 [00:00<00:01, 20.59it/s] 35%|###4      | 9/26 [00:00<00:00, 26.24it/s] 50%|#####     | 13/26 [00:00<00:00, 29.65it/s] 65%|######5   | 17/26 [00:00<00:00, 31.77it/s] 81%|########  | 21/26 [00:00<00:00, 33.09it/s] 96%|#########6| 25/26 [00:00<00:00, 34.04it/s]100%|##########| 26/26 [00:00<00:00, 28.05it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 858 400
penalty weights 10000.0
args.step pgd_anneal_iters 858 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 859 400
penalty weights 10000.0
args.step pgd_anneal_iters 859 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 860 400
penalty weights 10000.0
args.step pgd_anneal_iters 860 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 861 400
penalty weights 10000.0
args.step pgd_anneal_iters 861 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 862 400
penalty weights 10000.0
args.step pgd_anneal_iters 862 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 863 400
penalty weights 10000.0
args.step pgd_anneal_iters 863 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 864 400
penalty weights 10000.0
args.step pgd_anneal_iters 864 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 865 400
penalty weights 10000.0
args.step pgd_anneal_iters 865 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 866 400
penalty weights 10000.0
args.step pgd_anneal_iters 866 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 867 400
penalty weights 10000.0
args.step pgd_anneal_iters 867 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 868 400
penalty weights 10000.0
args.step pgd_anneal_iters 868 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 869 400
penalty weights 10000.0
args.step pgd_anneal_iters 869 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 870 400
penalty weights 10000.0
args.step pgd_anneal_iters 870 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 871 400
penalty weights 10000.0
args.step pgd_anneal_iters 871 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 872 400
penalty weights 10000.0
args.step pgd_anneal_iters 872 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 873 400
penalty weights 10000.0
args.step pgd_anneal_iters 873 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 874 400
penalty weights 10000.0
args.step pgd_anneal_iters 874 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 875 400
penalty weights 10000.0
args.step pgd_anneal_iters 875 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 876 400
penalty weights 10000.0
args.step pgd_anneal_iters 876 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 877 400
penalty weights 10000.0
args.step pgd_anneal_iters 877 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 878 400
penalty weights 10000.0
args.step pgd_anneal_iters 878 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 879 400
penalty weights 10000.0
args.step pgd_anneal_iters 879 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 880 400
penalty weights 10000.0
args.step pgd_anneal_iters 880 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 881 400
penalty weights 10000.0
args.step pgd_anneal_iters 881 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 882 400
penalty weights 10000.0
args.step pgd_anneal_iters 882 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 883 400
penalty weights 10000.0
args.step pgd_anneal_iters 883 600
dim_v 512
Epoch: [33][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.15 (  0.15)	train_acc   0.53 (  0.52)	train_minacc   0.61 (  0.53)	train_majacc   0.51 (  0.51)	train_corr   0.00 (  0.00)	l1 2.8996 (2.8954)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:00, 24.57it/s] 31%|###       | 8/26 [00:00<00:00, 36.12it/s]                                               31%|###       | 8/26 [00:00<00:00, 36.12it/s] 54%|#####3    | 14/26 [00:00<00:00, 44.30it/s] 73%|#######3  | 19/26 [00:00<00:00, 46.33it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 46.33it/s] 96%|#########6| 25/26 [00:00<00:00, 49.32it/s]100%|##########| 26/26 [00:00<00:00, 41.82it/s]
Test: [   0/  26]	Loss 0.692 (0.692)	test_acc   0.54 (  0.54)	test_minacc   0.53 (  0.53)	test_majacc   0.54 (  0.54)	Loss_d 0.692 (0.692)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.54 (  0.54)	test_corr_d   0.07 (  0.07)
Test: [  10/  26]	Loss 0.693 (0.692)	test_acc   0.49 (  0.52)	test_minacc   0.54 (  0.53)	test_majacc   0.49 (  0.51)	Loss_d 0.693 (0.692)	test_acc_d   0.49 (  0.52)	test_minacc_d   0.54 (  0.53)	test_majacc_d   0.49 (  0.51)	test_corr_d   0.07 (  0.04)
Test: [  20/  26]	Loss 0.692 (0.692)	test_acc   0.54 (  0.52)	test_minacc   0.52 (  0.52)	test_majacc   0.54 (  0.52)	Loss_d 0.692 (0.692)	test_acc_d   0.54 (  0.52)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.54 (  0.52)	test_corr_d   0.04 (  0.03)
Test: [  26/  26]	Loss 0.690 (0.692)	test_acc   0.53 (  0.52)	test_minacc   0.61 (  0.53)	test_majacc   0.51 (  0.52)	Loss_d 0.690 (0.692)	test_acc_d   0.53 (  0.52)	test_minacc_d   0.61 (  0.53)	test_majacc_d   0.51 (  0.52)	test_corr_d   0.09 (  0.04)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 60.09it/s]
Test: [  0/  1]	Loss 0.692 (0.692)	test_acc   0.50 (  0.50)	test_minacc   0.51 (  0.51)	test_majacc   0.48 (  0.48)	Loss_d 0.692 (0.692)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.48 (  0.48)	test_corr_d  -0.13 ( -0.13)
Test: [  1/  1]	Loss 0.692 (0.692)	test_acc   0.50 (  0.50)	test_minacc   0.51 (  0.51)	test_majacc   0.48 (  0.48)	Loss_d 0.692 (0.692)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.48 (  0.48)	test_corr_d  -0.13 ( -0.13)
Overall Timing[ 33/  1]	epoch_time 0.0359 (0.0388)	validation_time 0.0003 (0.0006)	train_time 0.0355 (0.0377)
record: (train_acc, test_acc) (0.6315000070333481, 0.7120000123977661)
last accs (train_acc, test_acc) (0.520800012677908, 0.5049999952316284)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.89it/s] 19%|#9        | 5/26 [00:00<00:00, 24.69it/s] 35%|###4      | 9/26 [00:00<00:00, 29.58it/s] 50%|#####     | 13/26 [00:00<00:00, 32.19it/s] 65%|######5   | 17/26 [00:00<00:00, 33.57it/s] 81%|########  | 21/26 [00:00<00:00, 34.70it/s] 96%|#########6| 25/26 [00:00<00:00, 35.43it/s]100%|##########| 26/26 [00:00<00:00, 30.43it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 884 400
penalty weights 10000.0
args.step pgd_anneal_iters 884 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 885 400
penalty weights 10000.0
args.step pgd_anneal_iters 885 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 886 400
penalty weights 10000.0
args.step pgd_anneal_iters 886 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 887 400
penalty weights 10000.0
args.step pgd_anneal_iters 887 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 888 400
penalty weights 10000.0
args.step pgd_anneal_iters 888 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 889 400
penalty weights 10000.0
args.step pgd_anneal_iters 889 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 890 400
penalty weights 10000.0
args.step pgd_anneal_iters 890 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 891 400
penalty weights 10000.0
args.step pgd_anneal_iters 891 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 892 400
penalty weights 10000.0
args.step pgd_anneal_iters 892 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 893 400
penalty weights 10000.0
args.step pgd_anneal_iters 893 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 894 400
penalty weights 10000.0
args.step pgd_anneal_iters 894 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 895 400
penalty weights 10000.0
args.step pgd_anneal_iters 895 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 896 400
penalty weights 10000.0
args.step pgd_anneal_iters 896 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 897 400
penalty weights 10000.0
args.step pgd_anneal_iters 897 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 898 400
penalty weights 10000.0
args.step pgd_anneal_iters 898 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 899 400
penalty weights 10000.0
args.step pgd_anneal_iters 899 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 900 400
penalty weights 10000.0
args.step pgd_anneal_iters 900 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 901 400
penalty weights 10000.0
args.step pgd_anneal_iters 901 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 902 400
penalty weights 10000.0
args.step pgd_anneal_iters 902 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 903 400
penalty weights 10000.0
args.step pgd_anneal_iters 903 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 904 400
penalty weights 10000.0
args.step pgd_anneal_iters 904 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 905 400
penalty weights 10000.0
args.step pgd_anneal_iters 905 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 906 400
penalty weights 10000.0
args.step pgd_anneal_iters 906 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 907 400
penalty weights 10000.0
args.step pgd_anneal_iters 907 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 908 400
penalty weights 10000.0
args.step pgd_anneal_iters 908 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 909 400
penalty weights 10000.0
args.step pgd_anneal_iters 909 600
dim_v 512
Epoch: [34][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.15 (  0.15)	train_acc   0.53 (  0.52)	train_minacc   0.64 (  0.53)	train_majacc   0.51 (  0.52)	train_corr   0.00 (  0.00)	l1 2.9066 (2.9026)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 18.53it/s] 23%|##3       | 6/26 [00:00<00:00, 30.54it/s]                                               23%|##3       | 6/26 [00:00<00:00, 30.54it/s] 46%|####6     | 12/26 [00:00<00:00, 40.20it/s] 69%|######9   | 18/26 [00:00<00:00, 47.39it/s]                                                69%|######9   | 18/26 [00:00<00:00, 47.39it/s] 92%|#########2| 24/26 [00:00<00:00, 48.06it/s]100%|##########| 26/26 [00:00<00:00, 40.65it/s]
Test: [   0/  26]	Loss 0.692 (0.692)	test_acc   0.53 (  0.53)	test_minacc   0.52 (  0.52)	test_majacc   0.54 (  0.54)	Loss_d 0.692 (0.692)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.54 (  0.54)	test_corr_d   0.06 (  0.06)
Test: [  10/  26]	Loss 0.693 (0.692)	test_acc   0.49 (  0.52)	test_minacc   0.52 (  0.53)	test_majacc   0.48 (  0.52)	Loss_d 0.693 (0.692)	test_acc_d   0.49 (  0.52)	test_minacc_d   0.52 (  0.53)	test_majacc_d   0.48 (  0.52)	test_corr_d   0.05 (  0.03)
Test: [  20/  26]	Loss 0.692 (0.692)	test_acc   0.54 (  0.52)	test_minacc   0.54 (  0.52)	test_majacc   0.54 (  0.52)	Loss_d 0.692 (0.692)	test_acc_d   0.54 (  0.52)	test_minacc_d   0.54 (  0.52)	test_majacc_d   0.54 (  0.52)	test_corr_d   0.02 (  0.02)
Test: [  26/  26]	Loss 0.690 (0.692)	test_acc   0.53 (  0.52)	test_minacc   0.64 (  0.53)	test_majacc   0.51 (  0.52)	Loss_d 0.690 (0.692)	test_acc_d   0.53 (  0.52)	test_minacc_d   0.64 (  0.53)	test_majacc_d   0.51 (  0.52)	test_corr_d   0.08 (  0.03)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.32it/s]
Test: [  0/  1]	Loss 0.692 (0.692)	test_acc   0.51 (  0.51)	test_minacc   0.52 (  0.52)	test_majacc   0.47 (  0.47)	Loss_d 0.692 (0.692)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.47 (  0.47)	test_corr_d  -0.14 ( -0.14)
Test: [  1/  1]	Loss 0.692 (0.692)	test_acc   0.51 (  0.51)	test_minacc   0.52 (  0.52)	test_majacc   0.47 (  0.47)	Loss_d 0.692 (0.692)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.47 (  0.47)	test_corr_d  -0.14 ( -0.14)
Overall Timing[ 34/  1]	epoch_time 0.0349 (0.0386)	validation_time 0.0004 (0.0006)	train_time 0.0344 (0.0377)
record: (train_acc, test_acc) (0.6315000070333481, 0.7120000123977661)
last accs (train_acc, test_acc) (0.5228000127673149, 0.5120000243186951)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.41it/s] 19%|#9        | 5/26 [00:00<00:00, 21.31it/s] 35%|###4      | 9/26 [00:00<00:00, 26.83it/s] 50%|#####     | 13/26 [00:00<00:00, 30.02it/s] 65%|######5   | 17/26 [00:00<00:00, 31.91it/s] 81%|########  | 21/26 [00:00<00:00, 32.68it/s] 96%|#########6| 25/26 [00:00<00:00, 33.22it/s]100%|##########| 26/26 [00:00<00:00, 28.06it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 910 400
penalty weights 10000.0
args.step pgd_anneal_iters 910 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 911 400
penalty weights 10000.0
args.step pgd_anneal_iters 911 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 912 400
penalty weights 10000.0
args.step pgd_anneal_iters 912 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 913 400
penalty weights 10000.0
args.step pgd_anneal_iters 913 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 914 400
penalty weights 10000.0
args.step pgd_anneal_iters 914 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 915 400
penalty weights 10000.0
args.step pgd_anneal_iters 915 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 916 400
penalty weights 10000.0
args.step pgd_anneal_iters 916 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 917 400
penalty weights 10000.0
args.step pgd_anneal_iters 917 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 918 400
penalty weights 10000.0
args.step pgd_anneal_iters 918 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 919 400
penalty weights 10000.0
args.step pgd_anneal_iters 919 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 920 400
penalty weights 10000.0
args.step pgd_anneal_iters 920 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 921 400
penalty weights 10000.0
args.step pgd_anneal_iters 921 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 922 400
penalty weights 10000.0
args.step pgd_anneal_iters 922 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 923 400
penalty weights 10000.0
args.step pgd_anneal_iters 923 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 924 400
penalty weights 10000.0
args.step pgd_anneal_iters 924 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 925 400
penalty weights 10000.0
args.step pgd_anneal_iters 925 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 926 400
penalty weights 10000.0
args.step pgd_anneal_iters 926 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 927 400
penalty weights 10000.0
args.step pgd_anneal_iters 927 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 928 400
penalty weights 10000.0
args.step pgd_anneal_iters 928 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 929 400
penalty weights 10000.0
args.step pgd_anneal_iters 929 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 930 400
penalty weights 10000.0
args.step pgd_anneal_iters 930 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 931 400
penalty weights 10000.0
args.step pgd_anneal_iters 931 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 932 400
penalty weights 10000.0
args.step pgd_anneal_iters 932 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 933 400
penalty weights 10000.0
args.step pgd_anneal_iters 933 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 934 400
penalty weights 10000.0
args.step pgd_anneal_iters 934 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 935 400
penalty weights 10000.0
args.step pgd_anneal_iters 935 600
dim_v 512
Epoch: [35][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.15 (  0.15)	train_acc   0.54 (  0.52)	train_minacc   0.61 (  0.53)	train_majacc   0.53 (  0.52)	train_corr   0.00 (  0.00)	l1 2.9130 (2.9092)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.04it/s] 27%|##6       | 7/26 [00:00<00:00, 32.91it/s]                                               27%|##6       | 7/26 [00:00<00:00, 32.91it/s] 50%|#####     | 13/26 [00:00<00:00, 38.97it/s] 73%|#######3  | 19/26 [00:00<00:00, 45.66it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 45.66it/s] 96%|#########6| 25/26 [00:00<00:00, 46.79it/s]100%|##########| 26/26 [00:00<00:00, 38.43it/s]
Test: [   0/  26]	Loss 0.692 (0.692)	test_acc   0.53 (  0.53)	test_minacc   0.52 (  0.52)	test_majacc   0.53 (  0.53)	Loss_d 0.692 (0.692)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.53 (  0.53)	test_corr_d   0.05 (  0.05)
Test: [  10/  26]	Loss 0.692 (0.692)	test_acc   0.50 (  0.52)	test_minacc   0.52 (  0.53)	test_majacc   0.49 (  0.52)	Loss_d 0.692 (0.692)	test_acc_d   0.50 (  0.52)	test_minacc_d   0.52 (  0.53)	test_majacc_d   0.49 (  0.52)	test_corr_d   0.04 (  0.02)
Test: [  20/  26]	Loss 0.692 (0.692)	test_acc   0.53 (  0.52)	test_minacc   0.54 (  0.53)	test_majacc   0.53 (  0.52)	Loss_d 0.692 (0.692)	test_acc_d   0.53 (  0.52)	test_minacc_d   0.54 (  0.53)	test_majacc_d   0.53 (  0.52)	test_corr_d   0.01 (  0.01)
Test: [  26/  26]	Loss 0.690 (0.692)	test_acc   0.54 (  0.52)	test_minacc   0.61 (  0.53)	test_majacc   0.53 (  0.52)	Loss_d 0.690 (0.692)	test_acc_d   0.54 (  0.52)	test_minacc_d   0.61 (  0.53)	test_majacc_d   0.53 (  0.52)	test_corr_d   0.07 (  0.02)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 30.22it/s]
Test: [  0/  1]	Loss 0.691 (0.691)	test_acc   0.51 (  0.51)	test_minacc   0.52 (  0.52)	test_majacc   0.44 (  0.44)	Loss_d 0.691 (0.691)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.44 (  0.44)	test_corr_d  -0.15 ( -0.15)
Test: [  1/  1]	Loss 0.691 (0.691)	test_acc   0.51 (  0.51)	test_minacc   0.52 (  0.52)	test_majacc   0.44 (  0.44)	Loss_d 0.691 (0.691)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.44 (  0.44)	test_corr_d  -0.15 ( -0.15)
Overall Timing[ 35/  1]	epoch_time 0.0386 (0.0386)	validation_time 0.0006 (0.0006)	train_time 0.0380 (0.0377)
record: (train_acc, test_acc) (0.6315000070333481, 0.7120000123977661)
last accs (train_acc, test_acc) (0.5235000110268593, 0.5120000243186951)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.25it/s] 19%|#9        | 5/26 [00:00<00:01, 20.53it/s] 35%|###4      | 9/26 [00:00<00:00, 26.13it/s] 50%|#####     | 13/26 [00:00<00:00, 29.61it/s] 65%|######5   | 17/26 [00:00<00:00, 31.23it/s] 81%|########  | 21/26 [00:00<00:00, 32.40it/s] 96%|#########6| 25/26 [00:00<00:00, 32.63it/s]100%|##########| 26/26 [00:00<00:00, 27.59it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 936 400
penalty weights 10000.0
args.step pgd_anneal_iters 936 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 937 400
penalty weights 10000.0
args.step pgd_anneal_iters 937 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 938 400
penalty weights 10000.0
args.step pgd_anneal_iters 938 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 939 400
penalty weights 10000.0
args.step pgd_anneal_iters 939 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 940 400
penalty weights 10000.0
args.step pgd_anneal_iters 940 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 941 400
penalty weights 10000.0
args.step pgd_anneal_iters 941 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 942 400
penalty weights 10000.0
args.step pgd_anneal_iters 942 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 943 400
penalty weights 10000.0
args.step pgd_anneal_iters 943 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 944 400
penalty weights 10000.0
args.step pgd_anneal_iters 944 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 945 400
penalty weights 10000.0
args.step pgd_anneal_iters 945 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 946 400
penalty weights 10000.0
args.step pgd_anneal_iters 946 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 947 400
penalty weights 10000.0
args.step pgd_anneal_iters 947 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 948 400
penalty weights 10000.0
args.step pgd_anneal_iters 948 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 949 400
penalty weights 10000.0
args.step pgd_anneal_iters 949 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 950 400
penalty weights 10000.0
args.step pgd_anneal_iters 950 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 951 400
penalty weights 10000.0
args.step pgd_anneal_iters 951 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 952 400
penalty weights 10000.0
args.step pgd_anneal_iters 952 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 953 400
penalty weights 10000.0
args.step pgd_anneal_iters 953 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 954 400
penalty weights 10000.0
args.step pgd_anneal_iters 954 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 955 400
penalty weights 10000.0
args.step pgd_anneal_iters 955 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 956 400
penalty weights 10000.0
args.step pgd_anneal_iters 956 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 957 400
penalty weights 10000.0
args.step pgd_anneal_iters 957 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 958 400
penalty weights 10000.0
args.step pgd_anneal_iters 958 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 959 400
penalty weights 10000.0
args.step pgd_anneal_iters 959 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 960 400
penalty weights 10000.0
args.step pgd_anneal_iters 960 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 961 400
penalty weights 10000.0
args.step pgd_anneal_iters 961 600
dim_v 512
Epoch: [36][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.15 (  0.15)	train_acc   0.54 (  0.52)	train_minacc   0.56 (  0.53)	train_majacc   0.54 (  0.52)	train_corr   0.00 (  0.00)	l1 2.9187 (2.9154)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.33it/s] 27%|##6       | 7/26 [00:00<00:00, 36.66it/s]                                               27%|##6       | 7/26 [00:00<00:00, 36.66it/s] 46%|####6     | 12/26 [00:00<00:00, 42.01it/s] 65%|######5   | 17/26 [00:00<00:00, 43.41it/s]                                                65%|######5   | 17/26 [00:00<00:00, 43.41it/s] 88%|########8 | 23/26 [00:00<00:00, 47.98it/s]100%|##########| 26/26 [00:00<00:00, 40.29it/s]
Test: [   0/  26]	Loss 0.692 (0.692)	test_acc   0.53 (  0.53)	test_minacc   0.52 (  0.52)	test_majacc   0.53 (  0.53)	Loss_d 0.692 (0.692)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.53 (  0.53)	test_corr_d   0.04 (  0.04)
Test: [  10/  26]	Loss 0.692 (0.692)	test_acc   0.51 (  0.52)	test_minacc   0.54 (  0.54)	test_majacc   0.50 (  0.52)	Loss_d 0.692 (0.692)	test_acc_d   0.51 (  0.52)	test_minacc_d   0.54 (  0.54)	test_majacc_d   0.50 (  0.52)	test_corr_d   0.04 (  0.01)
Test: [  20/  26]	Loss 0.692 (0.692)	test_acc   0.53 (  0.52)	test_minacc   0.54 (  0.53)	test_majacc   0.52 (  0.52)	Loss_d 0.692 (0.692)	test_acc_d   0.53 (  0.52)	test_minacc_d   0.54 (  0.53)	test_majacc_d   0.52 (  0.52)	test_corr_d   0.00 (  0.00)
Test: [  26/  26]	Loss 0.690 (0.692)	test_acc   0.54 (  0.53)	test_minacc   0.56 (  0.53)	test_majacc   0.54 (  0.52)	Loss_d 0.690 (0.692)	test_acc_d   0.54 (  0.53)	test_minacc_d   0.56 (  0.53)	test_majacc_d   0.54 (  0.52)	test_corr_d   0.06 (  0.01)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.06it/s]
Test: [  0/  1]	Loss 0.691 (0.691)	test_acc   0.51 (  0.51)	test_minacc   0.52 (  0.52)	test_majacc   0.43 (  0.43)	Loss_d 0.691 (0.691)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.43 (  0.43)	test_corr_d  -0.16 ( -0.16)
Test: [  1/  1]	Loss 0.691 (0.691)	test_acc   0.51 (  0.51)	test_minacc   0.52 (  0.52)	test_majacc   0.43 (  0.43)	Loss_d 0.691 (0.691)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.43 (  0.43)	test_corr_d  -0.16 ( -0.16)
Overall Timing[ 36/  1]	epoch_time 0.0367 (0.0386)	validation_time 0.0004 (0.0006)	train_time 0.0362 (0.0376)
record: (train_acc, test_acc) (0.6315000070333481, 0.7120000123977661)
last accs (train_acc, test_acc) (0.5254000118672848, 0.5090000033378601)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 16.41it/s] 23%|##3       | 6/26 [00:00<00:00, 25.10it/s] 38%|###8      | 10/26 [00:00<00:00, 29.64it/s] 54%|#####3    | 14/26 [00:00<00:00, 32.01it/s] 69%|######9   | 18/26 [00:00<00:00, 33.59it/s] 85%|########4 | 22/26 [00:00<00:00, 34.57it/s]100%|##########| 26/26 [00:00<00:00, 34.46it/s]100%|##########| 26/26 [00:00<00:00, 29.66it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 962 400
penalty weights 10000.0
args.step pgd_anneal_iters 962 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 963 400
penalty weights 10000.0
args.step pgd_anneal_iters 963 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 964 400
penalty weights 10000.0
args.step pgd_anneal_iters 964 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 965 400
penalty weights 10000.0
args.step pgd_anneal_iters 965 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 966 400
penalty weights 10000.0
args.step pgd_anneal_iters 966 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 967 400
penalty weights 10000.0
args.step pgd_anneal_iters 967 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 968 400
penalty weights 10000.0
args.step pgd_anneal_iters 968 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 969 400
penalty weights 10000.0
args.step pgd_anneal_iters 969 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 970 400
penalty weights 10000.0
args.step pgd_anneal_iters 970 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 971 400
penalty weights 10000.0
args.step pgd_anneal_iters 971 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 972 400
penalty weights 10000.0
args.step pgd_anneal_iters 972 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 973 400
penalty weights 10000.0
args.step pgd_anneal_iters 973 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 974 400
penalty weights 10000.0
args.step pgd_anneal_iters 974 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 975 400
penalty weights 10000.0
args.step pgd_anneal_iters 975 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 976 400
penalty weights 10000.0
args.step pgd_anneal_iters 976 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 977 400
penalty weights 10000.0
args.step pgd_anneal_iters 977 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 978 400
penalty weights 10000.0
args.step pgd_anneal_iters 978 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 979 400
penalty weights 10000.0
args.step pgd_anneal_iters 979 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 980 400
penalty weights 10000.0
args.step pgd_anneal_iters 980 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 981 400
penalty weights 10000.0
args.step pgd_anneal_iters 981 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 982 400
penalty weights 10000.0
args.step pgd_anneal_iters 982 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 983 400
penalty weights 10000.0
args.step pgd_anneal_iters 983 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 984 400
penalty weights 10000.0
args.step pgd_anneal_iters 984 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 985 400
penalty weights 10000.0
args.step pgd_anneal_iters 985 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 986 400
penalty weights 10000.0
args.step pgd_anneal_iters 986 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 987 400
penalty weights 10000.0
args.step pgd_anneal_iters 987 600
dim_v 512
Epoch: [37][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.15 (  0.15)	train_acc   0.54 (  0.53)	train_minacc   0.56 (  0.54)	train_majacc   0.54 (  0.52)	train_corr   0.00 (  0.00)	l1 2.9239 (2.9208)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 19.64it/s] 27%|##6       | 7/26 [00:00<00:00, 36.97it/s]                                               27%|##6       | 7/26 [00:00<00:00, 36.97it/s] 46%|####6     | 12/26 [00:00<00:00, 39.61it/s] 69%|######9   | 18/26 [00:00<00:00, 47.05it/s]                                                69%|######9   | 18/26 [00:00<00:00, 47.05it/s] 92%|#########2| 24/26 [00:00<00:00, 47.63it/s]100%|##########| 26/26 [00:00<00:00, 40.86it/s]
Test: [   0/  26]	Loss 0.692 (0.692)	test_acc   0.52 (  0.52)	test_minacc   0.50 (  0.50)	test_majacc   0.53 (  0.53)	Loss_d 0.692 (0.692)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.53 (  0.53)	test_corr_d   0.03 (  0.03)
Test: [  10/  26]	Loss 0.692 (0.692)	test_acc   0.51 (  0.52)	test_minacc   0.56 (  0.55)	test_majacc   0.50 (  0.52)	Loss_d 0.692 (0.692)	test_acc_d   0.51 (  0.52)	test_minacc_d   0.56 (  0.55)	test_majacc_d   0.50 (  0.52)	test_corr_d   0.03 (  0.00)
Test: [  20/  26]	Loss 0.692 (0.692)	test_acc   0.52 (  0.53)	test_minacc   0.52 (  0.53)	test_majacc   0.52 (  0.52)	Loss_d 0.692 (0.692)	test_acc_d   0.52 (  0.53)	test_minacc_d   0.52 (  0.53)	test_majacc_d   0.52 (  0.52)	test_corr_d  -0.00 ( -0.00)
Test: [  26/  26]	Loss 0.690 (0.692)	test_acc   0.54 (  0.53)	test_minacc   0.56 (  0.54)	test_majacc   0.54 (  0.53)	Loss_d 0.690 (0.692)	test_acc_d   0.54 (  0.53)	test_minacc_d   0.56 (  0.54)	test_majacc_d   0.54 (  0.53)	test_corr_d   0.05 (  0.00)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.81it/s]
Test: [  0/  1]	Loss 0.691 (0.691)	test_acc   0.51 (  0.51)	test_minacc   0.52 (  0.52)	test_majacc   0.44 (  0.44)	Loss_d 0.691 (0.691)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.44 (  0.44)	test_corr_d  -0.16 ( -0.16)
Test: [  1/  1]	Loss 0.691 (0.691)	test_acc   0.51 (  0.51)	test_minacc   0.52 (  0.52)	test_majacc   0.44 (  0.44)	Loss_d 0.691 (0.691)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.44 (  0.44)	test_corr_d  -0.16 ( -0.16)
Overall Timing[ 37/  1]	epoch_time 0.0376 (0.0386)	validation_time 0.0004 (0.0006)	train_time 0.0372 (0.0376)
record: (train_acc, test_acc) (0.6315000070333481, 0.7120000123977661)
last accs (train_acc, test_acc) (0.5275000154376029, 0.5130000114440918)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.03it/s] 19%|#9        | 5/26 [00:00<00:00, 22.97it/s] 35%|###4      | 9/26 [00:00<00:00, 27.74it/s] 50%|#####     | 13/26 [00:00<00:00, 30.44it/s] 65%|######5   | 17/26 [00:00<00:00, 31.43it/s] 81%|########  | 21/26 [00:00<00:00, 32.79it/s] 96%|#########6| 25/26 [00:00<00:00, 33.61it/s]100%|##########| 26/26 [00:00<00:00, 28.58it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 988 400
penalty weights 10000.0
args.step pgd_anneal_iters 988 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 989 400
penalty weights 10000.0
args.step pgd_anneal_iters 989 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 990 400
penalty weights 10000.0
args.step pgd_anneal_iters 990 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 991 400
penalty weights 10000.0
args.step pgd_anneal_iters 991 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 992 400
penalty weights 10000.0
args.step pgd_anneal_iters 992 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 993 400
penalty weights 10000.0
args.step pgd_anneal_iters 993 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 994 400
penalty weights 10000.0
args.step pgd_anneal_iters 994 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 995 400
penalty weights 10000.0
args.step pgd_anneal_iters 995 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 996 400
penalty weights 10000.0
args.step pgd_anneal_iters 996 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 997 400
penalty weights 10000.0
args.step pgd_anneal_iters 997 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 998 400
penalty weights 10000.0
args.step pgd_anneal_iters 998 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 999 400
penalty weights 10000.0
args.step pgd_anneal_iters 999 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1000 400
penalty weights 10000.0
args.step pgd_anneal_iters 1000 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1001 400
penalty weights 10000.0
args.step pgd_anneal_iters 1001 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1002 400
penalty weights 10000.0
args.step pgd_anneal_iters 1002 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1003 400
penalty weights 10000.0
args.step pgd_anneal_iters 1003 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1004 400
penalty weights 10000.0
args.step pgd_anneal_iters 1004 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1005 400
penalty weights 10000.0
args.step pgd_anneal_iters 1005 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1006 400
penalty weights 10000.0
args.step pgd_anneal_iters 1006 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1007 400
penalty weights 10000.0
args.step pgd_anneal_iters 1007 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1008 400
penalty weights 10000.0
args.step pgd_anneal_iters 1008 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1009 400
penalty weights 10000.0
args.step pgd_anneal_iters 1009 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1010 400
penalty weights 10000.0
args.step pgd_anneal_iters 1010 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1011 400
penalty weights 10000.0
args.step pgd_anneal_iters 1011 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1012 400
penalty weights 10000.0
args.step pgd_anneal_iters 1012 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1013 400
penalty weights 10000.0
args.step pgd_anneal_iters 1013 600
dim_v 512
Epoch: [38][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.15 (  0.15)	train_acc   0.55 (  0.53)	train_minacc   0.56 (  0.54)	train_majacc   0.55 (  0.53)	train_corr   0.00 (  0.00)	l1 2.9286 (2.9258)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.08it/s] 27%|##6       | 7/26 [00:00<00:00, 35.67it/s]                                               27%|##6       | 7/26 [00:00<00:00, 35.67it/s] 50%|#####     | 13/26 [00:00<00:00, 41.59it/s] 73%|#######3  | 19/26 [00:00<00:00, 47.89it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 47.89it/s] 96%|#########6| 25/26 [00:00<00:00, 48.51it/s]100%|##########| 26/26 [00:00<00:00, 40.54it/s]
Test: [   0/  26]	Loss 0.692 (0.692)	test_acc   0.54 (  0.54)	test_minacc   0.48 (  0.48)	test_majacc   0.55 (  0.55)	Loss_d 0.692 (0.692)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.48 (  0.48)	test_majacc_d   0.55 (  0.55)	test_corr_d   0.03 (  0.03)
Test: [  10/  26]	Loss 0.692 (0.692)	test_acc   0.52 (  0.53)	test_minacc   0.56 (  0.56)	test_majacc   0.51 (  0.52)	Loss_d 0.692 (0.692)	test_acc_d   0.52 (  0.53)	test_minacc_d   0.56 (  0.56)	test_majacc_d   0.51 (  0.52)	test_corr_d   0.02 ( -0.00)
Test: [  20/  26]	Loss 0.692 (0.693)	test_acc   0.52 (  0.53)	test_minacc   0.51 (  0.53)	test_majacc   0.52 (  0.53)	Loss_d 0.692 (0.693)	test_acc_d   0.52 (  0.53)	test_minacc_d   0.51 (  0.53)	test_majacc_d   0.52 (  0.53)	test_corr_d  -0.01 ( -0.01)
Test: [  26/  26]	Loss 0.690 (0.692)	test_acc   0.55 (  0.53)	test_minacc   0.56 (  0.54)	test_majacc   0.55 (  0.53)	Loss_d 0.690 (0.692)	test_acc_d   0.55 (  0.53)	test_minacc_d   0.56 (  0.54)	test_majacc_d   0.55 (  0.53)	test_corr_d   0.05 ( -0.00)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.30it/s]
Test: [  0/  1]	Loss 0.691 (0.691)	test_acc   0.52 (  0.52)	test_minacc   0.53 (  0.53)	test_majacc   0.44 (  0.44)	Loss_d 0.691 (0.691)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.44 (  0.44)	test_corr_d  -0.17 ( -0.17)
Test: [  1/  1]	Loss 0.691 (0.691)	test_acc   0.52 (  0.52)	test_minacc   0.53 (  0.53)	test_majacc   0.44 (  0.44)	Loss_d 0.691 (0.691)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.44 (  0.44)	test_corr_d  -0.17 ( -0.17)
Overall Timing[ 38/  1]	epoch_time 0.0362 (0.0385)	validation_time 0.0003 (0.0006)	train_time 0.0359 (0.0376)
record: (train_acc, test_acc) (0.6315000070333481, 0.7120000123977661)
last accs (train_acc, test_acc) (0.5309000189304351, 0.5200000405311584)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.11it/s] 19%|#9        | 5/26 [00:00<00:00, 24.06it/s] 35%|###4      | 9/26 [00:00<00:00, 29.01it/s] 50%|#####     | 13/26 [00:00<00:00, 31.95it/s] 65%|######5   | 17/26 [00:00<00:00, 33.53it/s] 81%|########  | 21/26 [00:00<00:00, 34.08it/s] 96%|#########6| 25/26 [00:00<00:00, 34.25it/s]100%|##########| 26/26 [00:00<00:00, 29.39it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1014 400
penalty weights 10000.0
args.step pgd_anneal_iters 1014 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1015 400
penalty weights 10000.0
args.step pgd_anneal_iters 1015 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1016 400
penalty weights 10000.0
args.step pgd_anneal_iters 1016 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1017 400
penalty weights 10000.0
args.step pgd_anneal_iters 1017 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1018 400
penalty weights 10000.0
args.step pgd_anneal_iters 1018 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1019 400
penalty weights 10000.0
args.step pgd_anneal_iters 1019 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1020 400
penalty weights 10000.0
args.step pgd_anneal_iters 1020 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1021 400
penalty weights 10000.0
args.step pgd_anneal_iters 1021 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1022 400
penalty weights 10000.0
args.step pgd_anneal_iters 1022 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1023 400
penalty weights 10000.0
args.step pgd_anneal_iters 1023 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1024 400
penalty weights 10000.0
args.step pgd_anneal_iters 1024 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1025 400
penalty weights 10000.0
args.step pgd_anneal_iters 1025 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1026 400
penalty weights 10000.0
args.step pgd_anneal_iters 1026 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1027 400
penalty weights 10000.0
args.step pgd_anneal_iters 1027 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1028 400
penalty weights 10000.0
args.step pgd_anneal_iters 1028 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1029 400
penalty weights 10000.0
args.step pgd_anneal_iters 1029 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1030 400
penalty weights 10000.0
args.step pgd_anneal_iters 1030 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1031 400
penalty weights 10000.0
args.step pgd_anneal_iters 1031 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1032 400
penalty weights 10000.0
args.step pgd_anneal_iters 1032 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1033 400
penalty weights 10000.0
args.step pgd_anneal_iters 1033 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1034 400
penalty weights 10000.0
args.step pgd_anneal_iters 1034 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1035 400
penalty weights 10000.0
args.step pgd_anneal_iters 1035 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1036 400
penalty weights 10000.0
args.step pgd_anneal_iters 1036 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1037 400
penalty weights 10000.0
args.step pgd_anneal_iters 1037 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1038 400
penalty weights 10000.0
args.step pgd_anneal_iters 1038 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1039 400
penalty weights 10000.0
args.step pgd_anneal_iters 1039 600
dim_v 512
Epoch: [39][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.15 (  0.15)	train_acc   0.54 (  0.53)	train_minacc   0.53 (  0.54)	train_majacc   0.54 (  0.53)	train_corr   0.00 (  0.00)	l1 2.9326 (2.9301)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.32it/s] 23%|##3       | 6/26 [00:00<00:00, 30.95it/s]                                               23%|##3       | 6/26 [00:00<00:00, 30.95it/s] 42%|####2     | 11/26 [00:00<00:00, 38.11it/s] 65%|######5   | 17/26 [00:00<00:00, 42.08it/s]                                                65%|######5   | 17/26 [00:00<00:00, 42.08it/s] 88%|########8 | 23/26 [00:00<00:00, 47.00it/s]100%|##########| 26/26 [00:00<00:00, 38.22it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.53 (  0.53)	test_minacc   0.45 (  0.45)	test_majacc   0.55 (  0.55)	Loss_d 0.693 (0.693)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.45 (  0.45)	test_majacc_d   0.55 (  0.55)	test_corr_d   0.02 (  0.02)
Test: [  10/  26]	Loss 0.692 (0.692)	test_acc   0.52 (  0.53)	test_minacc   0.61 (  0.56)	test_majacc   0.50 (  0.53)	Loss_d 0.692 (0.692)	test_acc_d   0.52 (  0.53)	test_minacc_d   0.61 (  0.56)	test_majacc_d   0.50 (  0.53)	test_corr_d   0.02 ( -0.01)
Test: [  20/  26]	Loss 0.692 (0.693)	test_acc   0.51 (  0.53)	test_minacc   0.51 (  0.53)	test_majacc   0.51 (  0.53)	Loss_d 0.692 (0.693)	test_acc_d   0.51 (  0.53)	test_minacc_d   0.51 (  0.53)	test_majacc_d   0.51 (  0.53)	test_corr_d  -0.01 ( -0.01)
Test: [  26/  26]	Loss 0.691 (0.692)	test_acc   0.54 (  0.53)	test_minacc   0.53 (  0.53)	test_majacc   0.54 (  0.53)	Loss_d 0.691 (0.692)	test_acc_d   0.54 (  0.53)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.54 (  0.53)	test_corr_d   0.04 ( -0.01)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.45it/s]
Test: [  0/  1]	Loss 0.691 (0.691)	test_acc   0.53 (  0.53)	test_minacc   0.54 (  0.54)	test_majacc   0.44 (  0.44)	Loss_d 0.691 (0.691)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.54 (  0.54)	test_majacc_d   0.44 (  0.44)	test_corr_d  -0.17 ( -0.17)
Test: [  1/  1]	Loss 0.691 (0.691)	test_acc   0.53 (  0.53)	test_minacc   0.54 (  0.54)	test_majacc   0.44 (  0.44)	Loss_d 0.691 (0.691)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.54 (  0.54)	test_majacc_d   0.44 (  0.44)	test_corr_d  -0.17 ( -0.17)
Overall Timing[ 39/  1]	epoch_time 0.0374 (0.0385)	validation_time 0.0004 (0.0006)	train_time 0.0370 (0.0376)
record: (train_acc, test_acc) (0.6315000070333481, 0.7120000123977661)
last accs (train_acc, test_acc) (0.5313000136315823, 0.527999997138977)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.34it/s] 19%|#9        | 5/26 [00:00<00:00, 23.04it/s] 35%|###4      | 9/26 [00:00<00:00, 27.92it/s] 50%|#####     | 13/26 [00:00<00:00, 30.78it/s] 65%|######5   | 17/26 [00:00<00:00, 32.63it/s] 81%|########  | 21/26 [00:00<00:00, 33.50it/s] 96%|#########6| 25/26 [00:00<00:00, 33.60it/s]100%|##########| 26/26 [00:00<00:00, 28.45it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1040 400
penalty weights 10000.0
args.step pgd_anneal_iters 1040 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1041 400
penalty weights 10000.0
args.step pgd_anneal_iters 1041 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1042 400
penalty weights 10000.0
args.step pgd_anneal_iters 1042 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1043 400
penalty weights 10000.0
args.step pgd_anneal_iters 1043 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1044 400
penalty weights 10000.0
args.step pgd_anneal_iters 1044 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1045 400
penalty weights 10000.0
args.step pgd_anneal_iters 1045 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1046 400
penalty weights 10000.0
args.step pgd_anneal_iters 1046 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1047 400
penalty weights 10000.0
args.step pgd_anneal_iters 1047 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1048 400
penalty weights 10000.0
args.step pgd_anneal_iters 1048 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1049 400
penalty weights 10000.0
args.step pgd_anneal_iters 1049 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1050 400
penalty weights 10000.0
args.step pgd_anneal_iters 1050 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1051 400
penalty weights 10000.0
args.step pgd_anneal_iters 1051 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1052 400
penalty weights 10000.0
args.step pgd_anneal_iters 1052 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1053 400
penalty weights 10000.0
args.step pgd_anneal_iters 1053 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1054 400
penalty weights 10000.0
args.step pgd_anneal_iters 1054 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1055 400
penalty weights 10000.0
args.step pgd_anneal_iters 1055 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1056 400
penalty weights 10000.0
args.step pgd_anneal_iters 1056 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1057 400
penalty weights 10000.0
args.step pgd_anneal_iters 1057 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1058 400
penalty weights 10000.0
args.step pgd_anneal_iters 1058 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1059 400
penalty weights 10000.0
args.step pgd_anneal_iters 1059 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1060 400
penalty weights 10000.0
args.step pgd_anneal_iters 1060 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1061 400
penalty weights 10000.0
args.step pgd_anneal_iters 1061 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1062 400
penalty weights 10000.0
args.step pgd_anneal_iters 1062 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1063 400
penalty weights 10000.0
args.step pgd_anneal_iters 1063 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1064 400
penalty weights 10000.0
args.step pgd_anneal_iters 1064 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1065 400
penalty weights 10000.0
args.step pgd_anneal_iters 1065 600
dim_v 512
Epoch: [40][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.15 (  0.15)	train_acc   0.54 (  0.53)	train_minacc   0.47 (  0.54)	train_majacc   0.55 (  0.53)	train_corr   0.00 (  0.00)	l1 2.9361 (2.9338)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.19it/s] 19%|#9        | 5/26 [00:00<00:00, 25.10it/s] 38%|###8      | 10/26 [00:00<00:00, 35.51it/s]                                                38%|###8      | 10/26 [00:00<00:00, 35.51it/s] 62%|######1   | 16/26 [00:00<00:00, 40.36it/s]                                                62%|######1   | 16/26 [00:00<00:00, 40.36it/s] 85%|########4 | 22/26 [00:00<00:00, 46.18it/s]100%|##########| 26/26 [00:00<00:00, 36.89it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.53 (  0.53)	test_minacc   0.43 (  0.43)	test_majacc   0.55 (  0.55)	Loss_d 0.693 (0.693)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.43 (  0.43)	test_majacc_d   0.55 (  0.55)	test_corr_d   0.02 (  0.02)
Test: [  10/  26]	Loss 0.692 (0.692)	test_acc   0.52 (  0.53)	test_minacc   0.61 (  0.56)	test_majacc   0.51 (  0.53)	Loss_d 0.692 (0.692)	test_acc_d   0.52 (  0.53)	test_minacc_d   0.61 (  0.56)	test_majacc_d   0.51 (  0.53)	test_corr_d   0.02 ( -0.01)
Test: [  20/  26]	Loss 0.692 (0.693)	test_acc   0.51 (  0.53)	test_minacc   0.54 (  0.53)	test_majacc   0.50 (  0.53)	Loss_d 0.692 (0.693)	test_acc_d   0.51 (  0.53)	test_minacc_d   0.54 (  0.53)	test_majacc_d   0.50 (  0.53)	test_corr_d  -0.02 ( -0.02)
Test: [  26/  26]	Loss 0.691 (0.692)	test_acc   0.54 (  0.53)	test_minacc   0.47 (  0.54)	test_majacc   0.55 (  0.53)	Loss_d 0.691 (0.692)	test_acc_d   0.54 (  0.53)	test_minacc_d   0.47 (  0.54)	test_majacc_d   0.55 (  0.53)	test_corr_d   0.04 ( -0.01)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 64.57it/s]
Test: [  0/  1]	Loss 0.691 (0.691)	test_acc   0.53 (  0.53)	test_minacc   0.54 (  0.54)	test_majacc   0.42 (  0.42)	Loss_d 0.691 (0.691)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.54 (  0.54)	test_majacc_d   0.42 (  0.42)	test_corr_d  -0.17 ( -0.17)
Test: [  1/  1]	Loss 0.691 (0.691)	test_acc   0.53 (  0.53)	test_minacc   0.54 (  0.54)	test_majacc   0.42 (  0.42)	Loss_d 0.691 (0.691)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.54 (  0.54)	test_majacc_d   0.42 (  0.42)	test_corr_d  -0.17 ( -0.17)
Overall Timing[ 40/  1]	epoch_time 0.0379 (0.0385)	validation_time 0.0003 (0.0006)	train_time 0.0376 (0.0376)
record: (train_acc, test_acc) (0.6315000070333481, 0.7120000123977661)
last accs (train_acc, test_acc) (0.5338000158071518, 0.5270000100135803)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.99it/s] 19%|#9        | 5/26 [00:00<00:00, 21.94it/s] 35%|###4      | 9/26 [00:00<00:00, 26.64it/s] 50%|#####     | 13/26 [00:00<00:00, 29.86it/s] 65%|######5   | 17/26 [00:00<00:00, 31.02it/s] 81%|########  | 21/26 [00:00<00:00, 32.18it/s] 96%|#########6| 25/26 [00:00<00:00, 32.95it/s]100%|##########| 26/26 [00:00<00:00, 28.11it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1066 400
penalty weights 10000.0
args.step pgd_anneal_iters 1066 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1067 400
penalty weights 10000.0
args.step pgd_anneal_iters 1067 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1068 400
penalty weights 10000.0
args.step pgd_anneal_iters 1068 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1069 400
penalty weights 10000.0
args.step pgd_anneal_iters 1069 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1070 400
penalty weights 10000.0
args.step pgd_anneal_iters 1070 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1071 400
penalty weights 10000.0
args.step pgd_anneal_iters 1071 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1072 400
penalty weights 10000.0
args.step pgd_anneal_iters 1072 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1073 400
penalty weights 10000.0
args.step pgd_anneal_iters 1073 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1074 400
penalty weights 10000.0
args.step pgd_anneal_iters 1074 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1075 400
penalty weights 10000.0
args.step pgd_anneal_iters 1075 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1076 400
penalty weights 10000.0
args.step pgd_anneal_iters 1076 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1077 400
penalty weights 10000.0
args.step pgd_anneal_iters 1077 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1078 400
penalty weights 10000.0
args.step pgd_anneal_iters 1078 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1079 400
penalty weights 10000.0
args.step pgd_anneal_iters 1079 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1080 400
penalty weights 10000.0
args.step pgd_anneal_iters 1080 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1081 400
penalty weights 10000.0
args.step pgd_anneal_iters 1081 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1082 400
penalty weights 10000.0
args.step pgd_anneal_iters 1082 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1083 400
penalty weights 10000.0
args.step pgd_anneal_iters 1083 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1084 400
penalty weights 10000.0
args.step pgd_anneal_iters 1084 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1085 400
penalty weights 10000.0
args.step pgd_anneal_iters 1085 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1086 400
penalty weights 10000.0
args.step pgd_anneal_iters 1086 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1087 400
penalty weights 10000.0
args.step pgd_anneal_iters 1087 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1088 400
penalty weights 10000.0
args.step pgd_anneal_iters 1088 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1089 400
penalty weights 10000.0
args.step pgd_anneal_iters 1089 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1090 400
penalty weights 10000.0
args.step pgd_anneal_iters 1090 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1091 400
penalty weights 10000.0
args.step pgd_anneal_iters 1091 600
dim_v 512
Epoch: [41][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.15 (  0.15)	train_acc   0.55 (  0.53)	train_minacc   0.47 (  0.54)	train_majacc   0.56 (  0.53)	train_corr   0.00 (  0.00)	l1 2.9390 (2.9370)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.07it/s] 27%|##6       | 7/26 [00:00<00:00, 35.53it/s]                                               27%|##6       | 7/26 [00:00<00:00, 35.53it/s] 46%|####6     | 12/26 [00:00<00:00, 41.32it/s] 65%|######5   | 17/26 [00:00<00:00, 43.75it/s]                                                65%|######5   | 17/26 [00:00<00:00, 43.75it/s] 88%|########8 | 23/26 [00:00<00:00, 48.50it/s]100%|##########| 26/26 [00:00<00:00, 39.81it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.54 (  0.54)	test_minacc   0.45 (  0.45)	test_majacc   0.56 (  0.56)	Loss_d 0.693 (0.693)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.45 (  0.45)	test_majacc_d   0.56 (  0.56)	test_corr_d   0.02 (  0.02)
Test: [  10/  26]	Loss 0.692 (0.692)	test_acc   0.52 (  0.53)	test_minacc   0.59 (  0.55)	test_majacc   0.51 (  0.53)	Loss_d 0.692 (0.692)	test_acc_d   0.52 (  0.53)	test_minacc_d   0.59 (  0.55)	test_majacc_d   0.51 (  0.53)	test_corr_d   0.01 ( -0.01)
Test: [  20/  26]	Loss 0.692 (0.693)	test_acc   0.53 (  0.53)	test_minacc   0.54 (  0.53)	test_majacc   0.53 (  0.53)	Loss_d 0.692 (0.693)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.54 (  0.53)	test_majacc_d   0.53 (  0.53)	test_corr_d  -0.02 ( -0.02)
Test: [  26/  26]	Loss 0.691 (0.692)	test_acc   0.55 (  0.54)	test_minacc   0.47 (  0.53)	test_majacc   0.56 (  0.54)	Loss_d 0.691 (0.692)	test_acc_d   0.55 (  0.54)	test_minacc_d   0.47 (  0.53)	test_majacc_d   0.56 (  0.54)	test_corr_d   0.04 ( -0.01)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.60it/s]
Test: [  0/  1]	Loss 0.691 (0.691)	test_acc   0.53 (  0.53)	test_minacc   0.54 (  0.54)	test_majacc   0.42 (  0.42)	Loss_d 0.691 (0.691)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.54 (  0.54)	test_majacc_d   0.42 (  0.42)	test_corr_d  -0.17 ( -0.17)
Test: [  1/  1]	Loss 0.691 (0.691)	test_acc   0.53 (  0.53)	test_minacc   0.54 (  0.54)	test_majacc   0.42 (  0.42)	Loss_d 0.691 (0.691)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.54 (  0.54)	test_majacc_d   0.42 (  0.42)	test_corr_d  -0.17 ( -0.17)
Overall Timing[ 41/  1]	epoch_time 0.0373 (0.0384)	validation_time 0.0006 (0.0006)	train_time 0.0367 (0.0375)
record: (train_acc, test_acc) (0.6315000070333481, 0.7120000123977661)
last accs (train_acc, test_acc) (0.5359000139832497, 0.5300000309944153)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.61it/s] 19%|#9        | 5/26 [00:00<00:00, 22.25it/s] 35%|###4      | 9/26 [00:00<00:00, 27.72it/s] 50%|#####     | 13/26 [00:00<00:00, 30.88it/s] 65%|######5   | 17/26 [00:00<00:00, 32.69it/s] 81%|########  | 21/26 [00:00<00:00, 33.77it/s] 96%|#########6| 25/26 [00:00<00:00, 34.21it/s]100%|##########| 26/26 [00:00<00:00, 28.85it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1092 400
penalty weights 10000.0
args.step pgd_anneal_iters 1092 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1093 400
penalty weights 10000.0
args.step pgd_anneal_iters 1093 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1094 400
penalty weights 10000.0
args.step pgd_anneal_iters 1094 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1095 400
penalty weights 10000.0
args.step pgd_anneal_iters 1095 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1096 400
penalty weights 10000.0
args.step pgd_anneal_iters 1096 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1097 400
penalty weights 10000.0
args.step pgd_anneal_iters 1097 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1098 400
penalty weights 10000.0
args.step pgd_anneal_iters 1098 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1099 400
penalty weights 10000.0
args.step pgd_anneal_iters 1099 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1100 400
penalty weights 10000.0
args.step pgd_anneal_iters 1100 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1101 400
penalty weights 10000.0
args.step pgd_anneal_iters 1101 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1102 400
penalty weights 10000.0
args.step pgd_anneal_iters 1102 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1103 400
penalty weights 10000.0
args.step pgd_anneal_iters 1103 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1104 400
penalty weights 10000.0
args.step pgd_anneal_iters 1104 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1105 400
penalty weights 10000.0
args.step pgd_anneal_iters 1105 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1106 400
penalty weights 10000.0
args.step pgd_anneal_iters 1106 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1107 400
penalty weights 10000.0
args.step pgd_anneal_iters 1107 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1108 400
penalty weights 10000.0
args.step pgd_anneal_iters 1108 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1109 400
penalty weights 10000.0
args.step pgd_anneal_iters 1109 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1110 400
penalty weights 10000.0
args.step pgd_anneal_iters 1110 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1111 400
penalty weights 10000.0
args.step pgd_anneal_iters 1111 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1112 400
penalty weights 10000.0
args.step pgd_anneal_iters 1112 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1113 400
penalty weights 10000.0
args.step pgd_anneal_iters 1113 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1114 400
penalty weights 10000.0
args.step pgd_anneal_iters 1114 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1115 400
penalty weights 10000.0
args.step pgd_anneal_iters 1115 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1116 400
penalty weights 10000.0
args.step pgd_anneal_iters 1116 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1117 400
penalty weights 10000.0
args.step pgd_anneal_iters 1117 600
dim_v 512
Epoch: [42][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.15 (  0.15)	train_acc   0.54 (  0.54)	train_minacc   0.44 (  0.53)	train_majacc   0.56 (  0.54)	train_corr   0.00 (  0.00)	l1 2.9414 (2.9397)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.17it/s] 27%|##6       | 7/26 [00:00<00:00, 32.70it/s]                                               27%|##6       | 7/26 [00:00<00:00, 32.70it/s] 50%|#####     | 13/26 [00:00<00:00, 39.20it/s] 73%|#######3  | 19/26 [00:00<00:00, 45.94it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 45.94it/s] 96%|#########6| 25/26 [00:00<00:00, 46.98it/s]100%|##########| 26/26 [00:00<00:00, 38.81it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.54 (  0.54)	test_minacc   0.45 (  0.45)	test_majacc   0.55 (  0.55)	Loss_d 0.693 (0.693)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.45 (  0.45)	test_majacc_d   0.55 (  0.55)	test_corr_d   0.02 (  0.02)
Test: [  10/  26]	Loss 0.692 (0.692)	test_acc   0.52 (  0.54)	test_minacc   0.57 (  0.55)	test_majacc   0.50 (  0.53)	Loss_d 0.692 (0.692)	test_acc_d   0.52 (  0.54)	test_minacc_d   0.57 (  0.55)	test_majacc_d   0.50 (  0.53)	test_corr_d   0.01 ( -0.02)
Test: [  20/  26]	Loss 0.692 (0.693)	test_acc   0.53 (  0.53)	test_minacc   0.54 (  0.53)	test_majacc   0.52 (  0.53)	Loss_d 0.692 (0.693)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.54 (  0.53)	test_majacc_d   0.52 (  0.53)	test_corr_d  -0.02 ( -0.02)
Test: [  26/  26]	Loss 0.691 (0.692)	test_acc   0.54 (  0.54)	test_minacc   0.47 (  0.53)	test_majacc   0.56 (  0.54)	Loss_d 0.691 (0.692)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.47 (  0.53)	test_majacc_d   0.56 (  0.54)	test_corr_d   0.04 ( -0.02)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 60.96it/s]
Test: [  0/  1]	Loss 0.691 (0.691)	test_acc   0.53 (  0.53)	test_minacc   0.54 (  0.54)	test_majacc   0.43 (  0.43)	Loss_d 0.691 (0.691)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.54 (  0.54)	test_majacc_d   0.43 (  0.43)	test_corr_d  -0.17 ( -0.17)
Test: [  1/  1]	Loss 0.691 (0.691)	test_acc   0.53 (  0.53)	test_minacc   0.54 (  0.54)	test_majacc   0.43 (  0.43)	Loss_d 0.691 (0.691)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.54 (  0.54)	test_majacc_d   0.43 (  0.43)	test_corr_d  -0.17 ( -0.17)
Overall Timing[ 42/  1]	epoch_time 0.0363 (0.0384)	validation_time 0.0004 (0.0006)	train_time 0.0359 (0.0375)
record: (train_acc, test_acc) (0.6315000070333481, 0.7120000123977661)
last accs (train_acc, test_acc) (0.5377000148296356, 0.5300000309944153)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 16.27it/s] 23%|##3       | 6/26 [00:00<00:00, 25.74it/s] 38%|###8      | 10/26 [00:00<00:00, 29.99it/s] 54%|#####3    | 14/26 [00:00<00:00, 31.72it/s] 69%|######9   | 18/26 [00:00<00:00, 33.25it/s] 85%|########4 | 22/26 [00:00<00:00, 34.41it/s]100%|##########| 26/26 [00:00<00:00, 34.39it/s]100%|##########| 26/26 [00:00<00:00, 29.82it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1118 400
penalty weights 10000.0
args.step pgd_anneal_iters 1118 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1119 400
penalty weights 10000.0
args.step pgd_anneal_iters 1119 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1120 400
penalty weights 10000.0
args.step pgd_anneal_iters 1120 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1121 400
penalty weights 10000.0
args.step pgd_anneal_iters 1121 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1122 400
penalty weights 10000.0
args.step pgd_anneal_iters 1122 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1123 400
penalty weights 10000.0
args.step pgd_anneal_iters 1123 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1124 400
penalty weights 10000.0
args.step pgd_anneal_iters 1124 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1125 400
penalty weights 10000.0
args.step pgd_anneal_iters 1125 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1126 400
penalty weights 10000.0
args.step pgd_anneal_iters 1126 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1127 400
penalty weights 10000.0
args.step pgd_anneal_iters 1127 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1128 400
penalty weights 10000.0
args.step pgd_anneal_iters 1128 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1129 400
penalty weights 10000.0
args.step pgd_anneal_iters 1129 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1130 400
penalty weights 10000.0
args.step pgd_anneal_iters 1130 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1131 400
penalty weights 10000.0
args.step pgd_anneal_iters 1131 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1132 400
penalty weights 10000.0
args.step pgd_anneal_iters 1132 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1133 400
penalty weights 10000.0
args.step pgd_anneal_iters 1133 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1134 400
penalty weights 10000.0
args.step pgd_anneal_iters 1134 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1135 400
penalty weights 10000.0
args.step pgd_anneal_iters 1135 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1136 400
penalty weights 10000.0
args.step pgd_anneal_iters 1136 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1137 400
penalty weights 10000.0
args.step pgd_anneal_iters 1137 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1138 400
penalty weights 10000.0
args.step pgd_anneal_iters 1138 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1139 400
penalty weights 10000.0
args.step pgd_anneal_iters 1139 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1140 400
penalty weights 10000.0
args.step pgd_anneal_iters 1140 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1141 400
penalty weights 10000.0
args.step pgd_anneal_iters 1141 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1142 400
penalty weights 10000.0
args.step pgd_anneal_iters 1142 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1143 400
penalty weights 10000.0
args.step pgd_anneal_iters 1143 600
dim_v 512
Epoch: [43][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.15 (  0.15)	train_acc   0.56 (  0.54)	train_minacc   0.47 (  0.53)	train_majacc   0.57 (  0.54)	train_corr   0.00 (  0.00)	l1 2.9432 (2.9418)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.79it/s] 27%|##6       | 7/26 [00:00<00:00, 37.05it/s]                                               27%|##6       | 7/26 [00:00<00:00, 37.05it/s] 50%|#####     | 13/26 [00:00<00:00, 43.19it/s] 73%|#######3  | 19/26 [00:00<00:00, 48.99it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 48.99it/s] 96%|#########6| 25/26 [00:00<00:00, 48.75it/s]100%|##########| 26/26 [00:00<00:00, 41.02it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.54 (  0.54)	test_minacc   0.45 (  0.45)	test_majacc   0.55 (  0.55)	Loss_d 0.693 (0.693)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.45 (  0.45)	test_majacc_d   0.55 (  0.55)	test_corr_d   0.01 (  0.01)
Test: [  10/  26]	Loss 0.692 (0.693)	test_acc   0.50 (  0.53)	test_minacc   0.56 (  0.55)	test_majacc   0.49 (  0.53)	Loss_d 0.692 (0.693)	test_acc_d   0.50 (  0.53)	test_minacc_d   0.56 (  0.55)	test_majacc_d   0.49 (  0.53)	test_corr_d   0.01 ( -0.02)
Test: [  20/  26]	Loss 0.692 (0.693)	test_acc   0.53 (  0.53)	test_minacc   0.56 (  0.52)	test_majacc   0.53 (  0.53)	Loss_d 0.692 (0.693)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.56 (  0.52)	test_majacc_d   0.53 (  0.53)	test_corr_d  -0.02 ( -0.02)
Test: [  26/  26]	Loss 0.691 (0.692)	test_acc   0.56 (  0.54)	test_minacc   0.47 (  0.53)	test_majacc   0.57 (  0.54)	Loss_d 0.691 (0.692)	test_acc_d   0.56 (  0.54)	test_minacc_d   0.47 (  0.53)	test_majacc_d   0.57 (  0.54)	test_corr_d   0.03 ( -0.02)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.02it/s]
Test: [  0/  1]	Loss 0.691 (0.691)	test_acc   0.53 (  0.53)	test_minacc   0.54 (  0.54)	test_majacc   0.43 (  0.43)	Loss_d 0.691 (0.691)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.54 (  0.54)	test_majacc_d   0.43 (  0.43)	test_corr_d  -0.17 ( -0.17)
Test: [  1/  1]	Loss 0.691 (0.691)	test_acc   0.53 (  0.53)	test_minacc   0.54 (  0.54)	test_majacc   0.43 (  0.43)	Loss_d 0.691 (0.691)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.54 (  0.54)	test_majacc_d   0.43 (  0.43)	test_corr_d  -0.17 ( -0.17)
Overall Timing[ 43/  1]	epoch_time 0.0367 (0.0383)	validation_time 0.0003 (0.0006)	train_time 0.0364 (0.0375)
record: (train_acc, test_acc) (0.6315000070333481, 0.7120000123977661)
last accs (train_acc, test_acc) (0.5375000095367432, 0.5290000438690186)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 15.28it/s] 23%|##3       | 6/26 [00:00<00:00, 25.39it/s] 38%|###8      | 10/26 [00:00<00:00, 28.49it/s] 54%|#####3    | 14/26 [00:00<00:00, 31.02it/s] 69%|######9   | 18/26 [00:00<00:00, 32.69it/s] 85%|########4 | 22/26 [00:00<00:00, 34.17it/s]100%|##########| 26/26 [00:00<00:00, 35.13it/s]100%|##########| 26/26 [00:00<00:00, 29.68it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1144 400
penalty weights 10000.0
args.step pgd_anneal_iters 1144 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1145 400
penalty weights 10000.0
args.step pgd_anneal_iters 1145 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1146 400
penalty weights 10000.0
args.step pgd_anneal_iters 1146 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1147 400
penalty weights 10000.0
args.step pgd_anneal_iters 1147 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1148 400
penalty weights 10000.0
args.step pgd_anneal_iters 1148 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1149 400
penalty weights 10000.0
args.step pgd_anneal_iters 1149 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1150 400
penalty weights 10000.0
args.step pgd_anneal_iters 1150 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1151 400
penalty weights 10000.0
args.step pgd_anneal_iters 1151 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1152 400
penalty weights 10000.0
args.step pgd_anneal_iters 1152 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1153 400
penalty weights 10000.0
args.step pgd_anneal_iters 1153 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1154 400
penalty weights 10000.0
args.step pgd_anneal_iters 1154 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1155 400
penalty weights 10000.0
args.step pgd_anneal_iters 1155 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1156 400
penalty weights 10000.0
args.step pgd_anneal_iters 1156 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1157 400
penalty weights 10000.0
args.step pgd_anneal_iters 1157 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1158 400
penalty weights 10000.0
args.step pgd_anneal_iters 1158 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1159 400
penalty weights 10000.0
args.step pgd_anneal_iters 1159 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1160 400
penalty weights 10000.0
args.step pgd_anneal_iters 1160 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1161 400
penalty weights 10000.0
args.step pgd_anneal_iters 1161 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1162 400
penalty weights 10000.0
args.step pgd_anneal_iters 1162 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1163 400
penalty weights 10000.0
args.step pgd_anneal_iters 1163 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1164 400
penalty weights 10000.0
args.step pgd_anneal_iters 1164 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1165 400
penalty weights 10000.0
args.step pgd_anneal_iters 1165 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1166 400
penalty weights 10000.0
args.step pgd_anneal_iters 1166 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1167 400
penalty weights 10000.0
args.step pgd_anneal_iters 1167 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1168 400
penalty weights 10000.0
args.step pgd_anneal_iters 1168 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1169 400
penalty weights 10000.0
args.step pgd_anneal_iters 1169 600
dim_v 512
Epoch: [44][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.15 (  0.15)	train_acc   0.56 (  0.54)	train_minacc   0.47 (  0.53)	train_majacc   0.58 (  0.54)	train_corr   0.00 (  0.00)	l1 2.9446 (2.9435)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.47it/s] 27%|##6       | 7/26 [00:00<00:00, 35.74it/s]                                               27%|##6       | 7/26 [00:00<00:00, 35.74it/s] 50%|#####     | 13/26 [00:00<00:00, 41.92it/s] 73%|#######3  | 19/26 [00:00<00:00, 47.37it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 47.37it/s] 96%|#########6| 25/26 [00:00<00:00, 48.17it/s]100%|##########| 26/26 [00:00<00:00, 40.61it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.53 (  0.53)	test_minacc   0.45 (  0.45)	test_majacc   0.55 (  0.55)	Loss_d 0.693 (0.693)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.45 (  0.45)	test_majacc_d   0.55 (  0.55)	test_corr_d   0.01 (  0.01)
Test: [  10/  26]	Loss 0.692 (0.693)	test_acc   0.51 (  0.53)	test_minacc   0.56 (  0.54)	test_majacc   0.50 (  0.53)	Loss_d 0.692 (0.693)	test_acc_d   0.51 (  0.53)	test_minacc_d   0.56 (  0.54)	test_majacc_d   0.50 (  0.53)	test_corr_d   0.01 ( -0.02)
Test: [  20/  26]	Loss 0.692 (0.693)	test_acc   0.54 (  0.53)	test_minacc   0.57 (  0.52)	test_majacc   0.54 (  0.54)	Loss_d 0.692 (0.693)	test_acc_d   0.54 (  0.53)	test_minacc_d   0.57 (  0.52)	test_majacc_d   0.54 (  0.54)	test_corr_d  -0.02 ( -0.02)
Test: [  26/  26]	Loss 0.691 (0.692)	test_acc   0.56 (  0.54)	test_minacc   0.47 (  0.52)	test_majacc   0.58 (  0.54)	Loss_d 0.691 (0.692)	test_acc_d   0.56 (  0.54)	test_minacc_d   0.47 (  0.52)	test_majacc_d   0.58 (  0.54)	test_corr_d   0.03 ( -0.02)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 65.97it/s]
Test: [  0/  1]	Loss 0.691 (0.691)	test_acc   0.53 (  0.53)	test_minacc   0.53 (  0.53)	test_majacc   0.44 (  0.44)	Loss_d 0.691 (0.691)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.44 (  0.44)	test_corr_d  -0.17 ( -0.17)
Test: [  1/  1]	Loss 0.691 (0.691)	test_acc   0.53 (  0.53)	test_minacc   0.53 (  0.53)	test_majacc   0.44 (  0.44)	Loss_d 0.691 (0.691)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.44 (  0.44)	test_corr_d  -0.17 ( -0.17)
Overall Timing[ 44/  1]	epoch_time 0.0368 (0.0383)	validation_time 0.0006 (0.0006)	train_time 0.0361 (0.0374)
record: (train_acc, test_acc) (0.6315000070333481, 0.7120000123977661)
last accs (train_acc, test_acc) (0.5382000120282173, 0.5250000357627869)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.59it/s] 19%|#9        | 5/26 [00:00<00:00, 23.35it/s] 35%|###4      | 9/26 [00:00<00:00, 28.45it/s] 50%|#####     | 13/26 [00:00<00:00, 31.17it/s] 65%|######5   | 17/26 [00:00<00:00, 32.90it/s] 81%|########  | 21/26 [00:00<00:00, 34.15it/s] 96%|#########6| 25/26 [00:00<00:00, 34.83it/s]100%|##########| 26/26 [00:00<00:00, 29.45it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1170 400
penalty weights 10000.0
args.step pgd_anneal_iters 1170 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1171 400
penalty weights 10000.0
args.step pgd_anneal_iters 1171 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1172 400
penalty weights 10000.0
args.step pgd_anneal_iters 1172 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1173 400
penalty weights 10000.0
args.step pgd_anneal_iters 1173 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1174 400
penalty weights 10000.0
args.step pgd_anneal_iters 1174 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1175 400
penalty weights 10000.0
args.step pgd_anneal_iters 1175 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1176 400
penalty weights 10000.0
args.step pgd_anneal_iters 1176 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1177 400
penalty weights 10000.0
args.step pgd_anneal_iters 1177 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1178 400
penalty weights 10000.0
args.step pgd_anneal_iters 1178 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1179 400
penalty weights 10000.0
args.step pgd_anneal_iters 1179 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1180 400
penalty weights 10000.0
args.step pgd_anneal_iters 1180 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1181 400
penalty weights 10000.0
args.step pgd_anneal_iters 1181 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1182 400
penalty weights 10000.0
args.step pgd_anneal_iters 1182 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1183 400
penalty weights 10000.0
args.step pgd_anneal_iters 1183 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1184 400
penalty weights 10000.0
args.step pgd_anneal_iters 1184 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1185 400
penalty weights 10000.0
args.step pgd_anneal_iters 1185 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1186 400
penalty weights 10000.0
args.step pgd_anneal_iters 1186 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1187 400
penalty weights 10000.0
args.step pgd_anneal_iters 1187 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1188 400
penalty weights 10000.0
args.step pgd_anneal_iters 1188 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1189 400
penalty weights 10000.0
args.step pgd_anneal_iters 1189 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1190 400
penalty weights 10000.0
args.step pgd_anneal_iters 1190 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1191 400
penalty weights 10000.0
args.step pgd_anneal_iters 1191 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1192 400
penalty weights 10000.0
args.step pgd_anneal_iters 1192 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1193 400
penalty weights 10000.0
args.step pgd_anneal_iters 1193 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1194 400
penalty weights 10000.0
args.step pgd_anneal_iters 1194 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1195 400
penalty weights 10000.0
args.step pgd_anneal_iters 1195 600
dim_v 512
Epoch: [45][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.15 (  0.15)	train_acc   0.57 (  0.54)	train_minacc   0.47 (  0.52)	train_majacc   0.58 (  0.54)	train_corr   0.00 (  0.00)	l1 2.9456 (2.9447)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.96it/s] 23%|##3       | 6/26 [00:00<00:00, 25.80it/s]                                               23%|##3       | 6/26 [00:00<00:00, 25.80it/s] 46%|####6     | 12/26 [00:00<00:00, 37.66it/s] 65%|######5   | 17/26 [00:00<00:00, 40.90it/s]                                                65%|######5   | 17/26 [00:00<00:00, 40.90it/s] 88%|########8 | 23/26 [00:00<00:00, 46.52it/s]100%|##########| 26/26 [00:00<00:00, 36.83it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.53 (  0.53)	test_minacc   0.45 (  0.45)	test_majacc   0.54 (  0.54)	Loss_d 0.693 (0.693)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.45 (  0.45)	test_majacc_d   0.54 (  0.54)	test_corr_d   0.01 (  0.01)
Test: [  10/  26]	Loss 0.692 (0.693)	test_acc   0.51 (  0.54)	test_minacc   0.54 (  0.54)	test_majacc   0.51 (  0.54)	Loss_d 0.692 (0.693)	test_acc_d   0.51 (  0.54)	test_minacc_d   0.54 (  0.54)	test_majacc_d   0.51 (  0.54)	test_corr_d   0.01 ( -0.02)
Test: [  20/  26]	Loss 0.692 (0.693)	test_acc   0.55 (  0.53)	test_minacc   0.57 (  0.52)	test_majacc   0.55 (  0.54)	Loss_d 0.692 (0.693)	test_acc_d   0.55 (  0.53)	test_minacc_d   0.57 (  0.52)	test_majacc_d   0.55 (  0.54)	test_corr_d  -0.03 ( -0.03)
Test: [  26/  26]	Loss 0.691 (0.692)	test_acc   0.57 (  0.54)	test_minacc   0.47 (  0.52)	test_majacc   0.58 (  0.54)	Loss_d 0.691 (0.692)	test_acc_d   0.57 (  0.54)	test_minacc_d   0.47 (  0.52)	test_majacc_d   0.58 (  0.54)	test_corr_d   0.03 ( -0.02)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.73it/s]
Test: [  0/  1]	Loss 0.691 (0.691)	test_acc   0.53 (  0.53)	test_minacc   0.54 (  0.54)	test_majacc   0.44 (  0.44)	Loss_d 0.691 (0.691)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.54 (  0.54)	test_majacc_d   0.44 (  0.44)	test_corr_d  -0.17 ( -0.17)
Test: [  1/  1]	Loss 0.691 (0.691)	test_acc   0.53 (  0.53)	test_minacc   0.54 (  0.54)	test_majacc   0.44 (  0.44)	Loss_d 0.691 (0.691)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.54 (  0.54)	test_majacc_d   0.44 (  0.44)	test_corr_d  -0.17 ( -0.17)
Overall Timing[ 45/  1]	epoch_time 0.0375 (0.0383)	validation_time 0.0004 (0.0005)	train_time 0.0371 (0.0374)
record: (train_acc, test_acc) (0.6315000070333481, 0.7120000123977661)
last accs (train_acc, test_acc) (0.5395000098347664, 0.5260000228881836)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.68it/s] 19%|#9        | 5/26 [00:00<00:00, 21.96it/s] 35%|###4      | 9/26 [00:00<00:00, 27.42it/s] 50%|#####     | 13/26 [00:00<00:00, 29.71it/s] 65%|######5   | 17/26 [00:00<00:00, 31.72it/s] 81%|########  | 21/26 [00:00<00:00, 32.95it/s] 96%|#########6| 25/26 [00:00<00:00, 33.98it/s]100%|##########| 26/26 [00:00<00:00, 28.44it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1196 400
penalty weights 10000.0
args.step pgd_anneal_iters 1196 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1197 400
penalty weights 10000.0
args.step pgd_anneal_iters 1197 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1198 400
penalty weights 10000.0
args.step pgd_anneal_iters 1198 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1199 400
penalty weights 10000.0
args.step pgd_anneal_iters 1199 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1200 400
penalty weights 10000.0
args.step pgd_anneal_iters 1200 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1201 400
penalty weights 10000.0
args.step pgd_anneal_iters 1201 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1202 400
penalty weights 10000.0
args.step pgd_anneal_iters 1202 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1203 400
penalty weights 10000.0
args.step pgd_anneal_iters 1203 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1204 400
penalty weights 10000.0
args.step pgd_anneal_iters 1204 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1205 400
penalty weights 10000.0
args.step pgd_anneal_iters 1205 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1206 400
penalty weights 10000.0
args.step pgd_anneal_iters 1206 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1207 400
penalty weights 10000.0
args.step pgd_anneal_iters 1207 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1208 400
penalty weights 10000.0
args.step pgd_anneal_iters 1208 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1209 400
penalty weights 10000.0
args.step pgd_anneal_iters 1209 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1210 400
penalty weights 10000.0
args.step pgd_anneal_iters 1210 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1211 400
penalty weights 10000.0
args.step pgd_anneal_iters 1211 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1212 400
penalty weights 10000.0
args.step pgd_anneal_iters 1212 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1213 400
penalty weights 10000.0
args.step pgd_anneal_iters 1213 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1214 400
penalty weights 10000.0
args.step pgd_anneal_iters 1214 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1215 400
penalty weights 10000.0
args.step pgd_anneal_iters 1215 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1216 400
penalty weights 10000.0
args.step pgd_anneal_iters 1216 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1217 400
penalty weights 10000.0
args.step pgd_anneal_iters 1217 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1218 400
penalty weights 10000.0
args.step pgd_anneal_iters 1218 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1219 400
penalty weights 10000.0
args.step pgd_anneal_iters 1219 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1220 400
penalty weights 10000.0
args.step pgd_anneal_iters 1220 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1221 400
penalty weights 10000.0
args.step pgd_anneal_iters 1221 600
dim_v 512
Epoch: [46][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.15 (  0.15)	train_acc   0.57 (  0.54)	train_minacc   0.50 (  0.52)	train_majacc   0.58 (  0.54)	train_corr   0.00 (  0.00)	l1 2.9462 (2.9455)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 19.70it/s] 27%|##6       | 7/26 [00:00<00:00, 37.08it/s]                                               27%|##6       | 7/26 [00:00<00:00, 37.08it/s] 50%|#####     | 13/26 [00:00<00:00, 42.20it/s] 73%|#######3  | 19/26 [00:00<00:00, 48.11it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 48.11it/s] 96%|#########6| 25/26 [00:00<00:00, 48.58it/s]100%|##########| 26/26 [00:00<00:00, 41.26it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.53 (  0.53)	test_minacc   0.45 (  0.45)	test_majacc   0.55 (  0.55)	Loss_d 0.693 (0.693)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.45 (  0.45)	test_majacc_d   0.55 (  0.55)	test_corr_d   0.01 (  0.01)
Test: [  10/  26]	Loss 0.692 (0.693)	test_acc   0.51 (  0.54)	test_minacc   0.54 (  0.53)	test_majacc   0.51 (  0.54)	Loss_d 0.692 (0.693)	test_acc_d   0.51 (  0.54)	test_minacc_d   0.54 (  0.53)	test_majacc_d   0.51 (  0.54)	test_corr_d   0.01 ( -0.02)
Test: [  20/  26]	Loss 0.692 (0.693)	test_acc   0.56 (  0.53)	test_minacc   0.57 (  0.51)	test_majacc   0.56 (  0.54)	Loss_d 0.692 (0.693)	test_acc_d   0.56 (  0.53)	test_minacc_d   0.57 (  0.51)	test_majacc_d   0.56 (  0.54)	test_corr_d  -0.03 ( -0.03)
Test: [  26/  26]	Loss 0.691 (0.693)	test_acc   0.57 (  0.54)	test_minacc   0.50 (  0.52)	test_majacc   0.58 (  0.54)	Loss_d 0.691 (0.693)	test_acc_d   0.57 (  0.54)	test_minacc_d   0.50 (  0.52)	test_majacc_d   0.58 (  0.54)	test_corr_d   0.03 ( -0.02)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.99it/s]
Test: [  0/  1]	Loss 0.691 (0.691)	test_acc   0.52 (  0.52)	test_minacc   0.53 (  0.53)	test_majacc   0.44 (  0.44)	Loss_d 0.691 (0.691)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.44 (  0.44)	test_corr_d  -0.17 ( -0.17)
Test: [  1/  1]	Loss 0.691 (0.691)	test_acc   0.52 (  0.52)	test_minacc   0.53 (  0.53)	test_majacc   0.44 (  0.44)	Loss_d 0.691 (0.691)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.44 (  0.44)	test_corr_d  -0.17 ( -0.17)
Overall Timing[ 46/  1]	epoch_time 0.0367 (0.0383)	validation_time 0.0004 (0.0005)	train_time 0.0363 (0.0374)
record: (train_acc, test_acc) (0.6315000070333481, 0.7120000123977661)
last accs (train_acc, test_acc) (0.5391000112295151, 0.5230000019073486)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.17it/s] 19%|#9        | 5/26 [00:00<00:00, 22.63it/s] 35%|###4      | 9/26 [00:00<00:00, 27.64it/s] 50%|#####     | 13/26 [00:00<00:00, 30.48it/s] 65%|######5   | 17/26 [00:00<00:00, 32.03it/s] 81%|########  | 21/26 [00:00<00:00, 33.63it/s] 96%|#########6| 25/26 [00:00<00:00, 34.04it/s]100%|##########| 26/26 [00:00<00:00, 28.89it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1222 400
penalty weights 10000.0
args.step pgd_anneal_iters 1222 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1223 400
penalty weights 10000.0
args.step pgd_anneal_iters 1223 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1224 400
penalty weights 10000.0
args.step pgd_anneal_iters 1224 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1225 400
penalty weights 10000.0
args.step pgd_anneal_iters 1225 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1226 400
penalty weights 10000.0
args.step pgd_anneal_iters 1226 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1227 400
penalty weights 10000.0
args.step pgd_anneal_iters 1227 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1228 400
penalty weights 10000.0
args.step pgd_anneal_iters 1228 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1229 400
penalty weights 10000.0
args.step pgd_anneal_iters 1229 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1230 400
penalty weights 10000.0
args.step pgd_anneal_iters 1230 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1231 400
penalty weights 10000.0
args.step pgd_anneal_iters 1231 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1232 400
penalty weights 10000.0
args.step pgd_anneal_iters 1232 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1233 400
penalty weights 10000.0
args.step pgd_anneal_iters 1233 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1234 400
penalty weights 10000.0
args.step pgd_anneal_iters 1234 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1235 400
penalty weights 10000.0
args.step pgd_anneal_iters 1235 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1236 400
penalty weights 10000.0
args.step pgd_anneal_iters 1236 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1237 400
penalty weights 10000.0
args.step pgd_anneal_iters 1237 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1238 400
penalty weights 10000.0
args.step pgd_anneal_iters 1238 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1239 400
penalty weights 10000.0
args.step pgd_anneal_iters 1239 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1240 400
penalty weights 10000.0
args.step pgd_anneal_iters 1240 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1241 400
penalty weights 10000.0
args.step pgd_anneal_iters 1241 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1242 400
penalty weights 10000.0
args.step pgd_anneal_iters 1242 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1243 400
penalty weights 10000.0
args.step pgd_anneal_iters 1243 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1244 400
penalty weights 10000.0
args.step pgd_anneal_iters 1244 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1245 400
penalty weights 10000.0
args.step pgd_anneal_iters 1245 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1246 400
penalty weights 10000.0
args.step pgd_anneal_iters 1246 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1247 400
penalty weights 10000.0
args.step pgd_anneal_iters 1247 600
dim_v 512
Epoch: [47][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.15 (  0.15)	train_acc   0.56 (  0.54)	train_minacc   0.50 (  0.52)	train_majacc   0.57 (  0.54)	train_corr   0.00 (  0.00)	l1 2.9465 (2.9460)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 19.62it/s] 31%|###       | 8/26 [00:00<00:00, 41.16it/s]                                               31%|###       | 8/26 [00:00<00:00, 41.16it/s] 50%|#####     | 13/26 [00:00<00:00, 42.27it/s] 73%|#######3  | 19/26 [00:00<00:00, 47.70it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 47.70it/s] 96%|#########6| 25/26 [00:00<00:00, 48.34it/s]100%|##########| 26/26 [00:00<00:00, 41.68it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.53 (  0.53)	test_minacc   0.45 (  0.45)	test_majacc   0.54 (  0.54)	Loss_d 0.693 (0.693)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.45 (  0.45)	test_majacc_d   0.54 (  0.54)	test_corr_d   0.01 (  0.01)
Test: [  10/  26]	Loss 0.692 (0.693)	test_acc   0.52 (  0.54)	test_minacc   0.54 (  0.54)	test_majacc   0.51 (  0.54)	Loss_d 0.692 (0.693)	test_acc_d   0.52 (  0.54)	test_minacc_d   0.54 (  0.54)	test_majacc_d   0.51 (  0.54)	test_corr_d   0.01 ( -0.02)
Test: [  20/  26]	Loss 0.692 (0.693)	test_acc   0.56 (  0.54)	test_minacc   0.56 (  0.51)	test_majacc   0.56 (  0.54)	Loss_d 0.692 (0.693)	test_acc_d   0.56 (  0.54)	test_minacc_d   0.56 (  0.51)	test_majacc_d   0.56 (  0.54)	test_corr_d  -0.03 ( -0.03)
Test: [  26/  26]	Loss 0.691 (0.693)	test_acc   0.56 (  0.54)	test_minacc   0.50 (  0.52)	test_majacc   0.57 (  0.54)	Loss_d 0.691 (0.693)	test_acc_d   0.56 (  0.54)	test_minacc_d   0.50 (  0.52)	test_majacc_d   0.57 (  0.54)	test_corr_d   0.03 ( -0.02)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 67.29it/s]
Test: [  0/  1]	Loss 0.691 (0.691)	test_acc   0.52 (  0.52)	test_minacc   0.53 (  0.53)	test_majacc   0.44 (  0.44)	Loss_d 0.691 (0.691)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.44 (  0.44)	test_corr_d  -0.17 ( -0.17)
Test: [  1/  1]	Loss 0.691 (0.691)	test_acc   0.52 (  0.52)	test_minacc   0.53 (  0.53)	test_majacc   0.44 (  0.44)	Loss_d 0.691 (0.691)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.44 (  0.44)	test_corr_d  -0.17 ( -0.17)
Overall Timing[ 47/  1]	epoch_time 0.0349 (0.0382)	validation_time 0.0003 (0.0005)	train_time 0.0345 (0.0373)
record: (train_acc, test_acc) (0.6315000070333481, 0.7120000123977661)
last accs (train_acc, test_acc) (0.5395000107884407, 0.5230000019073486)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.86it/s] 19%|#9        | 5/26 [00:00<00:01, 19.18it/s] 35%|###4      | 9/26 [00:00<00:00, 25.47it/s] 50%|#####     | 13/26 [00:00<00:00, 28.42it/s] 65%|######5   | 17/26 [00:00<00:00, 30.68it/s] 81%|########  | 21/26 [00:00<00:00, 32.11it/s] 96%|#########6| 25/26 [00:00<00:00, 32.88it/s]100%|##########| 26/26 [00:00<00:00, 26.98it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1248 400
penalty weights 10000.0
args.step pgd_anneal_iters 1248 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1249 400
penalty weights 10000.0
args.step pgd_anneal_iters 1249 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1250 400
penalty weights 10000.0
args.step pgd_anneal_iters 1250 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1251 400
penalty weights 10000.0
args.step pgd_anneal_iters 1251 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1252 400
penalty weights 10000.0
args.step pgd_anneal_iters 1252 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1253 400
penalty weights 10000.0
args.step pgd_anneal_iters 1253 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1254 400
penalty weights 10000.0
args.step pgd_anneal_iters 1254 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1255 400
penalty weights 10000.0
args.step pgd_anneal_iters 1255 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1256 400
penalty weights 10000.0
args.step pgd_anneal_iters 1256 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1257 400
penalty weights 10000.0
args.step pgd_anneal_iters 1257 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1258 400
penalty weights 10000.0
args.step pgd_anneal_iters 1258 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1259 400
penalty weights 10000.0
args.step pgd_anneal_iters 1259 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1260 400
penalty weights 10000.0
args.step pgd_anneal_iters 1260 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1261 400
penalty weights 10000.0
args.step pgd_anneal_iters 1261 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1262 400
penalty weights 10000.0
args.step pgd_anneal_iters 1262 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1263 400
penalty weights 10000.0
args.step pgd_anneal_iters 1263 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1264 400
penalty weights 10000.0
args.step pgd_anneal_iters 1264 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1265 400
penalty weights 10000.0
args.step pgd_anneal_iters 1265 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1266 400
penalty weights 10000.0
args.step pgd_anneal_iters 1266 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1267 400
penalty weights 10000.0
args.step pgd_anneal_iters 1267 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1268 400
penalty weights 10000.0
args.step pgd_anneal_iters 1268 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1269 400
penalty weights 10000.0
args.step pgd_anneal_iters 1269 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1270 400
penalty weights 10000.0
args.step pgd_anneal_iters 1270 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1271 400
penalty weights 10000.0
args.step pgd_anneal_iters 1271 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1272 400
penalty weights 10000.0
args.step pgd_anneal_iters 1272 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1273 400
penalty weights 10000.0
args.step pgd_anneal_iters 1273 600
dim_v 512
Epoch: [48][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.15 (  0.15)	train_acc   0.57 (  0.54)	train_minacc   0.50 (  0.52)	train_majacc   0.58 (  0.54)	train_corr   0.00 (  0.00)	l1 2.9465 (2.9461)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.37it/s] 27%|##6       | 7/26 [00:00<00:00, 33.36it/s]                                               27%|##6       | 7/26 [00:00<00:00, 33.36it/s] 50%|#####     | 13/26 [00:00<00:00, 40.58it/s] 73%|#######3  | 19/26 [00:00<00:00, 46.97it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 46.97it/s] 96%|#########6| 25/26 [00:00<00:00, 48.06it/s]100%|##########| 26/26 [00:00<00:00, 39.22it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.53 (  0.53)	test_minacc   0.45 (  0.45)	test_majacc   0.54 (  0.54)	Loss_d 0.693 (0.693)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.45 (  0.45)	test_majacc_d   0.54 (  0.54)	test_corr_d   0.01 (  0.01)
Test: [  10/  26]	Loss 0.692 (0.693)	test_acc   0.52 (  0.54)	test_minacc   0.52 (  0.54)	test_majacc   0.51 (  0.54)	Loss_d 0.692 (0.693)	test_acc_d   0.52 (  0.54)	test_minacc_d   0.52 (  0.54)	test_majacc_d   0.51 (  0.54)	test_corr_d   0.01 ( -0.02)
Test: [  20/  26]	Loss 0.692 (0.693)	test_acc   0.56 (  0.54)	test_minacc   0.56 (  0.51)	test_majacc   0.56 (  0.54)	Loss_d 0.692 (0.693)	test_acc_d   0.56 (  0.54)	test_minacc_d   0.56 (  0.51)	test_majacc_d   0.56 (  0.54)	test_corr_d  -0.03 ( -0.03)
Test: [  26/  26]	Loss 0.691 (0.693)	test_acc   0.57 (  0.54)	test_minacc   0.50 (  0.52)	test_majacc   0.58 (  0.54)	Loss_d 0.691 (0.693)	test_acc_d   0.57 (  0.54)	test_minacc_d   0.50 (  0.52)	test_majacc_d   0.58 (  0.54)	test_corr_d   0.03 ( -0.02)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 65.67it/s]
Test: [  0/  1]	Loss 0.691 (0.691)	test_acc   0.53 (  0.53)	test_minacc   0.53 (  0.53)	test_majacc   0.47 (  0.47)	Loss_d 0.691 (0.691)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.47 (  0.47)	test_corr_d  -0.17 ( -0.17)
Test: [  1/  1]	Loss 0.691 (0.691)	test_acc   0.53 (  0.53)	test_minacc   0.53 (  0.53)	test_majacc   0.47 (  0.47)	Loss_d 0.691 (0.691)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.47 (  0.47)	test_corr_d  -0.17 ( -0.17)
Overall Timing[ 48/  1]	epoch_time 0.0367 (0.0382)	validation_time 0.0004 (0.0005)	train_time 0.0363 (0.0373)
record: (train_acc, test_acc) (0.6315000070333481, 0.7120000123977661)
last accs (train_acc, test_acc) (0.5397000144720078, 0.5270000100135803)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.88it/s] 19%|#9        | 5/26 [00:00<00:01, 20.61it/s] 35%|###4      | 9/26 [00:00<00:00, 25.44it/s] 50%|#####     | 13/26 [00:00<00:00, 28.51it/s] 65%|######5   | 17/26 [00:00<00:00, 30.41it/s] 81%|########  | 21/26 [00:00<00:00, 32.17it/s] 96%|#########6| 25/26 [00:00<00:00, 32.49it/s]100%|##########| 26/26 [00:00<00:00, 27.30it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1274 400
penalty weights 10000.0
args.step pgd_anneal_iters 1274 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1275 400
penalty weights 10000.0
args.step pgd_anneal_iters 1275 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1276 400
penalty weights 10000.0
args.step pgd_anneal_iters 1276 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1277 400
penalty weights 10000.0
args.step pgd_anneal_iters 1277 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1278 400
penalty weights 10000.0
args.step pgd_anneal_iters 1278 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1279 400
penalty weights 10000.0
args.step pgd_anneal_iters 1279 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1280 400
penalty weights 10000.0
args.step pgd_anneal_iters 1280 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1281 400
penalty weights 10000.0
args.step pgd_anneal_iters 1281 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1282 400
penalty weights 10000.0
args.step pgd_anneal_iters 1282 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1283 400
penalty weights 10000.0
args.step pgd_anneal_iters 1283 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1284 400
penalty weights 10000.0
args.step pgd_anneal_iters 1284 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1285 400
penalty weights 10000.0
args.step pgd_anneal_iters 1285 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1286 400
penalty weights 10000.0
args.step pgd_anneal_iters 1286 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1287 400
penalty weights 10000.0
args.step pgd_anneal_iters 1287 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1288 400
penalty weights 10000.0
args.step pgd_anneal_iters 1288 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1289 400
penalty weights 10000.0
args.step pgd_anneal_iters 1289 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1290 400
penalty weights 10000.0
args.step pgd_anneal_iters 1290 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1291 400
penalty weights 10000.0
args.step pgd_anneal_iters 1291 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1292 400
penalty weights 10000.0
args.step pgd_anneal_iters 1292 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1293 400
penalty weights 10000.0
args.step pgd_anneal_iters 1293 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1294 400
penalty weights 10000.0
args.step pgd_anneal_iters 1294 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1295 400
penalty weights 10000.0
args.step pgd_anneal_iters 1295 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1296 400
penalty weights 10000.0
args.step pgd_anneal_iters 1296 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1297 400
penalty weights 10000.0
args.step pgd_anneal_iters 1297 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1298 400
penalty weights 10000.0
args.step pgd_anneal_iters 1298 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1299 400
penalty weights 10000.0
args.step pgd_anneal_iters 1299 600
dim_v 512
Epoch: [49][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.15 (  0.15)	train_acc   0.56 (  0.54)	train_minacc   0.50 (  0.52)	train_majacc   0.57 (  0.54)	train_corr   0.00 (  0.00)	l1 2.9462 (2.9460)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.74it/s] 27%|##6       | 7/26 [00:00<00:00, 32.58it/s]                                               27%|##6       | 7/26 [00:00<00:00, 32.58it/s] 50%|#####     | 13/26 [00:00<00:00, 40.23it/s] 73%|#######3  | 19/26 [00:00<00:00, 46.69it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 46.69it/s] 96%|#########6| 25/26 [00:00<00:00, 48.03it/s]100%|##########| 26/26 [00:00<00:00, 38.66it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.53 (  0.53)	test_minacc   0.45 (  0.45)	test_majacc   0.55 (  0.55)	Loss_d 0.693 (0.693)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.45 (  0.45)	test_majacc_d   0.55 (  0.55)	test_corr_d   0.01 (  0.01)
Test: [  10/  26]	Loss 0.692 (0.693)	test_acc   0.52 (  0.54)	test_minacc   0.52 (  0.54)	test_majacc   0.52 (  0.54)	Loss_d 0.692 (0.693)	test_acc_d   0.52 (  0.54)	test_minacc_d   0.52 (  0.54)	test_majacc_d   0.52 (  0.54)	test_corr_d   0.01 ( -0.02)
Test: [  20/  26]	Loss 0.692 (0.693)	test_acc   0.56 (  0.54)	test_minacc   0.57 (  0.52)	test_majacc   0.55 (  0.54)	Loss_d 0.692 (0.693)	test_acc_d   0.56 (  0.54)	test_minacc_d   0.57 (  0.52)	test_majacc_d   0.55 (  0.54)	test_corr_d  -0.03 ( -0.03)
Test: [  26/  26]	Loss 0.691 (0.693)	test_acc   0.56 (  0.54)	test_minacc   0.50 (  0.52)	test_majacc   0.57 (  0.54)	Loss_d 0.691 (0.693)	test_acc_d   0.56 (  0.54)	test_minacc_d   0.50 (  0.52)	test_majacc_d   0.57 (  0.54)	test_corr_d   0.03 ( -0.02)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.37it/s]
Test: [  0/  1]	Loss 0.691 (0.691)	test_acc   0.53 (  0.53)	test_minacc   0.53 (  0.53)	test_majacc   0.48 (  0.48)	Loss_d 0.691 (0.691)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.48 (  0.48)	test_corr_d  -0.17 ( -0.17)
Test: [  1/  1]	Loss 0.691 (0.691)	test_acc   0.53 (  0.53)	test_minacc   0.53 (  0.53)	test_majacc   0.48 (  0.48)	Loss_d 0.691 (0.691)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.48 (  0.48)	test_corr_d  -0.17 ( -0.17)
Overall Timing[ 49/  1]	epoch_time 0.0376 (0.0382)	validation_time 0.0003 (0.0005)	train_time 0.0372 (0.0373)
record: (train_acc, test_acc) (0.6315000070333481, 0.7120000123977661)
last accs (train_acc, test_acc) (0.5411000130176544, 0.5270000100135803)
done saving aggregate.csv to ./aggregate.csv
wandb: - 0.094 MB of 0.094 MB uploadedwandb: \ 0.094 MB of 0.094 MB uploadedwandb: | 0.094 MB of 0.094 MB uploadedwandb: / 0.094 MB of 0.094 MB uploadedwandb: - 0.116 MB of 0.122 MB uploaded (0.003 MB deduped)wandb: 
wandb: Run history:
wandb:                                                                           global_step ▁▁▁▁▂▂▂▂▂▃▃▃▃▃▃▄▄▄▄▄▅▅▅▅▅▅▆▆▆▆▆▆▇▇▇▇▇███
wandb:      resnet18-usc-unsigned/baseline/prune_rate=1.0/28/logs/diagnostics/epoch_time_val █▁▁▁▁▁▁▁▁▁▁▁▁▁▂▁▁▁▁▃▁▁▁▁▁▁▁▁▂▁▁▁▁▁▁▁▁▁▁▁
wandb:      resnet18-usc-unsigned/baseline/prune_rate=1.0/28/logs/diagnostics/train_time_val █▁▂▁▂▂▁▁▁▁▁▁▂▂▂▁▂▁▂▄▁▁▁▁▁▂▁▁▂▁▂▁▂▁▁▁▂▁▁▂
wandb: resnet18-usc-unsigned/baseline/prune_rate=1.0/28/logs/diagnostics/validation_time_val █▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:                     resnet18-usc-unsigned/baseline/prune_rate=1.0/28/logs/global_step ▁▁▁▁▂▂▂▂▂▃▃▃▃▃▃▄▄▄▄▄▅▅▅▅▅▅▆▆▆▆▆▆▇▇▇▇▇███
wandb:                   resnet18-usc-unsigned/baseline/prune_rate=1.0/28/logs/test/Loss_avg ▆▆▇▆▆▇█▇█▆▆▇▁▂▁▁▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂
wandb:                 resnet18-usc-unsigned/baseline/prune_rate=1.0/28/logs/test/Loss_d_avg ▆▆▇▆▆▇█▇█▆▆▇▁▂▁▁▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂
wandb:                 resnet18-usc-unsigned/baseline/prune_rate=1.0/28/logs/test/Loss_d_val ▆▆▇▆▆▇█▇█▆▆▇▁▂▁▁▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂
wandb:                   resnet18-usc-unsigned/baseline/prune_rate=1.0/28/logs/test/Loss_val ▆▆▇▆▆▇█▇█▆▆▇▁▂▁▁▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂
wandb:               resnet18-usc-unsigned/baseline/prune_rate=1.0/28/logs/test/test_acc_avg ▁▁▁▁▂▁▃▃▂▅▃▂█▆▇▆▆▆▇▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/28/logs/test/test_acc_d_avg ▁▁▁▁▂▁▃▃▂▅▃▂█▆▇▆▆▆▇▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/28/logs/test/test_acc_d_val ▁▁▁▁▂▁▃▃▂▅▃▂█▆▇▆▆▆▇▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆
wandb:               resnet18-usc-unsigned/baseline/prune_rate=1.0/28/logs/test/test_acc_val ▁▁▁▁▂▁▃▃▂▅▃▂█▆▇▆▆▆▇▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/28/logs/test/test_corr_d_avg ████▇█▇▇█▆▇▇▁▃▂▂▃▃▂▆▄▄▃▃▃▃▃▃▂▂▂▂▂▂▂▂▂▂▂▂
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/28/logs/test/test_corr_d_val ████▇█▇▇█▆▇▇▁▃▂▂▃▃▂▆▄▄▃▃▃▃▃▃▂▂▂▂▂▂▂▂▂▂▂▂
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/28/logs/test/test_majacc_avg ██████▇▇█▇██▃▃▃▃▃▂▁▂▂▂▂▂▂▂▂▂▁▁▁▁▁▁▁▁▁▁▁▂
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/28/logs/test/test_majacc_d_avg ██████▇▇█▇██▃▃▃▃▃▂▁▂▂▂▂▂▂▂▂▂▁▁▁▁▁▁▁▁▁▁▁▂
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/28/logs/test/test_majacc_d_val ██████▇▇█▇██▃▃▃▃▃▂▁▂▂▂▂▂▂▂▂▂▁▁▁▁▁▁▁▁▁▁▁▂
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/28/logs/test/test_majacc_val ██████▇▇█▇██▃▃▃▃▃▂▁▂▂▂▂▂▂▂▂▂▁▁▁▁▁▁▁▁▁▁▁▂
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/28/logs/test/test_minacc_avg ▁▁▁▁▂▁▃▃▂▄▃▂█▆▇▆▆▆▇▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/28/logs/test/test_minacc_d_avg ▁▁▁▁▂▁▃▃▂▄▃▂█▆▇▆▆▆▇▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/28/logs/test/test_minacc_d_val ▁▁▁▁▂▁▃▃▂▄▃▂█▆▇▆▆▆▇▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/28/logs/test/test_minacc_val ▁▁▁▁▂▁▃▃▂▄▃▂█▆▇▆▆▆▇▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆
wandb:                  resnet18-usc-unsigned/baseline/prune_rate=1.0/28/logs/train/Loss_avg █▅▃▂▂▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:                  resnet18-usc-unsigned/baseline/prune_rate=1.0/28/logs/train/Loss_val █▅▃▃▂▂▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:                    resnet18-usc-unsigned/baseline/prune_rate=1.0/28/logs/train/l1_avg ▃▃▂▂▂▂▃▄▅▆▇▇███████▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:                    resnet18-usc-unsigned/baseline/prune_rate=1.0/28/logs/train/l1_val ▃▃▂▂▂▃▃▄▅▆▇▇███████▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/28/logs/train/train_acc_avg ▆███████████▇▄▃▃▃▂▂▁▁▁▁▁▁▁▁▁▁▁▂▂▂▂▂▂▂▂▂▂
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/28/logs/train/train_acc_val █▇▇▇▇█▇▇████▃▃▂▂▃▃▂▁▁▁▁▁▁▁▂▂▂▂▂▂▂▂▂▂▂▂▂▂
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/28/logs/train/train_corr_avg ▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/28/logs/train/train_corr_val ▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/28/logs/train/train_majacc_avg ▆██████████▇▆▃▃▃▂▂▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▂▂▂▂▂▂
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/28/logs/train/train_majacc_val ███▇▇█▇▇▇▇▇▇▂▃▂▂▃▂▂▁▁▁▁▁▁▁▁▁▂▂▂▂▂▂▂▂▂▂▂▂
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/28/logs/train/train_minacc_avg ▂▁▁▁▂▂▂▂▃▃▃▄▆█▇▇▇▇▇▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/28/logs/train/train_minacc_val ▁▁▁▃▃▁▅▄▅▅▅▅█▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▅▅▅▅▅▅▅▅
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/28/logs/train/train_nll_avg ▆▃▂▂▂▂▁▁▁▁▁▁▃▇▇▇▇███████████████████████
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/28/logs/train/train_nll_val ▃▃▃▃▂▂▂▂▁▂▁▁▇▇██▇▇██████████████████████
wandb:         resnet18-usc-unsigned/baseline/prune_rate=1.0/28/logs/train/train_penalty_avg █▂▂▂▂▂▁▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:         resnet18-usc-unsigned/baseline/prune_rate=1.0/28/logs/train/train_penalty_val █▆▇▄▃▆▃▄▃▃▃▃▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:           resnet18-usc-unsigned/baseline/prune_rate=1.0/28/logs/train/weight_norm_avg █▅▃▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:           resnet18-usc-unsigned/baseline/prune_rate=1.0/28/logs/train/weight_norm_val █▄▃▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb: 
wandb: Run summary:
wandb:                                                                           global_step 49
wandb:      resnet18-usc-unsigned/baseline/prune_rate=1.0/28/logs/diagnostics/epoch_time_val 0.03755
wandb:      resnet18-usc-unsigned/baseline/prune_rate=1.0/28/logs/diagnostics/train_time_val 0.03722
wandb: resnet18-usc-unsigned/baseline/prune_rate=1.0/28/logs/diagnostics/validation_time_val 0.00032
wandb:                     resnet18-usc-unsigned/baseline/prune_rate=1.0/28/logs/global_step 49
wandb:                   resnet18-usc-unsigned/baseline/prune_rate=1.0/28/logs/test/Loss_avg 0.69113
wandb:                 resnet18-usc-unsigned/baseline/prune_rate=1.0/28/logs/test/Loss_d_avg 0.69113
wandb:                 resnet18-usc-unsigned/baseline/prune_rate=1.0/28/logs/test/Loss_d_val 0.69113
wandb:                   resnet18-usc-unsigned/baseline/prune_rate=1.0/28/logs/test/Loss_val 0.69113
wandb:               resnet18-usc-unsigned/baseline/prune_rate=1.0/28/logs/test/test_acc_avg 0.527
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/28/logs/test/test_acc_d_avg 0.527
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/28/logs/test/test_acc_d_val 0.527
wandb:               resnet18-usc-unsigned/baseline/prune_rate=1.0/28/logs/test/test_acc_val 0.527
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/28/logs/test/test_corr_d_avg -0.17007
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/28/logs/test/test_corr_d_val -0.17007
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/28/logs/test/test_majacc_avg 0.48
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/28/logs/test/test_majacc_d_avg 0.48
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/28/logs/test/test_majacc_d_val 0.48
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/28/logs/test/test_majacc_val 0.48
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/28/logs/test/test_minacc_avg 0.53222
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/28/logs/test/test_minacc_d_avg 0.53222
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/28/logs/test/test_minacc_d_val 0.53222
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/28/logs/test/test_minacc_val 0.53222
wandb:                  resnet18-usc-unsigned/baseline/prune_rate=1.0/28/logs/train/Loss_avg 9e-05
wandb:                  resnet18-usc-unsigned/baseline/prune_rate=1.0/28/logs/train/Loss_val 9e-05
wandb:                    resnet18-usc-unsigned/baseline/prune_rate=1.0/28/logs/train/l1_avg 2.94601
wandb:                    resnet18-usc-unsigned/baseline/prune_rate=1.0/28/logs/train/l1_val 2.94625
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/28/logs/train/train_acc_avg 0.5389
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/28/logs/train/train_acc_val 0.564
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/28/logs/train/train_corr_avg 0.0
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/28/logs/train/train_corr_val 0.0
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/28/logs/train/train_majacc_avg 0.54213
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/28/logs/train/train_majacc_val 0.57477
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/28/logs/train/train_minacc_avg 0.51952
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/28/logs/train/train_minacc_val 0.5
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/28/logs/train/train_nll_avg 0.69267
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/28/logs/train/train_nll_val 0.69113
wandb:         resnet18-usc-unsigned/baseline/prune_rate=1.0/28/logs/train/train_penalty_avg 0.0
wandb:         resnet18-usc-unsigned/baseline/prune_rate=1.0/28/logs/train/train_penalty_val 0.0
wandb:           resnet18-usc-unsigned/baseline/prune_rate=1.0/28/logs/train/weight_norm_avg 0.14987
wandb:           resnet18-usc-unsigned/baseline/prune_rate=1.0/28/logs/train/weight_norm_val 0.14978
wandb: 
wandb: 🚀 View run name_random at: https://wandb.ai/janezdu-uiuc/irm/runs/bqpjap2f
wandb: ⭐️ View project at: https://wandb.ai/janezdu-uiuc/irm
wandb: Synced 5 W&B file(s), 0 media file(s), 2 artifact file(s) and 1 other file(s)
wandb: Find logs at: ./wandb/run-20240906_145610-bqpjap2f/logs
wandb: WARNING The new W&B backend becomes opt-out in version 0.18.0; try it out with `wandb.require("core")`! See https://wandb.me/wandb-core for more information.
wandb: Currently logged in as: janezdu (janezdu-uiuc). Use `wandb login --relogin` to force relogin
wandb: wandb version 0.17.9 is available!  To upgrade, please run:
wandb:  $ pip install wandb --upgrade
wandb: Tracking run with wandb version 0.17.7
wandb: Run data is saved locally in /scratch/users/zd16/sparseIRM-resnet-ver/wandb/run-20240906_145840-1r7kax4h
wandb: Run `wandb offline` to turn off syncing.
wandb: Syncing run name_random
wandb: ⭐️ View project at https://wandb.ai/janezdu-uiuc/irm
wandb: 🚀 View run at https://wandb.ai/janezdu-uiuc/irm/runs/1r7kax4h
=> Reading YAML config from configs/smallscale/resnet18/resnet18-usc-unsigned.yaml
Namespace(data='dataset/', optimizer='adam', weight_opt='adam', set='mnistcifar', arch='ResNet18', config='configs/smallscale/resnet18/resnet18-usc-unsigned.yaml', log_dir=None, workers=4, epochs=50, start_epoch=None, batch_size=390, lr=0.006, warmup_length=0, momentum=0.9, weight_decay=0.0, print_freq=10, num_classes=1, resume='', resume_train_weights='', evaluate=False, pretrained=None, pretrained_distill=None, alpha_distill=0.95, T_distill=2, seed=0, multigpu=[0], lr_policy='cosine_lr', lr_adjust=30, lr_gamma=0.1, name='baseline', save_every=-1, prune_rate=1.0, param_prune_rate=0.0, pr_start=1.0, low_data=1, width_mult=1.0, nesterov=False, threetimes=False, random_subnet=False, one_batch=False, conv_type='DenseConv', freeze_weights=False, st=False, mode='fan_in', nonlinearity='relu', bn_type='LearnedBatchNorm', init='kaiming_normal', no_bn_decay=False, scale_fan=False, first_layer_dense=False, last_layer_dense=True, approx=False, zero=False, flip=False, bs=False, gumbel_sample=False, multiply_prob=False, no_multiply=False, multiply_cont=False, multiply_prob_bs=False, indiv=False, label_smoothing=None, first_layer_type=None, trainer='default', score_init_constant=1.0, K=1, update_freq=20, D=0.01, T=1, TA=True, TA2=False, TA_grow=False, center=False, straight_through=False, PLA_factor=0.1, PLA_patience=10, gradient_loss_para=0, abs_loss_para=0, thres=0.9, runs_name='name_random', resume_compare_loss1='', resume_compare_loss2='', init_weights='', trained_mask='', weight_rescaling=False, constrain_by_layer=False, weight_rescaling_data=False, use_running_stats=False, not_clipping=False, rescaling_para=False, lasso_para=0, dont_freeze_weights=False, iterative=True, prob_by_weight=False, rescale_at_fix_subnet=False, train_weights_at_the_same_time=False, sample_from_training_set=False, load_true_para=False, distill=False, finetune=False, stablize=False, prev_best=0, weight_opt_lr=0.0006, n=500, ts=0.28, te=0.6, d=20000, s=80, c=0.75, init_prob=False, thres_before=0.001, wide_ratio=0.001, noise=1, cal_p_q=False, just_finetune=False, snip=False, envs_num=2, l2_regularizer_weight=0.001, data_num=50000, env_type='linear', irm_type='irmv1', hidden_dim=390, penalty_anneal_iters=400, penalty_weight=10000.0, grayscale_model=0, weight_lr_schedule=False, fix_subnet=False, freeze_weight=False, step='ours', prior_sd_coef=0, dim_inv=2, variance_gamma=1.0, dim_spu=10, image_scale=32, cons_ratio='0.999_0.7_0.1', noise_ratio=0.2, step_gamma=0.1, step_round=3, inner_steps=1, use_pgd=True, z=5.0, pgd_anneal_iters=600)
=> Creating model 'ResNet18'
Here!!!!!!!!
==> Conv Type: DenseConv
==> BN Type: LearnedBatchNorm
<class 'torch.nn.modules.conv.Conv2d'>
<class 'torch.nn.modules.batchnorm.BatchNorm2d'>
==> Building first layer with <class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
ResNet(
  (conv1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
  (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (relu): ReLU(inplace=True)
  (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
  (layer1): Sequential(
    (0): BasicBlock(
      (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (1): BasicBlock(
      (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (layer2): Sequential(
    (0): BasicBlock(
      (conv1): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (downsample): Sequential(
        (0): Conv2d(64, 128, kernel_size=(1, 1), stride=(2, 2), bias=False)
        (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (1): BasicBlock(
      (conv1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (layer3): Sequential(
    (0): BasicBlock(
      (conv1): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (downsample): Sequential(
        (0): Conv2d(128, 256, kernel_size=(1, 1), stride=(2, 2), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (1): BasicBlock(
      (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (layer4): Sequential(
    (0): BasicBlock(
      (conv1): Conv2d(256, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (downsample): Sequential(
        (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (1): BasicBlock(
      (conv1): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (avgpool): AdaptiveAvgPool2d(output_size=1)
  (fc): Linear(in_features=512, out_features=1, bias=True)
)
=> Parallelizing on [0] gpus
<DEBUG> gradient to module.conv1.weight
<DEBUG> gradient to module.bn1.weight
<DEBUG> gradient to module.bn1.bias
<DEBUG> gradient to module.layer1.0.conv1.weight
<DEBUG> gradient to module.layer1.0.bn1.weight
<DEBUG> gradient to module.layer1.0.bn1.bias
<DEBUG> gradient to module.layer1.0.conv2.weight
<DEBUG> gradient to module.layer1.0.bn2.weight
<DEBUG> gradient to module.layer1.0.bn2.bias
<DEBUG> gradient to module.layer1.1.conv1.weight
<DEBUG> gradient to module.layer1.1.bn1.weight
<DEBUG> gradient to module.layer1.1.bn1.bias
<DEBUG> gradient to module.layer1.1.conv2.weight
<DEBUG> gradient to module.layer1.1.bn2.weight
<DEBUG> gradient to module.layer1.1.bn2.bias
<DEBUG> gradient to module.layer2.0.conv1.weight
<DEBUG> gradient to module.layer2.0.bn1.weight
<DEBUG> gradient to module.layer2.0.bn1.bias
<DEBUG> gradient to module.layer2.0.conv2.weight
<DEBUG> gradient to module.layer2.0.bn2.weight
<DEBUG> gradient to module.layer2.0.bn2.bias
<DEBUG> gradient to module.layer2.0.downsample.0.weight
<DEBUG> gradient to module.layer2.0.downsample.1.weight
<DEBUG> gradient to module.layer2.0.downsample.1.bias
<DEBUG> gradient to module.layer2.1.conv1.weight
<DEBUG> gradient to module.layer2.1.bn1.weight
<DEBUG> gradient to module.layer2.1.bn1.bias
<DEBUG> gradient to module.layer2.1.conv2.weight
<DEBUG> gradient to module.layer2.1.bn2.weight
<DEBUG> gradient to module.layer2.1.bn2.bias
<DEBUG> gradient to module.layer3.0.conv1.weight
<DEBUG> gradient to module.layer3.0.bn1.weight
<DEBUG> gradient to module.layer3.0.bn1.bias
<DEBUG> gradient to module.layer3.0.conv2.weight
<DEBUG> gradient to module.layer3.0.bn2.weight
<DEBUG> gradient to module.layer3.0.bn2.bias
<DEBUG> gradient to module.layer3.0.downsample.0.weight
<DEBUG> gradient to module.layer3.0.downsample.1.weight
<DEBUG> gradient to module.layer3.0.downsample.1.bias
<DEBUG> gradient to module.layer3.1.conv1.weight
<DEBUG> gradient to module.layer3.1.bn1.weight
<DEBUG> gradient to module.layer3.1.bn1.bias
<DEBUG> gradient to module.layer3.1.conv2.weight
<DEBUG> gradient to module.layer3.1.bn2.weight
<DEBUG> gradient to module.layer3.1.bn2.bias
<DEBUG> gradient to module.layer4.0.conv1.weight
<DEBUG> gradient to module.layer4.0.bn1.weight
<DEBUG> gradient to module.layer4.0.bn1.bias
<DEBUG> gradient to module.layer4.0.conv2.weight
<DEBUG> gradient to module.layer4.0.bn2.weight
<DEBUG> gradient to module.layer4.0.bn2.bias
<DEBUG> gradient to module.layer4.0.downsample.0.weight
<DEBUG> gradient to module.layer4.0.downsample.1.weight
<DEBUG> gradient to module.layer4.0.downsample.1.bias
<DEBUG> gradient to module.layer4.1.conv1.weight
<DEBUG> gradient to module.layer4.1.bn1.weight
<DEBUG> gradient to module.layer4.1.bn1.bias
<DEBUG> gradient to module.layer4.1.conv2.weight
<DEBUG> gradient to module.layer4.1.bn2.weight
<DEBUG> gradient to module.layer4.1.bn2.bias
<DEBUG> gradient to module.fc.weight
<DEBUG> gradient to module.fc.bias
Files already downloaded and verified
Files already downloaded and verified
Adding Noise to Label, len(Y)=12000, Label_noise=1246
Xmp (7877, 3, 32, 32) (6903, 3, 32, 32)
Xcp (5998, 3, 32, 32) (6002, 3, 32, 32)
env=0 2497 2497 3 3
xn 2500 xp 2500
env=1 1750 1750 750 750
xn 2500 xp 2500
env=2 50 50 450 450
xn 500 xp 500
=> Creating model 'EBD'
EBD(
  (embedings): Embedding(2, 1)
)
=> Parallelizing on [0] gpus
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:01<00:39,  1.58s/it] 19%|#9        | 5/26 [00:01<00:05,  3.84it/s] 35%|###4      | 9/26 [00:01<00:02,  7.51it/s] 50%|#####     | 13/26 [00:01<00:01, 11.48it/s] 65%|######5   | 17/26 [00:02<00:00, 15.43it/s] 81%|########  | 21/26 [00:02<00:00, 19.12it/s] 96%|#########6| 25/26 [00:02<00:00, 22.34it/s]100%|##########| 26/26 [00:02<00:00,  9.76it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 0 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 2 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 3 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 4 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 5 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 6 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 7 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 8 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 9 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 10 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 11 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 12 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 13 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 14 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 15 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 16 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 17 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 18 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 19 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 20 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 21 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 22 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 23 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 24 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 25 400
penalty weights 0.0
Epoch: [0][  26/  26]	Loss 8.964 (11.958)	train_nll   0.46 (  0.52)	train_penalty   0.11 (  0.18)	weight_norm   8.51 ( 11.43)	train_acc   0.83 (  0.80)	train_minacc   0.00 (  0.07)	train_majacc   1.00 (  0.93)	train_corr   0.00 (  0.00)	l1 7.0675 (7.4745)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:00, 25.35it/s] 35%|###4      | 9/26 [00:00<00:00, 39.75it/s]                                               35%|###4      | 9/26 [00:00<00:00, 39.75it/s] 58%|#####7    | 15/26 [00:00<00:00, 45.71it/s]                                                58%|#####7    | 15/26 [00:00<00:00, 45.71it/s] 81%|########  | 21/26 [00:00<00:00, 47.72it/s]100%|##########| 26/26 [00:00<00:00, 41.95it/s]
Test: [   0/  26]	Loss 0.444 (0.444)	test_acc   0.83 (  0.83)	test_minacc   0.00 (  0.00)	test_majacc   1.00 (  1.00)	Loss_d 0.444 (0.444)	test_acc_d   0.83 (  0.83)	test_minacc_d   0.00 (  0.00)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.99 (  0.99)
Test: [  10/  26]	Loss 0.449 (0.418)	test_acc   0.83 (  0.84)	test_minacc   0.00 (  0.00)	test_majacc   1.00 (  1.00)	Loss_d 0.449 (0.418)	test_acc_d   0.83 (  0.84)	test_minacc_d   0.00 (  0.00)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.98 (  0.98)
Test: [  20/  26]	Loss 0.450 (0.412)	test_acc   0.83 (  0.85)	test_minacc   0.00 (  0.01)	test_majacc   1.00 (  1.00)	Loss_d 0.450 (0.412)	test_acc_d   0.83 (  0.85)	test_minacc_d   0.00 (  0.01)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.99 (  0.98)
Test: [  26/  26]	Loss 0.451 (0.411)	test_acc   0.83 (  0.85)	test_minacc   0.00 (  0.00)	test_majacc   1.00 (  1.00)	Loss_d 0.451 (0.411)	test_acc_d   0.83 (  0.85)	test_minacc_d   0.00 (  0.00)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.99 (  0.98)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00,  2.56it/s]100%|##########| 1/1 [00:00<00:00,  2.56it/s]
Test: [  0/  1]	Loss 1.650 (1.650)	test_acc   0.11 (  0.11)	test_minacc   0.01 (  0.01)	test_majacc   1.00 (  1.00)	Loss_d 1.650 (1.650)	test_acc_d   0.11 (  0.11)	test_minacc_d   0.01 (  0.01)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.98 (  0.98)
Test: [  1/  1]	Loss 1.650 (1.650)	test_acc   0.11 (  0.11)	test_minacc   0.01 (  0.01)	test_majacc   1.00 (  1.00)	Loss_d 1.650 (1.650)	test_acc_d   0.11 (  0.11)	test_minacc_d   0.01 (  0.01)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.98 (  0.98)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/29/checkpoints/model_best.pth
Overall Timing[  0/  1]	epoch_time 0.0740 (0.0740)	validation_time 0.0066 (0.0066)	train_time 0.0650 (0.0650)
record: (train_acc, test_acc) (0.8482000256180763, 0.10500000417232513)
last accs (train_acc, test_acc) (0.8482000256180763, 0.10500000417232513)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 15.54it/s] 23%|##3       | 6/26 [00:00<00:00, 25.58it/s] 38%|###8      | 10/26 [00:00<00:00, 28.74it/s] 54%|#####3    | 14/26 [00:00<00:00, 30.80it/s] 69%|######9   | 18/26 [00:00<00:00, 32.34it/s] 85%|########4 | 22/26 [00:00<00:00, 33.35it/s]100%|##########| 26/26 [00:00<00:00, 33.54it/s]100%|##########| 26/26 [00:00<00:00, 28.97it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 26 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 27 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 28 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 29 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 30 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 31 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 32 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 33 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 34 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 35 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 36 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 37 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 38 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 39 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 40 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 41 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 42 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 43 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 44 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 45 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 46 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 47 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 48 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 49 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 50 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 51 400
penalty weights 0.0
Epoch: [1][  26/  26]	Loss 4.396 (6.211)	train_nll   0.45 (  0.42)	train_penalty   0.09 (  0.06)	weight_norm   3.94 (  5.79)	train_acc   0.82 (  0.85)	train_minacc   0.02 (  0.01)	train_majacc   0.99 (  1.00)	train_corr   0.00 (  0.00)	l1 6.4174 (6.8790)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.38it/s] 27%|##6       | 7/26 [00:00<00:00, 30.48it/s]                                               27%|##6       | 7/26 [00:00<00:00, 30.48it/s] 50%|#####     | 13/26 [00:00<00:00, 38.16it/s] 73%|#######3  | 19/26 [00:00<00:00, 44.89it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 44.89it/s] 96%|#########6| 25/26 [00:00<00:00, 45.03it/s]100%|##########| 26/26 [00:00<00:00, 36.90it/s]
Test: [   0/  26]	Loss 0.436 (0.436)	test_acc   0.83 (  0.83)	test_minacc   0.00 (  0.00)	test_majacc   1.00 (  1.00)	Loss_d 0.436 (0.436)	test_acc_d   0.83 (  0.83)	test_minacc_d   0.00 (  0.00)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.98 (  0.98)
Test: [  10/  26]	Loss 0.433 (0.410)	test_acc   0.83 (  0.84)	test_minacc   0.00 (  0.00)	test_majacc   1.00 (  1.00)	Loss_d 0.433 (0.410)	test_acc_d   0.83 (  0.84)	test_minacc_d   0.00 (  0.00)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.98 (  0.98)
Test: [  20/  26]	Loss 0.437 (0.405)	test_acc   0.83 (  0.85)	test_minacc   0.00 (  0.00)	test_majacc   1.00 (  1.00)	Loss_d 0.437 (0.405)	test_acc_d   0.83 (  0.85)	test_minacc_d   0.00 (  0.00)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.98 (  0.98)
Test: [  26/  26]	Loss 0.442 (0.404)	test_acc   0.82 (  0.85)	test_minacc   0.02 (  0.01)	test_majacc   0.99 (  1.00)	Loss_d 0.442 (0.404)	test_acc_d   0.82 (  0.85)	test_minacc_d   0.02 (  0.01)	test_majacc_d   0.99 (  1.00)	test_corr_d   0.98 (  0.98)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 67.34it/s]
Test: [  0/  1]	Loss 1.529 (1.529)	test_acc   0.11 (  0.11)	test_minacc   0.01 (  0.01)	test_majacc   1.00 (  1.00)	Loss_d 1.529 (1.529)	test_acc_d   0.11 (  0.11)	test_minacc_d   0.01 (  0.01)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.97 (  0.97)
Test: [  1/  1]	Loss 1.529 (1.529)	test_acc   0.11 (  0.11)	test_minacc   0.01 (  0.01)	test_majacc   1.00 (  1.00)	Loss_d 1.529 (1.529)	test_acc_d   0.11 (  0.11)	test_minacc_d   0.01 (  0.01)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.97 (  0.97)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/29/checkpoints/model_best.pth
Overall Timing[  1/  1]	epoch_time 0.0382 (0.0561)	validation_time 0.0006 (0.0036)	train_time 0.0376 (0.0513)
record: (train_acc, test_acc) (0.8481000207662582, 0.10600000619888306)
last accs (train_acc, test_acc) (0.8481000207662582, 0.10600000619888306)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.46it/s] 19%|#9        | 5/26 [00:00<00:00, 24.47it/s] 35%|###4      | 9/26 [00:00<00:00, 28.23it/s] 50%|#####     | 13/26 [00:00<00:00, 30.63it/s] 65%|######5   | 17/26 [00:00<00:00, 32.52it/s] 81%|########  | 21/26 [00:00<00:00, 33.10it/s] 96%|#########6| 25/26 [00:00<00:00, 33.44it/s]100%|##########| 26/26 [00:00<00:00, 29.09it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 52 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 53 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 54 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 55 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 56 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 57 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 58 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 59 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 60 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 61 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 62 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 63 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 64 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 65 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 66 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 67 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 68 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 69 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 70 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 71 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 72 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 73 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 74 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 75 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 76 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 77 400
penalty weights 0.0
Epoch: [2][  26/  26]	Loss 2.711 (3.363)	train_nll   0.45 (  0.41)	train_penalty   0.11 (  0.06)	weight_norm   2.27 (  2.96)	train_acc   0.83 (  0.85)	train_minacc   0.00 (  0.03)	train_majacc   1.00 (  0.99)	train_corr   0.00 (  0.00)	l1 5.0860 (5.7202)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.07it/s] 31%|###       | 8/26 [00:00<00:00, 36.52it/s]                                               31%|###       | 8/26 [00:00<00:00, 36.52it/s] 50%|#####     | 13/26 [00:00<00:00, 38.08it/s] 73%|#######3  | 19/26 [00:00<00:00, 44.79it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 44.79it/s] 96%|#########6| 25/26 [00:00<00:00, 46.01it/s]100%|##########| 26/26 [00:00<00:00, 38.46it/s]
Test: [   0/  26]	Loss 0.429 (0.429)	test_acc   0.84 (  0.84)	test_minacc   0.03 (  0.03)	test_majacc   1.00 (  1.00)	Loss_d 0.429 (0.429)	test_acc_d   0.84 (  0.84)	test_minacc_d   0.03 (  0.03)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.94 (  0.94)
Test: [  10/  26]	Loss 0.433 (0.404)	test_acc   0.82 (  0.84)	test_minacc   0.01 (  0.04)	test_majacc   0.99 (  0.99)	Loss_d 0.433 (0.404)	test_acc_d   0.82 (  0.84)	test_minacc_d   0.01 (  0.04)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.93 (  0.93)
Test: [  20/  26]	Loss 0.441 (0.398)	test_acc   0.83 (  0.85)	test_minacc   0.00 (  0.03)	test_majacc   1.00 (  0.99)	Loss_d 0.441 (0.398)	test_acc_d   0.83 (  0.85)	test_minacc_d   0.00 (  0.03)	test_majacc_d   1.00 (  0.99)	test_corr_d   0.94 (  0.93)
Test: [  26/  26]	Loss 0.399 (0.394)	test_acc   0.84 (  0.85)	test_minacc   0.09 (  0.04)	test_majacc   1.00 (  0.99)	Loss_d 0.399 (0.394)	test_acc_d   0.84 (  0.85)	test_minacc_d   0.09 (  0.04)	test_majacc_d   1.00 (  0.99)	test_corr_d   0.93 (  0.93)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.07it/s]
Test: [  0/  1]	Loss 1.656 (1.656)	test_acc   0.14 (  0.14)	test_minacc   0.04 (  0.04)	test_majacc   0.98 (  0.98)	Loss_d 1.656 (1.656)	test_acc_d   0.14 (  0.14)	test_minacc_d   0.04 (  0.04)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.88 (  0.88)
Test: [  1/  1]	Loss 1.656 (1.656)	test_acc   0.14 (  0.14)	test_minacc   0.04 (  0.04)	test_majacc   0.98 (  0.98)	Loss_d 1.656 (1.656)	test_acc_d   0.14 (  0.14)	test_minacc_d   0.04 (  0.04)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.88 (  0.88)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/29/checkpoints/model_best.pth
Overall Timing[  2/  1]	epoch_time 0.0367 (0.0497)	validation_time 0.0003 (0.0025)	train_time 0.0364 (0.0463)
record: (train_acc, test_acc) (0.8478000212907791, 0.13700000941753387)
last accs (train_acc, test_acc) (0.8478000212907791, 0.13700000941753387)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.40it/s] 19%|#9        | 5/26 [00:00<00:00, 22.31it/s] 35%|###4      | 9/26 [00:00<00:00, 26.98it/s] 50%|#####     | 13/26 [00:00<00:00, 29.51it/s] 65%|######5   | 17/26 [00:00<00:00, 31.19it/s] 81%|########  | 21/26 [00:00<00:00, 32.19it/s] 96%|#########6| 25/26 [00:00<00:00, 32.66it/s]100%|##########| 26/26 [00:00<00:00, 27.85it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 78 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 79 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 80 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 81 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 82 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 83 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 84 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 85 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 86 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 87 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 88 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 89 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 90 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 91 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 92 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 93 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 94 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 95 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 96 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 97 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 98 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 99 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 100 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 101 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 102 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 103 400
penalty weights 0.0
Epoch: [3][  26/  26]	Loss 1.835 (2.192)	train_nll   0.40 (  0.39)	train_penalty   0.07 (  0.05)	weight_norm   1.43 (  1.81)	train_acc   0.83 (  0.85)	train_minacc   0.02 (  0.06)	train_majacc   1.00 (  0.99)	train_corr   0.00 (  0.00)	l1 4.5122 (4.6403)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.63it/s] 27%|##6       | 7/26 [00:00<00:00, 37.38it/s]                                               27%|##6       | 7/26 [00:00<00:00, 37.38it/s] 50%|#####     | 13/26 [00:00<00:00, 41.33it/s] 73%|#######3  | 19/26 [00:00<00:00, 47.22it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 47.22it/s] 96%|#########6| 25/26 [00:00<00:00, 47.51it/s]100%|##########| 26/26 [00:00<00:00, 40.36it/s]
Test: [   0/  26]	Loss 0.404 (0.404)	test_acc   0.84 (  0.84)	test_minacc   0.09 (  0.09)	test_majacc   0.99 (  0.99)	Loss_d 0.404 (0.404)	test_acc_d   0.84 (  0.84)	test_minacc_d   0.09 (  0.09)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.91 (  0.91)
Test: [  10/  26]	Loss 0.396 (0.370)	test_acc   0.82 (  0.85)	test_minacc   0.03 (  0.06)	test_majacc   0.99 (  0.99)	Loss_d 0.396 (0.370)	test_acc_d   0.82 (  0.85)	test_minacc_d   0.03 (  0.06)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.90 (  0.90)
Test: [  20/  26]	Loss 0.422 (0.370)	test_acc   0.83 (  0.85)	test_minacc   0.04 (  0.06)	test_majacc   1.00 (  0.99)	Loss_d 0.422 (0.370)	test_acc_d   0.83 (  0.85)	test_minacc_d   0.04 (  0.06)	test_majacc_d   1.00 (  0.99)	test_corr_d   0.91 (  0.91)
Test: [  26/  26]	Loss 0.379 (0.367)	test_acc   0.83 (  0.85)	test_minacc   0.07 (  0.06)	test_majacc   0.99 (  0.99)	Loss_d 0.379 (0.367)	test_acc_d   0.83 (  0.85)	test_minacc_d   0.07 (  0.06)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.89 (  0.90)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.86it/s]
Test: [  0/  1]	Loss 1.559 (1.559)	test_acc   0.16 (  0.16)	test_minacc   0.07 (  0.07)	test_majacc   0.99 (  0.99)	Loss_d 1.559 (1.559)	test_acc_d   0.16 (  0.16)	test_minacc_d   0.07 (  0.07)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.80 (  0.80)
Test: [  1/  1]	Loss 1.559 (1.559)	test_acc   0.16 (  0.16)	test_minacc   0.07 (  0.07)	test_majacc   0.99 (  0.99)	Loss_d 1.559 (1.559)	test_acc_d   0.16 (  0.16)	test_minacc_d   0.07 (  0.07)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.80 (  0.80)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/29/checkpoints/model_best.pth
Overall Timing[  3/  1]	epoch_time 0.0365 (0.0464)	validation_time 0.0004 (0.0020)	train_time 0.0360 (0.0438)
record: (train_acc, test_acc) (0.8514000231027603, 0.16100001335144043)
last accs (train_acc, test_acc) (0.8514000231027603, 0.16100001335144043)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.42it/s] 19%|#9        | 5/26 [00:00<00:00, 24.69it/s] 35%|###4      | 9/26 [00:00<00:00, 29.18it/s] 50%|#####     | 13/26 [00:00<00:00, 31.50it/s] 65%|######5   | 17/26 [00:00<00:00, 32.59it/s] 81%|########  | 21/26 [00:00<00:00, 33.53it/s] 96%|#########6| 25/26 [00:00<00:00, 33.67it/s]100%|##########| 26/26 [00:00<00:00, 29.16it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 104 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 105 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 106 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 107 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 108 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 109 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 110 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 111 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 112 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 113 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 114 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 115 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 116 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 117 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 118 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 119 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 120 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 121 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 122 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 123 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 124 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 125 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 126 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 127 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 128 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 129 400
penalty weights 0.0
Epoch: [4][  26/  26]	Loss 1.354 (1.539)	train_nll   0.41 (  0.37)	train_penalty   0.08 (  0.04)	weight_norm   0.94 (  1.16)	train_acc   0.83 (  0.85)	train_minacc   0.00 (  0.08)	train_majacc   1.00 (  0.98)	train_corr   0.00 (  0.00)	l1 4.6640 (4.4980)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:00, 26.73it/s] 35%|###4      | 9/26 [00:00<00:00, 41.26it/s]                                               35%|###4      | 9/26 [00:00<00:00, 41.26it/s] 58%|#####7    | 15/26 [00:00<00:00, 47.64it/s]                                                58%|#####7    | 15/26 [00:00<00:00, 47.64it/s] 81%|########  | 21/26 [00:00<00:00, 48.29it/s]100%|##########| 26/26 [00:00<00:00, 43.17it/s]
Test: [   0/  26]	Loss 0.392 (0.392)	test_acc   0.84 (  0.84)	test_minacc   0.02 (  0.02)	test_majacc   1.00 (  1.00)	Loss_d 0.392 (0.392)	test_acc_d   0.84 (  0.84)	test_minacc_d   0.02 (  0.02)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.94 (  0.94)
Test: [  10/  26]	Loss 0.404 (0.378)	test_acc   0.83 (  0.85)	test_minacc   0.00 (  0.01)	test_majacc   1.00 (  1.00)	Loss_d 0.404 (0.378)	test_acc_d   0.83 (  0.85)	test_minacc_d   0.00 (  0.01)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.93 (  0.94)
Test: [  20/  26]	Loss 0.438 (0.376)	test_acc   0.83 (  0.85)	test_minacc   0.00 (  0.01)	test_majacc   1.00 (  1.00)	Loss_d 0.438 (0.376)	test_acc_d   0.83 (  0.85)	test_minacc_d   0.00 (  0.01)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.94 (  0.94)
Test: [  26/  26]	Loss 0.389 (0.372)	test_acc   0.83 (  0.85)	test_minacc   0.00 (  0.01)	test_majacc   1.00 (  1.00)	Loss_d 0.389 (0.372)	test_acc_d   0.83 (  0.85)	test_minacc_d   0.00 (  0.01)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.93 (  0.94)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.00it/s]
Test: [  0/  1]	Loss 1.606 (1.606)	test_acc   0.11 (  0.11)	test_minacc   0.01 (  0.01)	test_majacc   1.00 (  1.00)	Loss_d 1.606 (1.606)	test_acc_d   0.11 (  0.11)	test_minacc_d   0.01 (  0.01)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.89 (  0.89)
Test: [  1/  1]	Loss 1.606 (1.606)	test_acc   0.11 (  0.11)	test_minacc   0.01 (  0.01)	test_majacc   1.00 (  1.00)	Loss_d 1.606 (1.606)	test_acc_d   0.11 (  0.11)	test_minacc_d   0.01 (  0.01)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.89 (  0.89)
Overall Timing[  4/  1]	epoch_time 0.0376 (0.0446)	validation_time 0.0003 (0.0016)	train_time 0.0373 (0.0425)
record: (train_acc, test_acc) (0.8514000231027603, 0.16100001335144043)
last accs (train_acc, test_acc) (0.8497000243663788, 0.11300000548362732)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.30it/s] 19%|#9        | 5/26 [00:00<00:01, 19.38it/s] 35%|###4      | 9/26 [00:00<00:00, 25.57it/s] 50%|#####     | 13/26 [00:00<00:00, 28.88it/s] 65%|######5   | 17/26 [00:00<00:00, 30.94it/s] 81%|########  | 21/26 [00:00<00:00, 32.36it/s] 96%|#########6| 25/26 [00:00<00:00, 33.30it/s]100%|##########| 26/26 [00:00<00:00, 27.36it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 130 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 131 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 132 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 133 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 134 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 135 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 136 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 137 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 138 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 139 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 140 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 141 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 142 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 143 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 144 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 145 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 146 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 147 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 148 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 149 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 150 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 151 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 152 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 153 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 154 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 155 400
penalty weights 0.0
Epoch: [5][  26/  26]	Loss 1.064 (1.134)	train_nll   0.44 (  0.38)	train_penalty   0.09 (  0.04)	weight_norm   0.63 (  0.76)	train_acc   0.83 (  0.85)	train_minacc   0.00 (  0.08)	train_majacc   1.00 (  0.98)	train_corr   0.00 (  0.00)	l1 5.2396 (5.0165)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:00, 25.72it/s] 31%|###       | 8/26 [00:00<00:00, 37.92it/s]                                               31%|###       | 8/26 [00:00<00:00, 37.92it/s] 54%|#####3    | 14/26 [00:00<00:00, 43.39it/s] 73%|#######3  | 19/26 [00:00<00:00, 44.65it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 44.65it/s] 96%|#########6| 25/26 [00:00<00:00, 49.41it/s]100%|##########| 26/26 [00:00<00:00, 41.92it/s]
Test: [   0/  26]	Loss 0.385 (0.385)	test_acc   0.84 (  0.84)	test_minacc   0.02 (  0.02)	test_majacc   1.00 (  1.00)	Loss_d 0.385 (0.385)	test_acc_d   0.84 (  0.84)	test_minacc_d   0.02 (  0.02)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.97 (  0.97)
Test: [  10/  26]	Loss 0.411 (0.382)	test_acc   0.83 (  0.85)	test_minacc   0.04 (  0.02)	test_majacc   0.99 (  1.00)	Loss_d 0.411 (0.382)	test_acc_d   0.83 (  0.85)	test_minacc_d   0.04 (  0.02)	test_majacc_d   0.99 (  1.00)	test_corr_d   0.95 (  0.96)
Test: [  20/  26]	Loss 0.418 (0.377)	test_acc   0.83 (  0.85)	test_minacc   0.01 (  0.02)	test_majacc   1.00 (  1.00)	Loss_d 0.418 (0.377)	test_acc_d   0.83 (  0.85)	test_minacc_d   0.01 (  0.02)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.96 (  0.96)
Test: [  26/  26]	Loss 0.401 (0.375)	test_acc   0.83 (  0.85)	test_minacc   0.00 (  0.03)	test_majacc   1.00 (  1.00)	Loss_d 0.401 (0.375)	test_acc_d   0.83 (  0.85)	test_minacc_d   0.00 (  0.03)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.95 (  0.96)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 64.84it/s]
Test: [  0/  1]	Loss 1.583 (1.583)	test_acc   0.12 (  0.12)	test_minacc   0.03 (  0.03)	test_majacc   1.00 (  1.00)	Loss_d 1.583 (1.583)	test_acc_d   0.12 (  0.12)	test_minacc_d   0.03 (  0.03)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.91 (  0.91)
Test: [  1/  1]	Loss 1.583 (1.583)	test_acc   0.12 (  0.12)	test_minacc   0.03 (  0.03)	test_majacc   1.00 (  1.00)	Loss_d 1.583 (1.583)	test_acc_d   0.12 (  0.12)	test_minacc_d   0.03 (  0.03)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.91 (  0.91)
Overall Timing[  5/  1]	epoch_time 0.0372 (0.0434)	validation_time 0.0004 (0.0014)	train_time 0.0367 (0.0415)
record: (train_acc, test_acc) (0.8514000231027603, 0.16100001335144043)
last accs (train_acc, test_acc) (0.8500000278353691, 0.12300000339746475)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.53it/s] 19%|#9        | 5/26 [00:00<00:01, 18.07it/s] 35%|###4      | 9/26 [00:00<00:00, 23.85it/s] 50%|#####     | 13/26 [00:00<00:00, 27.81it/s] 65%|######5   | 17/26 [00:00<00:00, 29.79it/s] 81%|########  | 21/26 [00:00<00:00, 31.21it/s] 96%|#########6| 25/26 [00:00<00:00, 31.85it/s]100%|##########| 26/26 [00:00<00:00, 26.05it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 156 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 157 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 158 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 159 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 160 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 161 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 162 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 163 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 164 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 165 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 166 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 167 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 168 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 169 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 170 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 171 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 172 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 173 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 174 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 175 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 176 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 177 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 178 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 179 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 180 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 181 400
penalty weights 0.0
Epoch: [6][  26/  26]	Loss 0.850 (0.885)	train_nll   0.44 (  0.37)	train_penalty   0.10 (  0.04)	weight_norm   0.41 (  0.52)	train_acc   0.83 (  0.85)	train_minacc   0.00 (  0.08)	train_majacc   1.00 (  0.98)	train_corr   0.00 (  0.00)	l1 6.8052 (6.1004)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.52it/s] 27%|##6       | 7/26 [00:00<00:00, 36.05it/s]                                               27%|##6       | 7/26 [00:00<00:00, 36.05it/s] 50%|#####     | 13/26 [00:00<00:00, 41.47it/s] 73%|#######3  | 19/26 [00:00<00:00, 46.51it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 46.51it/s] 96%|#########6| 25/26 [00:00<00:00, 47.78it/s]100%|##########| 26/26 [00:00<00:00, 40.01it/s]
Test: [   0/  26]	Loss 0.389 (0.389)	test_acc   0.83 (  0.83)	test_minacc   0.00 (  0.00)	test_majacc   1.00 (  1.00)	Loss_d 0.389 (0.389)	test_acc_d   0.83 (  0.83)	test_minacc_d   0.00 (  0.00)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.96 (  0.96)
Test: [  10/  26]	Loss 0.401 (0.370)	test_acc   0.83 (  0.85)	test_minacc   0.00 (  0.01)	test_majacc   1.00 (  1.00)	Loss_d 0.401 (0.370)	test_acc_d   0.83 (  0.85)	test_minacc_d   0.00 (  0.01)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.95 (  0.95)
Test: [  20/  26]	Loss 0.420 (0.369)	test_acc   0.83 (  0.85)	test_minacc   0.00 (  0.01)	test_majacc   1.00 (  1.00)	Loss_d 0.420 (0.369)	test_acc_d   0.83 (  0.85)	test_minacc_d   0.00 (  0.01)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.96 (  0.95)
Test: [  26/  26]	Loss 0.408 (0.366)	test_acc   0.83 (  0.85)	test_minacc   0.00 (  0.01)	test_majacc   1.00 (  1.00)	Loss_d 0.408 (0.366)	test_acc_d   0.83 (  0.85)	test_minacc_d   0.00 (  0.01)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.94 (  0.95)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.02it/s]
Test: [  0/  1]	Loss 1.745 (1.745)	test_acc   0.12 (  0.12)	test_minacc   0.02 (  0.02)	test_majacc   1.00 (  1.00)	Loss_d 1.745 (1.745)	test_acc_d   0.12 (  0.12)	test_minacc_d   0.02 (  0.02)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.90 (  0.90)
Test: [  1/  1]	Loss 1.745 (1.745)	test_acc   0.12 (  0.12)	test_minacc   0.02 (  0.02)	test_majacc   1.00 (  1.00)	Loss_d 1.745 (1.745)	test_acc_d   0.12 (  0.12)	test_minacc_d   0.02 (  0.02)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.90 (  0.90)
Overall Timing[  6/  1]	epoch_time 0.0381 (0.0426)	validation_time 0.0004 (0.0013)	train_time 0.0376 (0.0410)
record: (train_acc, test_acc) (0.8514000231027603, 0.16100001335144043)
last accs (train_acc, test_acc) (0.8496000255346299, 0.11900000274181366)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.62it/s] 19%|#9        | 5/26 [00:00<00:00, 22.29it/s] 35%|###4      | 9/26 [00:00<00:00, 27.20it/s] 50%|#####     | 13/26 [00:00<00:00, 30.09it/s] 65%|######5   | 17/26 [00:00<00:00, 31.67it/s] 81%|########  | 21/26 [00:00<00:00, 32.58it/s] 96%|#########6| 25/26 [00:00<00:00, 33.09it/s]100%|##########| 26/26 [00:00<00:00, 28.20it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 182 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 183 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 184 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 185 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 186 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 187 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 188 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 189 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 190 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 191 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 192 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 193 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 194 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 195 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 196 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 197 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 198 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 199 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 200 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 201 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 202 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 203 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 204 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 205 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 206 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 207 400
penalty weights 0.0
Epoch: [7][  26/  26]	Loss 0.716 (0.695)	train_nll   0.44 (  0.36)	train_penalty   0.11 (  0.03)	weight_norm   0.28 (  0.34)	train_acc   0.83 (  0.85)	train_minacc   0.00 (  0.14)	train_majacc   1.00 (  0.97)	train_corr   0.00 (  0.00)	l1 8.5175 (7.5751)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:00, 26.00it/s] 35%|###4      | 9/26 [00:00<00:00, 38.74it/s]                                               35%|###4      | 9/26 [00:00<00:00, 38.74it/s] 58%|#####7    | 15/26 [00:00<00:00, 46.74it/s]                                                58%|#####7    | 15/26 [00:00<00:00, 46.74it/s] 81%|########  | 21/26 [00:00<00:00, 47.50it/s]100%|##########| 26/26 [00:00<00:00, 41.96it/s]
Test: [   0/  26]	Loss 0.383 (0.383)	test_acc   0.83 (  0.83)	test_minacc   0.00 (  0.00)	test_majacc   1.00 (  1.00)	Loss_d 0.383 (0.383)	test_acc_d   0.83 (  0.83)	test_minacc_d   0.00 (  0.00)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.95 (  0.95)
Test: [  10/  26]	Loss 0.399 (0.364)	test_acc   0.83 (  0.85)	test_minacc   0.00 (  0.00)	test_majacc   1.00 (  1.00)	Loss_d 0.399 (0.364)	test_acc_d   0.83 (  0.85)	test_minacc_d   0.00 (  0.00)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.95 (  0.95)
Test: [  20/  26]	Loss 0.398 (0.362)	test_acc   0.83 (  0.85)	test_minacc   0.00 (  0.00)	test_majacc   1.00 (  1.00)	Loss_d 0.398 (0.362)	test_acc_d   0.83 (  0.85)	test_minacc_d   0.00 (  0.00)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.96 (  0.95)
Test: [  26/  26]	Loss 0.391 (0.359)	test_acc   0.83 (  0.85)	test_minacc   0.00 (  0.00)	test_majacc   1.00 (  1.00)	Loss_d 0.391 (0.359)	test_acc_d   0.83 (  0.85)	test_minacc_d   0.00 (  0.00)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.94 (  0.95)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 67.21it/s]
Test: [  0/  1]	Loss 1.729 (1.729)	test_acc   0.11 (  0.11)	test_minacc   0.01 (  0.01)	test_majacc   1.00 (  1.00)	Loss_d 1.729 (1.729)	test_acc_d   0.11 (  0.11)	test_minacc_d   0.01 (  0.01)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.91 (  0.91)
Test: [  1/  1]	Loss 1.729 (1.729)	test_acc   0.11 (  0.11)	test_minacc   0.01 (  0.01)	test_majacc   1.00 (  1.00)	Loss_d 1.729 (1.729)	test_acc_d   0.11 (  0.11)	test_minacc_d   0.01 (  0.01)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.91 (  0.91)
Overall Timing[  7/  1]	epoch_time 0.0356 (0.0417)	validation_time 0.0003 (0.0012)	train_time 0.0353 (0.0402)
record: (train_acc, test_acc) (0.8514000231027603, 0.16100001335144043)
last accs (train_acc, test_acc) (0.8497000243663788, 0.1080000028014183)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.66it/s] 19%|#9        | 5/26 [00:00<00:00, 21.67it/s] 35%|###4      | 9/26 [00:00<00:00, 27.18it/s] 50%|#####     | 13/26 [00:00<00:00, 29.90it/s] 65%|######5   | 17/26 [00:00<00:00, 31.71it/s] 81%|########  | 21/26 [00:00<00:00, 32.83it/s] 96%|#########6| 25/26 [00:00<00:00, 33.27it/s]100%|##########| 26/26 [00:00<00:00, 28.21it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 208 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 209 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 210 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 211 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 212 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 213 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 214 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 215 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 216 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 217 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 218 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 219 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 220 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 221 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 222 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 223 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 224 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 225 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 226 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 227 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 228 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 229 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 230 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 231 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 232 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 233 400
penalty weights 0.0
Epoch: [8][  26/  26]	Loss 0.613 (0.599)	train_nll   0.42 (  0.36)	train_penalty   0.08 (  0.03)	weight_norm   0.20 (  0.24)	train_acc   0.83 (  0.85)	train_minacc   0.00 (  0.13)	train_majacc   1.00 (  0.98)	train_corr   0.00 (  0.00)	l1 9.9101 (9.1672)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:00, 27.11it/s] 35%|###4      | 9/26 [00:00<00:00, 39.22it/s]                                               35%|###4      | 9/26 [00:00<00:00, 39.22it/s] 58%|#####7    | 15/26 [00:00<00:00, 46.25it/s]                                                58%|#####7    | 15/26 [00:00<00:00, 46.25it/s] 81%|########  | 21/26 [00:00<00:00, 47.24it/s]100%|##########| 26/26 [00:00<00:00, 41.93it/s]
Test: [   0/  26]	Loss 0.370 (0.370)	test_acc   0.84 (  0.84)	test_minacc   0.06 (  0.06)	test_majacc   0.99 (  0.99)	Loss_d 0.370 (0.370)	test_acc_d   0.84 (  0.84)	test_minacc_d   0.06 (  0.06)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.92 (  0.92)
Test: [  10/  26]	Loss 0.384 (0.364)	test_acc   0.84 (  0.85)	test_minacc   0.15 (  0.10)	test_majacc   0.98 (  0.98)	Loss_d 0.384 (0.364)	test_acc_d   0.84 (  0.85)	test_minacc_d   0.15 (  0.10)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.92 (  0.91)
Test: [  20/  26]	Loss 0.411 (0.362)	test_acc   0.82 (  0.85)	test_minacc   0.06 (  0.09)	test_majacc   0.98 (  0.98)	Loss_d 0.411 (0.362)	test_acc_d   0.82 (  0.85)	test_minacc_d   0.06 (  0.09)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.93 (  0.92)
Test: [  26/  26]	Loss 0.379 (0.358)	test_acc   0.84 (  0.85)	test_minacc   0.07 (  0.09)	test_majacc   1.00 (  0.98)	Loss_d 0.379 (0.358)	test_acc_d   0.84 (  0.85)	test_minacc_d   0.07 (  0.09)	test_majacc_d   1.00 (  0.98)	test_corr_d   0.92 (  0.92)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.52it/s]
Test: [  0/  1]	Loss 1.488 (1.488)	test_acc   0.22 (  0.22)	test_minacc   0.13 (  0.13)	test_majacc   0.99 (  0.99)	Loss_d 1.488 (1.488)	test_acc_d   0.22 (  0.22)	test_minacc_d   0.13 (  0.13)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.77 (  0.77)
Test: [  1/  1]	Loss 1.488 (1.488)	test_acc   0.22 (  0.22)	test_minacc   0.13 (  0.13)	test_majacc   0.99 (  0.99)	Loss_d 1.488 (1.488)	test_acc_d   0.22 (  0.22)	test_minacc_d   0.13 (  0.13)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.77 (  0.77)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/29/checkpoints/model_best.pth
Overall Timing[  8/  1]	epoch_time 0.0368 (0.0412)	validation_time 0.0004 (0.0011)	train_time 0.0364 (0.0398)
record: (train_acc, test_acc) (0.8483000210523606, 0.2160000056028366)
last accs (train_acc, test_acc) (0.8483000210523606, 0.2160000056028366)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.46it/s] 19%|#9        | 5/26 [00:00<00:00, 21.89it/s] 35%|###4      | 9/26 [00:00<00:00, 27.16it/s] 50%|#####     | 13/26 [00:00<00:00, 30.17it/s] 65%|######5   | 17/26 [00:00<00:00, 31.76it/s] 81%|########  | 21/26 [00:00<00:00, 32.98it/s] 96%|#########6| 25/26 [00:00<00:00, 33.12it/s]100%|##########| 26/26 [00:00<00:00, 27.95it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 234 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 235 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 236 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 237 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 238 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 239 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 240 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 241 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 242 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 243 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 244 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 245 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 246 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 247 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 248 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 249 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 250 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 251 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 252 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 253 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 254 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 255 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 256 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 257 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 258 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 259 400
penalty weights 0.0
Epoch: [9][  26/  26]	Loss 0.558 (0.541)	train_nll   0.40 (  0.36)	train_penalty   0.04 (  0.03)	weight_norm   0.15 (  0.18)	train_acc   0.82 (  0.85)	train_minacc   0.14 (  0.13)	train_majacc   0.97 (  0.98)	train_corr   0.00 (  0.00)	l1 11.9490 (10.9427)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.51it/s] 27%|##6       | 7/26 [00:00<00:00, 30.78it/s]                                               27%|##6       | 7/26 [00:00<00:00, 30.78it/s] 50%|#####     | 13/26 [00:00<00:00, 37.91it/s] 73%|#######3  | 19/26 [00:00<00:00, 45.14it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 45.14it/s] 96%|#########6| 25/26 [00:00<00:00, 45.94it/s]100%|##########| 26/26 [00:00<00:00, 37.34it/s]
Test: [   0/  26]	Loss 0.371 (0.371)	test_acc   0.84 (  0.84)	test_minacc   0.05 (  0.05)	test_majacc   1.00 (  1.00)	Loss_d 0.371 (0.371)	test_acc_d   0.84 (  0.84)	test_minacc_d   0.05 (  0.05)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.95 (  0.95)
Test: [  10/  26]	Loss 0.396 (0.372)	test_acc   0.83 (  0.85)	test_minacc   0.01 (  0.03)	test_majacc   0.99 (  0.99)	Loss_d 0.396 (0.372)	test_acc_d   0.83 (  0.85)	test_minacc_d   0.01 (  0.03)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.95 (  0.95)
Test: [  20/  26]	Loss 0.422 (0.365)	test_acc   0.82 (  0.85)	test_minacc   0.00 (  0.03)	test_majacc   0.99 (  1.00)	Loss_d 0.422 (0.365)	test_acc_d   0.82 (  0.85)	test_minacc_d   0.00 (  0.03)	test_majacc_d   0.99 (  1.00)	test_corr_d   0.96 (  0.95)
Test: [  26/  26]	Loss 0.371 (0.362)	test_acc   0.84 (  0.85)	test_minacc   0.09 (  0.04)	test_majacc   1.00 (  1.00)	Loss_d 0.371 (0.362)	test_acc_d   0.84 (  0.85)	test_minacc_d   0.09 (  0.04)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.95 (  0.95)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 67.36it/s]
Test: [  0/  1]	Loss 1.739 (1.739)	test_acc   0.15 (  0.15)	test_minacc   0.05 (  0.05)	test_majacc   1.00 (  1.00)	Loss_d 1.739 (1.739)	test_acc_d   0.15 (  0.15)	test_minacc_d   0.05 (  0.05)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.88 (  0.88)
Test: [  1/  1]	Loss 1.739 (1.739)	test_acc   0.15 (  0.15)	test_minacc   0.05 (  0.05)	test_majacc   1.00 (  1.00)	Loss_d 1.739 (1.739)	test_acc_d   0.15 (  0.15)	test_minacc_d   0.05 (  0.05)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.88 (  0.88)
Overall Timing[  9/  1]	epoch_time 0.0361 (0.0407)	validation_time 0.0004 (0.0010)	train_time 0.0357 (0.0394)
record: (train_acc, test_acc) (0.8483000210523606, 0.2160000056028366)
last accs (train_acc, test_acc) (0.8511000236272812, 0.14900000393390656)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  6.04it/s] 19%|#9        | 5/26 [00:00<00:01, 18.82it/s] 35%|###4      | 9/26 [00:00<00:00, 24.93it/s] 50%|#####     | 13/26 [00:00<00:00, 29.04it/s] 65%|######5   | 17/26 [00:00<00:00, 31.02it/s] 81%|########  | 21/26 [00:00<00:00, 32.03it/s] 96%|#########6| 25/26 [00:00<00:00, 32.37it/s]100%|##########| 26/26 [00:00<00:00, 26.67it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 260 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 261 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 262 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 263 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 264 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 265 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 266 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 267 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 268 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 269 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 270 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 271 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 272 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 273 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 274 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 275 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 276 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 277 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 278 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 279 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 280 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 281 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 282 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 283 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 284 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 285 400
penalty weights 0.0
Epoch: [10][  26/  26]	Loss 0.551 (0.501)	train_nll   0.42 (  0.36)	train_penalty   0.08 (  0.03)	weight_norm   0.13 (  0.14)	train_acc   0.82 (  0.85)	train_minacc   0.00 (  0.15)	train_majacc   1.00 (  0.97)	train_corr   0.00 (  0.00)	l1 13.4169 (12.8325)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.10it/s] 23%|##3       | 6/26 [00:00<00:00, 31.73it/s]                                               23%|##3       | 6/26 [00:00<00:00, 31.73it/s] 46%|####6     | 12/26 [00:00<00:00, 41.44it/s] 65%|######5   | 17/26 [00:00<00:00, 42.48it/s]                                                65%|######5   | 17/26 [00:00<00:00, 42.48it/s] 88%|########8 | 23/26 [00:00<00:00, 47.10it/s]100%|##########| 26/26 [00:00<00:00, 38.79it/s]
Test: [   0/  26]	Loss 0.388 (0.388)	test_acc   0.83 (  0.83)	test_minacc   0.00 (  0.00)	test_majacc   1.00 (  1.00)	Loss_d 0.388 (0.388)	test_acc_d   0.83 (  0.83)	test_minacc_d   0.00 (  0.00)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.95 (  0.95)
Test: [  10/  26]	Loss 0.397 (0.377)	test_acc   0.84 (  0.85)	test_minacc   0.09 (  0.04)	test_majacc   0.99 (  1.00)	Loss_d 0.397 (0.377)	test_acc_d   0.84 (  0.85)	test_minacc_d   0.09 (  0.04)	test_majacc_d   0.99 (  1.00)	test_corr_d   0.94 (  0.94)
Test: [  20/  26]	Loss 0.422 (0.372)	test_acc   0.83 (  0.85)	test_minacc   0.01 (  0.03)	test_majacc   1.00 (  1.00)	Loss_d 0.422 (0.372)	test_acc_d   0.83 (  0.85)	test_minacc_d   0.01 (  0.03)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.95 (  0.94)
Test: [  26/  26]	Loss 0.399 (0.369)	test_acc   0.83 (  0.85)	test_minacc   0.02 (  0.03)	test_majacc   1.00 (  1.00)	Loss_d 0.399 (0.369)	test_acc_d   0.83 (  0.85)	test_minacc_d   0.02 (  0.03)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.94 (  0.94)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.69it/s]
Test: [  0/  1]	Loss 1.683 (1.683)	test_acc   0.12 (  0.12)	test_minacc   0.02 (  0.02)	test_majacc   1.00 (  1.00)	Loss_d 1.683 (1.683)	test_acc_d   0.12 (  0.12)	test_minacc_d   0.02 (  0.02)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.91 (  0.91)
Test: [  1/  1]	Loss 1.683 (1.683)	test_acc   0.12 (  0.12)	test_minacc   0.02 (  0.02)	test_majacc   1.00 (  1.00)	Loss_d 1.683 (1.683)	test_acc_d   0.12 (  0.12)	test_minacc_d   0.02 (  0.02)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.91 (  0.91)
Overall Timing[ 10/  1]	epoch_time 0.0382 (0.0405)	validation_time 0.0004 (0.0010)	train_time 0.0378 (0.0393)
record: (train_acc, test_acc) (0.8483000210523606, 0.2160000056028366)
last accs (train_acc, test_acc) (0.8503000220060348, 0.11800000816583633)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.69it/s] 19%|#9        | 5/26 [00:00<00:00, 21.14it/s] 35%|###4      | 9/26 [00:00<00:00, 26.33it/s] 50%|#####     | 13/26 [00:00<00:00, 28.57it/s] 65%|######5   | 17/26 [00:00<00:00, 29.06it/s] 81%|########  | 21/26 [00:00<00:00, 29.77it/s] 96%|#########6| 25/26 [00:00<00:00, 30.88it/s]100%|##########| 26/26 [00:00<00:00, 26.60it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 286 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 287 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 288 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 289 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 290 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 291 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 292 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 293 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 294 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 295 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 296 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 297 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 298 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 299 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 300 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 301 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 302 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 303 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 304 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 305 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 306 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 307 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 308 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 309 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 310 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 311 400
penalty weights 0.0
Epoch: [11][  26/  26]	Loss 0.505 (0.470)	train_nll   0.40 (  0.35)	train_penalty   0.07 (  0.03)	weight_norm   0.11 (  0.12)	train_acc   0.82 (  0.85)	train_minacc   0.02 (  0.19)	train_majacc   0.99 (  0.97)	train_corr   0.00 (  0.00)	l1 14.9669 (14.2370)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.99it/s] 27%|##6       | 7/26 [00:00<00:00, 33.38it/s]                                               27%|##6       | 7/26 [00:00<00:00, 33.38it/s] 50%|#####     | 13/26 [00:00<00:00, 38.91it/s] 73%|#######3  | 19/26 [00:00<00:00, 45.96it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 45.96it/s] 96%|#########6| 25/26 [00:00<00:00, 45.99it/s]100%|##########| 26/26 [00:00<00:00, 38.25it/s]
Test: [   0/  26]	Loss 0.359 (0.359)	test_acc   0.84 (  0.84)	test_minacc   0.06 (  0.06)	test_majacc   0.99 (  0.99)	Loss_d 0.359 (0.359)	test_acc_d   0.84 (  0.84)	test_minacc_d   0.06 (  0.06)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.95 (  0.95)
Test: [  10/  26]	Loss 0.388 (0.363)	test_acc   0.83 (  0.85)	test_minacc   0.03 (  0.06)	test_majacc   0.99 (  0.99)	Loss_d 0.388 (0.363)	test_acc_d   0.83 (  0.85)	test_minacc_d   0.03 (  0.06)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.94 (  0.94)
Test: [  20/  26]	Loss 0.397 (0.357)	test_acc   0.83 (  0.85)	test_minacc   0.04 (  0.07)	test_majacc   1.00 (  0.99)	Loss_d 0.397 (0.357)	test_acc_d   0.83 (  0.85)	test_minacc_d   0.04 (  0.07)	test_majacc_d   1.00 (  0.99)	test_corr_d   0.95 (  0.94)
Test: [  26/  26]	Loss 0.362 (0.353)	test_acc   0.84 (  0.85)	test_minacc   0.14 (  0.07)	test_majacc   0.99 (  0.99)	Loss_d 0.362 (0.353)	test_acc_d   0.84 (  0.85)	test_minacc_d   0.14 (  0.07)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.92 (  0.94)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.18it/s]
Test: [  0/  1]	Loss 1.673 (1.673)	test_acc   0.15 (  0.15)	test_minacc   0.05 (  0.05)	test_majacc   1.00 (  1.00)	Loss_d 1.673 (1.673)	test_acc_d   0.15 (  0.15)	test_minacc_d   0.05 (  0.05)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.88 (  0.88)
Test: [  1/  1]	Loss 1.673 (1.673)	test_acc   0.15 (  0.15)	test_minacc   0.05 (  0.05)	test_majacc   1.00 (  1.00)	Loss_d 1.673 (1.673)	test_acc_d   0.15 (  0.15)	test_minacc_d   0.05 (  0.05)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.88 (  0.88)
Overall Timing[ 11/  1]	epoch_time 0.0379 (0.0402)	validation_time 0.0003 (0.0009)	train_time 0.0375 (0.0391)
record: (train_acc, test_acc) (0.8483000210523606, 0.2160000056028366)
last accs (train_acc, test_acc) (0.8520000233650208, 0.14800000190734863)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.02it/s] 19%|#9        | 5/26 [00:00<00:01, 20.91it/s] 35%|###4      | 9/26 [00:00<00:00, 26.27it/s] 50%|#####     | 13/26 [00:00<00:00, 28.95it/s] 65%|######5   | 17/26 [00:00<00:00, 30.96it/s] 81%|########  | 21/26 [00:00<00:00, 32.35it/s] 96%|#########6| 25/26 [00:00<00:00, 32.90it/s]100%|##########| 26/26 [00:00<00:00, 27.36it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 312 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 313 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 314 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 315 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 316 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 317 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 318 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 319 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 320 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 321 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 322 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 323 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 324 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 325 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 326 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 327 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 328 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 329 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 330 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 331 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 332 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 333 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 334 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 335 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 336 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 337 400
penalty weights 0.0
Epoch: [12][  26/  26]	Loss 0.496 (0.452)	train_nll   0.40 (  0.35)	train_penalty   0.05 (  0.03)	weight_norm   0.10 (  0.10)	train_acc   0.81 (  0.85)	train_minacc   0.07 (  0.19)	train_majacc   0.97 (  0.97)	train_corr   0.00 (  0.00)	l1 16.2390 (15.5954)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.23it/s] 27%|##6       | 7/26 [00:00<00:00, 34.39it/s]                                               27%|##6       | 7/26 [00:00<00:00, 34.39it/s] 46%|####6     | 12/26 [00:00<00:00, 40.45it/s] 65%|######5   | 17/26 [00:00<00:00, 42.93it/s]                                                65%|######5   | 17/26 [00:00<00:00, 42.93it/s] 88%|########8 | 23/26 [00:00<00:00, 47.89it/s]100%|##########| 26/26 [00:00<00:00, 38.67it/s]
Test: [   0/  26]	Loss 0.347 (0.347)	test_acc   0.84 (  0.84)	test_minacc   0.09 (  0.09)	test_majacc   0.99 (  0.99)	Loss_d 0.347 (0.347)	test_acc_d   0.84 (  0.84)	test_minacc_d   0.09 (  0.09)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.91 (  0.91)
Test: [  10/  26]	Loss 0.377 (0.361)	test_acc   0.83 (  0.85)	test_minacc   0.13 (  0.15)	test_majacc   0.97 (  0.98)	Loss_d 0.377 (0.361)	test_acc_d   0.83 (  0.85)	test_minacc_d   0.13 (  0.15)	test_majacc_d   0.97 (  0.98)	test_corr_d   0.90 (  0.91)
Test: [  20/  26]	Loss 0.400 (0.357)	test_acc   0.85 (  0.86)	test_minacc   0.19 (  0.17)	test_majacc   0.98 (  0.98)	Loss_d 0.400 (0.357)	test_acc_d   0.85 (  0.86)	test_minacc_d   0.19 (  0.17)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.91 (  0.91)
Test: [  26/  26]	Loss 0.374 (0.355)	test_acc   0.84 (  0.86)	test_minacc   0.19 (  0.17)	test_majacc   0.98 (  0.98)	Loss_d 0.374 (0.355)	test_acc_d   0.84 (  0.86)	test_minacc_d   0.19 (  0.17)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.89 (  0.91)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 64.04it/s]
Test: [  0/  1]	Loss 1.426 (1.426)	test_acc   0.16 (  0.16)	test_minacc   0.06 (  0.06)	test_majacc   1.00 (  1.00)	Loss_d 1.426 (1.426)	test_acc_d   0.16 (  0.16)	test_minacc_d   0.06 (  0.06)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.84 (  0.84)
Test: [  1/  1]	Loss 1.426 (1.426)	test_acc   0.16 (  0.16)	test_minacc   0.06 (  0.06)	test_majacc   1.00 (  1.00)	Loss_d 1.426 (1.426)	test_acc_d   0.16 (  0.16)	test_minacc_d   0.06 (  0.06)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.84 (  0.84)
Overall Timing[ 12/  1]	epoch_time 0.0376 (0.0400)	validation_time 0.0004 (0.0009)	train_time 0.0372 (0.0390)
record: (train_acc, test_acc) (0.8483000210523606, 0.2160000056028366)
last accs (train_acc, test_acc) (0.8551000289916992, 0.1550000011920929)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.00it/s] 19%|#9        | 5/26 [00:00<00:00, 24.35it/s] 35%|###4      | 9/26 [00:00<00:00, 29.23it/s] 50%|#####     | 13/26 [00:00<00:00, 31.47it/s] 65%|######5   | 17/26 [00:00<00:00, 32.91it/s] 81%|########  | 21/26 [00:00<00:00, 34.19it/s] 96%|#########6| 25/26 [00:00<00:00, 34.54it/s]100%|##########| 26/26 [00:00<00:00, 29.44it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 338 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 339 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 340 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 341 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 342 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 343 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 344 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 345 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 346 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 347 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 348 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 349 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 350 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 351 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 352 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 353 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 354 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 355 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 356 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 357 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 358 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 359 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 360 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 361 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 362 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 363 400
penalty weights 0.0
Epoch: [13][  26/  26]	Loss 0.471 (0.434)	train_nll   0.39 (  0.34)	train_penalty   0.06 (  0.03)	weight_norm   0.08 (  0.09)	train_acc   0.83 (  0.85)	train_minacc   0.07 (  0.20)	train_majacc   0.99 (  0.96)	train_corr   0.00 (  0.00)	l1 17.6183 (17.0061)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.89it/s] 27%|##6       | 7/26 [00:00<00:00, 31.75it/s]                                               27%|##6       | 7/26 [00:00<00:00, 31.75it/s] 50%|#####     | 13/26 [00:00<00:00, 40.66it/s] 73%|#######3  | 19/26 [00:00<00:00, 44.97it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 44.97it/s] 96%|#########6| 25/26 [00:00<00:00, 48.19it/s]100%|##########| 26/26 [00:00<00:00, 39.20it/s]
Test: [   0/  26]	Loss 0.341 (0.341)	test_acc   0.86 (  0.86)	test_minacc   0.17 (  0.17)	test_majacc   0.99 (  0.99)	Loss_d 0.341 (0.341)	test_acc_d   0.86 (  0.86)	test_minacc_d   0.17 (  0.17)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.90 (  0.90)
Test: [  10/  26]	Loss 0.383 (0.355)	test_acc   0.84 (  0.85)	test_minacc   0.27 (  0.24)	test_majacc   0.96 (  0.96)	Loss_d 0.383 (0.355)	test_acc_d   0.84 (  0.85)	test_minacc_d   0.27 (  0.24)	test_majacc_d   0.96 (  0.96)	test_corr_d   0.88 (  0.89)
Test: [  20/  26]	Loss 0.388 (0.352)	test_acc   0.84 (  0.86)	test_minacc   0.21 (  0.23)	test_majacc   0.98 (  0.97)	Loss_d 0.388 (0.352)	test_acc_d   0.84 (  0.86)	test_minacc_d   0.21 (  0.23)	test_majacc_d   0.98 (  0.97)	test_corr_d   0.89 (  0.89)
Test: [  26/  26]	Loss 0.356 (0.348)	test_acc   0.85 (  0.86)	test_minacc   0.26 (  0.23)	test_majacc   0.98 (  0.97)	Loss_d 0.356 (0.348)	test_acc_d   0.85 (  0.86)	test_minacc_d   0.26 (  0.23)	test_majacc_d   0.98 (  0.97)	test_corr_d   0.87 (  0.89)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 64.10it/s]
Test: [  0/  1]	Loss 1.479 (1.479)	test_acc   0.22 (  0.22)	test_minacc   0.13 (  0.13)	test_majacc   0.98 (  0.98)	Loss_d 1.479 (1.479)	test_acc_d   0.22 (  0.22)	test_minacc_d   0.13 (  0.13)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.74 (  0.74)
Test: [  1/  1]	Loss 1.479 (1.479)	test_acc   0.22 (  0.22)	test_minacc   0.13 (  0.13)	test_majacc   0.98 (  0.98)	Loss_d 1.479 (1.479)	test_acc_d   0.22 (  0.22)	test_minacc_d   0.13 (  0.13)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.74 (  0.74)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/29/checkpoints/model_best.pth
Overall Timing[ 13/  1]	epoch_time 0.0364 (0.0398)	validation_time 0.0004 (0.0008)	train_time 0.0360 (0.0388)
record: (train_acc, test_acc) (0.8558000272512436, 0.21800000965595245)
last accs (train_acc, test_acc) (0.8558000272512436, 0.21800000965595245)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.57it/s] 19%|#9        | 5/26 [00:00<00:01, 18.96it/s] 35%|###4      | 9/26 [00:00<00:00, 25.02it/s] 50%|#####     | 13/26 [00:00<00:00, 28.55it/s] 65%|######5   | 17/26 [00:00<00:00, 30.76it/s] 81%|########  | 21/26 [00:00<00:00, 32.18it/s] 96%|#########6| 25/26 [00:00<00:00, 32.49it/s]100%|##########| 26/26 [00:00<00:00, 26.91it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 364 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 365 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 366 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 367 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 368 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 369 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 370 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 371 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 372 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 373 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 374 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 375 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 376 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 377 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 378 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 379 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 380 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 381 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 382 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 383 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 384 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 385 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 386 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 387 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 388 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 389 400
penalty weights 0.0
Epoch: [14][  26/  26]	Loss 0.472 (0.426)	train_nll   0.39 (  0.34)	train_penalty   0.05 (  0.03)	weight_norm   0.08 (  0.08)	train_acc   0.83 (  0.85)	train_minacc   0.16 (  0.23)	train_majacc   0.97 (  0.96)	train_corr   0.00 (  0.00)	l1 18.5666 (18.0553)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 17.97it/s] 31%|###       | 8/26 [00:00<00:00, 39.93it/s]                                               31%|###       | 8/26 [00:00<00:00, 39.93it/s] 50%|#####     | 13/26 [00:00<00:00, 41.44it/s] 73%|#######3  | 19/26 [00:00<00:00, 47.45it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 47.45it/s] 96%|#########6| 25/26 [00:00<00:00, 47.38it/s]100%|##########| 26/26 [00:00<00:00, 40.35it/s]
Test: [   0/  26]	Loss 0.352 (0.352)	test_acc   0.84 (  0.84)	test_minacc   0.08 (  0.08)	test_majacc   0.99 (  0.99)	Loss_d 0.352 (0.352)	test_acc_d   0.84 (  0.84)	test_minacc_d   0.08 (  0.08)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.94 (  0.94)
Test: [  10/  26]	Loss 0.373 (0.358)	test_acc   0.83 (  0.85)	test_minacc   0.12 (  0.12)	test_majacc   0.98 (  0.98)	Loss_d 0.373 (0.358)	test_acc_d   0.83 (  0.85)	test_minacc_d   0.12 (  0.12)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.93 (  0.93)
Test: [  20/  26]	Loss 0.401 (0.356)	test_acc   0.84 (  0.85)	test_minacc   0.12 (  0.13)	test_majacc   0.99 (  0.98)	Loss_d 0.401 (0.356)	test_acc_d   0.84 (  0.85)	test_minacc_d   0.12 (  0.13)	test_majacc_d   0.99 (  0.98)	test_corr_d   0.94 (  0.93)
Test: [  26/  26]	Loss 0.359 (0.353)	test_acc   0.85 (  0.85)	test_minacc   0.19 (  0.13)	test_majacc   0.99 (  0.98)	Loss_d 0.359 (0.353)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.19 (  0.13)	test_majacc_d   0.99 (  0.98)	test_corr_d   0.91 (  0.93)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 64.64it/s]
Test: [  0/  1]	Loss 1.681 (1.681)	test_acc   0.16 (  0.16)	test_minacc   0.06 (  0.06)	test_majacc   0.99 (  0.99)	Loss_d 1.681 (1.681)	test_acc_d   0.16 (  0.16)	test_minacc_d   0.06 (  0.06)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.86 (  0.86)
Test: [  1/  1]	Loss 1.681 (1.681)	test_acc   0.16 (  0.16)	test_minacc   0.06 (  0.06)	test_majacc   0.99 (  0.99)	Loss_d 1.681 (1.681)	test_acc_d   0.16 (  0.16)	test_minacc_d   0.06 (  0.06)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.86 (  0.86)
Overall Timing[ 14/  1]	epoch_time 0.0365 (0.0396)	validation_time 0.0003 (0.0008)	train_time 0.0361 (0.0386)
record: (train_acc, test_acc) (0.8558000272512436, 0.21800000965595245)
last accs (train_acc, test_acc) (0.851400023818016, 0.15600000321865082)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  6.07it/s] 19%|#9        | 5/26 [00:00<00:01, 20.12it/s] 35%|###4      | 9/26 [00:00<00:00, 26.83it/s] 50%|#####     | 13/26 [00:00<00:00, 30.28it/s] 65%|######5   | 17/26 [00:00<00:00, 32.59it/s] 81%|########  | 21/26 [00:00<00:00, 32.96it/s] 96%|#########6| 25/26 [00:00<00:00, 33.44it/s]100%|##########| 26/26 [00:00<00:00, 27.85it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 390 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 391 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 392 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 393 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 394 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 395 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 396 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 397 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 398 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 399 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 400 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 401 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 402 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 403 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 404 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 405 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 406 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 407 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 408 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 409 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 410 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 411 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 412 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 413 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 414 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 415 400
penalty weights 10000.0
Epoch: [15][  26/  26]	Loss 0.001 (0.164)	train_nll   0.66 (  0.45)	train_penalty   0.00 (  0.01)	weight_norm   0.11 (  0.09)	train_acc   0.61 (  0.78)	train_minacc   0.72 (  0.49)	train_majacc   0.58 (  0.83)	train_corr   0.00 (  0.00)	l1 18.5760 (18.7716)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.14it/s] 19%|#9        | 5/26 [00:00<00:00, 26.35it/s]                                               19%|#9        | 5/26 [00:00<00:00, 26.35it/s] 42%|####2     | 11/26 [00:00<00:00, 40.58it/s] 62%|######1   | 16/26 [00:00<00:00, 42.98it/s]                                                62%|######1   | 16/26 [00:00<00:00, 42.98it/s] 85%|########4 | 22/26 [00:00<00:00, 47.96it/s]100%|##########| 26/26 [00:00<00:00, 39.07it/s]
Test: [   0/  26]	Loss 0.631 (0.631)	test_acc   0.63 (  0.63)	test_minacc   0.58 (  0.58)	test_majacc   0.64 (  0.64)	Loss_d 0.631 (0.631)	test_acc_d   0.63 (  0.63)	test_minacc_d   0.58 (  0.58)	test_majacc_d   0.64 (  0.64)	test_corr_d   0.32 (  0.32)
Test: [  10/  26]	Loss 0.623 (0.614)	test_acc   0.65 (  0.67)	test_minacc   0.63 (  0.69)	test_majacc   0.66 (  0.67)	Loss_d 0.623 (0.614)	test_acc_d   0.65 (  0.67)	test_minacc_d   0.63 (  0.69)	test_majacc_d   0.66 (  0.67)	test_corr_d   0.30 (  0.32)
Test: [  20/  26]	Loss 0.610 (0.615)	test_acc   0.69 (  0.67)	test_minacc   0.69 (  0.67)	test_majacc   0.70 (  0.67)	Loss_d 0.610 (0.615)	test_acc_d   0.69 (  0.67)	test_minacc_d   0.69 (  0.67)	test_majacc_d   0.70 (  0.67)	test_corr_d   0.35 (  0.32)
Test: [  26/  26]	Loss 0.650 (0.618)	test_acc   0.61 (  0.66)	test_minacc   0.72 (  0.67)	test_majacc   0.58 (  0.66)	Loss_d 0.650 (0.618)	test_acc_d   0.61 (  0.66)	test_minacc_d   0.72 (  0.67)	test_majacc_d   0.58 (  0.66)	test_corr_d   0.19 (  0.32)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.13it/s]
Test: [  0/  1]	Loss 0.638 (0.638)	test_acc   0.62 (  0.62)	test_minacc   0.63 (  0.63)	test_majacc   0.60 (  0.60)	Loss_d 0.638 (0.638)	test_acc_d   0.62 (  0.62)	test_minacc_d   0.63 (  0.63)	test_majacc_d   0.60 (  0.60)	test_corr_d  -0.32 ( -0.32)
Test: [  1/  1]	Loss 0.638 (0.638)	test_acc   0.62 (  0.62)	test_minacc   0.63 (  0.63)	test_majacc   0.60 (  0.60)	Loss_d 0.638 (0.638)	test_acc_d   0.62 (  0.62)	test_minacc_d   0.63 (  0.63)	test_majacc_d   0.60 (  0.60)	test_corr_d  -0.32 ( -0.32)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/29/checkpoints/model_best.pth
Overall Timing[ 15/  1]	epoch_time 0.0387 (0.0395)	validation_time 0.0004 (0.0008)	train_time 0.0383 (0.0386)
record: (train_acc, test_acc) (0.6626000228524208, 0.6240000128746033)
last accs (train_acc, test_acc) (0.6626000228524208, 0.6240000128746033)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.83it/s] 15%|#5        | 4/26 [00:00<00:01, 17.28it/s] 31%|###       | 8/26 [00:00<00:00, 23.98it/s] 46%|####6     | 12/26 [00:00<00:00, 27.82it/s] 62%|######1   | 16/26 [00:00<00:00, 30.16it/s] 77%|#######6  | 20/26 [00:00<00:00, 31.65it/s] 92%|#########2| 24/26 [00:00<00:00, 32.53it/s]100%|##########| 26/26 [00:00<00:00, 27.04it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 416 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 417 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 418 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 419 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 420 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 421 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 422 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 423 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 424 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 425 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 426 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 427 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 428 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 429 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 430 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 431 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 432 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 433 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 434 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 435 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 436 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 437 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 438 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 439 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 440 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 441 400
penalty weights 10000.0
Epoch: [16][  26/  26]	Loss 0.000 (0.001)	train_nll   0.69 (  0.66)	train_penalty   0.00 (  0.00)	weight_norm   0.14 (  0.13)	train_acc   0.48 (  0.58)	train_minacc   0.53 (  0.58)	train_majacc   0.47 (  0.58)	train_corr   0.00 (  0.00)	l1 18.1527 (18.2971)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.02it/s] 31%|###       | 8/26 [00:00<00:00, 36.18it/s]                                               31%|###       | 8/26 [00:00<00:00, 36.18it/s] 50%|#####     | 13/26 [00:00<00:00, 39.65it/s] 73%|#######3  | 19/26 [00:00<00:00, 46.01it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 46.01it/s] 96%|#########6| 25/26 [00:00<00:00, 46.89it/s]100%|##########| 26/26 [00:00<00:00, 38.55it/s]
Test: [   0/  26]	Loss 0.688 (0.688)	test_acc   0.51 (  0.51)	test_minacc   0.51 (  0.51)	test_majacc   0.50 (  0.50)	Loss_d 0.688 (0.688)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.50 (  0.50)	test_corr_d   0.24 (  0.24)
Test: [  10/  26]	Loss 0.686 (0.683)	test_acc   0.50 (  0.52)	test_minacc   0.40 (  0.54)	test_majacc   0.52 (  0.52)	Loss_d 0.686 (0.683)	test_acc_d   0.50 (  0.52)	test_minacc_d   0.40 (  0.54)	test_majacc_d   0.52 (  0.52)	test_corr_d   0.23 (  0.22)
Test: [  20/  26]	Loss 0.679 (0.684)	test_acc   0.54 (  0.52)	test_minacc   0.58 (  0.53)	test_majacc   0.54 (  0.52)	Loss_d 0.679 (0.684)	test_acc_d   0.54 (  0.52)	test_minacc_d   0.58 (  0.53)	test_majacc_d   0.54 (  0.52)	test_corr_d   0.26 (  0.23)
Test: [  26/  26]	Loss 0.695 (0.684)	test_acc   0.47 (  0.52)	test_minacc   0.53 (  0.53)	test_majacc   0.46 (  0.52)	Loss_d 0.695 (0.684)	test_acc_d   0.47 (  0.52)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.46 (  0.52)	test_corr_d   0.06 (  0.22)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 67.27it/s]
Test: [  0/  1]	Loss 0.684 (0.684)	test_acc   0.53 (  0.53)	test_minacc   0.53 (  0.53)	test_majacc   0.50 (  0.50)	Loss_d 0.684 (0.684)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.29 ( -0.29)
Test: [  1/  1]	Loss 0.684 (0.684)	test_acc   0.53 (  0.53)	test_minacc   0.53 (  0.53)	test_majacc   0.50 (  0.50)	Loss_d 0.684 (0.684)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.29 ( -0.29)
Overall Timing[ 16/  1]	epoch_time 0.0367 (0.0393)	validation_time 0.0006 (0.0008)	train_time 0.0361 (0.0384)
record: (train_acc, test_acc) (0.6626000228524208, 0.6240000128746033)
last accs (train_acc, test_acc) (0.5206000111699104, 0.527999997138977)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.30it/s] 19%|#9        | 5/26 [00:00<00:00, 23.08it/s] 35%|###4      | 9/26 [00:00<00:00, 27.50it/s] 50%|#####     | 13/26 [00:00<00:00, 30.71it/s] 65%|######5   | 17/26 [00:00<00:00, 32.72it/s] 81%|########  | 21/26 [00:00<00:00, 34.10it/s] 96%|#########6| 25/26 [00:00<00:00, 34.17it/s]100%|##########| 26/26 [00:00<00:00, 29.09it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 442 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 443 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 444 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 445 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 446 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 447 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 448 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 449 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 450 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 451 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 452 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 453 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 454 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 455 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 456 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 457 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 458 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 459 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 460 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 461 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 462 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 463 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 464 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 465 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 466 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 467 400
penalty weights 10000.0
Epoch: [17][  26/  26]	Loss 0.000 (0.000)	train_nll   0.70 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.15 (  0.15)	train_acc   0.48 (  0.51)	train_minacc   0.53 (  0.52)	train_majacc   0.47 (  0.51)	train_corr   0.00 (  0.00)	l1 18.1100 (18.1212)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.24it/s] 31%|###       | 8/26 [00:00<00:00, 41.03it/s]                                               31%|###       | 8/26 [00:00<00:00, 41.03it/s] 50%|#####     | 13/26 [00:00<00:00, 43.19it/s] 73%|#######3  | 19/26 [00:00<00:00, 49.02it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 49.02it/s] 96%|#########6| 25/26 [00:00<00:00, 48.92it/s]100%|##########| 26/26 [00:00<00:00, 41.39it/s]
Test: [   0/  26]	Loss 0.694 (0.694)	test_acc   0.51 (  0.51)	test_minacc   0.51 (  0.51)	test_majacc   0.50 (  0.50)	Loss_d 0.694 (0.694)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.50 (  0.50)	test_corr_d   0.09 (  0.09)
Test: [  10/  26]	Loss 0.693 (0.691)	test_acc   0.50 (  0.53)	test_minacc   0.42 (  0.55)	test_majacc   0.52 (  0.52)	Loss_d 0.693 (0.691)	test_acc_d   0.50 (  0.53)	test_minacc_d   0.42 (  0.55)	test_majacc_d   0.52 (  0.52)	test_corr_d   0.08 (  0.08)
Test: [  20/  26]	Loss 0.689 (0.691)	test_acc   0.54 (  0.53)	test_minacc   0.58 (  0.53)	test_majacc   0.54 (  0.53)	Loss_d 0.689 (0.691)	test_acc_d   0.54 (  0.53)	test_minacc_d   0.58 (  0.53)	test_majacc_d   0.54 (  0.53)	test_corr_d   0.06 (  0.07)
Test: [  26/  26]	Loss 0.696 (0.692)	test_acc   0.48 (  0.53)	test_minacc   0.53 (  0.54)	test_majacc   0.47 (  0.52)	Loss_d 0.696 (0.692)	test_acc_d   0.48 (  0.53)	test_minacc_d   0.53 (  0.54)	test_majacc_d   0.47 (  0.52)	test_corr_d  -0.06 (  0.07)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.67it/s]
Test: [  0/  1]	Loss 0.690 (0.690)	test_acc   0.53 (  0.53)	test_minacc   0.53 (  0.53)	test_majacc   0.51 (  0.51)	Loss_d 0.690 (0.690)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.51 (  0.51)	test_corr_d  -0.20 ( -0.20)
Test: [  1/  1]	Loss 0.690 (0.690)	test_acc   0.53 (  0.53)	test_minacc   0.53 (  0.53)	test_majacc   0.51 (  0.51)	Loss_d 0.690 (0.690)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.51 (  0.51)	test_corr_d  -0.20 ( -0.20)
Overall Timing[ 17/  1]	epoch_time 0.0365 (0.0392)	validation_time 0.0003 (0.0007)	train_time 0.0362 (0.0383)
record: (train_acc, test_acc) (0.6626000228524208, 0.6240000128746033)
last accs (train_acc, test_acc) (0.525000011742115, 0.5320000052452087)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.48it/s] 19%|#9        | 5/26 [00:00<00:01, 18.64it/s] 35%|###4      | 9/26 [00:00<00:00, 24.77it/s] 50%|#####     | 13/26 [00:00<00:00, 28.95it/s] 65%|######5   | 17/26 [00:00<00:00, 31.37it/s] 81%|########  | 21/26 [00:00<00:00, 33.16it/s] 96%|#########6| 25/26 [00:00<00:00, 34.36it/s]100%|##########| 26/26 [00:00<00:00, 27.32it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 468 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 469 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 470 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 471 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 472 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 473 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 474 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 475 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 476 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 477 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 478 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 479 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 480 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 481 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 482 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 483 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 484 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 485 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 486 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 487 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 488 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 489 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 490 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 491 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 492 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 493 400
penalty weights 10000.0
Epoch: [18][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.15 (  0.15)	train_acc   0.48 (  0.53)	train_minacc   0.63 (  0.55)	train_majacc   0.45 (  0.53)	train_corr   0.00 (  0.00)	l1 18.1109 (18.1099)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 18.89it/s] 31%|###       | 8/26 [00:00<00:00, 41.51it/s]                                               31%|###       | 8/26 [00:00<00:00, 41.51it/s] 50%|#####     | 13/26 [00:00<00:00, 42.90it/s] 73%|#######3  | 19/26 [00:00<00:00, 48.83it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 48.83it/s] 96%|#########6| 25/26 [00:00<00:00, 48.60it/s]100%|##########| 26/26 [00:00<00:00, 41.94it/s]
Test: [   0/  26]	Loss 0.695 (0.695)	test_acc   0.47 (  0.47)	test_minacc   0.43 (  0.43)	test_majacc   0.48 (  0.48)	Loss_d 0.695 (0.695)	test_acc_d   0.47 (  0.47)	test_minacc_d   0.43 (  0.43)	test_majacc_d   0.48 (  0.48)	test_corr_d  -0.02 ( -0.02)
Test: [  10/  26]	Loss 0.694 (0.693)	test_acc   0.51 (  0.52)	test_minacc   0.46 (  0.53)	test_majacc   0.52 (  0.52)	Loss_d 0.694 (0.693)	test_acc_d   0.51 (  0.52)	test_minacc_d   0.46 (  0.53)	test_majacc_d   0.52 (  0.52)	test_corr_d  -0.03 ( -0.02)
Test: [  20/  26]	Loss 0.692 (0.693)	test_acc   0.54 (  0.52)	test_minacc   0.64 (  0.54)	test_majacc   0.52 (  0.52)	Loss_d 0.692 (0.693)	test_acc_d   0.54 (  0.52)	test_minacc_d   0.64 (  0.54)	test_majacc_d   0.52 (  0.52)	test_corr_d  -0.08 ( -0.03)
Test: [  26/  26]	Loss 0.694 (0.693)	test_acc   0.48 (  0.52)	test_minacc   0.60 (  0.54)	test_majacc   0.45 (  0.51)	Loss_d 0.694 (0.693)	test_acc_d   0.48 (  0.52)	test_minacc_d   0.60 (  0.54)	test_majacc_d   0.45 (  0.51)	test_corr_d  -0.11 ( -0.03)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.25it/s]
Test: [  0/  1]	Loss 0.692 (0.692)	test_acc   0.54 (  0.54)	test_minacc   0.55 (  0.55)	test_majacc   0.52 (  0.52)	Loss_d 0.692 (0.692)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.55 (  0.55)	test_majacc_d   0.52 (  0.52)	test_corr_d  -0.10 ( -0.10)
Test: [  1/  1]	Loss 0.692 (0.692)	test_acc   0.54 (  0.54)	test_minacc   0.55 (  0.55)	test_majacc   0.52 (  0.52)	Loss_d 0.692 (0.692)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.55 (  0.55)	test_majacc_d   0.52 (  0.52)	test_corr_d  -0.10 ( -0.10)
Overall Timing[ 18/  1]	epoch_time 0.0367 (0.0391)	validation_time 0.0003 (0.0007)	train_time 0.0363 (0.0382)
record: (train_acc, test_acc) (0.6626000228524208, 0.6240000128746033)
last accs (train_acc, test_acc) (0.5157000134587288, 0.5430000424385071)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.01it/s] 19%|#9        | 5/26 [00:00<00:01, 20.89it/s] 35%|###4      | 9/26 [00:00<00:00, 26.82it/s] 50%|#####     | 13/26 [00:00<00:00, 29.91it/s] 65%|######5   | 17/26 [00:00<00:00, 31.71it/s] 81%|########  | 21/26 [00:00<00:00, 33.08it/s] 96%|#########6| 25/26 [00:00<00:00, 33.53it/s]100%|##########| 26/26 [00:00<00:00, 27.95it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 494 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 495 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 496 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 497 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 498 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 499 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 500 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 501 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 502 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 503 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 504 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 505 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 506 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 507 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 508 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 509 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 510 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 511 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 512 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 513 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 514 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 515 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 516 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 517 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 518 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 519 400
penalty weights 10000.0
Epoch: [19][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.15 (  0.15)	train_acc   0.46 (  0.50)	train_minacc   0.56 (  0.53)	train_majacc   0.43 (  0.50)	train_corr   0.00 (  0.00)	l1 18.1120 (18.1116)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.75it/s] 27%|##6       | 7/26 [00:00<00:00, 36.15it/s]                                               27%|##6       | 7/26 [00:00<00:00, 36.15it/s] 50%|#####     | 13/26 [00:00<00:00, 42.04it/s] 73%|#######3  | 19/26 [00:00<00:00, 47.43it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 47.43it/s] 96%|#########6| 25/26 [00:00<00:00, 47.38it/s]100%|##########| 26/26 [00:00<00:00, 40.41it/s]
Test: [   0/  26]	Loss 0.694 (0.694)	test_acc   0.45 (  0.45)	test_minacc   0.43 (  0.43)	test_majacc   0.46 (  0.46)	Loss_d 0.694 (0.694)	test_acc_d   0.45 (  0.45)	test_minacc_d   0.43 (  0.43)	test_majacc_d   0.46 (  0.46)	test_corr_d  -0.01 ( -0.01)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.47 (  0.48)	test_minacc   0.48 (  0.50)	test_majacc   0.46 (  0.48)	Loss_d 0.693 (0.693)	test_acc_d   0.47 (  0.48)	test_minacc_d   0.48 (  0.50)	test_majacc_d   0.46 (  0.48)	test_corr_d  -0.02 ( -0.02)
Test: [  20/  26]	Loss 0.692 (0.693)	test_acc   0.51 (  0.48)	test_minacc   0.66 (  0.51)	test_majacc   0.48 (  0.48)	Loss_d 0.692 (0.693)	test_acc_d   0.51 (  0.48)	test_minacc_d   0.66 (  0.51)	test_majacc_d   0.48 (  0.48)	test_corr_d  -0.08 ( -0.03)
Test: [  26/  26]	Loss 0.694 (0.693)	test_acc   0.46 (  0.48)	test_minacc   0.56 (  0.51)	test_majacc   0.44 (  0.48)	Loss_d 0.694 (0.693)	test_acc_d   0.46 (  0.48)	test_minacc_d   0.56 (  0.51)	test_majacc_d   0.44 (  0.48)	test_corr_d  -0.10 ( -0.03)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 59.33it/s]
Test: [  0/  1]	Loss 0.692 (0.692)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.49 (  0.49)	Loss_d 0.692 (0.692)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.49 (  0.49)	test_corr_d  -0.10 ( -0.10)
Test: [  1/  1]	Loss 0.692 (0.692)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.49 (  0.49)	Loss_d 0.692 (0.692)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.49 (  0.49)	test_corr_d  -0.10 ( -0.10)
Overall Timing[ 19/  1]	epoch_time 0.0374 (0.0390)	validation_time 0.0004 (0.0007)	train_time 0.0370 (0.0381)
record: (train_acc, test_acc) (0.6626000228524208, 0.6240000128746033)
last accs (train_acc, test_acc) (0.48170000705122945, 0.503000020980835)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.74it/s] 19%|#9        | 5/26 [00:00<00:01, 19.36it/s] 35%|###4      | 9/26 [00:00<00:00, 25.66it/s] 50%|#####     | 13/26 [00:00<00:00, 29.37it/s] 65%|######5   | 17/26 [00:00<00:00, 31.72it/s] 81%|########  | 21/26 [00:00<00:00, 33.31it/s] 96%|#########6| 25/26 [00:00<00:00, 34.32it/s]100%|##########| 26/26 [00:00<00:00, 27.63it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 520 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 521 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 522 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 523 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 524 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 525 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 526 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 527 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 528 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 529 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 530 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 531 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 532 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 533 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 534 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 535 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 536 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 537 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 538 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 539 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 540 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 541 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 542 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 543 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 544 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 545 400
penalty weights 10000.0
Epoch: [20][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.15 (  0.15)	train_acc   0.45 (  0.48)	train_minacc   0.56 (  0.52)	train_majacc   0.43 (  0.48)	train_corr   0.00 (  0.00)	l1 18.1119 (18.1120)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.94it/s] 27%|##6       | 7/26 [00:00<00:00, 34.94it/s]                                               27%|##6       | 7/26 [00:00<00:00, 34.94it/s] 50%|#####     | 13/26 [00:00<00:00, 41.20it/s] 73%|#######3  | 19/26 [00:00<00:00, 47.16it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 47.16it/s] 96%|#########6| 25/26 [00:00<00:00, 48.23it/s]100%|##########| 26/26 [00:00<00:00, 39.37it/s]
Test: [   0/  26]	Loss 0.694 (0.694)	test_acc   0.45 (  0.45)	test_minacc   0.42 (  0.42)	test_majacc   0.45 (  0.45)	Loss_d 0.694 (0.694)	test_acc_d   0.45 (  0.45)	test_minacc_d   0.42 (  0.42)	test_majacc_d   0.45 (  0.45)	test_corr_d  -0.01 ( -0.01)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.47 (  0.48)	test_minacc   0.49 (  0.50)	test_majacc   0.46 (  0.48)	Loss_d 0.693 (0.693)	test_acc_d   0.47 (  0.48)	test_minacc_d   0.49 (  0.50)	test_majacc_d   0.46 (  0.48)	test_corr_d  -0.02 ( -0.01)
Test: [  20/  26]	Loss 0.692 (0.693)	test_acc   0.52 (  0.48)	test_minacc   0.67 (  0.52)	test_majacc   0.48 (  0.48)	Loss_d 0.692 (0.693)	test_acc_d   0.52 (  0.48)	test_minacc_d   0.67 (  0.52)	test_majacc_d   0.48 (  0.48)	test_corr_d  -0.07 ( -0.02)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.46 (  0.48)	test_minacc   0.56 (  0.52)	test_majacc   0.43 (  0.48)	Loss_d 0.693 (0.693)	test_acc_d   0.46 (  0.48)	test_minacc_d   0.56 (  0.52)	test_majacc_d   0.43 (  0.48)	test_corr_d  -0.10 ( -0.02)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.07it/s]
Test: [  0/  1]	Loss 0.692 (0.692)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.692 (0.692)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.11 ( -0.11)
Test: [  1/  1]	Loss 0.692 (0.692)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.692 (0.692)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.11 ( -0.11)
Overall Timing[ 20/  1]	epoch_time 0.0374 (0.0389)	validation_time 0.0004 (0.0007)	train_time 0.0370 (0.0381)
record: (train_acc, test_acc) (0.6626000228524208, 0.6240000128746033)
last accs (train_acc, test_acc) (0.48360000863671304, 0.5040000081062317)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.74it/s] 19%|#9        | 5/26 [00:00<00:00, 21.83it/s] 35%|###4      | 9/26 [00:00<00:00, 27.20it/s] 50%|#####     | 13/26 [00:00<00:00, 29.77it/s] 65%|######5   | 17/26 [00:00<00:00, 31.63it/s] 81%|########  | 21/26 [00:00<00:00, 32.79it/s] 96%|#########6| 25/26 [00:00<00:00, 33.60it/s]100%|##########| 26/26 [00:00<00:00, 28.22it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 546 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 547 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 548 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 549 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 550 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 551 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 552 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 553 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 554 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 555 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 556 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 557 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 558 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 559 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 560 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 561 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 562 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 563 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 564 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 565 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 566 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 567 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 568 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 569 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 570 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 571 400
penalty weights 10000.0
Epoch: [21][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.15 (  0.15)	train_acc   0.46 (  0.48)	train_minacc   0.56 (  0.51)	train_majacc   0.44 (  0.48)	train_corr   0.00 (  0.00)	l1 18.1115 (18.1117)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.31it/s] 27%|##6       | 7/26 [00:00<00:00, 37.49it/s]                                               27%|##6       | 7/26 [00:00<00:00, 37.49it/s] 50%|#####     | 13/26 [00:00<00:00, 42.80it/s] 73%|#######3  | 19/26 [00:00<00:00, 48.55it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 48.55it/s] 96%|#########6| 25/26 [00:00<00:00, 48.70it/s]100%|##########| 26/26 [00:00<00:00, 40.97it/s]
Test: [   0/  26]	Loss 0.694 (0.694)	test_acc   0.45 (  0.45)	test_minacc   0.42 (  0.42)	test_majacc   0.45 (  0.45)	Loss_d 0.694 (0.694)	test_acc_d   0.45 (  0.45)	test_minacc_d   0.42 (  0.42)	test_majacc_d   0.45 (  0.45)	test_corr_d  -0.01 ( -0.01)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.47 (  0.48)	test_minacc   0.49 (  0.50)	test_majacc   0.47 (  0.48)	Loss_d 0.693 (0.693)	test_acc_d   0.47 (  0.48)	test_minacc_d   0.49 (  0.50)	test_majacc_d   0.47 (  0.48)	test_corr_d  -0.02 ( -0.01)
Test: [  20/  26]	Loss 0.692 (0.693)	test_acc   0.51 (  0.49)	test_minacc   0.67 (  0.52)	test_majacc   0.48 (  0.48)	Loss_d 0.692 (0.693)	test_acc_d   0.51 (  0.49)	test_minacc_d   0.67 (  0.52)	test_majacc_d   0.48 (  0.48)	test_corr_d  -0.07 ( -0.02)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.46 (  0.49)	test_minacc   0.56 (  0.52)	test_majacc   0.44 (  0.48)	Loss_d 0.693 (0.693)	test_acc_d   0.46 (  0.49)	test_minacc_d   0.56 (  0.52)	test_majacc_d   0.44 (  0.48)	test_corr_d  -0.10 ( -0.02)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.99it/s]
Test: [  0/  1]	Loss 0.692 (0.692)	test_acc   0.51 (  0.51)	test_minacc   0.51 (  0.51)	test_majacc   0.52 (  0.52)	Loss_d 0.692 (0.692)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.52 (  0.52)	test_corr_d  -0.10 ( -0.10)
Test: [  1/  1]	Loss 0.692 (0.692)	test_acc   0.51 (  0.51)	test_minacc   0.51 (  0.51)	test_majacc   0.52 (  0.52)	Loss_d 0.692 (0.692)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.52 (  0.52)	test_corr_d  -0.10 ( -0.10)
Overall Timing[ 21/  1]	epoch_time 0.0364 (0.0388)	validation_time 0.0004 (0.0007)	train_time 0.0360 (0.0380)
record: (train_acc, test_acc) (0.6626000228524208, 0.6240000128746033)
last accs (train_acc, test_acc) (0.48500000685453415, 0.5080000162124634)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:00, 23.35it/s] 23%|##3       | 6/26 [00:00<00:00, 25.66it/s] 38%|###8      | 10/26 [00:00<00:00, 29.03it/s] 54%|#####3    | 14/26 [00:00<00:00, 31.12it/s] 69%|######9   | 18/26 [00:00<00:00, 31.88it/s] 85%|########4 | 22/26 [00:00<00:00, 32.92it/s]100%|##########| 26/26 [00:00<00:00, 33.07it/s]100%|##########| 26/26 [00:00<00:00, 29.15it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 572 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 573 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 574 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 575 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 576 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 577 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 578 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 579 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 580 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 581 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 582 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 583 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 584 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 585 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 586 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 587 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 588 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 589 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 590 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 591 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 592 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 593 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 594 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 595 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 596 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 597 400
penalty weights 10000.0
Epoch: [22][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.15 (  0.15)	train_acc   0.46 (  0.48)	train_minacc   0.56 (  0.51)	train_majacc   0.44 (  0.48)	train_corr   0.00 (  0.00)	l1 18.1112 (18.1114)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.15it/s] 27%|##6       | 7/26 [00:00<00:00, 34.89it/s]                                               27%|##6       | 7/26 [00:00<00:00, 34.89it/s] 50%|#####     | 13/26 [00:00<00:00, 41.22it/s] 73%|#######3  | 19/26 [00:00<00:00, 47.42it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 47.42it/s] 96%|#########6| 25/26 [00:00<00:00, 47.36it/s]100%|##########| 26/26 [00:00<00:00, 39.65it/s]
Test: [   0/  26]	Loss 0.694 (0.694)	test_acc   0.45 (  0.45)	test_minacc   0.42 (  0.42)	test_majacc   0.45 (  0.45)	Loss_d 0.694 (0.694)	test_acc_d   0.45 (  0.45)	test_minacc_d   0.42 (  0.42)	test_majacc_d   0.45 (  0.45)	test_corr_d  -0.01 ( -0.01)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.47 (  0.48)	test_minacc   0.48 (  0.50)	test_majacc   0.47 (  0.48)	Loss_d 0.693 (0.693)	test_acc_d   0.47 (  0.48)	test_minacc_d   0.48 (  0.50)	test_majacc_d   0.47 (  0.48)	test_corr_d  -0.01 ( -0.01)
Test: [  20/  26]	Loss 0.692 (0.693)	test_acc   0.51 (  0.49)	test_minacc   0.66 (  0.51)	test_majacc   0.47 (  0.48)	Loss_d 0.692 (0.693)	test_acc_d   0.51 (  0.49)	test_minacc_d   0.66 (  0.51)	test_majacc_d   0.47 (  0.48)	test_corr_d  -0.07 ( -0.02)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.46 (  0.49)	test_minacc   0.56 (  0.52)	test_majacc   0.44 (  0.48)	Loss_d 0.693 (0.693)	test_acc_d   0.46 (  0.49)	test_minacc_d   0.56 (  0.52)	test_majacc_d   0.44 (  0.48)	test_corr_d  -0.09 ( -0.02)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 65.92it/s]
Test: [  0/  1]	Loss 0.692 (0.692)	test_acc   0.51 (  0.51)	test_minacc   0.51 (  0.51)	test_majacc   0.51 (  0.51)	Loss_d 0.692 (0.692)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.51 (  0.51)	test_corr_d  -0.10 ( -0.10)
Test: [  1/  1]	Loss 0.692 (0.692)	test_acc   0.51 (  0.51)	test_minacc   0.51 (  0.51)	test_majacc   0.51 (  0.51)	Loss_d 0.692 (0.692)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.51 (  0.51)	test_corr_d  -0.10 ( -0.10)
Overall Timing[ 22/  1]	epoch_time 0.0363 (0.0387)	validation_time 0.0003 (0.0007)	train_time 0.0360 (0.0379)
record: (train_acc, test_acc) (0.6626000228524208, 0.6240000128746033)
last accs (train_acc, test_acc) (0.48500000801682475, 0.5100000500679016)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.27it/s] 15%|#5        | 4/26 [00:00<00:01, 18.04it/s] 23%|##3       | 6/26 [00:00<00:01, 16.97it/s] 31%|###       | 8/26 [00:00<00:01, 16.94it/s] 38%|###8      | 10/26 [00:00<00:00, 17.10it/s] 46%|####6     | 12/26 [00:00<00:00, 17.13it/s] 54%|#####3    | 14/26 [00:00<00:00, 16.97it/s] 62%|######1   | 16/26 [00:00<00:00, 16.92it/s] 69%|######9   | 18/26 [00:01<00:00, 16.86it/s] 77%|#######6  | 20/26 [00:01<00:00, 16.85it/s] 85%|########4 | 22/26 [00:01<00:00, 16.76it/s] 92%|#########2| 24/26 [00:01<00:00, 16.72it/s]100%|##########| 26/26 [00:01<00:00, 16.83it/s]100%|##########| 26/26 [00:01<00:00, 16.00it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 598 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 599 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 600 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 601 400
penalty weights 10000.0
args.step pgd_anneal_iters 601 600
dim_v 512
rho, theta 165 tensor(0.0166, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 602 400
penalty weights 10000.0
args.step pgd_anneal_iters 602 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 603 400
penalty weights 10000.0
args.step pgd_anneal_iters 603 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 604 400
penalty weights 10000.0
args.step pgd_anneal_iters 604 600
dim_v 512
rho, theta 493 tensor(-0.0003, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 605 400
penalty weights 10000.0
args.step pgd_anneal_iters 605 600
dim_v 512
rho, theta 496 tensor(-0.0002, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 606 400
penalty weights 10000.0
args.step pgd_anneal_iters 606 600
dim_v 512
rho, theta 490 tensor(-0.0002, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 607 400
penalty weights 10000.0
args.step pgd_anneal_iters 607 600
dim_v 512
rho, theta 496 tensor(-0.0002, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 608 400
penalty weights 10000.0
args.step pgd_anneal_iters 608 600
dim_v 512
rho, theta 494 tensor(-0.0002, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 609 400
penalty weights 10000.0
args.step pgd_anneal_iters 609 600
dim_v 512
rho, theta 496 tensor(-0.0002, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 610 400
penalty weights 10000.0
args.step pgd_anneal_iters 610 600
dim_v 512
rho, theta 491 tensor(-0.0002, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 611 400
penalty weights 10000.0
args.step pgd_anneal_iters 611 600
dim_v 512
rho, theta 497 tensor(-0.0002, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 612 400
penalty weights 10000.0
args.step pgd_anneal_iters 612 600
dim_v 512
rho, theta 502 tensor(-0.0002, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 613 400
penalty weights 10000.0
args.step pgd_anneal_iters 613 600
dim_v 512
rho, theta 504 tensor(-0.0001, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 614 400
penalty weights 10000.0
args.step pgd_anneal_iters 614 600
dim_v 512
rho, theta 504 tensor(-0.0001, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 615 400
penalty weights 10000.0
args.step pgd_anneal_iters 615 600
dim_v 512
rho, theta 508 tensor(-0.0001, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 616 400
penalty weights 10000.0
args.step pgd_anneal_iters 616 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 617 400
penalty weights 10000.0
args.step pgd_anneal_iters 617 600
dim_v 512
rho, theta 496 tensor(-0.0002, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 618 400
penalty weights 10000.0
args.step pgd_anneal_iters 618 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 619 400
penalty weights 10000.0
args.step pgd_anneal_iters 619 600
dim_v 512
rho, theta 503 tensor(-0.0002, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 620 400
penalty weights 10000.0
args.step pgd_anneal_iters 620 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 621 400
penalty weights 10000.0
args.step pgd_anneal_iters 621 600
dim_v 512
rho, theta 508 tensor(-0.0001, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 622 400
penalty weights 10000.0
args.step pgd_anneal_iters 622 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 623 400
penalty weights 10000.0
args.step pgd_anneal_iters 623 600
dim_v 512
retunring when rho == dim_v - 1
Epoch: [23][  26/  26]	Loss 0.000 (0.002)	train_nll   0.68 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.15 (  0.14)	train_acc   0.46 (  0.50)	train_minacc   0.49 (  0.50)	train_majacc   0.45 (  0.50)	train_corr   0.00 (  0.00)	l1 5.0425 (6.5705)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.81it/s] 15%|#5        | 4/26 [00:00<00:01, 21.06it/s] 38%|###8      | 10/26 [00:00<00:00, 38.06it/s]                                                38%|###8      | 10/26 [00:00<00:00, 38.06it/s] 62%|######1   | 16/26 [00:00<00:00, 42.34it/s]                                                62%|######1   | 16/26 [00:00<00:00, 42.34it/s] 85%|########4 | 22/26 [00:00<00:00, 48.12it/s]100%|##########| 26/26 [00:00<00:00, 39.15it/s]
Test: [   0/  26]	Loss 0.678 (0.678)	test_acc   0.49 (  0.49)	test_minacc   0.51 (  0.51)	test_majacc   0.48 (  0.48)	Loss_d 0.678 (0.678)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.48 (  0.48)	test_corr_d   0.26 (  0.26)
Test: [  10/  26]	Loss 0.677 (0.676)	test_acc   0.48 (  0.50)	test_minacc   0.39 (  0.51)	test_majacc   0.50 (  0.50)	Loss_d 0.677 (0.676)	test_acc_d   0.48 (  0.50)	test_minacc_d   0.39 (  0.51)	test_majacc_d   0.50 (  0.50)	test_corr_d   0.29 (  0.26)
Test: [  20/  26]	Loss 0.676 (0.677)	test_acc   0.52 (  0.50)	test_minacc   0.55 (  0.50)	test_majacc   0.52 (  0.50)	Loss_d 0.676 (0.677)	test_acc_d   0.52 (  0.50)	test_minacc_d   0.55 (  0.50)	test_majacc_d   0.52 (  0.50)	test_corr_d   0.33 (  0.27)
Test: [  26/  26]	Loss 0.685 (0.677)	test_acc   0.46 (  0.50)	test_minacc   0.49 (  0.50)	test_majacc   0.45 (  0.50)	Loss_d 0.685 (0.677)	test_acc_d   0.46 (  0.50)	test_minacc_d   0.49 (  0.50)	test_majacc_d   0.45 (  0.50)	test_corr_d   0.15 (  0.27)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.03it/s]
Test: [  0/  1]	Loss 0.680 (0.680)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.680 (0.680)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.27 ( -0.27)
Test: [  1/  1]	Loss 0.680 (0.680)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.680 (0.680)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.27 ( -0.27)
Overall Timing[ 23/  1]	epoch_time 0.0487 (0.0391)	validation_time 0.0004 (0.0006)	train_time 0.0483 (0.0383)
record: (train_acc, test_acc) (0.6626000228524208, 0.6240000128746033)
last accs (train_acc, test_acc) (0.5000000117719173, 0.5)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.11it/s] 12%|#1        | 3/26 [00:00<00:01, 12.17it/s] 19%|#9        | 5/26 [00:00<00:01, 14.25it/s] 27%|##6       | 7/26 [00:00<00:01, 15.49it/s] 35%|###4      | 9/26 [00:00<00:01, 16.17it/s] 42%|####2     | 11/26 [00:00<00:00, 16.57it/s] 58%|#####7    | 15/26 [00:00<00:00, 22.67it/s] 73%|#######3  | 19/26 [00:00<00:00, 26.44it/s] 88%|########8 | 23/26 [00:01<00:00, 28.99it/s]100%|##########| 26/26 [00:01<00:00, 21.52it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 624 400
penalty weights 10000.0
args.step pgd_anneal_iters 624 600
dim_v 512
rho, theta 507 tensor(-0.0001, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 625 400
penalty weights 10000.0
args.step pgd_anneal_iters 625 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 626 400
penalty weights 10000.0
args.step pgd_anneal_iters 626 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 627 400
penalty weights 10000.0
args.step pgd_anneal_iters 627 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 628 400
penalty weights 10000.0
args.step pgd_anneal_iters 628 600
dim_v 512
rho, theta 510 tensor(-0.0001, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 629 400
penalty weights 10000.0
args.step pgd_anneal_iters 629 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 630 400
penalty weights 10000.0
args.step pgd_anneal_iters 630 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 631 400
penalty weights 10000.0
args.step pgd_anneal_iters 631 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 632 400
penalty weights 10000.0
args.step pgd_anneal_iters 632 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 633 400
penalty weights 10000.0
args.step pgd_anneal_iters 633 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 634 400
penalty weights 10000.0
args.step pgd_anneal_iters 634 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 635 400
penalty weights 10000.0
args.step pgd_anneal_iters 635 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 636 400
penalty weights 10000.0
args.step pgd_anneal_iters 636 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 637 400
penalty weights 10000.0
args.step pgd_anneal_iters 637 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 638 400
penalty weights 10000.0
args.step pgd_anneal_iters 638 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 639 400
penalty weights 10000.0
args.step pgd_anneal_iters 639 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 640 400
penalty weights 10000.0
args.step pgd_anneal_iters 640 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 641 400
penalty weights 10000.0
args.step pgd_anneal_iters 641 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 642 400
penalty weights 10000.0
args.step pgd_anneal_iters 642 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 643 400
penalty weights 10000.0
args.step pgd_anneal_iters 643 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 644 400
penalty weights 10000.0
args.step pgd_anneal_iters 644 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 645 400
penalty weights 10000.0
args.step pgd_anneal_iters 645 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 646 400
penalty weights 10000.0
args.step pgd_anneal_iters 646 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 647 400
penalty weights 10000.0
args.step pgd_anneal_iters 647 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 648 400
penalty weights 10000.0
args.step pgd_anneal_iters 648 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 649 400
penalty weights 10000.0
args.step pgd_anneal_iters 649 600
dim_v 512
Epoch: [24][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.68)	train_penalty   0.00 (  0.00)	weight_norm   0.15 (  0.15)	train_acc   0.46 (  0.50)	train_minacc   0.49 (  0.50)	train_majacc   0.45 (  0.50)	train_corr   0.00 (  0.00)	l1 4.9623 (4.9973)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 18.83it/s] 31%|###       | 8/26 [00:00<00:00, 41.68it/s]                                               31%|###       | 8/26 [00:00<00:00, 41.68it/s] 50%|#####     | 13/26 [00:00<00:00, 41.71it/s] 73%|#######3  | 19/26 [00:00<00:00, 47.51it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 47.51it/s] 96%|#########6| 25/26 [00:00<00:00, 47.55it/s]100%|##########| 26/26 [00:00<00:00, 40.99it/s]
Test: [   0/  26]	Loss 0.685 (0.685)	test_acc   0.49 (  0.49)	test_minacc   0.51 (  0.51)	test_majacc   0.48 (  0.48)	Loss_d 0.685 (0.685)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.48 (  0.48)	test_corr_d   0.25 (  0.25)
Test: [  10/  26]	Loss 0.685 (0.684)	test_acc   0.48 (  0.50)	test_minacc   0.39 (  0.51)	test_majacc   0.50 (  0.50)	Loss_d 0.685 (0.684)	test_acc_d   0.48 (  0.50)	test_minacc_d   0.39 (  0.51)	test_majacc_d   0.50 (  0.50)	test_corr_d   0.28 (  0.25)
Test: [  20/  26]	Loss 0.683 (0.684)	test_acc   0.52 (  0.50)	test_minacc   0.55 (  0.50)	test_majacc   0.52 (  0.50)	Loss_d 0.683 (0.684)	test_acc_d   0.52 (  0.50)	test_minacc_d   0.55 (  0.50)	test_majacc_d   0.52 (  0.50)	test_corr_d   0.31 (  0.26)
Test: [  26/  26]	Loss 0.689 (0.684)	test_acc   0.46 (  0.50)	test_minacc   0.49 (  0.50)	test_majacc   0.45 (  0.50)	Loss_d 0.689 (0.684)	test_acc_d   0.46 (  0.50)	test_minacc_d   0.49 (  0.50)	test_majacc_d   0.45 (  0.50)	test_corr_d   0.13 (  0.26)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 67.27it/s]
Test: [  0/  1]	Loss 0.686 (0.686)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.686 (0.686)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.26 ( -0.26)
Test: [  1/  1]	Loss 0.686 (0.686)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.686 (0.686)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.26 ( -0.26)
Overall Timing[ 24/  1]	epoch_time 0.0426 (0.0392)	validation_time 0.0003 (0.0006)	train_time 0.0422 (0.0385)
record: (train_acc, test_acc) (0.6626000228524208, 0.6240000128746033)
last accs (train_acc, test_acc) (0.5000000117719173, 0.5)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.28it/s] 19%|#9        | 5/26 [00:00<00:00, 23.91it/s] 35%|###4      | 9/26 [00:00<00:00, 27.09it/s] 50%|#####     | 13/26 [00:00<00:00, 30.06it/s] 65%|######5   | 17/26 [00:00<00:00, 31.63it/s] 81%|########  | 21/26 [00:00<00:00, 32.45it/s] 96%|#########6| 25/26 [00:00<00:00, 32.82it/s]100%|##########| 26/26 [00:00<00:00, 28.32it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 650 400
penalty weights 10000.0
args.step pgd_anneal_iters 650 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 651 400
penalty weights 10000.0
args.step pgd_anneal_iters 651 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 652 400
penalty weights 10000.0
args.step pgd_anneal_iters 652 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 653 400
penalty weights 10000.0
args.step pgd_anneal_iters 653 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 654 400
penalty weights 10000.0
args.step pgd_anneal_iters 654 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 655 400
penalty weights 10000.0
args.step pgd_anneal_iters 655 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 656 400
penalty weights 10000.0
args.step pgd_anneal_iters 656 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 657 400
penalty weights 10000.0
args.step pgd_anneal_iters 657 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 658 400
penalty weights 10000.0
args.step pgd_anneal_iters 658 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 659 400
penalty weights 10000.0
args.step pgd_anneal_iters 659 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 660 400
penalty weights 10000.0
args.step pgd_anneal_iters 660 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 661 400
penalty weights 10000.0
args.step pgd_anneal_iters 661 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 662 400
penalty weights 10000.0
args.step pgd_anneal_iters 662 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 663 400
penalty weights 10000.0
args.step pgd_anneal_iters 663 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 664 400
penalty weights 10000.0
args.step pgd_anneal_iters 664 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 665 400
penalty weights 10000.0
args.step pgd_anneal_iters 665 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 666 400
penalty weights 10000.0
args.step pgd_anneal_iters 666 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 667 400
penalty weights 10000.0
args.step pgd_anneal_iters 667 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 668 400
penalty weights 10000.0
args.step pgd_anneal_iters 668 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 669 400
penalty weights 10000.0
args.step pgd_anneal_iters 669 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 670 400
penalty weights 10000.0
args.step pgd_anneal_iters 670 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 671 400
penalty weights 10000.0
args.step pgd_anneal_iters 671 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 672 400
penalty weights 10000.0
args.step pgd_anneal_iters 672 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 673 400
penalty weights 10000.0
args.step pgd_anneal_iters 673 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 674 400
penalty weights 10000.0
args.step pgd_anneal_iters 674 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 675 400
penalty weights 10000.0
args.step pgd_anneal_iters 675 600
dim_v 512
Epoch: [25][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.15 (  0.15)	train_acc   0.46 (  0.50)	train_minacc   0.49 (  0.50)	train_majacc   0.45 (  0.50)	train_corr   0.00 (  0.00)	l1 4.9730 (4.9627)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.21it/s] 27%|##6       | 7/26 [00:00<00:00, 33.32it/s]                                               27%|##6       | 7/26 [00:00<00:00, 33.32it/s] 50%|#####     | 13/26 [00:00<00:00, 40.16it/s] 73%|#######3  | 19/26 [00:00<00:00, 45.98it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 45.98it/s] 96%|#########6| 25/26 [00:00<00:00, 46.76it/s]100%|##########| 26/26 [00:00<00:00, 38.54it/s]
Test: [   0/  26]	Loss 0.689 (0.689)	test_acc   0.49 (  0.49)	test_minacc   0.51 (  0.51)	test_majacc   0.48 (  0.48)	Loss_d 0.689 (0.689)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.48 (  0.48)	test_corr_d   0.24 (  0.24)
Test: [  10/  26]	Loss 0.689 (0.687)	test_acc   0.48 (  0.50)	test_minacc   0.39 (  0.51)	test_majacc   0.50 (  0.50)	Loss_d 0.689 (0.687)	test_acc_d   0.48 (  0.50)	test_minacc_d   0.39 (  0.51)	test_majacc_d   0.50 (  0.50)	test_corr_d   0.28 (  0.25)
Test: [  20/  26]	Loss 0.686 (0.687)	test_acc   0.52 (  0.50)	test_minacc   0.55 (  0.50)	test_majacc   0.52 (  0.50)	Loss_d 0.686 (0.687)	test_acc_d   0.52 (  0.50)	test_minacc_d   0.55 (  0.50)	test_majacc_d   0.52 (  0.50)	test_corr_d   0.31 (  0.25)
Test: [  26/  26]	Loss 0.692 (0.688)	test_acc   0.46 (  0.50)	test_minacc   0.49 (  0.50)	test_majacc   0.45 (  0.50)	Loss_d 0.692 (0.688)	test_acc_d   0.46 (  0.50)	test_minacc_d   0.49 (  0.50)	test_majacc_d   0.45 (  0.50)	test_corr_d   0.13 (  0.25)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.76it/s]
Test: [  0/  1]	Loss 0.689 (0.689)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.689 (0.689)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.26 ( -0.26)
Test: [  1/  1]	Loss 0.689 (0.689)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.689 (0.689)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.26 ( -0.26)
Overall Timing[ 25/  1]	epoch_time 0.0374 (0.0392)	validation_time 0.0006 (0.0006)	train_time 0.0368 (0.0384)
record: (train_acc, test_acc) (0.6626000228524208, 0.6240000128746033)
last accs (train_acc, test_acc) (0.5000000117719173, 0.5)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.19it/s] 19%|#9        | 5/26 [00:00<00:00, 22.98it/s] 35%|###4      | 9/26 [00:00<00:00, 27.49it/s] 50%|#####     | 13/26 [00:00<00:00, 30.47it/s] 65%|######5   | 17/26 [00:00<00:00, 31.60it/s] 81%|########  | 21/26 [00:00<00:00, 32.35it/s] 96%|#########6| 25/26 [00:00<00:00, 33.21it/s]100%|##########| 26/26 [00:00<00:00, 28.51it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 676 400
penalty weights 10000.0
args.step pgd_anneal_iters 676 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 677 400
penalty weights 10000.0
args.step pgd_anneal_iters 677 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 678 400
penalty weights 10000.0
args.step pgd_anneal_iters 678 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 679 400
penalty weights 10000.0
args.step pgd_anneal_iters 679 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 680 400
penalty weights 10000.0
args.step pgd_anneal_iters 680 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 681 400
penalty weights 10000.0
args.step pgd_anneal_iters 681 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 682 400
penalty weights 10000.0
args.step pgd_anneal_iters 682 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 683 400
penalty weights 10000.0
args.step pgd_anneal_iters 683 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 684 400
penalty weights 10000.0
args.step pgd_anneal_iters 684 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 685 400
penalty weights 10000.0
args.step pgd_anneal_iters 685 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 686 400
penalty weights 10000.0
args.step pgd_anneal_iters 686 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 687 400
penalty weights 10000.0
args.step pgd_anneal_iters 687 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 688 400
penalty weights 10000.0
args.step pgd_anneal_iters 688 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 689 400
penalty weights 10000.0
args.step pgd_anneal_iters 689 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 690 400
penalty weights 10000.0
args.step pgd_anneal_iters 690 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 691 400
penalty weights 10000.0
args.step pgd_anneal_iters 691 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 692 400
penalty weights 10000.0
args.step pgd_anneal_iters 692 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 693 400
penalty weights 10000.0
args.step pgd_anneal_iters 693 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 694 400
penalty weights 10000.0
args.step pgd_anneal_iters 694 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 695 400
penalty weights 10000.0
args.step pgd_anneal_iters 695 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 696 400
penalty weights 10000.0
args.step pgd_anneal_iters 696 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 697 400
penalty weights 10000.0
args.step pgd_anneal_iters 697 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 698 400
penalty weights 10000.0
args.step pgd_anneal_iters 698 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 699 400
penalty weights 10000.0
args.step pgd_anneal_iters 699 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 700 400
penalty weights 10000.0
args.step pgd_anneal_iters 700 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 701 400
penalty weights 10000.0
args.step pgd_anneal_iters 701 600
dim_v 512
Epoch: [26][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.15 (  0.15)	train_acc   0.46 (  0.50)	train_minacc   0.49 (  0.50)	train_majacc   0.45 (  0.50)	train_corr   0.00 (  0.00)	l1 4.9961 (4.9863)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 16.32it/s] 31%|###       | 8/26 [00:00<00:00, 36.16it/s]                                               31%|###       | 8/26 [00:00<00:00, 36.16it/s] 54%|#####3    | 14/26 [00:00<00:00, 42.28it/s] 77%|#######6  | 20/26 [00:00<00:00, 46.41it/s]                                                77%|#######6  | 20/26 [00:00<00:00, 46.41it/s]100%|##########| 26/26 [00:00<00:00, 50.11it/s]100%|##########| 26/26 [00:00<00:00, 40.33it/s]
Test: [   0/  26]	Loss 0.690 (0.690)	test_acc   0.49 (  0.49)	test_minacc   0.51 (  0.51)	test_majacc   0.48 (  0.48)	Loss_d 0.690 (0.690)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.48 (  0.48)	test_corr_d   0.24 (  0.24)
Test: [  10/  26]	Loss 0.690 (0.689)	test_acc   0.48 (  0.50)	test_minacc   0.39 (  0.51)	test_majacc   0.50 (  0.50)	Loss_d 0.690 (0.689)	test_acc_d   0.48 (  0.50)	test_minacc_d   0.39 (  0.51)	test_majacc_d   0.50 (  0.50)	test_corr_d   0.28 (  0.24)
Test: [  20/  26]	Loss 0.688 (0.689)	test_acc   0.52 (  0.50)	test_minacc   0.55 (  0.50)	test_majacc   0.52 (  0.50)	Loss_d 0.688 (0.689)	test_acc_d   0.52 (  0.50)	test_minacc_d   0.55 (  0.50)	test_majacc_d   0.52 (  0.50)	test_corr_d   0.31 (  0.25)
Test: [  26/  26]	Loss 0.694 (0.689)	test_acc   0.46 (  0.50)	test_minacc   0.49 (  0.50)	test_majacc   0.45 (  0.50)	Loss_d 0.694 (0.689)	test_acc_d   0.46 (  0.50)	test_minacc_d   0.49 (  0.50)	test_majacc_d   0.45 (  0.50)	test_corr_d   0.12 (  0.25)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.30it/s]
Test: [  0/  1]	Loss 0.690 (0.690)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.690 (0.690)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.26 ( -0.26)
Test: [  1/  1]	Loss 0.690 (0.690)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.690 (0.690)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.26 ( -0.26)
Overall Timing[ 26/  1]	epoch_time 0.0376 (0.0391)	validation_time 0.0004 (0.0006)	train_time 0.0372 (0.0384)
record: (train_acc, test_acc) (0.6626000228524208, 0.6240000128746033)
last accs (train_acc, test_acc) (0.5000000117719173, 0.5)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.33it/s] 19%|#9        | 5/26 [00:00<00:00, 23.93it/s] 31%|###       | 8/26 [00:00<00:00, 24.41it/s] 42%|####2     | 11/26 [00:00<00:00, 20.73it/s] 54%|#####3    | 14/26 [00:00<00:00, 18.75it/s] 62%|######1   | 16/26 [00:00<00:00, 18.17it/s] 69%|######9   | 18/26 [00:00<00:00, 17.49it/s] 77%|#######6  | 20/26 [00:01<00:00, 17.36it/s] 85%|########4 | 22/26 [00:01<00:00, 16.85it/s] 92%|#########2| 24/26 [00:01<00:00, 16.84it/s]100%|##########| 26/26 [00:01<00:00, 16.87it/s]100%|##########| 26/26 [00:01<00:00, 17.31it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 702 400
penalty weights 10000.0
args.step pgd_anneal_iters 702 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 703 400
penalty weights 10000.0
args.step pgd_anneal_iters 703 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 704 400
penalty weights 10000.0
args.step pgd_anneal_iters 704 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 705 400
penalty weights 10000.0
args.step pgd_anneal_iters 705 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 706 400
penalty weights 10000.0
args.step pgd_anneal_iters 706 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 707 400
penalty weights 10000.0
args.step pgd_anneal_iters 707 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 708 400
penalty weights 10000.0
args.step pgd_anneal_iters 708 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 709 400
penalty weights 10000.0
args.step pgd_anneal_iters 709 600
dim_v 512
rho, theta 497 tensor(-0.0001, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 710 400
penalty weights 10000.0
args.step pgd_anneal_iters 710 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 711 400
penalty weights 10000.0
args.step pgd_anneal_iters 711 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 712 400
penalty weights 10000.0
args.step pgd_anneal_iters 712 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 713 400
penalty weights 10000.0
args.step pgd_anneal_iters 713 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 714 400
penalty weights 10000.0
args.step pgd_anneal_iters 714 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 715 400
penalty weights 10000.0
args.step pgd_anneal_iters 715 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 716 400
penalty weights 10000.0
args.step pgd_anneal_iters 716 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 717 400
penalty weights 10000.0
args.step pgd_anneal_iters 717 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 718 400
penalty weights 10000.0
args.step pgd_anneal_iters 718 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 719 400
penalty weights 10000.0
args.step pgd_anneal_iters 719 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 720 400
penalty weights 10000.0
args.step pgd_anneal_iters 720 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 721 400
penalty weights 10000.0
args.step pgd_anneal_iters 721 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 722 400
penalty weights 10000.0
args.step pgd_anneal_iters 722 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 723 400
penalty weights 10000.0
args.step pgd_anneal_iters 723 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 724 400
penalty weights 10000.0
args.step pgd_anneal_iters 724 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 725 400
penalty weights 10000.0
args.step pgd_anneal_iters 725 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 726 400
penalty weights 10000.0
args.step pgd_anneal_iters 726 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 727 400
penalty weights 10000.0
args.step pgd_anneal_iters 727 600
dim_v 512
retunring when rho == dim_v - 1
Epoch: [27][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.15 (  0.15)	train_acc   0.46 (  0.50)	train_minacc   0.49 (  0.50)	train_majacc   0.45 (  0.50)	train_corr   0.00 (  0.00)	l1 5.0123 (5.0077)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.85it/s] 27%|##6       | 7/26 [00:00<00:00, 28.83it/s]                                               27%|##6       | 7/26 [00:00<00:00, 28.83it/s] 46%|####6     | 12/26 [00:00<00:00, 36.09it/s] 65%|######5   | 17/26 [00:00<00:00, 38.57it/s]                                                65%|######5   | 17/26 [00:00<00:00, 38.57it/s] 88%|########8 | 23/26 [00:00<00:00, 44.49it/s]100%|##########| 26/26 [00:00<00:00, 35.21it/s]
Test: [   0/  26]	Loss 0.691 (0.691)	test_acc   0.49 (  0.49)	test_minacc   0.51 (  0.51)	test_majacc   0.48 (  0.48)	Loss_d 0.691 (0.691)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.48 (  0.48)	test_corr_d   0.24 (  0.24)
Test: [  10/  26]	Loss 0.691 (0.690)	test_acc   0.48 (  0.50)	test_minacc   0.39 (  0.51)	test_majacc   0.50 (  0.50)	Loss_d 0.691 (0.690)	test_acc_d   0.48 (  0.50)	test_minacc_d   0.39 (  0.51)	test_majacc_d   0.50 (  0.50)	test_corr_d   0.28 (  0.24)
Test: [  20/  26]	Loss 0.688 (0.690)	test_acc   0.52 (  0.50)	test_minacc   0.55 (  0.50)	test_majacc   0.52 (  0.50)	Loss_d 0.688 (0.690)	test_acc_d   0.52 (  0.50)	test_minacc_d   0.55 (  0.50)	test_majacc_d   0.52 (  0.50)	test_corr_d   0.31 (  0.25)
Test: [  26/  26]	Loss 0.695 (0.690)	test_acc   0.46 (  0.50)	test_minacc   0.49 (  0.50)	test_majacc   0.45 (  0.50)	Loss_d 0.695 (0.690)	test_acc_d   0.46 (  0.50)	test_minacc_d   0.49 (  0.50)	test_majacc_d   0.45 (  0.50)	test_corr_d   0.12 (  0.25)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 64.65it/s]
Test: [  0/  1]	Loss 0.691 (0.691)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.691 (0.691)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.26 ( -0.26)
Test: [  1/  1]	Loss 0.691 (0.691)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.691 (0.691)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.26 ( -0.26)
Overall Timing[ 27/  1]	epoch_time 0.0473 (0.0394)	validation_time 0.0003 (0.0006)	train_time 0.0470 (0.0387)
record: (train_acc, test_acc) (0.6626000228524208, 0.6240000128746033)
last accs (train_acc, test_acc) (0.5000000117719173, 0.5)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.01it/s] 12%|#1        | 3/26 [00:00<00:02, 10.21it/s] 19%|#9        | 5/26 [00:00<00:01, 12.89it/s] 27%|##6       | 7/26 [00:00<00:01, 14.43it/s] 35%|###4      | 9/26 [00:00<00:01, 15.19it/s] 42%|####2     | 11/26 [00:00<00:00, 15.73it/s] 50%|#####     | 13/26 [00:00<00:00, 16.10it/s] 58%|#####7    | 15/26 [00:01<00:00, 16.31it/s] 65%|######5   | 17/26 [00:01<00:00, 16.46it/s] 73%|#######3  | 19/26 [00:01<00:00, 16.52it/s] 81%|########  | 21/26 [00:01<00:00, 16.71it/s] 88%|########8 | 23/26 [00:01<00:00, 16.76it/s] 96%|#########6| 25/26 [00:01<00:00, 16.76it/s]100%|##########| 26/26 [00:01<00:00, 14.86it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 728 400
penalty weights 10000.0
args.step pgd_anneal_iters 728 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 729 400
penalty weights 10000.0
args.step pgd_anneal_iters 729 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 730 400
penalty weights 10000.0
args.step pgd_anneal_iters 730 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 731 400
penalty weights 10000.0
args.step pgd_anneal_iters 731 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 732 400
penalty weights 10000.0
args.step pgd_anneal_iters 732 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 733 400
penalty weights 10000.0
args.step pgd_anneal_iters 733 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 734 400
penalty weights 10000.0
args.step pgd_anneal_iters 734 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 735 400
penalty weights 10000.0
args.step pgd_anneal_iters 735 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 736 400
penalty weights 10000.0
args.step pgd_anneal_iters 736 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 737 400
penalty weights 10000.0
args.step pgd_anneal_iters 737 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 738 400
penalty weights 10000.0
args.step pgd_anneal_iters 738 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 739 400
penalty weights 10000.0
args.step pgd_anneal_iters 739 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 740 400
penalty weights 10000.0
args.step pgd_anneal_iters 740 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 741 400
penalty weights 10000.0
args.step pgd_anneal_iters 741 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 742 400
penalty weights 10000.0
args.step pgd_anneal_iters 742 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 743 400
penalty weights 10000.0
args.step pgd_anneal_iters 743 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 744 400
penalty weights 10000.0
args.step pgd_anneal_iters 744 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 745 400
penalty weights 10000.0
args.step pgd_anneal_iters 745 600
dim_v 512
rho, theta 510 tensor(-3.0320e-05, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 746 400
penalty weights 10000.0
args.step pgd_anneal_iters 746 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 747 400
penalty weights 10000.0
args.step pgd_anneal_iters 747 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 748 400
penalty weights 10000.0
args.step pgd_anneal_iters 748 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 749 400
penalty weights 10000.0
args.step pgd_anneal_iters 749 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 750 400
penalty weights 10000.0
args.step pgd_anneal_iters 750 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 751 400
penalty weights 10000.0
args.step pgd_anneal_iters 751 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 752 400
penalty weights 10000.0
args.step pgd_anneal_iters 752 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 753 400
penalty weights 10000.0
args.step pgd_anneal_iters 753 600
dim_v 512
retunring when rho == dim_v - 1
Epoch: [28][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.15 (  0.15)	train_acc   0.46 (  0.50)	train_minacc   0.49 (  0.50)	train_majacc   0.45 (  0.50)	train_corr   0.00 (  0.00)	l1 5.0104 (5.0121)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.24it/s] 15%|#5        | 4/26 [00:00<00:01, 18.59it/s] 38%|###8      | 10/26 [00:00<00:00, 35.32it/s]                                                38%|###8      | 10/26 [00:00<00:00, 35.32it/s] 62%|######1   | 16/26 [00:00<00:00, 40.00it/s]                                                62%|######1   | 16/26 [00:00<00:00, 40.00it/s] 85%|########4 | 22/26 [00:00<00:00, 45.77it/s]100%|##########| 26/26 [00:00<00:00, 36.43it/s]
Test: [   0/  26]	Loss 0.692 (0.692)	test_acc   0.49 (  0.49)	test_minacc   0.51 (  0.51)	test_majacc   0.48 (  0.48)	Loss_d 0.692 (0.692)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.48 (  0.48)	test_corr_d   0.24 (  0.24)
Test: [  10/  26]	Loss 0.692 (0.690)	test_acc   0.48 (  0.50)	test_minacc   0.39 (  0.51)	test_majacc   0.50 (  0.50)	Loss_d 0.692 (0.690)	test_acc_d   0.48 (  0.50)	test_minacc_d   0.39 (  0.51)	test_majacc_d   0.50 (  0.50)	test_corr_d   0.27 (  0.24)
Test: [  20/  26]	Loss 0.689 (0.690)	test_acc   0.52 (  0.50)	test_minacc   0.55 (  0.50)	test_majacc   0.52 (  0.50)	Loss_d 0.689 (0.690)	test_acc_d   0.52 (  0.50)	test_minacc_d   0.55 (  0.50)	test_majacc_d   0.52 (  0.50)	test_corr_d   0.31 (  0.25)
Test: [  26/  26]	Loss 0.695 (0.691)	test_acc   0.46 (  0.50)	test_minacc   0.49 (  0.50)	test_majacc   0.45 (  0.50)	Loss_d 0.695 (0.691)	test_acc_d   0.46 (  0.50)	test_minacc_d   0.49 (  0.50)	test_majacc_d   0.45 (  0.50)	test_corr_d   0.12 (  0.25)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.91it/s]
Test: [  0/  1]	Loss 0.691 (0.691)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.691 (0.691)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.25 ( -0.25)
Test: [  1/  1]	Loss 0.691 (0.691)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.691 (0.691)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.25 ( -0.25)
Overall Timing[ 28/  1]	epoch_time 0.0513 (0.0398)	validation_time 0.0006 (0.0006)	train_time 0.0506 (0.0391)
record: (train_acc, test_acc) (0.6626000228524208, 0.6240000128746033)
last accs (train_acc, test_acc) (0.5000000117719173, 0.5)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:05,  4.96it/s] 12%|#1        | 3/26 [00:00<00:02, 10.13it/s] 19%|#9        | 5/26 [00:00<00:01, 12.68it/s] 27%|##6       | 7/26 [00:00<00:01, 14.27it/s] 35%|###4      | 9/26 [00:00<00:01, 15.19it/s] 42%|####2     | 11/26 [00:00<00:00, 15.80it/s] 50%|#####     | 13/26 [00:00<00:00, 16.24it/s] 58%|#####7    | 15/26 [00:01<00:00, 16.53it/s] 65%|######5   | 17/26 [00:01<00:00, 16.61it/s] 73%|#######3  | 19/26 [00:01<00:00, 16.72it/s] 81%|########  | 21/26 [00:01<00:00, 16.83it/s] 88%|########8 | 23/26 [00:01<00:00, 17.05it/s] 96%|#########6| 25/26 [00:01<00:00, 17.13it/s]100%|##########| 26/26 [00:01<00:00, 15.01it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 754 400
penalty weights 10000.0
args.step pgd_anneal_iters 754 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 755 400
penalty weights 10000.0
args.step pgd_anneal_iters 755 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 756 400
penalty weights 10000.0
args.step pgd_anneal_iters 756 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 757 400
penalty weights 10000.0
args.step pgd_anneal_iters 757 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 758 400
penalty weights 10000.0
args.step pgd_anneal_iters 758 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 759 400
penalty weights 10000.0
args.step pgd_anneal_iters 759 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 760 400
penalty weights 10000.0
args.step pgd_anneal_iters 760 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 761 400
penalty weights 10000.0
args.step pgd_anneal_iters 761 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 762 400
penalty weights 10000.0
args.step pgd_anneal_iters 762 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 763 400
penalty weights 10000.0
args.step pgd_anneal_iters 763 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 764 400
penalty weights 10000.0
args.step pgd_anneal_iters 764 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 765 400
penalty weights 10000.0
args.step pgd_anneal_iters 765 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 766 400
penalty weights 10000.0
args.step pgd_anneal_iters 766 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 767 400
penalty weights 10000.0
args.step pgd_anneal_iters 767 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 768 400
penalty weights 10000.0
args.step pgd_anneal_iters 768 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 769 400
penalty weights 10000.0
args.step pgd_anneal_iters 769 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 770 400
penalty weights 10000.0
args.step pgd_anneal_iters 770 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 771 400
penalty weights 10000.0
args.step pgd_anneal_iters 771 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 772 400
penalty weights 10000.0
args.step pgd_anneal_iters 772 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 773 400
penalty weights 10000.0
args.step pgd_anneal_iters 773 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 774 400
penalty weights 10000.0
args.step pgd_anneal_iters 774 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 775 400
penalty weights 10000.0
args.step pgd_anneal_iters 775 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 776 400
penalty weights 10000.0
args.step pgd_anneal_iters 776 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 777 400
penalty weights 10000.0
args.step pgd_anneal_iters 777 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 778 400
penalty weights 10000.0
args.step pgd_anneal_iters 778 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 779 400
penalty weights 10000.0
args.step pgd_anneal_iters 779 600
dim_v 512
rho, theta 510 tensor(-4.7436e-05, device='cuda:0')
Epoch: [29][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.14 (  0.14)	train_acc   0.46 (  0.50)	train_minacc   0.49 (  0.50)	train_majacc   0.45 (  0.50)	train_corr   0.00 (  0.00)	l1 5.0114 (5.0086)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:00, 27.75it/s] 35%|###4      | 9/26 [00:00<00:00, 42.00it/s]                                               35%|###4      | 9/26 [00:00<00:00, 42.00it/s] 58%|#####7    | 15/26 [00:00<00:00, 46.98it/s]                                                58%|#####7    | 15/26 [00:00<00:00, 46.98it/s] 81%|########  | 21/26 [00:00<00:00, 49.58it/s]100%|##########| 26/26 [00:00<00:00, 43.18it/s]
Test: [   0/  26]	Loss 0.692 (0.692)	test_acc   0.49 (  0.49)	test_minacc   0.51 (  0.51)	test_majacc   0.48 (  0.48)	Loss_d 0.692 (0.692)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.48 (  0.48)	test_corr_d   0.24 (  0.24)
Test: [  10/  26]	Loss 0.692 (0.691)	test_acc   0.48 (  0.50)	test_minacc   0.39 (  0.51)	test_majacc   0.50 (  0.50)	Loss_d 0.692 (0.691)	test_acc_d   0.48 (  0.50)	test_minacc_d   0.39 (  0.51)	test_majacc_d   0.50 (  0.50)	test_corr_d   0.27 (  0.24)
Test: [  20/  26]	Loss 0.689 (0.691)	test_acc   0.52 (  0.50)	test_minacc   0.55 (  0.50)	test_majacc   0.52 (  0.50)	Loss_d 0.689 (0.691)	test_acc_d   0.52 (  0.50)	test_minacc_d   0.55 (  0.50)	test_majacc_d   0.52 (  0.50)	test_corr_d   0.31 (  0.25)
Test: [  26/  26]	Loss 0.695 (0.691)	test_acc   0.46 (  0.50)	test_minacc   0.49 (  0.50)	test_majacc   0.45 (  0.50)	Loss_d 0.695 (0.691)	test_acc_d   0.46 (  0.50)	test_minacc_d   0.49 (  0.50)	test_majacc_d   0.45 (  0.50)	test_corr_d   0.12 (  0.24)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.25it/s]
Test: [  0/  1]	Loss 0.691 (0.691)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.691 (0.691)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.25 ( -0.25)
Test: [  1/  1]	Loss 0.691 (0.691)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.691 (0.691)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.25 ( -0.25)
Overall Timing[ 29/  1]	epoch_time 0.0488 (0.0401)	validation_time 0.0004 (0.0006)	train_time 0.0484 (0.0394)
record: (train_acc, test_acc) (0.6626000228524208, 0.6240000128746033)
last accs (train_acc, test_acc) (0.5000000117719173, 0.5)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.02it/s] 12%|#1        | 3/26 [00:00<00:02, 10.06it/s] 19%|#9        | 5/26 [00:00<00:01, 12.67it/s] 27%|##6       | 7/26 [00:00<00:01, 14.30it/s] 35%|###4      | 9/26 [00:00<00:01, 15.04it/s] 42%|####2     | 11/26 [00:00<00:00, 15.44it/s] 50%|#####     | 13/26 [00:00<00:00, 15.94it/s] 58%|#####7    | 15/26 [00:01<00:00, 16.33it/s] 65%|######5   | 17/26 [00:01<00:00, 16.56it/s] 73%|#######3  | 19/26 [00:01<00:00, 16.79it/s] 81%|########  | 21/26 [00:01<00:00, 16.69it/s] 88%|########8 | 23/26 [00:01<00:00, 16.78it/s] 96%|#########6| 25/26 [00:01<00:00, 16.84it/s]100%|##########| 26/26 [00:01<00:00, 14.82it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 780 400
penalty weights 10000.0
args.step pgd_anneal_iters 780 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 781 400
penalty weights 10000.0
args.step pgd_anneal_iters 781 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 782 400
penalty weights 10000.0
args.step pgd_anneal_iters 782 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 783 400
penalty weights 10000.0
args.step pgd_anneal_iters 783 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 784 400
penalty weights 10000.0
args.step pgd_anneal_iters 784 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 785 400
penalty weights 10000.0
args.step pgd_anneal_iters 785 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 786 400
penalty weights 10000.0
args.step pgd_anneal_iters 786 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 787 400
penalty weights 10000.0
args.step pgd_anneal_iters 787 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 788 400
penalty weights 10000.0
args.step pgd_anneal_iters 788 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 789 400
penalty weights 10000.0
args.step pgd_anneal_iters 789 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 790 400
penalty weights 10000.0
args.step pgd_anneal_iters 790 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 791 400
penalty weights 10000.0
args.step pgd_anneal_iters 791 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 792 400
penalty weights 10000.0
args.step pgd_anneal_iters 792 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 793 400
penalty weights 10000.0
args.step pgd_anneal_iters 793 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 794 400
penalty weights 10000.0
args.step pgd_anneal_iters 794 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 795 400
penalty weights 10000.0
args.step pgd_anneal_iters 795 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 796 400
penalty weights 10000.0
args.step pgd_anneal_iters 796 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 797 400
penalty weights 10000.0
args.step pgd_anneal_iters 797 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 798 400
penalty weights 10000.0
args.step pgd_anneal_iters 798 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 799 400
penalty weights 10000.0
args.step pgd_anneal_iters 799 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 800 400
penalty weights 10000.0
args.step pgd_anneal_iters 800 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 801 400
penalty weights 10000.0
args.step pgd_anneal_iters 801 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 802 400
penalty weights 10000.0
args.step pgd_anneal_iters 802 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 803 400
penalty weights 10000.0
args.step pgd_anneal_iters 803 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 804 400
penalty weights 10000.0
args.step pgd_anneal_iters 804 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 805 400
penalty weights 10000.0
args.step pgd_anneal_iters 805 600
dim_v 512
retunring when rho == dim_v - 1
Epoch: [30][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.14 (  0.14)	train_acc   0.46 (  0.50)	train_minacc   0.49 (  0.50)	train_majacc   0.45 (  0.50)	train_corr   0.00 (  0.00)	l1 5.0104 (5.0101)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.63it/s] 27%|##6       | 7/26 [00:00<00:00, 31.53it/s]                                               27%|##6       | 7/26 [00:00<00:00, 31.53it/s] 50%|#####     | 13/26 [00:00<00:00, 38.67it/s] 73%|#######3  | 19/26 [00:00<00:00, 45.33it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 45.33it/s] 96%|#########6| 25/26 [00:00<00:00, 45.93it/s]100%|##########| 26/26 [00:00<00:00, 37.61it/s]
Test: [   0/  26]	Loss 0.692 (0.692)	test_acc   0.49 (  0.49)	test_minacc   0.51 (  0.51)	test_majacc   0.48 (  0.48)	Loss_d 0.692 (0.692)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.48 (  0.48)	test_corr_d   0.24 (  0.24)
Test: [  10/  26]	Loss 0.692 (0.691)	test_acc   0.48 (  0.50)	test_minacc   0.39 (  0.51)	test_majacc   0.50 (  0.50)	Loss_d 0.692 (0.691)	test_acc_d   0.48 (  0.50)	test_minacc_d   0.39 (  0.51)	test_majacc_d   0.50 (  0.50)	test_corr_d   0.27 (  0.24)
Test: [  20/  26]	Loss 0.690 (0.691)	test_acc   0.52 (  0.50)	test_minacc   0.55 (  0.50)	test_majacc   0.52 (  0.50)	Loss_d 0.690 (0.691)	test_acc_d   0.52 (  0.50)	test_minacc_d   0.55 (  0.50)	test_majacc_d   0.52 (  0.50)	test_corr_d   0.30 (  0.25)
Test: [  26/  26]	Loss 0.695 (0.691)	test_acc   0.46 (  0.50)	test_minacc   0.49 (  0.50)	test_majacc   0.45 (  0.50)	Loss_d 0.695 (0.691)	test_acc_d   0.46 (  0.50)	test_minacc_d   0.49 (  0.50)	test_majacc_d   0.45 (  0.50)	test_corr_d   0.12 (  0.24)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.61it/s]
Test: [  0/  1]	Loss 0.692 (0.692)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.692 (0.692)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.25 ( -0.25)
Test: [  1/  1]	Loss 0.692 (0.692)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.692 (0.692)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.25 ( -0.25)
Overall Timing[ 30/  1]	epoch_time 0.0510 (0.0405)	validation_time 0.0006 (0.0006)	train_time 0.0504 (0.0398)
record: (train_acc, test_acc) (0.6626000228524208, 0.6240000128746033)
last accs (train_acc, test_acc) (0.5000000117719173, 0.5)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.62it/s] 12%|#1        | 3/26 [00:00<00:01, 11.77it/s] 19%|#9        | 5/26 [00:00<00:01, 14.05it/s] 27%|##6       | 7/26 [00:00<00:01, 15.35it/s] 35%|###4      | 9/26 [00:00<00:01, 15.86it/s] 42%|####2     | 11/26 [00:00<00:00, 16.00it/s] 50%|#####     | 13/26 [00:00<00:00, 16.44it/s] 58%|#####7    | 15/26 [00:00<00:00, 16.68it/s] 65%|######5   | 17/26 [00:01<00:00, 16.83it/s] 73%|#######3  | 19/26 [00:01<00:00, 16.85it/s] 81%|########  | 21/26 [00:01<00:00, 16.80it/s] 88%|########8 | 23/26 [00:01<00:00, 16.98it/s] 96%|#########6| 25/26 [00:01<00:00, 16.87it/s]100%|##########| 26/26 [00:01<00:00, 15.46it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 806 400
penalty weights 10000.0
args.step pgd_anneal_iters 806 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 807 400
penalty weights 10000.0
args.step pgd_anneal_iters 807 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 808 400
penalty weights 10000.0
args.step pgd_anneal_iters 808 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 809 400
penalty weights 10000.0
args.step pgd_anneal_iters 809 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 810 400
penalty weights 10000.0
args.step pgd_anneal_iters 810 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 811 400
penalty weights 10000.0
args.step pgd_anneal_iters 811 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 812 400
penalty weights 10000.0
args.step pgd_anneal_iters 812 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 813 400
penalty weights 10000.0
args.step pgd_anneal_iters 813 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 814 400
penalty weights 10000.0
args.step pgd_anneal_iters 814 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 815 400
penalty weights 10000.0
args.step pgd_anneal_iters 815 600
dim_v 512
rho, theta 510 tensor(-5.7352e-05, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 816 400
penalty weights 10000.0
args.step pgd_anneal_iters 816 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 817 400
penalty weights 10000.0
args.step pgd_anneal_iters 817 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 818 400
penalty weights 10000.0
args.step pgd_anneal_iters 818 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 819 400
penalty weights 10000.0
args.step pgd_anneal_iters 819 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 820 400
penalty weights 10000.0
args.step pgd_anneal_iters 820 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 821 400
penalty weights 10000.0
args.step pgd_anneal_iters 821 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 822 400
penalty weights 10000.0
args.step pgd_anneal_iters 822 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 823 400
penalty weights 10000.0
args.step pgd_anneal_iters 823 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 824 400
penalty weights 10000.0
args.step pgd_anneal_iters 824 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 825 400
penalty weights 10000.0
args.step pgd_anneal_iters 825 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 826 400
penalty weights 10000.0
args.step pgd_anneal_iters 826 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 827 400
penalty weights 10000.0
args.step pgd_anneal_iters 827 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 828 400
penalty weights 10000.0
args.step pgd_anneal_iters 828 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 829 400
penalty weights 10000.0
args.step pgd_anneal_iters 829 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 830 400
penalty weights 10000.0
args.step pgd_anneal_iters 830 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 831 400
penalty weights 10000.0
args.step pgd_anneal_iters 831 600
dim_v 512
retunring when rho == dim_v - 1
Epoch: [31][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.14 (  0.14)	train_acc   0.46 (  0.50)	train_minacc   0.49 (  0.50)	train_majacc   0.45 (  0.50)	train_corr   0.00 (  0.00)	l1 5.0169 (5.0138)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.59it/s] 27%|##6       | 7/26 [00:00<00:00, 36.12it/s]                                               27%|##6       | 7/26 [00:00<00:00, 36.12it/s] 50%|#####     | 13/26 [00:00<00:00, 41.61it/s] 73%|#######3  | 19/26 [00:00<00:00, 47.10it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 47.10it/s] 96%|#########6| 25/26 [00:00<00:00, 47.83it/s]100%|##########| 26/26 [00:00<00:00, 39.82it/s]
Test: [   0/  26]	Loss 0.692 (0.692)	test_acc   0.49 (  0.49)	test_minacc   0.51 (  0.51)	test_majacc   0.48 (  0.48)	Loss_d 0.692 (0.692)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.48 (  0.48)	test_corr_d   0.23 (  0.23)
Test: [  10/  26]	Loss 0.692 (0.691)	test_acc   0.48 (  0.50)	test_minacc   0.39 (  0.51)	test_majacc   0.50 (  0.50)	Loss_d 0.692 (0.691)	test_acc_d   0.48 (  0.50)	test_minacc_d   0.39 (  0.51)	test_majacc_d   0.50 (  0.50)	test_corr_d   0.27 (  0.24)
Test: [  20/  26]	Loss 0.690 (0.691)	test_acc   0.52 (  0.50)	test_minacc   0.55 (  0.50)	test_majacc   0.52 (  0.50)	Loss_d 0.690 (0.691)	test_acc_d   0.52 (  0.50)	test_minacc_d   0.55 (  0.50)	test_majacc_d   0.52 (  0.50)	test_corr_d   0.30 (  0.24)
Test: [  26/  26]	Loss 0.695 (0.691)	test_acc   0.46 (  0.50)	test_minacc   0.49 (  0.50)	test_majacc   0.45 (  0.50)	Loss_d 0.695 (0.691)	test_acc_d   0.46 (  0.50)	test_minacc_d   0.49 (  0.50)	test_majacc_d   0.45 (  0.50)	test_corr_d   0.12 (  0.24)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.97it/s]
Test: [  0/  1]	Loss 0.692 (0.692)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.692 (0.692)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.25 ( -0.25)
Test: [  1/  1]	Loss 0.692 (0.692)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.692 (0.692)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.25 ( -0.25)
Overall Timing[ 31/  1]	epoch_time 0.0501 (0.0408)	validation_time 0.0003 (0.0006)	train_time 0.0497 (0.0401)
record: (train_acc, test_acc) (0.6626000228524208, 0.6240000128746033)
last accs (train_acc, test_acc) (0.5000000117719173, 0.5)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.34it/s] 12%|#1        | 3/26 [00:00<00:02, 10.54it/s] 19%|#9        | 5/26 [00:00<00:01, 13.05it/s] 27%|##6       | 7/26 [00:00<00:01, 14.36it/s] 35%|###4      | 9/26 [00:00<00:01, 15.30it/s] 42%|####2     | 11/26 [00:00<00:00, 15.95it/s] 50%|#####     | 13/26 [00:00<00:00, 16.25it/s] 58%|#####7    | 15/26 [00:01<00:00, 16.46it/s] 65%|######5   | 17/26 [00:01<00:00, 16.52it/s] 73%|#######3  | 19/26 [00:01<00:00, 16.55it/s] 81%|########  | 21/26 [00:01<00:00, 16.58it/s] 88%|########8 | 23/26 [00:01<00:00, 16.78it/s] 96%|#########6| 25/26 [00:01<00:00, 16.80it/s]100%|##########| 26/26 [00:01<00:00, 14.93it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 832 400
penalty weights 10000.0
args.step pgd_anneal_iters 832 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 833 400
penalty weights 10000.0
args.step pgd_anneal_iters 833 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 834 400
penalty weights 10000.0
args.step pgd_anneal_iters 834 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 835 400
penalty weights 10000.0
args.step pgd_anneal_iters 835 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 836 400
penalty weights 10000.0
args.step pgd_anneal_iters 836 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 837 400
penalty weights 10000.0
args.step pgd_anneal_iters 837 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 838 400
penalty weights 10000.0
args.step pgd_anneal_iters 838 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 839 400
penalty weights 10000.0
args.step pgd_anneal_iters 839 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 840 400
penalty weights 10000.0
args.step pgd_anneal_iters 840 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 841 400
penalty weights 10000.0
args.step pgd_anneal_iters 841 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 842 400
penalty weights 10000.0
args.step pgd_anneal_iters 842 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 843 400
penalty weights 10000.0
args.step pgd_anneal_iters 843 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 844 400
penalty weights 10000.0
args.step pgd_anneal_iters 844 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 845 400
penalty weights 10000.0
args.step pgd_anneal_iters 845 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 846 400
penalty weights 10000.0
args.step pgd_anneal_iters 846 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 847 400
penalty weights 10000.0
args.step pgd_anneal_iters 847 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 848 400
penalty weights 10000.0
args.step pgd_anneal_iters 848 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 849 400
penalty weights 10000.0
args.step pgd_anneal_iters 849 600
dim_v 512
rho, theta 510 tensor(-5.9675e-05, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 850 400
penalty weights 10000.0
args.step pgd_anneal_iters 850 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 851 400
penalty weights 10000.0
args.step pgd_anneal_iters 851 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 852 400
penalty weights 10000.0
args.step pgd_anneal_iters 852 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 853 400
penalty weights 10000.0
args.step pgd_anneal_iters 853 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 854 400
penalty weights 10000.0
args.step pgd_anneal_iters 854 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 855 400
penalty weights 10000.0
args.step pgd_anneal_iters 855 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 856 400
penalty weights 10000.0
args.step pgd_anneal_iters 856 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 857 400
penalty weights 10000.0
args.step pgd_anneal_iters 857 600
dim_v 512
retunring when rho == dim_v - 1
Epoch: [32][  26/  26]	Loss 0.000 (0.000)	train_nll   0.70 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.14 (  0.14)	train_acc   0.46 (  0.50)	train_minacc   0.49 (  0.50)	train_majacc   0.45 (  0.50)	train_corr   0.00 (  0.00)	l1 5.0215 (5.0193)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.27it/s] 27%|##6       | 7/26 [00:00<00:00, 37.06it/s]                                               27%|##6       | 7/26 [00:00<00:00, 37.06it/s] 50%|#####     | 13/26 [00:00<00:00, 41.48it/s] 73%|#######3  | 19/26 [00:00<00:00, 47.57it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 47.57it/s] 96%|#########6| 25/26 [00:00<00:00, 47.85it/s]100%|##########| 26/26 [00:00<00:00, 40.71it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.49 (  0.49)	test_minacc   0.51 (  0.51)	test_majacc   0.48 (  0.48)	Loss_d 0.693 (0.693)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.48 (  0.48)	test_corr_d   0.23 (  0.23)
Test: [  10/  26]	Loss 0.693 (0.691)	test_acc   0.48 (  0.50)	test_minacc   0.39 (  0.51)	test_majacc   0.50 (  0.50)	Loss_d 0.693 (0.691)	test_acc_d   0.48 (  0.50)	test_minacc_d   0.39 (  0.51)	test_majacc_d   0.50 (  0.50)	test_corr_d   0.27 (  0.24)
Test: [  20/  26]	Loss 0.690 (0.692)	test_acc   0.52 (  0.50)	test_minacc   0.55 (  0.50)	test_majacc   0.52 (  0.50)	Loss_d 0.690 (0.692)	test_acc_d   0.52 (  0.50)	test_minacc_d   0.55 (  0.50)	test_majacc_d   0.52 (  0.50)	test_corr_d   0.30 (  0.24)
Test: [  26/  26]	Loss 0.695 (0.692)	test_acc   0.46 (  0.50)	test_minacc   0.49 (  0.50)	test_majacc   0.45 (  0.50)	Loss_d 0.695 (0.692)	test_acc_d   0.46 (  0.50)	test_minacc_d   0.49 (  0.50)	test_majacc_d   0.45 (  0.50)	test_corr_d   0.12 (  0.24)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.78it/s]
Test: [  0/  1]	Loss 0.692 (0.692)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.692 (0.692)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.25 ( -0.25)
Test: [  1/  1]	Loss 0.692 (0.692)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.692 (0.692)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.25 ( -0.25)
Overall Timing[ 32/  1]	epoch_time 0.0511 (0.0411)	validation_time 0.0004 (0.0006)	train_time 0.0507 (0.0404)
record: (train_acc, test_acc) (0.6626000228524208, 0.6240000128746033)
last accs (train_acc, test_acc) (0.5000000117719173, 0.5)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.98it/s] 12%|#1        | 3/26 [00:00<00:02, 11.25it/s] 19%|#9        | 5/26 [00:00<00:01, 13.59it/s] 27%|##6       | 7/26 [00:00<00:01, 14.99it/s] 35%|###4      | 9/26 [00:00<00:01, 15.68it/s] 42%|####2     | 11/26 [00:00<00:00, 16.20it/s] 50%|#####     | 13/26 [00:00<00:00, 16.43it/s] 58%|#####7    | 15/26 [00:00<00:00, 16.63it/s] 65%|######5   | 17/26 [00:01<00:00, 16.69it/s] 73%|#######3  | 19/26 [00:01<00:00, 16.86it/s] 81%|########  | 21/26 [00:01<00:00, 16.99it/s] 88%|########8 | 23/26 [00:01<00:00, 17.10it/s] 96%|#########6| 25/26 [00:01<00:00, 17.11it/s]100%|##########| 26/26 [00:01<00:00, 15.27it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 858 400
penalty weights 10000.0
args.step pgd_anneal_iters 858 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 859 400
penalty weights 10000.0
args.step pgd_anneal_iters 859 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 860 400
penalty weights 10000.0
args.step pgd_anneal_iters 860 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 861 400
penalty weights 10000.0
args.step pgd_anneal_iters 861 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 862 400
penalty weights 10000.0
args.step pgd_anneal_iters 862 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 863 400
penalty weights 10000.0
args.step pgd_anneal_iters 863 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 864 400
penalty weights 10000.0
args.step pgd_anneal_iters 864 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 865 400
penalty weights 10000.0
args.step pgd_anneal_iters 865 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 866 400
penalty weights 10000.0
args.step pgd_anneal_iters 866 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 867 400
penalty weights 10000.0
args.step pgd_anneal_iters 867 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 868 400
penalty weights 10000.0
args.step pgd_anneal_iters 868 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 869 400
penalty weights 10000.0
args.step pgd_anneal_iters 869 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 870 400
penalty weights 10000.0
args.step pgd_anneal_iters 870 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 871 400
penalty weights 10000.0
args.step pgd_anneal_iters 871 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 872 400
penalty weights 10000.0
args.step pgd_anneal_iters 872 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 873 400
penalty weights 10000.0
args.step pgd_anneal_iters 873 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 874 400
penalty weights 10000.0
args.step pgd_anneal_iters 874 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 875 400
penalty weights 10000.0
args.step pgd_anneal_iters 875 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 876 400
penalty weights 10000.0
args.step pgd_anneal_iters 876 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 877 400
penalty weights 10000.0
args.step pgd_anneal_iters 877 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 878 400
penalty weights 10000.0
args.step pgd_anneal_iters 878 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 879 400
penalty weights 10000.0
args.step pgd_anneal_iters 879 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 880 400
penalty weights 10000.0
args.step pgd_anneal_iters 880 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 881 400
penalty weights 10000.0
args.step pgd_anneal_iters 881 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 882 400
penalty weights 10000.0
args.step pgd_anneal_iters 882 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 883 400
penalty weights 10000.0
args.step pgd_anneal_iters 883 600
dim_v 512
rho, theta 510 tensor(-4.8381e-05, device='cuda:0')
Epoch: [33][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.14 (  0.14)	train_acc   0.46 (  0.50)	train_minacc   0.49 (  0.50)	train_majacc   0.45 (  0.50)	train_corr   0.00 (  0.00)	l1 5.0216 (5.0258)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 14.26it/s] 31%|###       | 8/26 [00:00<00:00, 35.86it/s]                                               31%|###       | 8/26 [00:00<00:00, 35.86it/s] 54%|#####3    | 14/26 [00:00<00:00, 40.90it/s] 77%|#######6  | 20/26 [00:00<00:00, 46.05it/s]                                                77%|#######6  | 20/26 [00:00<00:00, 46.05it/s]100%|##########| 26/26 [00:00<00:00, 39.72it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.49 (  0.49)	test_minacc   0.51 (  0.51)	test_majacc   0.48 (  0.48)	Loss_d 0.693 (0.693)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.48 (  0.48)	test_corr_d   0.23 (  0.23)
Test: [  10/  26]	Loss 0.693 (0.692)	test_acc   0.48 (  0.50)	test_minacc   0.39 (  0.51)	test_majacc   0.50 (  0.50)	Loss_d 0.693 (0.692)	test_acc_d   0.48 (  0.50)	test_minacc_d   0.39 (  0.51)	test_majacc_d   0.50 (  0.50)	test_corr_d   0.27 (  0.24)
Test: [  20/  26]	Loss 0.690 (0.692)	test_acc   0.52 (  0.50)	test_minacc   0.55 (  0.50)	test_majacc   0.52 (  0.50)	Loss_d 0.690 (0.692)	test_acc_d   0.52 (  0.50)	test_minacc_d   0.55 (  0.50)	test_majacc_d   0.52 (  0.50)	test_corr_d   0.30 (  0.24)
Test: [  26/  26]	Loss 0.695 (0.692)	test_acc   0.46 (  0.50)	test_minacc   0.49 (  0.50)	test_majacc   0.45 (  0.50)	Loss_d 0.695 (0.692)	test_acc_d   0.46 (  0.50)	test_minacc_d   0.49 (  0.50)	test_majacc_d   0.45 (  0.50)	test_corr_d   0.12 (  0.24)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.15it/s]
Test: [  0/  1]	Loss 0.692 (0.692)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.692 (0.692)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.25 ( -0.25)
Test: [  1/  1]	Loss 0.692 (0.692)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.692 (0.692)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.25 ( -0.25)
Overall Timing[ 33/  1]	epoch_time 0.0495 (0.0413)	validation_time 0.0004 (0.0006)	train_time 0.0490 (0.0406)
record: (train_acc, test_acc) (0.6626000228524208, 0.6240000128746033)
last accs (train_acc, test_acc) (0.5000000117719173, 0.5)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.50it/s] 12%|#1        | 3/26 [00:00<00:01, 11.59it/s] 19%|#9        | 5/26 [00:00<00:01, 13.79it/s] 27%|##6       | 7/26 [00:00<00:01, 14.97it/s] 35%|###4      | 9/26 [00:00<00:01, 15.65it/s] 42%|####2     | 11/26 [00:00<00:00, 16.01it/s] 50%|#####     | 13/26 [00:00<00:00, 16.30it/s] 58%|#####7    | 15/26 [00:00<00:00, 16.50it/s] 65%|######5   | 17/26 [00:01<00:00, 16.62it/s] 73%|#######3  | 19/26 [00:01<00:00, 16.71it/s] 81%|########  | 21/26 [00:01<00:00, 16.72it/s] 88%|########8 | 23/26 [00:01<00:00, 16.85it/s] 96%|#########6| 25/26 [00:01<00:00, 17.00it/s]100%|##########| 26/26 [00:01<00:00, 15.29it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 884 400
penalty weights 10000.0
args.step pgd_anneal_iters 884 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 885 400
penalty weights 10000.0
args.step pgd_anneal_iters 885 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 886 400
penalty weights 10000.0
args.step pgd_anneal_iters 886 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 887 400
penalty weights 10000.0
args.step pgd_anneal_iters 887 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 888 400
penalty weights 10000.0
args.step pgd_anneal_iters 888 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 889 400
penalty weights 10000.0
args.step pgd_anneal_iters 889 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 890 400
penalty weights 10000.0
args.step pgd_anneal_iters 890 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 891 400
penalty weights 10000.0
args.step pgd_anneal_iters 891 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 892 400
penalty weights 10000.0
args.step pgd_anneal_iters 892 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 893 400
penalty weights 10000.0
args.step pgd_anneal_iters 893 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 894 400
penalty weights 10000.0
args.step pgd_anneal_iters 894 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 895 400
penalty weights 10000.0
args.step pgd_anneal_iters 895 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 896 400
penalty weights 10000.0
args.step pgd_anneal_iters 896 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 897 400
penalty weights 10000.0
args.step pgd_anneal_iters 897 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 898 400
penalty weights 10000.0
args.step pgd_anneal_iters 898 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 899 400
penalty weights 10000.0
args.step pgd_anneal_iters 899 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 900 400
penalty weights 10000.0
args.step pgd_anneal_iters 900 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 901 400
penalty weights 10000.0
args.step pgd_anneal_iters 901 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 902 400
penalty weights 10000.0
args.step pgd_anneal_iters 902 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 903 400
penalty weights 10000.0
args.step pgd_anneal_iters 903 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 904 400
penalty weights 10000.0
args.step pgd_anneal_iters 904 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 905 400
penalty weights 10000.0
args.step pgd_anneal_iters 905 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 906 400
penalty weights 10000.0
args.step pgd_anneal_iters 906 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 907 400
penalty weights 10000.0
args.step pgd_anneal_iters 907 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 908 400
penalty weights 10000.0
args.step pgd_anneal_iters 908 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 909 400
penalty weights 10000.0
args.step pgd_anneal_iters 909 600
dim_v 512
retunring when rho == dim_v - 1
Epoch: [34][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.14 (  0.14)	train_acc   0.46 (  0.50)	train_minacc   0.49 (  0.50)	train_majacc   0.45 (  0.50)	train_corr   0.00 (  0.00)	l1 5.0325 (5.0266)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.67it/s] 27%|##6       | 7/26 [00:00<00:00, 33.76it/s]                                               27%|##6       | 7/26 [00:00<00:00, 33.76it/s] 50%|#####     | 13/26 [00:00<00:00, 40.42it/s] 73%|#######3  | 19/26 [00:00<00:00, 46.47it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 46.47it/s] 96%|#########6| 25/26 [00:00<00:00, 46.99it/s]100%|##########| 26/26 [00:00<00:00, 38.29it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.49 (  0.49)	test_minacc   0.51 (  0.51)	test_majacc   0.48 (  0.48)	Loss_d 0.693 (0.693)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.48 (  0.48)	test_corr_d   0.23 (  0.23)
Test: [  10/  26]	Loss 0.693 (0.692)	test_acc   0.48 (  0.50)	test_minacc   0.39 (  0.51)	test_majacc   0.50 (  0.50)	Loss_d 0.693 (0.692)	test_acc_d   0.48 (  0.50)	test_minacc_d   0.39 (  0.51)	test_majacc_d   0.50 (  0.50)	test_corr_d   0.27 (  0.23)
Test: [  20/  26]	Loss 0.691 (0.692)	test_acc   0.52 (  0.50)	test_minacc   0.55 (  0.50)	test_majacc   0.52 (  0.50)	Loss_d 0.691 (0.692)	test_acc_d   0.52 (  0.50)	test_minacc_d   0.55 (  0.50)	test_majacc_d   0.52 (  0.50)	test_corr_d   0.30 (  0.24)
Test: [  26/  26]	Loss 0.695 (0.692)	test_acc   0.46 (  0.50)	test_minacc   0.49 (  0.50)	test_majacc   0.45 (  0.50)	Loss_d 0.695 (0.692)	test_acc_d   0.46 (  0.50)	test_minacc_d   0.49 (  0.50)	test_majacc_d   0.45 (  0.50)	test_corr_d   0.12 (  0.24)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.55it/s]
Test: [  0/  1]	Loss 0.692 (0.692)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.692 (0.692)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.25 ( -0.25)
Test: [  1/  1]	Loss 0.692 (0.692)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.692 (0.692)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.25 ( -0.25)
Overall Timing[ 34/  1]	epoch_time 0.0498 (0.0416)	validation_time 0.0004 (0.0006)	train_time 0.0494 (0.0409)
record: (train_acc, test_acc) (0.6626000228524208, 0.6240000128746033)
last accs (train_acc, test_acc) (0.5000000117719173, 0.5)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.97it/s] 12%|#1        | 3/26 [00:00<00:01, 12.92it/s] 19%|#9        | 5/26 [00:00<00:01, 14.41it/s] 27%|##6       | 7/26 [00:00<00:01, 15.30it/s] 35%|###4      | 9/26 [00:00<00:01, 15.60it/s] 42%|####2     | 11/26 [00:00<00:00, 15.73it/s] 50%|#####     | 13/26 [00:00<00:00, 16.04it/s] 58%|#####7    | 15/26 [00:00<00:00, 16.26it/s] 65%|######5   | 17/26 [00:01<00:00, 16.41it/s] 73%|#######3  | 19/26 [00:01<00:00, 16.54it/s] 81%|########  | 21/26 [00:01<00:00, 16.49it/s] 88%|########8 | 23/26 [00:01<00:00, 16.70it/s] 96%|#########6| 25/26 [00:01<00:00, 16.84it/s]100%|##########| 26/26 [00:01<00:00, 15.37it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 910 400
penalty weights 10000.0
args.step pgd_anneal_iters 910 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 911 400
penalty weights 10000.0
args.step pgd_anneal_iters 911 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 912 400
penalty weights 10000.0
args.step pgd_anneal_iters 912 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 913 400
penalty weights 10000.0
args.step pgd_anneal_iters 913 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 914 400
penalty weights 10000.0
args.step pgd_anneal_iters 914 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 915 400
penalty weights 10000.0
args.step pgd_anneal_iters 915 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 916 400
penalty weights 10000.0
args.step pgd_anneal_iters 916 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 917 400
penalty weights 10000.0
args.step pgd_anneal_iters 917 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 918 400
penalty weights 10000.0
args.step pgd_anneal_iters 918 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 919 400
penalty weights 10000.0
args.step pgd_anneal_iters 919 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 920 400
penalty weights 10000.0
args.step pgd_anneal_iters 920 600
dim_v 512
rho, theta 510 tensor(-4.4766e-05, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 921 400
penalty weights 10000.0
args.step pgd_anneal_iters 921 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 922 400
penalty weights 10000.0
args.step pgd_anneal_iters 922 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 923 400
penalty weights 10000.0
args.step pgd_anneal_iters 923 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 924 400
penalty weights 10000.0
args.step pgd_anneal_iters 924 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 925 400
penalty weights 10000.0
args.step pgd_anneal_iters 925 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 926 400
penalty weights 10000.0
args.step pgd_anneal_iters 926 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 927 400
penalty weights 10000.0
args.step pgd_anneal_iters 927 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 928 400
penalty weights 10000.0
args.step pgd_anneal_iters 928 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 929 400
penalty weights 10000.0
args.step pgd_anneal_iters 929 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 930 400
penalty weights 10000.0
args.step pgd_anneal_iters 930 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 931 400
penalty weights 10000.0
args.step pgd_anneal_iters 931 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 932 400
penalty weights 10000.0
args.step pgd_anneal_iters 932 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 933 400
penalty weights 10000.0
args.step pgd_anneal_iters 933 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 934 400
penalty weights 10000.0
args.step pgd_anneal_iters 934 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 935 400
penalty weights 10000.0
args.step pgd_anneal_iters 935 600
dim_v 512
retunring when rho == dim_v - 1
Epoch: [35][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.14 (  0.14)	train_acc   0.46 (  0.50)	train_minacc   0.49 (  0.50)	train_majacc   0.45 (  0.50)	train_corr   0.00 (  0.00)	l1 5.0319 (5.0304)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:00, 26.95it/s] 31%|###       | 8/26 [00:00<00:00, 39.55it/s]                                               31%|###       | 8/26 [00:00<00:00, 39.55it/s] 50%|#####     | 13/26 [00:00<00:00, 43.88it/s] 69%|######9   | 18/26 [00:00<00:00, 44.58it/s]                                                69%|######9   | 18/26 [00:00<00:00, 44.58it/s] 92%|#########2| 24/26 [00:00<00:00, 49.39it/s]100%|##########| 26/26 [00:00<00:00, 41.81it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.49 (  0.49)	test_minacc   0.51 (  0.51)	test_majacc   0.48 (  0.48)	Loss_d 0.693 (0.693)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.48 (  0.48)	test_corr_d   0.23 (  0.23)
Test: [  10/  26]	Loss 0.693 (0.692)	test_acc   0.48 (  0.50)	test_minacc   0.39 (  0.51)	test_majacc   0.50 (  0.50)	Loss_d 0.693 (0.692)	test_acc_d   0.48 (  0.50)	test_minacc_d   0.39 (  0.51)	test_majacc_d   0.50 (  0.50)	test_corr_d   0.26 (  0.23)
Test: [  20/  26]	Loss 0.691 (0.692)	test_acc   0.52 (  0.50)	test_minacc   0.55 (  0.50)	test_majacc   0.52 (  0.50)	Loss_d 0.691 (0.692)	test_acc_d   0.52 (  0.50)	test_minacc_d   0.55 (  0.50)	test_majacc_d   0.52 (  0.50)	test_corr_d   0.30 (  0.24)
Test: [  26/  26]	Loss 0.695 (0.692)	test_acc   0.46 (  0.50)	test_minacc   0.49 (  0.50)	test_majacc   0.45 (  0.50)	Loss_d 0.695 (0.692)	test_acc_d   0.46 (  0.50)	test_minacc_d   0.49 (  0.50)	test_majacc_d   0.45 (  0.50)	test_corr_d   0.12 (  0.24)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.94it/s]
Test: [  0/  1]	Loss 0.692 (0.692)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.692 (0.692)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.24 ( -0.24)
Test: [  1/  1]	Loss 0.692 (0.692)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.692 (0.692)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.24 ( -0.24)
Overall Timing[ 35/  1]	epoch_time 0.0510 (0.0418)	validation_time 0.0004 (0.0006)	train_time 0.0505 (0.0412)
record: (train_acc, test_acc) (0.6626000228524208, 0.6240000128746033)
last accs (train_acc, test_acc) (0.5000000117719173, 0.5)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.82it/s] 12%|#1        | 3/26 [00:00<00:01, 12.07it/s] 19%|#9        | 5/26 [00:00<00:01, 14.09it/s] 27%|##6       | 7/26 [00:00<00:01, 14.97it/s] 35%|###4      | 9/26 [00:00<00:01, 15.62it/s] 42%|####2     | 11/26 [00:00<00:00, 15.86it/s] 50%|#####     | 13/26 [00:00<00:00, 16.10it/s] 58%|#####7    | 15/26 [00:00<00:00, 16.18it/s] 65%|######5   | 17/26 [00:01<00:00, 16.46it/s] 73%|#######3  | 19/26 [00:01<00:00, 16.64it/s] 81%|########  | 21/26 [00:01<00:00, 16.65it/s] 88%|########8 | 23/26 [00:01<00:00, 16.58it/s] 96%|#########6| 25/26 [00:01<00:00, 16.68it/s]100%|##########| 26/26 [00:01<00:00, 15.26it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 936 400
penalty weights 10000.0
args.step pgd_anneal_iters 936 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 937 400
penalty weights 10000.0
args.step pgd_anneal_iters 937 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 938 400
penalty weights 10000.0
args.step pgd_anneal_iters 938 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 939 400
penalty weights 10000.0
args.step pgd_anneal_iters 939 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 940 400
penalty weights 10000.0
args.step pgd_anneal_iters 940 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 941 400
penalty weights 10000.0
args.step pgd_anneal_iters 941 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 942 400
penalty weights 10000.0
args.step pgd_anneal_iters 942 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 943 400
penalty weights 10000.0
args.step pgd_anneal_iters 943 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 944 400
penalty weights 10000.0
args.step pgd_anneal_iters 944 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 945 400
penalty weights 10000.0
args.step pgd_anneal_iters 945 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 946 400
penalty weights 10000.0
args.step pgd_anneal_iters 946 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 947 400
penalty weights 10000.0
args.step pgd_anneal_iters 947 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 948 400
penalty weights 10000.0
args.step pgd_anneal_iters 948 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 949 400
penalty weights 10000.0
args.step pgd_anneal_iters 949 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 950 400
penalty weights 10000.0
args.step pgd_anneal_iters 950 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 951 400
penalty weights 10000.0
args.step pgd_anneal_iters 951 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 952 400
penalty weights 10000.0
args.step pgd_anneal_iters 952 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 953 400
penalty weights 10000.0
args.step pgd_anneal_iters 953 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 954 400
penalty weights 10000.0
args.step pgd_anneal_iters 954 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 955 400
penalty weights 10000.0
args.step pgd_anneal_iters 955 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 956 400
penalty weights 10000.0
args.step pgd_anneal_iters 956 600
dim_v 512
rho, theta 510 tensor(-4.6715e-05, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 957 400
penalty weights 10000.0
args.step pgd_anneal_iters 957 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 958 400
penalty weights 10000.0
args.step pgd_anneal_iters 958 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 959 400
penalty weights 10000.0
args.step pgd_anneal_iters 959 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 960 400
penalty weights 10000.0
args.step pgd_anneal_iters 960 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 961 400
penalty weights 10000.0
args.step pgd_anneal_iters 961 600
dim_v 512
retunring when rho == dim_v - 1
Epoch: [36][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.14 (  0.14)	train_acc   0.46 (  0.50)	train_minacc   0.49 (  0.50)	train_majacc   0.45 (  0.50)	train_corr   0.00 (  0.00)	l1 5.0298 (5.0351)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:00, 26.61it/s] 35%|###4      | 9/26 [00:00<00:00, 37.85it/s]                                               35%|###4      | 9/26 [00:00<00:00, 37.85it/s] 58%|#####7    | 15/26 [00:00<00:00, 45.98it/s]                                                58%|#####7    | 15/26 [00:00<00:00, 45.98it/s] 81%|########  | 21/26 [00:00<00:00, 46.78it/s]100%|##########| 26/26 [00:00<00:00, 41.79it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.49 (  0.49)	test_minacc   0.51 (  0.51)	test_majacc   0.48 (  0.48)	Loss_d 0.693 (0.693)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.48 (  0.48)	test_corr_d   0.22 (  0.22)
Test: [  10/  26]	Loss 0.693 (0.692)	test_acc   0.48 (  0.50)	test_minacc   0.39 (  0.51)	test_majacc   0.50 (  0.50)	Loss_d 0.693 (0.692)	test_acc_d   0.48 (  0.50)	test_minacc_d   0.39 (  0.51)	test_majacc_d   0.50 (  0.50)	test_corr_d   0.26 (  0.23)
Test: [  20/  26]	Loss 0.691 (0.692)	test_acc   0.52 (  0.50)	test_minacc   0.55 (  0.50)	test_majacc   0.52 (  0.50)	Loss_d 0.691 (0.692)	test_acc_d   0.52 (  0.50)	test_minacc_d   0.55 (  0.50)	test_majacc_d   0.52 (  0.50)	test_corr_d   0.30 (  0.24)
Test: [  26/  26]	Loss 0.695 (0.692)	test_acc   0.46 (  0.50)	test_minacc   0.49 (  0.50)	test_majacc   0.45 (  0.50)	Loss_d 0.695 (0.692)	test_acc_d   0.46 (  0.50)	test_minacc_d   0.49 (  0.50)	test_majacc_d   0.45 (  0.50)	test_corr_d   0.12 (  0.23)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.78it/s]
Test: [  0/  1]	Loss 0.692 (0.692)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.692 (0.692)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.24 ( -0.24)
Test: [  1/  1]	Loss 0.692 (0.692)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.692 (0.692)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.24 ( -0.24)
Overall Timing[ 36/  1]	epoch_time 0.0502 (0.0421)	validation_time 0.0003 (0.0006)	train_time 0.0498 (0.0414)
record: (train_acc, test_acc) (0.6626000228524208, 0.6240000128746033)
last accs (train_acc, test_acc) (0.5000000117719173, 0.5)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.73it/s] 12%|#1        | 3/26 [00:00<00:02, 11.26it/s] 19%|#9        | 5/26 [00:00<00:01, 13.47it/s] 27%|##6       | 7/26 [00:00<00:01, 14.69it/s] 35%|###4      | 9/26 [00:00<00:01, 15.47it/s] 42%|####2     | 11/26 [00:00<00:00, 16.00it/s] 50%|#####     | 13/26 [00:00<00:00, 16.08it/s] 58%|#####7    | 15/26 [00:01<00:00, 16.19it/s] 65%|######5   | 17/26 [00:01<00:00, 16.42it/s] 73%|#######3  | 19/26 [00:01<00:00, 16.60it/s] 81%|########  | 21/26 [00:01<00:00, 16.76it/s] 88%|########8 | 23/26 [00:01<00:00, 16.84it/s] 96%|#########6| 25/26 [00:01<00:00, 16.83it/s]100%|##########| 26/26 [00:01<00:00, 15.17it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 962 400
penalty weights 10000.0
args.step pgd_anneal_iters 962 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 963 400
penalty weights 10000.0
args.step pgd_anneal_iters 963 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 964 400
penalty weights 10000.0
args.step pgd_anneal_iters 964 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 965 400
penalty weights 10000.0
args.step pgd_anneal_iters 965 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 966 400
penalty weights 10000.0
args.step pgd_anneal_iters 966 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 967 400
penalty weights 10000.0
args.step pgd_anneal_iters 967 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 968 400
penalty weights 10000.0
args.step pgd_anneal_iters 968 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 969 400
penalty weights 10000.0
args.step pgd_anneal_iters 969 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 970 400
penalty weights 10000.0
args.step pgd_anneal_iters 970 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 971 400
penalty weights 10000.0
args.step pgd_anneal_iters 971 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 972 400
penalty weights 10000.0
args.step pgd_anneal_iters 972 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 973 400
penalty weights 10000.0
args.step pgd_anneal_iters 973 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 974 400
penalty weights 10000.0
args.step pgd_anneal_iters 974 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 975 400
penalty weights 10000.0
args.step pgd_anneal_iters 975 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 976 400
penalty weights 10000.0
args.step pgd_anneal_iters 976 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 977 400
penalty weights 10000.0
args.step pgd_anneal_iters 977 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 978 400
penalty weights 10000.0
args.step pgd_anneal_iters 978 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 979 400
penalty weights 10000.0
args.step pgd_anneal_iters 979 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 980 400
penalty weights 10000.0
args.step pgd_anneal_iters 980 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 981 400
penalty weights 10000.0
args.step pgd_anneal_iters 981 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 982 400
penalty weights 10000.0
args.step pgd_anneal_iters 982 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 983 400
penalty weights 10000.0
args.step pgd_anneal_iters 983 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 984 400
penalty weights 10000.0
args.step pgd_anneal_iters 984 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 985 400
penalty weights 10000.0
args.step pgd_anneal_iters 985 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 986 400
penalty weights 10000.0
args.step pgd_anneal_iters 986 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 987 400
penalty weights 10000.0
args.step pgd_anneal_iters 987 600
dim_v 512
retunring when rho == dim_v - 1
Epoch: [37][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.14 (  0.14)	train_acc   0.46 (  0.50)	train_minacc   0.49 (  0.50)	train_majacc   0.45 (  0.50)	train_corr   0.00 (  0.00)	l1 5.0465 (5.0378)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.35it/s] 27%|##6       | 7/26 [00:00<00:00, 31.61it/s]                                               27%|##6       | 7/26 [00:00<00:00, 31.61it/s] 50%|#####     | 13/26 [00:00<00:00, 40.82it/s] 73%|#######3  | 19/26 [00:00<00:00, 44.24it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 44.24it/s] 96%|#########6| 25/26 [00:00<00:00, 48.54it/s]100%|##########| 26/26 [00:00<00:00, 39.36it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.49 (  0.49)	test_minacc   0.51 (  0.51)	test_majacc   0.48 (  0.48)	Loss_d 0.693 (0.693)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.48 (  0.48)	test_corr_d   0.22 (  0.22)
Test: [  10/  26]	Loss 0.693 (0.692)	test_acc   0.48 (  0.50)	test_minacc   0.39 (  0.51)	test_majacc   0.50 (  0.50)	Loss_d 0.693 (0.692)	test_acc_d   0.48 (  0.50)	test_minacc_d   0.39 (  0.51)	test_majacc_d   0.50 (  0.50)	test_corr_d   0.26 (  0.23)
Test: [  20/  26]	Loss 0.691 (0.692)	test_acc   0.52 (  0.50)	test_minacc   0.55 (  0.50)	test_majacc   0.52 (  0.50)	Loss_d 0.691 (0.692)	test_acc_d   0.52 (  0.50)	test_minacc_d   0.55 (  0.50)	test_majacc_d   0.52 (  0.50)	test_corr_d   0.29 (  0.23)
Test: [  26/  26]	Loss 0.695 (0.692)	test_acc   0.46 (  0.50)	test_minacc   0.49 (  0.50)	test_majacc   0.45 (  0.50)	Loss_d 0.695 (0.692)	test_acc_d   0.46 (  0.50)	test_minacc_d   0.49 (  0.50)	test_majacc_d   0.45 (  0.50)	test_corr_d   0.12 (  0.23)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.85it/s]
Test: [  0/  1]	Loss 0.692 (0.692)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.692 (0.692)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.24 ( -0.24)
Test: [  1/  1]	Loss 0.692 (0.692)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.692 (0.692)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.24 ( -0.24)
Overall Timing[ 37/  1]	epoch_time 0.0506 (0.0423)	validation_time 0.0006 (0.0006)	train_time 0.0500 (0.0416)
record: (train_acc, test_acc) (0.6626000228524208, 0.6240000128746033)
last accs (train_acc, test_acc) (0.5000000117719173, 0.5)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.90it/s] 12%|#1        | 3/26 [00:00<00:02, 11.07it/s] 19%|#9        | 5/26 [00:00<00:01, 13.45it/s] 27%|##6       | 7/26 [00:00<00:01, 14.73it/s] 35%|###4      | 9/26 [00:00<00:01, 15.52it/s] 42%|####2     | 11/26 [00:00<00:00, 16.05it/s] 50%|#####     | 13/26 [00:00<00:00, 16.37it/s] 58%|#####7    | 15/26 [00:01<00:00, 16.55it/s] 65%|######5   | 17/26 [00:01<00:00, 16.66it/s] 73%|#######3  | 19/26 [00:01<00:00, 16.70it/s] 81%|########  | 21/26 [00:01<00:00, 16.74it/s] 88%|########8 | 23/26 [00:01<00:00, 16.65it/s] 96%|#########6| 25/26 [00:01<00:00, 16.89it/s]100%|##########| 26/26 [00:01<00:00, 15.15it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 988 400
penalty weights 10000.0
args.step pgd_anneal_iters 988 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 989 400
penalty weights 10000.0
args.step pgd_anneal_iters 989 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 990 400
penalty weights 10000.0
args.step pgd_anneal_iters 990 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 991 400
penalty weights 10000.0
args.step pgd_anneal_iters 991 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 992 400
penalty weights 10000.0
args.step pgd_anneal_iters 992 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 993 400
penalty weights 10000.0
args.step pgd_anneal_iters 993 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 994 400
penalty weights 10000.0
args.step pgd_anneal_iters 994 600
dim_v 512
rho, theta 510 tensor(-3.7498e-05, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 995 400
penalty weights 10000.0
args.step pgd_anneal_iters 995 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 996 400
penalty weights 10000.0
args.step pgd_anneal_iters 996 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 997 400
penalty weights 10000.0
args.step pgd_anneal_iters 997 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 998 400
penalty weights 10000.0
args.step pgd_anneal_iters 998 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 999 400
penalty weights 10000.0
args.step pgd_anneal_iters 999 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1000 400
penalty weights 10000.0
args.step pgd_anneal_iters 1000 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1001 400
penalty weights 10000.0
args.step pgd_anneal_iters 1001 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1002 400
penalty weights 10000.0
args.step pgd_anneal_iters 1002 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1003 400
penalty weights 10000.0
args.step pgd_anneal_iters 1003 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1004 400
penalty weights 10000.0
args.step pgd_anneal_iters 1004 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1005 400
penalty weights 10000.0
args.step pgd_anneal_iters 1005 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1006 400
penalty weights 10000.0
args.step pgd_anneal_iters 1006 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1007 400
penalty weights 10000.0
args.step pgd_anneal_iters 1007 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1008 400
penalty weights 10000.0
args.step pgd_anneal_iters 1008 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1009 400
penalty weights 10000.0
args.step pgd_anneal_iters 1009 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1010 400
penalty weights 10000.0
args.step pgd_anneal_iters 1010 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1011 400
penalty weights 10000.0
args.step pgd_anneal_iters 1011 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1012 400
penalty weights 10000.0
args.step pgd_anneal_iters 1012 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1013 400
penalty weights 10000.0
args.step pgd_anneal_iters 1013 600
dim_v 512
retunring when rho == dim_v - 1
Epoch: [38][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.14 (  0.14)	train_acc   0.46 (  0.50)	train_minacc   0.49 (  0.50)	train_majacc   0.45 (  0.50)	train_corr   0.00 (  0.00)	l1 5.0420 (5.0382)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.15it/s] 27%|##6       | 7/26 [00:00<00:00, 32.56it/s]                                               27%|##6       | 7/26 [00:00<00:00, 32.56it/s] 50%|#####     | 13/26 [00:00<00:00, 40.01it/s] 73%|#######3  | 19/26 [00:00<00:00, 46.41it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 46.41it/s] 96%|#########6| 25/26 [00:00<00:00, 46.90it/s]100%|##########| 26/26 [00:00<00:00, 38.38it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.49 (  0.49)	test_minacc   0.51 (  0.51)	test_majacc   0.48 (  0.48)	Loss_d 0.693 (0.693)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.48 (  0.48)	test_corr_d   0.22 (  0.22)
Test: [  10/  26]	Loss 0.693 (0.692)	test_acc   0.48 (  0.50)	test_minacc   0.39 (  0.51)	test_majacc   0.50 (  0.50)	Loss_d 0.693 (0.692)	test_acc_d   0.48 (  0.50)	test_minacc_d   0.39 (  0.51)	test_majacc_d   0.50 (  0.50)	test_corr_d   0.26 (  0.22)
Test: [  20/  26]	Loss 0.691 (0.692)	test_acc   0.52 (  0.50)	test_minacc   0.55 (  0.50)	test_majacc   0.52 (  0.50)	Loss_d 0.691 (0.692)	test_acc_d   0.52 (  0.50)	test_minacc_d   0.55 (  0.50)	test_majacc_d   0.52 (  0.50)	test_corr_d   0.29 (  0.23)
Test: [  26/  26]	Loss 0.695 (0.692)	test_acc   0.46 (  0.50)	test_minacc   0.49 (  0.50)	test_majacc   0.45 (  0.50)	Loss_d 0.695 (0.692)	test_acc_d   0.46 (  0.50)	test_minacc_d   0.49 (  0.50)	test_majacc_d   0.45 (  0.50)	test_corr_d   0.12 (  0.23)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 65.35it/s]
Test: [  0/  1]	Loss 0.692 (0.692)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.692 (0.692)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.24 ( -0.24)
Test: [  1/  1]	Loss 0.692 (0.692)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.692 (0.692)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.24 ( -0.24)
Overall Timing[ 38/  1]	epoch_time 0.0513 (0.0425)	validation_time 0.0004 (0.0006)	train_time 0.0508 (0.0419)
record: (train_acc, test_acc) (0.6626000228524208, 0.6240000128746033)
last accs (train_acc, test_acc) (0.5000000117719173, 0.5)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.79it/s] 12%|#1        | 3/26 [00:00<00:01, 12.49it/s] 19%|#9        | 5/26 [00:00<00:01, 14.26it/s] 27%|##6       | 7/26 [00:00<00:01, 15.11it/s] 35%|###4      | 9/26 [00:00<00:01, 15.66it/s] 42%|####2     | 11/26 [00:00<00:00, 15.91it/s] 50%|#####     | 13/26 [00:00<00:00, 16.27it/s] 58%|#####7    | 15/26 [00:00<00:00, 16.47it/s] 65%|######5   | 17/26 [00:01<00:00, 16.67it/s] 73%|#######3  | 19/26 [00:01<00:00, 16.56it/s] 81%|########  | 21/26 [00:01<00:00, 16.65it/s] 88%|########8 | 23/26 [00:01<00:00, 16.78it/s] 96%|#########6| 25/26 [00:01<00:00, 16.90it/s]100%|##########| 26/26 [00:01<00:00, 15.41it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1014 400
penalty weights 10000.0
args.step pgd_anneal_iters 1014 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1015 400
penalty weights 10000.0
args.step pgd_anneal_iters 1015 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1016 400
penalty weights 10000.0
args.step pgd_anneal_iters 1016 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1017 400
penalty weights 10000.0
args.step pgd_anneal_iters 1017 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1018 400
penalty weights 10000.0
args.step pgd_anneal_iters 1018 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1019 400
penalty weights 10000.0
args.step pgd_anneal_iters 1019 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1020 400
penalty weights 10000.0
args.step pgd_anneal_iters 1020 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1021 400
penalty weights 10000.0
args.step pgd_anneal_iters 1021 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1022 400
penalty weights 10000.0
args.step pgd_anneal_iters 1022 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1023 400
penalty weights 10000.0
args.step pgd_anneal_iters 1023 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1024 400
penalty weights 10000.0
args.step pgd_anneal_iters 1024 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1025 400
penalty weights 10000.0
args.step pgd_anneal_iters 1025 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1026 400
penalty weights 10000.0
args.step pgd_anneal_iters 1026 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1027 400
penalty weights 10000.0
args.step pgd_anneal_iters 1027 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1028 400
penalty weights 10000.0
args.step pgd_anneal_iters 1028 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1029 400
penalty weights 10000.0
args.step pgd_anneal_iters 1029 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1030 400
penalty weights 10000.0
args.step pgd_anneal_iters 1030 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1031 400
penalty weights 10000.0
args.step pgd_anneal_iters 1031 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1032 400
penalty weights 10000.0
args.step pgd_anneal_iters 1032 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1033 400
penalty weights 10000.0
args.step pgd_anneal_iters 1033 600
dim_v 512
rho, theta 510 tensor(-3.5392e-05, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1034 400
penalty weights 10000.0
args.step pgd_anneal_iters 1034 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1035 400
penalty weights 10000.0
args.step pgd_anneal_iters 1035 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1036 400
penalty weights 10000.0
args.step pgd_anneal_iters 1036 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1037 400
penalty weights 10000.0
args.step pgd_anneal_iters 1037 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1038 400
penalty weights 10000.0
args.step pgd_anneal_iters 1038 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1039 400
penalty weights 10000.0
args.step pgd_anneal_iters 1039 600
dim_v 512
retunring when rho == dim_v - 1
Epoch: [39][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.14 (  0.14)	train_acc   0.46 (  0.50)	train_minacc   0.49 (  0.50)	train_majacc   0.45 (  0.50)	train_corr   0.00 (  0.00)	l1 5.0355 (5.0444)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:00, 27.03it/s] 35%|###4      | 9/26 [00:00<00:00, 38.97it/s]                                               35%|###4      | 9/26 [00:00<00:00, 38.97it/s] 58%|#####7    | 15/26 [00:00<00:00, 46.86it/s]                                                58%|#####7    | 15/26 [00:00<00:00, 46.86it/s] 81%|########  | 21/26 [00:00<00:00, 47.10it/s]100%|##########| 26/26 [00:00<00:00, 42.13it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.49 (  0.49)	test_minacc   0.51 (  0.51)	test_majacc   0.48 (  0.48)	Loss_d 0.693 (0.693)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.48 (  0.48)	test_corr_d   0.21 (  0.21)
Test: [  10/  26]	Loss 0.693 (0.692)	test_acc   0.48 (  0.50)	test_minacc   0.39 (  0.51)	test_majacc   0.50 (  0.50)	Loss_d 0.693 (0.692)	test_acc_d   0.48 (  0.50)	test_minacc_d   0.39 (  0.51)	test_majacc_d   0.50 (  0.50)	test_corr_d   0.25 (  0.22)
Test: [  20/  26]	Loss 0.691 (0.692)	test_acc   0.52 (  0.50)	test_minacc   0.55 (  0.50)	test_majacc   0.52 (  0.50)	Loss_d 0.691 (0.692)	test_acc_d   0.52 (  0.50)	test_minacc_d   0.55 (  0.50)	test_majacc_d   0.52 (  0.50)	test_corr_d   0.29 (  0.23)
Test: [  26/  26]	Loss 0.695 (0.692)	test_acc   0.46 (  0.50)	test_minacc   0.49 (  0.50)	test_majacc   0.45 (  0.50)	Loss_d 0.695 (0.692)	test_acc_d   0.46 (  0.50)	test_minacc_d   0.49 (  0.50)	test_majacc_d   0.45 (  0.50)	test_corr_d   0.12 (  0.23)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 64.19it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.23 ( -0.23)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.23 ( -0.23)
Overall Timing[ 39/  1]	epoch_time 0.0496 (0.0427)	validation_time 0.0004 (0.0006)	train_time 0.0491 (0.0420)
record: (train_acc, test_acc) (0.6626000228524208, 0.6240000128746033)
last accs (train_acc, test_acc) (0.5000000117719173, 0.5)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.94it/s] 12%|#1        | 3/26 [00:00<00:01, 11.82it/s] 19%|#9        | 5/26 [00:00<00:01, 13.90it/s] 27%|##6       | 7/26 [00:00<00:01, 15.06it/s] 35%|###4      | 9/26 [00:00<00:01, 15.43it/s] 42%|####2     | 11/26 [00:00<00:00, 15.97it/s] 50%|#####     | 13/26 [00:00<00:00, 16.27it/s] 58%|#####7    | 15/26 [00:00<00:00, 16.51it/s] 65%|######5   | 17/26 [00:01<00:00, 16.75it/s] 73%|#######3  | 19/26 [00:01<00:00, 16.62it/s] 81%|########  | 21/26 [00:01<00:00, 16.71it/s] 88%|########8 | 23/26 [00:01<00:00, 16.76it/s] 96%|#########6| 25/26 [00:01<00:00, 16.72it/s]100%|##########| 26/26 [00:01<00:00, 15.31it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1040 400
penalty weights 10000.0
args.step pgd_anneal_iters 1040 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1041 400
penalty weights 10000.0
args.step pgd_anneal_iters 1041 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1042 400
penalty weights 10000.0
args.step pgd_anneal_iters 1042 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1043 400
penalty weights 10000.0
args.step pgd_anneal_iters 1043 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1044 400
penalty weights 10000.0
args.step pgd_anneal_iters 1044 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1045 400
penalty weights 10000.0
args.step pgd_anneal_iters 1045 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1046 400
penalty weights 10000.0
args.step pgd_anneal_iters 1046 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1047 400
penalty weights 10000.0
args.step pgd_anneal_iters 1047 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1048 400
penalty weights 10000.0
args.step pgd_anneal_iters 1048 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1049 400
penalty weights 10000.0
args.step pgd_anneal_iters 1049 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1050 400
penalty weights 10000.0
args.step pgd_anneal_iters 1050 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1051 400
penalty weights 10000.0
args.step pgd_anneal_iters 1051 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1052 400
penalty weights 10000.0
args.step pgd_anneal_iters 1052 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1053 400
penalty weights 10000.0
args.step pgd_anneal_iters 1053 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1054 400
penalty weights 10000.0
args.step pgd_anneal_iters 1054 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1055 400
penalty weights 10000.0
args.step pgd_anneal_iters 1055 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1056 400
penalty weights 10000.0
args.step pgd_anneal_iters 1056 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1057 400
penalty weights 10000.0
args.step pgd_anneal_iters 1057 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1058 400
penalty weights 10000.0
args.step pgd_anneal_iters 1058 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1059 400
penalty weights 10000.0
args.step pgd_anneal_iters 1059 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1060 400
penalty weights 10000.0
args.step pgd_anneal_iters 1060 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1061 400
penalty weights 10000.0
args.step pgd_anneal_iters 1061 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1062 400
penalty weights 10000.0
args.step pgd_anneal_iters 1062 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1063 400
penalty weights 10000.0
args.step pgd_anneal_iters 1063 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1064 400
penalty weights 10000.0
args.step pgd_anneal_iters 1064 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1065 400
penalty weights 10000.0
args.step pgd_anneal_iters 1065 600
dim_v 512
retunring when rho == dim_v - 1
Epoch: [40][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.14 (  0.14)	train_acc   0.46 (  0.50)	train_minacc   0.49 (  0.50)	train_majacc   0.45 (  0.50)	train_corr   0.00 (  0.00)	l1 5.0549 (5.0448)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.43it/s] 27%|##6       | 7/26 [00:00<00:00, 36.60it/s]                                               27%|##6       | 7/26 [00:00<00:00, 36.60it/s] 50%|#####     | 13/26 [00:00<00:00, 42.52it/s] 73%|#######3  | 19/26 [00:00<00:00, 48.31it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 48.31it/s] 96%|#########6| 25/26 [00:00<00:00, 48.61it/s]100%|##########| 26/26 [00:00<00:00, 40.42it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.49 (  0.49)	test_minacc   0.51 (  0.51)	test_majacc   0.48 (  0.48)	Loss_d 0.693 (0.693)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.48 (  0.48)	test_corr_d   0.21 (  0.21)
Test: [  10/  26]	Loss 0.693 (0.692)	test_acc   0.48 (  0.50)	test_minacc   0.39 (  0.51)	test_majacc   0.50 (  0.50)	Loss_d 0.693 (0.692)	test_acc_d   0.48 (  0.50)	test_minacc_d   0.39 (  0.51)	test_majacc_d   0.50 (  0.50)	test_corr_d   0.25 (  0.22)
Test: [  20/  26]	Loss 0.692 (0.692)	test_acc   0.52 (  0.50)	test_minacc   0.55 (  0.50)	test_majacc   0.52 (  0.50)	Loss_d 0.692 (0.692)	test_acc_d   0.52 (  0.50)	test_minacc_d   0.55 (  0.50)	test_majacc_d   0.52 (  0.50)	test_corr_d   0.28 (  0.22)
Test: [  26/  26]	Loss 0.694 (0.692)	test_acc   0.46 (  0.50)	test_minacc   0.49 (  0.50)	test_majacc   0.45 (  0.50)	Loss_d 0.694 (0.692)	test_acc_d   0.46 (  0.50)	test_minacc_d   0.49 (  0.50)	test_majacc_d   0.45 (  0.50)	test_corr_d   0.12 (  0.22)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.51it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.23 ( -0.23)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.23 ( -0.23)
Overall Timing[ 40/  1]	epoch_time 0.0501 (0.0429)	validation_time 0.0003 (0.0006)	train_time 0.0498 (0.0422)
record: (train_acc, test_acc) (0.6626000228524208, 0.6240000128746033)
last accs (train_acc, test_acc) (0.5000000117719173, 0.5)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.10it/s] 12%|#1        | 3/26 [00:00<00:02, 10.38it/s] 19%|#9        | 5/26 [00:00<00:01, 13.00it/s] 27%|##6       | 7/26 [00:00<00:01, 14.46it/s] 35%|###4      | 9/26 [00:00<00:01, 15.32it/s] 42%|####2     | 11/26 [00:00<00:00, 15.77it/s] 50%|#####     | 13/26 [00:00<00:00, 16.15it/s] 58%|#####7    | 15/26 [00:01<00:00, 16.38it/s] 65%|######5   | 17/26 [00:01<00:00, 16.56it/s] 73%|#######3  | 19/26 [00:01<00:00, 16.46it/s] 81%|########  | 21/26 [00:01<00:00, 16.57it/s] 88%|########8 | 23/26 [00:01<00:00, 16.73it/s] 96%|#########6| 25/26 [00:01<00:00, 16.78it/s]100%|##########| 26/26 [00:01<00:00, 14.82it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1066 400
penalty weights 10000.0
args.step pgd_anneal_iters 1066 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1067 400
penalty weights 10000.0
args.step pgd_anneal_iters 1067 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1068 400
penalty weights 10000.0
args.step pgd_anneal_iters 1068 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1069 400
penalty weights 10000.0
args.step pgd_anneal_iters 1069 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1070 400
penalty weights 10000.0
args.step pgd_anneal_iters 1070 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1071 400
penalty weights 10000.0
args.step pgd_anneal_iters 1071 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1072 400
penalty weights 10000.0
args.step pgd_anneal_iters 1072 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1073 400
penalty weights 10000.0
args.step pgd_anneal_iters 1073 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1074 400
penalty weights 10000.0
args.step pgd_anneal_iters 1074 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1075 400
penalty weights 10000.0
args.step pgd_anneal_iters 1075 600
dim_v 512
rho, theta 510 tensor(-3.0684e-05, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1076 400
penalty weights 10000.0
args.step pgd_anneal_iters 1076 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1077 400
penalty weights 10000.0
args.step pgd_anneal_iters 1077 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1078 400
penalty weights 10000.0
args.step pgd_anneal_iters 1078 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1079 400
penalty weights 10000.0
args.step pgd_anneal_iters 1079 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1080 400
penalty weights 10000.0
args.step pgd_anneal_iters 1080 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1081 400
penalty weights 10000.0
args.step pgd_anneal_iters 1081 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1082 400
penalty weights 10000.0
args.step pgd_anneal_iters 1082 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1083 400
penalty weights 10000.0
args.step pgd_anneal_iters 1083 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1084 400
penalty weights 10000.0
args.step pgd_anneal_iters 1084 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1085 400
penalty weights 10000.0
args.step pgd_anneal_iters 1085 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1086 400
penalty weights 10000.0
args.step pgd_anneal_iters 1086 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1087 400
penalty weights 10000.0
args.step pgd_anneal_iters 1087 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1088 400
penalty weights 10000.0
args.step pgd_anneal_iters 1088 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1089 400
penalty weights 10000.0
args.step pgd_anneal_iters 1089 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1090 400
penalty weights 10000.0
args.step pgd_anneal_iters 1090 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1091 400
penalty weights 10000.0
args.step pgd_anneal_iters 1091 600
dim_v 512
retunring when rho == dim_v - 1
Epoch: [41][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.14 (  0.14)	train_acc   0.46 (  0.50)	train_minacc   0.49 (  0.50)	train_majacc   0.45 (  0.50)	train_corr   0.00 (  0.00)	l1 5.0467 (5.0462)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.28it/s] 27%|##6       | 7/26 [00:00<00:00, 30.93it/s]                                               27%|##6       | 7/26 [00:00<00:00, 30.93it/s] 46%|####6     | 12/26 [00:00<00:00, 36.67it/s] 69%|######9   | 18/26 [00:00<00:00, 43.85it/s]                                                69%|######9   | 18/26 [00:00<00:00, 43.85it/s] 92%|#########2| 24/26 [00:00<00:00, 45.02it/s]100%|##########| 26/26 [00:00<00:00, 37.03it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.49 (  0.49)	test_minacc   0.51 (  0.51)	test_majacc   0.48 (  0.48)	Loss_d 0.693 (0.693)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.48 (  0.48)	test_corr_d   0.20 (  0.20)
Test: [  10/  26]	Loss 0.693 (0.692)	test_acc   0.48 (  0.50)	test_minacc   0.39 (  0.51)	test_majacc   0.50 (  0.50)	Loss_d 0.693 (0.692)	test_acc_d   0.48 (  0.50)	test_minacc_d   0.39 (  0.51)	test_majacc_d   0.50 (  0.50)	test_corr_d   0.25 (  0.21)
Test: [  20/  26]	Loss 0.692 (0.692)	test_acc   0.52 (  0.50)	test_minacc   0.55 (  0.50)	test_majacc   0.52 (  0.50)	Loss_d 0.692 (0.692)	test_acc_d   0.52 (  0.50)	test_minacc_d   0.55 (  0.50)	test_majacc_d   0.52 (  0.50)	test_corr_d   0.28 (  0.22)
Test: [  26/  26]	Loss 0.694 (0.693)	test_acc   0.46 (  0.50)	test_minacc   0.49 (  0.50)	test_majacc   0.45 (  0.50)	Loss_d 0.694 (0.693)	test_acc_d   0.46 (  0.50)	test_minacc_d   0.49 (  0.50)	test_majacc_d   0.45 (  0.50)	test_corr_d   0.12 (  0.22)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.19it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.22 ( -0.22)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.22 ( -0.22)
Overall Timing[ 41/  1]	epoch_time 0.0505 (0.0430)	validation_time 0.0004 (0.0006)	train_time 0.0501 (0.0424)
record: (train_acc, test_acc) (0.6626000228524208, 0.6240000128746033)
last accs (train_acc, test_acc) (0.5000000117719173, 0.5)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.58it/s] 12%|#1        | 3/26 [00:00<00:02, 10.91it/s] 19%|#9        | 5/26 [00:00<00:01, 13.31it/s] 27%|##6       | 7/26 [00:00<00:01, 14.57it/s] 35%|###4      | 9/26 [00:00<00:01, 15.39it/s] 42%|####2     | 11/26 [00:00<00:00, 15.84it/s] 50%|#####     | 13/26 [00:00<00:00, 15.95it/s] 58%|#####7    | 15/26 [00:01<00:00, 16.13it/s] 65%|######5   | 17/26 [00:01<00:00, 16.30it/s] 73%|#######3  | 19/26 [00:01<00:00, 16.52it/s] 81%|########  | 21/26 [00:01<00:00, 16.61it/s] 88%|########8 | 23/26 [00:01<00:00, 16.80it/s] 96%|#########6| 25/26 [00:01<00:00, 16.92it/s]100%|##########| 26/26 [00:01<00:00, 15.14it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1092 400
penalty weights 10000.0
args.step pgd_anneal_iters 1092 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1093 400
penalty weights 10000.0
args.step pgd_anneal_iters 1093 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1094 400
penalty weights 10000.0
args.step pgd_anneal_iters 1094 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1095 400
penalty weights 10000.0
args.step pgd_anneal_iters 1095 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1096 400
penalty weights 10000.0
args.step pgd_anneal_iters 1096 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1097 400
penalty weights 10000.0
args.step pgd_anneal_iters 1097 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1098 400
penalty weights 10000.0
args.step pgd_anneal_iters 1098 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1099 400
penalty weights 10000.0
args.step pgd_anneal_iters 1099 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1100 400
penalty weights 10000.0
args.step pgd_anneal_iters 1100 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1101 400
penalty weights 10000.0
args.step pgd_anneal_iters 1101 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1102 400
penalty weights 10000.0
args.step pgd_anneal_iters 1102 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1103 400
penalty weights 10000.0
args.step pgd_anneal_iters 1103 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1104 400
penalty weights 10000.0
args.step pgd_anneal_iters 1104 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1105 400
penalty weights 10000.0
args.step pgd_anneal_iters 1105 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1106 400
penalty weights 10000.0
args.step pgd_anneal_iters 1106 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1107 400
penalty weights 10000.0
args.step pgd_anneal_iters 1107 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1108 400
penalty weights 10000.0
args.step pgd_anneal_iters 1108 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1109 400
penalty weights 10000.0
args.step pgd_anneal_iters 1109 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1110 400
penalty weights 10000.0
args.step pgd_anneal_iters 1110 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1111 400
penalty weights 10000.0
args.step pgd_anneal_iters 1111 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1112 400
penalty weights 10000.0
args.step pgd_anneal_iters 1112 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1113 400
penalty weights 10000.0
args.step pgd_anneal_iters 1113 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1114 400
penalty weights 10000.0
args.step pgd_anneal_iters 1114 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1115 400
penalty weights 10000.0
args.step pgd_anneal_iters 1115 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1116 400
penalty weights 10000.0
args.step pgd_anneal_iters 1116 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1117 400
penalty weights 10000.0
args.step pgd_anneal_iters 1117 600
dim_v 512
rho, theta 510 tensor(-2.9484e-05, device='cuda:0')
Epoch: [42][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.14 (  0.14)	train_acc   0.46 (  0.50)	train_minacc   0.49 (  0.50)	train_majacc   0.45 (  0.50)	train_corr   0.00 (  0.00)	l1 5.0356 (5.0559)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.81it/s] 23%|##3       | 6/26 [00:00<00:00, 33.00it/s]                                               23%|##3       | 6/26 [00:00<00:00, 33.00it/s] 46%|####6     | 12/26 [00:00<00:00, 42.96it/s] 65%|######5   | 17/26 [00:00<00:00, 43.96it/s]                                                65%|######5   | 17/26 [00:00<00:00, 43.96it/s] 88%|########8 | 23/26 [00:00<00:00, 49.10it/s]100%|##########| 26/26 [00:00<00:00, 39.86it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.49 (  0.49)	test_minacc   0.51 (  0.51)	test_majacc   0.48 (  0.48)	Loss_d 0.693 (0.693)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.48 (  0.48)	test_corr_d   0.20 (  0.20)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.48 (  0.50)	test_minacc   0.39 (  0.51)	test_majacc   0.50 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.48 (  0.50)	test_minacc_d   0.39 (  0.51)	test_majacc_d   0.50 (  0.50)	test_corr_d   0.24 (  0.21)
Test: [  20/  26]	Loss 0.692 (0.693)	test_acc   0.52 (  0.50)	test_minacc   0.55 (  0.50)	test_majacc   0.52 (  0.50)	Loss_d 0.692 (0.693)	test_acc_d   0.52 (  0.50)	test_minacc_d   0.55 (  0.50)	test_majacc_d   0.52 (  0.50)	test_corr_d   0.27 (  0.21)
Test: [  26/  26]	Loss 0.694 (0.693)	test_acc   0.46 (  0.50)	test_minacc   0.49 (  0.50)	test_majacc   0.45 (  0.50)	Loss_d 0.694 (0.693)	test_acc_d   0.46 (  0.50)	test_minacc_d   0.49 (  0.50)	test_majacc_d   0.45 (  0.50)	test_corr_d   0.12 (  0.21)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.07it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.22 ( -0.22)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.22 ( -0.22)
Overall Timing[ 42/  1]	epoch_time 0.0520 (0.0433)	validation_time 0.0004 (0.0006)	train_time 0.0516 (0.0426)
record: (train_acc, test_acc) (0.6626000228524208, 0.6240000128746033)
last accs (train_acc, test_acc) (0.5000000117719173, 0.5)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.56it/s] 12%|#1        | 3/26 [00:00<00:01, 11.57it/s] 19%|#9        | 5/26 [00:00<00:01, 13.81it/s] 27%|##6       | 7/26 [00:00<00:01, 15.00it/s] 35%|###4      | 9/26 [00:00<00:01, 15.71it/s] 42%|####2     | 11/26 [00:00<00:00, 16.11it/s] 50%|#####     | 13/26 [00:00<00:00, 16.34it/s] 58%|#####7    | 15/26 [00:00<00:00, 16.45it/s] 65%|######5   | 17/26 [00:01<00:00, 16.52it/s] 73%|#######3  | 19/26 [00:01<00:00, 16.57it/s] 81%|########  | 21/26 [00:01<00:00, 16.73it/s] 88%|########8 | 23/26 [00:01<00:00, 16.90it/s] 96%|#########6| 25/26 [00:01<00:00, 16.95it/s]100%|##########| 26/26 [00:01<00:00, 15.30it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1118 400
penalty weights 10000.0
args.step pgd_anneal_iters 1118 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1119 400
penalty weights 10000.0
args.step pgd_anneal_iters 1119 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1120 400
penalty weights 10000.0
args.step pgd_anneal_iters 1120 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1121 400
penalty weights 10000.0
args.step pgd_anneal_iters 1121 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1122 400
penalty weights 10000.0
args.step pgd_anneal_iters 1122 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1123 400
penalty weights 10000.0
args.step pgd_anneal_iters 1123 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1124 400
penalty weights 10000.0
args.step pgd_anneal_iters 1124 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1125 400
penalty weights 10000.0
args.step pgd_anneal_iters 1125 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1126 400
penalty weights 10000.0
args.step pgd_anneal_iters 1126 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1127 400
penalty weights 10000.0
args.step pgd_anneal_iters 1127 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1128 400
penalty weights 10000.0
args.step pgd_anneal_iters 1128 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1129 400
penalty weights 10000.0
args.step pgd_anneal_iters 1129 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1130 400
penalty weights 10000.0
args.step pgd_anneal_iters 1130 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1131 400
penalty weights 10000.0
args.step pgd_anneal_iters 1131 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1132 400
penalty weights 10000.0
args.step pgd_anneal_iters 1132 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1133 400
penalty weights 10000.0
args.step pgd_anneal_iters 1133 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1134 400
penalty weights 10000.0
args.step pgd_anneal_iters 1134 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1135 400
penalty weights 10000.0
args.step pgd_anneal_iters 1135 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1136 400
penalty weights 10000.0
args.step pgd_anneal_iters 1136 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1137 400
penalty weights 10000.0
args.step pgd_anneal_iters 1137 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1138 400
penalty weights 10000.0
args.step pgd_anneal_iters 1138 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1139 400
penalty weights 10000.0
args.step pgd_anneal_iters 1139 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1140 400
penalty weights 10000.0
args.step pgd_anneal_iters 1140 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1141 400
penalty weights 10000.0
args.step pgd_anneal_iters 1141 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1142 400
penalty weights 10000.0
args.step pgd_anneal_iters 1142 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1143 400
penalty weights 10000.0
args.step pgd_anneal_iters 1143 600
dim_v 512
retunring when rho == dim_v - 1
Epoch: [43][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.14 (  0.14)	train_acc   0.46 (  0.50)	train_minacc   0.49 (  0.50)	train_majacc   0.45 (  0.50)	train_corr   0.00 (  0.00)	l1 5.0564 (5.0456)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.48it/s] 27%|##6       | 7/26 [00:00<00:00, 35.12it/s]                                               27%|##6       | 7/26 [00:00<00:00, 35.12it/s] 50%|#####     | 13/26 [00:00<00:00, 40.39it/s] 73%|#######3  | 19/26 [00:00<00:00, 46.13it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 46.13it/s] 96%|#########6| 25/26 [00:00<00:00, 46.35it/s]100%|##########| 26/26 [00:00<00:00, 38.97it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.49 (  0.49)	test_minacc   0.51 (  0.51)	test_majacc   0.48 (  0.48)	Loss_d 0.693 (0.693)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.48 (  0.48)	test_corr_d   0.19 (  0.19)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.48 (  0.50)	test_minacc   0.39 (  0.51)	test_majacc   0.50 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.48 (  0.50)	test_minacc_d   0.39 (  0.51)	test_majacc_d   0.50 (  0.50)	test_corr_d   0.23 (  0.20)
Test: [  20/  26]	Loss 0.692 (0.693)	test_acc   0.52 (  0.50)	test_minacc   0.55 (  0.50)	test_majacc   0.52 (  0.50)	Loss_d 0.692 (0.693)	test_acc_d   0.52 (  0.50)	test_minacc_d   0.55 (  0.50)	test_majacc_d   0.52 (  0.50)	test_corr_d   0.26 (  0.20)
Test: [  26/  26]	Loss 0.694 (0.693)	test_acc   0.46 (  0.50)	test_minacc   0.49 (  0.50)	test_majacc   0.45 (  0.50)	Loss_d 0.694 (0.693)	test_acc_d   0.46 (  0.50)	test_minacc_d   0.49 (  0.50)	test_majacc_d   0.45 (  0.50)	test_corr_d   0.12 (  0.20)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.81it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.21 ( -0.21)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.21 ( -0.21)
Overall Timing[ 43/  1]	epoch_time 0.0510 (0.0434)	validation_time 0.0004 (0.0005)	train_time 0.0506 (0.0428)
record: (train_acc, test_acc) (0.6626000228524208, 0.6240000128746033)
last accs (train_acc, test_acc) (0.5000000117719173, 0.5)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  6.10it/s] 12%|#1        | 3/26 [00:00<00:02, 10.84it/s] 19%|#9        | 5/26 [00:00<00:01, 12.96it/s] 27%|##6       | 7/26 [00:00<00:01, 14.42it/s] 35%|###4      | 9/26 [00:00<00:01, 15.30it/s] 42%|####2     | 11/26 [00:00<00:00, 15.89it/s] 50%|#####     | 13/26 [00:00<00:00, 16.32it/s] 58%|#####7    | 15/26 [00:01<00:00, 16.55it/s] 65%|######5   | 17/26 [00:01<00:00, 16.72it/s] 73%|#######3  | 19/26 [00:01<00:00, 16.79it/s] 81%|########  | 21/26 [00:01<00:00, 16.81it/s] 88%|########8 | 23/26 [00:01<00:00, 16.88it/s] 96%|#########6| 25/26 [00:01<00:00, 16.88it/s]100%|##########| 26/26 [00:01<00:00, 15.12it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1144 400
penalty weights 10000.0
args.step pgd_anneal_iters 1144 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1145 400
penalty weights 10000.0
args.step pgd_anneal_iters 1145 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1146 400
penalty weights 10000.0
args.step pgd_anneal_iters 1146 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1147 400
penalty weights 10000.0
args.step pgd_anneal_iters 1147 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1148 400
penalty weights 10000.0
args.step pgd_anneal_iters 1148 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1149 400
penalty weights 10000.0
args.step pgd_anneal_iters 1149 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1150 400
penalty weights 10000.0
args.step pgd_anneal_iters 1150 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1151 400
penalty weights 10000.0
args.step pgd_anneal_iters 1151 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1152 400
penalty weights 10000.0
args.step pgd_anneal_iters 1152 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1153 400
penalty weights 10000.0
args.step pgd_anneal_iters 1153 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1154 400
penalty weights 10000.0
args.step pgd_anneal_iters 1154 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1155 400
penalty weights 10000.0
args.step pgd_anneal_iters 1155 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1156 400
penalty weights 10000.0
args.step pgd_anneal_iters 1156 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1157 400
penalty weights 10000.0
args.step pgd_anneal_iters 1157 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1158 400
penalty weights 10000.0
args.step pgd_anneal_iters 1158 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1159 400
penalty weights 10000.0
args.step pgd_anneal_iters 1159 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1160 400
penalty weights 10000.0
args.step pgd_anneal_iters 1160 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1161 400
penalty weights 10000.0
args.step pgd_anneal_iters 1161 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1162 400
penalty weights 10000.0
args.step pgd_anneal_iters 1162 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1163 400
penalty weights 10000.0
args.step pgd_anneal_iters 1163 600
dim_v 512
rho, theta 510 tensor(-2.3019e-05, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1164 400
penalty weights 10000.0
args.step pgd_anneal_iters 1164 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1165 400
penalty weights 10000.0
args.step pgd_anneal_iters 1165 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1166 400
penalty weights 10000.0
args.step pgd_anneal_iters 1166 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1167 400
penalty weights 10000.0
args.step pgd_anneal_iters 1167 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1168 400
penalty weights 10000.0
args.step pgd_anneal_iters 1168 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1169 400
penalty weights 10000.0
args.step pgd_anneal_iters 1169 600
dim_v 512
retunring when rho == dim_v - 1
Epoch: [44][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.14 (  0.14)	train_acc   0.46 (  0.50)	train_minacc   0.49 (  0.50)	train_majacc   0.45 (  0.50)	train_corr   0.00 (  0.00)	l1 5.0419 (5.0572)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 19.43it/s] 31%|###       | 8/26 [00:00<00:00, 40.74it/s]                                               31%|###       | 8/26 [00:00<00:00, 40.74it/s] 50%|#####     | 13/26 [00:00<00:00, 42.45it/s] 73%|#######3  | 19/26 [00:00<00:00, 48.40it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 48.40it/s] 96%|#########6| 25/26 [00:00<00:00, 48.59it/s]100%|##########| 26/26 [00:00<00:00, 41.32it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.49 (  0.49)	test_minacc   0.51 (  0.51)	test_majacc   0.48 (  0.48)	Loss_d 0.693 (0.693)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.48 (  0.48)	test_corr_d   0.18 (  0.18)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.48 (  0.50)	test_minacc   0.39 (  0.51)	test_majacc   0.50 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.48 (  0.50)	test_minacc_d   0.39 (  0.51)	test_majacc_d   0.50 (  0.50)	test_corr_d   0.23 (  0.20)
Test: [  20/  26]	Loss 0.692 (0.693)	test_acc   0.52 (  0.50)	test_minacc   0.55 (  0.50)	test_majacc   0.52 (  0.50)	Loss_d 0.692 (0.693)	test_acc_d   0.52 (  0.50)	test_minacc_d   0.55 (  0.50)	test_majacc_d   0.52 (  0.50)	test_corr_d   0.26 (  0.20)
Test: [  26/  26]	Loss 0.694 (0.693)	test_acc   0.46 (  0.50)	test_minacc   0.49 (  0.50)	test_majacc   0.45 (  0.50)	Loss_d 0.694 (0.693)	test_acc_d   0.46 (  0.50)	test_minacc_d   0.49 (  0.50)	test_majacc_d   0.45 (  0.50)	test_corr_d   0.12 (  0.20)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.97it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.20 ( -0.20)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.20 ( -0.20)
Overall Timing[ 44/  1]	epoch_time 0.0500 (0.0436)	validation_time 0.0004 (0.0005)	train_time 0.0496 (0.0430)
record: (train_acc, test_acc) (0.6626000228524208, 0.6240000128746033)
last accs (train_acc, test_acc) (0.5000000117719173, 0.5)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.80it/s] 12%|#1        | 3/26 [00:00<00:01, 11.59it/s] 19%|#9        | 5/26 [00:00<00:01, 13.64it/s] 27%|##6       | 7/26 [00:00<00:01, 14.70it/s] 35%|###4      | 9/26 [00:00<00:01, 15.41it/s] 42%|####2     | 11/26 [00:00<00:00, 15.90it/s] 50%|#####     | 13/26 [00:00<00:00, 16.28it/s] 58%|#####7    | 15/26 [00:00<00:00, 16.45it/s] 65%|######5   | 17/26 [00:01<00:00, 16.60it/s] 73%|#######3  | 19/26 [00:01<00:00, 16.65it/s] 81%|########  | 21/26 [00:01<00:00, 16.61it/s] 88%|########8 | 23/26 [00:01<00:00, 16.68it/s] 96%|#########6| 25/26 [00:01<00:00, 16.80it/s]100%|##########| 26/26 [00:01<00:00, 15.19it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1170 400
penalty weights 10000.0
args.step pgd_anneal_iters 1170 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1171 400
penalty weights 10000.0
args.step pgd_anneal_iters 1171 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1172 400
penalty weights 10000.0
args.step pgd_anneal_iters 1172 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1173 400
penalty weights 10000.0
args.step pgd_anneal_iters 1173 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1174 400
penalty weights 10000.0
args.step pgd_anneal_iters 1174 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1175 400
penalty weights 10000.0
args.step pgd_anneal_iters 1175 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1176 400
penalty weights 10000.0
args.step pgd_anneal_iters 1176 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1177 400
penalty weights 10000.0
args.step pgd_anneal_iters 1177 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1178 400
penalty weights 10000.0
args.step pgd_anneal_iters 1178 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1179 400
penalty weights 10000.0
args.step pgd_anneal_iters 1179 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1180 400
penalty weights 10000.0
args.step pgd_anneal_iters 1180 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1181 400
penalty weights 10000.0
args.step pgd_anneal_iters 1181 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1182 400
penalty weights 10000.0
args.step pgd_anneal_iters 1182 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1183 400
penalty weights 10000.0
args.step pgd_anneal_iters 1183 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1184 400
penalty weights 10000.0
args.step pgd_anneal_iters 1184 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1185 400
penalty weights 10000.0
args.step pgd_anneal_iters 1185 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1186 400
penalty weights 10000.0
args.step pgd_anneal_iters 1186 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1187 400
penalty weights 10000.0
args.step pgd_anneal_iters 1187 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1188 400
penalty weights 10000.0
args.step pgd_anneal_iters 1188 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1189 400
penalty weights 10000.0
args.step pgd_anneal_iters 1189 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1190 400
penalty weights 10000.0
args.step pgd_anneal_iters 1190 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1191 400
penalty weights 10000.0
args.step pgd_anneal_iters 1191 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1192 400
penalty weights 10000.0
args.step pgd_anneal_iters 1192 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1193 400
penalty weights 10000.0
args.step pgd_anneal_iters 1193 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1194 400
penalty weights 10000.0
args.step pgd_anneal_iters 1194 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1195 400
penalty weights 10000.0
args.step pgd_anneal_iters 1195 600
dim_v 512
retunring when rho == dim_v - 1
Epoch: [45][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.14 (  0.14)	train_acc   0.46 (  0.50)	train_minacc   0.49 (  0.50)	train_majacc   0.45 (  0.50)	train_corr   0.00 (  0.00)	l1 5.0623 (5.0518)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:05,  4.43it/s] 27%|##6       | 7/26 [00:00<00:00, 25.19it/s]                                               27%|##6       | 7/26 [00:00<00:00, 25.19it/s] 50%|#####     | 13/26 [00:00<00:00, 34.68it/s] 73%|#######3  | 19/26 [00:00<00:00, 42.08it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 42.08it/s] 96%|#########6| 25/26 [00:00<00:00, 44.25it/s]100%|##########| 26/26 [00:00<00:00, 34.15it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.49 (  0.49)	test_minacc   0.51 (  0.51)	test_majacc   0.48 (  0.48)	Loss_d 0.693 (0.693)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.48 (  0.48)	test_corr_d   0.17 (  0.17)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.48 (  0.50)	test_minacc   0.39 (  0.51)	test_majacc   0.50 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.48 (  0.50)	test_minacc_d   0.39 (  0.51)	test_majacc_d   0.50 (  0.50)	test_corr_d   0.22 (  0.19)
Test: [  20/  26]	Loss 0.692 (0.693)	test_acc   0.52 (  0.50)	test_minacc   0.55 (  0.50)	test_majacc   0.52 (  0.50)	Loss_d 0.692 (0.693)	test_acc_d   0.52 (  0.50)	test_minacc_d   0.55 (  0.50)	test_majacc_d   0.52 (  0.50)	test_corr_d   0.25 (  0.19)
Test: [  26/  26]	Loss 0.694 (0.693)	test_acc   0.46 (  0.50)	test_minacc   0.49 (  0.50)	test_majacc   0.45 (  0.50)	Loss_d 0.694 (0.693)	test_acc_d   0.46 (  0.50)	test_minacc_d   0.49 (  0.50)	test_majacc_d   0.45 (  0.50)	test_corr_d   0.11 (  0.19)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.11it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.20 ( -0.20)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.20 ( -0.20)
Overall Timing[ 45/  1]	epoch_time 0.0505 (0.0437)	validation_time 0.0004 (0.0005)	train_time 0.0501 (0.0431)
record: (train_acc, test_acc) (0.6626000228524208, 0.6240000128746033)
last accs (train_acc, test_acc) (0.5000000117719173, 0.5)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:06,  4.10it/s] 12%|#1        | 3/26 [00:00<00:02,  9.20it/s] 19%|#9        | 5/26 [00:00<00:01, 12.05it/s] 27%|##6       | 7/26 [00:00<00:01, 13.83it/s] 35%|###4      | 9/26 [00:00<00:01, 14.93it/s] 42%|####2     | 11/26 [00:00<00:00, 15.76it/s] 50%|#####     | 13/26 [00:00<00:00, 16.25it/s] 58%|#####7    | 15/26 [00:01<00:00, 16.48it/s] 65%|######5   | 17/26 [00:01<00:00, 16.75it/s] 73%|#######3  | 19/26 [00:01<00:00, 16.78it/s] 81%|########  | 21/26 [00:01<00:00, 16.81it/s] 88%|########8 | 23/26 [00:01<00:00, 16.99it/s] 96%|#########6| 25/26 [00:01<00:00, 17.12it/s]100%|##########| 26/26 [00:01<00:00, 14.69it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1196 400
penalty weights 10000.0
args.step pgd_anneal_iters 1196 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1197 400
penalty weights 10000.0
args.step pgd_anneal_iters 1197 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1198 400
penalty weights 10000.0
args.step pgd_anneal_iters 1198 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1199 400
penalty weights 10000.0
args.step pgd_anneal_iters 1199 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1200 400
penalty weights 10000.0
args.step pgd_anneal_iters 1200 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1201 400
penalty weights 10000.0
args.step pgd_anneal_iters 1201 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1202 400
penalty weights 10000.0
args.step pgd_anneal_iters 1202 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1203 400
penalty weights 10000.0
args.step pgd_anneal_iters 1203 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1204 400
penalty weights 10000.0
args.step pgd_anneal_iters 1204 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1205 400
penalty weights 10000.0
args.step pgd_anneal_iters 1205 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1206 400
penalty weights 10000.0
args.step pgd_anneal_iters 1206 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1207 400
penalty weights 10000.0
args.step pgd_anneal_iters 1207 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1208 400
penalty weights 10000.0
args.step pgd_anneal_iters 1208 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1209 400
penalty weights 10000.0
args.step pgd_anneal_iters 1209 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1210 400
penalty weights 10000.0
args.step pgd_anneal_iters 1210 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1211 400
penalty weights 10000.0
args.step pgd_anneal_iters 1211 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1212 400
penalty weights 10000.0
args.step pgd_anneal_iters 1212 600
dim_v 512
rho, theta 510 tensor(-2.0830e-05, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1213 400
penalty weights 10000.0
args.step pgd_anneal_iters 1213 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1214 400
penalty weights 10000.0
args.step pgd_anneal_iters 1214 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1215 400
penalty weights 10000.0
args.step pgd_anneal_iters 1215 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1216 400
penalty weights 10000.0
args.step pgd_anneal_iters 1216 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1217 400
penalty weights 10000.0
args.step pgd_anneal_iters 1217 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1218 400
penalty weights 10000.0
args.step pgd_anneal_iters 1218 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1219 400
penalty weights 10000.0
args.step pgd_anneal_iters 1219 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1220 400
penalty weights 10000.0
args.step pgd_anneal_iters 1220 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1221 400
penalty weights 10000.0
args.step pgd_anneal_iters 1221 600
dim_v 512
retunring when rho == dim_v - 1
Epoch: [46][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.14 (  0.14)	train_acc   0.46 (  0.50)	train_minacc   0.49 (  0.50)	train_majacc   0.45 (  0.50)	train_corr   0.00 (  0.00)	l1 5.0457 (5.0582)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.01it/s] 27%|##6       | 7/26 [00:00<00:00, 32.86it/s]                                               27%|##6       | 7/26 [00:00<00:00, 32.86it/s] 50%|#####     | 13/26 [00:00<00:00, 38.28it/s] 73%|#######3  | 19/26 [00:00<00:00, 44.65it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 44.65it/s] 96%|#########6| 25/26 [00:00<00:00, 45.75it/s]100%|##########| 26/26 [00:00<00:00, 37.59it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.49 (  0.49)	test_minacc   0.51 (  0.51)	test_majacc   0.48 (  0.48)	Loss_d 0.693 (0.693)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.48 (  0.48)	test_corr_d   0.17 (  0.17)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.48 (  0.50)	test_minacc   0.39 (  0.51)	test_majacc   0.50 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.48 (  0.50)	test_minacc_d   0.39 (  0.51)	test_majacc_d   0.50 (  0.50)	test_corr_d   0.21 (  0.18)
Test: [  20/  26]	Loss 0.692 (0.693)	test_acc   0.52 (  0.50)	test_minacc   0.55 (  0.50)	test_majacc   0.52 (  0.50)	Loss_d 0.692 (0.693)	test_acc_d   0.52 (  0.50)	test_minacc_d   0.55 (  0.50)	test_majacc_d   0.52 (  0.50)	test_corr_d   0.24 (  0.18)
Test: [  26/  26]	Loss 0.694 (0.693)	test_acc   0.46 (  0.50)	test_minacc   0.49 (  0.50)	test_majacc   0.45 (  0.50)	Loss_d 0.694 (0.693)	test_acc_d   0.46 (  0.50)	test_minacc_d   0.49 (  0.50)	test_majacc_d   0.45 (  0.50)	test_corr_d   0.11 (  0.19)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.32it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.19 ( -0.19)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.19 ( -0.19)
Overall Timing[ 46/  1]	epoch_time 0.0506 (0.0439)	validation_time 0.0003 (0.0005)	train_time 0.0503 (0.0433)
record: (train_acc, test_acc) (0.6626000228524208, 0.6240000128746033)
last accs (train_acc, test_acc) (0.5000000117719173, 0.5)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.05it/s] 12%|#1        | 3/26 [00:00<00:02,  9.98it/s] 19%|#9        | 5/26 [00:00<00:01, 12.64it/s] 27%|##6       | 7/26 [00:00<00:01, 14.17it/s] 35%|###4      | 9/26 [00:00<00:01, 15.14it/s] 42%|####2     | 11/26 [00:00<00:00, 15.65it/s] 50%|#####     | 13/26 [00:00<00:00, 15.98it/s] 58%|#####7    | 15/26 [00:01<00:00, 16.34it/s] 65%|######5   | 17/26 [00:01<00:00, 16.44it/s] 73%|#######3  | 19/26 [00:01<00:00, 16.50it/s] 81%|########  | 21/26 [00:01<00:00, 16.71it/s] 88%|########8 | 23/26 [00:01<00:00, 16.89it/s] 96%|#########6| 25/26 [00:01<00:00, 16.88it/s]100%|##########| 26/26 [00:01<00:00, 14.90it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1222 400
penalty weights 10000.0
args.step pgd_anneal_iters 1222 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1223 400
penalty weights 10000.0
args.step pgd_anneal_iters 1223 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1224 400
penalty weights 10000.0
args.step pgd_anneal_iters 1224 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1225 400
penalty weights 10000.0
args.step pgd_anneal_iters 1225 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1226 400
penalty weights 10000.0
args.step pgd_anneal_iters 1226 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1227 400
penalty weights 10000.0
args.step pgd_anneal_iters 1227 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1228 400
penalty weights 10000.0
args.step pgd_anneal_iters 1228 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1229 400
penalty weights 10000.0
args.step pgd_anneal_iters 1229 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1230 400
penalty weights 10000.0
args.step pgd_anneal_iters 1230 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1231 400
penalty weights 10000.0
args.step pgd_anneal_iters 1231 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1232 400
penalty weights 10000.0
args.step pgd_anneal_iters 1232 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1233 400
penalty weights 10000.0
args.step pgd_anneal_iters 1233 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1234 400
penalty weights 10000.0
args.step pgd_anneal_iters 1234 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1235 400
penalty weights 10000.0
args.step pgd_anneal_iters 1235 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1236 400
penalty weights 10000.0
args.step pgd_anneal_iters 1236 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1237 400
penalty weights 10000.0
args.step pgd_anneal_iters 1237 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1238 400
penalty weights 10000.0
args.step pgd_anneal_iters 1238 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1239 400
penalty weights 10000.0
args.step pgd_anneal_iters 1239 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1240 400
penalty weights 10000.0
args.step pgd_anneal_iters 1240 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1241 400
penalty weights 10000.0
args.step pgd_anneal_iters 1241 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1242 400
penalty weights 10000.0
args.step pgd_anneal_iters 1242 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1243 400
penalty weights 10000.0
args.step pgd_anneal_iters 1243 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1244 400
penalty weights 10000.0
args.step pgd_anneal_iters 1244 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1245 400
penalty weights 10000.0
args.step pgd_anneal_iters 1245 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1246 400
penalty weights 10000.0
args.step pgd_anneal_iters 1246 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1247 400
penalty weights 10000.0
args.step pgd_anneal_iters 1247 600
dim_v 512
retunring when rho == dim_v - 1
Epoch: [47][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.14 (  0.14)	train_acc   0.46 (  0.50)	train_minacc   0.49 (  0.50)	train_majacc   0.45 (  0.50)	train_corr   0.00 (  0.00)	l1 5.0655 (5.0554)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.32it/s] 27%|##6       | 7/26 [00:00<00:00, 38.06it/s]                                               27%|##6       | 7/26 [00:00<00:00, 38.06it/s] 50%|#####     | 13/26 [00:00<00:00, 43.24it/s] 73%|#######3  | 19/26 [00:00<00:00, 48.54it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 48.54it/s] 96%|#########6| 25/26 [00:00<00:00, 48.26it/s]100%|##########| 26/26 [00:00<00:00, 40.71it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.49 (  0.49)	test_minacc   0.51 (  0.51)	test_majacc   0.48 (  0.48)	Loss_d 0.693 (0.693)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.48 (  0.48)	test_corr_d   0.15 (  0.15)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.48 (  0.50)	test_minacc   0.39 (  0.51)	test_majacc   0.50 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.48 (  0.50)	test_minacc_d   0.39 (  0.51)	test_majacc_d   0.50 (  0.50)	test_corr_d   0.20 (  0.17)
Test: [  20/  26]	Loss 0.692 (0.693)	test_acc   0.52 (  0.50)	test_minacc   0.55 (  0.50)	test_majacc   0.52 (  0.50)	Loss_d 0.692 (0.693)	test_acc_d   0.52 (  0.50)	test_minacc_d   0.55 (  0.50)	test_majacc_d   0.52 (  0.50)	test_corr_d   0.23 (  0.17)
Test: [  26/  26]	Loss 0.694 (0.693)	test_acc   0.46 (  0.50)	test_minacc   0.49 (  0.50)	test_majacc   0.45 (  0.50)	Loss_d 0.694 (0.693)	test_acc_d   0.46 (  0.50)	test_minacc_d   0.49 (  0.50)	test_majacc_d   0.45 (  0.50)	test_corr_d   0.11 (  0.17)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.88it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.18 ( -0.18)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.18 ( -0.18)
Overall Timing[ 47/  1]	epoch_time 0.0492 (0.0440)	validation_time 0.0004 (0.0005)	train_time 0.0488 (0.0434)
record: (train_acc, test_acc) (0.6626000228524208, 0.6240000128746033)
last accs (train_acc, test_acc) (0.5000000117719173, 0.5)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.58it/s] 12%|#1        | 3/26 [00:00<00:02, 11.02it/s] 19%|#9        | 5/26 [00:00<00:01, 12.83it/s] 27%|##6       | 7/26 [00:00<00:01, 14.32it/s] 35%|###4      | 9/26 [00:00<00:01, 15.09it/s] 42%|####2     | 11/26 [00:00<00:00, 15.72it/s] 50%|#####     | 13/26 [00:00<00:00, 16.03it/s] 58%|#####7    | 15/26 [00:01<00:00, 16.37it/s] 65%|######5   | 17/26 [00:01<00:00, 16.46it/s] 73%|#######3  | 19/26 [00:01<00:00, 16.70it/s] 81%|########  | 21/26 [00:01<00:00, 16.78it/s] 88%|########8 | 23/26 [00:01<00:00, 16.88it/s] 96%|#########6| 25/26 [00:01<00:00, 16.94it/s]100%|##########| 26/26 [00:01<00:00, 15.12it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1248 400
penalty weights 10000.0
args.step pgd_anneal_iters 1248 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1249 400
penalty weights 10000.0
args.step pgd_anneal_iters 1249 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1250 400
penalty weights 10000.0
args.step pgd_anneal_iters 1250 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1251 400
penalty weights 10000.0
args.step pgd_anneal_iters 1251 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1252 400
penalty weights 10000.0
args.step pgd_anneal_iters 1252 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1253 400
penalty weights 10000.0
args.step pgd_anneal_iters 1253 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1254 400
penalty weights 10000.0
args.step pgd_anneal_iters 1254 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1255 400
penalty weights 10000.0
args.step pgd_anneal_iters 1255 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1256 400
penalty weights 10000.0
args.step pgd_anneal_iters 1256 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1257 400
penalty weights 10000.0
args.step pgd_anneal_iters 1257 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1258 400
penalty weights 10000.0
args.step pgd_anneal_iters 1258 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1259 400
penalty weights 10000.0
args.step pgd_anneal_iters 1259 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1260 400
penalty weights 10000.0
args.step pgd_anneal_iters 1260 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1261 400
penalty weights 10000.0
args.step pgd_anneal_iters 1261 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1262 400
penalty weights 10000.0
args.step pgd_anneal_iters 1262 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1263 400
penalty weights 10000.0
args.step pgd_anneal_iters 1263 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1264 400
penalty weights 10000.0
args.step pgd_anneal_iters 1264 600
dim_v 512
rho, theta 510 tensor(-1.7659e-05, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1265 400
penalty weights 10000.0
args.step pgd_anneal_iters 1265 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1266 400
penalty weights 10000.0
args.step pgd_anneal_iters 1266 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1267 400
penalty weights 10000.0
args.step pgd_anneal_iters 1267 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1268 400
penalty weights 10000.0
args.step pgd_anneal_iters 1268 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1269 400
penalty weights 10000.0
args.step pgd_anneal_iters 1269 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1270 400
penalty weights 10000.0
args.step pgd_anneal_iters 1270 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1271 400
penalty weights 10000.0
args.step pgd_anneal_iters 1271 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1272 400
penalty weights 10000.0
args.step pgd_anneal_iters 1272 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1273 400
penalty weights 10000.0
args.step pgd_anneal_iters 1273 600
dim_v 512
retunring when rho == dim_v - 1
Epoch: [48][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.14 (  0.14)	train_acc   0.46 (  0.50)	train_minacc   0.49 (  0.50)	train_majacc   0.45 (  0.50)	train_corr   0.00 (  0.00)	l1 5.0462 (5.0604)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 18.89it/s] 31%|###       | 8/26 [00:00<00:00, 41.83it/s]                                               31%|###       | 8/26 [00:00<00:00, 41.83it/s] 50%|#####     | 13/26 [00:00<00:00, 44.13it/s] 73%|#######3  | 19/26 [00:00<00:00, 48.23it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 48.23it/s] 96%|#########6| 25/26 [00:00<00:00, 48.91it/s]100%|##########| 26/26 [00:00<00:00, 41.48it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.49 (  0.49)	test_minacc   0.51 (  0.51)	test_majacc   0.48 (  0.48)	Loss_d 0.693 (0.693)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.48 (  0.48)	test_corr_d   0.14 (  0.14)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.48 (  0.50)	test_minacc   0.39 (  0.51)	test_majacc   0.50 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.48 (  0.50)	test_minacc_d   0.39 (  0.51)	test_majacc_d   0.50 (  0.50)	test_corr_d   0.20 (  0.17)
Test: [  20/  26]	Loss 0.692 (0.693)	test_acc   0.52 (  0.50)	test_minacc   0.55 (  0.50)	test_majacc   0.52 (  0.50)	Loss_d 0.692 (0.693)	test_acc_d   0.52 (  0.50)	test_minacc_d   0.55 (  0.50)	test_majacc_d   0.52 (  0.50)	test_corr_d   0.22 (  0.17)
Test: [  26/  26]	Loss 0.694 (0.693)	test_acc   0.46 (  0.50)	test_minacc   0.49 (  0.50)	test_majacc   0.45 (  0.50)	Loss_d 0.694 (0.693)	test_acc_d   0.46 (  0.50)	test_minacc_d   0.49 (  0.50)	test_majacc_d   0.45 (  0.50)	test_corr_d   0.11 (  0.17)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.56it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.17 ( -0.17)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.17 ( -0.17)
Overall Timing[ 48/  1]	epoch_time 0.0496 (0.0441)	validation_time 0.0003 (0.0005)	train_time 0.0493 (0.0435)
record: (train_acc, test_acc) (0.6626000228524208, 0.6240000128746033)
last accs (train_acc, test_acc) (0.5000000117719173, 0.5)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.07it/s] 12%|#1        | 3/26 [00:00<00:02,  9.95it/s] 19%|#9        | 5/26 [00:00<00:01, 12.55it/s] 27%|##6       | 7/26 [00:00<00:01, 14.03it/s] 35%|###4      | 9/26 [00:00<00:01, 14.98it/s] 42%|####2     | 11/26 [00:00<00:00, 15.61it/s] 50%|#####     | 13/26 [00:00<00:00, 15.92it/s] 58%|#####7    | 15/26 [00:01<00:00, 16.08it/s] 65%|######5   | 17/26 [00:01<00:00, 16.20it/s] 73%|#######3  | 19/26 [00:01<00:00, 16.47it/s] 81%|########  | 21/26 [00:01<00:00, 16.66it/s] 88%|########8 | 23/26 [00:01<00:00, 16.81it/s] 96%|#########6| 25/26 [00:01<00:00, 16.93it/s]100%|##########| 26/26 [00:01<00:00, 14.84it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1274 400
penalty weights 10000.0
args.step pgd_anneal_iters 1274 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1275 400
penalty weights 10000.0
args.step pgd_anneal_iters 1275 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1276 400
penalty weights 10000.0
args.step pgd_anneal_iters 1276 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1277 400
penalty weights 10000.0
args.step pgd_anneal_iters 1277 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1278 400
penalty weights 10000.0
args.step pgd_anneal_iters 1278 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1279 400
penalty weights 10000.0
args.step pgd_anneal_iters 1279 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1280 400
penalty weights 10000.0
args.step pgd_anneal_iters 1280 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1281 400
penalty weights 10000.0
args.step pgd_anneal_iters 1281 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1282 400
penalty weights 10000.0
args.step pgd_anneal_iters 1282 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1283 400
penalty weights 10000.0
args.step pgd_anneal_iters 1283 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1284 400
penalty weights 10000.0
args.step pgd_anneal_iters 1284 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1285 400
penalty weights 10000.0
args.step pgd_anneal_iters 1285 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1286 400
penalty weights 10000.0
args.step pgd_anneal_iters 1286 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1287 400
penalty weights 10000.0
args.step pgd_anneal_iters 1287 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1288 400
penalty weights 10000.0
args.step pgd_anneal_iters 1288 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1289 400
penalty weights 10000.0
args.step pgd_anneal_iters 1289 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1290 400
penalty weights 10000.0
args.step pgd_anneal_iters 1290 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1291 400
penalty weights 10000.0
args.step pgd_anneal_iters 1291 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1292 400
penalty weights 10000.0
args.step pgd_anneal_iters 1292 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1293 400
penalty weights 10000.0
args.step pgd_anneal_iters 1293 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1294 400
penalty weights 10000.0
args.step pgd_anneal_iters 1294 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1295 400
penalty weights 10000.0
args.step pgd_anneal_iters 1295 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1296 400
penalty weights 10000.0
args.step pgd_anneal_iters 1296 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1297 400
penalty weights 10000.0
args.step pgd_anneal_iters 1297 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1298 400
penalty weights 10000.0
args.step pgd_anneal_iters 1298 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1299 400
penalty weights 10000.0
args.step pgd_anneal_iters 1299 600
dim_v 512
retunring when rho == dim_v - 1
Epoch: [49][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.14 (  0.14)	train_acc   0.46 (  0.50)	train_minacc   0.49 (  0.50)	train_majacc   0.45 (  0.50)	train_corr   0.00 (  0.00)	l1 5.0650 (5.0554)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 19.72it/s] 31%|###       | 8/26 [00:00<00:00, 42.79it/s]                                               31%|###       | 8/26 [00:00<00:00, 42.79it/s] 50%|#####     | 13/26 [00:00<00:00, 42.01it/s] 73%|#######3  | 19/26 [00:00<00:00, 48.14it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 48.14it/s] 96%|#########6| 25/26 [00:00<00:00, 47.75it/s]100%|##########| 26/26 [00:00<00:00, 40.98it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.49 (  0.49)	test_minacc   0.51 (  0.51)	test_majacc   0.48 (  0.48)	Loss_d 0.693 (0.693)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.48 (  0.48)	test_corr_d   0.13 (  0.13)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.48 (  0.50)	test_minacc   0.39 (  0.51)	test_majacc   0.50 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.48 (  0.50)	test_minacc_d   0.39 (  0.51)	test_majacc_d   0.50 (  0.50)	test_corr_d   0.18 (  0.15)
Test: [  20/  26]	Loss 0.692 (0.693)	test_acc   0.52 (  0.50)	test_minacc   0.55 (  0.50)	test_majacc   0.52 (  0.50)	Loss_d 0.692 (0.693)	test_acc_d   0.52 (  0.50)	test_minacc_d   0.55 (  0.50)	test_majacc_d   0.52 (  0.50)	test_corr_d   0.20 (  0.15)
Test: [  26/  26]	Loss 0.694 (0.693)	test_acc   0.46 (  0.50)	test_minacc   0.49 (  0.50)	test_majacc   0.45 (  0.50)	Loss_d 0.694 (0.693)	test_acc_d   0.46 (  0.50)	test_minacc_d   0.49 (  0.50)	test_majacc_d   0.45 (  0.50)	test_corr_d   0.11 (  0.16)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.76it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.16 ( -0.16)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.16 ( -0.16)
Overall Timing[ 49/  1]	epoch_time 0.0509 (0.0442)	validation_time 0.0004 (0.0005)	train_time 0.0505 (0.0436)
record: (train_acc, test_acc) (0.6626000228524208, 0.6240000128746033)
last accs (train_acc, test_acc) (0.5000000117719173, 0.5)
done saving aggregate.csv to ./aggregate.csv
wandb: - 0.156 MB of 0.156 MB uploadedwandb: \ 0.156 MB of 0.156 MB uploadedwandb: | 0.156 MB of 0.156 MB uploadedwandb: / 0.156 MB of 0.156 MB uploadedwandb: - 0.156 MB of 0.156 MB uploadedwandb: \ 0.156 MB of 0.156 MB uploadedwandb: | 0.156 MB of 0.156 MB uploadedwandb: / 0.156 MB of 0.156 MB uploadedwandb: - 0.178 MB of 0.497 MB uploaded (0.003 MB deduped)wandb: \ 0.512 MB of 0.512 MB uploaded (0.003 MB deduped)wandb: 
wandb: Run history:
wandb:                                                                           global_step ▁▁▁▁▂▂▂▂▂▃▃▃▃▃▃▄▄▄▄▄▅▅▅▅▅▅▆▆▆▆▆▆▇▇▇▇▇███
wandb:      resnet18-usc-unsigned/baseline/prune_rate=1.0/29/logs/diagnostics/epoch_time_val █▁▁▁▁▁▁▁▁▁▁▁▂▁▁▁▁▁▁▃▁▁▃▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▃▄
wandb:      resnet18-usc-unsigned/baseline/prune_rate=1.0/29/logs/diagnostics/train_time_val █▂▁▁▁▂▁▁▂▂▁▁▂▁▁▁▁▁▁▄▁▁▄▅▅▄▅▄▅▄▄▅▄▄▅▅▄▅▄▅
wandb: resnet18-usc-unsigned/baseline/prune_rate=1.0/29/logs/diagnostics/validation_time_val █▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:                     resnet18-usc-unsigned/baseline/prune_rate=1.0/29/logs/global_step ▁▁▁▁▂▂▂▂▂▃▃▃▃▃▃▄▄▄▄▄▅▅▅▅▅▅▆▆▆▆▆▆▇▇▇▇▇███
wandb:                   resnet18-usc-unsigned/baseline/prune_rate=1.0/29/logs/test/Loss_avg ▇▇▇▇▇██▆██▆▆▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:                 resnet18-usc-unsigned/baseline/prune_rate=1.0/29/logs/test/Loss_d_avg ▇▇▇▇▇██▆██▆▆▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:                 resnet18-usc-unsigned/baseline/prune_rate=1.0/29/logs/test/Loss_d_val ▇▇▇▇▇██▆██▆▆▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:                   resnet18-usc-unsigned/baseline/prune_rate=1.0/29/logs/test/Loss_val ▇▇▇▇▇██▆██▆▆▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:               resnet18-usc-unsigned/baseline/prune_rate=1.0/29/logs/test/test_acc_avg ▁▁▁▂▁▁▁▂▁▂▂▃█▇▇▇▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/29/logs/test/test_acc_d_avg ▁▁▁▂▁▁▁▂▁▂▂▃█▇▇▇▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/29/logs/test/test_acc_d_val ▁▁▁▂▁▁▁▂▁▂▂▃█▇▇▇▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆
wandb:               resnet18-usc-unsigned/baseline/prune_rate=1.0/29/logs/test/test_acc_val ▁▁▁▂▁▁▁▂▁▂▂▃█▇▇▇▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/29/logs/test/test_corr_d_avg ██▇▇███▇█▇▇▇▁▁▂▂▂▂▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▂▂▂▂▂▂▂
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/29/logs/test/test_corr_d_val ██▇▇███▇█▇▇▇▁▁▂▂▂▂▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▂▂▂▂▂▂▂
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/29/logs/test/test_majacc_avg ████████████▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/29/logs/test/test_majacc_d_avg ████████████▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/29/logs/test/test_majacc_d_val ████████████▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/29/logs/test/test_majacc_val ████████████▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/29/logs/test/test_minacc_avg ▁▁▁▂▁▁▁▂▁▂▂▂█▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/29/logs/test/test_minacc_d_avg ▁▁▁▂▁▁▁▂▁▂▂▂█▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/29/logs/test/test_minacc_d_val ▁▁▁▂▁▁▁▂▁▂▂▂█▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/29/logs/test/test_minacc_val ▁▁▁▂▁▁▁▂▁▂▂▂█▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇
wandb:                  resnet18-usc-unsigned/baseline/prune_rate=1.0/29/logs/train/Loss_avg █▅▃▂▂▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:                  resnet18-usc-unsigned/baseline/prune_rate=1.0/29/logs/train/Loss_val █▄▃▂▂▂▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:                    resnet18-usc-unsigned/baseline/prune_rate=1.0/29/logs/train/l1_avg ▂▂▂▁▁▂▂▃▅▆▆▇███████▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:                    resnet18-usc-unsigned/baseline/prune_rate=1.0/29/logs/train/l1_val ▂▂▁▁▁▂▃▄▅▆▇████████▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/29/logs/train/train_acc_avg ▇███████████▇▃▂▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/29/logs/train/train_acc_val ████████████▄▂▂▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/29/logs/train/train_corr_avg ▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/29/logs/train/train_corr_val ▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/29/logs/train/train_majacc_avg ▇███████████▆▂▁▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/29/logs/train/train_majacc_val ████████████▃▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/29/logs/train/train_minacc_avg ▂▁▁▂▂▂▃▂▃▃▃▃▇█▇█▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/29/logs/train/train_minacc_val ▁▁▁▁▁▁▁▁▁▁▂▂█▆▆▇▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/29/logs/train/train_nll_avg ▅▂▂▂▂▂▁▁▁▁▁▁▃▇██████████████████████████
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/29/logs/train/train_nll_val ▃▂▂▁▂▂▂▂▂▁▁▁▇███████████████████████████
wandb:         resnet18-usc-unsigned/baseline/prune_rate=1.0/29/logs/train/train_penalty_avg █▄▃▃▂▂▂▂▂▂▂▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:         resnet18-usc-unsigned/baseline/prune_rate=1.0/29/logs/train/train_penalty_val █▇█▆▇▇█▆▆▅▄▅▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:           resnet18-usc-unsigned/baseline/prune_rate=1.0/29/logs/train/weight_norm_avg █▅▃▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:           resnet18-usc-unsigned/baseline/prune_rate=1.0/29/logs/train/weight_norm_val █▄▃▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb: 
wandb: Run summary:
wandb:                                                                           global_step 49
wandb:      resnet18-usc-unsigned/baseline/prune_rate=1.0/29/logs/diagnostics/epoch_time_val 0.05091
wandb:      resnet18-usc-unsigned/baseline/prune_rate=1.0/29/logs/diagnostics/train_time_val 0.0505
wandb: resnet18-usc-unsigned/baseline/prune_rate=1.0/29/logs/diagnostics/validation_time_val 0.0004
wandb:                     resnet18-usc-unsigned/baseline/prune_rate=1.0/29/logs/global_step 49
wandb:                   resnet18-usc-unsigned/baseline/prune_rate=1.0/29/logs/test/Loss_avg 0.69289
wandb:                 resnet18-usc-unsigned/baseline/prune_rate=1.0/29/logs/test/Loss_d_avg 0.69289
wandb:                 resnet18-usc-unsigned/baseline/prune_rate=1.0/29/logs/test/Loss_d_val 0.69289
wandb:                   resnet18-usc-unsigned/baseline/prune_rate=1.0/29/logs/test/Loss_val 0.69289
wandb:               resnet18-usc-unsigned/baseline/prune_rate=1.0/29/logs/test/test_acc_avg 0.5
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/29/logs/test/test_acc_d_avg 0.5
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/29/logs/test/test_acc_d_val 0.5
wandb:               resnet18-usc-unsigned/baseline/prune_rate=1.0/29/logs/test/test_acc_val 0.5
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/29/logs/test/test_corr_d_avg -0.16271
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/29/logs/test/test_corr_d_val -0.16271
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/29/logs/test/test_majacc_avg 0.5
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/29/logs/test/test_majacc_d_avg 0.5
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/29/logs/test/test_majacc_d_val 0.5
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/29/logs/test/test_majacc_val 0.5
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/29/logs/test/test_minacc_avg 0.5
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/29/logs/test/test_minacc_d_avg 0.5
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/29/logs/test/test_minacc_d_val 0.5
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/29/logs/test/test_minacc_val 0.5
wandb:                  resnet18-usc-unsigned/baseline/prune_rate=1.0/29/logs/train/Loss_avg 8e-05
wandb:                  resnet18-usc-unsigned/baseline/prune_rate=1.0/29/logs/train/Loss_val 8e-05
wandb:                    resnet18-usc-unsigned/baseline/prune_rate=1.0/29/logs/train/l1_avg 5.05538
wandb:                    resnet18-usc-unsigned/baseline/prune_rate=1.0/29/logs/train/l1_val 5.06496
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/29/logs/train/train_acc_avg 0.5
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/29/logs/train/train_acc_val 0.46
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/29/logs/train/train_corr_avg 0.0
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/29/logs/train/train_corr_val 0.0
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/29/logs/train/train_majacc_avg 0.49995
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/29/logs/train/train_majacc_val 0.45411
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/29/logs/train/train_minacc_avg 0.50205
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/29/logs/train/train_minacc_val 0.48837
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/29/logs/train/train_nll_avg 0.69282
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/29/logs/train/train_nll_val 0.69398
wandb:         resnet18-usc-unsigned/baseline/prune_rate=1.0/29/logs/train/train_penalty_avg 0.0
wandb:         resnet18-usc-unsigned/baseline/prune_rate=1.0/29/logs/train/train_penalty_val 0.0
wandb:           resnet18-usc-unsigned/baseline/prune_rate=1.0/29/logs/train/weight_norm_avg 0.14126
wandb:           resnet18-usc-unsigned/baseline/prune_rate=1.0/29/logs/train/weight_norm_val 0.14115
wandb: 
wandb: 🚀 View run name_random at: https://wandb.ai/janezdu-uiuc/irm/runs/1r7kax4h
wandb: ⭐️ View project at: https://wandb.ai/janezdu-uiuc/irm
wandb: Synced 5 W&B file(s), 0 media file(s), 2 artifact file(s) and 1 other file(s)
wandb: Find logs at: ./wandb/run-20240906_145840-1r7kax4h/logs
wandb: WARNING The new W&B backend becomes opt-out in version 0.18.0; try it out with `wandb.require("core")`! See https://wandb.me/wandb-core for more information.
wandb: Currently logged in as: janezdu (janezdu-uiuc). Use `wandb login --relogin` to force relogin
wandb: wandb version 0.17.9 is available!  To upgrade, please run:
wandb:  $ pip install wandb --upgrade
wandb: Tracking run with wandb version 0.17.7
wandb: Run data is saved locally in /scratch/users/zd16/sparseIRM-resnet-ver/wandb/run-20240906_150133-s7waqt0n
wandb: Run `wandb offline` to turn off syncing.
wandb: Syncing run name_random
wandb: ⭐️ View project at https://wandb.ai/janezdu-uiuc/irm
wandb: 🚀 View run at https://wandb.ai/janezdu-uiuc/irm/runs/s7waqt0n
=> Reading YAML config from configs/smallscale/resnet18/resnet18-usc-unsigned.yaml
Namespace(data='dataset/', optimizer='adam', weight_opt='adam', set='mnistcifar', arch='ResNet18', config='configs/smallscale/resnet18/resnet18-usc-unsigned.yaml', log_dir=None, workers=4, epochs=50, start_epoch=None, batch_size=390, lr=0.006, warmup_length=0, momentum=0.9, weight_decay=0.0, print_freq=10, num_classes=1, resume='', resume_train_weights='', evaluate=False, pretrained=None, pretrained_distill=None, alpha_distill=0.95, T_distill=2, seed=0, multigpu=[0], lr_policy='cosine_lr', lr_adjust=30, lr_gamma=0.1, name='baseline', save_every=-1, prune_rate=1.0, param_prune_rate=0.0, pr_start=1.0, low_data=1, width_mult=1.0, nesterov=False, threetimes=False, random_subnet=False, one_batch=False, conv_type='DenseConv', freeze_weights=False, st=False, mode='fan_in', nonlinearity='relu', bn_type='LearnedBatchNorm', init='kaiming_normal', no_bn_decay=False, scale_fan=False, first_layer_dense=False, last_layer_dense=True, approx=False, zero=False, flip=False, bs=False, gumbel_sample=False, multiply_prob=False, no_multiply=False, multiply_cont=False, multiply_prob_bs=False, indiv=False, label_smoothing=None, first_layer_type=None, trainer='default', score_init_constant=1.0, K=1, update_freq=20, D=0.01, T=1, TA=True, TA2=False, TA_grow=False, center=False, straight_through=False, PLA_factor=0.1, PLA_patience=10, gradient_loss_para=0, abs_loss_para=0, thres=0.9, runs_name='name_random', resume_compare_loss1='', resume_compare_loss2='', init_weights='', trained_mask='', weight_rescaling=False, constrain_by_layer=False, weight_rescaling_data=False, use_running_stats=False, not_clipping=False, rescaling_para=False, lasso_para=0, dont_freeze_weights=False, iterative=True, prob_by_weight=False, rescale_at_fix_subnet=False, train_weights_at_the_same_time=False, sample_from_training_set=False, load_true_para=False, distill=False, finetune=False, stablize=False, prev_best=0, weight_opt_lr=0.0006, n=500, ts=0.28, te=0.6, d=20000, s=80, c=0.75, init_prob=False, thres_before=0.001, wide_ratio=0.001, noise=1, cal_p_q=False, just_finetune=False, snip=False, envs_num=2, l2_regularizer_weight=0.001, data_num=50000, env_type='linear', irm_type='irmv1', hidden_dim=390, penalty_anneal_iters=400, penalty_weight=10000.0, grayscale_model=0, weight_lr_schedule=False, fix_subnet=False, freeze_weight=False, step='ours', prior_sd_coef=0, dim_inv=2, variance_gamma=1.0, dim_spu=10, image_scale=32, cons_ratio='0.999_0.7_0.1', noise_ratio=0.2, step_gamma=0.1, step_round=3, inner_steps=1, use_pgd=True, z=7.0, pgd_anneal_iters=600)
=> Creating model 'ResNet18'
Here!!!!!!!!
==> Conv Type: DenseConv
==> BN Type: LearnedBatchNorm
<class 'torch.nn.modules.conv.Conv2d'>
<class 'torch.nn.modules.batchnorm.BatchNorm2d'>
==> Building first layer with <class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
ResNet(
  (conv1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
  (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (relu): ReLU(inplace=True)
  (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
  (layer1): Sequential(
    (0): BasicBlock(
      (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (1): BasicBlock(
      (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (layer2): Sequential(
    (0): BasicBlock(
      (conv1): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (downsample): Sequential(
        (0): Conv2d(64, 128, kernel_size=(1, 1), stride=(2, 2), bias=False)
        (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (1): BasicBlock(
      (conv1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (layer3): Sequential(
    (0): BasicBlock(
      (conv1): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (downsample): Sequential(
        (0): Conv2d(128, 256, kernel_size=(1, 1), stride=(2, 2), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (1): BasicBlock(
      (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (layer4): Sequential(
    (0): BasicBlock(
      (conv1): Conv2d(256, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (downsample): Sequential(
        (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (1): BasicBlock(
      (conv1): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (avgpool): AdaptiveAvgPool2d(output_size=1)
  (fc): Linear(in_features=512, out_features=1, bias=True)
)
=> Parallelizing on [0] gpus
<DEBUG> gradient to module.conv1.weight
<DEBUG> gradient to module.bn1.weight
<DEBUG> gradient to module.bn1.bias
<DEBUG> gradient to module.layer1.0.conv1.weight
<DEBUG> gradient to module.layer1.0.bn1.weight
<DEBUG> gradient to module.layer1.0.bn1.bias
<DEBUG> gradient to module.layer1.0.conv2.weight
<DEBUG> gradient to module.layer1.0.bn2.weight
<DEBUG> gradient to module.layer1.0.bn2.bias
<DEBUG> gradient to module.layer1.1.conv1.weight
<DEBUG> gradient to module.layer1.1.bn1.weight
<DEBUG> gradient to module.layer1.1.bn1.bias
<DEBUG> gradient to module.layer1.1.conv2.weight
<DEBUG> gradient to module.layer1.1.bn2.weight
<DEBUG> gradient to module.layer1.1.bn2.bias
<DEBUG> gradient to module.layer2.0.conv1.weight
<DEBUG> gradient to module.layer2.0.bn1.weight
<DEBUG> gradient to module.layer2.0.bn1.bias
<DEBUG> gradient to module.layer2.0.conv2.weight
<DEBUG> gradient to module.layer2.0.bn2.weight
<DEBUG> gradient to module.layer2.0.bn2.bias
<DEBUG> gradient to module.layer2.0.downsample.0.weight
<DEBUG> gradient to module.layer2.0.downsample.1.weight
<DEBUG> gradient to module.layer2.0.downsample.1.bias
<DEBUG> gradient to module.layer2.1.conv1.weight
<DEBUG> gradient to module.layer2.1.bn1.weight
<DEBUG> gradient to module.layer2.1.bn1.bias
<DEBUG> gradient to module.layer2.1.conv2.weight
<DEBUG> gradient to module.layer2.1.bn2.weight
<DEBUG> gradient to module.layer2.1.bn2.bias
<DEBUG> gradient to module.layer3.0.conv1.weight
<DEBUG> gradient to module.layer3.0.bn1.weight
<DEBUG> gradient to module.layer3.0.bn1.bias
<DEBUG> gradient to module.layer3.0.conv2.weight
<DEBUG> gradient to module.layer3.0.bn2.weight
<DEBUG> gradient to module.layer3.0.bn2.bias
<DEBUG> gradient to module.layer3.0.downsample.0.weight
<DEBUG> gradient to module.layer3.0.downsample.1.weight
<DEBUG> gradient to module.layer3.0.downsample.1.bias
<DEBUG> gradient to module.layer3.1.conv1.weight
<DEBUG> gradient to module.layer3.1.bn1.weight
<DEBUG> gradient to module.layer3.1.bn1.bias
<DEBUG> gradient to module.layer3.1.conv2.weight
<DEBUG> gradient to module.layer3.1.bn2.weight
<DEBUG> gradient to module.layer3.1.bn2.bias
<DEBUG> gradient to module.layer4.0.conv1.weight
<DEBUG> gradient to module.layer4.0.bn1.weight
<DEBUG> gradient to module.layer4.0.bn1.bias
<DEBUG> gradient to module.layer4.0.conv2.weight
<DEBUG> gradient to module.layer4.0.bn2.weight
<DEBUG> gradient to module.layer4.0.bn2.bias
<DEBUG> gradient to module.layer4.0.downsample.0.weight
<DEBUG> gradient to module.layer4.0.downsample.1.weight
<DEBUG> gradient to module.layer4.0.downsample.1.bias
<DEBUG> gradient to module.layer4.1.conv1.weight
<DEBUG> gradient to module.layer4.1.bn1.weight
<DEBUG> gradient to module.layer4.1.bn1.bias
<DEBUG> gradient to module.layer4.1.conv2.weight
<DEBUG> gradient to module.layer4.1.bn2.weight
<DEBUG> gradient to module.layer4.1.bn2.bias
<DEBUG> gradient to module.fc.weight
<DEBUG> gradient to module.fc.bias
Files already downloaded and verified
Files already downloaded and verified
Adding Noise to Label, len(Y)=12000, Label_noise=1217
Xmp (7877, 3, 32, 32) (6903, 3, 32, 32)
Xcp (5961, 3, 32, 32) (6039, 3, 32, 32)
env=0 2497 2497 3 3
xn 2500 xp 2500
env=1 1750 1750 750 750
xn 2500 xp 2500
env=2 50 50 450 450
xn 500 xp 500
=> Creating model 'EBD'
EBD(
  (embedings): Embedding(2, 1)
)
=> Parallelizing on [0] gpus
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:01<00:40,  1.62s/it] 19%|#9        | 5/26 [00:01<00:05,  3.77it/s] 35%|###4      | 9/26 [00:01<00:02,  7.40it/s] 50%|#####     | 13/26 [00:01<00:01, 11.33it/s] 65%|######5   | 17/26 [00:02<00:00, 15.47it/s] 81%|########  | 21/26 [00:02<00:00, 19.61it/s] 96%|#########6| 25/26 [00:02<00:00, 23.18it/s]100%|##########| 26/26 [00:02<00:00,  9.77it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 0 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 2 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 3 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 4 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 5 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 6 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 7 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 8 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 9 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 10 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 11 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 12 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 13 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 14 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 15 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 16 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 17 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 18 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 19 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 20 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 21 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 22 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 23 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 24 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 25 400
penalty weights 0.0
Epoch: [0][  26/  26]	Loss 10.138 (12.636)	train_nll   0.36 (  0.55)	train_penalty   0.05 (  0.18)	weight_norm   9.78 ( 12.09)	train_acc   0.88 (  0.78)	train_minacc   0.00 (  0.10)	train_majacc   1.00 (  0.90)	train_corr   0.00 (  0.00)	l1 7.9114 (8.6419)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.43it/s] 27%|##6       | 7/26 [00:00<00:00, 34.30it/s]                                               27%|##6       | 7/26 [00:00<00:00, 34.30it/s] 50%|#####     | 13/26 [00:00<00:00, 39.53it/s] 73%|#######3  | 19/26 [00:00<00:00, 46.32it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 46.32it/s] 96%|#########6| 25/26 [00:00<00:00, 46.92it/s]100%|##########| 26/26 [00:00<00:00, 38.65it/s]
Test: [   0/  26]	Loss 0.401 (0.401)	test_acc   0.85 (  0.85)	test_minacc   0.02 (  0.02)	test_majacc   1.00 (  1.00)	Loss_d 0.401 (0.401)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.02 (  0.02)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.97 (  0.97)
Test: [  10/  26]	Loss 0.429 (0.432)	test_acc   0.84 (  0.84)	test_minacc   0.00 (  0.01)	test_majacc   0.99 (  1.00)	Loss_d 0.429 (0.432)	test_acc_d   0.84 (  0.84)	test_minacc_d   0.00 (  0.01)	test_majacc_d   0.99 (  1.00)	test_corr_d   0.97 (  0.97)
Test: [  20/  26]	Loss 0.411 (0.418)	test_acc   0.86 (  0.85)	test_minacc   0.00 (  0.01)	test_majacc   1.00 (  1.00)	Loss_d 0.411 (0.418)	test_acc_d   0.86 (  0.85)	test_minacc_d   0.00 (  0.01)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.97 (  0.97)
Test: [  26/  26]	Loss 0.355 (0.415)	test_acc   0.88 (  0.85)	test_minacc   0.00 (  0.01)	test_majacc   0.99 (  1.00)	Loss_d 0.355 (0.415)	test_acc_d   0.88 (  0.85)	test_minacc_d   0.00 (  0.01)	test_majacc_d   0.99 (  1.00)	test_corr_d   0.97 (  0.97)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00,  2.57it/s]100%|##########| 1/1 [00:00<00:00,  2.57it/s]
Test: [  0/  1]	Loss 1.514 (1.514)	test_acc   0.11 (  0.11)	test_minacc   0.01 (  0.01)	test_majacc   0.99 (  0.99)	Loss_d 1.514 (1.514)	test_acc_d   0.11 (  0.11)	test_minacc_d   0.01 (  0.01)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.95 (  0.95)
Test: [  1/  1]	Loss 1.514 (1.514)	test_acc   0.11 (  0.11)	test_minacc   0.01 (  0.01)	test_majacc   0.99 (  0.99)	Loss_d 1.514 (1.514)	test_acc_d   0.11 (  0.11)	test_minacc_d   0.01 (  0.01)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.95 (  0.95)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/30/checkpoints/model_best.pth
Overall Timing[  0/  1]	epoch_time 0.0779 (0.0779)	validation_time 0.0067 (0.0067)	train_time 0.0646 (0.0646)
record: (train_acc, test_acc) (0.8466000229120254, 0.10900000482797623)
last accs (train_acc, test_acc) (0.8466000229120254, 0.10900000482797623)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.63it/s] 19%|#9        | 5/26 [00:00<00:00, 22.82it/s] 35%|###4      | 9/26 [00:00<00:00, 27.11it/s] 50%|#####     | 13/26 [00:00<00:00, 29.96it/s] 65%|######5   | 17/26 [00:00<00:00, 31.88it/s] 81%|########  | 21/26 [00:00<00:00, 33.34it/s] 96%|#########6| 25/26 [00:00<00:00, 34.15it/s]100%|##########| 26/26 [00:00<00:00, 28.67it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 26 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 27 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 28 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 29 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 30 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 31 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 32 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 33 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 34 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 35 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 36 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 37 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 38 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 39 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 40 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 41 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 42 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 43 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 44 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 45 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 46 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 47 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 48 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 49 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 50 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 51 400
penalty weights 0.0
Epoch: [1][  26/  26]	Loss 5.301 (7.431)	train_nll   0.34 (  0.42)	train_penalty   0.04 (  0.06)	weight_norm   4.96 (  7.02)	train_acc   0.88 (  0.85)	train_minacc   0.00 (  0.02)	train_majacc   1.00 (  0.99)	train_corr   0.00 (  0.00)	l1 7.5923 (7.7994)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.47it/s] 15%|#5        | 4/26 [00:00<00:01, 16.97it/s] 38%|###8      | 10/26 [00:00<00:00, 32.28it/s]                                                38%|###8      | 10/26 [00:00<00:00, 32.28it/s] 62%|######1   | 16/26 [00:00<00:00, 38.43it/s]                                                62%|######1   | 16/26 [00:00<00:00, 38.43it/s] 85%|########4 | 22/26 [00:00<00:00, 44.13it/s]100%|##########| 26/26 [00:00<00:00, 35.76it/s]
Test: [   0/  26]	Loss 0.399 (0.399)	test_acc   0.84 (  0.84)	test_minacc   0.00 (  0.00)	test_majacc   1.00 (  1.00)	Loss_d 0.399 (0.399)	test_acc_d   0.84 (  0.84)	test_minacc_d   0.00 (  0.00)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.98 (  0.98)
Test: [  10/  26]	Loss 0.425 (0.439)	test_acc   0.85 (  0.84)	test_minacc   0.02 (  0.00)	test_majacc   1.00 (  1.00)	Loss_d 0.425 (0.439)	test_acc_d   0.85 (  0.84)	test_minacc_d   0.02 (  0.00)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.99 (  0.98)
Test: [  20/  26]	Loss 0.398 (0.417)	test_acc   0.86 (  0.85)	test_minacc   0.00 (  0.00)	test_majacc   1.00 (  1.00)	Loss_d 0.398 (0.417)	test_acc_d   0.86 (  0.85)	test_minacc_d   0.00 (  0.00)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.99 (  0.98)
Test: [  26/  26]	Loss 0.325 (0.414)	test_acc   0.88 (  0.85)	test_minacc   0.00 (  0.00)	test_majacc   1.00 (  1.00)	Loss_d 0.325 (0.414)	test_acc_d   0.88 (  0.85)	test_minacc_d   0.00 (  0.00)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.99 (  0.98)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.06it/s]
Test: [  0/  1]	Loss 2.236 (2.236)	test_acc   0.11 (  0.11)	test_minacc   0.01 (  0.01)	test_majacc   1.00 (  1.00)	Loss_d 2.236 (2.236)	test_acc_d   0.11 (  0.11)	test_minacc_d   0.01 (  0.01)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.98 (  0.98)
Test: [  1/  1]	Loss 2.236 (2.236)	test_acc   0.11 (  0.11)	test_minacc   0.01 (  0.01)	test_majacc   1.00 (  1.00)	Loss_d 2.236 (2.236)	test_acc_d   0.11 (  0.11)	test_minacc_d   0.01 (  0.01)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.98 (  0.98)
Overall Timing[  1/  1]	epoch_time 0.0376 (0.0578)	validation_time 0.0004 (0.0035)	train_time 0.0372 (0.0509)
record: (train_acc, test_acc) (0.8466000229120254, 0.10900000482797623)
last accs (train_acc, test_acc) (0.8479000183939934, 0.10500000417232513)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.74it/s] 12%|#1        | 3/26 [00:00<00:01, 13.65it/s] 27%|##6       | 7/26 [00:00<00:00, 22.97it/s] 42%|####2     | 11/26 [00:00<00:00, 27.65it/s] 58%|#####7    | 15/26 [00:00<00:00, 30.81it/s] 73%|#######3  | 19/26 [00:00<00:00, 31.49it/s] 88%|########8 | 23/26 [00:00<00:00, 32.54it/s]100%|##########| 26/26 [00:00<00:00, 27.52it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 52 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 53 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 54 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 55 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 56 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 57 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 58 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 59 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 60 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 61 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 62 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 63 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 64 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 65 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 66 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 67 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 68 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 69 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 70 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 71 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 72 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 73 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 74 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 75 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 76 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 77 400
penalty weights 0.0
Epoch: [2][  26/  26]	Loss 3.167 (4.141)	train_nll   0.33 (  0.40)	train_penalty   0.05 (  0.05)	weight_norm   2.84 (  3.74)	train_acc   0.88 (  0.84)	train_minacc   0.00 (  0.05)	train_majacc   1.00 (  0.98)	train_corr   0.00 (  0.00)	l1 6.5852 (7.0395)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.67it/s] 27%|##6       | 7/26 [00:00<00:00, 37.18it/s]                                               27%|##6       | 7/26 [00:00<00:00, 37.18it/s] 50%|#####     | 13/26 [00:00<00:00, 42.02it/s] 73%|#######3  | 19/26 [00:00<00:00, 48.08it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 48.08it/s] 96%|#########6| 25/26 [00:00<00:00, 48.07it/s]100%|##########| 26/26 [00:00<00:00, 40.37it/s]
Test: [   0/  26]	Loss 0.387 (0.387)	test_acc   0.84 (  0.84)	test_minacc   0.00 (  0.00)	test_majacc   1.00 (  1.00)	Loss_d 0.387 (0.387)	test_acc_d   0.84 (  0.84)	test_minacc_d   0.00 (  0.00)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.99 (  0.99)
Test: [  10/  26]	Loss 0.394 (0.411)	test_acc   0.85 (  0.84)	test_minacc   0.00 (  0.00)	test_majacc   1.00 (  1.00)	Loss_d 0.394 (0.411)	test_acc_d   0.85 (  0.84)	test_minacc_d   0.00 (  0.00)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.99 (  0.99)
Test: [  20/  26]	Loss 0.384 (0.397)	test_acc   0.86 (  0.85)	test_minacc   0.00 (  0.00)	test_majacc   1.00 (  1.00)	Loss_d 0.384 (0.397)	test_acc_d   0.86 (  0.85)	test_minacc_d   0.00 (  0.00)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.99 (  0.99)
Test: [  26/  26]	Loss 0.325 (0.394)	test_acc   0.88 (  0.85)	test_minacc   0.00 (  0.00)	test_majacc   1.00 (  1.00)	Loss_d 0.325 (0.394)	test_acc_d   0.88 (  0.85)	test_minacc_d   0.00 (  0.00)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.99 (  0.99)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 67.29it/s]
Test: [  0/  1]	Loss 1.833 (1.833)	test_acc   0.11 (  0.11)	test_minacc   0.01 (  0.01)	test_majacc   0.99 (  0.99)	Loss_d 1.833 (1.833)	test_acc_d   0.11 (  0.11)	test_minacc_d   0.01 (  0.01)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.98 (  0.98)
Test: [  1/  1]	Loss 1.833 (1.833)	test_acc   0.11 (  0.11)	test_minacc   0.01 (  0.01)	test_majacc   0.99 (  0.99)	Loss_d 1.833 (1.833)	test_acc_d   0.11 (  0.11)	test_minacc_d   0.01 (  0.01)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.98 (  0.98)
Overall Timing[  2/  1]	epoch_time 0.0387 (0.0514)	validation_time 0.0004 (0.0025)	train_time 0.0383 (0.0467)
record: (train_acc, test_acc) (0.8466000229120254, 0.10900000482797623)
last accs (train_acc, test_acc) (0.8486000195145607, 0.10500000417232513)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.00it/s] 19%|#9        | 5/26 [00:00<00:01, 20.28it/s] 35%|###4      | 9/26 [00:00<00:00, 25.60it/s] 50%|#####     | 13/26 [00:00<00:00, 29.37it/s] 65%|######5   | 17/26 [00:00<00:00, 30.94it/s] 81%|########  | 21/26 [00:00<00:00, 32.61it/s] 96%|#########6| 25/26 [00:00<00:00, 33.62it/s]100%|##########| 26/26 [00:00<00:00, 27.73it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 78 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 79 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 80 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 81 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 82 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 83 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 84 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 85 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 86 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 87 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 88 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 89 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 90 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 91 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 92 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 93 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 94 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 95 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 96 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 97 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 98 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 99 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 100 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 101 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 102 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 103 400
penalty weights 0.0
Epoch: [3][  26/  26]	Loss 2.061 (2.628)	train_nll   0.29 (  0.39)	train_penalty   0.03 (  0.05)	weight_norm   1.77 (  2.24)	train_acc   0.88 (  0.85)	train_minacc   0.00 (  0.07)	train_majacc   0.99 (  0.98)	train_corr   0.00 (  0.00)	l1 6.1472 (6.3273)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.73it/s] 27%|##6       | 7/26 [00:00<00:00, 36.62it/s]                                               27%|##6       | 7/26 [00:00<00:00, 36.62it/s] 50%|#####     | 13/26 [00:00<00:00, 40.55it/s] 69%|######9   | 18/26 [00:00<00:00, 41.81it/s]                                                69%|######9   | 18/26 [00:00<00:00, 41.81it/s] 92%|#########2| 24/26 [00:00<00:00, 47.49it/s]100%|##########| 26/26 [00:00<00:00, 38.96it/s]
Test: [   0/  26]	Loss 0.374 (0.374)	test_acc   0.85 (  0.85)	test_minacc   0.07 (  0.07)	test_majacc   1.00 (  1.00)	Loss_d 0.374 (0.374)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.07 (  0.07)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.96 (  0.96)
Test: [  10/  26]	Loss 0.378 (0.399)	test_acc   0.85 (  0.84)	test_minacc   0.02 (  0.04)	test_majacc   1.00 (  0.99)	Loss_d 0.378 (0.399)	test_acc_d   0.85 (  0.84)	test_minacc_d   0.02 (  0.04)	test_majacc_d   1.00 (  0.99)	test_corr_d   0.97 (  0.96)
Test: [  20/  26]	Loss 0.369 (0.384)	test_acc   0.86 (  0.85)	test_minacc   0.04 (  0.03)	test_majacc   0.99 (  0.99)	Loss_d 0.369 (0.384)	test_acc_d   0.86 (  0.85)	test_minacc_d   0.04 (  0.03)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.97 (  0.96)
Test: [  26/  26]	Loss 0.274 (0.376)	test_acc   0.88 (  0.85)	test_minacc   0.00 (  0.04)	test_majacc   0.99 (  0.99)	Loss_d 0.274 (0.376)	test_acc_d   0.88 (  0.85)	test_minacc_d   0.00 (  0.04)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.97 (  0.96)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 59.90it/s]
Test: [  0/  1]	Loss 1.919 (1.919)	test_acc   0.13 (  0.13)	test_minacc   0.03 (  0.03)	test_majacc   1.00 (  1.00)	Loss_d 1.919 (1.919)	test_acc_d   0.13 (  0.13)	test_minacc_d   0.03 (  0.03)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.93 (  0.93)
Test: [  1/  1]	Loss 1.919 (1.919)	test_acc   0.13 (  0.13)	test_minacc   0.03 (  0.03)	test_majacc   1.00 (  1.00)	Loss_d 1.919 (1.919)	test_acc_d   0.13 (  0.13)	test_minacc_d   0.03 (  0.03)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.93 (  0.93)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/30/checkpoints/model_best.pth
Overall Timing[  3/  1]	epoch_time 0.0382 (0.0481)	validation_time 0.0006 (0.0020)	train_time 0.0376 (0.0444)
record: (train_acc, test_acc) (0.850500026166439, 0.12600000202655792)
last accs (train_acc, test_acc) (0.850500026166439, 0.12600000202655792)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 16.42it/s] 23%|##3       | 6/26 [00:00<00:00, 26.55it/s] 38%|###8      | 10/26 [00:00<00:00, 30.77it/s] 54%|#####3    | 14/26 [00:00<00:00, 33.19it/s] 69%|######9   | 18/26 [00:00<00:00, 34.65it/s] 85%|########4 | 22/26 [00:00<00:00, 35.13it/s]100%|##########| 26/26 [00:00<00:00, 35.30it/s]100%|##########| 26/26 [00:00<00:00, 30.52it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 104 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 105 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 106 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 107 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 108 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 109 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 110 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 111 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 112 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 113 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 114 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 115 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 116 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 117 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 118 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 119 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 120 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 121 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 122 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 123 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 124 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 125 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 126 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 127 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 128 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 129 400
penalty weights 0.0
Epoch: [4][  26/  26]	Loss 1.437 (1.803)	train_nll   0.29 (  0.38)	train_penalty   0.03 (  0.04)	weight_norm   1.14 (  1.43)	train_acc   0.88 (  0.85)	train_minacc   0.00 (  0.10)	train_majacc   1.00 (  0.98)	train_corr   0.00 (  0.00)	l1 6.0055 (6.0118)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  6.07it/s] 27%|##6       | 7/26 [00:00<00:00, 29.92it/s]                                               27%|##6       | 7/26 [00:00<00:00, 29.92it/s] 50%|#####     | 13/26 [00:00<00:00, 38.52it/s] 69%|######9   | 18/26 [00:00<00:00, 41.31it/s]                                                69%|######9   | 18/26 [00:00<00:00, 41.31it/s] 92%|#########2| 24/26 [00:00<00:00, 46.04it/s]100%|##########| 26/26 [00:00<00:00, 36.45it/s]
Test: [   0/  26]	Loss 0.372 (0.372)	test_acc   0.85 (  0.85)	test_minacc   0.03 (  0.03)	test_majacc   1.00 (  1.00)	Loss_d 0.372 (0.372)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.03 (  0.03)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.96 (  0.96)
Test: [  10/  26]	Loss 0.387 (0.392)	test_acc   0.85 (  0.84)	test_minacc   0.02 (  0.02)	test_majacc   1.00 (  1.00)	Loss_d 0.387 (0.392)	test_acc_d   0.85 (  0.84)	test_minacc_d   0.02 (  0.02)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.96 (  0.96)
Test: [  20/  26]	Loss 0.338 (0.373)	test_acc   0.86 (  0.85)	test_minacc   0.02 (  0.02)	test_majacc   1.00 (  1.00)	Loss_d 0.338 (0.373)	test_acc_d   0.86 (  0.85)	test_minacc_d   0.02 (  0.02)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.96 (  0.96)
Test: [  26/  26]	Loss 0.263 (0.367)	test_acc   0.88 (  0.85)	test_minacc   0.00 (  0.02)	test_majacc   1.00 (  1.00)	Loss_d 0.263 (0.367)	test_acc_d   0.88 (  0.85)	test_minacc_d   0.00 (  0.02)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.97 (  0.96)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.56it/s]
Test: [  0/  1]	Loss 1.889 (1.889)	test_acc   0.12 (  0.12)	test_minacc   0.02 (  0.02)	test_majacc   1.00 (  1.00)	Loss_d 1.889 (1.889)	test_acc_d   0.12 (  0.12)	test_minacc_d   0.02 (  0.02)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.92 (  0.92)
Test: [  1/  1]	Loss 1.889 (1.889)	test_acc   0.12 (  0.12)	test_minacc   0.02 (  0.02)	test_majacc   1.00 (  1.00)	Loss_d 1.889 (1.889)	test_acc_d   0.12 (  0.12)	test_minacc_d   0.02 (  0.02)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.92 (  0.92)
Overall Timing[  4/  1]	epoch_time 0.0376 (0.0460)	validation_time 0.0004 (0.0017)	train_time 0.0371 (0.0430)
record: (train_acc, test_acc) (0.850500026166439, 0.12600000202655792)
last accs (train_acc, test_acc) (0.8498000231385231, 0.1210000067949295)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.76it/s] 19%|#9        | 5/26 [00:00<00:00, 23.30it/s] 35%|###4      | 9/26 [00:00<00:00, 28.34it/s] 50%|#####     | 13/26 [00:00<00:00, 30.50it/s] 65%|######5   | 17/26 [00:00<00:00, 32.01it/s] 81%|########  | 21/26 [00:00<00:00, 32.88it/s] 96%|#########6| 25/26 [00:00<00:00, 32.95it/s]100%|##########| 26/26 [00:00<00:00, 28.47it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 130 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 131 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 132 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 133 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 134 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 135 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 136 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 137 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 138 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 139 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 140 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 141 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 142 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 143 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 144 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 145 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 146 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 147 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 148 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 149 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 150 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 151 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 152 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 153 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 154 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 155 400
penalty weights 0.0
Epoch: [5][  26/  26]	Loss 1.017 (1.288)	train_nll   0.27 (  0.36)	train_penalty   0.03 (  0.03)	weight_norm   0.75 (  0.93)	train_acc   0.88 (  0.85)	train_minacc   0.03 (  0.13)	train_majacc   0.99 (  0.98)	train_corr   0.00 (  0.00)	l1 6.2460 (6.1027)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.14it/s] 27%|##6       | 7/26 [00:00<00:00, 31.76it/s]                                               27%|##6       | 7/26 [00:00<00:00, 31.76it/s] 50%|#####     | 13/26 [00:00<00:00, 38.85it/s] 73%|#######3  | 19/26 [00:00<00:00, 45.63it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 45.63it/s] 96%|#########6| 25/26 [00:00<00:00, 46.40it/s]100%|##########| 26/26 [00:00<00:00, 38.19it/s]
Test: [   0/  26]	Loss 0.366 (0.366)	test_acc   0.85 (  0.85)	test_minacc   0.10 (  0.10)	test_majacc   0.99 (  0.99)	Loss_d 0.366 (0.366)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.10 (  0.10)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.95 (  0.95)
Test: [  10/  26]	Loss 0.378 (0.385)	test_acc   0.86 (  0.84)	test_minacc   0.05 (  0.07)	test_majacc   1.00 (  0.99)	Loss_d 0.378 (0.385)	test_acc_d   0.86 (  0.84)	test_minacc_d   0.05 (  0.07)	test_majacc_d   1.00 (  0.99)	test_corr_d   0.95 (  0.95)
Test: [  20/  26]	Loss 0.339 (0.366)	test_acc   0.87 (  0.85)	test_minacc   0.06 (  0.07)	test_majacc   1.00 (  0.99)	Loss_d 0.339 (0.366)	test_acc_d   0.87 (  0.85)	test_minacc_d   0.06 (  0.07)	test_majacc_d   1.00 (  0.99)	test_corr_d   0.96 (  0.95)
Test: [  26/  26]	Loss 0.253 (0.359)	test_acc   0.88 (  0.85)	test_minacc   0.07 (  0.08)	test_majacc   0.99 (  0.99)	Loss_d 0.253 (0.359)	test_acc_d   0.88 (  0.85)	test_minacc_d   0.07 (  0.08)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.95 (  0.95)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 64.14it/s]
Test: [  0/  1]	Loss 1.886 (1.886)	test_acc   0.16 (  0.16)	test_minacc   0.06 (  0.06)	test_majacc   1.00 (  1.00)	Loss_d 1.886 (1.886)	test_acc_d   0.16 (  0.16)	test_minacc_d   0.06 (  0.06)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.87 (  0.87)
Test: [  1/  1]	Loss 1.886 (1.886)	test_acc   0.16 (  0.16)	test_minacc   0.06 (  0.06)	test_majacc   1.00 (  1.00)	Loss_d 1.886 (1.886)	test_acc_d   0.16 (  0.16)	test_minacc_d   0.06 (  0.06)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.87 (  0.87)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/30/checkpoints/model_best.pth
Overall Timing[  5/  1]	epoch_time 0.0375 (0.0446)	validation_time 0.0003 (0.0015)	train_time 0.0372 (0.0420)
record: (train_acc, test_acc) (0.8535000264048577, 0.15700000524520874)
last accs (train_acc, test_acc) (0.8535000264048577, 0.15700000524520874)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  6.24it/s] 15%|#5        | 4/26 [00:00<00:01, 17.41it/s] 31%|###       | 8/26 [00:00<00:00, 25.11it/s] 46%|####6     | 12/26 [00:00<00:00, 29.23it/s] 62%|######1   | 16/26 [00:00<00:00, 31.62it/s] 77%|#######6  | 20/26 [00:00<00:00, 32.95it/s] 92%|#########2| 24/26 [00:00<00:00, 34.01it/s]100%|##########| 26/26 [00:00<00:00, 27.87it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 156 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 157 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 158 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 159 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 160 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 161 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 162 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 163 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 164 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 165 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 166 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 167 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 168 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 169 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 170 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 171 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 172 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 173 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 174 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 175 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 176 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 177 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 178 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 179 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 180 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 181 400
penalty weights 0.0
Epoch: [6][  26/  26]	Loss 0.773 (0.972)	train_nll   0.28 (  0.36)	train_penalty   0.03 (  0.03)	weight_norm   0.50 (  0.61)	train_acc   0.88 (  0.85)	train_minacc   0.03 (  0.14)	train_majacc   0.99 (  0.97)	train_corr   0.00 (  0.00)	l1 6.9859 (6.4807)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.41it/s] 27%|##6       | 7/26 [00:00<00:00, 37.64it/s]                                               27%|##6       | 7/26 [00:00<00:00, 37.64it/s] 46%|####6     | 12/26 [00:00<00:00, 42.24it/s] 65%|######5   | 17/26 [00:00<00:00, 43.86it/s]                                                65%|######5   | 17/26 [00:00<00:00, 43.86it/s] 88%|########8 | 23/26 [00:00<00:00, 48.26it/s]100%|##########| 26/26 [00:00<00:00, 39.76it/s]
Test: [   0/  26]	Loss 0.369 (0.369)	test_acc   0.84 (  0.84)	test_minacc   0.00 (  0.00)	test_majacc   1.00 (  1.00)	Loss_d 0.369 (0.369)	test_acc_d   0.84 (  0.84)	test_minacc_d   0.00 (  0.00)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.97 (  0.97)
Test: [  10/  26]	Loss 0.372 (0.380)	test_acc   0.85 (  0.84)	test_minacc   0.00 (  0.01)	test_majacc   1.00 (  1.00)	Loss_d 0.372 (0.380)	test_acc_d   0.85 (  0.84)	test_minacc_d   0.00 (  0.01)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.97 (  0.97)
Test: [  20/  26]	Loss 0.329 (0.363)	test_acc   0.86 (  0.85)	test_minacc   0.00 (  0.01)	test_majacc   1.00 (  1.00)	Loss_d 0.329 (0.363)	test_acc_d   0.86 (  0.85)	test_minacc_d   0.00 (  0.01)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.97 (  0.97)
Test: [  26/  26]	Loss 0.266 (0.357)	test_acc   0.88 (  0.85)	test_minacc   0.00 (  0.01)	test_majacc   1.00 (  1.00)	Loss_d 0.266 (0.357)	test_acc_d   0.88 (  0.85)	test_minacc_d   0.00 (  0.01)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.97 (  0.97)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.62it/s]
Test: [  0/  1]	Loss 1.961 (1.961)	test_acc   0.11 (  0.11)	test_minacc   0.01 (  0.01)	test_majacc   1.00 (  1.00)	Loss_d 1.961 (1.961)	test_acc_d   0.11 (  0.11)	test_minacc_d   0.01 (  0.01)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.94 (  0.94)
Test: [  1/  1]	Loss 1.961 (1.961)	test_acc   0.11 (  0.11)	test_minacc   0.01 (  0.01)	test_majacc   1.00 (  1.00)	Loss_d 1.961 (1.961)	test_acc_d   0.11 (  0.11)	test_minacc_d   0.01 (  0.01)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.94 (  0.94)
Overall Timing[  6/  1]	epoch_time 0.0364 (0.0434)	validation_time 0.0004 (0.0013)	train_time 0.0360 (0.0411)
record: (train_acc, test_acc) (0.8535000264048577, 0.15700000524520874)
last accs (train_acc, test_acc) (0.8497000266313552, 0.11100000888109207)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.29it/s] 19%|#9        | 5/26 [00:00<00:00, 22.42it/s] 35%|###4      | 9/26 [00:00<00:00, 27.07it/s] 50%|#####     | 13/26 [00:00<00:00, 29.90it/s] 65%|######5   | 17/26 [00:00<00:00, 31.09it/s] 81%|########  | 21/26 [00:00<00:00, 32.73it/s] 96%|#########6| 25/26 [00:00<00:00, 33.48it/s]100%|##########| 26/26 [00:00<00:00, 28.48it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 182 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 183 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 184 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 185 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 186 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 187 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 188 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 189 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 190 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 191 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 192 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 193 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 194 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 195 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 196 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 197 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 198 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 199 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 200 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 201 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 202 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 203 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 204 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 205 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 206 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 207 400
penalty weights 0.0
Epoch: [7][  26/  26]	Loss 0.606 (0.757)	train_nll   0.27 (  0.35)	train_penalty   0.02 (  0.03)	weight_norm   0.33 (  0.41)	train_acc   0.89 (  0.85)	train_minacc   0.21 (  0.17)	train_majacc   0.98 (  0.97)	train_corr   0.00 (  0.00)	l1 8.2950 (7.6133)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.90it/s] 27%|##6       | 7/26 [00:00<00:00, 33.61it/s]                                               27%|##6       | 7/26 [00:00<00:00, 33.61it/s] 46%|####6     | 12/26 [00:00<00:00, 39.93it/s] 65%|######5   | 17/26 [00:00<00:00, 40.92it/s]                                                65%|######5   | 17/26 [00:00<00:00, 40.92it/s] 88%|########8 | 23/26 [00:00<00:00, 46.43it/s]100%|##########| 26/26 [00:00<00:00, 38.52it/s]
Test: [   0/  26]	Loss 0.348 (0.348)	test_acc   0.85 (  0.85)	test_minacc   0.13 (  0.13)	test_majacc   0.98 (  0.98)	Loss_d 0.348 (0.348)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.13 (  0.13)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.94 (  0.94)
Test: [  10/  26]	Loss 0.361 (0.359)	test_acc   0.86 (  0.84)	test_minacc   0.07 (  0.08)	test_majacc   1.00 (  0.99)	Loss_d 0.361 (0.359)	test_acc_d   0.86 (  0.84)	test_minacc_d   0.07 (  0.08)	test_majacc_d   1.00 (  0.99)	test_corr_d   0.95 (  0.94)
Test: [  20/  26]	Loss 0.312 (0.340)	test_acc   0.86 (  0.85)	test_minacc   0.04 (  0.09)	test_majacc   0.99 (  0.99)	Loss_d 0.312 (0.340)	test_acc_d   0.86 (  0.85)	test_minacc_d   0.04 (  0.09)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.95 (  0.94)
Test: [  26/  26]	Loss 0.251 (0.334)	test_acc   0.88 (  0.86)	test_minacc   0.03 (  0.10)	test_majacc   0.99 (  0.99)	Loss_d 0.251 (0.334)	test_acc_d   0.88 (  0.86)	test_minacc_d   0.03 (  0.10)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.95 (  0.94)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.46it/s]
Test: [  0/  1]	Loss 1.862 (1.862)	test_acc   0.17 (  0.17)	test_minacc   0.07 (  0.07)	test_majacc   1.00 (  1.00)	Loss_d 1.862 (1.862)	test_acc_d   0.17 (  0.17)	test_minacc_d   0.07 (  0.07)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.85 (  0.85)
Test: [  1/  1]	Loss 1.862 (1.862)	test_acc   0.17 (  0.17)	test_minacc   0.07 (  0.07)	test_majacc   1.00 (  1.00)	Loss_d 1.862 (1.862)	test_acc_d   0.17 (  0.17)	test_minacc_d   0.07 (  0.07)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.85 (  0.85)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/30/checkpoints/model_best.pth
Overall Timing[  7/  1]	epoch_time 0.0357 (0.0425)	validation_time 0.0004 (0.0012)	train_time 0.0353 (0.0404)
record: (train_acc, test_acc) (0.8558000283837318, 0.16500000655651093)
last accs (train_acc, test_acc) (0.8558000283837318, 0.16500000655651093)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.52it/s] 19%|#9        | 5/26 [00:00<00:01, 20.29it/s] 35%|###4      | 9/26 [00:00<00:00, 26.37it/s] 50%|#####     | 13/26 [00:00<00:00, 29.49it/s] 65%|######5   | 17/26 [00:00<00:00, 31.49it/s] 81%|########  | 21/26 [00:00<00:00, 33.02it/s] 96%|#########6| 25/26 [00:00<00:00, 34.05it/s]100%|##########| 26/26 [00:00<00:00, 28.00it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 208 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 209 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 210 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 211 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 212 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 213 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 214 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 215 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 216 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 217 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 218 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 219 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 220 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 221 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 222 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 223 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 224 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 225 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 226 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 227 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 228 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 229 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 230 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 231 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 232 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 233 400
penalty weights 0.0
Epoch: [8][  26/  26]	Loss 0.524 (0.629)	train_nll   0.28 (  0.34)	train_penalty   0.03 (  0.03)	weight_norm   0.24 (  0.28)	train_acc   0.89 (  0.85)	train_minacc   0.03 (  0.20)	train_majacc   1.00 (  0.97)	train_corr   0.00 (  0.00)	l1 10.0712 (8.9592)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.36it/s] 27%|##6       | 7/26 [00:00<00:00, 28.70it/s]                                               27%|##6       | 7/26 [00:00<00:00, 28.70it/s] 46%|####6     | 12/26 [00:00<00:00, 35.82it/s] 69%|######9   | 18/26 [00:00<00:00, 43.66it/s]                                                69%|######9   | 18/26 [00:00<00:00, 43.66it/s] 92%|#########2| 24/26 [00:00<00:00, 45.33it/s]100%|##########| 26/26 [00:00<00:00, 36.34it/s]
Test: [   0/  26]	Loss 0.368 (0.368)	test_acc   0.84 (  0.84)	test_minacc   0.08 (  0.08)	test_majacc   0.98 (  0.98)	Loss_d 0.368 (0.368)	test_acc_d   0.84 (  0.84)	test_minacc_d   0.08 (  0.08)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.95 (  0.95)
Test: [  10/  26]	Loss 0.388 (0.385)	test_acc   0.85 (  0.84)	test_minacc   0.00 (  0.05)	test_majacc   1.00 (  0.99)	Loss_d 0.388 (0.385)	test_acc_d   0.85 (  0.84)	test_minacc_d   0.00 (  0.05)	test_majacc_d   1.00 (  0.99)	test_corr_d   0.97 (  0.96)
Test: [  20/  26]	Loss 0.339 (0.368)	test_acc   0.85 (  0.85)	test_minacc   0.02 (  0.06)	test_majacc   0.99 (  0.99)	Loss_d 0.339 (0.368)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.02 (  0.06)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.96 (  0.96)
Test: [  26/  26]	Loss 0.268 (0.363)	test_acc   0.89 (  0.85)	test_minacc   0.03 (  0.06)	test_majacc   1.00 (  0.99)	Loss_d 0.268 (0.363)	test_acc_d   0.89 (  0.85)	test_minacc_d   0.03 (  0.06)	test_majacc_d   1.00 (  0.99)	test_corr_d   0.97 (  0.96)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 67.57it/s]
Test: [  0/  1]	Loss 1.926 (1.926)	test_acc   0.15 (  0.15)	test_minacc   0.06 (  0.06)	test_majacc   1.00 (  1.00)	Loss_d 1.926 (1.926)	test_acc_d   0.15 (  0.15)	test_minacc_d   0.06 (  0.06)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.90 (  0.90)
Test: [  1/  1]	Loss 1.926 (1.926)	test_acc   0.15 (  0.15)	test_minacc   0.06 (  0.06)	test_majacc   1.00 (  1.00)	Loss_d 1.926 (1.926)	test_acc_d   0.15 (  0.15)	test_minacc_d   0.06 (  0.06)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.90 (  0.90)
Overall Timing[  8/  1]	epoch_time 0.0365 (0.0418)	validation_time 0.0004 (0.0011)	train_time 0.0361 (0.0399)
record: (train_acc, test_acc) (0.8558000283837318, 0.16500000655651093)
last accs (train_acc, test_acc) (0.8520000243782997, 0.15200001001358032)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 15.54it/s] 23%|##3       | 6/26 [00:00<00:00, 25.77it/s] 38%|###8      | 10/26 [00:00<00:00, 30.08it/s] 54%|#####3    | 14/26 [00:00<00:00, 32.01it/s] 69%|######9   | 18/26 [00:00<00:00, 32.96it/s] 85%|########4 | 22/26 [00:00<00:00, 33.88it/s]100%|##########| 26/26 [00:00<00:00, 34.22it/s]100%|##########| 26/26 [00:00<00:00, 29.80it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 234 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 235 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 236 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 237 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 238 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 239 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 240 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 241 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 242 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 243 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 244 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 245 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 246 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 247 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 248 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 249 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 250 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 251 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 252 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 253 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 254 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 255 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 256 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 257 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 258 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 259 400
penalty weights 0.0
Epoch: [9][  26/  26]	Loss 0.447 (0.555)	train_nll   0.27 (  0.35)	train_penalty   0.02 (  0.03)	weight_norm   0.18 (  0.21)	train_acc   0.88 (  0.85)	train_minacc   0.21 (  0.21)	train_majacc   0.97 (  0.97)	train_corr   0.00 (  0.00)	l1 11.6659 (10.6966)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 18.52it/s] 31%|###       | 8/26 [00:00<00:00, 40.64it/s]                                               31%|###       | 8/26 [00:00<00:00, 40.64it/s] 50%|#####     | 13/26 [00:00<00:00, 42.88it/s] 73%|#######3  | 19/26 [00:00<00:00, 48.53it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 48.53it/s] 96%|#########6| 25/26 [00:00<00:00, 47.55it/s]100%|##########| 26/26 [00:00<00:00, 41.33it/s]
Test: [   0/  26]	Loss 0.359 (0.359)	test_acc   0.85 (  0.85)	test_minacc   0.11 (  0.11)	test_majacc   0.99 (  0.99)	Loss_d 0.359 (0.359)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.11 (  0.11)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.94 (  0.94)
Test: [  10/  26]	Loss 0.364 (0.372)	test_acc   0.86 (  0.84)	test_minacc   0.08 (  0.07)	test_majacc   1.00 (  0.99)	Loss_d 0.364 (0.372)	test_acc_d   0.86 (  0.84)	test_minacc_d   0.08 (  0.07)	test_majacc_d   1.00 (  0.99)	test_corr_d   0.94 (  0.94)
Test: [  20/  26]	Loss 0.332 (0.356)	test_acc   0.87 (  0.85)	test_minacc   0.06 (  0.06)	test_majacc   0.99 (  0.99)	Loss_d 0.332 (0.356)	test_acc_d   0.87 (  0.85)	test_minacc_d   0.06 (  0.06)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.95 (  0.94)
Test: [  26/  26]	Loss 0.258 (0.350)	test_acc   0.89 (  0.85)	test_minacc   0.10 (  0.07)	test_majacc   0.99 (  0.99)	Loss_d 0.258 (0.350)	test_acc_d   0.89 (  0.85)	test_minacc_d   0.10 (  0.07)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.94 (  0.94)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.14it/s]
Test: [  0/  1]	Loss 1.849 (1.849)	test_acc   0.16 (  0.16)	test_minacc   0.07 (  0.07)	test_majacc   0.99 (  0.99)	Loss_d 1.849 (1.849)	test_acc_d   0.16 (  0.16)	test_minacc_d   0.07 (  0.07)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.86 (  0.86)
Test: [  1/  1]	Loss 1.849 (1.849)	test_acc   0.16 (  0.16)	test_minacc   0.07 (  0.07)	test_majacc   0.99 (  0.99)	Loss_d 1.849 (1.849)	test_acc_d   0.16 (  0.16)	test_minacc_d   0.07 (  0.07)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.86 (  0.86)
Overall Timing[  9/  1]	epoch_time 0.0369 (0.0413)	validation_time 0.0003 (0.0010)	train_time 0.0365 (0.0396)
record: (train_acc, test_acc) (0.8558000283837318, 0.16500000655651093)
last accs (train_acc, test_acc) (0.8527000278234482, 0.15900000929832458)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.96it/s] 19%|#9        | 5/26 [00:00<00:01, 19.00it/s] 35%|###4      | 9/26 [00:00<00:00, 24.46it/s] 50%|#####     | 13/26 [00:00<00:00, 28.29it/s] 65%|######5   | 17/26 [00:00<00:00, 30.56it/s] 81%|########  | 21/26 [00:00<00:00, 32.15it/s] 96%|#########6| 25/26 [00:00<00:00, 32.87it/s]100%|##########| 26/26 [00:00<00:00, 26.95it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 260 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 261 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 262 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 263 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 264 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 265 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 266 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 267 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 268 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 269 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 270 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 271 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 272 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 273 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 274 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 275 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 276 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 277 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 278 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 279 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 280 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 281 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 282 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 283 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 284 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 285 400
penalty weights 0.0
Epoch: [10][  26/  26]	Loss 0.403 (0.497)	train_nll   0.27 (  0.34)	train_penalty   0.02 (  0.02)	weight_norm   0.14 (  0.16)	train_acc   0.89 (  0.86)	train_minacc   0.10 (  0.22)	train_majacc   0.99 (  0.97)	train_corr   0.00 (  0.00)	l1 13.7733 (12.5978)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.44it/s] 12%|#1        | 3/26 [00:00<00:01, 13.40it/s] 35%|###4      | 9/26 [00:00<00:00, 32.53it/s]                                               35%|###4      | 9/26 [00:00<00:00, 32.53it/s] 58%|#####7    | 15/26 [00:00<00:00, 38.52it/s]                                                58%|#####7    | 15/26 [00:00<00:00, 38.52it/s] 81%|########  | 21/26 [00:00<00:00, 44.66it/s]100%|##########| 26/26 [00:00<00:00, 36.19it/s]
Test: [   0/  26]	Loss 0.368 (0.368)	test_acc   0.83 (  0.83)	test_minacc   0.15 (  0.15)	test_majacc   0.95 (  0.95)	Loss_d 0.368 (0.368)	test_acc_d   0.83 (  0.83)	test_minacc_d   0.15 (  0.15)	test_majacc_d   0.95 (  0.95)	test_corr_d   0.93 (  0.93)
Test: [  10/  26]	Loss 0.384 (0.384)	test_acc   0.83 (  0.84)	test_minacc   0.03 (  0.10)	test_majacc   0.98 (  0.97)	Loss_d 0.384 (0.384)	test_acc_d   0.83 (  0.84)	test_minacc_d   0.03 (  0.10)	test_majacc_d   0.98 (  0.97)	test_corr_d   0.95 (  0.94)
Test: [  20/  26]	Loss 0.356 (0.366)	test_acc   0.85 (  0.85)	test_minacc   0.06 (  0.12)	test_majacc   0.97 (  0.98)	Loss_d 0.356 (0.366)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.06 (  0.12)	test_majacc_d   0.97 (  0.98)	test_corr_d   0.94 (  0.94)
Test: [  26/  26]	Loss 0.261 (0.361)	test_acc   0.90 (  0.85)	test_minacc   0.14 (  0.12)	test_majacc   1.00 (  0.98)	Loss_d 0.261 (0.361)	test_acc_d   0.90 (  0.85)	test_minacc_d   0.14 (  0.12)	test_majacc_d   1.00 (  0.98)	test_corr_d   0.95 (  0.94)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.88it/s]
Test: [  0/  1]	Loss 1.908 (1.908)	test_acc   0.20 (  0.20)	test_minacc   0.11 (  0.11)	test_majacc   1.00 (  1.00)	Loss_d 1.908 (1.908)	test_acc_d   0.20 (  0.20)	test_minacc_d   0.11 (  0.11)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.85 (  0.85)
Test: [  1/  1]	Loss 1.908 (1.908)	test_acc   0.20 (  0.20)	test_minacc   0.11 (  0.11)	test_majacc   1.00 (  1.00)	Loss_d 1.908 (1.908)	test_acc_d   0.20 (  0.20)	test_minacc_d   0.11 (  0.11)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.85 (  0.85)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/30/checkpoints/model_best.pth
Overall Timing[ 10/  1]	epoch_time 0.0370 (0.0409)	validation_time 0.0004 (0.0010)	train_time 0.0366 (0.0393)
record: (train_acc, test_acc) (0.848100027024746, 0.1980000138282776)
last accs (train_acc, test_acc) (0.848100027024746, 0.1980000138282776)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.56it/s] 19%|#9        | 5/26 [00:00<00:00, 23.21it/s] 35%|###4      | 9/26 [00:00<00:00, 28.86it/s] 50%|#####     | 13/26 [00:00<00:00, 31.70it/s] 65%|######5   | 17/26 [00:00<00:00, 33.76it/s] 81%|########  | 21/26 [00:00<00:00, 35.14it/s] 96%|#########6| 25/26 [00:00<00:00, 35.58it/s]100%|##########| 26/26 [00:00<00:00, 30.14it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 286 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 287 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 288 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 289 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 290 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 291 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 292 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 293 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 294 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 295 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 296 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 297 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 298 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 299 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 300 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 301 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 302 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 303 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 304 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 305 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 306 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 307 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 308 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 309 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 310 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 311 400
penalty weights 0.0
Epoch: [11][  26/  26]	Loss 0.385 (0.465)	train_nll   0.27 (  0.34)	train_penalty   0.01 (  0.02)	weight_norm   0.12 (  0.13)	train_acc   0.92 (  0.85)	train_minacc   0.72 (  0.23)	train_majacc   0.95 (  0.96)	train_corr   0.00 (  0.00)	l1 15.0669 (14.3623)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 18.76it/s] 31%|###       | 8/26 [00:00<00:00, 40.17it/s]                                               31%|###       | 8/26 [00:00<00:00, 40.17it/s] 50%|#####     | 13/26 [00:00<00:00, 41.88it/s] 73%|#######3  | 19/26 [00:00<00:00, 48.08it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 48.08it/s] 96%|#########6| 25/26 [00:00<00:00, 48.13it/s]100%|##########| 26/26 [00:00<00:00, 41.05it/s]
Test: [   0/  26]	Loss 0.339 (0.339)	test_acc   0.86 (  0.86)	test_minacc   0.30 (  0.30)	test_majacc   0.96 (  0.96)	Loss_d 0.339 (0.339)	test_acc_d   0.86 (  0.86)	test_minacc_d   0.30 (  0.30)	test_majacc_d   0.96 (  0.96)	test_corr_d   0.90 (  0.90)
Test: [  10/  26]	Loss 0.347 (0.345)	test_acc   0.87 (  0.85)	test_minacc   0.22 (  0.23)	test_majacc   0.98 (  0.96)	Loss_d 0.347 (0.345)	test_acc_d   0.87 (  0.85)	test_minacc_d   0.22 (  0.23)	test_majacc_d   0.98 (  0.96)	test_corr_d   0.91 (  0.89)
Test: [  20/  26]	Loss 0.295 (0.332)	test_acc   0.86 (  0.85)	test_minacc   0.19 (  0.24)	test_majacc   0.97 (  0.96)	Loss_d 0.295 (0.332)	test_acc_d   0.86 (  0.85)	test_minacc_d   0.19 (  0.24)	test_majacc_d   0.97 (  0.96)	test_corr_d   0.91 (  0.89)
Test: [  26/  26]	Loss 0.239 (0.326)	test_acc   0.90 (  0.86)	test_minacc   0.34 (  0.25)	test_majacc   0.97 (  0.97)	Loss_d 0.239 (0.326)	test_acc_d   0.90 (  0.86)	test_minacc_d   0.34 (  0.25)	test_majacc_d   0.97 (  0.97)	test_corr_d   0.91 (  0.89)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.05it/s]
Test: [  0/  1]	Loss 1.597 (1.597)	test_acc   0.33 (  0.33)	test_minacc   0.25 (  0.25)	test_majacc   0.96 (  0.96)	Loss_d 1.597 (1.597)	test_acc_d   0.33 (  0.33)	test_minacc_d   0.25 (  0.25)	test_majacc_d   0.96 (  0.96)	test_corr_d   0.67 (  0.67)
Test: [  1/  1]	Loss 1.597 (1.597)	test_acc   0.33 (  0.33)	test_minacc   0.25 (  0.25)	test_majacc   0.96 (  0.96)	Loss_d 1.597 (1.597)	test_acc_d   0.33 (  0.33)	test_minacc_d   0.25 (  0.25)	test_majacc_d   0.96 (  0.96)	test_corr_d   0.67 (  0.67)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/30/checkpoints/model_best.pth
Overall Timing[ 11/  1]	epoch_time 0.0350 (0.0404)	validation_time 0.0004 (0.0009)	train_time 0.0346 (0.0389)
record: (train_acc, test_acc) (0.858000021994114, 0.32500001788139343)
last accs (train_acc, test_acc) (0.858000021994114, 0.32500001788139343)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:05,  4.99it/s] 15%|#5        | 4/26 [00:00<00:01, 14.41it/s] 31%|###       | 8/26 [00:00<00:00, 22.02it/s] 46%|####6     | 12/26 [00:00<00:00, 27.02it/s] 62%|######1   | 16/26 [00:00<00:00, 30.27it/s] 77%|#######6  | 20/26 [00:00<00:00, 31.88it/s] 92%|#########2| 24/26 [00:00<00:00, 33.63it/s]100%|##########| 26/26 [00:00<00:00, 26.40it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 312 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 313 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 314 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 315 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 316 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 317 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 318 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 319 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 320 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 321 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 322 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 323 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 324 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 325 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 326 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 327 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 328 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 329 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 330 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 331 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 332 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 333 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 334 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 335 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 336 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 337 400
penalty weights 0.0
Epoch: [12][  26/  26]	Loss 0.359 (0.448)	train_nll   0.25 (  0.34)	train_penalty   0.02 (  0.02)	weight_norm   0.10 (  0.11)	train_acc   0.90 (  0.86)	train_minacc   0.45 (  0.25)	train_majacc   0.96 (  0.96)	train_corr   0.00 (  0.00)	l1 16.5503 (15.7640)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 18.76it/s] 31%|###       | 8/26 [00:00<00:00, 39.54it/s]                                               31%|###       | 8/26 [00:00<00:00, 39.54it/s] 50%|#####     | 13/26 [00:00<00:00, 42.70it/s] 73%|#######3  | 19/26 [00:00<00:00, 46.90it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 46.90it/s] 96%|#########6| 25/26 [00:00<00:00, 49.36it/s]100%|##########| 26/26 [00:00<00:00, 41.59it/s]
Test: [   0/  26]	Loss 0.324 (0.324)	test_acc   0.86 (  0.86)	test_minacc   0.23 (  0.23)	test_majacc   0.98 (  0.98)	Loss_d 0.324 (0.324)	test_acc_d   0.86 (  0.86)	test_minacc_d   0.23 (  0.23)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.92 (  0.92)
Test: [  10/  26]	Loss 0.354 (0.350)	test_acc   0.87 (  0.85)	test_minacc   0.22 (  0.18)	test_majacc   0.99 (  0.98)	Loss_d 0.354 (0.350)	test_acc_d   0.87 (  0.85)	test_minacc_d   0.22 (  0.18)	test_majacc_d   0.99 (  0.98)	test_corr_d   0.93 (  0.92)
Test: [  20/  26]	Loss 0.312 (0.337)	test_acc   0.87 (  0.86)	test_minacc   0.19 (  0.18)	test_majacc   0.98 (  0.98)	Loss_d 0.312 (0.337)	test_acc_d   0.87 (  0.86)	test_minacc_d   0.19 (  0.18)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.93 (  0.92)
Test: [  26/  26]	Loss 0.234 (0.331)	test_acc   0.91 (  0.86)	test_minacc   0.31 (  0.19)	test_majacc   0.99 (  0.98)	Loss_d 0.234 (0.331)	test_acc_d   0.91 (  0.86)	test_minacc_d   0.31 (  0.19)	test_majacc_d   0.99 (  0.98)	test_corr_d   0.92 (  0.92)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.45it/s]
Test: [  0/  1]	Loss 1.753 (1.753)	test_acc   0.23 (  0.23)	test_minacc   0.14 (  0.14)	test_majacc   0.98 (  0.98)	Loss_d 1.753 (1.753)	test_acc_d   0.23 (  0.23)	test_minacc_d   0.14 (  0.14)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.79 (  0.79)
Test: [  1/  1]	Loss 1.753 (1.753)	test_acc   0.23 (  0.23)	test_minacc   0.14 (  0.14)	test_majacc   0.98 (  0.98)	Loss_d 1.753 (1.753)	test_acc_d   0.23 (  0.23)	test_minacc_d   0.14 (  0.14)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.79 (  0.79)
Overall Timing[ 12/  1]	epoch_time 0.0360 (0.0401)	validation_time 0.0003 (0.0009)	train_time 0.0357 (0.0387)
record: (train_acc, test_acc) (0.858000021994114, 0.32500001788139343)
last accs (train_acc, test_acc) (0.8596000246405602, 0.22500000894069672)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.98it/s] 19%|#9        | 5/26 [00:00<00:00, 24.41it/s] 35%|###4      | 9/26 [00:00<00:00, 30.40it/s] 50%|#####     | 13/26 [00:00<00:00, 33.37it/s] 65%|######5   | 17/26 [00:00<00:00, 35.03it/s] 81%|########  | 21/26 [00:00<00:00, 36.15it/s] 96%|#########6| 25/26 [00:00<00:00, 36.62it/s]100%|##########| 26/26 [00:00<00:00, 31.22it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 338 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 339 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 340 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 341 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 342 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 343 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 344 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 345 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 346 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 347 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 348 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 349 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 350 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 351 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 352 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 353 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 354 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 355 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 356 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 357 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 358 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 359 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 360 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 361 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 362 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 363 400
penalty weights 0.0
Epoch: [13][  26/  26]	Loss 0.351 (0.433)	train_nll   0.26 (  0.33)	train_penalty   0.01 (  0.02)	weight_norm   0.09 (  0.10)	train_acc   0.87 (  0.85)	train_minacc   0.14 (  0.25)	train_majacc   0.96 (  0.96)	train_corr   0.00 (  0.00)	l1 17.6569 (17.0404)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.55it/s] 27%|##6       | 7/26 [00:00<00:00, 33.32it/s]                                               27%|##6       | 7/26 [00:00<00:00, 33.32it/s] 46%|####6     | 12/26 [00:00<00:00, 39.92it/s] 65%|######5   | 17/26 [00:00<00:00, 41.11it/s]                                                65%|######5   | 17/26 [00:00<00:00, 41.11it/s] 88%|########8 | 23/26 [00:00<00:00, 46.32it/s]100%|##########| 26/26 [00:00<00:00, 37.71it/s]
Test: [   0/  26]	Loss 0.337 (0.337)	test_acc   0.85 (  0.85)	test_minacc   0.11 (  0.11)	test_majacc   0.98 (  0.98)	Loss_d 0.337 (0.337)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.11 (  0.11)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.93 (  0.93)
Test: [  10/  26]	Loss 0.354 (0.342)	test_acc   0.86 (  0.85)	test_minacc   0.10 (  0.10)	test_majacc   1.00 (  0.99)	Loss_d 0.354 (0.342)	test_acc_d   0.86 (  0.85)	test_minacc_d   0.10 (  0.10)	test_majacc_d   1.00 (  0.99)	test_corr_d   0.94 (  0.93)
Test: [  20/  26]	Loss 0.293 (0.328)	test_acc   0.88 (  0.86)	test_minacc   0.15 (  0.12)	test_majacc   0.99 (  0.99)	Loss_d 0.293 (0.328)	test_acc_d   0.88 (  0.86)	test_minacc_d   0.15 (  0.12)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.94 (  0.93)
Test: [  26/  26]	Loss 0.242 (0.322)	test_acc   0.88 (  0.86)	test_minacc   0.07 (  0.12)	test_majacc   0.98 (  0.99)	Loss_d 0.242 (0.322)	test_acc_d   0.88 (  0.86)	test_minacc_d   0.07 (  0.12)	test_majacc_d   0.98 (  0.99)	test_corr_d   0.94 (  0.93)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.04it/s]
Test: [  0/  1]	Loss 1.761 (1.761)	test_acc   0.21 (  0.21)	test_minacc   0.13 (  0.13)	test_majacc   0.98 (  0.98)	Loss_d 1.761 (1.761)	test_acc_d   0.21 (  0.21)	test_minacc_d   0.13 (  0.13)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.80 (  0.80)
Test: [  1/  1]	Loss 1.761 (1.761)	test_acc   0.21 (  0.21)	test_minacc   0.13 (  0.13)	test_majacc   0.98 (  0.98)	Loss_d 1.761 (1.761)	test_acc_d   0.21 (  0.21)	test_minacc_d   0.13 (  0.13)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.80 (  0.80)
Overall Timing[ 13/  1]	epoch_time 0.0366 (0.0398)	validation_time 0.0004 (0.0008)	train_time 0.0361 (0.0385)
record: (train_acc, test_acc) (0.858000021994114, 0.32500001788139343)
last accs (train_acc, test_acc) (0.8579000280499458, 0.2120000123977661)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.61it/s] 19%|#9        | 5/26 [00:00<00:00, 21.87it/s] 35%|###4      | 9/26 [00:00<00:00, 27.61it/s] 50%|#####     | 13/26 [00:00<00:00, 30.71it/s] 65%|######5   | 17/26 [00:00<00:00, 31.96it/s] 81%|########  | 21/26 [00:00<00:00, 32.75it/s] 96%|#########6| 25/26 [00:00<00:00, 33.46it/s]100%|##########| 26/26 [00:00<00:00, 28.28it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 364 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 365 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 366 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 367 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 368 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 369 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 370 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 371 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 372 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 373 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 374 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 375 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 376 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 377 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 378 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 379 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 380 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 381 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 382 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 383 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 384 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 385 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 386 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 387 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 388 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 389 400
penalty weights 0.0
Epoch: [14][  26/  26]	Loss 0.365 (0.417)	train_nll   0.28 (  0.33)	train_penalty   0.02 (  0.02)	weight_norm   0.09 (  0.09)	train_acc   0.89 (  0.86)	train_minacc   0.34 (  0.27)	train_majacc   0.96 (  0.96)	train_corr   0.00 (  0.00)	l1 18.7463 (18.1616)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 15.53it/s] 31%|###       | 8/26 [00:00<00:00, 36.70it/s]                                               31%|###       | 8/26 [00:00<00:00, 36.70it/s] 54%|#####3    | 14/26 [00:00<00:00, 42.74it/s] 77%|#######6  | 20/26 [00:00<00:00, 47.23it/s]                                                77%|#######6  | 20/26 [00:00<00:00, 47.23it/s]100%|##########| 26/26 [00:00<00:00, 41.36it/s]
Test: [   0/  26]	Loss 0.342 (0.342)	test_acc   0.84 (  0.84)	test_minacc   0.05 (  0.05)	test_majacc   0.99 (  0.99)	Loss_d 0.342 (0.342)	test_acc_d   0.84 (  0.84)	test_minacc_d   0.05 (  0.05)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.95 (  0.95)
Test: [  10/  26]	Loss 0.351 (0.352)	test_acc   0.85 (  0.84)	test_minacc   0.05 (  0.06)	test_majacc   1.00 (  0.99)	Loss_d 0.351 (0.352)	test_acc_d   0.85 (  0.84)	test_minacc_d   0.05 (  0.06)	test_majacc_d   1.00 (  0.99)	test_corr_d   0.96 (  0.95)
Test: [  20/  26]	Loss 0.303 (0.335)	test_acc   0.87 (  0.85)	test_minacc   0.04 (  0.07)	test_majacc   1.00 (  0.99)	Loss_d 0.303 (0.335)	test_acc_d   0.87 (  0.85)	test_minacc_d   0.04 (  0.07)	test_majacc_d   1.00 (  0.99)	test_corr_d   0.96 (  0.95)
Test: [  26/  26]	Loss 0.248 (0.330)	test_acc   0.88 (  0.85)	test_minacc   0.00 (  0.07)	test_majacc   1.00 (  0.99)	Loss_d 0.248 (0.330)	test_acc_d   0.88 (  0.85)	test_minacc_d   0.00 (  0.07)	test_majacc_d   1.00 (  0.99)	test_corr_d   0.96 (  0.95)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.73it/s]
Test: [  0/  1]	Loss 1.787 (1.787)	test_acc   0.15 (  0.15)	test_minacc   0.06 (  0.06)	test_majacc   0.99 (  0.99)	Loss_d 1.787 (1.787)	test_acc_d   0.15 (  0.15)	test_minacc_d   0.06 (  0.06)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.89 (  0.89)
Test: [  1/  1]	Loss 1.787 (1.787)	test_acc   0.15 (  0.15)	test_minacc   0.06 (  0.06)	test_majacc   0.99 (  0.99)	Loss_d 1.787 (1.787)	test_acc_d   0.15 (  0.15)	test_minacc_d   0.06 (  0.06)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.89 (  0.89)
Overall Timing[ 14/  1]	epoch_time 0.0372 (0.0397)	validation_time 0.0003 (0.0008)	train_time 0.0369 (0.0384)
record: (train_acc, test_acc) (0.858000021994114, 0.32500001788139343)
last accs (train_acc, test_acc) (0.8548000205159187, 0.14900000393390656)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 15.46it/s] 23%|##3       | 6/26 [00:00<00:00, 25.44it/s] 38%|###8      | 10/26 [00:00<00:00, 30.06it/s] 54%|#####3    | 14/26 [00:00<00:00, 32.62it/s] 69%|######9   | 18/26 [00:00<00:00, 34.15it/s] 85%|########4 | 22/26 [00:00<00:00, 35.23it/s]100%|##########| 26/26 [00:00<00:00, 35.78it/s]100%|##########| 26/26 [00:00<00:00, 30.30it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 390 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 391 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 392 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 393 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 394 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 395 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 396 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 397 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 398 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 399 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 400 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 401 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 402 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 403 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 404 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 405 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 406 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 407 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 408 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 409 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 410 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 411 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 412 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 413 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 414 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 415 400
penalty weights 10000.0
Epoch: [15][  26/  26]	Loss 0.000 (0.170)	train_nll   0.66 (  0.47)	train_penalty   0.00 (  0.01)	weight_norm   0.13 (  0.10)	train_acc   0.61 (  0.76)	train_minacc   0.66 (  0.49)	train_majacc   0.61 (  0.81)	train_corr   0.00 (  0.00)	l1 18.4571 (18.8275)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 16.35it/s] 27%|##6       | 7/26 [00:00<00:00, 33.28it/s]                                               27%|##6       | 7/26 [00:00<00:00, 33.28it/s] 50%|#####     | 13/26 [00:00<00:00, 40.57it/s] 73%|#######3  | 19/26 [00:00<00:00, 45.66it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 45.66it/s] 96%|#########6| 25/26 [00:00<00:00, 47.82it/s]100%|##########| 26/26 [00:00<00:00, 39.66it/s]
Test: [   0/  26]	Loss 0.643 (0.643)	test_acc   0.61 (  0.61)	test_minacc   0.72 (  0.72)	test_majacc   0.59 (  0.59)	Loss_d 0.643 (0.643)	test_acc_d   0.61 (  0.61)	test_minacc_d   0.72 (  0.72)	test_majacc_d   0.59 (  0.59)	test_corr_d   0.21 (  0.21)
Test: [  10/  26]	Loss 0.657 (0.645)	test_acc   0.60 (  0.61)	test_minacc   0.64 (  0.71)	test_majacc   0.60 (  0.59)	Loss_d 0.657 (0.645)	test_acc_d   0.60 (  0.61)	test_minacc_d   0.64 (  0.71)	test_majacc_d   0.60 (  0.59)	test_corr_d   0.20 (  0.20)
Test: [  20/  26]	Loss 0.647 (0.648)	test_acc   0.61 (  0.61)	test_minacc   0.64 (  0.69)	test_majacc   0.60 (  0.59)	Loss_d 0.647 (0.648)	test_acc_d   0.61 (  0.61)	test_minacc_d   0.64 (  0.69)	test_majacc_d   0.60 (  0.59)	test_corr_d   0.26 (  0.20)
Test: [  26/  26]	Loss 0.657 (0.647)	test_acc   0.61 (  0.61)	test_minacc   0.66 (  0.69)	test_majacc   0.61 (  0.59)	Loss_d 0.657 (0.647)	test_acc_d   0.61 (  0.61)	test_minacc_d   0.66 (  0.69)	test_majacc_d   0.61 (  0.59)	test_corr_d   0.23 (  0.21)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.47it/s]
Test: [  0/  1]	Loss 0.633 (0.633)	test_acc   0.66 (  0.66)	test_minacc   0.66 (  0.66)	test_majacc   0.65 (  0.65)	Loss_d 0.633 (0.633)	test_acc_d   0.66 (  0.66)	test_minacc_d   0.66 (  0.66)	test_majacc_d   0.65 (  0.65)	test_corr_d  -0.35 ( -0.35)
Test: [  1/  1]	Loss 0.633 (0.633)	test_acc   0.66 (  0.66)	test_minacc   0.66 (  0.66)	test_majacc   0.65 (  0.65)	Loss_d 0.633 (0.633)	test_acc_d   0.66 (  0.66)	test_minacc_d   0.66 (  0.66)	test_majacc_d   0.65 (  0.65)	test_corr_d  -0.35 ( -0.35)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/30/checkpoints/model_best.pth
Overall Timing[ 15/  1]	epoch_time 0.0361 (0.0394)	validation_time 0.0003 (0.0008)	train_time 0.0358 (0.0382)
record: (train_acc, test_acc) (0.6095000122785568, 0.6620000600814819)
last accs (train_acc, test_acc) (0.6095000122785568, 0.6620000600814819)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.59it/s] 19%|#9        | 5/26 [00:00<00:00, 22.75it/s] 35%|###4      | 9/26 [00:00<00:00, 28.10it/s] 50%|#####     | 13/26 [00:00<00:00, 30.66it/s] 65%|######5   | 17/26 [00:00<00:00, 32.10it/s] 81%|########  | 21/26 [00:00<00:00, 33.26it/s] 96%|#########6| 25/26 [00:00<00:00, 33.86it/s]100%|##########| 26/26 [00:00<00:00, 28.70it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 416 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 417 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 418 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 419 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 420 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 421 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 422 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 423 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 424 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 425 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 426 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 427 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 428 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 429 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 430 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 431 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 432 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 433 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 434 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 435 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 436 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 437 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 438 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 439 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 440 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 441 400
penalty weights 10000.0
Epoch: [16][  26/  26]	Loss 0.000 (0.000)	train_nll   0.68 (  0.67)	train_penalty   0.00 (  0.00)	weight_norm   0.15 (  0.14)	train_acc   0.52 (  0.56)	train_minacc   0.52 (  0.60)	train_majacc   0.52 (  0.55)	train_corr   0.00 (  0.00)	l1 18.2221 (18.2982)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.40it/s] 23%|##3       | 6/26 [00:00<00:00, 29.02it/s]                                               23%|##3       | 6/26 [00:00<00:00, 29.02it/s] 46%|####6     | 12/26 [00:00<00:00, 40.85it/s] 65%|######5   | 17/26 [00:00<00:00, 41.92it/s]                                                65%|######5   | 17/26 [00:00<00:00, 41.92it/s] 88%|########8 | 23/26 [00:00<00:00, 47.34it/s]100%|##########| 26/26 [00:00<00:00, 38.03it/s]
Test: [   0/  26]	Loss 0.678 (0.678)	test_acc   0.52 (  0.52)	test_minacc   0.59 (  0.59)	test_majacc   0.51 (  0.51)	Loss_d 0.678 (0.678)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.59 (  0.59)	test_majacc_d   0.51 (  0.51)	test_corr_d   0.38 (  0.38)
Test: [  10/  26]	Loss 0.681 (0.678)	test_acc   0.52 (  0.52)	test_minacc   0.44 (  0.54)	test_majacc   0.53 (  0.52)	Loss_d 0.681 (0.678)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.44 (  0.54)	test_majacc_d   0.53 (  0.52)	test_corr_d   0.36 (  0.37)
Test: [  20/  26]	Loss 0.682 (0.679)	test_acc   0.51 (  0.52)	test_minacc   0.51 (  0.53)	test_majacc   0.51 (  0.52)	Loss_d 0.682 (0.679)	test_acc_d   0.51 (  0.52)	test_minacc_d   0.51 (  0.53)	test_majacc_d   0.51 (  0.52)	test_corr_d   0.38 (  0.37)
Test: [  26/  26]	Loss 0.679 (0.678)	test_acc   0.52 (  0.52)	test_minacc   0.52 (  0.53)	test_majacc   0.52 (  0.52)	Loss_d 0.679 (0.678)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.52 (  0.53)	test_majacc_d   0.52 (  0.52)	test_corr_d   0.43 (  0.38)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 64.34it/s]
Test: [  0/  1]	Loss 0.691 (0.691)	test_acc   0.53 (  0.53)	test_minacc   0.53 (  0.53)	test_majacc   0.52 (  0.52)	Loss_d 0.691 (0.691)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.52 (  0.52)	test_corr_d  -0.12 ( -0.12)
Test: [  1/  1]	Loss 0.691 (0.691)	test_acc   0.53 (  0.53)	test_minacc   0.53 (  0.53)	test_majacc   0.52 (  0.52)	Loss_d 0.691 (0.691)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.52 (  0.52)	test_corr_d  -0.12 ( -0.12)
Overall Timing[ 16/  1]	epoch_time 0.0362 (0.0392)	validation_time 0.0004 (0.0008)	train_time 0.0358 (0.0381)
record: (train_acc, test_acc) (0.6095000122785568, 0.6620000600814819)
last accs (train_acc, test_acc) (0.5206000160872937, 0.5300000309944153)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.98it/s] 19%|#9        | 5/26 [00:00<00:00, 22.37it/s] 35%|###4      | 9/26 [00:00<00:00, 27.72it/s] 50%|#####     | 13/26 [00:00<00:00, 30.17it/s] 65%|######5   | 17/26 [00:00<00:00, 31.43it/s] 81%|########  | 21/26 [00:00<00:00, 32.99it/s] 96%|#########6| 25/26 [00:00<00:00, 33.74it/s]100%|##########| 26/26 [00:00<00:00, 28.39it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 442 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 443 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 444 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 445 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 446 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 447 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 448 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 449 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 450 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 451 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 452 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 453 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 454 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 455 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 456 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 457 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 458 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 459 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 460 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 461 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 462 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 463 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 464 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 465 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 466 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 467 400
penalty weights 10000.0
Epoch: [17][  26/  26]	Loss 0.000 (0.000)	train_nll   0.70 (  0.68)	train_penalty   0.00 (  0.00)	weight_norm   0.15 (  0.15)	train_acc   0.51 (  0.51)	train_minacc   0.52 (  0.54)	train_majacc   0.51 (  0.51)	train_corr   0.00 (  0.00)	l1 18.1850 (18.1979)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 18.19it/s] 27%|##6       | 7/26 [00:00<00:00, 35.14it/s]                                               27%|##6       | 7/26 [00:00<00:00, 35.14it/s] 50%|#####     | 13/26 [00:00<00:00, 39.89it/s] 73%|#######3  | 19/26 [00:00<00:00, 46.11it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 46.11it/s] 92%|#########2| 24/26 [00:00<00:00, 46.54it/s]100%|##########| 26/26 [00:00<00:00, 39.04it/s]
Test: [   0/  26]	Loss 0.696 (0.696)	test_acc   0.49 (  0.49)	test_minacc   0.54 (  0.54)	test_majacc   0.49 (  0.49)	Loss_d 0.696 (0.696)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.54 (  0.54)	test_majacc_d   0.49 (  0.49)	test_corr_d   0.10 (  0.10)
Test: [  10/  26]	Loss 0.695 (0.695)	test_acc   0.50 (  0.50)	test_minacc   0.41 (  0.50)	test_majacc   0.51 (  0.50)	Loss_d 0.695 (0.695)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.41 (  0.50)	test_majacc_d   0.51 (  0.50)	test_corr_d   0.09 (  0.03)
Test: [  20/  26]	Loss 0.697 (0.696)	test_acc   0.47 (  0.50)	test_minacc   0.45 (  0.50)	test_majacc   0.48 (  0.50)	Loss_d 0.697 (0.696)	test_acc_d   0.47 (  0.50)	test_minacc_d   0.45 (  0.50)	test_majacc_d   0.48 (  0.50)	test_corr_d   0.08 (  0.02)
Test: [  26/  26]	Loss 0.695 (0.695)	test_acc   0.51 (  0.50)	test_minacc   0.52 (  0.50)	test_majacc   0.51 (  0.50)	Loss_d 0.695 (0.695)	test_acc_d   0.51 (  0.50)	test_minacc_d   0.52 (  0.50)	test_majacc_d   0.51 (  0.50)	test_corr_d  -0.04 (  0.02)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 65.11it/s]
Test: [  0/  1]	Loss 0.686 (0.686)	test_acc   0.51 (  0.51)	test_minacc   0.52 (  0.52)	test_majacc   0.50 (  0.50)	Loss_d 0.686 (0.686)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.32 ( -0.32)
Test: [  1/  1]	Loss 0.686 (0.686)	test_acc   0.51 (  0.51)	test_minacc   0.52 (  0.52)	test_majacc   0.50 (  0.50)	Loss_d 0.686 (0.686)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.32 ( -0.32)
Overall Timing[ 17/  1]	epoch_time 0.0377 (0.0392)	validation_time 0.0004 (0.0007)	train_time 0.0373 (0.0380)
record: (train_acc, test_acc) (0.6095000122785568, 0.6620000600814819)
last accs (train_acc, test_acc) (0.4996000120639801, 0.5139999985694885)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.69it/s] 19%|#9        | 5/26 [00:00<00:00, 23.65it/s] 35%|###4      | 9/26 [00:00<00:00, 28.15it/s] 50%|#####     | 13/26 [00:00<00:00, 30.22it/s] 65%|######5   | 17/26 [00:00<00:00, 32.53it/s] 81%|########  | 21/26 [00:00<00:00, 33.43it/s] 96%|#########6| 25/26 [00:00<00:00, 33.68it/s]100%|##########| 26/26 [00:00<00:00, 28.95it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 468 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 469 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 470 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 471 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 472 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 473 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 474 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 475 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 476 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 477 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 478 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 479 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 480 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 481 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 482 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 483 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 484 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 485 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 486 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 487 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 488 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 489 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 490 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 491 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 492 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 493 400
penalty weights 10000.0
Epoch: [18][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.15 (  0.15)	train_acc   0.52 (  0.52)	train_minacc   0.59 (  0.56)	train_majacc   0.51 (  0.51)	train_corr   0.00 (  0.00)	l1 18.1734 (18.1789)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.56it/s] 27%|##6       | 7/26 [00:00<00:00, 31.54it/s]                                               27%|##6       | 7/26 [00:00<00:00, 31.54it/s] 50%|#####     | 13/26 [00:00<00:00, 38.02it/s] 73%|#######3  | 19/26 [00:00<00:00, 44.23it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 44.23it/s] 96%|#########6| 25/26 [00:00<00:00, 45.23it/s]100%|##########| 26/26 [00:00<00:00, 37.01it/s]
Test: [   0/  26]	Loss 0.694 (0.694)	test_acc   0.49 (  0.49)	test_minacc   0.57 (  0.57)	test_majacc   0.48 (  0.48)	Loss_d 0.694 (0.694)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.57 (  0.57)	test_majacc_d   0.48 (  0.48)	test_corr_d   0.11 (  0.11)
Test: [  10/  26]	Loss 0.694 (0.694)	test_acc   0.51 (  0.50)	test_minacc   0.44 (  0.54)	test_majacc   0.52 (  0.49)	Loss_d 0.694 (0.694)	test_acc_d   0.51 (  0.50)	test_minacc_d   0.44 (  0.54)	test_majacc_d   0.52 (  0.49)	test_corr_d   0.09 (  0.04)
Test: [  20/  26]	Loss 0.696 (0.695)	test_acc   0.47 (  0.50)	test_minacc   0.51 (  0.53)	test_majacc   0.47 (  0.49)	Loss_d 0.696 (0.695)	test_acc_d   0.47 (  0.50)	test_minacc_d   0.51 (  0.53)	test_majacc_d   0.47 (  0.49)	test_corr_d   0.03 (  0.03)
Test: [  26/  26]	Loss 0.694 (0.694)	test_acc   0.52 (  0.50)	test_minacc   0.59 (  0.53)	test_majacc   0.51 (  0.49)	Loss_d 0.694 (0.694)	test_acc_d   0.52 (  0.50)	test_minacc_d   0.59 (  0.53)	test_majacc_d   0.51 (  0.49)	test_corr_d  -0.02 (  0.02)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.21it/s]
Test: [  0/  1]	Loss 0.687 (0.687)	test_acc   0.56 (  0.56)	test_minacc   0.57 (  0.57)	test_majacc   0.52 (  0.52)	Loss_d 0.687 (0.687)	test_acc_d   0.56 (  0.56)	test_minacc_d   0.57 (  0.57)	test_majacc_d   0.52 (  0.52)	test_corr_d  -0.24 ( -0.24)
Test: [  1/  1]	Loss 0.687 (0.687)	test_acc   0.56 (  0.56)	test_minacc   0.57 (  0.57)	test_majacc   0.52 (  0.52)	Loss_d 0.687 (0.687)	test_acc_d   0.56 (  0.56)	test_minacc_d   0.57 (  0.57)	test_majacc_d   0.52 (  0.52)	test_corr_d  -0.24 ( -0.24)
Overall Timing[ 18/  1]	epoch_time 0.0373 (0.0391)	validation_time 0.0005 (0.0007)	train_time 0.0368 (0.0380)
record: (train_acc, test_acc) (0.6095000122785568, 0.6620000600814819)
last accs (train_acc, test_acc) (0.4997000089883804, 0.5649999976158142)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.41it/s] 19%|#9        | 5/26 [00:00<00:01, 20.86it/s] 35%|###4      | 9/26 [00:00<00:00, 27.38it/s] 50%|#####     | 13/26 [00:00<00:00, 30.49it/s] 65%|######5   | 17/26 [00:00<00:00, 32.25it/s] 81%|########  | 21/26 [00:00<00:00, 33.59it/s] 96%|#########6| 25/26 [00:00<00:00, 34.19it/s]100%|##########| 26/26 [00:00<00:00, 28.20it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 494 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 495 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 496 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 497 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 498 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 499 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 500 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 501 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 502 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 503 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 504 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 505 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 506 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 507 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 508 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 509 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 510 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 511 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 512 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 513 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 514 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 515 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 516 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 517 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 518 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 519 400
penalty weights 10000.0
Epoch: [19][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.15 (  0.15)	train_acc   0.50 (  0.52)	train_minacc   0.62 (  0.59)	train_majacc   0.48 (  0.51)	train_corr   0.00 (  0.00)	l1 18.1675 (18.1698)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.68it/s] 27%|##6       | 7/26 [00:00<00:00, 29.84it/s]                                               27%|##6       | 7/26 [00:00<00:00, 29.84it/s] 46%|####6     | 12/26 [00:00<00:00, 37.53it/s] 65%|######5   | 17/26 [00:00<00:00, 41.89it/s]                                                65%|######5   | 17/26 [00:00<00:00, 41.89it/s] 88%|########8 | 23/26 [00:00<00:00, 47.89it/s]100%|##########| 26/26 [00:00<00:00, 37.05it/s]
Test: [   0/  26]	Loss 0.690 (0.690)	test_acc   0.55 (  0.55)	test_minacc   0.59 (  0.59)	test_majacc   0.55 (  0.55)	Loss_d 0.690 (0.690)	test_acc_d   0.55 (  0.55)	test_minacc_d   0.59 (  0.59)	test_majacc_d   0.55 (  0.55)	test_corr_d   0.15 (  0.15)
Test: [  10/  26]	Loss 0.690 (0.690)	test_acc   0.53 (  0.54)	test_minacc   0.51 (  0.62)	test_majacc   0.53 (  0.52)	Loss_d 0.690 (0.690)	test_acc_d   0.53 (  0.54)	test_minacc_d   0.51 (  0.62)	test_majacc_d   0.53 (  0.52)	test_corr_d   0.09 (  0.06)
Test: [  20/  26]	Loss 0.691 (0.691)	test_acc   0.53 (  0.53)	test_minacc   0.57 (  0.61)	test_majacc   0.52 (  0.52)	Loss_d 0.691 (0.691)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.57 (  0.61)	test_majacc_d   0.52 (  0.52)	test_corr_d   0.08 (  0.05)
Test: [  26/  26]	Loss 0.692 (0.691)	test_acc   0.50 (  0.53)	test_minacc   0.62 (  0.61)	test_majacc   0.48 (  0.52)	Loss_d 0.692 (0.691)	test_acc_d   0.50 (  0.53)	test_minacc_d   0.62 (  0.61)	test_majacc_d   0.48 (  0.52)	test_corr_d   0.00 (  0.05)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.62it/s]
Test: [  0/  1]	Loss 0.682 (0.682)	test_acc   0.64 (  0.64)	test_minacc   0.64 (  0.64)	test_majacc   0.63 (  0.63)	Loss_d 0.682 (0.682)	test_acc_d   0.64 (  0.64)	test_minacc_d   0.64 (  0.64)	test_majacc_d   0.63 (  0.63)	test_corr_d  -0.32 ( -0.32)
Test: [  1/  1]	Loss 0.682 (0.682)	test_acc   0.64 (  0.64)	test_minacc   0.64 (  0.64)	test_majacc   0.63 (  0.63)	Loss_d 0.682 (0.682)	test_acc_d   0.64 (  0.64)	test_minacc_d   0.64 (  0.64)	test_majacc_d   0.63 (  0.63)	test_corr_d  -0.32 ( -0.32)
Overall Timing[ 19/  1]	epoch_time 0.0377 (0.0390)	validation_time 0.0003 (0.0007)	train_time 0.0373 (0.0379)
record: (train_acc, test_acc) (0.6095000122785568, 0.6620000600814819)
last accs (train_acc, test_acc) (0.5318000183999538, 0.6390000581741333)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.05it/s] 19%|#9        | 5/26 [00:00<00:01, 17.87it/s] 35%|###4      | 9/26 [00:00<00:00, 24.38it/s] 50%|#####     | 13/26 [00:00<00:00, 28.30it/s] 65%|######5   | 17/26 [00:00<00:00, 30.77it/s] 81%|########  | 21/26 [00:00<00:00, 32.83it/s] 96%|#########6| 25/26 [00:00<00:00, 34.19it/s]100%|##########| 26/26 [00:00<00:00, 26.95it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 520 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 521 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 522 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 523 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 524 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 525 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 526 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 527 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 528 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 529 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 530 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 531 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 532 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 533 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 534 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 535 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 536 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 537 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 538 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 539 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 540 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 541 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 542 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 543 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 544 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 545 400
penalty weights 10000.0
Epoch: [20][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.15 (  0.15)	train_acc   0.49 (  0.52)	train_minacc   0.62 (  0.61)	train_majacc   0.47 (  0.51)	train_corr   0.00 (  0.00)	l1 18.1666 (18.1668)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 19.67it/s] 31%|###       | 8/26 [00:00<00:00, 41.89it/s]                                               31%|###       | 8/26 [00:00<00:00, 41.89it/s] 50%|#####     | 13/26 [00:00<00:00, 43.27it/s] 73%|#######3  | 19/26 [00:00<00:00, 49.25it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 49.25it/s] 96%|#########6| 25/26 [00:00<00:00, 48.85it/s]100%|##########| 26/26 [00:00<00:00, 41.60it/s]
Test: [   0/  26]	Loss 0.690 (0.690)	test_acc   0.57 (  0.57)	test_minacc   0.62 (  0.62)	test_majacc   0.56 (  0.56)	Loss_d 0.690 (0.690)	test_acc_d   0.57 (  0.57)	test_minacc_d   0.62 (  0.62)	test_majacc_d   0.56 (  0.56)	test_corr_d   0.17 (  0.17)
Test: [  10/  26]	Loss 0.691 (0.691)	test_acc   0.53 (  0.54)	test_minacc   0.54 (  0.63)	test_majacc   0.52 (  0.52)	Loss_d 0.691 (0.691)	test_acc_d   0.53 (  0.54)	test_minacc_d   0.54 (  0.63)	test_majacc_d   0.52 (  0.52)	test_corr_d   0.11 (  0.07)
Test: [  20/  26]	Loss 0.691 (0.691)	test_acc   0.52 (  0.53)	test_minacc   0.58 (  0.62)	test_majacc   0.50 (  0.51)	Loss_d 0.691 (0.691)	test_acc_d   0.52 (  0.53)	test_minacc_d   0.58 (  0.62)	test_majacc_d   0.50 (  0.51)	test_corr_d   0.08 (  0.06)
Test: [  26/  26]	Loss 0.693 (0.692)	test_acc   0.48 (  0.53)	test_minacc   0.66 (  0.62)	test_majacc   0.46 (  0.51)	Loss_d 0.693 (0.692)	test_acc_d   0.48 (  0.53)	test_minacc_d   0.66 (  0.62)	test_majacc_d   0.46 (  0.51)	test_corr_d  -0.00 (  0.05)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 67.77it/s]
Test: [  0/  1]	Loss 0.685 (0.685)	test_acc   0.65 (  0.65)	test_minacc   0.65 (  0.65)	test_majacc   0.63 (  0.63)	Loss_d 0.685 (0.685)	test_acc_d   0.65 (  0.65)	test_minacc_d   0.65 (  0.65)	test_majacc_d   0.63 (  0.63)	test_corr_d  -0.29 ( -0.29)
Test: [  1/  1]	Loss 0.685 (0.685)	test_acc   0.65 (  0.65)	test_minacc   0.65 (  0.65)	test_majacc   0.63 (  0.63)	Loss_d 0.685 (0.685)	test_acc_d   0.65 (  0.65)	test_minacc_d   0.65 (  0.65)	test_majacc_d   0.63 (  0.63)	test_corr_d  -0.29 ( -0.29)
Overall Timing[ 20/  1]	epoch_time 0.0362 (0.0389)	validation_time 0.0003 (0.0007)	train_time 0.0359 (0.0378)
record: (train_acc, test_acc) (0.6095000122785568, 0.6620000600814819)
last accs (train_acc, test_acc) (0.528900009393692, 0.6460000276565552)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 16.32it/s] 23%|##3       | 6/26 [00:00<00:00, 24.71it/s] 38%|###8      | 10/26 [00:00<00:00, 28.24it/s] 54%|#####3    | 14/26 [00:00<00:00, 29.93it/s] 69%|######9   | 18/26 [00:00<00:00, 30.55it/s] 85%|########4 | 22/26 [00:00<00:00, 31.93it/s]100%|##########| 26/26 [00:00<00:00, 33.35it/s]100%|##########| 26/26 [00:00<00:00, 28.06it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 546 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 547 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 548 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 549 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 550 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 551 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 552 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 553 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 554 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 555 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 556 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 557 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 558 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 559 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 560 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 561 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 562 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 563 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 564 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 565 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 566 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 567 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 568 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 569 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 570 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 571 400
penalty weights 10000.0
Epoch: [21][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.15 (  0.15)	train_acc   0.49 (  0.52)	train_minacc   0.59 (  0.63)	train_majacc   0.48 (  0.49)	train_corr   0.00 (  0.00)	l1 18.1661 (18.1662)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 19.59it/s] 31%|###       | 8/26 [00:00<00:00, 40.16it/s]                                               31%|###       | 8/26 [00:00<00:00, 40.16it/s] 54%|#####3    | 14/26 [00:00<00:00, 46.17it/s] 77%|#######6  | 20/26 [00:00<00:00, 49.34it/s]                                                77%|#######6  | 20/26 [00:00<00:00, 49.34it/s]100%|##########| 26/26 [00:00<00:00, 51.96it/s]100%|##########| 26/26 [00:00<00:00, 42.36it/s]
Test: [   0/  26]	Loss 0.690 (0.690)	test_acc   0.56 (  0.56)	test_minacc   0.67 (  0.67)	test_majacc   0.54 (  0.54)	Loss_d 0.690 (0.690)	test_acc_d   0.56 (  0.56)	test_minacc_d   0.67 (  0.67)	test_majacc_d   0.54 (  0.54)	test_corr_d   0.15 (  0.15)
Test: [  10/  26]	Loss 0.691 (0.691)	test_acc   0.54 (  0.54)	test_minacc   0.54 (  0.66)	test_majacc   0.54 (  0.52)	Loss_d 0.691 (0.691)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.54 (  0.66)	test_majacc_d   0.54 (  0.52)	test_corr_d   0.09 (  0.06)
Test: [  20/  26]	Loss 0.690 (0.691)	test_acc   0.52 (  0.53)	test_minacc   0.60 (  0.65)	test_majacc   0.51 (  0.51)	Loss_d 0.690 (0.691)	test_acc_d   0.52 (  0.53)	test_minacc_d   0.60 (  0.65)	test_majacc_d   0.51 (  0.51)	test_corr_d   0.07 (  0.05)
Test: [  26/  26]	Loss 0.693 (0.692)	test_acc   0.49 (  0.53)	test_minacc   0.59 (  0.65)	test_majacc   0.48 (  0.51)	Loss_d 0.693 (0.692)	test_acc_d   0.49 (  0.53)	test_minacc_d   0.59 (  0.65)	test_majacc_d   0.48 (  0.51)	test_corr_d  -0.02 (  0.04)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 64.08it/s]
Test: [  0/  1]	Loss 0.684 (0.684)	test_acc   0.66 (  0.66)	test_minacc   0.67 (  0.67)	test_majacc   0.62 (  0.62)	Loss_d 0.684 (0.684)	test_acc_d   0.66 (  0.66)	test_minacc_d   0.67 (  0.67)	test_majacc_d   0.62 (  0.62)	test_corr_d  -0.31 ( -0.31)
Test: [  1/  1]	Loss 0.684 (0.684)	test_acc   0.66 (  0.66)	test_minacc   0.67 (  0.67)	test_majacc   0.62 (  0.62)	Loss_d 0.684 (0.684)	test_acc_d   0.66 (  0.66)	test_minacc_d   0.67 (  0.67)	test_majacc_d   0.62 (  0.62)	test_corr_d  -0.31 ( -0.31)
Overall Timing[ 21/  1]	epoch_time 0.0367 (0.0388)	validation_time 0.0004 (0.0007)	train_time 0.0363 (0.0378)
record: (train_acc, test_acc) (0.6095000122785568, 0.6620000600814819)
last accs (train_acc, test_acc) (0.530600007802248, 0.6630000472068787)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.27it/s] 19%|#9        | 5/26 [00:00<00:00, 24.22it/s] 35%|###4      | 9/26 [00:00<00:00, 28.49it/s] 50%|#####     | 13/26 [00:00<00:00, 30.90it/s] 65%|######5   | 17/26 [00:00<00:00, 32.22it/s] 81%|########  | 21/26 [00:00<00:00, 33.48it/s] 96%|#########6| 25/26 [00:00<00:00, 34.49it/s]100%|##########| 26/26 [00:00<00:00, 29.36it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 572 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 573 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 574 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 575 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 576 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 577 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 578 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 579 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 580 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 581 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 582 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 583 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 584 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 585 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 586 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 587 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 588 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 589 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 590 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 591 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 592 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 593 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 594 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 595 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 596 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 597 400
penalty weights 10000.0
Epoch: [22][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.15 (  0.15)	train_acc   0.49 (  0.51)	train_minacc   0.52 (  0.63)	train_majacc   0.48 (  0.49)	train_corr   0.00 (  0.00)	l1 18.1657 (18.1658)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.16it/s] 27%|##6       | 7/26 [00:00<00:00, 32.09it/s]                                               27%|##6       | 7/26 [00:00<00:00, 32.09it/s] 50%|#####     | 13/26 [00:00<00:00, 37.71it/s] 73%|#######3  | 19/26 [00:00<00:00, 43.75it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 43.75it/s] 96%|#########6| 25/26 [00:00<00:00, 45.15it/s]100%|##########| 26/26 [00:00<00:00, 37.14it/s]
Test: [   0/  26]	Loss 0.690 (0.690)	test_acc   0.57 (  0.57)	test_minacc   0.69 (  0.69)	test_majacc   0.55 (  0.55)	Loss_d 0.690 (0.690)	test_acc_d   0.57 (  0.57)	test_minacc_d   0.69 (  0.69)	test_majacc_d   0.55 (  0.55)	test_corr_d   0.17 (  0.17)
Test: [  10/  26]	Loss 0.691 (0.691)	test_acc   0.54 (  0.55)	test_minacc   0.56 (  0.67)	test_majacc   0.54 (  0.53)	Loss_d 0.691 (0.691)	test_acc_d   0.54 (  0.55)	test_minacc_d   0.56 (  0.67)	test_majacc_d   0.54 (  0.53)	test_corr_d   0.10 (  0.07)
Test: [  20/  26]	Loss 0.690 (0.691)	test_acc   0.53 (  0.54)	test_minacc   0.64 (  0.65)	test_majacc   0.52 (  0.51)	Loss_d 0.690 (0.691)	test_acc_d   0.53 (  0.54)	test_minacc_d   0.64 (  0.65)	test_majacc_d   0.52 (  0.51)	test_corr_d   0.07 (  0.06)
Test: [  26/  26]	Loss 0.693 (0.691)	test_acc   0.48 (  0.53)	test_minacc   0.52 (  0.65)	test_majacc   0.48 (  0.51)	Loss_d 0.693 (0.691)	test_acc_d   0.48 (  0.53)	test_minacc_d   0.52 (  0.65)	test_majacc_d   0.48 (  0.51)	test_corr_d  -0.01 (  0.05)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.06it/s]
Test: [  0/  1]	Loss 0.685 (0.685)	test_acc   0.66 (  0.66)	test_minacc   0.66 (  0.66)	test_majacc   0.61 (  0.61)	Loss_d 0.685 (0.685)	test_acc_d   0.66 (  0.66)	test_minacc_d   0.66 (  0.66)	test_majacc_d   0.61 (  0.61)	test_corr_d  -0.31 ( -0.31)
Test: [  1/  1]	Loss 0.685 (0.685)	test_acc   0.66 (  0.66)	test_minacc   0.66 (  0.66)	test_majacc   0.61 (  0.61)	Loss_d 0.685 (0.685)	test_acc_d   0.66 (  0.66)	test_minacc_d   0.66 (  0.66)	test_majacc_d   0.61 (  0.61)	test_corr_d  -0.31 ( -0.31)
Overall Timing[ 22/  1]	epoch_time 0.0384 (0.0387)	validation_time 0.0006 (0.0007)	train_time 0.0378 (0.0378)
record: (train_acc, test_acc) (0.6095000122785568, 0.6620000600814819)
last accs (train_acc, test_acc) (0.5347000158131122, 0.659000039100647)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  6.01it/s] 15%|#5        | 4/26 [00:00<00:01, 15.39it/s] 23%|##3       | 6/26 [00:00<00:01, 15.68it/s] 31%|###       | 8/26 [00:00<00:01, 16.14it/s] 38%|###8      | 10/26 [00:00<00:00, 16.39it/s] 46%|####6     | 12/26 [00:00<00:00, 16.54it/s] 54%|#####3    | 14/26 [00:00<00:00, 16.77it/s] 62%|######1   | 16/26 [00:01<00:00, 16.91it/s] 73%|#######3  | 19/26 [00:01<00:00, 19.61it/s] 88%|########8 | 23/26 [00:01<00:00, 24.36it/s]100%|##########| 26/26 [00:01<00:00, 18.98it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 598 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 599 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 600 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 601 400
penalty weights 10000.0
args.step pgd_anneal_iters 601 600
dim_v 512
rho, theta 295 tensor(0.0090, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 602 400
penalty weights 10000.0
args.step pgd_anneal_iters 602 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 603 400
penalty weights 10000.0
args.step pgd_anneal_iters 603 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 604 400
penalty weights 10000.0
args.step pgd_anneal_iters 604 600
dim_v 512
rho, theta 490 tensor(-0.0003, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 605 400
penalty weights 10000.0
args.step pgd_anneal_iters 605 600
dim_v 512
rho, theta 509 tensor(-0.0001, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 606 400
penalty weights 10000.0
args.step pgd_anneal_iters 606 600
dim_v 512
rho, theta 509 tensor(-0.0001, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 607 400
penalty weights 10000.0
args.step pgd_anneal_iters 607 600
dim_v 512
rho, theta 509 tensor(-0.0001, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 608 400
penalty weights 10000.0
args.step pgd_anneal_iters 608 600
dim_v 512
rho, theta 509 tensor(-0.0001, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 609 400
penalty weights 10000.0
args.step pgd_anneal_iters 609 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 610 400
penalty weights 10000.0
args.step pgd_anneal_iters 610 600
dim_v 512
rho, theta 492 tensor(-0.0002, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 611 400
penalty weights 10000.0
args.step pgd_anneal_iters 611 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 612 400
penalty weights 10000.0
args.step pgd_anneal_iters 612 600
dim_v 512
rho, theta 509 tensor(-0.0002, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 613 400
penalty weights 10000.0
args.step pgd_anneal_iters 613 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 614 400
penalty weights 10000.0
args.step pgd_anneal_iters 614 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 615 400
penalty weights 10000.0
args.step pgd_anneal_iters 615 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 616 400
penalty weights 10000.0
args.step pgd_anneal_iters 616 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 617 400
penalty weights 10000.0
args.step pgd_anneal_iters 617 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 618 400
penalty weights 10000.0
args.step pgd_anneal_iters 618 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 619 400
penalty weights 10000.0
args.step pgd_anneal_iters 619 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 620 400
penalty weights 10000.0
args.step pgd_anneal_iters 620 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 621 400
penalty weights 10000.0
args.step pgd_anneal_iters 621 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 622 400
penalty weights 10000.0
args.step pgd_anneal_iters 622 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 623 400
penalty weights 10000.0
args.step pgd_anneal_iters 623 600
dim_v 512
Epoch: [23][  26/  26]	Loss 0.000 (0.001)	train_nll   0.69 (  0.67)	train_penalty   0.00 (  0.00)	weight_norm   0.15 (  0.15)	train_acc   0.49 (  0.50)	train_minacc   0.48 (  0.53)	train_majacc   0.49 (  0.50)	train_corr   0.00 (  0.00)	l1 6.9210 (8.3039)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 17.59it/s] 27%|##6       | 7/26 [00:00<00:00, 35.24it/s]                                               27%|##6       | 7/26 [00:00<00:00, 35.24it/s] 50%|#####     | 13/26 [00:00<00:00, 41.22it/s] 73%|#######3  | 19/26 [00:00<00:00, 47.31it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 47.31it/s] 96%|#########6| 25/26 [00:00<00:00, 47.40it/s]100%|##########| 26/26 [00:00<00:00, 40.34it/s]
Test: [   0/  26]	Loss 0.682 (0.682)	test_acc   0.51 (  0.51)	test_minacc   0.46 (  0.46)	test_majacc   0.51 (  0.51)	Loss_d 0.682 (0.682)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.46 (  0.46)	test_majacc_d   0.51 (  0.51)	test_corr_d   0.01 (  0.01)
Test: [  10/  26]	Loss 0.691 (0.685)	test_acc   0.50 (  0.50)	test_minacc   0.59 (  0.50)	test_majacc   0.49 (  0.50)	Loss_d 0.691 (0.685)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.59 (  0.50)	test_majacc_d   0.49 (  0.50)	test_corr_d   0.00 (  0.00)
Test: [  20/  26]	Loss 0.678 (0.687)	test_acc   0.52 (  0.50)	test_minacc   0.55 (  0.50)	test_majacc   0.52 (  0.50)	Loss_d 0.678 (0.687)	test_acc_d   0.52 (  0.50)	test_minacc_d   0.55 (  0.50)	test_majacc_d   0.52 (  0.50)	test_corr_d   0.06 ( -0.01)
Test: [  26/  26]	Loss 0.691 (0.687)	test_acc   0.49 (  0.50)	test_minacc   0.48 (  0.50)	test_majacc   0.49 (  0.50)	Loss_d 0.691 (0.687)	test_acc_d   0.49 (  0.50)	test_minacc_d   0.48 (  0.50)	test_majacc_d   0.49 (  0.50)	test_corr_d   0.05 (  0.00)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.43it/s]
Test: [  0/  1]	Loss 0.666 (0.666)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.666 (0.666)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.32 ( -0.32)
Test: [  1/  1]	Loss 0.666 (0.666)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.666 (0.666)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.32 ( -0.32)
Overall Timing[ 23/  1]	epoch_time 0.0428 (0.0389)	validation_time 0.0003 (0.0007)	train_time 0.0424 (0.0380)
record: (train_acc, test_acc) (0.6095000122785568, 0.6620000600814819)
last accs (train_acc, test_acc) (0.500000015437603, 0.5)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.77it/s] 19%|#9        | 5/26 [00:00<00:01, 20.25it/s] 35%|###4      | 9/26 [00:00<00:00, 25.48it/s] 50%|#####     | 13/26 [00:00<00:00, 28.14it/s] 65%|######5   | 17/26 [00:00<00:00, 29.13it/s] 81%|########  | 21/26 [00:00<00:00, 30.47it/s] 96%|#########6| 25/26 [00:00<00:00, 31.68it/s]100%|##########| 26/26 [00:00<00:00, 26.61it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 624 400
penalty weights 10000.0
args.step pgd_anneal_iters 624 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 625 400
penalty weights 10000.0
args.step pgd_anneal_iters 625 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 626 400
penalty weights 10000.0
args.step pgd_anneal_iters 626 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 627 400
penalty weights 10000.0
args.step pgd_anneal_iters 627 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 628 400
penalty weights 10000.0
args.step pgd_anneal_iters 628 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 629 400
penalty weights 10000.0
args.step pgd_anneal_iters 629 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 630 400
penalty weights 10000.0
args.step pgd_anneal_iters 630 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 631 400
penalty weights 10000.0
args.step pgd_anneal_iters 631 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 632 400
penalty weights 10000.0
args.step pgd_anneal_iters 632 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 633 400
penalty weights 10000.0
args.step pgd_anneal_iters 633 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 634 400
penalty weights 10000.0
args.step pgd_anneal_iters 634 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 635 400
penalty weights 10000.0
args.step pgd_anneal_iters 635 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 636 400
penalty weights 10000.0
args.step pgd_anneal_iters 636 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 637 400
penalty weights 10000.0
args.step pgd_anneal_iters 637 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 638 400
penalty weights 10000.0
args.step pgd_anneal_iters 638 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 639 400
penalty weights 10000.0
args.step pgd_anneal_iters 639 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 640 400
penalty weights 10000.0
args.step pgd_anneal_iters 640 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 641 400
penalty weights 10000.0
args.step pgd_anneal_iters 641 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 642 400
penalty weights 10000.0
args.step pgd_anneal_iters 642 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 643 400
penalty weights 10000.0
args.step pgd_anneal_iters 643 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 644 400
penalty weights 10000.0
args.step pgd_anneal_iters 644 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 645 400
penalty weights 10000.0
args.step pgd_anneal_iters 645 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 646 400
penalty weights 10000.0
args.step pgd_anneal_iters 646 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 647 400
penalty weights 10000.0
args.step pgd_anneal_iters 647 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 648 400
penalty weights 10000.0
args.step pgd_anneal_iters 648 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 649 400
penalty weights 10000.0
args.step pgd_anneal_iters 649 600
dim_v 512
Epoch: [24][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.15 (  0.15)	train_acc   0.49 (  0.50)	train_minacc   0.48 (  0.50)	train_majacc   0.49 (  0.50)	train_corr   0.00 (  0.00)	l1 6.8515 (6.8747)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 17.73it/s] 27%|##6       | 7/26 [00:00<00:00, 34.74it/s]                                               27%|##6       | 7/26 [00:00<00:00, 34.74it/s] 50%|#####     | 13/26 [00:00<00:00, 40.70it/s] 73%|#######3  | 19/26 [00:00<00:00, 47.15it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 47.15it/s] 96%|#########6| 25/26 [00:00<00:00, 47.31it/s]100%|##########| 26/26 [00:00<00:00, 39.58it/s]
Test: [   0/  26]	Loss 0.680 (0.680)	test_acc   0.51 (  0.51)	test_minacc   0.46 (  0.46)	test_majacc   0.51 (  0.51)	Loss_d 0.680 (0.680)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.46 (  0.46)	test_majacc_d   0.51 (  0.51)	test_corr_d   0.12 (  0.12)
Test: [  10/  26]	Loss 0.687 (0.682)	test_acc   0.50 (  0.50)	test_minacc   0.59 (  0.50)	test_majacc   0.49 (  0.50)	Loss_d 0.687 (0.682)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.59 (  0.50)	test_majacc_d   0.49 (  0.50)	test_corr_d   0.09 (  0.11)
Test: [  20/  26]	Loss 0.678 (0.684)	test_acc   0.52 (  0.50)	test_minacc   0.55 (  0.50)	test_majacc   0.52 (  0.50)	Loss_d 0.678 (0.684)	test_acc_d   0.52 (  0.50)	test_minacc_d   0.55 (  0.50)	test_majacc_d   0.52 (  0.50)	test_corr_d   0.14 (  0.10)
Test: [  26/  26]	Loss 0.685 (0.684)	test_acc   0.49 (  0.50)	test_minacc   0.48 (  0.50)	test_majacc   0.49 (  0.50)	Loss_d 0.685 (0.684)	test_acc_d   0.49 (  0.50)	test_minacc_d   0.48 (  0.50)	test_majacc_d   0.49 (  0.50)	test_corr_d   0.15 (  0.11)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.11it/s]
Test: [  0/  1]	Loss 0.680 (0.680)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.680 (0.680)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.21 ( -0.21)
Test: [  1/  1]	Loss 0.680 (0.680)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.680 (0.680)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.21 ( -0.21)
Overall Timing[ 24/  1]	epoch_time 0.0381 (0.0389)	validation_time 0.0004 (0.0006)	train_time 0.0377 (0.0380)
record: (train_acc, test_acc) (0.6095000122785568, 0.6620000600814819)
last accs (train_acc, test_acc) (0.500000015437603, 0.5)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.44it/s] 19%|#9        | 5/26 [00:00<00:00, 22.23it/s] 35%|###4      | 9/26 [00:00<00:00, 27.78it/s] 50%|#####     | 13/26 [00:00<00:00, 30.81it/s] 65%|######5   | 17/26 [00:00<00:00, 32.56it/s] 81%|########  | 21/26 [00:00<00:00, 33.70it/s] 96%|#########6| 25/26 [00:00<00:00, 34.07it/s]100%|##########| 26/26 [00:00<00:00, 28.63it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 650 400
penalty weights 10000.0
args.step pgd_anneal_iters 650 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 651 400
penalty weights 10000.0
args.step pgd_anneal_iters 651 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 652 400
penalty weights 10000.0
args.step pgd_anneal_iters 652 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 653 400
penalty weights 10000.0
args.step pgd_anneal_iters 653 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 654 400
penalty weights 10000.0
args.step pgd_anneal_iters 654 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 655 400
penalty weights 10000.0
args.step pgd_anneal_iters 655 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 656 400
penalty weights 10000.0
args.step pgd_anneal_iters 656 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 657 400
penalty weights 10000.0
args.step pgd_anneal_iters 657 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 658 400
penalty weights 10000.0
args.step pgd_anneal_iters 658 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 659 400
penalty weights 10000.0
args.step pgd_anneal_iters 659 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 660 400
penalty weights 10000.0
args.step pgd_anneal_iters 660 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 661 400
penalty weights 10000.0
args.step pgd_anneal_iters 661 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 662 400
penalty weights 10000.0
args.step pgd_anneal_iters 662 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 663 400
penalty weights 10000.0
args.step pgd_anneal_iters 663 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 664 400
penalty weights 10000.0
args.step pgd_anneal_iters 664 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 665 400
penalty weights 10000.0
args.step pgd_anneal_iters 665 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 666 400
penalty weights 10000.0
args.step pgd_anneal_iters 666 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 667 400
penalty weights 10000.0
args.step pgd_anneal_iters 667 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 668 400
penalty weights 10000.0
args.step pgd_anneal_iters 668 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 669 400
penalty weights 10000.0
args.step pgd_anneal_iters 669 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 670 400
penalty weights 10000.0
args.step pgd_anneal_iters 670 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 671 400
penalty weights 10000.0
args.step pgd_anneal_iters 671 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 672 400
penalty weights 10000.0
args.step pgd_anneal_iters 672 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 673 400
penalty weights 10000.0
args.step pgd_anneal_iters 673 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 674 400
penalty weights 10000.0
args.step pgd_anneal_iters 674 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 675 400
penalty weights 10000.0
args.step pgd_anneal_iters 675 600
dim_v 512
Epoch: [25][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.15 (  0.15)	train_acc   0.49 (  0.50)	train_minacc   0.48 (  0.50)	train_majacc   0.49 (  0.50)	train_corr   0.00 (  0.00)	l1 6.8268 (6.8351)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 19.53it/s] 31%|###       | 8/26 [00:00<00:00, 42.77it/s]                                               31%|###       | 8/26 [00:00<00:00, 42.77it/s] 50%|#####     | 13/26 [00:00<00:00, 43.43it/s] 73%|#######3  | 19/26 [00:00<00:00, 49.01it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 49.01it/s] 96%|#########6| 25/26 [00:00<00:00, 48.41it/s]100%|##########| 26/26 [00:00<00:00, 41.97it/s]
Test: [   0/  26]	Loss 0.687 (0.687)	test_acc   0.51 (  0.51)	test_minacc   0.46 (  0.46)	test_majacc   0.51 (  0.51)	Loss_d 0.687 (0.687)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.46 (  0.46)	test_majacc_d   0.51 (  0.51)	test_corr_d   0.05 (  0.05)
Test: [  10/  26]	Loss 0.691 (0.688)	test_acc   0.50 (  0.50)	test_minacc   0.59 (  0.50)	test_majacc   0.49 (  0.50)	Loss_d 0.691 (0.688)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.59 (  0.50)	test_majacc_d   0.49 (  0.50)	test_corr_d   0.02 (  0.03)
Test: [  20/  26]	Loss 0.685 (0.689)	test_acc   0.52 (  0.50)	test_minacc   0.55 (  0.50)	test_majacc   0.52 (  0.50)	Loss_d 0.685 (0.689)	test_acc_d   0.52 (  0.50)	test_minacc_d   0.55 (  0.50)	test_majacc_d   0.52 (  0.50)	test_corr_d   0.06 (  0.02)
Test: [  26/  26]	Loss 0.691 (0.689)	test_acc   0.49 (  0.50)	test_minacc   0.48 (  0.50)	test_majacc   0.49 (  0.50)	Loss_d 0.691 (0.689)	test_acc_d   0.49 (  0.50)	test_minacc_d   0.48 (  0.50)	test_majacc_d   0.49 (  0.50)	test_corr_d   0.08 (  0.03)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.14it/s]
Test: [  0/  1]	Loss 0.684 (0.684)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.684 (0.684)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.22 ( -0.22)
Test: [  1/  1]	Loss 0.684 (0.684)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.684 (0.684)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.22 ( -0.22)
Overall Timing[ 25/  1]	epoch_time 0.0374 (0.0388)	validation_time 0.0006 (0.0006)	train_time 0.0368 (0.0379)
record: (train_acc, test_acc) (0.6095000122785568, 0.6620000600814819)
last accs (train_acc, test_acc) (0.500000015437603, 0.5)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 17.25it/s] 23%|##3       | 6/26 [00:00<00:00, 27.32it/s] 38%|###8      | 10/26 [00:00<00:00, 31.25it/s] 54%|#####3    | 14/26 [00:00<00:00, 32.64it/s] 69%|######9   | 18/26 [00:00<00:00, 33.46it/s] 85%|########4 | 22/26 [00:00<00:00, 32.56it/s]100%|##########| 26/26 [00:00<00:00, 33.46it/s]100%|##########| 26/26 [00:00<00:00, 29.62it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 676 400
penalty weights 10000.0
args.step pgd_anneal_iters 676 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 677 400
penalty weights 10000.0
args.step pgd_anneal_iters 677 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 678 400
penalty weights 10000.0
args.step pgd_anneal_iters 678 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 679 400
penalty weights 10000.0
args.step pgd_anneal_iters 679 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 680 400
penalty weights 10000.0
args.step pgd_anneal_iters 680 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 681 400
penalty weights 10000.0
args.step pgd_anneal_iters 681 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 682 400
penalty weights 10000.0
args.step pgd_anneal_iters 682 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 683 400
penalty weights 10000.0
args.step pgd_anneal_iters 683 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 684 400
penalty weights 10000.0
args.step pgd_anneal_iters 684 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 685 400
penalty weights 10000.0
args.step pgd_anneal_iters 685 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 686 400
penalty weights 10000.0
args.step pgd_anneal_iters 686 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 687 400
penalty weights 10000.0
args.step pgd_anneal_iters 687 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 688 400
penalty weights 10000.0
args.step pgd_anneal_iters 688 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 689 400
penalty weights 10000.0
args.step pgd_anneal_iters 689 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 690 400
penalty weights 10000.0
args.step pgd_anneal_iters 690 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 691 400
penalty weights 10000.0
args.step pgd_anneal_iters 691 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 692 400
penalty weights 10000.0
args.step pgd_anneal_iters 692 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 693 400
penalty weights 10000.0
args.step pgd_anneal_iters 693 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 694 400
penalty weights 10000.0
args.step pgd_anneal_iters 694 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 695 400
penalty weights 10000.0
args.step pgd_anneal_iters 695 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 696 400
penalty weights 10000.0
args.step pgd_anneal_iters 696 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 697 400
penalty weights 10000.0
args.step pgd_anneal_iters 697 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 698 400
penalty weights 10000.0
args.step pgd_anneal_iters 698 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 699 400
penalty weights 10000.0
args.step pgd_anneal_iters 699 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 700 400
penalty weights 10000.0
args.step pgd_anneal_iters 700 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 701 400
penalty weights 10000.0
args.step pgd_anneal_iters 701 600
dim_v 512
Epoch: [26][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.15 (  0.15)	train_acc   0.49 (  0.50)	train_minacc   0.48 (  0.50)	train_majacc   0.49 (  0.50)	train_corr   0.00 (  0.00)	l1 6.8284 (6.8271)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.33it/s] 27%|##6       | 7/26 [00:00<00:00, 34.56it/s]                                               27%|##6       | 7/26 [00:00<00:00, 34.56it/s] 50%|#####     | 13/26 [00:00<00:00, 40.03it/s] 73%|#######3  | 19/26 [00:00<00:00, 46.85it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 46.85it/s] 96%|#########6| 25/26 [00:00<00:00, 47.47it/s]100%|##########| 26/26 [00:00<00:00, 39.32it/s]
Test: [   0/  26]	Loss 0.689 (0.689)	test_acc   0.51 (  0.51)	test_minacc   0.46 (  0.46)	test_majacc   0.51 (  0.51)	Loss_d 0.689 (0.689)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.46 (  0.46)	test_majacc_d   0.51 (  0.51)	test_corr_d   0.07 (  0.07)
Test: [  10/  26]	Loss 0.692 (0.690)	test_acc   0.50 (  0.50)	test_minacc   0.59 (  0.50)	test_majacc   0.49 (  0.50)	Loss_d 0.692 (0.690)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.59 (  0.50)	test_majacc_d   0.49 (  0.50)	test_corr_d   0.04 (  0.05)
Test: [  20/  26]	Loss 0.687 (0.690)	test_acc   0.52 (  0.50)	test_minacc   0.55 (  0.50)	test_majacc   0.52 (  0.50)	Loss_d 0.687 (0.690)	test_acc_d   0.52 (  0.50)	test_minacc_d   0.55 (  0.50)	test_majacc_d   0.52 (  0.50)	test_corr_d   0.06 (  0.04)
Test: [  26/  26]	Loss 0.692 (0.691)	test_acc   0.49 (  0.50)	test_minacc   0.48 (  0.50)	test_majacc   0.49 (  0.50)	Loss_d 0.692 (0.691)	test_acc_d   0.49 (  0.50)	test_minacc_d   0.48 (  0.50)	test_majacc_d   0.49 (  0.50)	test_corr_d   0.10 (  0.05)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.99it/s]
Test: [  0/  1]	Loss 0.689 (0.689)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.689 (0.689)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.15 ( -0.15)
Test: [  1/  1]	Loss 0.689 (0.689)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.689 (0.689)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.15 ( -0.15)
Overall Timing[ 26/  1]	epoch_time 0.0375 (0.0388)	validation_time 0.0003 (0.0006)	train_time 0.0372 (0.0379)
record: (train_acc, test_acc) (0.6095000122785568, 0.6620000600814819)
last accs (train_acc, test_acc) (0.500000015437603, 0.5)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.62it/s] 19%|#9        | 5/26 [00:00<00:01, 20.66it/s] 35%|###4      | 9/26 [00:00<00:00, 26.81it/s] 50%|#####     | 13/26 [00:00<00:00, 30.00it/s] 65%|######5   | 17/26 [00:00<00:00, 31.78it/s] 81%|########  | 21/26 [00:00<00:00, 32.62it/s] 96%|#########6| 25/26 [00:00<00:00, 33.44it/s]100%|##########| 26/26 [00:00<00:00, 27.91it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 702 400
penalty weights 10000.0
args.step pgd_anneal_iters 702 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 703 400
penalty weights 10000.0
args.step pgd_anneal_iters 703 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 704 400
penalty weights 10000.0
args.step pgd_anneal_iters 704 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 705 400
penalty weights 10000.0
args.step pgd_anneal_iters 705 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 706 400
penalty weights 10000.0
args.step pgd_anneal_iters 706 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 707 400
penalty weights 10000.0
args.step pgd_anneal_iters 707 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 708 400
penalty weights 10000.0
args.step pgd_anneal_iters 708 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 709 400
penalty weights 10000.0
args.step pgd_anneal_iters 709 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 710 400
penalty weights 10000.0
args.step pgd_anneal_iters 710 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 711 400
penalty weights 10000.0
args.step pgd_anneal_iters 711 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 712 400
penalty weights 10000.0
args.step pgd_anneal_iters 712 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 713 400
penalty weights 10000.0
args.step pgd_anneal_iters 713 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 714 400
penalty weights 10000.0
args.step pgd_anneal_iters 714 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 715 400
penalty weights 10000.0
args.step pgd_anneal_iters 715 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 716 400
penalty weights 10000.0
args.step pgd_anneal_iters 716 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 717 400
penalty weights 10000.0
args.step pgd_anneal_iters 717 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 718 400
penalty weights 10000.0
args.step pgd_anneal_iters 718 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 719 400
penalty weights 10000.0
args.step pgd_anneal_iters 719 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 720 400
penalty weights 10000.0
args.step pgd_anneal_iters 720 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 721 400
penalty weights 10000.0
args.step pgd_anneal_iters 721 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 722 400
penalty weights 10000.0
args.step pgd_anneal_iters 722 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 723 400
penalty weights 10000.0
args.step pgd_anneal_iters 723 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 724 400
penalty weights 10000.0
args.step pgd_anneal_iters 724 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 725 400
penalty weights 10000.0
args.step pgd_anneal_iters 725 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 726 400
penalty weights 10000.0
args.step pgd_anneal_iters 726 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 727 400
penalty weights 10000.0
args.step pgd_anneal_iters 727 600
dim_v 512
Epoch: [27][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.15 (  0.15)	train_acc   0.49 (  0.50)	train_minacc   0.48 (  0.50)	train_majacc   0.49 (  0.50)	train_corr   0.00 (  0.00)	l1 6.8371 (6.8327)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.51it/s] 27%|##6       | 7/26 [00:00<00:00, 37.69it/s]                                               27%|##6       | 7/26 [00:00<00:00, 37.69it/s] 50%|#####     | 13/26 [00:00<00:00, 41.76it/s] 73%|#######3  | 19/26 [00:00<00:00, 47.27it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 47.27it/s] 96%|#########6| 25/26 [00:00<00:00, 46.91it/s]100%|##########| 26/26 [00:00<00:00, 39.98it/s]
Test: [   0/  26]	Loss 0.690 (0.690)	test_acc   0.51 (  0.51)	test_minacc   0.46 (  0.46)	test_majacc   0.51 (  0.51)	Loss_d 0.690 (0.690)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.46 (  0.46)	test_majacc_d   0.51 (  0.51)	test_corr_d   0.08 (  0.08)
Test: [  10/  26]	Loss 0.692 (0.691)	test_acc   0.50 (  0.50)	test_minacc   0.59 (  0.50)	test_majacc   0.49 (  0.50)	Loss_d 0.692 (0.691)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.59 (  0.50)	test_majacc_d   0.49 (  0.50)	test_corr_d   0.06 (  0.07)
Test: [  20/  26]	Loss 0.688 (0.691)	test_acc   0.52 (  0.50)	test_minacc   0.55 (  0.50)	test_majacc   0.52 (  0.50)	Loss_d 0.688 (0.691)	test_acc_d   0.52 (  0.50)	test_minacc_d   0.55 (  0.50)	test_majacc_d   0.52 (  0.50)	test_corr_d   0.07 (  0.06)
Test: [  26/  26]	Loss 0.692 (0.691)	test_acc   0.49 (  0.50)	test_minacc   0.48 (  0.50)	test_majacc   0.49 (  0.50)	Loss_d 0.692 (0.691)	test_acc_d   0.49 (  0.50)	test_minacc_d   0.48 (  0.50)	test_majacc_d   0.49 (  0.50)	test_corr_d   0.12 (  0.07)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.01it/s]
Test: [  0/  1]	Loss 0.692 (0.692)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.692 (0.692)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.07 ( -0.07)
Test: [  1/  1]	Loss 0.692 (0.692)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.692 (0.692)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.07 ( -0.07)
Overall Timing[ 27/  1]	epoch_time 0.0372 (0.0387)	validation_time 0.0005 (0.0006)	train_time 0.0367 (0.0378)
record: (train_acc, test_acc) (0.6095000122785568, 0.6620000600814819)
last accs (train_acc, test_acc) (0.500000015437603, 0.5)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.29it/s] 15%|#5        | 4/26 [00:00<00:01, 19.07it/s] 27%|##6       | 7/26 [00:00<00:00, 23.07it/s] 42%|####2     | 11/26 [00:00<00:00, 26.36it/s] 58%|#####7    | 15/26 [00:00<00:00, 29.53it/s] 73%|#######3  | 19/26 [00:00<00:00, 31.95it/s] 88%|########8 | 23/26 [00:00<00:00, 33.65it/s]100%|##########| 26/26 [00:00<00:00, 27.63it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 728 400
penalty weights 10000.0
args.step pgd_anneal_iters 728 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 729 400
penalty weights 10000.0
args.step pgd_anneal_iters 729 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 730 400
penalty weights 10000.0
args.step pgd_anneal_iters 730 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 731 400
penalty weights 10000.0
args.step pgd_anneal_iters 731 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 732 400
penalty weights 10000.0
args.step pgd_anneal_iters 732 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 733 400
penalty weights 10000.0
args.step pgd_anneal_iters 733 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 734 400
penalty weights 10000.0
args.step pgd_anneal_iters 734 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 735 400
penalty weights 10000.0
args.step pgd_anneal_iters 735 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 736 400
penalty weights 10000.0
args.step pgd_anneal_iters 736 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 737 400
penalty weights 10000.0
args.step pgd_anneal_iters 737 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 738 400
penalty weights 10000.0
args.step pgd_anneal_iters 738 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 739 400
penalty weights 10000.0
args.step pgd_anneal_iters 739 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 740 400
penalty weights 10000.0
args.step pgd_anneal_iters 740 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 741 400
penalty weights 10000.0
args.step pgd_anneal_iters 741 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 742 400
penalty weights 10000.0
args.step pgd_anneal_iters 742 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 743 400
penalty weights 10000.0
args.step pgd_anneal_iters 743 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 744 400
penalty weights 10000.0
args.step pgd_anneal_iters 744 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 745 400
penalty weights 10000.0
args.step pgd_anneal_iters 745 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 746 400
penalty weights 10000.0
args.step pgd_anneal_iters 746 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 747 400
penalty weights 10000.0
args.step pgd_anneal_iters 747 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 748 400
penalty weights 10000.0
args.step pgd_anneal_iters 748 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 749 400
penalty weights 10000.0
args.step pgd_anneal_iters 749 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 750 400
penalty weights 10000.0
args.step pgd_anneal_iters 750 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 751 400
penalty weights 10000.0
args.step pgd_anneal_iters 751 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 752 400
penalty weights 10000.0
args.step pgd_anneal_iters 752 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 753 400
penalty weights 10000.0
args.step pgd_anneal_iters 753 600
dim_v 512
Epoch: [28][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.15 (  0.15)	train_acc   0.49 (  0.50)	train_minacc   0.48 (  0.50)	train_majacc   0.49 (  0.50)	train_corr   0.00 (  0.00)	l1 6.8488 (6.8433)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 16.37it/s] 35%|###4      | 9/26 [00:00<00:00, 41.13it/s]                                               35%|###4      | 9/26 [00:00<00:00, 41.13it/s] 58%|#####7    | 15/26 [00:00<00:00, 47.81it/s]                                                58%|#####7    | 15/26 [00:00<00:00, 47.81it/s] 81%|########  | 21/26 [00:00<00:00, 47.94it/s]100%|##########| 26/26 [00:00<00:00, 41.76it/s]
Test: [   0/  26]	Loss 0.691 (0.691)	test_acc   0.51 (  0.51)	test_minacc   0.46 (  0.46)	test_majacc   0.51 (  0.51)	Loss_d 0.691 (0.691)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.46 (  0.46)	test_majacc_d   0.51 (  0.51)	test_corr_d   0.09 (  0.09)
Test: [  10/  26]	Loss 0.692 (0.691)	test_acc   0.50 (  0.50)	test_minacc   0.59 (  0.50)	test_majacc   0.49 (  0.50)	Loss_d 0.692 (0.691)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.59 (  0.50)	test_majacc_d   0.49 (  0.50)	test_corr_d   0.07 (  0.08)
Test: [  20/  26]	Loss 0.689 (0.692)	test_acc   0.52 (  0.50)	test_minacc   0.55 (  0.50)	test_majacc   0.52 (  0.50)	Loss_d 0.689 (0.692)	test_acc_d   0.52 (  0.50)	test_minacc_d   0.55 (  0.50)	test_majacc_d   0.52 (  0.50)	test_corr_d   0.06 (  0.07)
Test: [  26/  26]	Loss 0.693 (0.692)	test_acc   0.49 (  0.50)	test_minacc   0.48 (  0.50)	test_majacc   0.49 (  0.50)	Loss_d 0.693 (0.692)	test_acc_d   0.49 (  0.50)	test_minacc_d   0.48 (  0.50)	test_majacc_d   0.49 (  0.50)	test_corr_d   0.13 (  0.08)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.28it/s]
Test: [  0/  1]	Loss 0.694 (0.694)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.694 (0.694)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d   0.00 (  0.00)
Test: [  1/  1]	Loss 0.694 (0.694)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.694 (0.694)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d   0.00 (  0.00)
Overall Timing[ 28/  1]	epoch_time 0.0371 (0.0387)	validation_time 0.0004 (0.0006)	train_time 0.0367 (0.0378)
record: (train_acc, test_acc) (0.6095000122785568, 0.6620000600814819)
last accs (train_acc, test_acc) (0.500000015437603, 0.5)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.76it/s] 19%|#9        | 5/26 [00:00<00:00, 23.96it/s] 35%|###4      | 9/26 [00:00<00:00, 28.13it/s] 50%|#####     | 13/26 [00:00<00:00, 31.28it/s] 65%|######5   | 17/26 [00:00<00:00, 33.39it/s] 81%|########  | 21/26 [00:00<00:00, 34.40it/s] 96%|#########6| 25/26 [00:00<00:00, 35.09it/s]100%|##########| 26/26 [00:00<00:00, 29.75it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 754 400
penalty weights 10000.0
args.step pgd_anneal_iters 754 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 755 400
penalty weights 10000.0
args.step pgd_anneal_iters 755 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 756 400
penalty weights 10000.0
args.step pgd_anneal_iters 756 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 757 400
penalty weights 10000.0
args.step pgd_anneal_iters 757 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 758 400
penalty weights 10000.0
args.step pgd_anneal_iters 758 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 759 400
penalty weights 10000.0
args.step pgd_anneal_iters 759 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 760 400
penalty weights 10000.0
args.step pgd_anneal_iters 760 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 761 400
penalty weights 10000.0
args.step pgd_anneal_iters 761 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 762 400
penalty weights 10000.0
args.step pgd_anneal_iters 762 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 763 400
penalty weights 10000.0
args.step pgd_anneal_iters 763 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 764 400
penalty weights 10000.0
args.step pgd_anneal_iters 764 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 765 400
penalty weights 10000.0
args.step pgd_anneal_iters 765 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 766 400
penalty weights 10000.0
args.step pgd_anneal_iters 766 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 767 400
penalty weights 10000.0
args.step pgd_anneal_iters 767 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 768 400
penalty weights 10000.0
args.step pgd_anneal_iters 768 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 769 400
penalty weights 10000.0
args.step pgd_anneal_iters 769 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 770 400
penalty weights 10000.0
args.step pgd_anneal_iters 770 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 771 400
penalty weights 10000.0
args.step pgd_anneal_iters 771 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 772 400
penalty weights 10000.0
args.step pgd_anneal_iters 772 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 773 400
penalty weights 10000.0
args.step pgd_anneal_iters 773 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 774 400
penalty weights 10000.0
args.step pgd_anneal_iters 774 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 775 400
penalty weights 10000.0
args.step pgd_anneal_iters 775 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 776 400
penalty weights 10000.0
args.step pgd_anneal_iters 776 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 777 400
penalty weights 10000.0
args.step pgd_anneal_iters 777 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 778 400
penalty weights 10000.0
args.step pgd_anneal_iters 778 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 779 400
penalty weights 10000.0
args.step pgd_anneal_iters 779 600
dim_v 512
Epoch: [29][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.15 (  0.15)	train_acc   0.49 (  0.50)	train_minacc   0.48 (  0.50)	train_majacc   0.49 (  0.50)	train_corr   0.00 (  0.00)	l1 6.8608 (6.8552)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 18.37it/s] 31%|###       | 8/26 [00:00<00:00, 39.51it/s]                                               31%|###       | 8/26 [00:00<00:00, 39.51it/s] 50%|#####     | 13/26 [00:00<00:00, 40.43it/s] 73%|#######3  | 19/26 [00:00<00:00, 46.91it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 46.91it/s] 96%|#########6| 25/26 [00:00<00:00, 47.28it/s]100%|##########| 26/26 [00:00<00:00, 40.18it/s]
Test: [   0/  26]	Loss 0.692 (0.692)	test_acc   0.51 (  0.51)	test_minacc   0.46 (  0.46)	test_majacc   0.51 (  0.51)	Loss_d 0.692 (0.692)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.46 (  0.46)	test_majacc_d   0.51 (  0.51)	test_corr_d   0.09 (  0.09)
Test: [  10/  26]	Loss 0.693 (0.692)	test_acc   0.50 (  0.50)	test_minacc   0.59 (  0.50)	test_majacc   0.49 (  0.50)	Loss_d 0.693 (0.692)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.59 (  0.50)	test_majacc_d   0.49 (  0.50)	test_corr_d   0.07 (  0.09)
Test: [  20/  26]	Loss 0.690 (0.692)	test_acc   0.52 (  0.50)	test_minacc   0.55 (  0.50)	test_majacc   0.52 (  0.50)	Loss_d 0.690 (0.692)	test_acc_d   0.52 (  0.50)	test_minacc_d   0.55 (  0.50)	test_majacc_d   0.52 (  0.50)	test_corr_d   0.05 (  0.08)
Test: [  26/  26]	Loss 0.693 (0.692)	test_acc   0.49 (  0.50)	test_minacc   0.48 (  0.50)	test_majacc   0.49 (  0.50)	Loss_d 0.693 (0.692)	test_acc_d   0.49 (  0.50)	test_minacc_d   0.48 (  0.50)	test_majacc_d   0.49 (  0.50)	test_corr_d   0.13 (  0.08)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 67.40it/s]
Test: [  0/  1]	Loss 0.695 (0.695)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.695 (0.695)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d   0.05 (  0.05)
Test: [  1/  1]	Loss 0.695 (0.695)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.695 (0.695)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d   0.05 (  0.05)
Overall Timing[ 29/  1]	epoch_time 0.0372 (0.0386)	validation_time 0.0003 (0.0006)	train_time 0.0368 (0.0378)
record: (train_acc, test_acc) (0.6095000122785568, 0.6620000600814819)
last accs (train_acc, test_acc) (0.500000015437603, 0.5)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.71it/s] 19%|#9        | 5/26 [00:00<00:00, 22.10it/s] 35%|###4      | 9/26 [00:00<00:00, 27.45it/s] 50%|#####     | 13/26 [00:00<00:00, 30.85it/s] 65%|######5   | 17/26 [00:00<00:00, 32.69it/s] 81%|########  | 21/26 [00:00<00:00, 33.86it/s] 96%|#########6| 25/26 [00:00<00:00, 34.49it/s]100%|##########| 26/26 [00:00<00:00, 28.90it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 780 400
penalty weights 10000.0
args.step pgd_anneal_iters 780 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 781 400
penalty weights 10000.0
args.step pgd_anneal_iters 781 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 782 400
penalty weights 10000.0
args.step pgd_anneal_iters 782 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 783 400
penalty weights 10000.0
args.step pgd_anneal_iters 783 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 784 400
penalty weights 10000.0
args.step pgd_anneal_iters 784 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 785 400
penalty weights 10000.0
args.step pgd_anneal_iters 785 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 786 400
penalty weights 10000.0
args.step pgd_anneal_iters 786 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 787 400
penalty weights 10000.0
args.step pgd_anneal_iters 787 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 788 400
penalty weights 10000.0
args.step pgd_anneal_iters 788 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 789 400
penalty weights 10000.0
args.step pgd_anneal_iters 789 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 790 400
penalty weights 10000.0
args.step pgd_anneal_iters 790 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 791 400
penalty weights 10000.0
args.step pgd_anneal_iters 791 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 792 400
penalty weights 10000.0
args.step pgd_anneal_iters 792 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 793 400
penalty weights 10000.0
args.step pgd_anneal_iters 793 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 794 400
penalty weights 10000.0
args.step pgd_anneal_iters 794 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 795 400
penalty weights 10000.0
args.step pgd_anneal_iters 795 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 796 400
penalty weights 10000.0
args.step pgd_anneal_iters 796 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 797 400
penalty weights 10000.0
args.step pgd_anneal_iters 797 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 798 400
penalty weights 10000.0
args.step pgd_anneal_iters 798 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 799 400
penalty weights 10000.0
args.step pgd_anneal_iters 799 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 800 400
penalty weights 10000.0
args.step pgd_anneal_iters 800 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 801 400
penalty weights 10000.0
args.step pgd_anneal_iters 801 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 802 400
penalty weights 10000.0
args.step pgd_anneal_iters 802 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 803 400
penalty weights 10000.0
args.step pgd_anneal_iters 803 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 804 400
penalty weights 10000.0
args.step pgd_anneal_iters 804 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 805 400
penalty weights 10000.0
args.step pgd_anneal_iters 805 600
dim_v 512
Epoch: [30][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.15 (  0.15)	train_acc   0.49 (  0.50)	train_minacc   0.48 (  0.50)	train_majacc   0.49 (  0.50)	train_corr   0.00 (  0.00)	l1 6.8719 (6.8668)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.27it/s] 23%|##3       | 6/26 [00:00<00:00, 28.98it/s]                                               23%|##3       | 6/26 [00:00<00:00, 28.98it/s] 46%|####6     | 12/26 [00:00<00:00, 38.97it/s] 69%|######9   | 18/26 [00:00<00:00, 44.91it/s]                                                69%|######9   | 18/26 [00:00<00:00, 44.91it/s] 92%|#########2| 24/26 [00:00<00:00, 47.16it/s]100%|##########| 26/26 [00:00<00:00, 38.53it/s]
Test: [   0/  26]	Loss 0.692 (0.692)	test_acc   0.51 (  0.51)	test_minacc   0.46 (  0.46)	test_majacc   0.51 (  0.51)	Loss_d 0.692 (0.692)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.46 (  0.46)	test_majacc_d   0.51 (  0.51)	test_corr_d   0.09 (  0.09)
Test: [  10/  26]	Loss 0.693 (0.692)	test_acc   0.50 (  0.50)	test_minacc   0.59 (  0.50)	test_majacc   0.49 (  0.50)	Loss_d 0.693 (0.692)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.59 (  0.50)	test_majacc_d   0.49 (  0.50)	test_corr_d   0.07 (  0.08)
Test: [  20/  26]	Loss 0.691 (0.692)	test_acc   0.52 (  0.50)	test_minacc   0.55 (  0.50)	test_majacc   0.52 (  0.50)	Loss_d 0.691 (0.692)	test_acc_d   0.52 (  0.50)	test_minacc_d   0.55 (  0.50)	test_majacc_d   0.52 (  0.50)	test_corr_d   0.04 (  0.08)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.49 (  0.50)	test_minacc   0.48 (  0.50)	test_majacc   0.49 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.49 (  0.50)	test_minacc_d   0.48 (  0.50)	test_majacc_d   0.49 (  0.50)	test_corr_d   0.13 (  0.08)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 64.12it/s]
Test: [  0/  1]	Loss 0.695 (0.695)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.695 (0.695)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d   0.08 (  0.08)
Test: [  1/  1]	Loss 0.695 (0.695)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.695 (0.695)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d   0.08 (  0.08)
Overall Timing[ 30/  1]	epoch_time 0.0366 (0.0385)	validation_time 0.0004 (0.0006)	train_time 0.0361 (0.0377)
record: (train_acc, test_acc) (0.6095000122785568, 0.6620000600814819)
last accs (train_acc, test_acc) (0.500000015437603, 0.5)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.27it/s] 15%|#5        | 4/26 [00:00<00:01, 17.43it/s] 31%|###       | 8/26 [00:00<00:00, 25.45it/s] 46%|####6     | 12/26 [00:00<00:00, 27.91it/s] 62%|######1   | 16/26 [00:00<00:00, 29.48it/s] 77%|#######6  | 20/26 [00:00<00:00, 31.50it/s] 92%|#########2| 24/26 [00:00<00:00, 33.06it/s]100%|##########| 26/26 [00:00<00:00, 27.14it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 806 400
penalty weights 10000.0
args.step pgd_anneal_iters 806 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 807 400
penalty weights 10000.0
args.step pgd_anneal_iters 807 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 808 400
penalty weights 10000.0
args.step pgd_anneal_iters 808 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 809 400
penalty weights 10000.0
args.step pgd_anneal_iters 809 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 810 400
penalty weights 10000.0
args.step pgd_anneal_iters 810 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 811 400
penalty weights 10000.0
args.step pgd_anneal_iters 811 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 812 400
penalty weights 10000.0
args.step pgd_anneal_iters 812 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 813 400
penalty weights 10000.0
args.step pgd_anneal_iters 813 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 814 400
penalty weights 10000.0
args.step pgd_anneal_iters 814 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 815 400
penalty weights 10000.0
args.step pgd_anneal_iters 815 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 816 400
penalty weights 10000.0
args.step pgd_anneal_iters 816 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 817 400
penalty weights 10000.0
args.step pgd_anneal_iters 817 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 818 400
penalty weights 10000.0
args.step pgd_anneal_iters 818 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 819 400
penalty weights 10000.0
args.step pgd_anneal_iters 819 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 820 400
penalty weights 10000.0
args.step pgd_anneal_iters 820 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 821 400
penalty weights 10000.0
args.step pgd_anneal_iters 821 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 822 400
penalty weights 10000.0
args.step pgd_anneal_iters 822 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 823 400
penalty weights 10000.0
args.step pgd_anneal_iters 823 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 824 400
penalty weights 10000.0
args.step pgd_anneal_iters 824 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 825 400
penalty weights 10000.0
args.step pgd_anneal_iters 825 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 826 400
penalty weights 10000.0
args.step pgd_anneal_iters 826 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 827 400
penalty weights 10000.0
args.step pgd_anneal_iters 827 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 828 400
penalty weights 10000.0
args.step pgd_anneal_iters 828 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 829 400
penalty weights 10000.0
args.step pgd_anneal_iters 829 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 830 400
penalty weights 10000.0
args.step pgd_anneal_iters 830 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 831 400
penalty weights 10000.0
args.step pgd_anneal_iters 831 600
dim_v 512
Epoch: [31][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.15 (  0.15)	train_acc   0.49 (  0.50)	train_minacc   0.48 (  0.50)	train_majacc   0.49 (  0.50)	train_corr   0.00 (  0.00)	l1 6.8819 (6.8773)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.59it/s] 27%|##6       | 7/26 [00:00<00:00, 31.67it/s]                                               27%|##6       | 7/26 [00:00<00:00, 31.67it/s] 50%|#####     | 13/26 [00:00<00:00, 37.59it/s] 73%|#######3  | 19/26 [00:00<00:00, 43.79it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 43.79it/s] 96%|#########6| 25/26 [00:00<00:00, 45.17it/s]100%|##########| 26/26 [00:00<00:00, 37.16it/s]
Test: [   0/  26]	Loss 0.692 (0.692)	test_acc   0.51 (  0.51)	test_minacc   0.46 (  0.46)	test_majacc   0.51 (  0.51)	Loss_d 0.692 (0.692)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.46 (  0.46)	test_majacc_d   0.51 (  0.51)	test_corr_d   0.08 (  0.08)
Test: [  10/  26]	Loss 0.693 (0.692)	test_acc   0.50 (  0.50)	test_minacc   0.59 (  0.50)	test_majacc   0.49 (  0.50)	Loss_d 0.693 (0.692)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.59 (  0.50)	test_majacc_d   0.49 (  0.50)	test_corr_d   0.07 (  0.08)
Test: [  20/  26]	Loss 0.691 (0.693)	test_acc   0.52 (  0.50)	test_minacc   0.55 (  0.50)	test_majacc   0.52 (  0.50)	Loss_d 0.691 (0.693)	test_acc_d   0.52 (  0.50)	test_minacc_d   0.55 (  0.50)	test_majacc_d   0.52 (  0.50)	test_corr_d   0.03 (  0.07)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.49 (  0.50)	test_minacc   0.48 (  0.50)	test_majacc   0.49 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.49 (  0.50)	test_minacc_d   0.48 (  0.50)	test_majacc_d   0.49 (  0.50)	test_corr_d   0.12 (  0.07)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 67.16it/s]
Test: [  0/  1]	Loss 0.695 (0.695)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.695 (0.695)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d   0.09 (  0.09)
Test: [  1/  1]	Loss 0.695 (0.695)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.695 (0.695)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d   0.09 (  0.09)
Overall Timing[ 31/  1]	epoch_time 0.0373 (0.0385)	validation_time 0.0003 (0.0006)	train_time 0.0370 (0.0377)
record: (train_acc, test_acc) (0.6095000122785568, 0.6620000600814819)
last accs (train_acc, test_acc) (0.500000015437603, 0.5)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.30it/s] 19%|#9        | 5/26 [00:00<00:00, 24.15it/s] 35%|###4      | 9/26 [00:00<00:00, 29.49it/s] 50%|#####     | 13/26 [00:00<00:00, 32.65it/s] 65%|######5   | 17/26 [00:00<00:00, 34.00it/s] 81%|########  | 21/26 [00:00<00:00, 35.09it/s] 96%|#########6| 25/26 [00:00<00:00, 35.00it/s]100%|##########| 26/26 [00:00<00:00, 30.01it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 832 400
penalty weights 10000.0
args.step pgd_anneal_iters 832 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 833 400
penalty weights 10000.0
args.step pgd_anneal_iters 833 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 834 400
penalty weights 10000.0
args.step pgd_anneal_iters 834 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 835 400
penalty weights 10000.0
args.step pgd_anneal_iters 835 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 836 400
penalty weights 10000.0
args.step pgd_anneal_iters 836 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 837 400
penalty weights 10000.0
args.step pgd_anneal_iters 837 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 838 400
penalty weights 10000.0
args.step pgd_anneal_iters 838 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 839 400
penalty weights 10000.0
args.step pgd_anneal_iters 839 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 840 400
penalty weights 10000.0
args.step pgd_anneal_iters 840 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 841 400
penalty weights 10000.0
args.step pgd_anneal_iters 841 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 842 400
penalty weights 10000.0
args.step pgd_anneal_iters 842 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 843 400
penalty weights 10000.0
args.step pgd_anneal_iters 843 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 844 400
penalty weights 10000.0
args.step pgd_anneal_iters 844 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 845 400
penalty weights 10000.0
args.step pgd_anneal_iters 845 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 846 400
penalty weights 10000.0
args.step pgd_anneal_iters 846 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 847 400
penalty weights 10000.0
args.step pgd_anneal_iters 847 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 848 400
penalty weights 10000.0
args.step pgd_anneal_iters 848 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 849 400
penalty weights 10000.0
args.step pgd_anneal_iters 849 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 850 400
penalty weights 10000.0
args.step pgd_anneal_iters 850 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 851 400
penalty weights 10000.0
args.step pgd_anneal_iters 851 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 852 400
penalty weights 10000.0
args.step pgd_anneal_iters 852 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 853 400
penalty weights 10000.0
args.step pgd_anneal_iters 853 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 854 400
penalty weights 10000.0
args.step pgd_anneal_iters 854 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 855 400
penalty weights 10000.0
args.step pgd_anneal_iters 855 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 856 400
penalty weights 10000.0
args.step pgd_anneal_iters 856 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 857 400
penalty weights 10000.0
args.step pgd_anneal_iters 857 600
dim_v 512
Epoch: [32][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.15 (  0.15)	train_acc   0.49 (  0.50)	train_minacc   0.48 (  0.50)	train_majacc   0.49 (  0.50)	train_corr   0.00 (  0.00)	l1 6.8909 (6.8867)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.71it/s] 27%|##6       | 7/26 [00:00<00:00, 34.29it/s]                                               27%|##6       | 7/26 [00:00<00:00, 34.29it/s] 50%|#####     | 13/26 [00:00<00:00, 38.84it/s] 73%|#######3  | 19/26 [00:00<00:00, 45.89it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 45.89it/s] 96%|#########6| 25/26 [00:00<00:00, 45.95it/s]100%|##########| 26/26 [00:00<00:00, 38.30it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.51 (  0.51)	test_minacc   0.46 (  0.46)	test_majacc   0.51 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.46 (  0.46)	test_majacc_d   0.51 (  0.51)	test_corr_d   0.07 (  0.07)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.50 (  0.50)	test_minacc   0.59 (  0.50)	test_majacc   0.49 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.59 (  0.50)	test_majacc_d   0.49 (  0.50)	test_corr_d   0.06 (  0.07)
Test: [  20/  26]	Loss 0.691 (0.693)	test_acc   0.52 (  0.50)	test_minacc   0.55 (  0.50)	test_majacc   0.52 (  0.50)	Loss_d 0.691 (0.693)	test_acc_d   0.52 (  0.50)	test_minacc_d   0.55 (  0.50)	test_majacc_d   0.52 (  0.50)	test_corr_d   0.03 (  0.06)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.49 (  0.50)	test_minacc   0.48 (  0.50)	test_majacc   0.49 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.49 (  0.50)	test_minacc_d   0.48 (  0.50)	test_majacc_d   0.49 (  0.50)	test_corr_d   0.11 (  0.07)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.81it/s]
Test: [  0/  1]	Loss 0.695 (0.695)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.695 (0.695)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d   0.09 (  0.09)
Test: [  1/  1]	Loss 0.695 (0.695)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.695 (0.695)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d   0.09 (  0.09)
Overall Timing[ 32/  1]	epoch_time 0.0364 (0.0384)	validation_time 0.0006 (0.0006)	train_time 0.0357 (0.0376)
record: (train_acc, test_acc) (0.6095000122785568, 0.6620000600814819)
last accs (train_acc, test_acc) (0.500000015437603, 0.5)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 16.00it/s] 23%|##3       | 6/26 [00:00<00:00, 25.57it/s] 38%|###8      | 10/26 [00:00<00:00, 29.59it/s] 54%|#####3    | 14/26 [00:00<00:00, 31.45it/s] 69%|######9   | 18/26 [00:00<00:00, 32.88it/s] 85%|########4 | 22/26 [00:00<00:00, 33.99it/s]100%|##########| 26/26 [00:00<00:00, 34.62it/s]100%|##########| 26/26 [00:00<00:00, 29.62it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 858 400
penalty weights 10000.0
args.step pgd_anneal_iters 858 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 859 400
penalty weights 10000.0
args.step pgd_anneal_iters 859 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 860 400
penalty weights 10000.0
args.step pgd_anneal_iters 860 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 861 400
penalty weights 10000.0
args.step pgd_anneal_iters 861 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 862 400
penalty weights 10000.0
args.step pgd_anneal_iters 862 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 863 400
penalty weights 10000.0
args.step pgd_anneal_iters 863 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 864 400
penalty weights 10000.0
args.step pgd_anneal_iters 864 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 865 400
penalty weights 10000.0
args.step pgd_anneal_iters 865 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 866 400
penalty weights 10000.0
args.step pgd_anneal_iters 866 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 867 400
penalty weights 10000.0
args.step pgd_anneal_iters 867 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 868 400
penalty weights 10000.0
args.step pgd_anneal_iters 868 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 869 400
penalty weights 10000.0
args.step pgd_anneal_iters 869 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 870 400
penalty weights 10000.0
args.step pgd_anneal_iters 870 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 871 400
penalty weights 10000.0
args.step pgd_anneal_iters 871 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 872 400
penalty weights 10000.0
args.step pgd_anneal_iters 872 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 873 400
penalty weights 10000.0
args.step pgd_anneal_iters 873 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 874 400
penalty weights 10000.0
args.step pgd_anneal_iters 874 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 875 400
penalty weights 10000.0
args.step pgd_anneal_iters 875 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 876 400
penalty weights 10000.0
args.step pgd_anneal_iters 876 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 877 400
penalty weights 10000.0
args.step pgd_anneal_iters 877 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 878 400
penalty weights 10000.0
args.step pgd_anneal_iters 878 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 879 400
penalty weights 10000.0
args.step pgd_anneal_iters 879 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 880 400
penalty weights 10000.0
args.step pgd_anneal_iters 880 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 881 400
penalty weights 10000.0
args.step pgd_anneal_iters 881 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 882 400
penalty weights 10000.0
args.step pgd_anneal_iters 882 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 883 400
penalty weights 10000.0
args.step pgd_anneal_iters 883 600
dim_v 512
Epoch: [33][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.15 (  0.15)	train_acc   0.49 (  0.50)	train_minacc   0.48 (  0.50)	train_majacc   0.49 (  0.50)	train_corr   0.00 (  0.00)	l1 6.8987 (6.8951)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 19.05it/s] 31%|###       | 8/26 [00:00<00:00, 40.52it/s]                                               31%|###       | 8/26 [00:00<00:00, 40.52it/s] 50%|#####     | 13/26 [00:00<00:00, 42.49it/s] 73%|#######3  | 19/26 [00:00<00:00, 48.02it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 48.02it/s] 96%|#########6| 25/26 [00:00<00:00, 48.81it/s]100%|##########| 26/26 [00:00<00:00, 41.87it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.51 (  0.51)	test_minacc   0.46 (  0.46)	test_majacc   0.51 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.46 (  0.46)	test_majacc_d   0.51 (  0.51)	test_corr_d   0.07 (  0.07)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.50 (  0.50)	test_minacc   0.59 (  0.50)	test_majacc   0.48 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.59 (  0.50)	test_majacc_d   0.48 (  0.50)	test_corr_d   0.06 (  0.07)
Test: [  20/  26]	Loss 0.691 (0.693)	test_acc   0.52 (  0.50)	test_minacc   0.55 (  0.50)	test_majacc   0.52 (  0.50)	Loss_d 0.691 (0.693)	test_acc_d   0.52 (  0.50)	test_minacc_d   0.55 (  0.50)	test_majacc_d   0.52 (  0.50)	test_corr_d   0.02 (  0.06)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.49 (  0.50)	test_minacc   0.48 (  0.50)	test_majacc   0.49 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.49 (  0.50)	test_minacc_d   0.48 (  0.50)	test_majacc_d   0.49 (  0.50)	test_corr_d   0.11 (  0.06)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.46it/s]
Test: [  0/  1]	Loss 0.695 (0.695)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.695 (0.695)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d   0.10 (  0.10)
Test: [  1/  1]	Loss 0.695 (0.695)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.695 (0.695)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d   0.10 (  0.10)
Overall Timing[ 33/  1]	epoch_time 0.0349 (0.0383)	validation_time 0.0005 (0.0006)	train_time 0.0344 (0.0375)
record: (train_acc, test_acc) (0.6095000122785568, 0.6620000600814819)
last accs (train_acc, test_acc) (0.4995000119805336, 0.5)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.53it/s] 19%|#9        | 5/26 [00:00<00:01, 18.27it/s] 35%|###4      | 9/26 [00:00<00:00, 24.46it/s] 50%|#####     | 13/26 [00:00<00:00, 28.53it/s] 65%|######5   | 17/26 [00:00<00:00, 30.71it/s] 81%|########  | 21/26 [00:00<00:00, 32.74it/s] 96%|#########6| 25/26 [00:00<00:00, 33.87it/s]100%|##########| 26/26 [00:00<00:00, 27.09it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 884 400
penalty weights 10000.0
args.step pgd_anneal_iters 884 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 885 400
penalty weights 10000.0
args.step pgd_anneal_iters 885 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 886 400
penalty weights 10000.0
args.step pgd_anneal_iters 886 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 887 400
penalty weights 10000.0
args.step pgd_anneal_iters 887 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 888 400
penalty weights 10000.0
args.step pgd_anneal_iters 888 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 889 400
penalty weights 10000.0
args.step pgd_anneal_iters 889 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 890 400
penalty weights 10000.0
args.step pgd_anneal_iters 890 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 891 400
penalty weights 10000.0
args.step pgd_anneal_iters 891 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 892 400
penalty weights 10000.0
args.step pgd_anneal_iters 892 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 893 400
penalty weights 10000.0
args.step pgd_anneal_iters 893 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 894 400
penalty weights 10000.0
args.step pgd_anneal_iters 894 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 895 400
penalty weights 10000.0
args.step pgd_anneal_iters 895 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 896 400
penalty weights 10000.0
args.step pgd_anneal_iters 896 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 897 400
penalty weights 10000.0
args.step pgd_anneal_iters 897 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 898 400
penalty weights 10000.0
args.step pgd_anneal_iters 898 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 899 400
penalty weights 10000.0
args.step pgd_anneal_iters 899 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 900 400
penalty weights 10000.0
args.step pgd_anneal_iters 900 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 901 400
penalty weights 10000.0
args.step pgd_anneal_iters 901 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 902 400
penalty weights 10000.0
args.step pgd_anneal_iters 902 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 903 400
penalty weights 10000.0
args.step pgd_anneal_iters 903 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 904 400
penalty weights 10000.0
args.step pgd_anneal_iters 904 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 905 400
penalty weights 10000.0
args.step pgd_anneal_iters 905 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 906 400
penalty weights 10000.0
args.step pgd_anneal_iters 906 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 907 400
penalty weights 10000.0
args.step pgd_anneal_iters 907 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 908 400
penalty weights 10000.0
args.step pgd_anneal_iters 908 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 909 400
penalty weights 10000.0
args.step pgd_anneal_iters 909 600
dim_v 512
Epoch: [34][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.15 (  0.15)	train_acc   0.49 (  0.50)	train_minacc   0.48 (  0.50)	train_majacc   0.49 (  0.50)	train_corr   0.00 (  0.00)	l1 6.9056 (6.9025)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 18.60it/s] 31%|###       | 8/26 [00:00<00:00, 39.85it/s]                                               31%|###       | 8/26 [00:00<00:00, 39.85it/s] 50%|#####     | 13/26 [00:00<00:00, 40.07it/s] 73%|#######3  | 19/26 [00:00<00:00, 46.78it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 46.78it/s] 96%|#########6| 25/26 [00:00<00:00, 47.08it/s]100%|##########| 26/26 [00:00<00:00, 40.18it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.50 (  0.50)	test_minacc   0.46 (  0.46)	test_majacc   0.50 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.46 (  0.46)	test_majacc_d   0.50 (  0.50)	test_corr_d   0.06 (  0.06)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.50 (  0.50)	test_minacc   0.59 (  0.50)	test_majacc   0.48 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.59 (  0.50)	test_majacc_d   0.48 (  0.50)	test_corr_d   0.05 (  0.06)
Test: [  20/  26]	Loss 0.692 (0.693)	test_acc   0.51 (  0.50)	test_minacc   0.55 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.692 (0.693)	test_acc_d   0.51 (  0.50)	test_minacc_d   0.55 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d   0.01 (  0.05)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.49 (  0.49)	test_minacc   0.48 (  0.50)	test_majacc   0.49 (  0.49)	Loss_d 0.693 (0.693)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.48 (  0.50)	test_majacc_d   0.49 (  0.49)	test_corr_d   0.10 (  0.06)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.99it/s]
Test: [  0/  1]	Loss 0.695 (0.695)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.48 (  0.48)	Loss_d 0.695 (0.695)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.48 (  0.48)	test_corr_d   0.10 (  0.10)
Test: [  1/  1]	Loss 0.695 (0.695)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.48 (  0.48)	Loss_d 0.695 (0.695)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.48 (  0.48)	test_corr_d   0.10 (  0.10)
Overall Timing[ 34/  1]	epoch_time 0.0368 (0.0383)	validation_time 0.0004 (0.0006)	train_time 0.0364 (0.0375)
record: (train_acc, test_acc) (0.6095000122785568, 0.6620000600814819)
last accs (train_acc, test_acc) (0.49310001173615453, 0.49800002574920654)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.22it/s] 19%|#9        | 5/26 [00:00<00:01, 18.32it/s] 35%|###4      | 9/26 [00:00<00:00, 24.53it/s] 50%|#####     | 13/26 [00:00<00:00, 28.31it/s] 65%|######5   | 17/26 [00:00<00:00, 30.62it/s] 81%|########  | 21/26 [00:00<00:00, 32.07it/s] 96%|#########6| 25/26 [00:00<00:00, 32.59it/s]100%|##########| 26/26 [00:00<00:00, 26.28it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 910 400
penalty weights 10000.0
args.step pgd_anneal_iters 910 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 911 400
penalty weights 10000.0
args.step pgd_anneal_iters 911 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 912 400
penalty weights 10000.0
args.step pgd_anneal_iters 912 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 913 400
penalty weights 10000.0
args.step pgd_anneal_iters 913 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 914 400
penalty weights 10000.0
args.step pgd_anneal_iters 914 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 915 400
penalty weights 10000.0
args.step pgd_anneal_iters 915 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 916 400
penalty weights 10000.0
args.step pgd_anneal_iters 916 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 917 400
penalty weights 10000.0
args.step pgd_anneal_iters 917 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 918 400
penalty weights 10000.0
args.step pgd_anneal_iters 918 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 919 400
penalty weights 10000.0
args.step pgd_anneal_iters 919 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 920 400
penalty weights 10000.0
args.step pgd_anneal_iters 920 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 921 400
penalty weights 10000.0
args.step pgd_anneal_iters 921 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 922 400
penalty weights 10000.0
args.step pgd_anneal_iters 922 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 923 400
penalty weights 10000.0
args.step pgd_anneal_iters 923 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 924 400
penalty weights 10000.0
args.step pgd_anneal_iters 924 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 925 400
penalty weights 10000.0
args.step pgd_anneal_iters 925 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 926 400
penalty weights 10000.0
args.step pgd_anneal_iters 926 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 927 400
penalty weights 10000.0
args.step pgd_anneal_iters 927 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 928 400
penalty weights 10000.0
args.step pgd_anneal_iters 928 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 929 400
penalty weights 10000.0
args.step pgd_anneal_iters 929 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 930 400
penalty weights 10000.0
args.step pgd_anneal_iters 930 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 931 400
penalty weights 10000.0
args.step pgd_anneal_iters 931 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 932 400
penalty weights 10000.0
args.step pgd_anneal_iters 932 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 933 400
penalty weights 10000.0
args.step pgd_anneal_iters 933 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 934 400
penalty weights 10000.0
args.step pgd_anneal_iters 934 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 935 400
penalty weights 10000.0
args.step pgd_anneal_iters 935 600
dim_v 512
Epoch: [35][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.15 (  0.15)	train_acc   0.50 (  0.49)	train_minacc   0.41 (  0.49)	train_majacc   0.51 (  0.49)	train_corr   0.00 (  0.00)	l1 6.9117 (6.9089)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.40it/s] 27%|##6       | 7/26 [00:00<00:00, 27.30it/s]                                               27%|##6       | 7/26 [00:00<00:00, 27.30it/s] 50%|#####     | 13/26 [00:00<00:00, 35.17it/s] 73%|#######3  | 19/26 [00:00<00:00, 41.98it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 41.98it/s] 96%|#########6| 25/26 [00:00<00:00, 43.20it/s]100%|##########| 26/26 [00:00<00:00, 34.89it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.50 (  0.50)	test_minacc   0.46 (  0.46)	test_majacc   0.51 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.46 (  0.46)	test_majacc_d   0.51 (  0.51)	test_corr_d   0.06 (  0.06)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.52 (  0.50)	test_minacc   0.58 (  0.47)	test_majacc   0.51 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.50)	test_minacc_d   0.58 (  0.47)	test_majacc_d   0.51 (  0.50)	test_corr_d   0.05 (  0.06)
Test: [  20/  26]	Loss 0.692 (0.693)	test_acc   0.52 (  0.50)	test_minacc   0.43 (  0.47)	test_majacc   0.53 (  0.50)	Loss_d 0.692 (0.693)	test_acc_d   0.52 (  0.50)	test_minacc_d   0.43 (  0.47)	test_majacc_d   0.53 (  0.50)	test_corr_d   0.01 (  0.05)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.50 (  0.49)	test_minacc   0.41 (  0.47)	test_majacc   0.51 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.49)	test_minacc_d   0.41 (  0.47)	test_majacc_d   0.51 (  0.50)	test_corr_d   0.10 (  0.05)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.96it/s]
Test: [  0/  1]	Loss 0.695 (0.695)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.48 (  0.48)	Loss_d 0.695 (0.695)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.48 (  0.48)	test_corr_d   0.09 (  0.09)
Test: [  1/  1]	Loss 0.695 (0.695)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.48 (  0.48)	Loss_d 0.695 (0.695)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.48 (  0.48)	test_corr_d   0.09 (  0.09)
Overall Timing[ 35/  1]	epoch_time 0.0372 (0.0383)	validation_time 0.0003 (0.0006)	train_time 0.0369 (0.0375)
record: (train_acc, test_acc) (0.6095000122785568, 0.6620000600814819)
last accs (train_acc, test_acc) (0.4938000096678734, 0.49500003457069397)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.37it/s] 15%|#5        | 4/26 [00:00<00:01, 20.47it/s] 31%|###       | 8/26 [00:00<00:00, 27.26it/s] 46%|####6     | 12/26 [00:00<00:00, 31.07it/s] 62%|######1   | 16/26 [00:00<00:00, 33.13it/s] 77%|#######6  | 20/26 [00:00<00:00, 34.76it/s] 92%|#########2| 24/26 [00:00<00:00, 35.40it/s]100%|##########| 26/26 [00:00<00:00, 29.74it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 936 400
penalty weights 10000.0
args.step pgd_anneal_iters 936 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 937 400
penalty weights 10000.0
args.step pgd_anneal_iters 937 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 938 400
penalty weights 10000.0
args.step pgd_anneal_iters 938 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 939 400
penalty weights 10000.0
args.step pgd_anneal_iters 939 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 940 400
penalty weights 10000.0
args.step pgd_anneal_iters 940 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 941 400
penalty weights 10000.0
args.step pgd_anneal_iters 941 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 942 400
penalty weights 10000.0
args.step pgd_anneal_iters 942 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 943 400
penalty weights 10000.0
args.step pgd_anneal_iters 943 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 944 400
penalty weights 10000.0
args.step pgd_anneal_iters 944 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 945 400
penalty weights 10000.0
args.step pgd_anneal_iters 945 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 946 400
penalty weights 10000.0
args.step pgd_anneal_iters 946 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 947 400
penalty weights 10000.0
args.step pgd_anneal_iters 947 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 948 400
penalty weights 10000.0
args.step pgd_anneal_iters 948 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 949 400
penalty weights 10000.0
args.step pgd_anneal_iters 949 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 950 400
penalty weights 10000.0
args.step pgd_anneal_iters 950 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 951 400
penalty weights 10000.0
args.step pgd_anneal_iters 951 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 952 400
penalty weights 10000.0
args.step pgd_anneal_iters 952 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 953 400
penalty weights 10000.0
args.step pgd_anneal_iters 953 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 954 400
penalty weights 10000.0
args.step pgd_anneal_iters 954 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 955 400
penalty weights 10000.0
args.step pgd_anneal_iters 955 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 956 400
penalty weights 10000.0
args.step pgd_anneal_iters 956 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 957 400
penalty weights 10000.0
args.step pgd_anneal_iters 957 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 958 400
penalty weights 10000.0
args.step pgd_anneal_iters 958 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 959 400
penalty weights 10000.0
args.step pgd_anneal_iters 959 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 960 400
penalty weights 10000.0
args.step pgd_anneal_iters 960 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 961 400
penalty weights 10000.0
args.step pgd_anneal_iters 961 600
dim_v 512
Epoch: [36][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.15 (  0.15)	train_acc   0.54 (  0.50)	train_minacc   0.28 (  0.45)	train_majacc   0.57 (  0.51)	train_corr   0.00 (  0.00)	l1 6.9170 (6.9145)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.86it/s] 27%|##6       | 7/26 [00:00<00:00, 37.65it/s]                                               27%|##6       | 7/26 [00:00<00:00, 37.65it/s] 50%|#####     | 13/26 [00:00<00:00, 42.16it/s] 73%|#######3  | 19/26 [00:00<00:00, 48.27it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 48.27it/s] 96%|#########6| 25/26 [00:00<00:00, 48.25it/s]100%|##########| 26/26 [00:00<00:00, 40.76it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.51 (  0.51)	test_minacc   0.43 (  0.43)	test_majacc   0.52 (  0.52)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.43 (  0.43)	test_majacc_d   0.52 (  0.52)	test_corr_d   0.05 (  0.05)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.52 (  0.51)	test_minacc   0.49 (  0.44)	test_majacc   0.53 (  0.53)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.51)	test_minacc_d   0.49 (  0.44)	test_majacc_d   0.53 (  0.53)	test_corr_d   0.05 (  0.05)
Test: [  20/  26]	Loss 0.692 (0.693)	test_acc   0.54 (  0.51)	test_minacc   0.43 (  0.42)	test_majacc   0.56 (  0.53)	Loss_d 0.692 (0.693)	test_acc_d   0.54 (  0.51)	test_minacc_d   0.43 (  0.42)	test_majacc_d   0.56 (  0.53)	test_corr_d   0.00 (  0.04)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.54 (  0.51)	test_minacc   0.28 (  0.41)	test_majacc   0.57 (  0.53)	Loss_d 0.693 (0.693)	test_acc_d   0.54 (  0.51)	test_minacc_d   0.28 (  0.41)	test_majacc_d   0.57 (  0.53)	test_corr_d   0.10 (  0.05)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 67.16it/s]
Test: [  0/  1]	Loss 0.694 (0.694)	test_acc   0.46 (  0.46)	test_minacc   0.46 (  0.46)	test_majacc   0.48 (  0.48)	Loss_d 0.694 (0.694)	test_acc_d   0.46 (  0.46)	test_minacc_d   0.46 (  0.46)	test_majacc_d   0.48 (  0.48)	test_corr_d   0.09 (  0.09)
Test: [  1/  1]	Loss 0.694 (0.694)	test_acc   0.46 (  0.46)	test_minacc   0.46 (  0.46)	test_majacc   0.48 (  0.48)	Loss_d 0.694 (0.694)	test_acc_d   0.46 (  0.46)	test_minacc_d   0.46 (  0.46)	test_majacc_d   0.48 (  0.48)	test_corr_d   0.09 (  0.09)
Overall Timing[ 36/  1]	epoch_time 0.0350 (0.0382)	validation_time 0.0003 (0.0006)	train_time 0.0347 (0.0374)
record: (train_acc, test_acc) (0.6095000122785568, 0.6620000600814819)
last accs (train_acc, test_acc) (0.5119000126719475, 0.46000000834465027)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  6.08it/s] 15%|#5        | 4/26 [00:00<00:01, 16.47it/s] 31%|###       | 8/26 [00:00<00:00, 23.91it/s] 46%|####6     | 12/26 [00:00<00:00, 28.38it/s] 58%|#####7    | 15/26 [00:00<00:00, 28.77it/s] 73%|#######3  | 19/26 [00:00<00:00, 30.29it/s] 88%|########8 | 23/26 [00:00<00:00, 31.73it/s]100%|##########| 26/26 [00:00<00:00, 26.03it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 962 400
penalty weights 10000.0
args.step pgd_anneal_iters 962 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 963 400
penalty weights 10000.0
args.step pgd_anneal_iters 963 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 964 400
penalty weights 10000.0
args.step pgd_anneal_iters 964 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 965 400
penalty weights 10000.0
args.step pgd_anneal_iters 965 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 966 400
penalty weights 10000.0
args.step pgd_anneal_iters 966 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 967 400
penalty weights 10000.0
args.step pgd_anneal_iters 967 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 968 400
penalty weights 10000.0
args.step pgd_anneal_iters 968 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 969 400
penalty weights 10000.0
args.step pgd_anneal_iters 969 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 970 400
penalty weights 10000.0
args.step pgd_anneal_iters 970 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 971 400
penalty weights 10000.0
args.step pgd_anneal_iters 971 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 972 400
penalty weights 10000.0
args.step pgd_anneal_iters 972 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 973 400
penalty weights 10000.0
args.step pgd_anneal_iters 973 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 974 400
penalty weights 10000.0
args.step pgd_anneal_iters 974 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 975 400
penalty weights 10000.0
args.step pgd_anneal_iters 975 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 976 400
penalty weights 10000.0
args.step pgd_anneal_iters 976 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 977 400
penalty weights 10000.0
args.step pgd_anneal_iters 977 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 978 400
penalty weights 10000.0
args.step pgd_anneal_iters 978 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 979 400
penalty weights 10000.0
args.step pgd_anneal_iters 979 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 980 400
penalty weights 10000.0
args.step pgd_anneal_iters 980 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 981 400
penalty weights 10000.0
args.step pgd_anneal_iters 981 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 982 400
penalty weights 10000.0
args.step pgd_anneal_iters 982 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 983 400
penalty weights 10000.0
args.step pgd_anneal_iters 983 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 984 400
penalty weights 10000.0
args.step pgd_anneal_iters 984 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 985 400
penalty weights 10000.0
args.step pgd_anneal_iters 985 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 986 400
penalty weights 10000.0
args.step pgd_anneal_iters 986 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 987 400
penalty weights 10000.0
args.step pgd_anneal_iters 987 600
dim_v 512
Epoch: [37][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.15 (  0.15)	train_acc   0.56 (  0.51)	train_minacc   0.24 (  0.39)	train_majacc   0.61 (  0.53)	train_corr   0.00 (  0.00)	l1 6.9217 (6.9195)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.88it/s] 31%|###       | 8/26 [00:00<00:00, 42.04it/s]                                               31%|###       | 8/26 [00:00<00:00, 42.04it/s] 50%|#####     | 13/26 [00:00<00:00, 43.42it/s] 73%|#######3  | 19/26 [00:00<00:00, 48.82it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 48.82it/s] 96%|#########6| 25/26 [00:00<00:00, 48.34it/s]100%|##########| 26/26 [00:00<00:00, 41.40it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.51 (  0.51)	test_minacc   0.31 (  0.31)	test_majacc   0.54 (  0.54)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.31 (  0.31)	test_majacc_d   0.54 (  0.54)	test_corr_d   0.05 (  0.05)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.52 (  0.51)	test_minacc   0.44 (  0.39)	test_majacc   0.54 (  0.54)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.51)	test_minacc_d   0.44 (  0.39)	test_majacc_d   0.54 (  0.54)	test_corr_d   0.04 (  0.05)
Test: [  20/  26]	Loss 0.692 (0.693)	test_acc   0.56 (  0.52)	test_minacc   0.40 (  0.38)	test_majacc   0.58 (  0.54)	Loss_d 0.692 (0.693)	test_acc_d   0.56 (  0.52)	test_minacc_d   0.40 (  0.38)	test_majacc_d   0.58 (  0.54)	test_corr_d   0.00 (  0.04)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.56 (  0.52)	test_minacc   0.24 (  0.37)	test_majacc   0.60 (  0.54)	Loss_d 0.693 (0.693)	test_acc_d   0.56 (  0.52)	test_minacc_d   0.24 (  0.37)	test_majacc_d   0.60 (  0.54)	test_corr_d   0.09 (  0.05)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.88it/s]
Test: [  0/  1]	Loss 0.694 (0.694)	test_acc   0.42 (  0.42)	test_minacc   0.42 (  0.42)	test_majacc   0.49 (  0.49)	Loss_d 0.694 (0.694)	test_acc_d   0.42 (  0.42)	test_minacc_d   0.42 (  0.42)	test_majacc_d   0.49 (  0.49)	test_corr_d   0.09 (  0.09)
Test: [  1/  1]	Loss 0.694 (0.694)	test_acc   0.42 (  0.42)	test_minacc   0.42 (  0.42)	test_majacc   0.49 (  0.49)	Loss_d 0.694 (0.694)	test_acc_d   0.42 (  0.42)	test_minacc_d   0.42 (  0.42)	test_majacc_d   0.49 (  0.49)	test_corr_d   0.09 (  0.09)
Overall Timing[ 37/  1]	epoch_time 0.0393 (0.0382)	validation_time 0.0004 (0.0006)	train_time 0.0388 (0.0374)
record: (train_acc, test_acc) (0.6095000122785568, 0.6620000600814819)
last accs (train_acc, test_acc) (0.5170000095963478, 0.4230000078678131)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  6.10it/s] 19%|#9        | 5/26 [00:00<00:01, 20.00it/s] 35%|###4      | 9/26 [00:00<00:00, 25.46it/s] 50%|#####     | 13/26 [00:00<00:00, 29.03it/s] 65%|######5   | 17/26 [00:00<00:00, 30.76it/s] 81%|########  | 21/26 [00:00<00:00, 32.34it/s] 96%|#########6| 25/26 [00:00<00:00, 33.69it/s]100%|##########| 26/26 [00:00<00:00, 27.45it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 988 400
penalty weights 10000.0
args.step pgd_anneal_iters 988 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 989 400
penalty weights 10000.0
args.step pgd_anneal_iters 989 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 990 400
penalty weights 10000.0
args.step pgd_anneal_iters 990 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 991 400
penalty weights 10000.0
args.step pgd_anneal_iters 991 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 992 400
penalty weights 10000.0
args.step pgd_anneal_iters 992 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 993 400
penalty weights 10000.0
args.step pgd_anneal_iters 993 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 994 400
penalty weights 10000.0
args.step pgd_anneal_iters 994 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 995 400
penalty weights 10000.0
args.step pgd_anneal_iters 995 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 996 400
penalty weights 10000.0
args.step pgd_anneal_iters 996 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 997 400
penalty weights 10000.0
args.step pgd_anneal_iters 997 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 998 400
penalty weights 10000.0
args.step pgd_anneal_iters 998 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 999 400
penalty weights 10000.0
args.step pgd_anneal_iters 999 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1000 400
penalty weights 10000.0
args.step pgd_anneal_iters 1000 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1001 400
penalty weights 10000.0
args.step pgd_anneal_iters 1001 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1002 400
penalty weights 10000.0
args.step pgd_anneal_iters 1002 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1003 400
penalty weights 10000.0
args.step pgd_anneal_iters 1003 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1004 400
penalty weights 10000.0
args.step pgd_anneal_iters 1004 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1005 400
penalty weights 10000.0
args.step pgd_anneal_iters 1005 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1006 400
penalty weights 10000.0
args.step pgd_anneal_iters 1006 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1007 400
penalty weights 10000.0
args.step pgd_anneal_iters 1007 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1008 400
penalty weights 10000.0
args.step pgd_anneal_iters 1008 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1009 400
penalty weights 10000.0
args.step pgd_anneal_iters 1009 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1010 400
penalty weights 10000.0
args.step pgd_anneal_iters 1010 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1011 400
penalty weights 10000.0
args.step pgd_anneal_iters 1011 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1012 400
penalty weights 10000.0
args.step pgd_anneal_iters 1012 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1013 400
penalty weights 10000.0
args.step pgd_anneal_iters 1013 600
dim_v 512
Epoch: [38][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.15 (  0.15)	train_acc   0.56 (  0.51)	train_minacc   0.24 (  0.37)	train_majacc   0.60 (  0.54)	train_corr   0.00 (  0.00)	l1 6.9257 (6.9238)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.54it/s] 23%|##3       | 6/26 [00:00<00:00, 25.21it/s]                                               23%|##3       | 6/26 [00:00<00:00, 25.21it/s] 42%|####2     | 11/26 [00:00<00:00, 33.44it/s] 65%|######5   | 17/26 [00:00<00:00, 41.64it/s]                                                65%|######5   | 17/26 [00:00<00:00, 41.64it/s] 88%|########8 | 23/26 [00:00<00:00, 44.24it/s]100%|##########| 26/26 [00:00<00:00, 36.37it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.51 (  0.51)	test_minacc   0.30 (  0.30)	test_majacc   0.54 (  0.54)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.30 (  0.30)	test_majacc_d   0.54 (  0.54)	test_corr_d   0.04 (  0.04)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.52 (  0.51)	test_minacc   0.42 (  0.37)	test_majacc   0.53 (  0.54)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.51)	test_minacc_d   0.42 (  0.37)	test_majacc_d   0.53 (  0.54)	test_corr_d   0.04 (  0.05)
Test: [  20/  26]	Loss 0.692 (0.693)	test_acc   0.55 (  0.52)	test_minacc   0.42 (  0.37)	test_majacc   0.57 (  0.54)	Loss_d 0.692 (0.693)	test_acc_d   0.55 (  0.52)	test_minacc_d   0.42 (  0.37)	test_majacc_d   0.57 (  0.54)	test_corr_d  -0.00 (  0.04)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.56 (  0.52)	test_minacc   0.24 (  0.37)	test_majacc   0.60 (  0.54)	Loss_d 0.693 (0.693)	test_acc_d   0.56 (  0.52)	test_minacc_d   0.24 (  0.37)	test_majacc_d   0.60 (  0.54)	test_corr_d   0.09 (  0.04)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 60.16it/s]
Test: [  0/  1]	Loss 0.694 (0.694)	test_acc   0.40 (  0.40)	test_minacc   0.39 (  0.39)	test_majacc   0.53 (  0.53)	Loss_d 0.694 (0.694)	test_acc_d   0.40 (  0.40)	test_minacc_d   0.39 (  0.39)	test_majacc_d   0.53 (  0.53)	test_corr_d   0.08 (  0.08)
Test: [  1/  1]	Loss 0.694 (0.694)	test_acc   0.40 (  0.40)	test_minacc   0.39 (  0.39)	test_majacc   0.53 (  0.53)	Loss_d 0.694 (0.694)	test_acc_d   0.40 (  0.40)	test_minacc_d   0.39 (  0.39)	test_majacc_d   0.53 (  0.53)	test_corr_d   0.08 (  0.08)
Overall Timing[ 38/  1]	epoch_time 0.0365 (0.0382)	validation_time 0.0004 (0.0006)	train_time 0.0361 (0.0374)
record: (train_acc, test_acc) (0.6095000122785568, 0.6620000600814819)
last accs (train_acc, test_acc) (0.5151000121533871, 0.4000000059604645)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.19it/s] 19%|#9        | 5/26 [00:00<00:00, 22.99it/s] 31%|###       | 8/26 [00:00<00:00, 25.76it/s] 46%|####6     | 12/26 [00:00<00:00, 29.83it/s] 62%|######1   | 16/26 [00:00<00:00, 31.90it/s] 77%|#######6  | 20/26 [00:00<00:00, 33.28it/s] 92%|#########2| 24/26 [00:00<00:00, 33.71it/s]100%|##########| 26/26 [00:00<00:00, 28.55it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1014 400
penalty weights 10000.0
args.step pgd_anneal_iters 1014 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1015 400
penalty weights 10000.0
args.step pgd_anneal_iters 1015 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1016 400
penalty weights 10000.0
args.step pgd_anneal_iters 1016 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1017 400
penalty weights 10000.0
args.step pgd_anneal_iters 1017 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1018 400
penalty weights 10000.0
args.step pgd_anneal_iters 1018 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1019 400
penalty weights 10000.0
args.step pgd_anneal_iters 1019 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1020 400
penalty weights 10000.0
args.step pgd_anneal_iters 1020 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1021 400
penalty weights 10000.0
args.step pgd_anneal_iters 1021 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1022 400
penalty weights 10000.0
args.step pgd_anneal_iters 1022 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1023 400
penalty weights 10000.0
args.step pgd_anneal_iters 1023 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1024 400
penalty weights 10000.0
args.step pgd_anneal_iters 1024 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1025 400
penalty weights 10000.0
args.step pgd_anneal_iters 1025 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1026 400
penalty weights 10000.0
args.step pgd_anneal_iters 1026 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1027 400
penalty weights 10000.0
args.step pgd_anneal_iters 1027 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1028 400
penalty weights 10000.0
args.step pgd_anneal_iters 1028 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1029 400
penalty weights 10000.0
args.step pgd_anneal_iters 1029 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1030 400
penalty weights 10000.0
args.step pgd_anneal_iters 1030 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1031 400
penalty weights 10000.0
args.step pgd_anneal_iters 1031 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1032 400
penalty weights 10000.0
args.step pgd_anneal_iters 1032 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1033 400
penalty weights 10000.0
args.step pgd_anneal_iters 1033 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1034 400
penalty weights 10000.0
args.step pgd_anneal_iters 1034 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1035 400
penalty weights 10000.0
args.step pgd_anneal_iters 1035 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1036 400
penalty weights 10000.0
args.step pgd_anneal_iters 1036 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1037 400
penalty weights 10000.0
args.step pgd_anneal_iters 1037 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1038 400
penalty weights 10000.0
args.step pgd_anneal_iters 1038 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1039 400
penalty weights 10000.0
args.step pgd_anneal_iters 1039 600
dim_v 512
Epoch: [39][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.15 (  0.15)	train_acc   0.53 (  0.51)	train_minacc   0.21 (  0.36)	train_majacc   0.57 (  0.54)	train_corr   0.00 (  0.00)	l1 6.9293 (6.9276)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 17.84it/s] 27%|##6       | 7/26 [00:00<00:00, 33.80it/s]                                               27%|##6       | 7/26 [00:00<00:00, 33.80it/s] 50%|#####     | 13/26 [00:00<00:00, 42.19it/s] 73%|#######3  | 19/26 [00:00<00:00, 48.16it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 48.16it/s] 96%|#########6| 25/26 [00:00<00:00, 47.51it/s]100%|##########| 26/26 [00:00<00:00, 39.90it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.48 (  0.48)	test_minacc   0.28 (  0.28)	test_majacc   0.52 (  0.52)	Loss_d 0.693 (0.693)	test_acc_d   0.48 (  0.48)	test_minacc_d   0.28 (  0.28)	test_majacc_d   0.52 (  0.52)	test_corr_d   0.04 (  0.04)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.51 (  0.51)	test_minacc   0.41 (  0.36)	test_majacc   0.53 (  0.54)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.41 (  0.36)	test_majacc_d   0.53 (  0.54)	test_corr_d   0.04 (  0.04)
Test: [  20/  26]	Loss 0.692 (0.693)	test_acc   0.55 (  0.51)	test_minacc   0.42 (  0.36)	test_majacc   0.57 (  0.54)	Loss_d 0.692 (0.693)	test_acc_d   0.55 (  0.51)	test_minacc_d   0.42 (  0.36)	test_majacc_d   0.57 (  0.54)	test_corr_d  -0.00 (  0.04)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.53 (  0.51)	test_minacc   0.21 (  0.35)	test_majacc   0.57 (  0.54)	Loss_d 0.693 (0.693)	test_acc_d   0.53 (  0.51)	test_minacc_d   0.21 (  0.35)	test_majacc_d   0.57 (  0.54)	test_corr_d   0.09 (  0.04)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 67.41it/s]
Test: [  0/  1]	Loss 0.694 (0.694)	test_acc   0.38 (  0.38)	test_minacc   0.36 (  0.36)	test_majacc   0.56 (  0.56)	Loss_d 0.694 (0.694)	test_acc_d   0.38 (  0.38)	test_minacc_d   0.36 (  0.36)	test_majacc_d   0.56 (  0.56)	test_corr_d   0.08 (  0.08)
Test: [  1/  1]	Loss 0.694 (0.694)	test_acc   0.38 (  0.38)	test_minacc   0.36 (  0.36)	test_majacc   0.56 (  0.56)	Loss_d 0.694 (0.694)	test_acc_d   0.38 (  0.38)	test_minacc_d   0.36 (  0.36)	test_majacc_d   0.56 (  0.56)	test_corr_d   0.08 (  0.08)
Overall Timing[ 39/  1]	epoch_time 0.0363 (0.0381)	validation_time 0.0003 (0.0005)	train_time 0.0360 (0.0374)
record: (train_acc, test_acc) (0.6095000122785568, 0.6620000600814819)
last accs (train_acc, test_acc) (0.5099000100493432, 0.3830000162124634)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 18.20it/s] 23%|##3       | 6/26 [00:00<00:00, 27.00it/s] 38%|###8      | 10/26 [00:00<00:00, 31.07it/s] 54%|#####3    | 14/26 [00:00<00:00, 32.67it/s] 69%|######9   | 18/26 [00:00<00:00, 33.91it/s] 85%|########4 | 22/26 [00:00<00:00, 33.47it/s]100%|##########| 26/26 [00:00<00:00, 34.16it/s]100%|##########| 26/26 [00:00<00:00, 30.09it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1040 400
penalty weights 10000.0
args.step pgd_anneal_iters 1040 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1041 400
penalty weights 10000.0
args.step pgd_anneal_iters 1041 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1042 400
penalty weights 10000.0
args.step pgd_anneal_iters 1042 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1043 400
penalty weights 10000.0
args.step pgd_anneal_iters 1043 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1044 400
penalty weights 10000.0
args.step pgd_anneal_iters 1044 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1045 400
penalty weights 10000.0
args.step pgd_anneal_iters 1045 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1046 400
penalty weights 10000.0
args.step pgd_anneal_iters 1046 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1047 400
penalty weights 10000.0
args.step pgd_anneal_iters 1047 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1048 400
penalty weights 10000.0
args.step pgd_anneal_iters 1048 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1049 400
penalty weights 10000.0
args.step pgd_anneal_iters 1049 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1050 400
penalty weights 10000.0
args.step pgd_anneal_iters 1050 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1051 400
penalty weights 10000.0
args.step pgd_anneal_iters 1051 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1052 400
penalty weights 10000.0
args.step pgd_anneal_iters 1052 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1053 400
penalty weights 10000.0
args.step pgd_anneal_iters 1053 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1054 400
penalty weights 10000.0
args.step pgd_anneal_iters 1054 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1055 400
penalty weights 10000.0
args.step pgd_anneal_iters 1055 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1056 400
penalty weights 10000.0
args.step pgd_anneal_iters 1056 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1057 400
penalty weights 10000.0
args.step pgd_anneal_iters 1057 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1058 400
penalty weights 10000.0
args.step pgd_anneal_iters 1058 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1059 400
penalty weights 10000.0
args.step pgd_anneal_iters 1059 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1060 400
penalty weights 10000.0
args.step pgd_anneal_iters 1060 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1061 400
penalty weights 10000.0
args.step pgd_anneal_iters 1061 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1062 400
penalty weights 10000.0
args.step pgd_anneal_iters 1062 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1063 400
penalty weights 10000.0
args.step pgd_anneal_iters 1063 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1064 400
penalty weights 10000.0
args.step pgd_anneal_iters 1064 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1065 400
penalty weights 10000.0
args.step pgd_anneal_iters 1065 600
dim_v 512
Epoch: [40][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.15 (  0.15)	train_acc   0.51 (  0.51)	train_minacc   0.17 (  0.35)	train_majacc   0.56 (  0.53)	train_corr   0.00 (  0.00)	l1 6.9324 (6.9310)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.85it/s] 27%|##6       | 7/26 [00:00<00:00, 35.81it/s]                                               27%|##6       | 7/26 [00:00<00:00, 35.81it/s] 50%|#####     | 13/26 [00:00<00:00, 39.95it/s] 73%|#######3  | 19/26 [00:00<00:00, 45.63it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 45.63it/s] 96%|#########6| 25/26 [00:00<00:00, 46.83it/s]100%|##########| 26/26 [00:00<00:00, 39.56it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.49 (  0.49)	test_minacc   0.28 (  0.28)	test_majacc   0.53 (  0.53)	Loss_d 0.693 (0.693)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.28 (  0.28)	test_majacc_d   0.53 (  0.53)	test_corr_d   0.04 (  0.04)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.49 (  0.51)	test_minacc   0.34 (  0.35)	test_majacc   0.51 (  0.54)	Loss_d 0.693 (0.693)	test_acc_d   0.49 (  0.51)	test_minacc_d   0.34 (  0.35)	test_majacc_d   0.51 (  0.54)	test_corr_d   0.04 (  0.04)
Test: [  20/  26]	Loss 0.692 (0.693)	test_acc   0.54 (  0.51)	test_minacc   0.40 (  0.35)	test_majacc   0.56 (  0.54)	Loss_d 0.692 (0.693)	test_acc_d   0.54 (  0.51)	test_minacc_d   0.40 (  0.35)	test_majacc_d   0.56 (  0.54)	test_corr_d  -0.01 (  0.03)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.51 (  0.50)	test_minacc   0.17 (  0.34)	test_majacc   0.56 (  0.53)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.50)	test_minacc_d   0.17 (  0.34)	test_majacc_d   0.56 (  0.53)	test_corr_d   0.08 (  0.04)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 67.30it/s]
Test: [  0/  1]	Loss 0.694 (0.694)	test_acc   0.38 (  0.38)	test_minacc   0.36 (  0.36)	test_majacc   0.57 (  0.57)	Loss_d 0.694 (0.694)	test_acc_d   0.38 (  0.38)	test_minacc_d   0.36 (  0.36)	test_majacc_d   0.57 (  0.57)	test_corr_d   0.08 (  0.08)
Test: [  1/  1]	Loss 0.694 (0.694)	test_acc   0.38 (  0.38)	test_minacc   0.36 (  0.36)	test_majacc   0.57 (  0.57)	Loss_d 0.694 (0.694)	test_acc_d   0.38 (  0.38)	test_minacc_d   0.36 (  0.36)	test_majacc_d   0.57 (  0.57)	test_corr_d   0.08 (  0.08)
Overall Timing[ 40/  1]	epoch_time 0.0367 (0.0381)	validation_time 0.0004 (0.0005)	train_time 0.0363 (0.0374)
record: (train_acc, test_acc) (0.6095000122785568, 0.6620000600814819)
last accs (train_acc, test_acc) (0.5049000107944012, 0.38200002908706665)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.83it/s] 19%|#9        | 5/26 [00:00<00:00, 23.78it/s] 35%|###4      | 9/26 [00:00<00:00, 27.74it/s] 50%|#####     | 13/26 [00:00<00:00, 31.01it/s] 65%|######5   | 17/26 [00:00<00:00, 33.07it/s] 81%|########  | 21/26 [00:00<00:00, 33.87it/s] 96%|#########6| 25/26 [00:00<00:00, 34.36it/s]100%|##########| 26/26 [00:00<00:00, 29.27it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1066 400
penalty weights 10000.0
args.step pgd_anneal_iters 1066 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1067 400
penalty weights 10000.0
args.step pgd_anneal_iters 1067 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1068 400
penalty weights 10000.0
args.step pgd_anneal_iters 1068 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1069 400
penalty weights 10000.0
args.step pgd_anneal_iters 1069 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1070 400
penalty weights 10000.0
args.step pgd_anneal_iters 1070 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1071 400
penalty weights 10000.0
args.step pgd_anneal_iters 1071 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1072 400
penalty weights 10000.0
args.step pgd_anneal_iters 1072 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1073 400
penalty weights 10000.0
args.step pgd_anneal_iters 1073 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1074 400
penalty weights 10000.0
args.step pgd_anneal_iters 1074 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1075 400
penalty weights 10000.0
args.step pgd_anneal_iters 1075 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1076 400
penalty weights 10000.0
args.step pgd_anneal_iters 1076 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1077 400
penalty weights 10000.0
args.step pgd_anneal_iters 1077 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1078 400
penalty weights 10000.0
args.step pgd_anneal_iters 1078 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1079 400
penalty weights 10000.0
args.step pgd_anneal_iters 1079 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1080 400
penalty weights 10000.0
args.step pgd_anneal_iters 1080 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1081 400
penalty weights 10000.0
args.step pgd_anneal_iters 1081 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1082 400
penalty weights 10000.0
args.step pgd_anneal_iters 1082 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1083 400
penalty weights 10000.0
args.step pgd_anneal_iters 1083 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1084 400
penalty weights 10000.0
args.step pgd_anneal_iters 1084 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1085 400
penalty weights 10000.0
args.step pgd_anneal_iters 1085 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1086 400
penalty weights 10000.0
args.step pgd_anneal_iters 1086 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1087 400
penalty weights 10000.0
args.step pgd_anneal_iters 1087 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1088 400
penalty weights 10000.0
args.step pgd_anneal_iters 1088 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1089 400
penalty weights 10000.0
args.step pgd_anneal_iters 1089 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1090 400
penalty weights 10000.0
args.step pgd_anneal_iters 1090 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1091 400
penalty weights 10000.0
args.step pgd_anneal_iters 1091 600
dim_v 512
Epoch: [41][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.15 (  0.15)	train_acc   0.51 (  0.50)	train_minacc   0.14 (  0.34)	train_majacc   0.56 (  0.53)	train_corr   0.00 (  0.00)	l1 6.9352 (6.9339)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 17.87it/s] 31%|###       | 8/26 [00:00<00:00, 37.59it/s]                                               31%|###       | 8/26 [00:00<00:00, 37.59it/s] 50%|#####     | 13/26 [00:00<00:00, 41.56it/s] 73%|#######3  | 19/26 [00:00<00:00, 47.32it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 47.32it/s] 96%|#########6| 25/26 [00:00<00:00, 47.66it/s]100%|##########| 26/26 [00:00<00:00, 40.50it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.46 (  0.46)	test_minacc   0.26 (  0.26)	test_majacc   0.50 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.46 (  0.46)	test_minacc_d   0.26 (  0.26)	test_majacc_d   0.50 (  0.50)	test_corr_d   0.04 (  0.04)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.49 (  0.50)	test_minacc   0.34 (  0.34)	test_majacc   0.52 (  0.53)	Loss_d 0.693 (0.693)	test_acc_d   0.49 (  0.50)	test_minacc_d   0.34 (  0.34)	test_majacc_d   0.52 (  0.53)	test_corr_d   0.04 (  0.04)
Test: [  20/  26]	Loss 0.692 (0.693)	test_acc   0.53 (  0.50)	test_minacc   0.38 (  0.35)	test_majacc   0.55 (  0.53)	Loss_d 0.692 (0.693)	test_acc_d   0.53 (  0.50)	test_minacc_d   0.38 (  0.35)	test_majacc_d   0.55 (  0.53)	test_corr_d  -0.01 (  0.03)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.51 (  0.50)	test_minacc   0.14 (  0.34)	test_majacc   0.56 (  0.53)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.50)	test_minacc_d   0.14 (  0.34)	test_majacc_d   0.56 (  0.53)	test_corr_d   0.08 (  0.04)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.53it/s]
Test: [  0/  1]	Loss 0.694 (0.694)	test_acc   0.38 (  0.38)	test_minacc   0.35 (  0.35)	test_majacc   0.57 (  0.57)	Loss_d 0.694 (0.694)	test_acc_d   0.38 (  0.38)	test_minacc_d   0.35 (  0.35)	test_majacc_d   0.57 (  0.57)	test_corr_d   0.08 (  0.08)
Test: [  1/  1]	Loss 0.694 (0.694)	test_acc   0.38 (  0.38)	test_minacc   0.35 (  0.35)	test_majacc   0.57 (  0.57)	Loss_d 0.694 (0.694)	test_acc_d   0.38 (  0.38)	test_minacc_d   0.35 (  0.35)	test_majacc_d   0.57 (  0.57)	test_corr_d   0.08 (  0.08)
Overall Timing[ 41/  1]	epoch_time 0.0375 (0.0381)	validation_time 0.0003 (0.0005)	train_time 0.0371 (0.0373)
record: (train_acc, test_acc) (0.6095000122785568, 0.6620000600814819)
last accs (train_acc, test_acc) (0.5009000180065631, 0.3760000169277191)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.41it/s] 19%|#9        | 5/26 [00:00<00:00, 22.71it/s] 35%|###4      | 9/26 [00:00<00:00, 28.48it/s] 50%|#####     | 13/26 [00:00<00:00, 31.80it/s] 65%|######5   | 17/26 [00:00<00:00, 33.42it/s] 81%|########  | 21/26 [00:00<00:00, 34.54it/s] 96%|#########6| 25/26 [00:00<00:00, 34.93it/s]100%|##########| 26/26 [00:00<00:00, 29.58it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1092 400
penalty weights 10000.0
args.step pgd_anneal_iters 1092 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1093 400
penalty weights 10000.0
args.step pgd_anneal_iters 1093 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1094 400
penalty weights 10000.0
args.step pgd_anneal_iters 1094 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1095 400
penalty weights 10000.0
args.step pgd_anneal_iters 1095 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1096 400
penalty weights 10000.0
args.step pgd_anneal_iters 1096 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1097 400
penalty weights 10000.0
args.step pgd_anneal_iters 1097 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1098 400
penalty weights 10000.0
args.step pgd_anneal_iters 1098 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1099 400
penalty weights 10000.0
args.step pgd_anneal_iters 1099 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1100 400
penalty weights 10000.0
args.step pgd_anneal_iters 1100 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1101 400
penalty weights 10000.0
args.step pgd_anneal_iters 1101 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1102 400
penalty weights 10000.0
args.step pgd_anneal_iters 1102 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1103 400
penalty weights 10000.0
args.step pgd_anneal_iters 1103 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1104 400
penalty weights 10000.0
args.step pgd_anneal_iters 1104 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1105 400
penalty weights 10000.0
args.step pgd_anneal_iters 1105 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1106 400
penalty weights 10000.0
args.step pgd_anneal_iters 1106 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1107 400
penalty weights 10000.0
args.step pgd_anneal_iters 1107 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1108 400
penalty weights 10000.0
args.step pgd_anneal_iters 1108 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1109 400
penalty weights 10000.0
args.step pgd_anneal_iters 1109 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1110 400
penalty weights 10000.0
args.step pgd_anneal_iters 1110 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1111 400
penalty weights 10000.0
args.step pgd_anneal_iters 1111 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1112 400
penalty weights 10000.0
args.step pgd_anneal_iters 1112 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1113 400
penalty weights 10000.0
args.step pgd_anneal_iters 1113 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1114 400
penalty weights 10000.0
args.step pgd_anneal_iters 1114 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1115 400
penalty weights 10000.0
args.step pgd_anneal_iters 1115 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1116 400
penalty weights 10000.0
args.step pgd_anneal_iters 1116 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1117 400
penalty weights 10000.0
args.step pgd_anneal_iters 1117 600
dim_v 512
Epoch: [42][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.15 (  0.15)	train_acc   0.50 (  0.50)	train_minacc   0.14 (  0.33)	train_majacc   0.55 (  0.53)	train_corr   0.00 (  0.00)	l1 6.9376 (6.9364)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.08it/s] 27%|##6       | 7/26 [00:00<00:00, 31.79it/s]                                               27%|##6       | 7/26 [00:00<00:00, 31.79it/s] 50%|#####     | 13/26 [00:00<00:00, 37.44it/s] 73%|#######3  | 19/26 [00:00<00:00, 43.69it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 43.69it/s] 96%|#########6| 25/26 [00:00<00:00, 44.12it/s]100%|##########| 26/26 [00:00<00:00, 35.48it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.46 (  0.46)	test_minacc   0.26 (  0.26)	test_majacc   0.50 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.46 (  0.46)	test_minacc_d   0.26 (  0.26)	test_majacc_d   0.50 (  0.50)	test_corr_d   0.04 (  0.04)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.50 (  0.50)	test_minacc   0.34 (  0.34)	test_majacc   0.53 (  0.53)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.34 (  0.34)	test_majacc_d   0.53 (  0.53)	test_corr_d   0.04 (  0.04)
Test: [  20/  26]	Loss 0.692 (0.693)	test_acc   0.52 (  0.50)	test_minacc   0.36 (  0.35)	test_majacc   0.54 (  0.52)	Loss_d 0.692 (0.693)	test_acc_d   0.52 (  0.50)	test_minacc_d   0.36 (  0.35)	test_majacc_d   0.54 (  0.52)	test_corr_d  -0.01 (  0.03)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.50 (  0.50)	test_minacc   0.14 (  0.33)	test_majacc   0.55 (  0.52)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.14 (  0.33)	test_majacc_d   0.55 (  0.52)	test_corr_d   0.08 (  0.04)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 64.00it/s]
Test: [  0/  1]	Loss 0.694 (0.694)	test_acc   0.37 (  0.37)	test_minacc   0.35 (  0.35)	test_majacc   0.56 (  0.56)	Loss_d 0.694 (0.694)	test_acc_d   0.37 (  0.37)	test_minacc_d   0.35 (  0.35)	test_majacc_d   0.56 (  0.56)	test_corr_d   0.07 (  0.07)
Test: [  1/  1]	Loss 0.694 (0.694)	test_acc   0.37 (  0.37)	test_minacc   0.35 (  0.35)	test_majacc   0.56 (  0.56)	Loss_d 0.694 (0.694)	test_acc_d   0.37 (  0.37)	test_minacc_d   0.35 (  0.35)	test_majacc_d   0.56 (  0.56)	test_corr_d   0.07 (  0.07)
Overall Timing[ 42/  1]	epoch_time 0.0367 (0.0380)	validation_time 0.0004 (0.0005)	train_time 0.0363 (0.0373)
record: (train_acc, test_acc) (0.6095000122785568, 0.6620000600814819)
last accs (train_acc, test_acc) (0.49540000861883166, 0.367000013589859)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.64it/s] 19%|#9        | 5/26 [00:00<00:01, 20.90it/s] 35%|###4      | 9/26 [00:00<00:00, 26.10it/s] 50%|#####     | 13/26 [00:00<00:00, 29.26it/s] 65%|######5   | 17/26 [00:00<00:00, 31.28it/s] 81%|########  | 21/26 [00:00<00:00, 33.13it/s] 96%|#########6| 25/26 [00:00<00:00, 33.91it/s]100%|##########| 26/26 [00:00<00:00, 27.97it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1118 400
penalty weights 10000.0
args.step pgd_anneal_iters 1118 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1119 400
penalty weights 10000.0
args.step pgd_anneal_iters 1119 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1120 400
penalty weights 10000.0
args.step pgd_anneal_iters 1120 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1121 400
penalty weights 10000.0
args.step pgd_anneal_iters 1121 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1122 400
penalty weights 10000.0
args.step pgd_anneal_iters 1122 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1123 400
penalty weights 10000.0
args.step pgd_anneal_iters 1123 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1124 400
penalty weights 10000.0
args.step pgd_anneal_iters 1124 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1125 400
penalty weights 10000.0
args.step pgd_anneal_iters 1125 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1126 400
penalty weights 10000.0
args.step pgd_anneal_iters 1126 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1127 400
penalty weights 10000.0
args.step pgd_anneal_iters 1127 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1128 400
penalty weights 10000.0
args.step pgd_anneal_iters 1128 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1129 400
penalty weights 10000.0
args.step pgd_anneal_iters 1129 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1130 400
penalty weights 10000.0
args.step pgd_anneal_iters 1130 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1131 400
penalty weights 10000.0
args.step pgd_anneal_iters 1131 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1132 400
penalty weights 10000.0
args.step pgd_anneal_iters 1132 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1133 400
penalty weights 10000.0
args.step pgd_anneal_iters 1133 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1134 400
penalty weights 10000.0
args.step pgd_anneal_iters 1134 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1135 400
penalty weights 10000.0
args.step pgd_anneal_iters 1135 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1136 400
penalty weights 10000.0
args.step pgd_anneal_iters 1136 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1137 400
penalty weights 10000.0
args.step pgd_anneal_iters 1137 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1138 400
penalty weights 10000.0
args.step pgd_anneal_iters 1138 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1139 400
penalty weights 10000.0
args.step pgd_anneal_iters 1139 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1140 400
penalty weights 10000.0
args.step pgd_anneal_iters 1140 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1141 400
penalty weights 10000.0
args.step pgd_anneal_iters 1141 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1142 400
penalty weights 10000.0
args.step pgd_anneal_iters 1142 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1143 400
penalty weights 10000.0
args.step pgd_anneal_iters 1143 600
dim_v 512
Epoch: [43][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.15 (  0.15)	train_acc   0.50 (  0.49)	train_minacc   0.17 (  0.33)	train_majacc   0.54 (  0.52)	train_corr   0.00 (  0.00)	l1 6.9397 (6.9387)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.74it/s] 27%|##6       | 7/26 [00:00<00:00, 28.52it/s]                                               27%|##6       | 7/26 [00:00<00:00, 28.52it/s] 50%|#####     | 13/26 [00:00<00:00, 36.09it/s] 73%|#######3  | 19/26 [00:00<00:00, 43.16it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 43.16it/s] 96%|#########6| 25/26 [00:00<00:00, 45.28it/s]100%|##########| 26/26 [00:00<00:00, 35.97it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.47 (  0.47)	test_minacc   0.26 (  0.26)	test_majacc   0.51 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.47 (  0.47)	test_minacc_d   0.26 (  0.26)	test_majacc_d   0.51 (  0.51)	test_corr_d   0.03 (  0.03)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.49 (  0.49)	test_minacc   0.32 (  0.34)	test_majacc   0.52 (  0.52)	Loss_d 0.693 (0.693)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.32 (  0.34)	test_majacc_d   0.52 (  0.52)	test_corr_d   0.04 (  0.04)
Test: [  20/  26]	Loss 0.692 (0.693)	test_acc   0.51 (  0.49)	test_minacc   0.36 (  0.34)	test_majacc   0.53 (  0.52)	Loss_d 0.692 (0.693)	test_acc_d   0.51 (  0.49)	test_minacc_d   0.36 (  0.34)	test_majacc_d   0.53 (  0.52)	test_corr_d  -0.01 (  0.03)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.50 (  0.49)	test_minacc   0.17 (  0.33)	test_majacc   0.54 (  0.52)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.49)	test_minacc_d   0.17 (  0.33)	test_majacc_d   0.54 (  0.52)	test_corr_d   0.08 (  0.04)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.02it/s]
Test: [  0/  1]	Loss 0.694 (0.694)	test_acc   0.36 (  0.36)	test_minacc   0.34 (  0.34)	test_majacc   0.54 (  0.54)	Loss_d 0.694 (0.694)	test_acc_d   0.36 (  0.36)	test_minacc_d   0.34 (  0.34)	test_majacc_d   0.54 (  0.54)	test_corr_d   0.07 (  0.07)
Test: [  1/  1]	Loss 0.694 (0.694)	test_acc   0.36 (  0.36)	test_minacc   0.34 (  0.34)	test_majacc   0.54 (  0.54)	Loss_d 0.694 (0.694)	test_acc_d   0.36 (  0.36)	test_minacc_d   0.34 (  0.34)	test_majacc_d   0.54 (  0.54)	test_corr_d   0.07 (  0.07)
Overall Timing[ 43/  1]	epoch_time 0.0367 (0.0380)	validation_time 0.0003 (0.0005)	train_time 0.0363 (0.0373)
record: (train_acc, test_acc) (0.6095000122785568, 0.6620000600814819)
last accs (train_acc, test_acc) (0.49270001089572907, 0.36400002241134644)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.08it/s] 19%|#9        | 5/26 [00:00<00:01, 17.72it/s] 35%|###4      | 9/26 [00:00<00:00, 24.17it/s] 50%|#####     | 13/26 [00:00<00:00, 28.63it/s] 65%|######5   | 17/26 [00:00<00:00, 31.46it/s] 81%|########  | 21/26 [00:00<00:00, 33.25it/s] 96%|#########6| 25/26 [00:00<00:00, 34.51it/s]100%|##########| 26/26 [00:00<00:00, 27.25it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1144 400
penalty weights 10000.0
args.step pgd_anneal_iters 1144 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1145 400
penalty weights 10000.0
args.step pgd_anneal_iters 1145 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1146 400
penalty weights 10000.0
args.step pgd_anneal_iters 1146 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1147 400
penalty weights 10000.0
args.step pgd_anneal_iters 1147 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1148 400
penalty weights 10000.0
args.step pgd_anneal_iters 1148 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1149 400
penalty weights 10000.0
args.step pgd_anneal_iters 1149 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1150 400
penalty weights 10000.0
args.step pgd_anneal_iters 1150 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1151 400
penalty weights 10000.0
args.step pgd_anneal_iters 1151 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1152 400
penalty weights 10000.0
args.step pgd_anneal_iters 1152 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1153 400
penalty weights 10000.0
args.step pgd_anneal_iters 1153 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1154 400
penalty weights 10000.0
args.step pgd_anneal_iters 1154 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1155 400
penalty weights 10000.0
args.step pgd_anneal_iters 1155 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1156 400
penalty weights 10000.0
args.step pgd_anneal_iters 1156 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1157 400
penalty weights 10000.0
args.step pgd_anneal_iters 1157 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1158 400
penalty weights 10000.0
args.step pgd_anneal_iters 1158 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1159 400
penalty weights 10000.0
args.step pgd_anneal_iters 1159 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1160 400
penalty weights 10000.0
args.step pgd_anneal_iters 1160 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1161 400
penalty weights 10000.0
args.step pgd_anneal_iters 1161 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1162 400
penalty weights 10000.0
args.step pgd_anneal_iters 1162 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1163 400
penalty weights 10000.0
args.step pgd_anneal_iters 1163 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1164 400
penalty weights 10000.0
args.step pgd_anneal_iters 1164 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1165 400
penalty weights 10000.0
args.step pgd_anneal_iters 1165 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1166 400
penalty weights 10000.0
args.step pgd_anneal_iters 1166 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1167 400
penalty weights 10000.0
args.step pgd_anneal_iters 1167 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1168 400
penalty weights 10000.0
args.step pgd_anneal_iters 1168 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1169 400
penalty weights 10000.0
args.step pgd_anneal_iters 1169 600
dim_v 512
Epoch: [44][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.15 (  0.15)	train_acc   0.49 (  0.49)	train_minacc   0.17 (  0.33)	train_majacc   0.53 (  0.52)	train_corr   0.00 (  0.00)	l1 6.9415 (6.9406)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.56it/s] 27%|##6       | 7/26 [00:00<00:00, 33.46it/s]                                               27%|##6       | 7/26 [00:00<00:00, 33.46it/s] 50%|#####     | 13/26 [00:00<00:00, 39.65it/s] 73%|#######3  | 19/26 [00:00<00:00, 46.62it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 46.62it/s] 96%|#########6| 25/26 [00:00<00:00, 46.95it/s]100%|##########| 26/26 [00:00<00:00, 38.82it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.47 (  0.47)	test_minacc   0.28 (  0.28)	test_majacc   0.50 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.47 (  0.47)	test_minacc_d   0.28 (  0.28)	test_majacc_d   0.50 (  0.50)	test_corr_d   0.03 (  0.03)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.50 (  0.49)	test_minacc   0.32 (  0.34)	test_majacc   0.53 (  0.52)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.49)	test_minacc_d   0.32 (  0.34)	test_majacc_d   0.53 (  0.52)	test_corr_d   0.04 (  0.04)
Test: [  20/  26]	Loss 0.692 (0.693)	test_acc   0.51 (  0.49)	test_minacc   0.36 (  0.34)	test_majacc   0.53 (  0.52)	Loss_d 0.692 (0.693)	test_acc_d   0.51 (  0.49)	test_minacc_d   0.36 (  0.34)	test_majacc_d   0.53 (  0.52)	test_corr_d  -0.01 (  0.03)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.50 (  0.49)	test_minacc   0.17 (  0.33)	test_majacc   0.54 (  0.52)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.49)	test_minacc_d   0.17 (  0.33)	test_majacc_d   0.54 (  0.52)	test_corr_d   0.08 (  0.03)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 67.22it/s]
Test: [  0/  1]	Loss 0.694 (0.694)	test_acc   0.36 (  0.36)	test_minacc   0.34 (  0.34)	test_majacc   0.53 (  0.53)	Loss_d 0.694 (0.694)	test_acc_d   0.36 (  0.36)	test_minacc_d   0.34 (  0.34)	test_majacc_d   0.53 (  0.53)	test_corr_d   0.07 (  0.07)
Test: [  1/  1]	Loss 0.694 (0.694)	test_acc   0.36 (  0.36)	test_minacc   0.34 (  0.34)	test_majacc   0.53 (  0.53)	Loss_d 0.694 (0.694)	test_acc_d   0.36 (  0.36)	test_minacc_d   0.34 (  0.34)	test_majacc_d   0.53 (  0.53)	test_corr_d   0.07 (  0.07)
Overall Timing[ 44/  1]	epoch_time 0.0360 (0.0380)	validation_time 0.0004 (0.0005)	train_time 0.0356 (0.0373)
record: (train_acc, test_acc) (0.6095000122785568, 0.6620000600814819)
last accs (train_acc, test_acc) (0.4912000103592873, 0.36000001430511475)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.63it/s] 19%|#9        | 5/26 [00:00<00:01, 20.13it/s] 35%|###4      | 9/26 [00:00<00:00, 25.98it/s] 50%|#####     | 13/26 [00:00<00:00, 28.85it/s] 65%|######5   | 17/26 [00:00<00:00, 31.04it/s] 81%|########  | 21/26 [00:00<00:00, 32.08it/s] 96%|#########6| 25/26 [00:00<00:00, 32.78it/s]100%|##########| 26/26 [00:00<00:00, 27.34it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1170 400
penalty weights 10000.0
args.step pgd_anneal_iters 1170 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1171 400
penalty weights 10000.0
args.step pgd_anneal_iters 1171 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1172 400
penalty weights 10000.0
args.step pgd_anneal_iters 1172 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1173 400
penalty weights 10000.0
args.step pgd_anneal_iters 1173 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1174 400
penalty weights 10000.0
args.step pgd_anneal_iters 1174 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1175 400
penalty weights 10000.0
args.step pgd_anneal_iters 1175 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1176 400
penalty weights 10000.0
args.step pgd_anneal_iters 1176 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1177 400
penalty weights 10000.0
args.step pgd_anneal_iters 1177 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1178 400
penalty weights 10000.0
args.step pgd_anneal_iters 1178 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1179 400
penalty weights 10000.0
args.step pgd_anneal_iters 1179 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1180 400
penalty weights 10000.0
args.step pgd_anneal_iters 1180 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1181 400
penalty weights 10000.0
args.step pgd_anneal_iters 1181 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1182 400
penalty weights 10000.0
args.step pgd_anneal_iters 1182 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1183 400
penalty weights 10000.0
args.step pgd_anneal_iters 1183 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1184 400
penalty weights 10000.0
args.step pgd_anneal_iters 1184 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1185 400
penalty weights 10000.0
args.step pgd_anneal_iters 1185 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1186 400
penalty weights 10000.0
args.step pgd_anneal_iters 1186 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1187 400
penalty weights 10000.0
args.step pgd_anneal_iters 1187 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1188 400
penalty weights 10000.0
args.step pgd_anneal_iters 1188 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1189 400
penalty weights 10000.0
args.step pgd_anneal_iters 1189 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1190 400
penalty weights 10000.0
args.step pgd_anneal_iters 1190 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1191 400
penalty weights 10000.0
args.step pgd_anneal_iters 1191 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1192 400
penalty weights 10000.0
args.step pgd_anneal_iters 1192 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1193 400
penalty weights 10000.0
args.step pgd_anneal_iters 1193 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1194 400
penalty weights 10000.0
args.step pgd_anneal_iters 1194 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1195 400
penalty weights 10000.0
args.step pgd_anneal_iters 1195 600
dim_v 512
Epoch: [45][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.15 (  0.15)	train_acc   0.49 (  0.49)	train_minacc   0.14 (  0.33)	train_majacc   0.53 (  0.52)	train_corr   0.00 (  0.00)	l1 6.9431 (6.9423)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 17.28it/s] 27%|##6       | 7/26 [00:00<00:00, 34.65it/s]                                               27%|##6       | 7/26 [00:00<00:00, 34.65it/s] 50%|#####     | 13/26 [00:00<00:00, 41.17it/s] 73%|#######3  | 19/26 [00:00<00:00, 47.24it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 47.24it/s] 96%|#########6| 25/26 [00:00<00:00, 47.76it/s]100%|##########| 26/26 [00:00<00:00, 40.26it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.46 (  0.46)	test_minacc   0.28 (  0.28)	test_majacc   0.50 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.46 (  0.46)	test_minacc_d   0.28 (  0.28)	test_majacc_d   0.50 (  0.50)	test_corr_d   0.03 (  0.03)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.50 (  0.49)	test_minacc   0.32 (  0.33)	test_majacc   0.53 (  0.52)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.49)	test_minacc_d   0.32 (  0.33)	test_majacc_d   0.53 (  0.52)	test_corr_d   0.04 (  0.04)
Test: [  20/  26]	Loss 0.692 (0.693)	test_acc   0.50 (  0.49)	test_minacc   0.36 (  0.34)	test_majacc   0.52 (  0.52)	Loss_d 0.692 (0.693)	test_acc_d   0.50 (  0.49)	test_minacc_d   0.36 (  0.34)	test_majacc_d   0.52 (  0.52)	test_corr_d  -0.01 (  0.03)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.49 (  0.49)	test_minacc   0.14 (  0.32)	test_majacc   0.53 (  0.52)	Loss_d 0.693 (0.693)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.14 (  0.32)	test_majacc_d   0.53 (  0.52)	test_corr_d   0.07 (  0.03)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.92it/s]
Test: [  0/  1]	Loss 0.694 (0.694)	test_acc   0.36 (  0.36)	test_minacc   0.34 (  0.34)	test_majacc   0.53 (  0.53)	Loss_d 0.694 (0.694)	test_acc_d   0.36 (  0.36)	test_minacc_d   0.34 (  0.34)	test_majacc_d   0.53 (  0.53)	test_corr_d   0.06 (  0.06)
Test: [  1/  1]	Loss 0.694 (0.694)	test_acc   0.36 (  0.36)	test_minacc   0.34 (  0.34)	test_majacc   0.53 (  0.53)	Loss_d 0.694 (0.694)	test_acc_d   0.36 (  0.36)	test_minacc_d   0.34 (  0.34)	test_majacc_d   0.53 (  0.53)	test_corr_d   0.06 (  0.06)
Overall Timing[ 45/  1]	epoch_time 0.0374 (0.0379)	validation_time 0.0004 (0.0005)	train_time 0.0369 (0.0373)
record: (train_acc, test_acc) (0.6095000122785568, 0.6620000600814819)
last accs (train_acc, test_acc) (0.4887000073492527, 0.3580000102519989)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.69it/s] 15%|#5        | 4/26 [00:00<00:01, 21.42it/s] 31%|###       | 8/26 [00:00<00:00, 27.87it/s] 46%|####6     | 12/26 [00:00<00:00, 31.00it/s] 62%|######1   | 16/26 [00:00<00:00, 32.53it/s] 77%|#######6  | 20/26 [00:00<00:00, 33.65it/s] 92%|#########2| 24/26 [00:00<00:00, 34.06it/s]100%|##########| 26/26 [00:00<00:00, 29.12it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1196 400
penalty weights 10000.0
args.step pgd_anneal_iters 1196 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1197 400
penalty weights 10000.0
args.step pgd_anneal_iters 1197 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1198 400
penalty weights 10000.0
args.step pgd_anneal_iters 1198 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1199 400
penalty weights 10000.0
args.step pgd_anneal_iters 1199 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1200 400
penalty weights 10000.0
args.step pgd_anneal_iters 1200 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1201 400
penalty weights 10000.0
args.step pgd_anneal_iters 1201 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1202 400
penalty weights 10000.0
args.step pgd_anneal_iters 1202 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1203 400
penalty weights 10000.0
args.step pgd_anneal_iters 1203 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1204 400
penalty weights 10000.0
args.step pgd_anneal_iters 1204 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1205 400
penalty weights 10000.0
args.step pgd_anneal_iters 1205 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1206 400
penalty weights 10000.0
args.step pgd_anneal_iters 1206 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1207 400
penalty weights 10000.0
args.step pgd_anneal_iters 1207 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1208 400
penalty weights 10000.0
args.step pgd_anneal_iters 1208 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1209 400
penalty weights 10000.0
args.step pgd_anneal_iters 1209 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1210 400
penalty weights 10000.0
args.step pgd_anneal_iters 1210 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1211 400
penalty weights 10000.0
args.step pgd_anneal_iters 1211 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1212 400
penalty weights 10000.0
args.step pgd_anneal_iters 1212 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1213 400
penalty weights 10000.0
args.step pgd_anneal_iters 1213 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1214 400
penalty weights 10000.0
args.step pgd_anneal_iters 1214 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1215 400
penalty weights 10000.0
args.step pgd_anneal_iters 1215 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1216 400
penalty weights 10000.0
args.step pgd_anneal_iters 1216 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1217 400
penalty weights 10000.0
args.step pgd_anneal_iters 1217 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1218 400
penalty weights 10000.0
args.step pgd_anneal_iters 1218 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1219 400
penalty weights 10000.0
args.step pgd_anneal_iters 1219 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1220 400
penalty weights 10000.0
args.step pgd_anneal_iters 1220 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1221 400
penalty weights 10000.0
args.step pgd_anneal_iters 1221 600
dim_v 512
Epoch: [46][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.15 (  0.15)	train_acc   0.48 (  0.49)	train_minacc   0.14 (  0.32)	train_majacc   0.53 (  0.52)	train_corr   0.00 (  0.00)	l1 6.9445 (6.9438)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.89it/s] 23%|##3       | 6/26 [00:00<00:00, 27.41it/s]                                               23%|##3       | 6/26 [00:00<00:00, 27.41it/s] 46%|####6     | 12/26 [00:00<00:00, 37.27it/s] 69%|######9   | 18/26 [00:00<00:00, 44.33it/s]                                                69%|######9   | 18/26 [00:00<00:00, 44.33it/s] 92%|#########2| 24/26 [00:00<00:00, 45.48it/s]100%|##########| 26/26 [00:00<00:00, 37.69it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.47 (  0.47)	test_minacc   0.28 (  0.28)	test_majacc   0.50 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.47 (  0.47)	test_minacc_d   0.28 (  0.28)	test_majacc_d   0.50 (  0.50)	test_corr_d   0.03 (  0.03)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.49 (  0.49)	test_minacc   0.29 (  0.33)	test_majacc   0.52 (  0.52)	Loss_d 0.693 (0.693)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.29 (  0.33)	test_majacc_d   0.52 (  0.52)	test_corr_d   0.04 (  0.03)
Test: [  20/  26]	Loss 0.692 (0.693)	test_acc   0.49 (  0.49)	test_minacc   0.38 (  0.34)	test_majacc   0.51 (  0.52)	Loss_d 0.692 (0.693)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.38 (  0.34)	test_majacc_d   0.51 (  0.52)	test_corr_d  -0.01 (  0.03)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.48 (  0.49)	test_minacc   0.14 (  0.32)	test_majacc   0.53 (  0.52)	Loss_d 0.693 (0.693)	test_acc_d   0.48 (  0.49)	test_minacc_d   0.14 (  0.32)	test_majacc_d   0.53 (  0.52)	test_corr_d   0.07 (  0.03)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 65.90it/s]
Test: [  0/  1]	Loss 0.694 (0.694)	test_acc   0.35 (  0.35)	test_minacc   0.33 (  0.33)	test_majacc   0.53 (  0.53)	Loss_d 0.694 (0.694)	test_acc_d   0.35 (  0.35)	test_minacc_d   0.33 (  0.33)	test_majacc_d   0.53 (  0.53)	test_corr_d   0.06 (  0.06)
Test: [  1/  1]	Loss 0.694 (0.694)	test_acc   0.35 (  0.35)	test_minacc   0.33 (  0.33)	test_majacc   0.53 (  0.53)	Loss_d 0.694 (0.694)	test_acc_d   0.35 (  0.35)	test_minacc_d   0.33 (  0.33)	test_majacc_d   0.53 (  0.53)	test_corr_d   0.06 (  0.06)
Overall Timing[ 46/  1]	epoch_time 0.0372 (0.0379)	validation_time 0.0004 (0.0005)	train_time 0.0368 (0.0372)
record: (train_acc, test_acc) (0.6095000122785568, 0.6620000600814819)
last accs (train_acc, test_acc) (0.487100009560585, 0.3540000021457672)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.34it/s] 19%|#9        | 5/26 [00:00<00:00, 22.72it/s] 35%|###4      | 9/26 [00:00<00:00, 27.77it/s] 50%|#####     | 13/26 [00:00<00:00, 31.23it/s] 65%|######5   | 17/26 [00:00<00:00, 33.28it/s] 81%|########  | 21/26 [00:00<00:00, 34.78it/s] 96%|#########6| 25/26 [00:00<00:00, 35.50it/s]100%|##########| 26/26 [00:00<00:00, 29.78it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1222 400
penalty weights 10000.0
args.step pgd_anneal_iters 1222 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1223 400
penalty weights 10000.0
args.step pgd_anneal_iters 1223 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1224 400
penalty weights 10000.0
args.step pgd_anneal_iters 1224 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1225 400
penalty weights 10000.0
args.step pgd_anneal_iters 1225 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1226 400
penalty weights 10000.0
args.step pgd_anneal_iters 1226 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1227 400
penalty weights 10000.0
args.step pgd_anneal_iters 1227 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1228 400
penalty weights 10000.0
args.step pgd_anneal_iters 1228 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1229 400
penalty weights 10000.0
args.step pgd_anneal_iters 1229 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1230 400
penalty weights 10000.0
args.step pgd_anneal_iters 1230 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1231 400
penalty weights 10000.0
args.step pgd_anneal_iters 1231 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1232 400
penalty weights 10000.0
args.step pgd_anneal_iters 1232 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1233 400
penalty weights 10000.0
args.step pgd_anneal_iters 1233 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1234 400
penalty weights 10000.0
args.step pgd_anneal_iters 1234 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1235 400
penalty weights 10000.0
args.step pgd_anneal_iters 1235 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1236 400
penalty weights 10000.0
args.step pgd_anneal_iters 1236 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1237 400
penalty weights 10000.0
args.step pgd_anneal_iters 1237 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1238 400
penalty weights 10000.0
args.step pgd_anneal_iters 1238 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1239 400
penalty weights 10000.0
args.step pgd_anneal_iters 1239 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1240 400
penalty weights 10000.0
args.step pgd_anneal_iters 1240 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1241 400
penalty weights 10000.0
args.step pgd_anneal_iters 1241 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1242 400
penalty weights 10000.0
args.step pgd_anneal_iters 1242 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1243 400
penalty weights 10000.0
args.step pgd_anneal_iters 1243 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1244 400
penalty weights 10000.0
args.step pgd_anneal_iters 1244 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1245 400
penalty weights 10000.0
args.step pgd_anneal_iters 1245 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1246 400
penalty weights 10000.0
args.step pgd_anneal_iters 1246 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1247 400
penalty weights 10000.0
args.step pgd_anneal_iters 1247 600
dim_v 512
Epoch: [47][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.15 (  0.15)	train_acc   0.48 (  0.49)	train_minacc   0.14 (  0.32)	train_majacc   0.52 (  0.51)	train_corr   0.00 (  0.00)	l1 6.9458 (6.9452)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.15it/s] 19%|#9        | 5/26 [00:00<00:00, 25.05it/s]                                               19%|#9        | 5/26 [00:00<00:00, 25.05it/s] 42%|####2     | 11/26 [00:00<00:00, 39.53it/s] 62%|######1   | 16/26 [00:00<00:00, 41.30it/s]                                                62%|######1   | 16/26 [00:00<00:00, 41.30it/s] 85%|########4 | 22/26 [00:00<00:00, 47.16it/s]100%|##########| 26/26 [00:00<00:00, 38.86it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.46 (  0.46)	test_minacc   0.28 (  0.28)	test_majacc   0.50 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.46 (  0.46)	test_minacc_d   0.28 (  0.28)	test_majacc_d   0.50 (  0.50)	test_corr_d   0.03 (  0.03)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.47 (  0.48)	test_minacc   0.29 (  0.33)	test_majacc   0.51 (  0.52)	Loss_d 0.693 (0.693)	test_acc_d   0.47 (  0.48)	test_minacc_d   0.29 (  0.33)	test_majacc_d   0.51 (  0.52)	test_corr_d   0.04 (  0.03)
Test: [  20/  26]	Loss 0.692 (0.693)	test_acc   0.50 (  0.49)	test_minacc   0.40 (  0.34)	test_majacc   0.52 (  0.51)	Loss_d 0.692 (0.693)	test_acc_d   0.50 (  0.49)	test_minacc_d   0.40 (  0.34)	test_majacc_d   0.52 (  0.51)	test_corr_d  -0.01 (  0.03)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.48 (  0.49)	test_minacc   0.14 (  0.33)	test_majacc   0.52 (  0.52)	Loss_d 0.693 (0.693)	test_acc_d   0.48 (  0.49)	test_minacc_d   0.14 (  0.33)	test_majacc_d   0.52 (  0.52)	test_corr_d   0.07 (  0.03)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 65.79it/s]
Test: [  0/  1]	Loss 0.694 (0.694)	test_acc   0.36 (  0.36)	test_minacc   0.34 (  0.34)	test_majacc   0.53 (  0.53)	Loss_d 0.694 (0.694)	test_acc_d   0.36 (  0.36)	test_minacc_d   0.34 (  0.34)	test_majacc_d   0.53 (  0.53)	test_corr_d   0.06 (  0.06)
Test: [  1/  1]	Loss 0.694 (0.694)	test_acc   0.36 (  0.36)	test_minacc   0.34 (  0.34)	test_majacc   0.53 (  0.53)	Loss_d 0.694 (0.694)	test_acc_d   0.36 (  0.36)	test_minacc_d   0.34 (  0.34)	test_majacc_d   0.53 (  0.53)	test_corr_d   0.06 (  0.06)
Overall Timing[ 47/  1]	epoch_time 0.0371 (0.0379)	validation_time 0.0003 (0.0005)	train_time 0.0368 (0.0372)
record: (train_acc, test_acc) (0.6095000122785568, 0.6620000600814819)
last accs (train_acc, test_acc) (0.4863000068664551, 0.35500001907348633)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 16.02it/s] 23%|##3       | 6/26 [00:00<00:00, 25.92it/s] 38%|###8      | 10/26 [00:00<00:00, 30.17it/s] 54%|#####3    | 14/26 [00:00<00:00, 32.39it/s] 69%|######9   | 18/26 [00:00<00:00, 33.80it/s] 85%|########4 | 22/26 [00:00<00:00, 34.65it/s]100%|##########| 26/26 [00:00<00:00, 34.70it/s]100%|##########| 26/26 [00:00<00:00, 30.03it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1248 400
penalty weights 10000.0
args.step pgd_anneal_iters 1248 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1249 400
penalty weights 10000.0
args.step pgd_anneal_iters 1249 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1250 400
penalty weights 10000.0
args.step pgd_anneal_iters 1250 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1251 400
penalty weights 10000.0
args.step pgd_anneal_iters 1251 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1252 400
penalty weights 10000.0
args.step pgd_anneal_iters 1252 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1253 400
penalty weights 10000.0
args.step pgd_anneal_iters 1253 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1254 400
penalty weights 10000.0
args.step pgd_anneal_iters 1254 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1255 400
penalty weights 10000.0
args.step pgd_anneal_iters 1255 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1256 400
penalty weights 10000.0
args.step pgd_anneal_iters 1256 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1257 400
penalty weights 10000.0
args.step pgd_anneal_iters 1257 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1258 400
penalty weights 10000.0
args.step pgd_anneal_iters 1258 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1259 400
penalty weights 10000.0
args.step pgd_anneal_iters 1259 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1260 400
penalty weights 10000.0
args.step pgd_anneal_iters 1260 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1261 400
penalty weights 10000.0
args.step pgd_anneal_iters 1261 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1262 400
penalty weights 10000.0
args.step pgd_anneal_iters 1262 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1263 400
penalty weights 10000.0
args.step pgd_anneal_iters 1263 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1264 400
penalty weights 10000.0
args.step pgd_anneal_iters 1264 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1265 400
penalty weights 10000.0
args.step pgd_anneal_iters 1265 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1266 400
penalty weights 10000.0
args.step pgd_anneal_iters 1266 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1267 400
penalty weights 10000.0
args.step pgd_anneal_iters 1267 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1268 400
penalty weights 10000.0
args.step pgd_anneal_iters 1268 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1269 400
penalty weights 10000.0
args.step pgd_anneal_iters 1269 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1270 400
penalty weights 10000.0
args.step pgd_anneal_iters 1270 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1271 400
penalty weights 10000.0
args.step pgd_anneal_iters 1271 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1272 400
penalty weights 10000.0
args.step pgd_anneal_iters 1272 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1273 400
penalty weights 10000.0
args.step pgd_anneal_iters 1273 600
dim_v 512
Epoch: [48][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.15 (  0.15)	train_acc   0.47 (  0.48)	train_minacc   0.14 (  0.33)	train_majacc   0.52 (  0.51)	train_corr   0.00 (  0.00)	l1 6.9469 (6.9463)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.44it/s] 27%|##6       | 7/26 [00:00<00:00, 35.16it/s]                                               27%|##6       | 7/26 [00:00<00:00, 35.16it/s] 46%|####6     | 12/26 [00:00<00:00, 40.45it/s] 65%|######5   | 17/26 [00:00<00:00, 43.18it/s]                                                65%|######5   | 17/26 [00:00<00:00, 43.18it/s] 88%|########8 | 23/26 [00:00<00:00, 48.17it/s]100%|##########| 26/26 [00:00<00:00, 38.96it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.46 (  0.46)	test_minacc   0.28 (  0.28)	test_majacc   0.50 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.46 (  0.46)	test_minacc_d   0.28 (  0.28)	test_majacc_d   0.50 (  0.50)	test_corr_d   0.03 (  0.03)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.47 (  0.49)	test_minacc   0.29 (  0.33)	test_majacc   0.50 (  0.52)	Loss_d 0.693 (0.693)	test_acc_d   0.47 (  0.49)	test_minacc_d   0.29 (  0.33)	test_majacc_d   0.50 (  0.52)	test_corr_d   0.04 (  0.03)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.50 (  0.49)	test_minacc   0.38 (  0.34)	test_majacc   0.52 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.49)	test_minacc_d   0.38 (  0.34)	test_majacc_d   0.52 (  0.51)	test_corr_d  -0.01 (  0.03)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.48 (  0.49)	test_minacc   0.14 (  0.33)	test_majacc   0.52 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.48 (  0.49)	test_minacc_d   0.14 (  0.33)	test_majacc_d   0.52 (  0.51)	test_corr_d   0.07 (  0.03)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.05it/s]
Test: [  0/  1]	Loss 0.694 (0.694)	test_acc   0.35 (  0.35)	test_minacc   0.33 (  0.33)	test_majacc   0.53 (  0.53)	Loss_d 0.694 (0.694)	test_acc_d   0.35 (  0.35)	test_minacc_d   0.33 (  0.33)	test_majacc_d   0.53 (  0.53)	test_corr_d   0.06 (  0.06)
Test: [  1/  1]	Loss 0.694 (0.694)	test_acc   0.35 (  0.35)	test_minacc   0.33 (  0.33)	test_majacc   0.53 (  0.53)	Loss_d 0.694 (0.694)	test_acc_d   0.35 (  0.35)	test_minacc_d   0.33 (  0.33)	test_majacc_d   0.53 (  0.53)	test_corr_d   0.06 (  0.06)
Overall Timing[ 48/  1]	epoch_time 0.0378 (0.0379)	validation_time 0.0004 (0.0005)	train_time 0.0373 (0.0372)
record: (train_acc, test_acc) (0.6095000122785568, 0.6620000600814819)
last accs (train_acc, test_acc) (0.4862000103592873, 0.3460000157356262)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.73it/s] 19%|#9        | 5/26 [00:00<00:00, 21.36it/s] 35%|###4      | 9/26 [00:00<00:00, 26.94it/s] 50%|#####     | 13/26 [00:00<00:00, 30.32it/s] 65%|######5   | 17/26 [00:00<00:00, 31.69it/s] 81%|########  | 21/26 [00:00<00:00, 32.71it/s] 96%|#########6| 25/26 [00:00<00:00, 33.20it/s]100%|##########| 26/26 [00:00<00:00, 27.97it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1274 400
penalty weights 10000.0
args.step pgd_anneal_iters 1274 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1275 400
penalty weights 10000.0
args.step pgd_anneal_iters 1275 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1276 400
penalty weights 10000.0
args.step pgd_anneal_iters 1276 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1277 400
penalty weights 10000.0
args.step pgd_anneal_iters 1277 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1278 400
penalty weights 10000.0
args.step pgd_anneal_iters 1278 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1279 400
penalty weights 10000.0
args.step pgd_anneal_iters 1279 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1280 400
penalty weights 10000.0
args.step pgd_anneal_iters 1280 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1281 400
penalty weights 10000.0
args.step pgd_anneal_iters 1281 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1282 400
penalty weights 10000.0
args.step pgd_anneal_iters 1282 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1283 400
penalty weights 10000.0
args.step pgd_anneal_iters 1283 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1284 400
penalty weights 10000.0
args.step pgd_anneal_iters 1284 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1285 400
penalty weights 10000.0
args.step pgd_anneal_iters 1285 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1286 400
penalty weights 10000.0
args.step pgd_anneal_iters 1286 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1287 400
penalty weights 10000.0
args.step pgd_anneal_iters 1287 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1288 400
penalty weights 10000.0
args.step pgd_anneal_iters 1288 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1289 400
penalty weights 10000.0
args.step pgd_anneal_iters 1289 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1290 400
penalty weights 10000.0
args.step pgd_anneal_iters 1290 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1291 400
penalty weights 10000.0
args.step pgd_anneal_iters 1291 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1292 400
penalty weights 10000.0
args.step pgd_anneal_iters 1292 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1293 400
penalty weights 10000.0
args.step pgd_anneal_iters 1293 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1294 400
penalty weights 10000.0
args.step pgd_anneal_iters 1294 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1295 400
penalty weights 10000.0
args.step pgd_anneal_iters 1295 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1296 400
penalty weights 10000.0
args.step pgd_anneal_iters 1296 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1297 400
penalty weights 10000.0
args.step pgd_anneal_iters 1297 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1298 400
penalty weights 10000.0
args.step pgd_anneal_iters 1298 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1299 400
penalty weights 10000.0
args.step pgd_anneal_iters 1299 600
dim_v 512
Epoch: [49][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.15 (  0.15)	train_acc   0.48 (  0.48)	train_minacc   0.14 (  0.32)	train_majacc   0.52 (  0.51)	train_corr   0.00 (  0.00)	l1 6.9479 (6.9474)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 18.37it/s] 19%|#9        | 5/26 [00:00<00:00, 24.49it/s]                                               19%|#9        | 5/26 [00:00<00:00, 24.49it/s] 42%|####2     | 11/26 [00:00<00:00, 38.59it/s] 62%|######1   | 16/26 [00:00<00:00, 41.41it/s]                                                62%|######1   | 16/26 [00:00<00:00, 41.41it/s] 85%|########4 | 22/26 [00:00<00:00, 47.39it/s]100%|##########| 26/26 [00:00<00:00, 39.00it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.46 (  0.46)	test_minacc   0.28 (  0.28)	test_majacc   0.49 (  0.49)	Loss_d 0.693 (0.693)	test_acc_d   0.46 (  0.46)	test_minacc_d   0.28 (  0.28)	test_majacc_d   0.49 (  0.49)	test_corr_d   0.03 (  0.03)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.47 (  0.49)	test_minacc   0.25 (  0.33)	test_majacc   0.50 (  0.52)	Loss_d 0.693 (0.693)	test_acc_d   0.47 (  0.49)	test_minacc_d   0.25 (  0.33)	test_majacc_d   0.50 (  0.52)	test_corr_d   0.04 (  0.03)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.49 (  0.49)	test_minacc   0.38 (  0.33)	test_majacc   0.51 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.38 (  0.33)	test_majacc_d   0.51 (  0.51)	test_corr_d  -0.01 (  0.03)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.48 (  0.48)	test_minacc   0.14 (  0.32)	test_majacc   0.52 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.48 (  0.48)	test_minacc_d   0.14 (  0.32)	test_majacc_d   0.52 (  0.51)	test_corr_d   0.07 (  0.03)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 65.88it/s]
Test: [  0/  1]	Loss 0.694 (0.694)	test_acc   0.35 (  0.35)	test_minacc   0.32 (  0.32)	test_majacc   0.53 (  0.53)	Loss_d 0.694 (0.694)	test_acc_d   0.35 (  0.35)	test_minacc_d   0.32 (  0.32)	test_majacc_d   0.53 (  0.53)	test_corr_d   0.05 (  0.05)
Test: [  1/  1]	Loss 0.694 (0.694)	test_acc   0.35 (  0.35)	test_minacc   0.32 (  0.32)	test_majacc   0.53 (  0.53)	Loss_d 0.694 (0.694)	test_acc_d   0.35 (  0.35)	test_minacc_d   0.32 (  0.32)	test_majacc_d   0.53 (  0.53)	test_corr_d   0.05 (  0.05)
Overall Timing[ 49/  1]	epoch_time 0.0381 (0.0379)	validation_time 0.0004 (0.0005)	train_time 0.0376 (0.0372)
record: (train_acc, test_acc) (0.6095000122785568, 0.6620000600814819)
last accs (train_acc, test_acc) (0.48480001160502434, 0.3450000286102295)
done saving aggregate.csv to ./aggregate.csv
wandb: - 0.094 MB of 0.094 MB uploadedwandb: \ 0.094 MB of 0.094 MB uploadedwandb: | 0.094 MB of 0.094 MB uploadedwandb: / 0.094 MB of 0.094 MB uploadedwandb: - 0.116 MB of 0.116 MB uploaded (0.003 MB deduped)wandb: 
wandb: Run history:
wandb:                                                                           global_step ▁▁▁▁▂▂▂▂▂▃▃▃▃▃▃▄▄▄▄▄▅▅▅▅▅▅▆▆▆▆▆▆▇▇▇▇▇███
wandb:      resnet18-usc-unsigned/baseline/prune_rate=1.0/30/logs/diagnostics/epoch_time_val █▁▂▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▂▂▁▁▁▁▁▁▁▁▁▁▂▁▁▁▁▁▁▁▁▂
wandb:      resnet18-usc-unsigned/baseline/prune_rate=1.0/30/logs/diagnostics/train_time_val █▂▂▂▂▁▁▁▁▁▁▁▁▁▂▂▁▁▂▃▂▂▂▂▁▂▁▁▂▁▂▁▁▂▁▁▂▂▂▂
wandb: resnet18-usc-unsigned/baseline/prune_rate=1.0/30/logs/diagnostics/validation_time_val █▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:                     resnet18-usc-unsigned/baseline/prune_rate=1.0/30/logs/global_step ▁▁▁▁▂▂▂▂▂▃▃▃▃▃▃▄▄▄▄▄▅▅▅▅▅▅▆▆▆▆▆▆▇▇▇▇▇███
wandb:                   resnet18-usc-unsigned/baseline/prune_rate=1.0/30/logs/test/Loss_avg ▅█▆▇▆▇▆▇▇▅▆▆▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:                 resnet18-usc-unsigned/baseline/prune_rate=1.0/30/logs/test/Loss_d_avg ▅█▆▇▆▇▆▇▇▅▆▆▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:                 resnet18-usc-unsigned/baseline/prune_rate=1.0/30/logs/test/Loss_d_val ▅█▆▇▆▇▆▇▇▅▆▆▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:                   resnet18-usc-unsigned/baseline/prune_rate=1.0/30/logs/test/Loss_val ▅█▆▇▆▇▆▇▇▅▆▆▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:               resnet18-usc-unsigned/baseline/prune_rate=1.0/30/logs/test/test_acc_avg ▁▁▁▁▂▁▂▂▂▄▃▂█▆▆▇███▆▆▆▆▆▆▆▆▆▆▅▅▅▄▄▄▄▄▄▄▄
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/30/logs/test/test_acc_d_avg ▁▁▁▁▂▁▂▂▂▄▃▂█▆▆▇███▆▆▆▆▆▆▆▆▆▆▅▅▅▄▄▄▄▄▄▄▄
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/30/logs/test/test_acc_d_val ▁▁▁▁▂▁▂▂▂▄▃▂█▆▆▇███▆▆▆▆▆▆▆▆▆▆▅▅▅▄▄▄▄▄▄▄▄
wandb:               resnet18-usc-unsigned/baseline/prune_rate=1.0/30/logs/test/test_acc_val ▁▁▁▁▂▁▂▂▂▄▃▂█▆▆▇███▆▆▆▆▆▆▆▆▆▆▅▅▅▄▄▄▄▄▄▄▄
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/30/logs/test/test_corr_d_avg ████▇█▇█▇▆▇▇▁▂▁▂▁▁▁▁▂▂▂▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/30/logs/test/test_corr_d_val ████▇█▇█▇▆▇▇▁▂▁▂▁▁▁▁▂▂▂▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/30/logs/test/test_majacc_avg █████████▇██▃▂▁▂▃▃▃▁▁▁▁▁▁▁▁▁▁▁▁▂▂▂▂▂▂▂▂▂
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/30/logs/test/test_majacc_d_avg █████████▇██▃▂▁▂▃▃▃▁▁▁▁▁▁▁▁▁▁▁▁▂▂▂▂▂▂▂▂▂
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/30/logs/test/test_majacc_d_val █████████▇██▃▂▁▂▃▃▃▁▁▁▁▁▁▁▁▁▁▁▁▂▂▂▂▂▂▂▂▂
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/30/logs/test/test_majacc_val █████████▇██▃▂▁▂▃▃▃▁▁▁▁▁▁▁▁▁▁▁▁▂▂▂▂▂▂▂▂▂
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/30/logs/test/test_minacc_avg ▁▁▁▁▂▁▂▂▂▄▂▂█▇▆▇███▆▆▆▆▆▆▆▆▆▆▆▅▅▅▅▅▅▅▄▄▄
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/30/logs/test/test_minacc_d_avg ▁▁▁▁▂▁▂▂▂▄▂▂█▇▆▇███▆▆▆▆▆▆▆▆▆▆▆▅▅▅▅▅▅▅▄▄▄
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/30/logs/test/test_minacc_d_val ▁▁▁▁▂▁▂▂▂▄▂▂█▇▆▇███▆▆▆▆▆▆▆▆▆▆▆▅▅▅▅▅▅▅▄▄▄
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/30/logs/test/test_minacc_val ▁▁▁▁▂▁▂▂▂▄▂▂█▇▆▇███▆▆▆▆▆▆▆▆▆▆▆▅▅▅▅▅▅▅▄▄▄
wandb:                  resnet18-usc-unsigned/baseline/prune_rate=1.0/30/logs/train/Loss_avg █▅▃▂▂▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:                  resnet18-usc-unsigned/baseline/prune_rate=1.0/30/logs/train/Loss_val █▅▃▂▂▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:                    resnet18-usc-unsigned/baseline/prune_rate=1.0/30/logs/train/l1_avg ▂▂▂▁▁▁▂▃▅▆▆▇███████▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:                    resnet18-usc-unsigned/baseline/prune_rate=1.0/30/logs/train/l1_val ▂▂▁▁▁▁▂▃▅▆▇████████▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/30/logs/train/train_acc_avg ▇███████████▆▂▂▂▂▂▂▁▁▁▁▁▁▁▁▁▁▁▂▂▁▁▁▁▁▁▁▁
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/30/logs/train/train_acc_val ▇▇▇▇▇▇█▇▇██▇▃▂▂▂▁▁▁▁▁▁▁▁▁▁▁▁▁▂▂▂▂▂▁▁▁▁▁▁
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/30/logs/train/train_corr_avg ▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/30/logs/train/train_corr_val ▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/30/logs/train/train_majacc_avg ▇███████████▅▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▂▂▂▂▂▁▁▁▁▁
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/30/logs/train/train_majacc_val █████████▇▇█▃▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▂▃▃▂▂▂▂▂▂▂▂
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/30/logs/train/train_minacc_avg ▂▁▁▂▂▂▃▃▃▃▄▄▆█▇▇███▇▆▆▆▆▆▆▆▆▆▆▅▅▅▅▅▅▅▄▄▄
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/30/logs/train/train_minacc_val ▁▁▁▁▁▁▃▁▂█▅▂▇▆▆▇▇▇▆▆▆▆▆▆▆▆▆▆▅▄▃▃▃▂▂▃▂▂▂▂
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/30/logs/train/train_nll_avg ▅▃▂▂▂▂▁▁▁▁▁▁▄▇██████████████████████████
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/30/logs/train/train_nll_val ▃▂▂▂▁▁▁▁▁▁▁▁▇███████████████████████████
wandb:         resnet18-usc-unsigned/baseline/prune_rate=1.0/30/logs/train/train_penalty_avg █▃▃▃▂▂▂▂▂▂▂▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:         resnet18-usc-unsigned/baseline/prune_rate=1.0/30/logs/train/train_penalty_val ███▆▅▅▃▅▄▃▃▃▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:           resnet18-usc-unsigned/baseline/prune_rate=1.0/30/logs/train/weight_norm_avg █▅▃▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:           resnet18-usc-unsigned/baseline/prune_rate=1.0/30/logs/train/weight_norm_val █▅▃▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb: 
wandb: Run summary:
wandb:                                                                           global_step 49
wandb:      resnet18-usc-unsigned/baseline/prune_rate=1.0/30/logs/diagnostics/epoch_time_val 0.03805
wandb:      resnet18-usc-unsigned/baseline/prune_rate=1.0/30/logs/diagnostics/train_time_val 0.03763
wandb: resnet18-usc-unsigned/baseline/prune_rate=1.0/30/logs/diagnostics/validation_time_val 0.0004
wandb:                     resnet18-usc-unsigned/baseline/prune_rate=1.0/30/logs/global_step 49
wandb:                   resnet18-usc-unsigned/baseline/prune_rate=1.0/30/logs/test/Loss_avg 0.69369
wandb:                 resnet18-usc-unsigned/baseline/prune_rate=1.0/30/logs/test/Loss_d_avg 0.69369
wandb:                 resnet18-usc-unsigned/baseline/prune_rate=1.0/30/logs/test/Loss_d_val 0.69369
wandb:                   resnet18-usc-unsigned/baseline/prune_rate=1.0/30/logs/test/Loss_val 0.69369
wandb:               resnet18-usc-unsigned/baseline/prune_rate=1.0/30/logs/test/test_acc_avg 0.345
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/30/logs/test/test_acc_d_avg 0.345
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/30/logs/test/test_acc_d_val 0.345
wandb:               resnet18-usc-unsigned/baseline/prune_rate=1.0/30/logs/test/test_acc_val 0.345
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/30/logs/test/test_corr_d_avg 0.05443
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/30/logs/test/test_corr_d_val 0.05443
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/30/logs/test/test_majacc_avg 0.53
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/30/logs/test/test_majacc_d_avg 0.53
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/30/logs/test/test_majacc_d_val 0.53
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/30/logs/test/test_majacc_val 0.53
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/30/logs/test/test_minacc_avg 0.32444
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/30/logs/test/test_minacc_d_avg 0.32444
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/30/logs/test/test_minacc_d_val 0.32444
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/30/logs/test/test_minacc_val 0.32444
wandb:                  resnet18-usc-unsigned/baseline/prune_rate=1.0/30/logs/train/Loss_avg 8e-05
wandb:                  resnet18-usc-unsigned/baseline/prune_rate=1.0/30/logs/train/Loss_val 8e-05
wandb:                    resnet18-usc-unsigned/baseline/prune_rate=1.0/30/logs/train/l1_avg 6.94738
wandb:                    resnet18-usc-unsigned/baseline/prune_rate=1.0/30/logs/train/l1_val 6.94787
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/30/logs/train/train_acc_avg 0.4836
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/30/logs/train/train_acc_val 0.476
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/30/logs/train/train_corr_avg 0.0
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/30/logs/train/train_corr_val 0.0
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/30/logs/train/train_majacc_avg 0.51223
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/30/logs/train/train_majacc_val 0.52036
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/30/logs/train/train_minacc_avg 0.3241
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/30/logs/train/train_minacc_val 0.13793
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/30/logs/train/train_nll_avg 0.69308
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/30/logs/train/train_nll_val 0.69337
wandb:         resnet18-usc-unsigned/baseline/prune_rate=1.0/30/logs/train/train_penalty_avg 0.0
wandb:         resnet18-usc-unsigned/baseline/prune_rate=1.0/30/logs/train/train_penalty_val 0.0
wandb:           resnet18-usc-unsigned/baseline/prune_rate=1.0/30/logs/train/weight_norm_avg 0.14887
wandb:           resnet18-usc-unsigned/baseline/prune_rate=1.0/30/logs/train/weight_norm_val 0.14876
wandb: 
wandb: 🚀 View run name_random at: https://wandb.ai/janezdu-uiuc/irm/runs/s7waqt0n
wandb: ⭐️ View project at: https://wandb.ai/janezdu-uiuc/irm
wandb: Synced 5 W&B file(s), 0 media file(s), 2 artifact file(s) and 1 other file(s)
wandb: Find logs at: ./wandb/run-20240906_150133-s7waqt0n/logs
wandb: WARNING The new W&B backend becomes opt-out in version 0.18.0; try it out with `wandb.require("core")`! See https://wandb.me/wandb-core for more information.
wandb: Currently logged in as: janezdu (janezdu-uiuc). Use `wandb login --relogin` to force relogin
wandb: wandb version 0.17.9 is available!  To upgrade, please run:
wandb:  $ pip install wandb --upgrade
wandb: Tracking run with wandb version 0.17.7
wandb: Run data is saved locally in /scratch/users/zd16/sparseIRM-resnet-ver/wandb/run-20240906_150403-oe9kzqg8
wandb: Run `wandb offline` to turn off syncing.
wandb: Syncing run name_random
wandb: ⭐️ View project at https://wandb.ai/janezdu-uiuc/irm
wandb: 🚀 View run at https://wandb.ai/janezdu-uiuc/irm/runs/oe9kzqg8
=> Reading YAML config from configs/smallscale/resnet18/resnet18-usc-unsigned.yaml
Namespace(data='dataset/', optimizer='adam', weight_opt='adam', set='mnistcifar', arch='ResNet18', config='configs/smallscale/resnet18/resnet18-usc-unsigned.yaml', log_dir=None, workers=4, epochs=50, start_epoch=None, batch_size=390, lr=0.006, warmup_length=0, momentum=0.9, weight_decay=0.0, print_freq=10, num_classes=1, resume='', resume_train_weights='', evaluate=False, pretrained=None, pretrained_distill=None, alpha_distill=0.95, T_distill=2, seed=0, multigpu=[0], lr_policy='cosine_lr', lr_adjust=30, lr_gamma=0.1, name='baseline', save_every=-1, prune_rate=1.0, param_prune_rate=0.0, pr_start=1.0, low_data=1, width_mult=1.0, nesterov=False, threetimes=False, random_subnet=False, one_batch=False, conv_type='DenseConv', freeze_weights=False, st=False, mode='fan_in', nonlinearity='relu', bn_type='LearnedBatchNorm', init='kaiming_normal', no_bn_decay=False, scale_fan=False, first_layer_dense=False, last_layer_dense=True, approx=False, zero=False, flip=False, bs=False, gumbel_sample=False, multiply_prob=False, no_multiply=False, multiply_cont=False, multiply_prob_bs=False, indiv=False, label_smoothing=None, first_layer_type=None, trainer='default', score_init_constant=1.0, K=1, update_freq=20, D=0.01, T=1, TA=True, TA2=False, TA_grow=False, center=False, straight_through=False, PLA_factor=0.1, PLA_patience=10, gradient_loss_para=0, abs_loss_para=0, thres=0.9, runs_name='name_random', resume_compare_loss1='', resume_compare_loss2='', init_weights='', trained_mask='', weight_rescaling=False, constrain_by_layer=False, weight_rescaling_data=False, use_running_stats=False, not_clipping=False, rescaling_para=False, lasso_para=0, dont_freeze_weights=False, iterative=True, prob_by_weight=False, rescale_at_fix_subnet=False, train_weights_at_the_same_time=False, sample_from_training_set=False, load_true_para=False, distill=False, finetune=False, stablize=False, prev_best=0, weight_opt_lr=0.0006, n=500, ts=0.28, te=0.6, d=20000, s=80, c=0.75, init_prob=False, thres_before=0.001, wide_ratio=0.001, noise=1, cal_p_q=False, just_finetune=False, snip=False, envs_num=2, l2_regularizer_weight=0.001, data_num=50000, env_type='linear', irm_type='irmv1', hidden_dim=390, penalty_anneal_iters=400, penalty_weight=10000.0, grayscale_model=0, weight_lr_schedule=False, fix_subnet=False, freeze_weight=False, step='ours', prior_sd_coef=0, dim_inv=2, variance_gamma=1.0, dim_spu=10, image_scale=32, cons_ratio='0.999_0.7_0.1', noise_ratio=0.2, step_gamma=0.1, step_round=3, inner_steps=1, use_pgd=True, z=9.0, pgd_anneal_iters=600)
=> Creating model 'ResNet18'
Here!!!!!!!!
==> Conv Type: DenseConv
==> BN Type: LearnedBatchNorm
<class 'torch.nn.modules.conv.Conv2d'>
<class 'torch.nn.modules.batchnorm.BatchNorm2d'>
==> Building first layer with <class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
ResNet(
  (conv1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
  (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (relu): ReLU(inplace=True)
  (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
  (layer1): Sequential(
    (0): BasicBlock(
      (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (1): BasicBlock(
      (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (layer2): Sequential(
    (0): BasicBlock(
      (conv1): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (downsample): Sequential(
        (0): Conv2d(64, 128, kernel_size=(1, 1), stride=(2, 2), bias=False)
        (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (1): BasicBlock(
      (conv1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (layer3): Sequential(
    (0): BasicBlock(
      (conv1): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (downsample): Sequential(
        (0): Conv2d(128, 256, kernel_size=(1, 1), stride=(2, 2), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (1): BasicBlock(
      (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (layer4): Sequential(
    (0): BasicBlock(
      (conv1): Conv2d(256, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (downsample): Sequential(
        (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (1): BasicBlock(
      (conv1): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (avgpool): AdaptiveAvgPool2d(output_size=1)
  (fc): Linear(in_features=512, out_features=1, bias=True)
)
=> Parallelizing on [0] gpus
<DEBUG> gradient to module.conv1.weight
<DEBUG> gradient to module.bn1.weight
<DEBUG> gradient to module.bn1.bias
<DEBUG> gradient to module.layer1.0.conv1.weight
<DEBUG> gradient to module.layer1.0.bn1.weight
<DEBUG> gradient to module.layer1.0.bn1.bias
<DEBUG> gradient to module.layer1.0.conv2.weight
<DEBUG> gradient to module.layer1.0.bn2.weight
<DEBUG> gradient to module.layer1.0.bn2.bias
<DEBUG> gradient to module.layer1.1.conv1.weight
<DEBUG> gradient to module.layer1.1.bn1.weight
<DEBUG> gradient to module.layer1.1.bn1.bias
<DEBUG> gradient to module.layer1.1.conv2.weight
<DEBUG> gradient to module.layer1.1.bn2.weight
<DEBUG> gradient to module.layer1.1.bn2.bias
<DEBUG> gradient to module.layer2.0.conv1.weight
<DEBUG> gradient to module.layer2.0.bn1.weight
<DEBUG> gradient to module.layer2.0.bn1.bias
<DEBUG> gradient to module.layer2.0.conv2.weight
<DEBUG> gradient to module.layer2.0.bn2.weight
<DEBUG> gradient to module.layer2.0.bn2.bias
<DEBUG> gradient to module.layer2.0.downsample.0.weight
<DEBUG> gradient to module.layer2.0.downsample.1.weight
<DEBUG> gradient to module.layer2.0.downsample.1.bias
<DEBUG> gradient to module.layer2.1.conv1.weight
<DEBUG> gradient to module.layer2.1.bn1.weight
<DEBUG> gradient to module.layer2.1.bn1.bias
<DEBUG> gradient to module.layer2.1.conv2.weight
<DEBUG> gradient to module.layer2.1.bn2.weight
<DEBUG> gradient to module.layer2.1.bn2.bias
<DEBUG> gradient to module.layer3.0.conv1.weight
<DEBUG> gradient to module.layer3.0.bn1.weight
<DEBUG> gradient to module.layer3.0.bn1.bias
<DEBUG> gradient to module.layer3.0.conv2.weight
<DEBUG> gradient to module.layer3.0.bn2.weight
<DEBUG> gradient to module.layer3.0.bn2.bias
<DEBUG> gradient to module.layer3.0.downsample.0.weight
<DEBUG> gradient to module.layer3.0.downsample.1.weight
<DEBUG> gradient to module.layer3.0.downsample.1.bias
<DEBUG> gradient to module.layer3.1.conv1.weight
<DEBUG> gradient to module.layer3.1.bn1.weight
<DEBUG> gradient to module.layer3.1.bn1.bias
<DEBUG> gradient to module.layer3.1.conv2.weight
<DEBUG> gradient to module.layer3.1.bn2.weight
<DEBUG> gradient to module.layer3.1.bn2.bias
<DEBUG> gradient to module.layer4.0.conv1.weight
<DEBUG> gradient to module.layer4.0.bn1.weight
<DEBUG> gradient to module.layer4.0.bn1.bias
<DEBUG> gradient to module.layer4.0.conv2.weight
<DEBUG> gradient to module.layer4.0.bn2.weight
<DEBUG> gradient to module.layer4.0.bn2.bias
<DEBUG> gradient to module.layer4.0.downsample.0.weight
<DEBUG> gradient to module.layer4.0.downsample.1.weight
<DEBUG> gradient to module.layer4.0.downsample.1.bias
<DEBUG> gradient to module.layer4.1.conv1.weight
<DEBUG> gradient to module.layer4.1.bn1.weight
<DEBUG> gradient to module.layer4.1.bn1.bias
<DEBUG> gradient to module.layer4.1.conv2.weight
<DEBUG> gradient to module.layer4.1.bn2.weight
<DEBUG> gradient to module.layer4.1.bn2.bias
<DEBUG> gradient to module.fc.weight
<DEBUG> gradient to module.fc.bias
Files already downloaded and verified
Files already downloaded and verified
Adding Noise to Label, len(Y)=12000, Label_noise=1189
Xmp (7877, 3, 32, 32) (6903, 3, 32, 32)
Xcp (5983, 3, 32, 32) (6017, 3, 32, 32)
env=0 2497 2497 3 3
xn 2500 xp 2500
env=1 1750 1750 750 750
xn 2500 xp 2500
env=2 50 50 450 450
xn 500 xp 500
=> Creating model 'EBD'
EBD(
  (embedings): Embedding(2, 1)
)
=> Parallelizing on [0] gpus
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:01<00:38,  1.52s/it] 19%|#9        | 5/26 [00:01<00:05,  3.98it/s] 35%|###4      | 9/26 [00:01<00:02,  7.83it/s] 50%|#####     | 13/26 [00:01<00:01, 11.96it/s] 65%|######5   | 17/26 [00:01<00:00, 16.19it/s] 81%|########  | 21/26 [00:02<00:00, 20.24it/s] 96%|#########6| 25/26 [00:02<00:00, 23.86it/s]100%|##########| 26/26 [00:02<00:00, 10.17it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 0 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 2 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 3 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 4 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 5 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 6 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 7 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 8 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 9 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 10 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 11 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 12 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 13 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 14 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 15 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 16 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 17 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 18 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 19 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 20 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 21 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 22 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 23 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 24 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 25 400
penalty weights 0.0
Epoch: [0][  26/  26]	Loss 9.131 (12.043)	train_nll   0.45 (  0.56)	train_penalty   0.08 (  0.33)	weight_norm   8.68 ( 11.49)	train_acc   0.83 (  0.81)	train_minacc   0.00 (  0.06)	train_majacc   0.99 (  0.95)	train_corr   0.00 (  0.00)	l1 6.9403 (8.2213)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:00, 29.47it/s] 35%|###4      | 9/26 [00:00<00:00, 39.26it/s]                                               35%|###4      | 9/26 [00:00<00:00, 39.26it/s] 58%|#####7    | 15/26 [00:00<00:00, 47.05it/s]                                                58%|#####7    | 15/26 [00:00<00:00, 47.05it/s] 81%|########  | 21/26 [00:00<00:00, 46.32it/s]100%|##########| 26/26 [00:00<00:00, 42.35it/s]
Test: [   0/  26]	Loss 0.396 (0.396)	test_acc   0.86 (  0.86)	test_minacc   0.00 (  0.00)	test_majacc   1.00 (  1.00)	Loss_d 0.396 (0.396)	test_acc_d   0.86 (  0.86)	test_minacc_d   0.00 (  0.00)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.99 (  0.99)
Test: [  10/  26]	Loss 0.386 (0.397)	test_acc   0.86 (  0.86)	test_minacc   0.02 (  0.01)	test_majacc   0.99 (  0.99)	Loss_d 0.386 (0.397)	test_acc_d   0.86 (  0.86)	test_minacc_d   0.02 (  0.01)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.97 (  0.98)
Test: [  20/  26]	Loss 0.439 (0.410)	test_acc   0.83 (  0.85)	test_minacc   0.02 (  0.01)	test_majacc   0.99 (  1.00)	Loss_d 0.439 (0.410)	test_acc_d   0.83 (  0.85)	test_minacc_d   0.02 (  0.01)	test_majacc_d   0.99 (  1.00)	test_corr_d   0.97 (  0.98)
Test: [  26/  26]	Loss 0.436 (0.413)	test_acc   0.83 (  0.85)	test_minacc   0.02 (  0.01)	test_majacc   0.99 (  1.00)	Loss_d 0.436 (0.413)	test_acc_d   0.83 (  0.85)	test_minacc_d   0.02 (  0.01)	test_majacc_d   0.99 (  1.00)	test_corr_d   0.97 (  0.98)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00,  2.56it/s]100%|##########| 1/1 [00:00<00:00,  2.55it/s]
Test: [  0/  1]	Loss 1.710 (1.710)	test_acc   0.11 (  0.11)	test_minacc   0.01 (  0.01)	test_majacc   0.97 (  0.97)	Loss_d 1.710 (1.710)	test_acc_d   0.11 (  0.11)	test_minacc_d   0.01 (  0.01)	test_majacc_d   0.97 (  0.97)	test_corr_d   0.97 (  0.97)
Test: [  1/  1]	Loss 1.710 (1.710)	test_acc   0.11 (  0.11)	test_minacc   0.01 (  0.01)	test_majacc   0.97 (  0.97)	Loss_d 1.710 (1.710)	test_acc_d   0.11 (  0.11)	test_minacc_d   0.01 (  0.01)	test_majacc_d   0.97 (  0.97)	test_corr_d   0.97 (  0.97)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/31/checkpoints/model_best.pth
Overall Timing[  0/  1]	epoch_time 0.0751 (0.0751)	validation_time 0.0067 (0.0067)	train_time 0.0624 (0.0624)
record: (train_acc, test_acc) (0.8470000232458115, 0.10700000822544098)
last accs (train_acc, test_acc) (0.8470000232458115, 0.10700000822544098)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.69it/s] 19%|#9        | 5/26 [00:00<00:01, 20.81it/s] 35%|###4      | 9/26 [00:00<00:00, 25.32it/s] 50%|#####     | 13/26 [00:00<00:00, 27.87it/s] 65%|######5   | 17/26 [00:00<00:00, 29.95it/s] 81%|########  | 21/26 [00:00<00:00, 31.06it/s] 96%|#########6| 25/26 [00:00<00:00, 31.81it/s]100%|##########| 26/26 [00:00<00:00, 26.99it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 26 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 27 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 28 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 29 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 30 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 31 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 32 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 33 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 34 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 35 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 36 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 37 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 38 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 39 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 40 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 41 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 42 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 43 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 44 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 45 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 46 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 47 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 48 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 49 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 50 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 51 400
penalty weights 0.0
Epoch: [1][  26/  26]	Loss 4.699 (6.499)	train_nll   0.42 (  0.42)	train_penalty   0.07 (  0.06)	weight_norm   4.28 (  6.08)	train_acc   0.84 (  0.84)	train_minacc   0.00 (  0.00)	train_majacc   1.00 (  0.99)	train_corr   0.00 (  0.00)	l1 5.8908 (6.4920)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.21it/s] 23%|##3       | 6/26 [00:00<00:00, 29.89it/s]                                               23%|##3       | 6/26 [00:00<00:00, 29.89it/s] 46%|####6     | 12/26 [00:00<00:00, 41.90it/s] 69%|######9   | 18/26 [00:00<00:00, 44.64it/s]                                                69%|######9   | 18/26 [00:00<00:00, 44.64it/s] 92%|#########2| 24/26 [00:00<00:00, 49.00it/s]100%|##########| 26/26 [00:00<00:00, 40.73it/s]
Test: [   0/  26]	Loss 0.383 (0.383)	test_acc   0.86 (  0.86)	test_minacc   0.00 (  0.00)	test_majacc   1.00 (  1.00)	Loss_d 0.383 (0.383)	test_acc_d   0.86 (  0.86)	test_minacc_d   0.00 (  0.00)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.99 (  0.99)
Test: [  10/  26]	Loss 0.378 (0.387)	test_acc   0.86 (  0.86)	test_minacc   0.02 (  0.01)	test_majacc   0.99 (  1.00)	Loss_d 0.378 (0.387)	test_acc_d   0.86 (  0.86)	test_minacc_d   0.02 (  0.01)	test_majacc_d   0.99 (  1.00)	test_corr_d   0.98 (  0.98)
Test: [  20/  26]	Loss 0.429 (0.400)	test_acc   0.83 (  0.85)	test_minacc   0.00 (  0.01)	test_majacc   1.00 (  1.00)	Loss_d 0.429 (0.400)	test_acc_d   0.83 (  0.85)	test_minacc_d   0.00 (  0.01)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.98 (  0.98)
Test: [  26/  26]	Loss 0.415 (0.403)	test_acc   0.84 (  0.85)	test_minacc   0.02 (  0.01)	test_majacc   1.00 (  1.00)	Loss_d 0.415 (0.403)	test_acc_d   0.84 (  0.85)	test_minacc_d   0.02 (  0.01)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.98 (  0.98)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 65.48it/s]
Test: [  0/  1]	Loss 1.844 (1.844)	test_acc   0.11 (  0.11)	test_minacc   0.01 (  0.01)	test_majacc   1.00 (  1.00)	Loss_d 1.844 (1.844)	test_acc_d   0.11 (  0.11)	test_minacc_d   0.01 (  0.01)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.98 (  0.98)
Test: [  1/  1]	Loss 1.844 (1.844)	test_acc   0.11 (  0.11)	test_minacc   0.01 (  0.01)	test_majacc   1.00 (  1.00)	Loss_d 1.844 (1.844)	test_acc_d   0.11 (  0.11)	test_minacc_d   0.01 (  0.01)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.98 (  0.98)
Overall Timing[  1/  1]	epoch_time 0.0365 (0.0558)	validation_time 0.0003 (0.0035)	train_time 0.0361 (0.0493)
record: (train_acc, test_acc) (0.8470000232458115, 0.10700000822544098)
last accs (train_acc, test_acc) (0.8489000223875046, 0.10500000417232513)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.39it/s] 19%|#9        | 5/26 [00:00<00:00, 23.44it/s] 35%|###4      | 9/26 [00:00<00:00, 28.19it/s] 50%|#####     | 13/26 [00:00<00:00, 30.23it/s] 65%|######5   | 17/26 [00:00<00:00, 31.46it/s] 81%|########  | 21/26 [00:00<00:00, 32.11it/s] 96%|#########6| 25/26 [00:00<00:00, 33.01it/s]100%|##########| 26/26 [00:00<00:00, 28.82it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 52 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 53 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 54 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 55 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 56 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 57 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 58 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 59 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 60 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 61 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 62 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 63 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 64 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 65 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 66 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 67 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 68 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 69 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 70 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 71 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 72 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 73 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 74 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 75 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 76 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 77 400
penalty weights 0.0
Epoch: [2][  26/  26]	Loss 2.938 (3.654)	train_nll   0.42 (  0.40)	train_penalty   0.05 (  0.05)	weight_norm   2.52 (  3.25)	train_acc   0.82 (  0.85)	train_minacc   0.10 (  0.03)	train_majacc   0.97 (  0.99)	train_corr   0.00 (  0.00)	l1 5.1010 (5.5596)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.56it/s] 27%|##6       | 7/26 [00:00<00:00, 31.92it/s]                                               27%|##6       | 7/26 [00:00<00:00, 31.92it/s] 50%|#####     | 13/26 [00:00<00:00, 38.46it/s] 73%|#######3  | 19/26 [00:00<00:00, 45.28it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 45.28it/s] 96%|#########6| 25/26 [00:00<00:00, 44.94it/s]100%|##########| 26/26 [00:00<00:00, 37.72it/s]
Test: [   0/  26]	Loss 0.388 (0.388)	test_acc   0.86 (  0.86)	test_minacc   0.00 (  0.00)	test_majacc   1.00 (  1.00)	Loss_d 0.388 (0.388)	test_acc_d   0.86 (  0.86)	test_minacc_d   0.00 (  0.00)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.98 (  0.98)
Test: [  10/  26]	Loss 0.373 (0.386)	test_acc   0.86 (  0.86)	test_minacc   0.04 (  0.02)	test_majacc   0.99 (  0.99)	Loss_d 0.373 (0.386)	test_acc_d   0.86 (  0.86)	test_minacc_d   0.04 (  0.02)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.97 (  0.98)
Test: [  20/  26]	Loss 0.434 (0.399)	test_acc   0.83 (  0.85)	test_minacc   0.03 (  0.02)	test_majacc   0.99 (  1.00)	Loss_d 0.434 (0.399)	test_acc_d   0.83 (  0.85)	test_minacc_d   0.03 (  0.02)	test_majacc_d   0.99 (  1.00)	test_corr_d   0.97 (  0.97)
Test: [  26/  26]	Loss 0.403 (0.401)	test_acc   0.83 (  0.85)	test_minacc   0.00 (  0.01)	test_majacc   1.00 (  1.00)	Loss_d 0.403 (0.401)	test_acc_d   0.83 (  0.85)	test_minacc_d   0.00 (  0.01)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.98 (  0.97)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.84it/s]
Test: [  0/  1]	Loss 1.839 (1.839)	test_acc   0.11 (  0.11)	test_minacc   0.01 (  0.01)	test_majacc   1.00 (  1.00)	Loss_d 1.839 (1.839)	test_acc_d   0.11 (  0.11)	test_minacc_d   0.01 (  0.01)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.97 (  0.97)
Test: [  1/  1]	Loss 1.839 (1.839)	test_acc   0.11 (  0.11)	test_minacc   0.01 (  0.01)	test_majacc   1.00 (  1.00)	Loss_d 1.839 (1.839)	test_acc_d   0.11 (  0.11)	test_minacc_d   0.01 (  0.01)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.97 (  0.97)
Overall Timing[  2/  1]	epoch_time 0.0375 (0.0497)	validation_time 0.0005 (0.0025)	train_time 0.0371 (0.0452)
record: (train_acc, test_acc) (0.8470000232458115, 0.10700000822544098)
last accs (train_acc, test_acc) (0.8475000197291375, 0.10700000822544098)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  6.03it/s] 19%|#9        | 5/26 [00:00<00:01, 18.97it/s] 35%|###4      | 9/26 [00:00<00:00, 24.86it/s] 50%|#####     | 13/26 [00:00<00:00, 28.17it/s] 65%|######5   | 17/26 [00:00<00:00, 29.90it/s] 81%|########  | 21/26 [00:00<00:00, 30.96it/s] 96%|#########6| 25/26 [00:00<00:00, 31.91it/s]100%|##########| 26/26 [00:00<00:00, 26.65it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 78 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 79 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 80 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 81 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 82 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 83 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 84 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 85 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 86 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 87 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 88 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 89 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 90 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 91 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 92 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 93 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 94 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 95 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 96 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 97 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 98 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 99 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 100 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 101 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 102 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 103 400
penalty weights 0.0
Epoch: [3][  26/  26]	Loss 1.994 (2.392)	train_nll   0.39 (  0.38)	train_penalty   0.04 (  0.04)	weight_norm   1.61 (  2.01)	train_acc   0.82 (  0.85)	train_minacc   0.02 (  0.10)	train_majacc   0.98 (  0.98)	train_corr   0.00 (  0.00)	l1 4.9022 (5.0033)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02, 10.00it/s] 27%|##6       | 7/26 [00:00<00:00, 37.25it/s]                                               27%|##6       | 7/26 [00:00<00:00, 37.25it/s] 50%|#####     | 13/26 [00:00<00:00, 43.19it/s] 73%|#######3  | 19/26 [00:00<00:00, 48.47it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 48.47it/s] 96%|#########6| 25/26 [00:00<00:00, 47.62it/s]100%|##########| 26/26 [00:00<00:00, 41.53it/s]
Test: [   0/  26]	Loss 0.345 (0.345)	test_acc   0.87 (  0.87)	test_minacc   0.18 (  0.18)	test_majacc   0.99 (  0.99)	Loss_d 0.345 (0.345)	test_acc_d   0.87 (  0.87)	test_minacc_d   0.18 (  0.18)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.93 (  0.93)
Test: [  10/  26]	Loss 0.334 (0.358)	test_acc   0.86 (  0.85)	test_minacc   0.15 (  0.14)	test_majacc   0.97 (  0.97)	Loss_d 0.334 (0.358)	test_acc_d   0.86 (  0.85)	test_minacc_d   0.15 (  0.14)	test_majacc_d   0.97 (  0.97)	test_corr_d   0.91 (  0.92)
Test: [  20/  26]	Loss 0.384 (0.362)	test_acc   0.85 (  0.85)	test_minacc   0.25 (  0.15)	test_majacc   0.97 (  0.97)	Loss_d 0.384 (0.362)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.25 (  0.15)	test_majacc_d   0.97 (  0.97)	test_corr_d   0.90 (  0.92)
Test: [  26/  26]	Loss 0.352 (0.361)	test_acc   0.84 (  0.85)	test_minacc   0.17 (  0.16)	test_majacc   0.98 (  0.97)	Loss_d 0.352 (0.361)	test_acc_d   0.84 (  0.85)	test_minacc_d   0.17 (  0.16)	test_majacc_d   0.98 (  0.97)	test_corr_d   0.91 (  0.92)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 57.25it/s]
Test: [  0/  1]	Loss 1.746 (1.746)	test_acc   0.23 (  0.23)	test_minacc   0.15 (  0.15)	test_majacc   0.95 (  0.95)	Loss_d 1.746 (1.746)	test_acc_d   0.23 (  0.23)	test_minacc_d   0.15 (  0.15)	test_majacc_d   0.95 (  0.95)	test_corr_d   0.79 (  0.79)
Test: [  1/  1]	Loss 1.746 (1.746)	test_acc   0.23 (  0.23)	test_minacc   0.15 (  0.15)	test_majacc   0.95 (  0.95)	Loss_d 1.746 (1.746)	test_acc_d   0.23 (  0.23)	test_minacc_d   0.15 (  0.15)	test_majacc_d   0.95 (  0.95)	test_corr_d   0.79 (  0.79)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/31/checkpoints/model_best.pth
Overall Timing[  3/  1]	epoch_time 0.0359 (0.0462)	validation_time 0.0007 (0.0020)	train_time 0.0352 (0.0427)
record: (train_acc, test_acc) (0.8511000259518623, 0.22700001299381256)
last accs (train_acc, test_acc) (0.8511000259518623, 0.22700001299381256)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.17it/s] 19%|#9        | 5/26 [00:00<00:00, 22.41it/s] 35%|###4      | 9/26 [00:00<00:00, 27.90it/s] 50%|#####     | 13/26 [00:00<00:00, 29.65it/s] 65%|######5   | 17/26 [00:00<00:00, 31.08it/s] 81%|########  | 21/26 [00:00<00:00, 32.27it/s] 96%|#########6| 25/26 [00:00<00:00, 32.64it/s]100%|##########| 26/26 [00:00<00:00, 28.40it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 104 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 105 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 106 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 107 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 108 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 109 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 110 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 111 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 112 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 113 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 114 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 115 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 116 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 117 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 118 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 119 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 120 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 121 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 122 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 123 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 124 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 125 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 126 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 127 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 128 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 129 400
penalty weights 0.0
Epoch: [4][  26/  26]	Loss 1.445 (1.668)	train_nll   0.37 (  0.37)	train_penalty   0.04 (  0.04)	weight_norm   1.07 (  1.30)	train_acc   0.83 (  0.85)	train_minacc   0.05 (  0.11)	train_majacc   0.98 (  0.98)	train_corr   0.00 (  0.00)	l1 5.3001 (5.1025)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.02it/s] 23%|##3       | 6/26 [00:00<00:00, 28.88it/s]                                               23%|##3       | 6/26 [00:00<00:00, 28.88it/s] 42%|####2     | 11/26 [00:00<00:00, 37.34it/s] 62%|######1   | 16/26 [00:00<00:00, 39.40it/s]                                                62%|######1   | 16/26 [00:00<00:00, 39.40it/s] 85%|########4 | 22/26 [00:00<00:00, 45.64it/s]100%|##########| 26/26 [00:00<00:00, 37.95it/s]
Test: [   0/  26]	Loss 0.327 (0.327)	test_acc   0.87 (  0.87)	test_minacc   0.11 (  0.11)	test_majacc   1.00 (  1.00)	Loss_d 0.327 (0.327)	test_acc_d   0.87 (  0.87)	test_minacc_d   0.11 (  0.11)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.94 (  0.94)
Test: [  10/  26]	Loss 0.334 (0.341)	test_acc   0.86 (  0.86)	test_minacc   0.13 (  0.09)	test_majacc   0.98 (  0.98)	Loss_d 0.334 (0.341)	test_acc_d   0.86 (  0.86)	test_minacc_d   0.13 (  0.09)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.93 (  0.94)
Test: [  20/  26]	Loss 0.385 (0.348)	test_acc   0.84 (  0.85)	test_minacc   0.16 (  0.11)	test_majacc   0.97 (  0.98)	Loss_d 0.385 (0.348)	test_acc_d   0.84 (  0.85)	test_minacc_d   0.16 (  0.11)	test_majacc_d   0.97 (  0.98)	test_corr_d   0.91 (  0.93)
Test: [  26/  26]	Loss 0.354 (0.349)	test_acc   0.84 (  0.85)	test_minacc   0.12 (  0.11)	test_majacc   0.98 (  0.98)	Loss_d 0.354 (0.349)	test_acc_d   0.84 (  0.85)	test_minacc_d   0.12 (  0.11)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.92 (  0.93)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 26.15it/s]
Test: [  0/  1]	Loss 1.753 (1.753)	test_acc   0.17 (  0.17)	test_minacc   0.08 (  0.08)	test_majacc   0.98 (  0.98)	Loss_d 1.753 (1.753)	test_acc_d   0.17 (  0.17)	test_minacc_d   0.08 (  0.08)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.85 (  0.85)
Test: [  1/  1]	Loss 1.753 (1.753)	test_acc   0.17 (  0.17)	test_minacc   0.08 (  0.08)	test_majacc   0.98 (  0.98)	Loss_d 1.753 (1.753)	test_acc_d   0.17 (  0.17)	test_minacc_d   0.08 (  0.08)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.85 (  0.85)
Overall Timing[  4/  1]	epoch_time 0.0361 (0.0442)	validation_time 0.0007 (0.0018)	train_time 0.0353 (0.0412)
record: (train_acc, test_acc) (0.8511000259518623, 0.22700001299381256)
last accs (train_acc, test_acc) (0.8530000256299972, 0.17100000381469727)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.16it/s] 19%|#9        | 5/26 [00:00<00:00, 22.66it/s] 35%|###4      | 9/26 [00:00<00:00, 27.37it/s] 50%|#####     | 13/26 [00:00<00:00, 30.33it/s] 65%|######5   | 17/26 [00:00<00:00, 31.62it/s] 81%|########  | 21/26 [00:00<00:00, 32.66it/s] 96%|#########6| 25/26 [00:00<00:00, 33.29it/s]100%|##########| 26/26 [00:00<00:00, 28.84it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 130 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 131 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 132 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 133 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 134 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 135 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 136 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 137 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 138 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 139 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 140 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 141 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 142 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 143 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 144 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 145 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 146 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 147 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 148 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 149 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 150 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 151 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 152 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 153 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 154 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 155 400
penalty weights 0.0
Epoch: [5][  26/  26]	Loss 1.071 (1.212)	train_nll   0.38 (  0.36)	train_penalty   0.04 (  0.03)	weight_norm   0.69 (  0.85)	train_acc   0.84 (  0.85)	train_minacc   0.07 (  0.14)	train_majacc   0.99 (  0.98)	train_corr   0.00 (  0.00)	l1 5.8010 (5.8170)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.74it/s] 27%|##6       | 7/26 [00:00<00:00, 34.66it/s]                                               27%|##6       | 7/26 [00:00<00:00, 34.66it/s] 50%|#####     | 13/26 [00:00<00:00, 41.50it/s] 73%|#######3  | 19/26 [00:00<00:00, 46.83it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 46.83it/s] 96%|#########6| 25/26 [00:00<00:00, 48.03it/s]100%|##########| 26/26 [00:00<00:00, 40.69it/s]
Test: [   0/  26]	Loss 0.345 (0.345)	test_acc   0.86 (  0.86)	test_minacc   0.05 (  0.05)	test_majacc   1.00 (  1.00)	Loss_d 0.345 (0.345)	test_acc_d   0.86 (  0.86)	test_minacc_d   0.05 (  0.05)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.96 (  0.96)
Test: [  10/  26]	Loss 0.330 (0.351)	test_acc   0.86 (  0.86)	test_minacc   0.04 (  0.04)	test_majacc   0.99 (  0.99)	Loss_d 0.330 (0.351)	test_acc_d   0.86 (  0.86)	test_minacc_d   0.04 (  0.04)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.95 (  0.96)
Test: [  20/  26]	Loss 0.386 (0.361)	test_acc   0.84 (  0.85)	test_minacc   0.05 (  0.04)	test_majacc   1.00 (  0.99)	Loss_d 0.386 (0.361)	test_acc_d   0.84 (  0.85)	test_minacc_d   0.05 (  0.04)	test_majacc_d   1.00 (  0.99)	test_corr_d   0.95 (  0.96)
Test: [  26/  26]	Loss 0.366 (0.362)	test_acc   0.84 (  0.85)	test_minacc   0.05 (  0.04)	test_majacc   1.00 (  0.99)	Loss_d 0.366 (0.362)	test_acc_d   0.84 (  0.85)	test_minacc_d   0.05 (  0.04)	test_majacc_d   1.00 (  0.99)	test_corr_d   0.94 (  0.95)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.56it/s]
Test: [  0/  1]	Loss 1.707 (1.707)	test_acc   0.13 (  0.13)	test_minacc   0.04 (  0.04)	test_majacc   0.99 (  0.99)	Loss_d 1.707 (1.707)	test_acc_d   0.13 (  0.13)	test_minacc_d   0.04 (  0.04)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.92 (  0.92)
Test: [  1/  1]	Loss 1.707 (1.707)	test_acc   0.13 (  0.13)	test_minacc   0.04 (  0.04)	test_majacc   0.99 (  0.99)	Loss_d 1.707 (1.707)	test_acc_d   0.13 (  0.13)	test_minacc_d   0.04 (  0.04)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.92 (  0.92)
Overall Timing[  5/  1]	epoch_time 0.0353 (0.0427)	validation_time 0.0004 (0.0015)	train_time 0.0349 (0.0402)
record: (train_acc, test_acc) (0.8511000259518623, 0.22700001299381256)
last accs (train_acc, test_acc) (0.8513000292181969, 0.13199999928474426)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 17.62it/s] 23%|##3       | 6/26 [00:00<00:00, 26.81it/s] 38%|###8      | 10/26 [00:00<00:00, 30.02it/s] 54%|#####3    | 14/26 [00:00<00:00, 32.04it/s] 69%|######9   | 18/26 [00:00<00:00, 32.82it/s] 85%|########4 | 22/26 [00:00<00:00, 33.54it/s]100%|##########| 26/26 [00:00<00:00, 33.68it/s]100%|##########| 26/26 [00:00<00:00, 30.01it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 156 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 157 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 158 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 159 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 160 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 161 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 162 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 163 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 164 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 165 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 166 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 167 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 168 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 169 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 170 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 171 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 172 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 173 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 174 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 175 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 176 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 177 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 178 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 179 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 180 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 181 400
penalty weights 0.0
Epoch: [6][  26/  26]	Loss 0.828 (0.913)	train_nll   0.37 (  0.35)	train_penalty   0.02 (  0.03)	weight_norm   0.46 (  0.56)	train_acc   0.84 (  0.85)	train_minacc   0.29 (  0.19)	train_majacc   0.95 (  0.97)	train_corr   0.00 (  0.00)	l1 7.2448 (6.7769)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.22it/s] 27%|##6       | 7/26 [00:00<00:00, 34.32it/s]                                               27%|##6       | 7/26 [00:00<00:00, 34.32it/s] 50%|#####     | 13/26 [00:00<00:00, 42.32it/s] 69%|######9   | 18/26 [00:00<00:00, 43.84it/s]                                                69%|######9   | 18/26 [00:00<00:00, 43.84it/s] 92%|#########2| 24/26 [00:00<00:00, 47.98it/s]100%|##########| 26/26 [00:00<00:00, 40.26it/s]
Test: [   0/  26]	Loss 0.326 (0.326)	test_acc   0.87 (  0.87)	test_minacc   0.14 (  0.14)	test_majacc   0.99 (  0.99)	Loss_d 0.326 (0.326)	test_acc_d   0.87 (  0.87)	test_minacc_d   0.14 (  0.14)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.94 (  0.94)
Test: [  10/  26]	Loss 0.300 (0.331)	test_acc   0.87 (  0.86)	test_minacc   0.11 (  0.09)	test_majacc   0.99 (  0.99)	Loss_d 0.300 (0.331)	test_acc_d   0.87 (  0.86)	test_minacc_d   0.11 (  0.09)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.93 (  0.94)
Test: [  20/  26]	Loss 0.354 (0.338)	test_acc   0.83 (  0.86)	test_minacc   0.12 (  0.10)	test_majacc   0.97 (  0.99)	Loss_d 0.354 (0.338)	test_acc_d   0.83 (  0.86)	test_minacc_d   0.12 (  0.10)	test_majacc_d   0.97 (  0.99)	test_corr_d   0.92 (  0.93)
Test: [  26/  26]	Loss 0.327 (0.338)	test_acc   0.85 (  0.86)	test_minacc   0.10 (  0.10)	test_majacc   1.00 (  0.99)	Loss_d 0.327 (0.338)	test_acc_d   0.85 (  0.86)	test_minacc_d   0.10 (  0.10)	test_majacc_d   1.00 (  0.99)	test_corr_d   0.93 (  0.93)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.72it/s]
Test: [  0/  1]	Loss 1.659 (1.659)	test_acc   0.18 (  0.18)	test_minacc   0.09 (  0.09)	test_majacc   0.98 (  0.98)	Loss_d 1.659 (1.659)	test_acc_d   0.18 (  0.18)	test_minacc_d   0.09 (  0.09)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.83 (  0.83)
Test: [  1/  1]	Loss 1.659 (1.659)	test_acc   0.18 (  0.18)	test_minacc   0.09 (  0.09)	test_majacc   0.98 (  0.98)	Loss_d 1.659 (1.659)	test_acc_d   0.18 (  0.18)	test_minacc_d   0.09 (  0.09)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.83 (  0.83)
Overall Timing[  6/  1]	epoch_time 0.0358 (0.0417)	validation_time 0.0004 (0.0014)	train_time 0.0353 (0.0395)
record: (train_acc, test_acc) (0.8511000259518623, 0.22700001299381256)
last accs (train_acc, test_acc) (0.856100029349327, 0.18200001120567322)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.93it/s] 19%|#9        | 5/26 [00:00<00:00, 24.77it/s] 35%|###4      | 9/26 [00:00<00:00, 29.61it/s] 50%|#####     | 13/26 [00:00<00:00, 30.92it/s] 65%|######5   | 17/26 [00:00<00:00, 31.88it/s] 81%|########  | 21/26 [00:00<00:00, 32.20it/s] 96%|#########6| 25/26 [00:00<00:00, 32.61it/s]100%|##########| 26/26 [00:00<00:00, 28.97it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 182 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 183 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 184 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 185 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 186 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 187 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 188 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 189 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 190 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 191 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 192 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 193 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 194 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 195 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 196 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 197 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 198 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 199 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 200 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 201 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 202 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 203 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 204 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 205 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 206 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 207 400
penalty weights 0.0
Epoch: [7][  26/  26]	Loss 0.691 (0.722)	train_nll   0.37 (  0.35)	train_penalty   0.02 (  0.03)	weight_norm   0.32 (  0.37)	train_acc   0.83 (  0.85)	train_minacc   0.10 (  0.17)	train_majacc   0.97 (  0.97)	train_corr   0.00 (  0.00)	l1 8.3300 (8.0536)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.69it/s] 27%|##6       | 7/26 [00:00<00:00, 33.84it/s]                                               27%|##6       | 7/26 [00:00<00:00, 33.84it/s] 46%|####6     | 12/26 [00:00<00:00, 39.11it/s] 69%|######9   | 18/26 [00:00<00:00, 45.45it/s]                                                69%|######9   | 18/26 [00:00<00:00, 45.45it/s] 88%|########8 | 23/26 [00:00<00:00, 46.77it/s]100%|##########| 26/26 [00:00<00:00, 39.49it/s]
Test: [   0/  26]	Loss 0.344 (0.344)	test_acc   0.86 (  0.86)	test_minacc   0.11 (  0.11)	test_majacc   0.98 (  0.98)	Loss_d 0.344 (0.344)	test_acc_d   0.86 (  0.86)	test_minacc_d   0.11 (  0.11)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.93 (  0.93)
Test: [  10/  26]	Loss 0.335 (0.350)	test_acc   0.86 (  0.85)	test_minacc   0.17 (  0.11)	test_majacc   0.96 (  0.97)	Loss_d 0.335 (0.350)	test_acc_d   0.86 (  0.85)	test_minacc_d   0.17 (  0.11)	test_majacc_d   0.96 (  0.97)	test_corr_d   0.91 (  0.92)
Test: [  20/  26]	Loss 0.384 (0.360)	test_acc   0.84 (  0.85)	test_minacc   0.14 (  0.12)	test_majacc   0.97 (  0.97)	Loss_d 0.384 (0.360)	test_acc_d   0.84 (  0.85)	test_minacc_d   0.14 (  0.12)	test_majacc_d   0.97 (  0.97)	test_corr_d   0.89 (  0.91)
Test: [  26/  26]	Loss 0.348 (0.360)	test_acc   0.84 (  0.84)	test_minacc   0.12 (  0.12)	test_majacc   0.98 (  0.97)	Loss_d 0.348 (0.360)	test_acc_d   0.84 (  0.84)	test_minacc_d   0.12 (  0.12)	test_majacc_d   0.98 (  0.97)	test_corr_d   0.91 (  0.91)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.62it/s]
Test: [  0/  1]	Loss 1.669 (1.669)	test_acc   0.17 (  0.17)	test_minacc   0.09 (  0.09)	test_majacc   0.93 (  0.93)	Loss_d 1.669 (1.669)	test_acc_d   0.17 (  0.17)	test_minacc_d   0.09 (  0.09)	test_majacc_d   0.93 (  0.93)	test_corr_d   0.83 (  0.83)
Test: [  1/  1]	Loss 1.669 (1.669)	test_acc   0.17 (  0.17)	test_minacc   0.09 (  0.09)	test_majacc   0.93 (  0.93)	Loss_d 1.669 (1.669)	test_acc_d   0.17 (  0.17)	test_minacc_d   0.09 (  0.09)	test_majacc_d   0.93 (  0.93)	test_corr_d   0.83 (  0.83)
Overall Timing[  7/  1]	epoch_time 0.0355 (0.0410)	validation_time 0.0003 (0.0013)	train_time 0.0351 (0.0389)
record: (train_acc, test_acc) (0.8511000259518623, 0.22700001299381256)
last accs (train_acc, test_acc) (0.8446000191569328, 0.17100000381469727)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.85it/s] 19%|#9        | 5/26 [00:00<00:01, 20.54it/s] 35%|###4      | 9/26 [00:00<00:00, 26.30it/s] 50%|#####     | 13/26 [00:00<00:00, 29.20it/s] 65%|######5   | 17/26 [00:00<00:00, 30.63it/s] 81%|########  | 21/26 [00:00<00:00, 31.79it/s] 96%|#########6| 25/26 [00:00<00:00, 32.91it/s]100%|##########| 26/26 [00:00<00:00, 27.77it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 208 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 209 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 210 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 211 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 212 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 213 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 214 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 215 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 216 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 217 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 218 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 219 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 220 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 221 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 222 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 223 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 224 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 225 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 226 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 227 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 228 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 229 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 230 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 231 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 232 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 233 400
penalty weights 0.0
Epoch: [8][  26/  26]	Loss 0.601 (0.616)	train_nll   0.35 (  0.35)	train_penalty   0.02 (  0.03)	weight_norm   0.25 (  0.27)	train_acc   0.84 (  0.85)	train_minacc   0.34 (  0.20)	train_majacc   0.93 (  0.97)	train_corr   0.00 (  0.00)	l1 10.3286 (9.5358)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.95it/s] 27%|##6       | 7/26 [00:00<00:00, 30.11it/s]                                               27%|##6       | 7/26 [00:00<00:00, 30.11it/s] 50%|#####     | 13/26 [00:00<00:00, 38.37it/s] 73%|#######3  | 19/26 [00:00<00:00, 44.59it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 44.59it/s] 96%|#########6| 25/26 [00:00<00:00, 45.97it/s]100%|##########| 26/26 [00:00<00:00, 37.92it/s]
Test: [   0/  26]	Loss 0.315 (0.315)	test_acc   0.86 (  0.86)	test_minacc   0.12 (  0.12)	test_majacc   0.99 (  0.99)	Loss_d 0.315 (0.315)	test_acc_d   0.86 (  0.86)	test_minacc_d   0.12 (  0.12)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.92 (  0.92)
Test: [  10/  26]	Loss 0.304 (0.330)	test_acc   0.86 (  0.86)	test_minacc   0.17 (  0.13)	test_majacc   0.97 (  0.98)	Loss_d 0.304 (0.330)	test_acc_d   0.86 (  0.86)	test_minacc_d   0.17 (  0.13)	test_majacc_d   0.97 (  0.98)	test_corr_d   0.92 (  0.92)
Test: [  20/  26]	Loss 0.363 (0.337)	test_acc   0.85 (  0.85)	test_minacc   0.23 (  0.13)	test_majacc   0.97 (  0.98)	Loss_d 0.363 (0.337)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.23 (  0.13)	test_majacc_d   0.97 (  0.98)	test_corr_d   0.89 (  0.91)
Test: [  26/  26]	Loss 0.326 (0.337)	test_acc   0.86 (  0.85)	test_minacc   0.27 (  0.14)	test_majacc   0.98 (  0.98)	Loss_d 0.326 (0.337)	test_acc_d   0.86 (  0.85)	test_minacc_d   0.27 (  0.14)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.90 (  0.91)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 67.35it/s]
Test: [  0/  1]	Loss 1.628 (1.628)	test_acc   0.21 (  0.21)	test_minacc   0.13 (  0.13)	test_majacc   0.94 (  0.94)	Loss_d 1.628 (1.628)	test_acc_d   0.21 (  0.21)	test_minacc_d   0.13 (  0.13)	test_majacc_d   0.94 (  0.94)	test_corr_d   0.78 (  0.78)
Test: [  1/  1]	Loss 1.628 (1.628)	test_acc   0.21 (  0.21)	test_minacc   0.13 (  0.13)	test_majacc   0.94 (  0.94)	Loss_d 1.628 (1.628)	test_acc_d   0.21 (  0.21)	test_minacc_d   0.13 (  0.13)	test_majacc_d   0.94 (  0.94)	test_corr_d   0.78 (  0.78)
Overall Timing[  8/  1]	epoch_time 0.0353 (0.0403)	validation_time 0.0003 (0.0011)	train_time 0.0350 (0.0385)
record: (train_acc, test_acc) (0.8511000259518623, 0.22700001299381256)
last accs (train_acc, test_acc) (0.8548000276088714, 0.21000000834465027)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.75it/s] 19%|#9        | 5/26 [00:00<00:00, 21.14it/s] 35%|###4      | 9/26 [00:00<00:00, 26.88it/s] 50%|#####     | 13/26 [00:00<00:00, 30.24it/s] 65%|######5   | 17/26 [00:00<00:00, 32.17it/s] 81%|########  | 21/26 [00:00<00:00, 33.37it/s] 96%|#########6| 25/26 [00:00<00:00, 34.26it/s]100%|##########| 26/26 [00:00<00:00, 28.54it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 234 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 235 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 236 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 237 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 238 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 239 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 240 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 241 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 242 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 243 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 244 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 245 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 246 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 247 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 248 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 249 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 250 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 251 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 252 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 253 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 254 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 255 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 256 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 257 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 258 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 259 400
penalty weights 0.0
Epoch: [9][  26/  26]	Loss 0.532 (0.540)	train_nll   0.35 (  0.34)	train_penalty   0.02 (  0.02)	weight_norm   0.18 (  0.20)	train_acc   0.85 (  0.86)	train_minacc   0.32 (  0.23)	train_majacc   0.95 (  0.97)	train_corr   0.00 (  0.00)	l1 12.3650 (11.6108)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 18.76it/s] 31%|###       | 8/26 [00:00<00:00, 40.57it/s]                                               31%|###       | 8/26 [00:00<00:00, 40.57it/s] 50%|#####     | 13/26 [00:00<00:00, 41.44it/s] 73%|#######3  | 19/26 [00:00<00:00, 47.80it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 47.80it/s] 96%|#########6| 25/26 [00:00<00:00, 47.68it/s]100%|##########| 26/26 [00:00<00:00, 41.71it/s]
Test: [   0/  26]	Loss 0.317 (0.317)	test_acc   0.86 (  0.86)	test_minacc   0.07 (  0.07)	test_majacc   0.99 (  0.99)	Loss_d 0.317 (0.317)	test_acc_d   0.86 (  0.86)	test_minacc_d   0.07 (  0.07)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.95 (  0.95)
Test: [  10/  26]	Loss 0.300 (0.330)	test_acc   0.87 (  0.86)	test_minacc   0.08 (  0.06)	test_majacc   1.00 (  0.99)	Loss_d 0.300 (0.330)	test_acc_d   0.87 (  0.86)	test_minacc_d   0.08 (  0.06)	test_majacc_d   1.00 (  0.99)	test_corr_d   0.95 (  0.95)
Test: [  20/  26]	Loss 0.359 (0.338)	test_acc   0.84 (  0.86)	test_minacc   0.08 (  0.07)	test_majacc   0.99 (  0.99)	Loss_d 0.359 (0.338)	test_acc_d   0.84 (  0.86)	test_minacc_d   0.08 (  0.07)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.93 (  0.94)
Test: [  26/  26]	Loss 0.342 (0.338)	test_acc   0.85 (  0.85)	test_minacc   0.10 (  0.07)	test_majacc   1.00 (  0.99)	Loss_d 0.342 (0.338)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.10 (  0.07)	test_majacc_d   1.00 (  0.99)	test_corr_d   0.94 (  0.94)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.45it/s]
Test: [  0/  1]	Loss 1.770 (1.770)	test_acc   0.18 (  0.18)	test_minacc   0.08 (  0.08)	test_majacc   0.99 (  0.99)	Loss_d 1.770 (1.770)	test_acc_d   0.18 (  0.18)	test_minacc_d   0.08 (  0.08)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.83 (  0.83)
Test: [  1/  1]	Loss 1.770 (1.770)	test_acc   0.18 (  0.18)	test_minacc   0.08 (  0.08)	test_majacc   0.99 (  0.99)	Loss_d 1.770 (1.770)	test_acc_d   0.18 (  0.18)	test_minacc_d   0.08 (  0.08)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.83 (  0.83)
Overall Timing[  9/  1]	epoch_time 0.0360 (0.0399)	validation_time 0.0004 (0.0011)	train_time 0.0356 (0.0382)
record: (train_acc, test_acc) (0.8511000259518623, 0.22700001299381256)
last accs (train_acc, test_acc) (0.8538000250458717, 0.17500001192092896)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.76it/s] 19%|#9        | 5/26 [00:00<00:00, 24.25it/s] 31%|###       | 8/26 [00:00<00:00, 26.28it/s] 46%|####6     | 12/26 [00:00<00:00, 29.90it/s] 62%|######1   | 16/26 [00:00<00:00, 31.61it/s] 77%|#######6  | 20/26 [00:00<00:00, 32.45it/s] 92%|#########2| 24/26 [00:00<00:00, 33.56it/s]100%|##########| 26/26 [00:00<00:00, 28.68it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 260 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 261 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 262 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 263 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 264 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 265 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 266 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 267 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 268 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 269 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 270 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 271 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 272 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 273 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 274 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 275 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 276 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 277 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 278 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 279 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 280 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 281 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 282 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 283 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 284 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 285 400
penalty weights 0.0
Epoch: [10][  26/  26]	Loss 0.492 (0.487)	train_nll   0.36 (  0.33)	train_penalty   0.02 (  0.02)	weight_norm   0.14 (  0.15)	train_acc   0.83 (  0.86)	train_minacc   0.37 (  0.25)	train_majacc   0.92 (  0.96)	train_corr   0.00 (  0.00)	l1 13.8135 (13.1598)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.61it/s] 27%|##6       | 7/26 [00:00<00:00, 32.07it/s]                                               27%|##6       | 7/26 [00:00<00:00, 32.07it/s] 50%|#####     | 13/26 [00:00<00:00, 38.11it/s] 73%|#######3  | 19/26 [00:00<00:00, 44.81it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 44.81it/s] 96%|#########6| 25/26 [00:00<00:00, 45.95it/s]100%|##########| 26/26 [00:00<00:00, 38.00it/s]
Test: [   0/  26]	Loss 0.328 (0.328)	test_acc   0.87 (  0.87)	test_minacc   0.16 (  0.16)	test_majacc   0.99 (  0.99)	Loss_d 0.328 (0.328)	test_acc_d   0.87 (  0.87)	test_minacc_d   0.16 (  0.16)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.94 (  0.94)
Test: [  10/  26]	Loss 0.318 (0.342)	test_acc   0.87 (  0.86)	test_minacc   0.21 (  0.11)	test_majacc   0.98 (  0.98)	Loss_d 0.318 (0.342)	test_acc_d   0.87 (  0.86)	test_minacc_d   0.21 (  0.11)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.92 (  0.93)
Test: [  20/  26]	Loss 0.371 (0.350)	test_acc   0.85 (  0.85)	test_minacc   0.20 (  0.12)	test_majacc   0.98 (  0.98)	Loss_d 0.371 (0.350)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.20 (  0.12)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.91 (  0.93)
Test: [  26/  26]	Loss 0.349 (0.350)	test_acc   0.86 (  0.85)	test_minacc   0.22 (  0.12)	test_majacc   0.98 (  0.98)	Loss_d 0.349 (0.350)	test_acc_d   0.86 (  0.85)	test_minacc_d   0.22 (  0.12)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.92 (  0.93)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.77it/s]
Test: [  0/  1]	Loss 1.751 (1.751)	test_acc   0.17 (  0.17)	test_minacc   0.08 (  0.08)	test_majacc   0.98 (  0.98)	Loss_d 1.751 (1.751)	test_acc_d   0.17 (  0.17)	test_minacc_d   0.08 (  0.08)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.85 (  0.85)
Test: [  1/  1]	Loss 1.751 (1.751)	test_acc   0.17 (  0.17)	test_minacc   0.08 (  0.08)	test_majacc   0.98 (  0.98)	Loss_d 1.751 (1.751)	test_acc_d   0.17 (  0.17)	test_minacc_d   0.08 (  0.08)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.85 (  0.85)
Overall Timing[ 10/  1]	epoch_time 0.0375 (0.0397)	validation_time 0.0003 (0.0010)	train_time 0.0372 (0.0381)
record: (train_acc, test_acc) (0.8511000259518623, 0.22700001299381256)
last accs (train_acc, test_acc) (0.8520000241994857, 0.17400000989437103)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.70it/s] 19%|#9        | 5/26 [00:00<00:01, 20.50it/s] 35%|###4      | 9/26 [00:00<00:00, 26.59it/s] 50%|#####     | 13/26 [00:00<00:00, 29.86it/s] 65%|######5   | 17/26 [00:00<00:00, 31.83it/s] 81%|########  | 21/26 [00:00<00:00, 32.74it/s] 96%|#########6| 25/26 [00:00<00:00, 33.63it/s]100%|##########| 26/26 [00:00<00:00, 28.19it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 286 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 287 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 288 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 289 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 290 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 291 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 292 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 293 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 294 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 295 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 296 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 297 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 298 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 299 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 300 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 301 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 302 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 303 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 304 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 305 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 306 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 307 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 308 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 309 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 310 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 311 400
penalty weights 0.0
Epoch: [11][  26/  26]	Loss 0.466 (0.453)	train_nll   0.35 (  0.33)	train_penalty   0.01 (  0.02)	weight_norm   0.12 (  0.12)	train_acc   0.84 (  0.86)	train_minacc   0.51 (  0.26)	train_majacc   0.90 (  0.96)	train_corr   0.00 (  0.00)	l1 15.4523 (14.6780)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:00, 26.36it/s] 35%|###4      | 9/26 [00:00<00:00, 42.15it/s]                                               35%|###4      | 9/26 [00:00<00:00, 42.15it/s] 54%|#####3    | 14/26 [00:00<00:00, 44.87it/s] 73%|#######3  | 19/26 [00:00<00:00, 45.56it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 45.56it/s] 96%|#########6| 25/26 [00:00<00:00, 49.47it/s]100%|##########| 26/26 [00:00<00:00, 42.59it/s]
Test: [   0/  26]	Loss 0.328 (0.328)	test_acc   0.87 (  0.87)	test_minacc   0.18 (  0.18)	test_majacc   0.99 (  0.99)	Loss_d 0.328 (0.328)	test_acc_d   0.87 (  0.87)	test_minacc_d   0.18 (  0.18)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.93 (  0.93)
Test: [  10/  26]	Loss 0.301 (0.334)	test_acc   0.87 (  0.86)	test_minacc   0.23 (  0.14)	test_majacc   0.97 (  0.98)	Loss_d 0.301 (0.334)	test_acc_d   0.87 (  0.86)	test_minacc_d   0.23 (  0.14)	test_majacc_d   0.97 (  0.98)	test_corr_d   0.91 (  0.92)
Test: [  20/  26]	Loss 0.363 (0.340)	test_acc   0.85 (  0.85)	test_minacc   0.20 (  0.15)	test_majacc   0.97 (  0.98)	Loss_d 0.363 (0.340)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.20 (  0.15)	test_majacc_d   0.97 (  0.98)	test_corr_d   0.91 (  0.92)
Test: [  26/  26]	Loss 0.320 (0.340)	test_acc   0.88 (  0.85)	test_minacc   0.29 (  0.16)	test_majacc   0.99 (  0.98)	Loss_d 0.320 (0.340)	test_acc_d   0.88 (  0.85)	test_minacc_d   0.29 (  0.16)	test_majacc_d   0.99 (  0.98)	test_corr_d   0.91 (  0.92)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 60.06it/s]
Test: [  0/  1]	Loss 1.722 (1.722)	test_acc   0.20 (  0.20)	test_minacc   0.11 (  0.11)	test_majacc   0.98 (  0.98)	Loss_d 1.722 (1.722)	test_acc_d   0.20 (  0.20)	test_minacc_d   0.11 (  0.11)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.82 (  0.82)
Test: [  1/  1]	Loss 1.722 (1.722)	test_acc   0.20 (  0.20)	test_minacc   0.11 (  0.11)	test_majacc   0.98 (  0.98)	Loss_d 1.722 (1.722)	test_acc_d   0.20 (  0.20)	test_minacc_d   0.11 (  0.11)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.82 (  0.82)
Overall Timing[ 11/  1]	epoch_time 0.0371 (0.0395)	validation_time 0.0006 (0.0010)	train_time 0.0365 (0.0380)
record: (train_acc, test_acc) (0.8511000259518623, 0.22700001299381256)
last accs (train_acc, test_acc) (0.8546000270843506, 0.19700001180171967)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.66it/s] 15%|#5        | 4/26 [00:00<00:01, 20.39it/s] 31%|###       | 8/26 [00:00<00:00, 26.63it/s] 46%|####6     | 12/26 [00:00<00:00, 29.60it/s] 62%|######1   | 16/26 [00:00<00:00, 31.35it/s] 77%|#######6  | 20/26 [00:00<00:00, 32.47it/s] 92%|#########2| 24/26 [00:00<00:00, 33.05it/s]100%|##########| 26/26 [00:00<00:00, 28.81it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 312 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 313 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 314 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 315 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 316 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 317 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 318 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 319 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 320 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 321 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 322 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 323 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 324 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 325 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 326 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 327 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 328 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 329 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 330 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 331 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 332 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 333 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 334 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 335 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 336 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 337 400
penalty weights 0.0
Epoch: [12][  26/  26]	Loss 0.419 (0.433)	train_nll   0.31 (  0.32)	train_penalty   0.02 (  0.02)	weight_norm   0.11 (  0.11)	train_acc   0.88 (  0.87)	train_minacc   0.44 (  0.32)	train_majacc   0.97 (  0.96)	train_corr   0.00 (  0.00)	l1 16.9931 (16.2132)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.25it/s] 27%|##6       | 7/26 [00:00<00:00, 33.86it/s]                                               27%|##6       | 7/26 [00:00<00:00, 33.86it/s] 50%|#####     | 13/26 [00:00<00:00, 39.78it/s] 73%|#######3  | 19/26 [00:00<00:00, 45.67it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 45.67it/s] 96%|#########6| 25/26 [00:00<00:00, 46.46it/s]100%|##########| 26/26 [00:00<00:00, 39.28it/s]
Test: [   0/  26]	Loss 0.305 (0.305)	test_acc   0.87 (  0.87)	test_minacc   0.27 (  0.27)	test_majacc   0.98 (  0.98)	Loss_d 0.305 (0.305)	test_acc_d   0.87 (  0.87)	test_minacc_d   0.27 (  0.27)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.89 (  0.89)
Test: [  10/  26]	Loss 0.279 (0.310)	test_acc   0.87 (  0.86)	test_minacc   0.36 (  0.25)	test_majacc   0.95 (  0.96)	Loss_d 0.279 (0.310)	test_acc_d   0.87 (  0.86)	test_minacc_d   0.36 (  0.25)	test_majacc_d   0.95 (  0.96)	test_corr_d   0.87 (  0.89)
Test: [  20/  26]	Loss 0.327 (0.310)	test_acc   0.85 (  0.86)	test_minacc   0.30 (  0.27)	test_majacc   0.96 (  0.96)	Loss_d 0.327 (0.310)	test_acc_d   0.85 (  0.86)	test_minacc_d   0.30 (  0.27)	test_majacc_d   0.96 (  0.96)	test_corr_d   0.86 (  0.88)
Test: [  26/  26]	Loss 0.286 (0.308)	test_acc   0.91 (  0.86)	test_minacc   0.51 (  0.29)	test_majacc   0.99 (  0.97)	Loss_d 0.286 (0.308)	test_acc_d   0.91 (  0.86)	test_minacc_d   0.51 (  0.29)	test_majacc_d   0.99 (  0.97)	test_corr_d   0.85 (  0.88)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.86it/s]
Test: [  0/  1]	Loss 1.551 (1.551)	test_acc   0.33 (  0.33)	test_minacc   0.26 (  0.26)	test_majacc   0.97 (  0.97)	Loss_d 1.551 (1.551)	test_acc_d   0.33 (  0.33)	test_minacc_d   0.26 (  0.26)	test_majacc_d   0.97 (  0.97)	test_corr_d   0.59 (  0.59)
Test: [  1/  1]	Loss 1.551 (1.551)	test_acc   0.33 (  0.33)	test_minacc   0.26 (  0.26)	test_majacc   0.97 (  0.97)	Loss_d 1.551 (1.551)	test_acc_d   0.33 (  0.33)	test_minacc_d   0.26 (  0.26)	test_majacc_d   0.97 (  0.97)	test_corr_d   0.59 (  0.59)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/31/checkpoints/model_best.pth
Overall Timing[ 12/  1]	epoch_time 0.0359 (0.0392)	validation_time 0.0003 (0.0009)	train_time 0.0355 (0.0378)
record: (train_acc, test_acc) (0.8642000243663788, 0.328000009059906)
last accs (train_acc, test_acc) (0.8642000243663788, 0.328000009059906)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.53it/s] 15%|#5        | 4/26 [00:00<00:01, 18.99it/s] 31%|###       | 8/26 [00:00<00:00, 25.25it/s] 46%|####6     | 12/26 [00:00<00:00, 28.51it/s] 62%|######1   | 16/26 [00:00<00:00, 30.41it/s] 77%|#######6  | 20/26 [00:00<00:00, 31.82it/s] 92%|#########2| 24/26 [00:00<00:00, 32.75it/s]100%|##########| 26/26 [00:00<00:00, 27.64it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 338 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 339 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 340 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 341 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 342 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 343 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 344 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 345 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 346 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 347 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 348 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 349 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 350 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 351 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 352 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 353 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 354 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 355 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 356 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 357 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 358 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 359 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 360 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 361 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 362 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 363 400
penalty weights 0.0
Epoch: [13][  26/  26]	Loss 0.433 (0.427)	train_nll   0.34 (  0.32)	train_penalty   0.02 (  0.02)	weight_norm   0.10 (  0.10)	train_acc   0.85 (  0.86)	train_minacc   0.39 (  0.31)	train_majacc   0.94 (  0.96)	train_corr   0.00 (  0.00)	l1 17.8918 (17.4410)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s] 15%|#5        | 4/26 [00:00<00:00, 28.46it/s] 38%|###8      | 10/26 [00:00<00:00, 43.55it/s]                                                38%|###8      | 10/26 [00:00<00:00, 43.55it/s] 62%|######1   | 16/26 [00:00<00:00, 45.11it/s]                                                62%|######1   | 16/26 [00:00<00:00, 45.11it/s] 85%|########4 | 22/26 [00:00<00:00, 49.76it/s]100%|##########| 26/26 [00:00<00:00, 43.13it/s]
Test: [   0/  26]	Loss 0.318 (0.318)	test_acc   0.88 (  0.88)	test_minacc   0.21 (  0.21)	test_majacc   0.99 (  0.99)	Loss_d 0.318 (0.318)	test_acc_d   0.88 (  0.88)	test_minacc_d   0.21 (  0.21)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.95 (  0.95)
Test: [  10/  26]	Loss 0.304 (0.327)	test_acc   0.88 (  0.86)	test_minacc   0.26 (  0.14)	test_majacc   0.98 (  0.98)	Loss_d 0.304 (0.327)	test_acc_d   0.88 (  0.86)	test_minacc_d   0.26 (  0.14)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.94 (  0.94)
Test: [  20/  26]	Loss 0.352 (0.336)	test_acc   0.86 (  0.86)	test_minacc   0.23 (  0.15)	test_majacc   0.98 (  0.98)	Loss_d 0.352 (0.336)	test_acc_d   0.86 (  0.86)	test_minacc_d   0.23 (  0.15)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.92 (  0.94)
Test: [  26/  26]	Loss 0.315 (0.335)	test_acc   0.86 (  0.86)	test_minacc   0.24 (  0.16)	test_majacc   0.99 (  0.98)	Loss_d 0.315 (0.335)	test_acc_d   0.86 (  0.86)	test_minacc_d   0.24 (  0.16)	test_majacc_d   0.99 (  0.98)	test_corr_d   0.92 (  0.94)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.47it/s]
Test: [  0/  1]	Loss 1.790 (1.790)	test_acc   0.19 (  0.19)	test_minacc   0.10 (  0.10)	test_majacc   0.98 (  0.98)	Loss_d 1.790 (1.790)	test_acc_d   0.19 (  0.19)	test_minacc_d   0.10 (  0.10)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.86 (  0.86)
Test: [  1/  1]	Loss 1.790 (1.790)	test_acc   0.19 (  0.19)	test_minacc   0.10 (  0.10)	test_majacc   0.98 (  0.98)	Loss_d 1.790 (1.790)	test_acc_d   0.19 (  0.19)	test_minacc_d   0.10 (  0.10)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.86 (  0.86)
Overall Timing[ 13/  1]	epoch_time 0.0361 (0.0390)	validation_time 0.0006 (0.0009)	train_time 0.0354 (0.0376)
record: (train_acc, test_acc) (0.8642000243663788, 0.328000009059906)
last accs (train_acc, test_acc) (0.8591000238656997, 0.1860000044107437)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.58it/s] 19%|#9        | 5/26 [00:00<00:01, 20.29it/s] 35%|###4      | 9/26 [00:00<00:00, 26.07it/s] 50%|#####     | 13/26 [00:00<00:00, 29.13it/s] 65%|######5   | 17/26 [00:00<00:00, 30.76it/s] 81%|########  | 21/26 [00:00<00:00, 31.86it/s] 96%|#########6| 25/26 [00:00<00:00, 32.59it/s]100%|##########| 26/26 [00:00<00:00, 27.56it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 364 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 365 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 366 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 367 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 368 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 369 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 370 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 371 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 372 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 373 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 374 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 375 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 376 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 377 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 378 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 379 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 380 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 381 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 382 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 383 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 384 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 385 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 386 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 387 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 388 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 389 400
penalty weights 0.0
Epoch: [14][  26/  26]	Loss 0.428 (0.418)	train_nll   0.34 (  0.33)	train_penalty   0.02 (  0.02)	weight_norm   0.09 (  0.09)	train_acc   0.84 (  0.86)	train_minacc   0.29 (  0.30)	train_majacc   0.95 (  0.96)	train_corr   0.00 (  0.00)	l1 18.7358 (18.3427)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.34it/s] 27%|##6       | 7/26 [00:00<00:00, 30.98it/s]                                               27%|##6       | 7/26 [00:00<00:00, 30.98it/s] 50%|#####     | 13/26 [00:00<00:00, 39.42it/s] 73%|#######3  | 19/26 [00:00<00:00, 45.69it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 45.69it/s] 96%|#########6| 25/26 [00:00<00:00, 46.32it/s]100%|##########| 26/26 [00:00<00:00, 38.16it/s]
Test: [   0/  26]	Loss 0.299 (0.299)	test_acc   0.88 (  0.88)	test_minacc   0.25 (  0.25)	test_majacc   0.99 (  0.99)	Loss_d 0.299 (0.299)	test_acc_d   0.88 (  0.88)	test_minacc_d   0.25 (  0.25)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.92 (  0.92)
Test: [  10/  26]	Loss 0.283 (0.313)	test_acc   0.87 (  0.87)	test_minacc   0.21 (  0.22)	test_majacc   0.97 (  0.97)	Loss_d 0.283 (0.313)	test_acc_d   0.87 (  0.87)	test_minacc_d   0.21 (  0.22)	test_majacc_d   0.97 (  0.97)	test_corr_d   0.92 (  0.91)
Test: [  20/  26]	Loss 0.336 (0.318)	test_acc   0.86 (  0.87)	test_minacc   0.31 (  0.24)	test_majacc   0.97 (  0.97)	Loss_d 0.336 (0.318)	test_acc_d   0.86 (  0.87)	test_minacc_d   0.31 (  0.24)	test_majacc_d   0.97 (  0.97)	test_corr_d   0.89 (  0.91)
Test: [  26/  26]	Loss 0.308 (0.317)	test_acc   0.86 (  0.87)	test_minacc   0.39 (  0.26)	test_majacc   0.96 (  0.97)	Loss_d 0.308 (0.317)	test_acc_d   0.86 (  0.87)	test_minacc_d   0.39 (  0.26)	test_majacc_d   0.96 (  0.97)	test_corr_d   0.88 (  0.91)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 64.39it/s]
Test: [  0/  1]	Loss 1.575 (1.575)	test_acc   0.26 (  0.26)	test_minacc   0.18 (  0.18)	test_majacc   0.93 (  0.93)	Loss_d 1.575 (1.575)	test_acc_d   0.26 (  0.26)	test_minacc_d   0.18 (  0.18)	test_majacc_d   0.93 (  0.93)	test_corr_d   0.72 (  0.72)
Test: [  1/  1]	Loss 1.575 (1.575)	test_acc   0.26 (  0.26)	test_minacc   0.18 (  0.18)	test_majacc   0.93 (  0.93)	Loss_d 1.575 (1.575)	test_acc_d   0.26 (  0.26)	test_minacc_d   0.18 (  0.18)	test_majacc_d   0.93 (  0.93)	test_corr_d   0.72 (  0.72)
Overall Timing[ 14/  1]	epoch_time 0.0353 (0.0387)	validation_time 0.0003 (0.0009)	train_time 0.0349 (0.0374)
record: (train_acc, test_acc) (0.8642000243663788, 0.328000009059906)
last accs (train_acc, test_acc) (0.8656000316143035, 0.25699999928474426)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.53it/s] 19%|#9        | 5/26 [00:00<00:00, 22.66it/s] 35%|###4      | 9/26 [00:00<00:00, 27.37it/s] 50%|#####     | 13/26 [00:00<00:00, 29.82it/s] 65%|######5   | 17/26 [00:00<00:00, 31.43it/s] 81%|########  | 21/26 [00:00<00:00, 32.52it/s] 96%|#########6| 25/26 [00:00<00:00, 32.93it/s]100%|##########| 26/26 [00:00<00:00, 28.53it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 390 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 391 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 392 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 393 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 394 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 395 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 396 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 397 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 398 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 399 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 400 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 401 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 402 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 403 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 404 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 405 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 406 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 407 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 408 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 409 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 410 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 411 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 412 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 413 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 414 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 415 400
penalty weights 10000.0
Epoch: [15][  26/  26]	Loss 0.000 (0.159)	train_nll   0.61 (  0.42)	train_penalty   0.00 (  0.01)	weight_norm   0.11 (  0.09)	train_acc   0.70 (  0.80)	train_minacc   0.83 (  0.51)	train_majacc   0.67 (  0.84)	train_corr   0.00 (  0.00)	l1 19.1072 (19.0922)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 19.40it/s] 27%|##6       | 7/26 [00:00<00:00, 36.47it/s]                                               27%|##6       | 7/26 [00:00<00:00, 36.47it/s] 50%|#####     | 13/26 [00:00<00:00, 45.47it/s] 69%|######9   | 18/26 [00:00<00:00, 45.66it/s]                                                69%|######9   | 18/26 [00:00<00:00, 45.66it/s] 92%|#########2| 24/26 [00:00<00:00, 50.08it/s]100%|##########| 26/26 [00:00<00:00, 42.15it/s]
Test: [   0/  26]	Loss 0.635 (0.635)	test_acc   0.66 (  0.66)	test_minacc   0.68 (  0.68)	test_majacc   0.66 (  0.66)	Loss_d 0.635 (0.635)	test_acc_d   0.66 (  0.66)	test_minacc_d   0.68 (  0.68)	test_majacc_d   0.66 (  0.66)	test_corr_d   0.19 (  0.19)
Test: [  10/  26]	Loss 0.618 (0.631)	test_acc   0.69 (  0.67)	test_minacc   0.83 (  0.76)	test_majacc   0.66 (  0.66)	Loss_d 0.618 (0.631)	test_acc_d   0.69 (  0.67)	test_minacc_d   0.83 (  0.76)	test_majacc_d   0.66 (  0.66)	test_corr_d   0.17 (  0.18)
Test: [  20/  26]	Loss 0.628 (0.625)	test_acc   0.67 (  0.68)	test_minacc   0.75 (  0.77)	test_majacc   0.65 (  0.66)	Loss_d 0.628 (0.625)	test_acc_d   0.67 (  0.68)	test_minacc_d   0.75 (  0.77)	test_majacc_d   0.65 (  0.66)	test_corr_d   0.16 (  0.18)
Test: [  26/  26]	Loss 0.619 (0.623)	test_acc   0.70 (  0.68)	test_minacc   0.83 (  0.77)	test_majacc   0.67 (  0.66)	Loss_d 0.619 (0.623)	test_acc_d   0.70 (  0.68)	test_minacc_d   0.83 (  0.77)	test_majacc_d   0.67 (  0.66)	test_corr_d   0.14 (  0.18)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.98it/s]
Test: [  0/  1]	Loss 0.588 (0.588)	test_acc   0.69 (  0.69)	test_minacc   0.71 (  0.71)	test_majacc   0.57 (  0.57)	Loss_d 0.588 (0.588)	test_acc_d   0.69 (  0.69)	test_minacc_d   0.71 (  0.71)	test_majacc_d   0.57 (  0.57)	test_corr_d  -0.43 ( -0.43)
Test: [  1/  1]	Loss 0.588 (0.588)	test_acc   0.69 (  0.69)	test_minacc   0.71 (  0.71)	test_majacc   0.57 (  0.57)	Loss_d 0.588 (0.588)	test_acc_d   0.69 (  0.69)	test_minacc_d   0.71 (  0.71)	test_majacc_d   0.57 (  0.57)	test_corr_d  -0.43 ( -0.43)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/31/checkpoints/model_best.pth
Overall Timing[ 15/  1]	epoch_time 0.0356 (0.0385)	validation_time 0.0004 (0.0008)	train_time 0.0352 (0.0373)
record: (train_acc, test_acc) (0.6775000246167183, 0.6940000057220459)
last accs (train_acc, test_acc) (0.6775000246167183, 0.6940000057220459)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  6.24it/s] 19%|#9        | 5/26 [00:00<00:01, 19.93it/s] 35%|###4      | 9/26 [00:00<00:00, 26.00it/s] 50%|#####     | 13/26 [00:00<00:00, 29.23it/s] 65%|######5   | 17/26 [00:00<00:00, 30.98it/s] 81%|########  | 21/26 [00:00<00:00, 32.25it/s] 96%|#########6| 25/26 [00:00<00:00, 33.14it/s]100%|##########| 26/26 [00:00<00:00, 27.49it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 416 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 417 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 418 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 419 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 420 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 421 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 422 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 423 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 424 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 425 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 426 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 427 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 428 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 429 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 430 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 431 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 432 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 433 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 434 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 435 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 436 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 437 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 438 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 439 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 440 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 441 400
penalty weights 10000.0
Epoch: [16][  26/  26]	Loss 0.000 (0.001)	train_nll   0.66 (  0.63)	train_penalty   0.00 (  0.00)	weight_norm   0.13 (  0.13)	train_acc   0.62 (  0.66)	train_minacc   0.61 (  0.71)	train_majacc   0.62 (  0.65)	train_corr   0.00 (  0.00)	l1 18.9804 (19.0325)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 19.19it/s] 31%|###       | 8/26 [00:00<00:00, 42.20it/s]                                               31%|###       | 8/26 [00:00<00:00, 42.20it/s] 50%|#####     | 13/26 [00:00<00:00, 43.46it/s] 73%|#######3  | 19/26 [00:00<00:00, 49.24it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 49.24it/s] 96%|#########6| 25/26 [00:00<00:00, 48.37it/s]100%|##########| 26/26 [00:00<00:00, 42.40it/s]
Test: [   0/  26]	Loss 0.683 (0.683)	test_acc   0.58 (  0.58)	test_minacc   0.57 (  0.57)	test_majacc   0.58 (  0.58)	Loss_d 0.683 (0.683)	test_acc_d   0.58 (  0.58)	test_minacc_d   0.57 (  0.57)	test_majacc_d   0.58 (  0.58)	test_corr_d   0.12 (  0.12)
Test: [  10/  26]	Loss 0.677 (0.675)	test_acc   0.59 (  0.59)	test_minacc   0.51 (  0.61)	test_majacc   0.60 (  0.59)	Loss_d 0.677 (0.675)	test_acc_d   0.59 (  0.59)	test_minacc_d   0.51 (  0.61)	test_majacc_d   0.60 (  0.59)	test_corr_d   0.15 (  0.14)
Test: [  20/  26]	Loss 0.661 (0.670)	test_acc   0.64 (  0.60)	test_minacc   0.70 (  0.63)	test_majacc   0.63 (  0.60)	Loss_d 0.661 (0.670)	test_acc_d   0.64 (  0.60)	test_minacc_d   0.70 (  0.63)	test_majacc_d   0.63 (  0.60)	test_corr_d   0.13 (  0.14)
Test: [  26/  26]	Loss 0.669 (0.669)	test_acc   0.61 (  0.60)	test_minacc   0.61 (  0.63)	test_majacc   0.61 (  0.60)	Loss_d 0.669 (0.669)	test_acc_d   0.61 (  0.60)	test_minacc_d   0.61 (  0.63)	test_majacc_d   0.61 (  0.60)	test_corr_d   0.14 (  0.14)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.77it/s]
Test: [  0/  1]	Loss 0.686 (0.686)	test_acc   0.57 (  0.57)	test_minacc   0.58 (  0.58)	test_majacc   0.55 (  0.55)	Loss_d 0.686 (0.686)	test_acc_d   0.57 (  0.57)	test_minacc_d   0.58 (  0.58)	test_majacc_d   0.55 (  0.55)	test_corr_d  -0.14 ( -0.14)
Test: [  1/  1]	Loss 0.686 (0.686)	test_acc   0.57 (  0.57)	test_minacc   0.58 (  0.58)	test_majacc   0.55 (  0.55)	Loss_d 0.686 (0.686)	test_acc_d   0.57 (  0.57)	test_minacc_d   0.58 (  0.58)	test_majacc_d   0.55 (  0.55)	test_corr_d  -0.14 ( -0.14)
Overall Timing[ 16/  1]	epoch_time 0.0365 (0.0384)	validation_time 0.0003 (0.0008)	train_time 0.0362 (0.0372)
record: (train_acc, test_acc) (0.6775000246167183, 0.6940000057220459)
last accs (train_acc, test_acc) (0.6024000078439713, 0.5740000009536743)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.96it/s] 19%|#9        | 5/26 [00:00<00:00, 24.44it/s] 35%|###4      | 9/26 [00:00<00:00, 29.07it/s] 50%|#####     | 13/26 [00:00<00:00, 31.37it/s] 65%|######5   | 17/26 [00:00<00:00, 32.66it/s] 81%|########  | 21/26 [00:00<00:00, 33.57it/s] 96%|#########6| 25/26 [00:00<00:00, 33.97it/s]100%|##########| 26/26 [00:00<00:00, 29.40it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 442 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 443 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 444 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 445 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 446 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 447 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 448 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 449 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 450 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 451 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 452 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 453 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 454 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 455 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 456 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 457 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 458 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 459 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 460 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 461 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 462 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 463 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 464 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 465 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 466 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 467 400
penalty weights 10000.0
Epoch: [17][  26/  26]	Loss 0.000 (0.000)	train_nll   0.68 (  0.67)	train_penalty   0.00 (  0.00)	weight_norm   0.14 (  0.14)	train_acc   0.58 (  0.59)	train_minacc   0.51 (  0.60)	train_majacc   0.59 (  0.59)	train_corr   0.00 (  0.00)	l1 18.9185 (18.9386)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.51it/s] 23%|##3       | 6/26 [00:00<00:00, 28.99it/s]                                               23%|##3       | 6/26 [00:00<00:00, 28.99it/s] 46%|####6     | 12/26 [00:00<00:00, 38.76it/s] 69%|######9   | 18/26 [00:00<00:00, 44.93it/s]                                                69%|######9   | 18/26 [00:00<00:00, 44.93it/s] 92%|#########2| 24/26 [00:00<00:00, 46.70it/s]100%|##########| 26/26 [00:00<00:00, 39.17it/s]
Test: [   0/  26]	Loss 0.690 (0.690)	test_acc   0.57 (  0.57)	test_minacc   0.64 (  0.64)	test_majacc   0.55 (  0.55)	Loss_d 0.690 (0.690)	test_acc_d   0.57 (  0.57)	test_minacc_d   0.64 (  0.64)	test_majacc_d   0.55 (  0.55)	test_corr_d   0.04 (  0.04)
Test: [  10/  26]	Loss 0.693 (0.689)	test_acc   0.55 (  0.56)	test_minacc   0.47 (  0.58)	test_majacc   0.56 (  0.56)	Loss_d 0.693 (0.689)	test_acc_d   0.55 (  0.56)	test_minacc_d   0.47 (  0.58)	test_majacc_d   0.56 (  0.56)	test_corr_d   0.06 (  0.05)
Test: [  20/  26]	Loss 0.686 (0.687)	test_acc   0.57 (  0.57)	test_minacc   0.62 (  0.59)	test_majacc   0.56 (  0.57)	Loss_d 0.686 (0.687)	test_acc_d   0.57 (  0.57)	test_minacc_d   0.62 (  0.59)	test_majacc_d   0.56 (  0.57)	test_corr_d   0.03 (  0.05)
Test: [  26/  26]	Loss 0.685 (0.686)	test_acc   0.58 (  0.57)	test_minacc   0.49 (  0.58)	test_majacc   0.60 (  0.57)	Loss_d 0.685 (0.686)	test_acc_d   0.58 (  0.57)	test_minacc_d   0.49 (  0.58)	test_majacc_d   0.60 (  0.57)	test_corr_d   0.08 (  0.05)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.92it/s]
Test: [  0/  1]	Loss 0.680 (0.680)	test_acc   0.56 (  0.56)	test_minacc   0.56 (  0.56)	test_majacc   0.51 (  0.51)	Loss_d 0.680 (0.680)	test_acc_d   0.56 (  0.56)	test_minacc_d   0.56 (  0.56)	test_majacc_d   0.51 (  0.51)	test_corr_d  -0.15 ( -0.15)
Test: [  1/  1]	Loss 0.680 (0.680)	test_acc   0.56 (  0.56)	test_minacc   0.56 (  0.56)	test_majacc   0.51 (  0.51)	Loss_d 0.680 (0.680)	test_acc_d   0.56 (  0.56)	test_minacc_d   0.56 (  0.56)	test_majacc_d   0.51 (  0.51)	test_corr_d  -0.15 ( -0.15)
Overall Timing[ 17/  1]	epoch_time 0.0369 (0.0383)	validation_time 0.0006 (0.0008)	train_time 0.0363 (0.0372)
record: (train_acc, test_acc) (0.6775000246167183, 0.6940000057220459)
last accs (train_acc, test_acc) (0.5692000086903573, 0.5570000410079956)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.67it/s] 19%|#9        | 5/26 [00:00<00:01, 20.72it/s] 35%|###4      | 9/26 [00:00<00:00, 26.34it/s] 50%|#####     | 13/26 [00:00<00:00, 28.81it/s] 65%|######5   | 17/26 [00:00<00:00, 30.87it/s] 81%|########  | 21/26 [00:00<00:00, 32.06it/s] 96%|#########6| 25/26 [00:00<00:00, 32.62it/s]100%|##########| 26/26 [00:00<00:00, 27.60it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 468 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 469 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 470 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 471 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 472 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 473 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 474 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 475 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 476 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 477 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 478 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 479 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 480 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 481 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 482 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 483 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 484 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 485 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 486 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 487 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 488 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 489 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 490 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 491 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 492 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 493 400
penalty weights 10000.0
Epoch: [18][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.68)	train_penalty   0.00 (  0.00)	weight_norm   0.14 (  0.14)	train_acc   0.57 (  0.57)	train_minacc   0.49 (  0.58)	train_majacc   0.59 (  0.57)	train_corr   0.00 (  0.00)	l1 18.8974 (18.9039)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.95it/s] 27%|##6       | 7/26 [00:00<00:00, 35.50it/s]                                               27%|##6       | 7/26 [00:00<00:00, 35.50it/s] 50%|#####     | 13/26 [00:00<00:00, 40.51it/s] 73%|#######3  | 19/26 [00:00<00:00, 46.20it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 46.20it/s] 96%|#########6| 25/26 [00:00<00:00, 46.52it/s]100%|##########| 26/26 [00:00<00:00, 39.48it/s]
Test: [   0/  26]	Loss 0.688 (0.688)	test_acc   0.56 (  0.56)	test_minacc   0.62 (  0.62)	test_majacc   0.54 (  0.54)	Loss_d 0.688 (0.688)	test_acc_d   0.56 (  0.56)	test_minacc_d   0.62 (  0.62)	test_majacc_d   0.54 (  0.54)	test_corr_d   0.03 (  0.03)
Test: [  10/  26]	Loss 0.692 (0.689)	test_acc   0.55 (  0.55)	test_minacc   0.49 (  0.57)	test_majacc   0.56 (  0.54)	Loss_d 0.692 (0.689)	test_acc_d   0.55 (  0.55)	test_minacc_d   0.49 (  0.57)	test_majacc_d   0.56 (  0.54)	test_corr_d   0.06 (  0.04)
Test: [  20/  26]	Loss 0.688 (0.688)	test_acc   0.54 (  0.56)	test_minacc   0.61 (  0.59)	test_majacc   0.53 (  0.55)	Loss_d 0.688 (0.688)	test_acc_d   0.54 (  0.56)	test_minacc_d   0.61 (  0.59)	test_majacc_d   0.53 (  0.55)	test_corr_d   0.02 (  0.05)
Test: [  26/  26]	Loss 0.686 (0.687)	test_acc   0.57 (  0.56)	test_minacc   0.49 (  0.58)	test_majacc   0.59 (  0.55)	Loss_d 0.686 (0.687)	test_acc_d   0.57 (  0.56)	test_minacc_d   0.49 (  0.58)	test_majacc_d   0.59 (  0.55)	test_corr_d   0.08 (  0.05)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 65.99it/s]
Test: [  0/  1]	Loss 0.684 (0.684)	test_acc   0.54 (  0.54)	test_minacc   0.55 (  0.55)	test_majacc   0.51 (  0.51)	Loss_d 0.684 (0.684)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.55 (  0.55)	test_majacc_d   0.51 (  0.51)	test_corr_d  -0.13 ( -0.13)
Test: [  1/  1]	Loss 0.684 (0.684)	test_acc   0.54 (  0.54)	test_minacc   0.55 (  0.55)	test_majacc   0.51 (  0.51)	Loss_d 0.684 (0.684)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.55 (  0.55)	test_majacc_d   0.51 (  0.51)	test_corr_d  -0.13 ( -0.13)
Overall Timing[ 18/  1]	epoch_time 0.0353 (0.0382)	validation_time 0.0003 (0.0008)	train_time 0.0350 (0.0371)
record: (train_acc, test_acc) (0.6775000246167183, 0.6940000057220459)
last accs (train_acc, test_acc) (0.5568000090122223, 0.5440000295639038)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.81it/s] 19%|#9        | 5/26 [00:00<00:00, 23.71it/s] 35%|###4      | 9/26 [00:00<00:00, 28.21it/s] 50%|#####     | 13/26 [00:00<00:00, 30.52it/s] 65%|######5   | 17/26 [00:00<00:00, 32.15it/s] 81%|########  | 21/26 [00:00<00:00, 33.14it/s] 96%|#########6| 25/26 [00:00<00:00, 33.67it/s]100%|##########| 26/26 [00:00<00:00, 29.06it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 494 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 495 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 496 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 497 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 498 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 499 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 500 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 501 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 502 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 503 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 504 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 505 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 506 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 507 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 508 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 509 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 510 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 511 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 512 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 513 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 514 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 515 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 516 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 517 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 518 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 519 400
penalty weights 10000.0
Epoch: [19][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.14 (  0.14)	train_acc   0.57 (  0.53)	train_minacc   0.49 (  0.58)	train_majacc   0.58 (  0.53)	train_corr   0.00 (  0.00)	l1 18.8936 (18.8953)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 19.05it/s] 31%|###       | 8/26 [00:00<00:00, 40.30it/s]                                               31%|###       | 8/26 [00:00<00:00, 40.30it/s] 50%|#####     | 13/26 [00:00<00:00, 43.11it/s] 73%|#######3  | 19/26 [00:00<00:00, 47.17it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 47.17it/s] 96%|#########6| 25/26 [00:00<00:00, 47.89it/s]100%|##########| 26/26 [00:00<00:00, 42.31it/s]
Test: [   0/  26]	Loss 0.692 (0.692)	test_acc   0.53 (  0.53)	test_minacc   0.64 (  0.64)	test_majacc   0.51 (  0.51)	Loss_d 0.692 (0.692)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.64 (  0.64)	test_majacc_d   0.51 (  0.51)	test_corr_d  -0.01 ( -0.01)
Test: [  10/  26]	Loss 0.693 (0.692)	test_acc   0.54 (  0.52)	test_minacc   0.51 (  0.57)	test_majacc   0.55 (  0.51)	Loss_d 0.693 (0.692)	test_acc_d   0.54 (  0.52)	test_minacc_d   0.51 (  0.57)	test_majacc_d   0.55 (  0.51)	test_corr_d   0.02 (  0.00)
Test: [  20/  26]	Loss 0.691 (0.691)	test_acc   0.49 (  0.53)	test_minacc   0.66 (  0.58)	test_majacc   0.46 (  0.52)	Loss_d 0.691 (0.691)	test_acc_d   0.49 (  0.53)	test_minacc_d   0.66 (  0.58)	test_majacc_d   0.46 (  0.52)	test_corr_d  -0.03 (  0.01)
Test: [  26/  26]	Loss 0.690 (0.691)	test_acc   0.56 (  0.53)	test_minacc   0.49 (  0.58)	test_majacc   0.58 (  0.52)	Loss_d 0.690 (0.691)	test_acc_d   0.56 (  0.53)	test_minacc_d   0.49 (  0.58)	test_majacc_d   0.58 (  0.52)	test_corr_d   0.05 (  0.01)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 59.37it/s]
Test: [  0/  1]	Loss 0.686 (0.686)	test_acc   0.53 (  0.53)	test_minacc   0.54 (  0.54)	test_majacc   0.45 (  0.45)	Loss_d 0.686 (0.686)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.54 (  0.54)	test_majacc_d   0.45 (  0.45)	test_corr_d  -0.14 ( -0.14)
Test: [  1/  1]	Loss 0.686 (0.686)	test_acc   0.53 (  0.53)	test_minacc   0.54 (  0.54)	test_majacc   0.45 (  0.45)	Loss_d 0.686 (0.686)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.54 (  0.54)	test_majacc_d   0.45 (  0.45)	test_corr_d  -0.14 ( -0.14)
Overall Timing[ 19/  1]	epoch_time 0.0358 (0.0381)	validation_time 0.0005 (0.0007)	train_time 0.0354 (0.0370)
record: (train_acc, test_acc) (0.6775000246167183, 0.6940000057220459)
last accs (train_acc, test_acc) (0.5254000162780285, 0.534000039100647)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.06it/s] 19%|#9        | 5/26 [00:00<00:00, 22.18it/s] 35%|###4      | 9/26 [00:00<00:00, 27.43it/s] 50%|#####     | 13/26 [00:00<00:00, 30.18it/s] 65%|######5   | 17/26 [00:00<00:00, 31.91it/s] 81%|########  | 21/26 [00:00<00:00, 32.99it/s] 96%|#########6| 25/26 [00:00<00:00, 33.70it/s]100%|##########| 26/26 [00:00<00:00, 28.68it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 520 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 521 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 522 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 523 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 524 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 525 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 526 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 527 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 528 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 529 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 530 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 531 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 532 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 533 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 534 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 535 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 536 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 537 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 538 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 539 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 540 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 541 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 542 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 543 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 544 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 545 400
penalty weights 10000.0
Epoch: [20][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.14 (  0.14)	train_acc   0.54 (  0.52)	train_minacc   0.44 (  0.57)	train_majacc   0.56 (  0.52)	train_corr   0.00 (  0.00)	l1 18.8921 (18.8926)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 17.91it/s] 31%|###       | 8/26 [00:00<00:00, 38.60it/s]                                               31%|###       | 8/26 [00:00<00:00, 38.60it/s] 50%|#####     | 13/26 [00:00<00:00, 41.99it/s] 73%|#######3  | 19/26 [00:00<00:00, 47.61it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 47.61it/s] 96%|#########6| 25/26 [00:00<00:00, 47.66it/s]100%|##########| 26/26 [00:00<00:00, 41.15it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.49 (  0.49)	test_minacc   0.62 (  0.62)	test_majacc   0.47 (  0.47)	Loss_d 0.693 (0.693)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.62 (  0.62)	test_majacc_d   0.47 (  0.47)	test_corr_d  -0.04 ( -0.04)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.51 (  0.50)	test_minacc   0.51 (  0.57)	test_majacc   0.51 (  0.49)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.50)	test_minacc_d   0.51 (  0.57)	test_majacc_d   0.51 (  0.49)	test_corr_d   0.00 ( -0.02)
Test: [  20/  26]	Loss 0.692 (0.693)	test_acc   0.48 (  0.51)	test_minacc   0.64 (  0.58)	test_majacc   0.45 (  0.49)	Loss_d 0.692 (0.693)	test_acc_d   0.48 (  0.51)	test_minacc_d   0.64 (  0.58)	test_majacc_d   0.45 (  0.49)	test_corr_d  -0.06 ( -0.02)
Test: [  26/  26]	Loss 0.691 (0.692)	test_acc   0.54 (  0.50)	test_minacc   0.46 (  0.58)	test_majacc   0.56 (  0.49)	Loss_d 0.691 (0.692)	test_acc_d   0.54 (  0.50)	test_minacc_d   0.46 (  0.58)	test_majacc_d   0.56 (  0.49)	test_corr_d   0.03 ( -0.02)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.71it/s]
Test: [  0/  1]	Loss 0.688 (0.688)	test_acc   0.54 (  0.54)	test_minacc   0.55 (  0.55)	test_majacc   0.45 (  0.45)	Loss_d 0.688 (0.688)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.55 (  0.55)	test_majacc_d   0.45 (  0.45)	test_corr_d  -0.14 ( -0.14)
Test: [  1/  1]	Loss 0.688 (0.688)	test_acc   0.54 (  0.54)	test_minacc   0.55 (  0.55)	test_majacc   0.45 (  0.45)	Loss_d 0.688 (0.688)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.55 (  0.55)	test_majacc_d   0.45 (  0.45)	test_corr_d  -0.14 ( -0.14)
Overall Timing[ 20/  1]	epoch_time 0.0359 (0.0379)	validation_time 0.0003 (0.0007)	train_time 0.0356 (0.0369)
record: (train_acc, test_acc) (0.6775000246167183, 0.6940000057220459)
last accs (train_acc, test_acc) (0.5044000144898891, 0.5440000295639038)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.38it/s] 19%|#9        | 5/26 [00:00<00:01, 18.62it/s] 35%|###4      | 9/26 [00:00<00:00, 24.51it/s] 50%|#####     | 13/26 [00:00<00:00, 27.80it/s] 65%|######5   | 17/26 [00:00<00:00, 29.96it/s] 81%|########  | 21/26 [00:00<00:00, 31.48it/s] 96%|#########6| 25/26 [00:00<00:00, 32.29it/s]100%|##########| 26/26 [00:00<00:00, 26.55it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 546 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 547 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 548 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 549 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 550 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 551 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 552 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 553 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 554 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 555 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 556 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 557 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 558 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 559 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 560 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 561 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 562 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 563 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 564 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 565 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 566 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 567 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 568 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 569 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 570 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 571 400
penalty weights 10000.0
Epoch: [21][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.14 (  0.14)	train_acc   0.54 (  0.50)	train_minacc   0.49 (  0.57)	train_majacc   0.55 (  0.49)	train_corr   0.00 (  0.00)	l1 18.8915 (18.8917)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.28it/s] 27%|##6       | 7/26 [00:00<00:00, 31.62it/s]                                               27%|##6       | 7/26 [00:00<00:00, 31.62it/s] 50%|#####     | 13/26 [00:00<00:00, 38.18it/s] 73%|#######3  | 19/26 [00:00<00:00, 44.33it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 44.33it/s] 96%|#########6| 25/26 [00:00<00:00, 45.51it/s]100%|##########| 26/26 [00:00<00:00, 38.02it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.47 (  0.47)	test_minacc   0.62 (  0.62)	test_majacc   0.45 (  0.45)	Loss_d 0.693 (0.693)	test_acc_d   0.47 (  0.47)	test_minacc_d   0.62 (  0.62)	test_majacc_d   0.45 (  0.45)	test_corr_d  -0.05 ( -0.05)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.50 (  0.48)	test_minacc   0.49 (  0.56)	test_majacc   0.50 (  0.47)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.48)	test_minacc_d   0.49 (  0.56)	test_majacc_d   0.50 (  0.47)	test_corr_d   0.00 ( -0.02)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.47 (  0.49)	test_minacc   0.61 (  0.57)	test_majacc   0.44 (  0.48)	Loss_d 0.693 (0.693)	test_acc_d   0.47 (  0.49)	test_minacc_d   0.61 (  0.57)	test_majacc_d   0.44 (  0.48)	test_corr_d  -0.07 ( -0.02)
Test: [  26/  26]	Loss 0.692 (0.693)	test_acc   0.54 (  0.49)	test_minacc   0.49 (  0.56)	test_majacc   0.55 (  0.48)	Loss_d 0.692 (0.693)	test_acc_d   0.54 (  0.49)	test_minacc_d   0.49 (  0.56)	test_majacc_d   0.55 (  0.48)	test_corr_d   0.03 ( -0.02)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.64it/s]
Test: [  0/  1]	Loss 0.690 (0.690)	test_acc   0.54 (  0.54)	test_minacc   0.55 (  0.55)	test_majacc   0.46 (  0.46)	Loss_d 0.690 (0.690)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.55 (  0.55)	test_majacc_d   0.46 (  0.46)	test_corr_d  -0.11 ( -0.11)
Test: [  1/  1]	Loss 0.690 (0.690)	test_acc   0.54 (  0.54)	test_minacc   0.55 (  0.55)	test_majacc   0.46 (  0.46)	Loss_d 0.690 (0.690)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.55 (  0.55)	test_majacc_d   0.46 (  0.46)	test_corr_d  -0.11 ( -0.11)
Overall Timing[ 21/  1]	epoch_time 0.0369 (0.0379)	validation_time 0.0004 (0.0007)	train_time 0.0364 (0.0369)
record: (train_acc, test_acc) (0.6775000246167183, 0.6940000057220459)
last accs (train_acc, test_acc) (0.4888000103533268, 0.5410000085830688)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 17.56it/s] 23%|##3       | 6/26 [00:00<00:00, 26.65it/s] 38%|###8      | 10/26 [00:00<00:00, 29.92it/s] 54%|#####3    | 14/26 [00:00<00:00, 31.41it/s] 69%|######9   | 18/26 [00:00<00:00, 31.49it/s] 85%|########4 | 22/26 [00:00<00:00, 32.29it/s]100%|##########| 26/26 [00:00<00:00, 33.08it/s]100%|##########| 26/26 [00:00<00:00, 29.29it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 572 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 573 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 574 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 575 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 576 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 577 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 578 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 579 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 580 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 581 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 582 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 583 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 584 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 585 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 586 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 587 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 588 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 589 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 590 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 591 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 592 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 593 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 594 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 595 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 596 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 597 400
penalty weights 10000.0
Epoch: [22][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.14 (  0.14)	train_acc   0.52 (  0.49)	train_minacc   0.44 (  0.55)	train_majacc   0.54 (  0.48)	train_corr   0.00 (  0.00)	l1 18.8913 (18.8913)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.60it/s] 31%|###       | 8/26 [00:00<00:00, 40.42it/s]                                               31%|###       | 8/26 [00:00<00:00, 40.42it/s] 50%|#####     | 13/26 [00:00<00:00, 42.02it/s] 73%|#######3  | 19/26 [00:00<00:00, 47.90it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 47.90it/s] 96%|#########6| 25/26 [00:00<00:00, 48.13it/s]100%|##########| 26/26 [00:00<00:00, 41.15it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.46 (  0.46)	test_minacc   0.59 (  0.59)	test_majacc   0.44 (  0.44)	Loss_d 0.693 (0.693)	test_acc_d   0.46 (  0.46)	test_minacc_d   0.59 (  0.59)	test_majacc_d   0.44 (  0.44)	test_corr_d  -0.05 ( -0.05)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.50 (  0.48)	test_minacc   0.51 (  0.55)	test_majacc   0.50 (  0.47)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.48)	test_minacc_d   0.51 (  0.55)	test_majacc_d   0.50 (  0.47)	test_corr_d   0.00 ( -0.02)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.48 (  0.49)	test_minacc   0.56 (  0.55)	test_majacc   0.46 (  0.48)	Loss_d 0.693 (0.693)	test_acc_d   0.48 (  0.49)	test_minacc_d   0.56 (  0.55)	test_majacc_d   0.46 (  0.48)	test_corr_d  -0.07 ( -0.02)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.52 (  0.49)	test_minacc   0.44 (  0.54)	test_majacc   0.54 (  0.48)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.49)	test_minacc_d   0.44 (  0.54)	test_majacc_d   0.54 (  0.48)	test_corr_d   0.03 ( -0.01)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.09it/s]
Test: [  0/  1]	Loss 0.692 (0.692)	test_acc   0.53 (  0.53)	test_minacc   0.53 (  0.53)	test_majacc   0.50 (  0.50)	Loss_d 0.692 (0.692)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.08 ( -0.08)
Test: [  1/  1]	Loss 0.692 (0.692)	test_acc   0.53 (  0.53)	test_minacc   0.53 (  0.53)	test_majacc   0.50 (  0.50)	Loss_d 0.692 (0.692)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.08 ( -0.08)
Overall Timing[ 22/  1]	epoch_time 0.0364 (0.0378)	validation_time 0.0004 (0.0007)	train_time 0.0360 (0.0369)
record: (train_acc, test_acc) (0.6775000246167183, 0.6940000057220459)
last accs (train_acc, test_acc) (0.4863000065088272, 0.5290000438690186)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.43it/s] 15%|#5        | 4/26 [00:00<00:01, 15.79it/s] 23%|##3       | 6/26 [00:00<00:01, 15.56it/s] 35%|###4      | 9/26 [00:00<00:00, 19.19it/s] 50%|#####     | 13/26 [00:00<00:00, 24.60it/s] 62%|######1   | 16/26 [00:00<00:00, 25.34it/s] 77%|#######6  | 20/26 [00:00<00:00, 28.13it/s] 92%|#########2| 24/26 [00:00<00:00, 30.03it/s]100%|##########| 26/26 [00:01<00:00, 23.83it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 598 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 599 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 600 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 601 400
penalty weights 10000.0
args.step pgd_anneal_iters 601 600
dim_v 512
rho, theta 248 tensor(0.0013, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 602 400
penalty weights 10000.0
args.step pgd_anneal_iters 602 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 603 400
penalty weights 10000.0
args.step pgd_anneal_iters 603 600
dim_v 512
rho, theta 469 tensor(-0.0007, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 604 400
penalty weights 10000.0
args.step pgd_anneal_iters 604 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 605 400
penalty weights 10000.0
args.step pgd_anneal_iters 605 600
dim_v 512
rho, theta 429 tensor(-0.0016, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 606 400
penalty weights 10000.0
args.step pgd_anneal_iters 606 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 607 400
penalty weights 10000.0
args.step pgd_anneal_iters 607 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 608 400
penalty weights 10000.0
args.step pgd_anneal_iters 608 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 609 400
penalty weights 10000.0
args.step pgd_anneal_iters 609 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 610 400
penalty weights 10000.0
args.step pgd_anneal_iters 610 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 611 400
penalty weights 10000.0
args.step pgd_anneal_iters 611 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 612 400
penalty weights 10000.0
args.step pgd_anneal_iters 612 600
dim_v 512
rho, theta 407 tensor(-0.0037, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 613 400
penalty weights 10000.0
args.step pgd_anneal_iters 613 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 614 400
penalty weights 10000.0
args.step pgd_anneal_iters 614 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 615 400
penalty weights 10000.0
args.step pgd_anneal_iters 615 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 616 400
penalty weights 10000.0
args.step pgd_anneal_iters 616 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 617 400
penalty weights 10000.0
args.step pgd_anneal_iters 617 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 618 400
penalty weights 10000.0
args.step pgd_anneal_iters 618 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 619 400
penalty weights 10000.0
args.step pgd_anneal_iters 619 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 620 400
penalty weights 10000.0
args.step pgd_anneal_iters 620 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 621 400
penalty weights 10000.0
args.step pgd_anneal_iters 621 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 622 400
penalty weights 10000.0
args.step pgd_anneal_iters 622 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 623 400
penalty weights 10000.0
args.step pgd_anneal_iters 623 600
dim_v 512
Epoch: [23][  26/  26]	Loss 0.000 (0.007)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.01)	weight_norm   0.15 (  0.14)	train_acc   0.49 (  0.55)	train_minacc   0.44 (  0.56)	train_majacc   0.50 (  0.55)	train_corr   0.00 (  0.00)	l1 8.9452 (10.1377)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 18.11it/s] 19%|#9        | 5/26 [00:00<00:00, 24.75it/s]                                               19%|#9        | 5/26 [00:00<00:00, 24.75it/s] 42%|####2     | 11/26 [00:00<00:00, 39.13it/s] 62%|######1   | 16/26 [00:00<00:00, 42.05it/s]                                                62%|######1   | 16/26 [00:00<00:00, 42.05it/s] 85%|########4 | 22/26 [00:00<00:00, 47.32it/s]100%|##########| 26/26 [00:00<00:00, 39.69it/s]
Test: [   0/  26]	Loss 0.691 (0.691)	test_acc   0.51 (  0.51)	test_minacc   0.52 (  0.52)	test_majacc   0.51 (  0.51)	Loss_d 0.691 (0.691)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.51 (  0.51)	test_corr_d   0.21 (  0.21)
Test: [  10/  26]	Loss 0.686 (0.692)	test_acc   0.54 (  0.51)	test_minacc   0.43 (  0.52)	test_majacc   0.55 (  0.51)	Loss_d 0.686 (0.692)	test_acc_d   0.54 (  0.51)	test_minacc_d   0.43 (  0.52)	test_majacc_d   0.55 (  0.51)	test_corr_d   0.19 (  0.18)
Test: [  20/  26]	Loss 0.690 (0.691)	test_acc   0.52 (  0.51)	test_minacc   0.53 (  0.52)	test_majacc   0.51 (  0.51)	Loss_d 0.690 (0.691)	test_acc_d   0.52 (  0.51)	test_minacc_d   0.53 (  0.52)	test_majacc_d   0.51 (  0.51)	test_corr_d   0.19 (  0.19)
Test: [  26/  26]	Loss 0.695 (0.691)	test_acc   0.49 (  0.51)	test_minacc   0.44 (  0.51)	test_majacc   0.50 (  0.51)	Loss_d 0.695 (0.691)	test_acc_d   0.49 (  0.51)	test_minacc_d   0.44 (  0.51)	test_majacc_d   0.50 (  0.51)	test_corr_d   0.18 (  0.19)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 64.84it/s]
Test: [  0/  1]	Loss 0.691 (0.691)	test_acc   0.51 (  0.51)	test_minacc   0.51 (  0.51)	test_majacc   0.51 (  0.51)	Loss_d 0.691 (0.691)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.51 (  0.51)	test_corr_d  -0.21 ( -0.21)
Test: [  1/  1]	Loss 0.691 (0.691)	test_acc   0.51 (  0.51)	test_minacc   0.51 (  0.51)	test_majacc   0.51 (  0.51)	Loss_d 0.691 (0.691)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.51 (  0.51)	test_corr_d  -0.21 ( -0.21)
Overall Timing[ 23/  1]	epoch_time 0.0390 (0.0379)	validation_time 0.0006 (0.0007)	train_time 0.0384 (0.0369)
record: (train_acc, test_acc) (0.6775000246167183, 0.6940000057220459)
last accs (train_acc, test_acc) (0.5111000147759914, 0.5090000033378601)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.96it/s] 19%|#9        | 5/26 [00:00<00:00, 21.21it/s] 35%|###4      | 9/26 [00:00<00:00, 26.03it/s] 50%|#####     | 13/26 [00:00<00:00, 28.31it/s] 65%|######5   | 17/26 [00:00<00:00, 29.93it/s] 81%|########  | 21/26 [00:00<00:00, 31.37it/s] 96%|#########6| 25/26 [00:00<00:00, 32.88it/s]100%|##########| 26/26 [00:00<00:00, 27.59it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 624 400
penalty weights 10000.0
args.step pgd_anneal_iters 624 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 625 400
penalty weights 10000.0
args.step pgd_anneal_iters 625 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 626 400
penalty weights 10000.0
args.step pgd_anneal_iters 626 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 627 400
penalty weights 10000.0
args.step pgd_anneal_iters 627 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 628 400
penalty weights 10000.0
args.step pgd_anneal_iters 628 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 629 400
penalty weights 10000.0
args.step pgd_anneal_iters 629 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 630 400
penalty weights 10000.0
args.step pgd_anneal_iters 630 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 631 400
penalty weights 10000.0
args.step pgd_anneal_iters 631 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 632 400
penalty weights 10000.0
args.step pgd_anneal_iters 632 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 633 400
penalty weights 10000.0
args.step pgd_anneal_iters 633 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 634 400
penalty weights 10000.0
args.step pgd_anneal_iters 634 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 635 400
penalty weights 10000.0
args.step pgd_anneal_iters 635 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 636 400
penalty weights 10000.0
args.step pgd_anneal_iters 636 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 637 400
penalty weights 10000.0
args.step pgd_anneal_iters 637 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 638 400
penalty weights 10000.0
args.step pgd_anneal_iters 638 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 639 400
penalty weights 10000.0
args.step pgd_anneal_iters 639 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 640 400
penalty weights 10000.0
args.step pgd_anneal_iters 640 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 641 400
penalty weights 10000.0
args.step pgd_anneal_iters 641 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 642 400
penalty weights 10000.0
args.step pgd_anneal_iters 642 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 643 400
penalty weights 10000.0
args.step pgd_anneal_iters 643 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 644 400
penalty weights 10000.0
args.step pgd_anneal_iters 644 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 645 400
penalty weights 10000.0
args.step pgd_anneal_iters 645 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 646 400
penalty weights 10000.0
args.step pgd_anneal_iters 646 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 647 400
penalty weights 10000.0
args.step pgd_anneal_iters 647 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 648 400
penalty weights 10000.0
args.step pgd_anneal_iters 648 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 649 400
penalty weights 10000.0
args.step pgd_anneal_iters 649 600
dim_v 512
Epoch: [24][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.16 (  0.15)	train_acc   0.50 (  0.51)	train_minacc   0.46 (  0.51)	train_majacc   0.51 (  0.51)	train_corr   0.00 (  0.00)	l1 8.7010 (8.8369)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.97it/s] 27%|##6       | 7/26 [00:00<00:00, 34.01it/s]                                               27%|##6       | 7/26 [00:00<00:00, 34.01it/s] 50%|#####     | 13/26 [00:00<00:00, 39.64it/s] 73%|#######3  | 19/26 [00:00<00:00, 46.56it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 46.56it/s] 96%|#########6| 25/26 [00:00<00:00, 46.78it/s]100%|##########| 26/26 [00:00<00:00, 39.06it/s]
Test: [   0/  26]	Loss 0.690 (0.690)	test_acc   0.52 (  0.52)	test_minacc   0.52 (  0.52)	test_majacc   0.52 (  0.52)	Loss_d 0.690 (0.690)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.52 (  0.52)	test_corr_d   0.24 (  0.24)
Test: [  10/  26]	Loss 0.684 (0.691)	test_acc   0.54 (  0.51)	test_minacc   0.43 (  0.52)	test_majacc   0.55 (  0.51)	Loss_d 0.684 (0.691)	test_acc_d   0.54 (  0.51)	test_minacc_d   0.43 (  0.52)	test_majacc_d   0.55 (  0.51)	test_corr_d   0.21 (  0.21)
Test: [  20/  26]	Loss 0.689 (0.690)	test_acc   0.52 (  0.52)	test_minacc   0.53 (  0.52)	test_majacc   0.51 (  0.51)	Loss_d 0.689 (0.690)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.53 (  0.52)	test_majacc_d   0.51 (  0.51)	test_corr_d   0.21 (  0.21)
Test: [  26/  26]	Loss 0.693 (0.690)	test_acc   0.50 (  0.51)	test_minacc   0.46 (  0.51)	test_majacc   0.51 (  0.51)	Loss_d 0.693 (0.690)	test_acc_d   0.50 (  0.51)	test_minacc_d   0.46 (  0.51)	test_majacc_d   0.51 (  0.51)	test_corr_d   0.20 (  0.21)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.92it/s]
Test: [  0/  1]	Loss 0.691 (0.691)	test_acc   0.51 (  0.51)	test_minacc   0.51 (  0.51)	test_majacc   0.52 (  0.52)	Loss_d 0.691 (0.691)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.52 (  0.52)	test_corr_d  -0.21 ( -0.21)
Test: [  1/  1]	Loss 0.691 (0.691)	test_acc   0.51 (  0.51)	test_minacc   0.51 (  0.51)	test_majacc   0.52 (  0.52)	Loss_d 0.691 (0.691)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.52 (  0.52)	test_corr_d  -0.21 ( -0.21)
Overall Timing[ 24/  1]	epoch_time 0.0362 (0.0378)	validation_time 0.0004 (0.0007)	train_time 0.0358 (0.0369)
record: (train_acc, test_acc) (0.6775000246167183, 0.6940000057220459)
last accs (train_acc, test_acc) (0.5144000119268894, 0.5080000162124634)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.89it/s] 19%|#9        | 5/26 [00:00<00:01, 20.71it/s] 35%|###4      | 9/26 [00:00<00:00, 26.32it/s] 50%|#####     | 13/26 [00:00<00:00, 29.89it/s] 65%|######5   | 17/26 [00:00<00:00, 32.12it/s] 81%|########  | 21/26 [00:00<00:00, 33.48it/s] 96%|#########6| 25/26 [00:00<00:00, 34.06it/s]100%|##########| 26/26 [00:00<00:00, 28.49it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 650 400
penalty weights 10000.0
args.step pgd_anneal_iters 650 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 651 400
penalty weights 10000.0
args.step pgd_anneal_iters 651 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 652 400
penalty weights 10000.0
args.step pgd_anneal_iters 652 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 653 400
penalty weights 10000.0
args.step pgd_anneal_iters 653 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 654 400
penalty weights 10000.0
args.step pgd_anneal_iters 654 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 655 400
penalty weights 10000.0
args.step pgd_anneal_iters 655 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 656 400
penalty weights 10000.0
args.step pgd_anneal_iters 656 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 657 400
penalty weights 10000.0
args.step pgd_anneal_iters 657 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 658 400
penalty weights 10000.0
args.step pgd_anneal_iters 658 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 659 400
penalty weights 10000.0
args.step pgd_anneal_iters 659 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 660 400
penalty weights 10000.0
args.step pgd_anneal_iters 660 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 661 400
penalty weights 10000.0
args.step pgd_anneal_iters 661 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 662 400
penalty weights 10000.0
args.step pgd_anneal_iters 662 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 663 400
penalty weights 10000.0
args.step pgd_anneal_iters 663 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 664 400
penalty weights 10000.0
args.step pgd_anneal_iters 664 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 665 400
penalty weights 10000.0
args.step pgd_anneal_iters 665 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 666 400
penalty weights 10000.0
args.step pgd_anneal_iters 666 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 667 400
penalty weights 10000.0
args.step pgd_anneal_iters 667 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 668 400
penalty weights 10000.0
args.step pgd_anneal_iters 668 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 669 400
penalty weights 10000.0
args.step pgd_anneal_iters 669 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 670 400
penalty weights 10000.0
args.step pgd_anneal_iters 670 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 671 400
penalty weights 10000.0
args.step pgd_anneal_iters 671 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 672 400
penalty weights 10000.0
args.step pgd_anneal_iters 672 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 673 400
penalty weights 10000.0
args.step pgd_anneal_iters 673 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 674 400
penalty weights 10000.0
args.step pgd_anneal_iters 674 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 675 400
penalty weights 10000.0
args.step pgd_anneal_iters 675 600
dim_v 512
Epoch: [25][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.16 (  0.16)	train_acc   0.51 (  0.52)	train_minacc   0.49 (  0.52)	train_majacc   0.52 (  0.52)	train_corr   0.00 (  0.00)	l1 8.5525 (8.6029)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.21it/s] 23%|##3       | 6/26 [00:00<00:00, 31.97it/s]                                               23%|##3       | 6/26 [00:00<00:00, 31.97it/s] 46%|####6     | 12/26 [00:00<00:00, 42.04it/s] 65%|######5   | 17/26 [00:00<00:00, 43.45it/s]                                                65%|######5   | 17/26 [00:00<00:00, 43.45it/s] 88%|########8 | 23/26 [00:00<00:00, 48.10it/s]100%|##########| 26/26 [00:00<00:00, 40.24it/s]
Test: [   0/  26]	Loss 0.687 (0.687)	test_acc   0.53 (  0.53)	test_minacc   0.52 (  0.52)	test_majacc   0.53 (  0.53)	Loss_d 0.687 (0.687)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.53 (  0.53)	test_corr_d   0.24 (  0.24)
Test: [  10/  26]	Loss 0.683 (0.688)	test_acc   0.55 (  0.52)	test_minacc   0.45 (  0.53)	test_majacc   0.57 (  0.52)	Loss_d 0.683 (0.688)	test_acc_d   0.55 (  0.52)	test_minacc_d   0.45 (  0.53)	test_majacc_d   0.57 (  0.52)	test_corr_d   0.22 (  0.21)
Test: [  20/  26]	Loss 0.687 (0.687)	test_acc   0.54 (  0.53)	test_minacc   0.55 (  0.53)	test_majacc   0.54 (  0.53)	Loss_d 0.687 (0.687)	test_acc_d   0.54 (  0.53)	test_minacc_d   0.55 (  0.53)	test_majacc_d   0.54 (  0.53)	test_corr_d   0.21 (  0.21)
Test: [  26/  26]	Loss 0.690 (0.687)	test_acc   0.51 (  0.53)	test_minacc   0.49 (  0.53)	test_majacc   0.52 (  0.53)	Loss_d 0.690 (0.687)	test_acc_d   0.51 (  0.53)	test_minacc_d   0.49 (  0.53)	test_majacc_d   0.52 (  0.53)	test_corr_d   0.20 (  0.21)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.81it/s]
Test: [  0/  1]	Loss 0.689 (0.689)	test_acc   0.52 (  0.52)	test_minacc   0.52 (  0.52)	test_majacc   0.53 (  0.53)	Loss_d 0.689 (0.689)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.53 (  0.53)	test_corr_d  -0.20 ( -0.20)
Test: [  1/  1]	Loss 0.689 (0.689)	test_acc   0.52 (  0.52)	test_minacc   0.52 (  0.52)	test_majacc   0.53 (  0.53)	Loss_d 0.689 (0.689)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.53 (  0.53)	test_corr_d  -0.20 ( -0.20)
Overall Timing[ 25/  1]	epoch_time 0.0354 (0.0377)	validation_time 0.0004 (0.0007)	train_time 0.0350 (0.0368)
record: (train_acc, test_acc) (0.6775000246167183, 0.6940000057220459)
last accs (train_acc, test_acc) (0.5269000152945519, 0.5240000486373901)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.41it/s] 19%|#9        | 5/26 [00:00<00:01, 20.66it/s] 35%|###4      | 9/26 [00:00<00:00, 25.80it/s] 50%|#####     | 13/26 [00:00<00:00, 28.08it/s] 65%|######5   | 17/26 [00:00<00:00, 30.31it/s] 81%|########  | 21/26 [00:00<00:00, 31.89it/s] 96%|#########6| 25/26 [00:00<00:00, 32.28it/s]100%|##########| 26/26 [00:00<00:00, 27.22it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 676 400
penalty weights 10000.0
args.step pgd_anneal_iters 676 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 677 400
penalty weights 10000.0
args.step pgd_anneal_iters 677 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 678 400
penalty weights 10000.0
args.step pgd_anneal_iters 678 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 679 400
penalty weights 10000.0
args.step pgd_anneal_iters 679 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 680 400
penalty weights 10000.0
args.step pgd_anneal_iters 680 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 681 400
penalty weights 10000.0
args.step pgd_anneal_iters 681 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 682 400
penalty weights 10000.0
args.step pgd_anneal_iters 682 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 683 400
penalty weights 10000.0
args.step pgd_anneal_iters 683 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 684 400
penalty weights 10000.0
args.step pgd_anneal_iters 684 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 685 400
penalty weights 10000.0
args.step pgd_anneal_iters 685 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 686 400
penalty weights 10000.0
args.step pgd_anneal_iters 686 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 687 400
penalty weights 10000.0
args.step pgd_anneal_iters 687 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 688 400
penalty weights 10000.0
args.step pgd_anneal_iters 688 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 689 400
penalty weights 10000.0
args.step pgd_anneal_iters 689 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 690 400
penalty weights 10000.0
args.step pgd_anneal_iters 690 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 691 400
penalty weights 10000.0
args.step pgd_anneal_iters 691 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 692 400
penalty weights 10000.0
args.step pgd_anneal_iters 692 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 693 400
penalty weights 10000.0
args.step pgd_anneal_iters 693 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 694 400
penalty weights 10000.0
args.step pgd_anneal_iters 694 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 695 400
penalty weights 10000.0
args.step pgd_anneal_iters 695 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 696 400
penalty weights 10000.0
args.step pgd_anneal_iters 696 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 697 400
penalty weights 10000.0
args.step pgd_anneal_iters 697 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 698 400
penalty weights 10000.0
args.step pgd_anneal_iters 698 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 699 400
penalty weights 10000.0
args.step pgd_anneal_iters 699 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 700 400
penalty weights 10000.0
args.step pgd_anneal_iters 700 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 701 400
penalty weights 10000.0
args.step pgd_anneal_iters 701 600
dim_v 512
Epoch: [26][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.16 (  0.16)	train_acc   0.51 (  0.53)	train_minacc   0.49 (  0.53)	train_majacc   0.51 (  0.53)	train_corr   0.00 (  0.00)	l1 8.5097 (8.5248)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.95it/s] 27%|##6       | 7/26 [00:00<00:00, 36.43it/s]                                               27%|##6       | 7/26 [00:00<00:00, 36.43it/s] 50%|#####     | 13/26 [00:00<00:00, 42.58it/s] 73%|#######3  | 19/26 [00:00<00:00, 47.95it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 47.95it/s] 96%|#########6| 25/26 [00:00<00:00, 48.13it/s]100%|##########| 26/26 [00:00<00:00, 40.92it/s]
Test: [   0/  26]	Loss 0.688 (0.688)	test_acc   0.53 (  0.53)	test_minacc   0.50 (  0.50)	test_majacc   0.53 (  0.53)	Loss_d 0.688 (0.688)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.53 (  0.53)	test_corr_d   0.24 (  0.24)
Test: [  10/  26]	Loss 0.684 (0.689)	test_acc   0.55 (  0.52)	test_minacc   0.45 (  0.52)	test_majacc   0.57 (  0.52)	Loss_d 0.684 (0.689)	test_acc_d   0.55 (  0.52)	test_minacc_d   0.45 (  0.52)	test_majacc_d   0.57 (  0.52)	test_corr_d   0.21 (  0.20)
Test: [  20/  26]	Loss 0.687 (0.688)	test_acc   0.54 (  0.52)	test_minacc   0.55 (  0.53)	test_majacc   0.53 (  0.52)	Loss_d 0.687 (0.688)	test_acc_d   0.54 (  0.52)	test_minacc_d   0.55 (  0.53)	test_majacc_d   0.53 (  0.52)	test_corr_d   0.21 (  0.20)
Test: [  26/  26]	Loss 0.691 (0.688)	test_acc   0.51 (  0.52)	test_minacc   0.49 (  0.52)	test_majacc   0.51 (  0.52)	Loss_d 0.691 (0.688)	test_acc_d   0.51 (  0.52)	test_minacc_d   0.49 (  0.52)	test_majacc_d   0.51 (  0.52)	test_corr_d   0.19 (  0.21)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.38it/s]
Test: [  0/  1]	Loss 0.689 (0.689)	test_acc   0.52 (  0.52)	test_minacc   0.52 (  0.52)	test_majacc   0.53 (  0.53)	Loss_d 0.689 (0.689)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.53 (  0.53)	test_corr_d  -0.20 ( -0.20)
Test: [  1/  1]	Loss 0.689 (0.689)	test_acc   0.52 (  0.52)	test_minacc   0.52 (  0.52)	test_majacc   0.53 (  0.53)	Loss_d 0.689 (0.689)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.53 (  0.53)	test_corr_d  -0.20 ( -0.20)
Overall Timing[ 26/  1]	epoch_time 0.0360 (0.0377)	validation_time 0.0003 (0.0007)	train_time 0.0356 (0.0368)
record: (train_acc, test_acc) (0.6775000246167183, 0.6940000057220459)
last accs (train_acc, test_acc) (0.5240000117719174, 0.5210000276565552)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.75it/s] 15%|#5        | 4/26 [00:00<00:01, 20.02it/s] 31%|###       | 8/26 [00:00<00:00, 26.08it/s] 46%|####6     | 12/26 [00:00<00:00, 29.65it/s] 62%|######1   | 16/26 [00:00<00:00, 31.58it/s] 77%|#######6  | 20/26 [00:00<00:00, 32.77it/s] 92%|#########2| 24/26 [00:00<00:00, 33.23it/s]100%|##########| 26/26 [00:00<00:00, 28.33it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 702 400
penalty weights 10000.0
args.step pgd_anneal_iters 702 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 703 400
penalty weights 10000.0
args.step pgd_anneal_iters 703 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 704 400
penalty weights 10000.0
args.step pgd_anneal_iters 704 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 705 400
penalty weights 10000.0
args.step pgd_anneal_iters 705 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 706 400
penalty weights 10000.0
args.step pgd_anneal_iters 706 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 707 400
penalty weights 10000.0
args.step pgd_anneal_iters 707 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 708 400
penalty weights 10000.0
args.step pgd_anneal_iters 708 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 709 400
penalty weights 10000.0
args.step pgd_anneal_iters 709 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 710 400
penalty weights 10000.0
args.step pgd_anneal_iters 710 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 711 400
penalty weights 10000.0
args.step pgd_anneal_iters 711 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 712 400
penalty weights 10000.0
args.step pgd_anneal_iters 712 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 713 400
penalty weights 10000.0
args.step pgd_anneal_iters 713 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 714 400
penalty weights 10000.0
args.step pgd_anneal_iters 714 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 715 400
penalty weights 10000.0
args.step pgd_anneal_iters 715 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 716 400
penalty weights 10000.0
args.step pgd_anneal_iters 716 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 717 400
penalty weights 10000.0
args.step pgd_anneal_iters 717 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 718 400
penalty weights 10000.0
args.step pgd_anneal_iters 718 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 719 400
penalty weights 10000.0
args.step pgd_anneal_iters 719 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 720 400
penalty weights 10000.0
args.step pgd_anneal_iters 720 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 721 400
penalty weights 10000.0
args.step pgd_anneal_iters 721 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 722 400
penalty weights 10000.0
args.step pgd_anneal_iters 722 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 723 400
penalty weights 10000.0
args.step pgd_anneal_iters 723 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 724 400
penalty weights 10000.0
args.step pgd_anneal_iters 724 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 725 400
penalty weights 10000.0
args.step pgd_anneal_iters 725 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 726 400
penalty weights 10000.0
args.step pgd_anneal_iters 726 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 727 400
penalty weights 10000.0
args.step pgd_anneal_iters 727 600
dim_v 512
Epoch: [27][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.16 (  0.16)	train_acc   0.50 (  0.52)	train_minacc   0.49 (  0.52)	train_majacc   0.51 (  0.52)	train_corr   0.00 (  0.00)	l1 8.4737 (8.4881)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.07it/s] 27%|##6       | 7/26 [00:00<00:00, 35.79it/s]                                               27%|##6       | 7/26 [00:00<00:00, 35.79it/s] 50%|#####     | 13/26 [00:00<00:00, 40.71it/s] 73%|#######3  | 19/26 [00:00<00:00, 47.08it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 47.08it/s] 96%|#########6| 25/26 [00:00<00:00, 47.14it/s]100%|##########| 26/26 [00:00<00:00, 40.62it/s]
Test: [   0/  26]	Loss 0.689 (0.689)	test_acc   0.53 (  0.53)	test_minacc   0.52 (  0.52)	test_majacc   0.53 (  0.53)	Loss_d 0.689 (0.689)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.53 (  0.53)	test_corr_d   0.23 (  0.23)
Test: [  10/  26]	Loss 0.685 (0.689)	test_acc   0.55 (  0.52)	test_minacc   0.45 (  0.53)	test_majacc   0.56 (  0.52)	Loss_d 0.685 (0.689)	test_acc_d   0.55 (  0.52)	test_minacc_d   0.45 (  0.53)	test_majacc_d   0.56 (  0.52)	test_corr_d   0.20 (  0.20)
Test: [  20/  26]	Loss 0.688 (0.689)	test_acc   0.53 (  0.52)	test_minacc   0.55 (  0.53)	test_majacc   0.53 (  0.52)	Loss_d 0.688 (0.689)	test_acc_d   0.53 (  0.52)	test_minacc_d   0.55 (  0.53)	test_majacc_d   0.53 (  0.52)	test_corr_d   0.20 (  0.20)
Test: [  26/  26]	Loss 0.691 (0.689)	test_acc   0.50 (  0.52)	test_minacc   0.49 (  0.52)	test_majacc   0.51 (  0.52)	Loss_d 0.691 (0.689)	test_acc_d   0.50 (  0.52)	test_minacc_d   0.49 (  0.52)	test_majacc_d   0.51 (  0.52)	test_corr_d   0.19 (  0.20)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.51it/s]
Test: [  0/  1]	Loss 0.690 (0.690)	test_acc   0.52 (  0.52)	test_minacc   0.52 (  0.52)	test_majacc   0.53 (  0.53)	Loss_d 0.690 (0.690)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.53 (  0.53)	test_corr_d  -0.19 ( -0.19)
Test: [  1/  1]	Loss 0.690 (0.690)	test_acc   0.52 (  0.52)	test_minacc   0.52 (  0.52)	test_majacc   0.53 (  0.53)	Loss_d 0.690 (0.690)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.53 (  0.53)	test_corr_d  -0.19 ( -0.19)
Overall Timing[ 27/  1]	epoch_time 0.0361 (0.0376)	validation_time 0.0004 (0.0007)	train_time 0.0356 (0.0367)
record: (train_acc, test_acc) (0.6775000246167183, 0.6940000057220459)
last accs (train_acc, test_acc) (0.5216000140309334, 0.5190000534057617)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.81it/s] 19%|#9        | 5/26 [00:00<00:01, 18.80it/s] 35%|###4      | 9/26 [00:00<00:00, 24.41it/s] 50%|#####     | 13/26 [00:00<00:00, 27.74it/s] 65%|######5   | 17/26 [00:00<00:00, 30.05it/s] 81%|########  | 21/26 [00:00<00:00, 31.65it/s] 96%|#########6| 25/26 [00:00<00:00, 32.33it/s]100%|##########| 26/26 [00:00<00:00, 26.64it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 728 400
penalty weights 10000.0
args.step pgd_anneal_iters 728 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 729 400
penalty weights 10000.0
args.step pgd_anneal_iters 729 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 730 400
penalty weights 10000.0
args.step pgd_anneal_iters 730 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 731 400
penalty weights 10000.0
args.step pgd_anneal_iters 731 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 732 400
penalty weights 10000.0
args.step pgd_anneal_iters 732 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 733 400
penalty weights 10000.0
args.step pgd_anneal_iters 733 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 734 400
penalty weights 10000.0
args.step pgd_anneal_iters 734 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 735 400
penalty weights 10000.0
args.step pgd_anneal_iters 735 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 736 400
penalty weights 10000.0
args.step pgd_anneal_iters 736 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 737 400
penalty weights 10000.0
args.step pgd_anneal_iters 737 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 738 400
penalty weights 10000.0
args.step pgd_anneal_iters 738 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 739 400
penalty weights 10000.0
args.step pgd_anneal_iters 739 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 740 400
penalty weights 10000.0
args.step pgd_anneal_iters 740 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 741 400
penalty weights 10000.0
args.step pgd_anneal_iters 741 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 742 400
penalty weights 10000.0
args.step pgd_anneal_iters 742 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 743 400
penalty weights 10000.0
args.step pgd_anneal_iters 743 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 744 400
penalty weights 10000.0
args.step pgd_anneal_iters 744 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 745 400
penalty weights 10000.0
args.step pgd_anneal_iters 745 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 746 400
penalty weights 10000.0
args.step pgd_anneal_iters 746 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 747 400
penalty weights 10000.0
args.step pgd_anneal_iters 747 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 748 400
penalty weights 10000.0
args.step pgd_anneal_iters 748 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 749 400
penalty weights 10000.0
args.step pgd_anneal_iters 749 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 750 400
penalty weights 10000.0
args.step pgd_anneal_iters 750 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 751 400
penalty weights 10000.0
args.step pgd_anneal_iters 751 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 752 400
penalty weights 10000.0
args.step pgd_anneal_iters 752 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 753 400
penalty weights 10000.0
args.step pgd_anneal_iters 753 600
dim_v 512
Epoch: [28][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.16 (  0.16)	train_acc   0.50 (  0.52)	train_minacc   0.46 (  0.52)	train_majacc   0.51 (  0.52)	train_corr   0.00 (  0.00)	l1 8.4375 (8.4520)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.41it/s] 23%|##3       | 6/26 [00:00<00:00, 30.56it/s]                                               23%|##3       | 6/26 [00:00<00:00, 30.56it/s] 46%|####6     | 12/26 [00:00<00:00, 41.62it/s] 65%|######5   | 17/26 [00:00<00:00, 42.03it/s]                                                65%|######5   | 17/26 [00:00<00:00, 42.03it/s] 88%|########8 | 23/26 [00:00<00:00, 47.49it/s]100%|##########| 26/26 [00:00<00:00, 38.80it/s]
Test: [   0/  26]	Loss 0.689 (0.689)	test_acc   0.52 (  0.52)	test_minacc   0.52 (  0.52)	test_majacc   0.52 (  0.52)	Loss_d 0.689 (0.689)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.52 (  0.52)	test_corr_d   0.22 (  0.22)
Test: [  10/  26]	Loss 0.686 (0.690)	test_acc   0.54 (  0.52)	test_minacc   0.45 (  0.52)	test_majacc   0.56 (  0.51)	Loss_d 0.686 (0.690)	test_acc_d   0.54 (  0.52)	test_minacc_d   0.45 (  0.52)	test_majacc_d   0.56 (  0.51)	test_corr_d   0.20 (  0.19)
Test: [  20/  26]	Loss 0.689 (0.689)	test_acc   0.53 (  0.52)	test_minacc   0.55 (  0.53)	test_majacc   0.52 (  0.52)	Loss_d 0.689 (0.689)	test_acc_d   0.53 (  0.52)	test_minacc_d   0.55 (  0.53)	test_majacc_d   0.52 (  0.52)	test_corr_d   0.20 (  0.19)
Test: [  26/  26]	Loss 0.692 (0.689)	test_acc   0.50 (  0.52)	test_minacc   0.46 (  0.52)	test_majacc   0.51 (  0.52)	Loss_d 0.692 (0.689)	test_acc_d   0.50 (  0.52)	test_minacc_d   0.46 (  0.52)	test_majacc_d   0.51 (  0.52)	test_corr_d   0.18 (  0.19)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 67.49it/s]
Test: [  0/  1]	Loss 0.690 (0.690)	test_acc   0.52 (  0.52)	test_minacc   0.52 (  0.52)	test_majacc   0.53 (  0.53)	Loss_d 0.690 (0.690)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.53 (  0.53)	test_corr_d  -0.19 ( -0.19)
Test: [  1/  1]	Loss 0.690 (0.690)	test_acc   0.52 (  0.52)	test_minacc   0.52 (  0.52)	test_majacc   0.53 (  0.53)	Loss_d 0.690 (0.690)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.53 (  0.53)	test_corr_d  -0.19 ( -0.19)
Overall Timing[ 28/  1]	epoch_time 0.0363 (0.0376)	validation_time 0.0003 (0.0006)	train_time 0.0360 (0.0367)
record: (train_acc, test_acc) (0.6775000246167183, 0.6940000057220459)
last accs (train_acc, test_acc) (0.5191000151336194, 0.5200000405311584)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.69it/s] 19%|#9        | 5/26 [00:00<00:01, 18.78it/s] 35%|###4      | 9/26 [00:00<00:00, 24.14it/s] 50%|#####     | 13/26 [00:00<00:00, 27.76it/s] 65%|######5   | 17/26 [00:00<00:00, 29.96it/s] 81%|########  | 21/26 [00:00<00:00, 31.35it/s] 96%|#########6| 25/26 [00:00<00:00, 32.60it/s]100%|##########| 26/26 [00:00<00:00, 26.81it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 754 400
penalty weights 10000.0
args.step pgd_anneal_iters 754 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 755 400
penalty weights 10000.0
args.step pgd_anneal_iters 755 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 756 400
penalty weights 10000.0
args.step pgd_anneal_iters 756 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 757 400
penalty weights 10000.0
args.step pgd_anneal_iters 757 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 758 400
penalty weights 10000.0
args.step pgd_anneal_iters 758 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 759 400
penalty weights 10000.0
args.step pgd_anneal_iters 759 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 760 400
penalty weights 10000.0
args.step pgd_anneal_iters 760 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 761 400
penalty weights 10000.0
args.step pgd_anneal_iters 761 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 762 400
penalty weights 10000.0
args.step pgd_anneal_iters 762 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 763 400
penalty weights 10000.0
args.step pgd_anneal_iters 763 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 764 400
penalty weights 10000.0
args.step pgd_anneal_iters 764 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 765 400
penalty weights 10000.0
args.step pgd_anneal_iters 765 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 766 400
penalty weights 10000.0
args.step pgd_anneal_iters 766 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 767 400
penalty weights 10000.0
args.step pgd_anneal_iters 767 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 768 400
penalty weights 10000.0
args.step pgd_anneal_iters 768 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 769 400
penalty weights 10000.0
args.step pgd_anneal_iters 769 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 770 400
penalty weights 10000.0
args.step pgd_anneal_iters 770 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 771 400
penalty weights 10000.0
args.step pgd_anneal_iters 771 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 772 400
penalty weights 10000.0
args.step pgd_anneal_iters 772 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 773 400
penalty weights 10000.0
args.step pgd_anneal_iters 773 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 774 400
penalty weights 10000.0
args.step pgd_anneal_iters 774 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 775 400
penalty weights 10000.0
args.step pgd_anneal_iters 775 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 776 400
penalty weights 10000.0
args.step pgd_anneal_iters 776 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 777 400
penalty weights 10000.0
args.step pgd_anneal_iters 777 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 778 400
penalty weights 10000.0
args.step pgd_anneal_iters 778 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 779 400
penalty weights 10000.0
args.step pgd_anneal_iters 779 600
dim_v 512
Epoch: [29][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.16 (  0.16)	train_acc   0.50 (  0.52)	train_minacc   0.46 (  0.52)	train_majacc   0.51 (  0.52)	train_corr   0.00 (  0.00)	l1 8.4041 (8.4174)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:00, 25.77it/s] 31%|###       | 8/26 [00:00<00:00, 37.92it/s]                                               31%|###       | 8/26 [00:00<00:00, 37.92it/s] 50%|#####     | 13/26 [00:00<00:00, 40.69it/s] 73%|#######3  | 19/26 [00:00<00:00, 46.17it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 46.17it/s] 96%|#########6| 25/26 [00:00<00:00, 47.38it/s]100%|##########| 26/26 [00:00<00:00, 41.41it/s]
Test: [   0/  26]	Loss 0.690 (0.690)	test_acc   0.52 (  0.52)	test_minacc   0.52 (  0.52)	test_majacc   0.52 (  0.52)	Loss_d 0.690 (0.690)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.52 (  0.52)	test_corr_d   0.22 (  0.22)
Test: [  10/  26]	Loss 0.686 (0.690)	test_acc   0.54 (  0.52)	test_minacc   0.45 (  0.52)	test_majacc   0.56 (  0.51)	Loss_d 0.686 (0.690)	test_acc_d   0.54 (  0.52)	test_minacc_d   0.45 (  0.52)	test_majacc_d   0.56 (  0.51)	test_corr_d   0.19 (  0.18)
Test: [  20/  26]	Loss 0.689 (0.690)	test_acc   0.53 (  0.52)	test_minacc   0.55 (  0.53)	test_majacc   0.52 (  0.52)	Loss_d 0.689 (0.690)	test_acc_d   0.53 (  0.52)	test_minacc_d   0.55 (  0.53)	test_majacc_d   0.52 (  0.52)	test_corr_d   0.19 (  0.18)
Test: [  26/  26]	Loss 0.692 (0.690)	test_acc   0.50 (  0.52)	test_minacc   0.46 (  0.52)	test_majacc   0.51 (  0.52)	Loss_d 0.692 (0.690)	test_acc_d   0.50 (  0.52)	test_minacc_d   0.46 (  0.52)	test_majacc_d   0.51 (  0.52)	test_corr_d   0.18 (  0.18)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.25it/s]
Test: [  0/  1]	Loss 0.690 (0.690)	test_acc   0.52 (  0.52)	test_minacc   0.52 (  0.52)	test_majacc   0.52 (  0.52)	Loss_d 0.690 (0.690)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.52 (  0.52)	test_corr_d  -0.18 ( -0.18)
Test: [  1/  1]	Loss 0.690 (0.690)	test_acc   0.52 (  0.52)	test_minacc   0.52 (  0.52)	test_majacc   0.52 (  0.52)	Loss_d 0.690 (0.690)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.52 (  0.52)	test_corr_d  -0.18 ( -0.18)
Overall Timing[ 29/  1]	epoch_time 0.0369 (0.0375)	validation_time 0.0004 (0.0006)	train_time 0.0365 (0.0367)
record: (train_acc, test_acc) (0.6775000246167183, 0.6940000057220459)
last accs (train_acc, test_acc) (0.51870001283288, 0.5190000534057617)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.57it/s] 15%|#5        | 4/26 [00:00<00:01, 20.38it/s] 27%|##6       | 7/26 [00:00<00:00, 24.21it/s] 42%|####2     | 11/26 [00:00<00:00, 27.72it/s] 58%|#####7    | 15/26 [00:00<00:00, 29.69it/s] 73%|#######3  | 19/26 [00:00<00:00, 30.89it/s] 88%|########8 | 23/26 [00:00<00:00, 32.16it/s]100%|##########| 26/26 [00:00<00:00, 27.74it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 780 400
penalty weights 10000.0
args.step pgd_anneal_iters 780 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 781 400
penalty weights 10000.0
args.step pgd_anneal_iters 781 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 782 400
penalty weights 10000.0
args.step pgd_anneal_iters 782 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 783 400
penalty weights 10000.0
args.step pgd_anneal_iters 783 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 784 400
penalty weights 10000.0
args.step pgd_anneal_iters 784 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 785 400
penalty weights 10000.0
args.step pgd_anneal_iters 785 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 786 400
penalty weights 10000.0
args.step pgd_anneal_iters 786 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 787 400
penalty weights 10000.0
args.step pgd_anneal_iters 787 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 788 400
penalty weights 10000.0
args.step pgd_anneal_iters 788 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 789 400
penalty weights 10000.0
args.step pgd_anneal_iters 789 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 790 400
penalty weights 10000.0
args.step pgd_anneal_iters 790 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 791 400
penalty weights 10000.0
args.step pgd_anneal_iters 791 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 792 400
penalty weights 10000.0
args.step pgd_anneal_iters 792 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 793 400
penalty weights 10000.0
args.step pgd_anneal_iters 793 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 794 400
penalty weights 10000.0
args.step pgd_anneal_iters 794 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 795 400
penalty weights 10000.0
args.step pgd_anneal_iters 795 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 796 400
penalty weights 10000.0
args.step pgd_anneal_iters 796 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 797 400
penalty weights 10000.0
args.step pgd_anneal_iters 797 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 798 400
penalty weights 10000.0
args.step pgd_anneal_iters 798 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 799 400
penalty weights 10000.0
args.step pgd_anneal_iters 799 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 800 400
penalty weights 10000.0
args.step pgd_anneal_iters 800 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 801 400
penalty weights 10000.0
args.step pgd_anneal_iters 801 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 802 400
penalty weights 10000.0
args.step pgd_anneal_iters 802 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 803 400
penalty weights 10000.0
args.step pgd_anneal_iters 803 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 804 400
penalty weights 10000.0
args.step pgd_anneal_iters 804 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 805 400
penalty weights 10000.0
args.step pgd_anneal_iters 805 600
dim_v 512
Epoch: [30][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.16 (  0.16)	train_acc   0.50 (  0.52)	train_minacc   0.46 (  0.52)	train_majacc   0.51 (  0.52)	train_corr   0.00 (  0.00)	l1 8.3737 (8.3858)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.11it/s] 27%|##6       | 7/26 [00:00<00:00, 32.83it/s]                                               27%|##6       | 7/26 [00:00<00:00, 32.83it/s] 50%|#####     | 13/26 [00:00<00:00, 40.46it/s] 73%|#######3  | 19/26 [00:00<00:00, 46.73it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 46.73it/s] 96%|#########6| 25/26 [00:00<00:00, 46.79it/s]100%|##########| 26/26 [00:00<00:00, 39.04it/s]
Test: [   0/  26]	Loss 0.690 (0.690)	test_acc   0.52 (  0.52)	test_minacc   0.52 (  0.52)	test_majacc   0.52 (  0.52)	Loss_d 0.690 (0.690)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.52 (  0.52)	test_corr_d   0.21 (  0.21)
Test: [  10/  26]	Loss 0.687 (0.691)	test_acc   0.54 (  0.52)	test_minacc   0.43 (  0.52)	test_majacc   0.56 (  0.51)	Loss_d 0.687 (0.691)	test_acc_d   0.54 (  0.52)	test_minacc_d   0.43 (  0.52)	test_majacc_d   0.56 (  0.51)	test_corr_d   0.18 (  0.17)
Test: [  20/  26]	Loss 0.690 (0.690)	test_acc   0.52 (  0.52)	test_minacc   0.53 (  0.52)	test_majacc   0.52 (  0.52)	Loss_d 0.690 (0.690)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.53 (  0.52)	test_majacc_d   0.52 (  0.52)	test_corr_d   0.18 (  0.17)
Test: [  26/  26]	Loss 0.692 (0.690)	test_acc   0.50 (  0.52)	test_minacc   0.46 (  0.52)	test_majacc   0.51 (  0.52)	Loss_d 0.692 (0.690)	test_acc_d   0.50 (  0.52)	test_minacc_d   0.46 (  0.52)	test_majacc_d   0.51 (  0.52)	test_corr_d   0.17 (  0.18)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 67.02it/s]
Test: [  0/  1]	Loss 0.690 (0.690)	test_acc   0.52 (  0.52)	test_minacc   0.52 (  0.52)	test_majacc   0.52 (  0.52)	Loss_d 0.690 (0.690)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.52 (  0.52)	test_corr_d  -0.18 ( -0.18)
Test: [  1/  1]	Loss 0.690 (0.690)	test_acc   0.52 (  0.52)	test_minacc   0.52 (  0.52)	test_majacc   0.52 (  0.52)	Loss_d 0.690 (0.690)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.52 (  0.52)	test_corr_d  -0.18 ( -0.18)
Overall Timing[ 30/  1]	epoch_time 0.0361 (0.0375)	validation_time 0.0004 (0.0006)	train_time 0.0357 (0.0367)
record: (train_acc, test_acc) (0.6775000246167183, 0.6940000057220459)
last accs (train_acc, test_acc) (0.5178000175356865, 0.5190000534057617)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.73it/s] 19%|#9        | 5/26 [00:00<00:00, 21.34it/s] 35%|###4      | 9/26 [00:00<00:00, 26.28it/s] 50%|#####     | 13/26 [00:00<00:00, 27.98it/s] 65%|######5   | 17/26 [00:00<00:00, 29.39it/s] 81%|########  | 21/26 [00:00<00:00, 30.71it/s] 96%|#########6| 25/26 [00:00<00:00, 31.83it/s]100%|##########| 26/26 [00:00<00:00, 27.23it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 806 400
penalty weights 10000.0
args.step pgd_anneal_iters 806 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 807 400
penalty weights 10000.0
args.step pgd_anneal_iters 807 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 808 400
penalty weights 10000.0
args.step pgd_anneal_iters 808 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 809 400
penalty weights 10000.0
args.step pgd_anneal_iters 809 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 810 400
penalty weights 10000.0
args.step pgd_anneal_iters 810 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 811 400
penalty weights 10000.0
args.step pgd_anneal_iters 811 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 812 400
penalty weights 10000.0
args.step pgd_anneal_iters 812 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 813 400
penalty weights 10000.0
args.step pgd_anneal_iters 813 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 814 400
penalty weights 10000.0
args.step pgd_anneal_iters 814 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 815 400
penalty weights 10000.0
args.step pgd_anneal_iters 815 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 816 400
penalty weights 10000.0
args.step pgd_anneal_iters 816 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 817 400
penalty weights 10000.0
args.step pgd_anneal_iters 817 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 818 400
penalty weights 10000.0
args.step pgd_anneal_iters 818 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 819 400
penalty weights 10000.0
args.step pgd_anneal_iters 819 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 820 400
penalty weights 10000.0
args.step pgd_anneal_iters 820 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 821 400
penalty weights 10000.0
args.step pgd_anneal_iters 821 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 822 400
penalty weights 10000.0
args.step pgd_anneal_iters 822 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 823 400
penalty weights 10000.0
args.step pgd_anneal_iters 823 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 824 400
penalty weights 10000.0
args.step pgd_anneal_iters 824 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 825 400
penalty weights 10000.0
args.step pgd_anneal_iters 825 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 826 400
penalty weights 10000.0
args.step pgd_anneal_iters 826 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 827 400
penalty weights 10000.0
args.step pgd_anneal_iters 827 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 828 400
penalty weights 10000.0
args.step pgd_anneal_iters 828 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 829 400
penalty weights 10000.0
args.step pgd_anneal_iters 829 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 830 400
penalty weights 10000.0
args.step pgd_anneal_iters 830 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 831 400
penalty weights 10000.0
args.step pgd_anneal_iters 831 600
dim_v 512
Epoch: [31][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.16 (  0.16)	train_acc   0.50 (  0.52)	train_minacc   0.46 (  0.52)	train_majacc   0.51 (  0.52)	train_corr   0.00 (  0.00)	l1 8.3464 (8.3573)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.37it/s] 23%|##3       | 6/26 [00:00<00:00, 26.64it/s]                                               23%|##3       | 6/26 [00:00<00:00, 26.64it/s] 42%|####2     | 11/26 [00:00<00:00, 35.75it/s] 65%|######5   | 17/26 [00:00<00:00, 43.74it/s]                                                65%|######5   | 17/26 [00:00<00:00, 43.74it/s] 85%|########4 | 22/26 [00:00<00:00, 44.17it/s]100%|##########| 26/26 [00:00<00:00, 38.47it/s]
Test: [   0/  26]	Loss 0.691 (0.691)	test_acc   0.52 (  0.52)	test_minacc   0.52 (  0.52)	test_majacc   0.52 (  0.52)	Loss_d 0.691 (0.691)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.52 (  0.52)	test_corr_d   0.20 (  0.20)
Test: [  10/  26]	Loss 0.688 (0.691)	test_acc   0.54 (  0.52)	test_minacc   0.43 (  0.52)	test_majacc   0.56 (  0.51)	Loss_d 0.688 (0.691)	test_acc_d   0.54 (  0.52)	test_minacc_d   0.43 (  0.52)	test_majacc_d   0.56 (  0.51)	test_corr_d   0.17 (  0.16)
Test: [  20/  26]	Loss 0.690 (0.691)	test_acc   0.52 (  0.52)	test_minacc   0.53 (  0.52)	test_majacc   0.52 (  0.52)	Loss_d 0.690 (0.691)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.53 (  0.52)	test_majacc_d   0.52 (  0.52)	test_corr_d   0.18 (  0.16)
Test: [  26/  26]	Loss 0.693 (0.691)	test_acc   0.50 (  0.52)	test_minacc   0.46 (  0.52)	test_majacc   0.51 (  0.52)	Loss_d 0.693 (0.691)	test_acc_d   0.50 (  0.52)	test_minacc_d   0.46 (  0.52)	test_majacc_d   0.51 (  0.52)	test_corr_d   0.16 (  0.16)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.42it/s]
Test: [  0/  1]	Loss 0.691 (0.691)	test_acc   0.52 (  0.52)	test_minacc   0.52 (  0.52)	test_majacc   0.52 (  0.52)	Loss_d 0.691 (0.691)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.52 (  0.52)	test_corr_d  -0.17 ( -0.17)
Test: [  1/  1]	Loss 0.691 (0.691)	test_acc   0.52 (  0.52)	test_minacc   0.52 (  0.52)	test_majacc   0.52 (  0.52)	Loss_d 0.691 (0.691)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.52 (  0.52)	test_corr_d  -0.17 ( -0.17)
Overall Timing[ 31/  1]	epoch_time 0.0354 (0.0374)	validation_time 0.0003 (0.0006)	train_time 0.0351 (0.0366)
record: (train_acc, test_acc) (0.6775000246167183, 0.6940000057220459)
last accs (train_acc, test_acc) (0.5178000130951405, 0.5190000534057617)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.57it/s] 15%|#5        | 4/26 [00:00<00:01, 20.88it/s] 27%|##6       | 7/26 [00:00<00:00, 24.75it/s] 42%|####2     | 11/26 [00:00<00:00, 28.73it/s] 58%|#####7    | 15/26 [00:00<00:00, 30.92it/s] 73%|#######3  | 19/26 [00:00<00:00, 31.90it/s] 88%|########8 | 23/26 [00:00<00:00, 32.47it/s]100%|##########| 26/26 [00:00<00:00, 28.08it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 832 400
penalty weights 10000.0
args.step pgd_anneal_iters 832 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 833 400
penalty weights 10000.0
args.step pgd_anneal_iters 833 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 834 400
penalty weights 10000.0
args.step pgd_anneal_iters 834 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 835 400
penalty weights 10000.0
args.step pgd_anneal_iters 835 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 836 400
penalty weights 10000.0
args.step pgd_anneal_iters 836 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 837 400
penalty weights 10000.0
args.step pgd_anneal_iters 837 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 838 400
penalty weights 10000.0
args.step pgd_anneal_iters 838 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 839 400
penalty weights 10000.0
args.step pgd_anneal_iters 839 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 840 400
penalty weights 10000.0
args.step pgd_anneal_iters 840 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 841 400
penalty weights 10000.0
args.step pgd_anneal_iters 841 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 842 400
penalty weights 10000.0
args.step pgd_anneal_iters 842 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 843 400
penalty weights 10000.0
args.step pgd_anneal_iters 843 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 844 400
penalty weights 10000.0
args.step pgd_anneal_iters 844 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 845 400
penalty weights 10000.0
args.step pgd_anneal_iters 845 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 846 400
penalty weights 10000.0
args.step pgd_anneal_iters 846 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 847 400
penalty weights 10000.0
args.step pgd_anneal_iters 847 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 848 400
penalty weights 10000.0
args.step pgd_anneal_iters 848 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 849 400
penalty weights 10000.0
args.step pgd_anneal_iters 849 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 850 400
penalty weights 10000.0
args.step pgd_anneal_iters 850 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 851 400
penalty weights 10000.0
args.step pgd_anneal_iters 851 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 852 400
penalty weights 10000.0
args.step pgd_anneal_iters 852 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 853 400
penalty weights 10000.0
args.step pgd_anneal_iters 853 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 854 400
penalty weights 10000.0
args.step pgd_anneal_iters 854 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 855 400
penalty weights 10000.0
args.step pgd_anneal_iters 855 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 856 400
penalty weights 10000.0
args.step pgd_anneal_iters 856 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 857 400
penalty weights 10000.0
args.step pgd_anneal_iters 857 600
dim_v 512
Epoch: [32][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.16 (  0.16)	train_acc   0.50 (  0.52)	train_minacc   0.46 (  0.52)	train_majacc   0.51 (  0.52)	train_corr   0.00 (  0.00)	l1 8.3218 (8.3317)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.52it/s] 27%|##6       | 7/26 [00:00<00:00, 36.16it/s]                                               27%|##6       | 7/26 [00:00<00:00, 36.16it/s] 46%|####6     | 12/26 [00:00<00:00, 41.83it/s] 65%|######5   | 17/26 [00:00<00:00, 42.51it/s]                                                65%|######5   | 17/26 [00:00<00:00, 42.51it/s] 88%|########8 | 23/26 [00:00<00:00, 46.86it/s]100%|##########| 26/26 [00:00<00:00, 39.72it/s]
Test: [   0/  26]	Loss 0.691 (0.691)	test_acc   0.52 (  0.52)	test_minacc   0.52 (  0.52)	test_majacc   0.52 (  0.52)	Loss_d 0.691 (0.691)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.52 (  0.52)	test_corr_d   0.19 (  0.19)
Test: [  10/  26]	Loss 0.688 (0.691)	test_acc   0.54 (  0.52)	test_minacc   0.43 (  0.52)	test_majacc   0.56 (  0.51)	Loss_d 0.688 (0.691)	test_acc_d   0.54 (  0.52)	test_minacc_d   0.43 (  0.52)	test_majacc_d   0.56 (  0.51)	test_corr_d   0.16 (  0.15)
Test: [  20/  26]	Loss 0.691 (0.691)	test_acc   0.52 (  0.52)	test_minacc   0.53 (  0.52)	test_majacc   0.52 (  0.52)	Loss_d 0.691 (0.691)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.53 (  0.52)	test_majacc_d   0.52 (  0.52)	test_corr_d   0.17 (  0.15)
Test: [  26/  26]	Loss 0.693 (0.691)	test_acc   0.50 (  0.52)	test_minacc   0.46 (  0.52)	test_majacc   0.51 (  0.52)	Loss_d 0.693 (0.691)	test_acc_d   0.50 (  0.52)	test_minacc_d   0.46 (  0.52)	test_majacc_d   0.51 (  0.52)	test_corr_d   0.15 (  0.15)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.74it/s]
Test: [  0/  1]	Loss 0.691 (0.691)	test_acc   0.52 (  0.52)	test_minacc   0.52 (  0.52)	test_majacc   0.52 (  0.52)	Loss_d 0.691 (0.691)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.52 (  0.52)	test_corr_d  -0.16 ( -0.16)
Test: [  1/  1]	Loss 0.691 (0.691)	test_acc   0.52 (  0.52)	test_minacc   0.52 (  0.52)	test_majacc   0.52 (  0.52)	Loss_d 0.691 (0.691)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.52 (  0.52)	test_corr_d  -0.16 ( -0.16)
Overall Timing[ 32/  1]	epoch_time 0.0361 (0.0374)	validation_time 0.0006 (0.0006)	train_time 0.0354 (0.0366)
record: (train_acc, test_acc) (0.6775000246167183, 0.6940000057220459)
last accs (train_acc, test_acc) (0.5178000130951405, 0.5190000534057617)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.81it/s] 19%|#9        | 5/26 [00:00<00:00, 23.41it/s] 35%|###4      | 9/26 [00:00<00:00, 28.05it/s] 50%|#####     | 13/26 [00:00<00:00, 30.45it/s] 65%|######5   | 17/26 [00:00<00:00, 32.09it/s] 81%|########  | 21/26 [00:00<00:00, 33.21it/s] 96%|#########6| 25/26 [00:00<00:00, 32.85it/s]100%|##########| 26/26 [00:00<00:00, 29.04it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 858 400
penalty weights 10000.0
args.step pgd_anneal_iters 858 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 859 400
penalty weights 10000.0
args.step pgd_anneal_iters 859 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 860 400
penalty weights 10000.0
args.step pgd_anneal_iters 860 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 861 400
penalty weights 10000.0
args.step pgd_anneal_iters 861 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 862 400
penalty weights 10000.0
args.step pgd_anneal_iters 862 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 863 400
penalty weights 10000.0
args.step pgd_anneal_iters 863 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 864 400
penalty weights 10000.0
args.step pgd_anneal_iters 864 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 865 400
penalty weights 10000.0
args.step pgd_anneal_iters 865 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 866 400
penalty weights 10000.0
args.step pgd_anneal_iters 866 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 867 400
penalty weights 10000.0
args.step pgd_anneal_iters 867 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 868 400
penalty weights 10000.0
args.step pgd_anneal_iters 868 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 869 400
penalty weights 10000.0
args.step pgd_anneal_iters 869 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 870 400
penalty weights 10000.0
args.step pgd_anneal_iters 870 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 871 400
penalty weights 10000.0
args.step pgd_anneal_iters 871 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 872 400
penalty weights 10000.0
args.step pgd_anneal_iters 872 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 873 400
penalty weights 10000.0
args.step pgd_anneal_iters 873 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 874 400
penalty weights 10000.0
args.step pgd_anneal_iters 874 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 875 400
penalty weights 10000.0
args.step pgd_anneal_iters 875 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 876 400
penalty weights 10000.0
args.step pgd_anneal_iters 876 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 877 400
penalty weights 10000.0
args.step pgd_anneal_iters 877 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 878 400
penalty weights 10000.0
args.step pgd_anneal_iters 878 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 879 400
penalty weights 10000.0
args.step pgd_anneal_iters 879 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 880 400
penalty weights 10000.0
args.step pgd_anneal_iters 880 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 881 400
penalty weights 10000.0
args.step pgd_anneal_iters 881 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 882 400
penalty weights 10000.0
args.step pgd_anneal_iters 882 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 883 400
penalty weights 10000.0
args.step pgd_anneal_iters 883 600
dim_v 512
Epoch: [33][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.15 (  0.16)	train_acc   0.50 (  0.52)	train_minacc   0.46 (  0.52)	train_majacc   0.51 (  0.52)	train_corr   0.00 (  0.00)	l1 8.2998 (8.3087)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  6.18it/s] 23%|##3       | 6/26 [00:00<00:00, 26.37it/s]                                               23%|##3       | 6/26 [00:00<00:00, 26.37it/s] 46%|####6     | 12/26 [00:00<00:00, 38.02it/s] 65%|######5   | 17/26 [00:00<00:00, 40.34it/s]                                                65%|######5   | 17/26 [00:00<00:00, 40.34it/s] 88%|########8 | 23/26 [00:00<00:00, 45.93it/s]100%|##########| 26/26 [00:00<00:00, 37.00it/s]
Test: [   0/  26]	Loss 0.691 (0.691)	test_acc   0.52 (  0.52)	test_minacc   0.52 (  0.52)	test_majacc   0.52 (  0.52)	Loss_d 0.691 (0.691)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.52 (  0.52)	test_corr_d   0.18 (  0.18)
Test: [  10/  26]	Loss 0.689 (0.692)	test_acc   0.54 (  0.52)	test_minacc   0.43 (  0.52)	test_majacc   0.56 (  0.51)	Loss_d 0.689 (0.692)	test_acc_d   0.54 (  0.52)	test_minacc_d   0.43 (  0.52)	test_majacc_d   0.56 (  0.51)	test_corr_d   0.15 (  0.14)
Test: [  20/  26]	Loss 0.691 (0.691)	test_acc   0.52 (  0.52)	test_minacc   0.53 (  0.52)	test_majacc   0.52 (  0.52)	Loss_d 0.691 (0.691)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.53 (  0.52)	test_majacc_d   0.52 (  0.52)	test_corr_d   0.16 (  0.14)
Test: [  26/  26]	Loss 0.693 (0.691)	test_acc   0.50 (  0.52)	test_minacc   0.46 (  0.52)	test_majacc   0.51 (  0.52)	Loss_d 0.693 (0.691)	test_acc_d   0.50 (  0.52)	test_minacc_d   0.46 (  0.52)	test_majacc_d   0.51 (  0.52)	test_corr_d   0.14 (  0.14)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.60it/s]
Test: [  0/  1]	Loss 0.691 (0.691)	test_acc   0.52 (  0.52)	test_minacc   0.52 (  0.52)	test_majacc   0.52 (  0.52)	Loss_d 0.691 (0.691)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.52 (  0.52)	test_corr_d  -0.15 ( -0.15)
Test: [  1/  1]	Loss 0.691 (0.691)	test_acc   0.52 (  0.52)	test_minacc   0.52 (  0.52)	test_majacc   0.52 (  0.52)	Loss_d 0.691 (0.691)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.52 (  0.52)	test_corr_d  -0.15 ( -0.15)
Overall Timing[ 33/  1]	epoch_time 0.0358 (0.0373)	validation_time 0.0003 (0.0006)	train_time 0.0354 (0.0365)
record: (train_acc, test_acc) (0.6775000246167183, 0.6940000057220459)
last accs (train_acc, test_acc) (0.5177000142633915, 0.5190000534057617)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.11it/s] 19%|#9        | 5/26 [00:00<00:01, 17.59it/s] 35%|###4      | 9/26 [00:00<00:00, 24.29it/s] 50%|#####     | 13/26 [00:00<00:00, 28.13it/s] 65%|######5   | 17/26 [00:00<00:00, 30.76it/s] 81%|########  | 21/26 [00:00<00:00, 32.53it/s] 96%|#########6| 25/26 [00:00<00:00, 33.70it/s]100%|##########| 26/26 [00:00<00:00, 27.05it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 884 400
penalty weights 10000.0
args.step pgd_anneal_iters 884 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 885 400
penalty weights 10000.0
args.step pgd_anneal_iters 885 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 886 400
penalty weights 10000.0
args.step pgd_anneal_iters 886 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 887 400
penalty weights 10000.0
args.step pgd_anneal_iters 887 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 888 400
penalty weights 10000.0
args.step pgd_anneal_iters 888 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 889 400
penalty weights 10000.0
args.step pgd_anneal_iters 889 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 890 400
penalty weights 10000.0
args.step pgd_anneal_iters 890 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 891 400
penalty weights 10000.0
args.step pgd_anneal_iters 891 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 892 400
penalty weights 10000.0
args.step pgd_anneal_iters 892 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 893 400
penalty weights 10000.0
args.step pgd_anneal_iters 893 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 894 400
penalty weights 10000.0
args.step pgd_anneal_iters 894 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 895 400
penalty weights 10000.0
args.step pgd_anneal_iters 895 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 896 400
penalty weights 10000.0
args.step pgd_anneal_iters 896 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 897 400
penalty weights 10000.0
args.step pgd_anneal_iters 897 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 898 400
penalty weights 10000.0
args.step pgd_anneal_iters 898 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 899 400
penalty weights 10000.0
args.step pgd_anneal_iters 899 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 900 400
penalty weights 10000.0
args.step pgd_anneal_iters 900 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 901 400
penalty weights 10000.0
args.step pgd_anneal_iters 901 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 902 400
penalty weights 10000.0
args.step pgd_anneal_iters 902 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 903 400
penalty weights 10000.0
args.step pgd_anneal_iters 903 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 904 400
penalty weights 10000.0
args.step pgd_anneal_iters 904 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 905 400
penalty weights 10000.0
args.step pgd_anneal_iters 905 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 906 400
penalty weights 10000.0
args.step pgd_anneal_iters 906 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 907 400
penalty weights 10000.0
args.step pgd_anneal_iters 907 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 908 400
penalty weights 10000.0
args.step pgd_anneal_iters 908 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 909 400
penalty weights 10000.0
args.step pgd_anneal_iters 909 600
dim_v 512
Epoch: [34][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.15 (  0.15)	train_acc   0.50 (  0.52)	train_minacc   0.46 (  0.52)	train_majacc   0.51 (  0.52)	train_corr   0.00 (  0.00)	l1 8.2803 (8.2882)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 19.25it/s] 31%|###       | 8/26 [00:00<00:00, 40.72it/s]                                               31%|###       | 8/26 [00:00<00:00, 40.72it/s] 50%|#####     | 13/26 [00:00<00:00, 42.42it/s] 73%|#######3  | 19/26 [00:00<00:00, 46.93it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 46.93it/s] 96%|#########6| 25/26 [00:00<00:00, 47.88it/s]100%|##########| 26/26 [00:00<00:00, 41.63it/s]
Test: [   0/  26]	Loss 0.691 (0.691)	test_acc   0.52 (  0.52)	test_minacc   0.52 (  0.52)	test_majacc   0.52 (  0.52)	Loss_d 0.691 (0.691)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.52 (  0.52)	test_corr_d   0.16 (  0.16)
Test: [  10/  26]	Loss 0.689 (0.692)	test_acc   0.54 (  0.52)	test_minacc   0.45 (  0.52)	test_majacc   0.56 (  0.51)	Loss_d 0.689 (0.692)	test_acc_d   0.54 (  0.52)	test_minacc_d   0.45 (  0.52)	test_majacc_d   0.56 (  0.51)	test_corr_d   0.14 (  0.12)
Test: [  20/  26]	Loss 0.691 (0.692)	test_acc   0.52 (  0.52)	test_minacc   0.53 (  0.52)	test_majacc   0.52 (  0.52)	Loss_d 0.691 (0.692)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.53 (  0.52)	test_majacc_d   0.52 (  0.52)	test_corr_d   0.14 (  0.12)
Test: [  26/  26]	Loss 0.693 (0.692)	test_acc   0.50 (  0.52)	test_minacc   0.46 (  0.52)	test_majacc   0.51 (  0.52)	Loss_d 0.693 (0.692)	test_acc_d   0.50 (  0.52)	test_minacc_d   0.46 (  0.52)	test_majacc_d   0.51 (  0.52)	test_corr_d   0.13 (  0.12)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.57it/s]
Test: [  0/  1]	Loss 0.691 (0.691)	test_acc   0.52 (  0.52)	test_minacc   0.52 (  0.52)	test_majacc   0.52 (  0.52)	Loss_d 0.691 (0.691)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.52 (  0.52)	test_corr_d  -0.14 ( -0.14)
Test: [  1/  1]	Loss 0.691 (0.691)	test_acc   0.52 (  0.52)	test_minacc   0.52 (  0.52)	test_majacc   0.52 (  0.52)	Loss_d 0.691 (0.691)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.52 (  0.52)	test_corr_d  -0.14 ( -0.14)
Overall Timing[ 34/  1]	epoch_time 0.0362 (0.0373)	validation_time 0.0004 (0.0006)	train_time 0.0358 (0.0365)
record: (train_acc, test_acc) (0.6775000246167183, 0.6940000057220459)
last accs (train_acc, test_acc) (0.5176000154316426, 0.5190000534057617)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.71it/s] 19%|#9        | 5/26 [00:00<00:01, 19.20it/s] 35%|###4      | 9/26 [00:00<00:00, 25.47it/s] 50%|#####     | 13/26 [00:00<00:00, 28.59it/s] 65%|######5   | 17/26 [00:00<00:00, 30.93it/s] 81%|########  | 21/26 [00:00<00:00, 32.41it/s] 96%|#########6| 25/26 [00:00<00:00, 33.32it/s]100%|##########| 26/26 [00:00<00:00, 27.42it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 910 400
penalty weights 10000.0
args.step pgd_anneal_iters 910 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 911 400
penalty weights 10000.0
args.step pgd_anneal_iters 911 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 912 400
penalty weights 10000.0
args.step pgd_anneal_iters 912 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 913 400
penalty weights 10000.0
args.step pgd_anneal_iters 913 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 914 400
penalty weights 10000.0
args.step pgd_anneal_iters 914 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 915 400
penalty weights 10000.0
args.step pgd_anneal_iters 915 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 916 400
penalty weights 10000.0
args.step pgd_anneal_iters 916 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 917 400
penalty weights 10000.0
args.step pgd_anneal_iters 917 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 918 400
penalty weights 10000.0
args.step pgd_anneal_iters 918 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 919 400
penalty weights 10000.0
args.step pgd_anneal_iters 919 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 920 400
penalty weights 10000.0
args.step pgd_anneal_iters 920 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 921 400
penalty weights 10000.0
args.step pgd_anneal_iters 921 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 922 400
penalty weights 10000.0
args.step pgd_anneal_iters 922 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 923 400
penalty weights 10000.0
args.step pgd_anneal_iters 923 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 924 400
penalty weights 10000.0
args.step pgd_anneal_iters 924 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 925 400
penalty weights 10000.0
args.step pgd_anneal_iters 925 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 926 400
penalty weights 10000.0
args.step pgd_anneal_iters 926 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 927 400
penalty weights 10000.0
args.step pgd_anneal_iters 927 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 928 400
penalty weights 10000.0
args.step pgd_anneal_iters 928 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 929 400
penalty weights 10000.0
args.step pgd_anneal_iters 929 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 930 400
penalty weights 10000.0
args.step pgd_anneal_iters 930 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 931 400
penalty weights 10000.0
args.step pgd_anneal_iters 931 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 932 400
penalty weights 10000.0
args.step pgd_anneal_iters 932 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 933 400
penalty weights 10000.0
args.step pgd_anneal_iters 933 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 934 400
penalty weights 10000.0
args.step pgd_anneal_iters 934 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 935 400
penalty weights 10000.0
args.step pgd_anneal_iters 935 600
dim_v 512
Epoch: [35][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.15 (  0.15)	train_acc   0.50 (  0.52)	train_minacc   0.46 (  0.52)	train_majacc   0.51 (  0.52)	train_corr   0.00 (  0.00)	l1 8.2628 (8.2699)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.42it/s] 27%|##6       | 7/26 [00:00<00:00, 37.69it/s]                                               27%|##6       | 7/26 [00:00<00:00, 37.69it/s] 50%|#####     | 13/26 [00:00<00:00, 41.32it/s] 73%|#######3  | 19/26 [00:00<00:00, 46.44it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 46.44it/s] 96%|#########6| 25/26 [00:00<00:00, 47.24it/s]100%|##########| 26/26 [00:00<00:00, 40.37it/s]
Test: [   0/  26]	Loss 0.692 (0.692)	test_acc   0.52 (  0.52)	test_minacc   0.52 (  0.52)	test_majacc   0.52 (  0.52)	Loss_d 0.692 (0.692)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.52 (  0.52)	test_corr_d   0.15 (  0.15)
Test: [  10/  26]	Loss 0.690 (0.692)	test_acc   0.54 (  0.52)	test_minacc   0.45 (  0.52)	test_majacc   0.56 (  0.51)	Loss_d 0.690 (0.692)	test_acc_d   0.54 (  0.52)	test_minacc_d   0.45 (  0.52)	test_majacc_d   0.56 (  0.51)	test_corr_d   0.12 (  0.11)
Test: [  20/  26]	Loss 0.692 (0.692)	test_acc   0.53 (  0.52)	test_minacc   0.55 (  0.53)	test_majacc   0.52 (  0.52)	Loss_d 0.692 (0.692)	test_acc_d   0.53 (  0.52)	test_minacc_d   0.55 (  0.53)	test_majacc_d   0.52 (  0.52)	test_corr_d   0.13 (  0.10)
Test: [  26/  26]	Loss 0.693 (0.692)	test_acc   0.50 (  0.52)	test_minacc   0.46 (  0.52)	test_majacc   0.51 (  0.52)	Loss_d 0.693 (0.692)	test_acc_d   0.50 (  0.52)	test_minacc_d   0.46 (  0.52)	test_majacc_d   0.51 (  0.52)	test_corr_d   0.11 (  0.10)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.35it/s]
Test: [  0/  1]	Loss 0.692 (0.692)	test_acc   0.52 (  0.52)	test_minacc   0.52 (  0.52)	test_majacc   0.52 (  0.52)	Loss_d 0.692 (0.692)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.52 (  0.52)	test_corr_d  -0.13 ( -0.13)
Test: [  1/  1]	Loss 0.692 (0.692)	test_acc   0.52 (  0.52)	test_minacc   0.52 (  0.52)	test_majacc   0.52 (  0.52)	Loss_d 0.692 (0.692)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.52 (  0.52)	test_corr_d  -0.13 ( -0.13)
Overall Timing[ 35/  1]	epoch_time 0.0375 (0.0373)	validation_time 0.0003 (0.0006)	train_time 0.0372 (0.0365)
record: (train_acc, test_acc) (0.6775000246167183, 0.6940000057220459)
last accs (train_acc, test_acc) (0.5180000165700912, 0.5190000534057617)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.98it/s] 19%|#9        | 5/26 [00:00<00:01, 20.33it/s] 35%|###4      | 9/26 [00:00<00:00, 25.13it/s] 50%|#####     | 13/26 [00:00<00:00, 28.05it/s] 65%|######5   | 17/26 [00:00<00:00, 30.34it/s] 81%|########  | 21/26 [00:00<00:00, 31.86it/s] 96%|#########6| 25/26 [00:00<00:00, 32.64it/s]100%|##########| 26/26 [00:00<00:00, 27.26it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 936 400
penalty weights 10000.0
args.step pgd_anneal_iters 936 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 937 400
penalty weights 10000.0
args.step pgd_anneal_iters 937 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 938 400
penalty weights 10000.0
args.step pgd_anneal_iters 938 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 939 400
penalty weights 10000.0
args.step pgd_anneal_iters 939 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 940 400
penalty weights 10000.0
args.step pgd_anneal_iters 940 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 941 400
penalty weights 10000.0
args.step pgd_anneal_iters 941 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 942 400
penalty weights 10000.0
args.step pgd_anneal_iters 942 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 943 400
penalty weights 10000.0
args.step pgd_anneal_iters 943 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 944 400
penalty weights 10000.0
args.step pgd_anneal_iters 944 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 945 400
penalty weights 10000.0
args.step pgd_anneal_iters 945 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 946 400
penalty weights 10000.0
args.step pgd_anneal_iters 946 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 947 400
penalty weights 10000.0
args.step pgd_anneal_iters 947 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 948 400
penalty weights 10000.0
args.step pgd_anneal_iters 948 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 949 400
penalty weights 10000.0
args.step pgd_anneal_iters 949 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 950 400
penalty weights 10000.0
args.step pgd_anneal_iters 950 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 951 400
penalty weights 10000.0
args.step pgd_anneal_iters 951 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 952 400
penalty weights 10000.0
args.step pgd_anneal_iters 952 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 953 400
penalty weights 10000.0
args.step pgd_anneal_iters 953 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 954 400
penalty weights 10000.0
args.step pgd_anneal_iters 954 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 955 400
penalty weights 10000.0
args.step pgd_anneal_iters 955 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 956 400
penalty weights 10000.0
args.step pgd_anneal_iters 956 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 957 400
penalty weights 10000.0
args.step pgd_anneal_iters 957 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 958 400
penalty weights 10000.0
args.step pgd_anneal_iters 958 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 959 400
penalty weights 10000.0
args.step pgd_anneal_iters 959 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 960 400
penalty weights 10000.0
args.step pgd_anneal_iters 960 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 961 400
penalty weights 10000.0
args.step pgd_anneal_iters 961 600
dim_v 512
Epoch: [36][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.15 (  0.15)	train_acc   0.50 (  0.52)	train_minacc   0.46 (  0.52)	train_majacc   0.51 (  0.52)	train_corr   0.00 (  0.00)	l1 8.2473 (8.2536)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:00, 27.18it/s] 35%|###4      | 9/26 [00:00<00:00, 39.32it/s]                                               35%|###4      | 9/26 [00:00<00:00, 39.32it/s] 58%|#####7    | 15/26 [00:00<00:00, 44.69it/s]                                                58%|#####7    | 15/26 [00:00<00:00, 44.69it/s] 81%|########  | 21/26 [00:00<00:00, 46.98it/s]100%|##########| 26/26 [00:00<00:00, 42.91it/s]
Test: [   0/  26]	Loss 0.692 (0.692)	test_acc   0.52 (  0.52)	test_minacc   0.52 (  0.52)	test_majacc   0.52 (  0.52)	Loss_d 0.692 (0.692)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.52 (  0.52)	test_corr_d   0.13 (  0.13)
Test: [  10/  26]	Loss 0.690 (0.692)	test_acc   0.54 (  0.52)	test_minacc   0.45 (  0.52)	test_majacc   0.56 (  0.51)	Loss_d 0.690 (0.692)	test_acc_d   0.54 (  0.52)	test_minacc_d   0.45 (  0.52)	test_majacc_d   0.56 (  0.51)	test_corr_d   0.11 (  0.09)
Test: [  20/  26]	Loss 0.692 (0.692)	test_acc   0.53 (  0.52)	test_minacc   0.55 (  0.53)	test_majacc   0.52 (  0.52)	Loss_d 0.692 (0.692)	test_acc_d   0.53 (  0.52)	test_minacc_d   0.55 (  0.53)	test_majacc_d   0.52 (  0.52)	test_corr_d   0.11 (  0.08)
Test: [  26/  26]	Loss 0.693 (0.692)	test_acc   0.50 (  0.52)	test_minacc   0.46 (  0.52)	test_majacc   0.51 (  0.52)	Loss_d 0.693 (0.692)	test_acc_d   0.50 (  0.52)	test_minacc_d   0.46 (  0.52)	test_majacc_d   0.51 (  0.52)	test_corr_d   0.10 (  0.09)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.76it/s]
Test: [  0/  1]	Loss 0.692 (0.692)	test_acc   0.52 (  0.52)	test_minacc   0.52 (  0.52)	test_majacc   0.52 (  0.52)	Loss_d 0.692 (0.692)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.52 (  0.52)	test_corr_d  -0.12 ( -0.12)
Test: [  1/  1]	Loss 0.692 (0.692)	test_acc   0.52 (  0.52)	test_minacc   0.52 (  0.52)	test_majacc   0.52 (  0.52)	Loss_d 0.692 (0.692)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.52 (  0.52)	test_corr_d  -0.12 ( -0.12)
Overall Timing[ 36/  1]	epoch_time 0.0369 (0.0373)	validation_time 0.0004 (0.0006)	train_time 0.0365 (0.0365)
record: (train_acc, test_acc) (0.6775000246167183, 0.6940000057220459)
last accs (train_acc, test_acc) (0.5185000140070916, 0.5180000066757202)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  6.08it/s] 19%|#9        | 5/26 [00:00<00:01, 19.53it/s] 35%|###4      | 9/26 [00:00<00:00, 25.27it/s] 50%|#####     | 13/26 [00:00<00:00, 28.90it/s] 65%|######5   | 17/26 [00:00<00:00, 31.07it/s] 81%|########  | 21/26 [00:00<00:00, 31.82it/s] 96%|#########6| 25/26 [00:00<00:00, 32.47it/s]100%|##########| 26/26 [00:00<00:00, 27.45it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 962 400
penalty weights 10000.0
args.step pgd_anneal_iters 962 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 963 400
penalty weights 10000.0
args.step pgd_anneal_iters 963 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 964 400
penalty weights 10000.0
args.step pgd_anneal_iters 964 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 965 400
penalty weights 10000.0
args.step pgd_anneal_iters 965 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 966 400
penalty weights 10000.0
args.step pgd_anneal_iters 966 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 967 400
penalty weights 10000.0
args.step pgd_anneal_iters 967 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 968 400
penalty weights 10000.0
args.step pgd_anneal_iters 968 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 969 400
penalty weights 10000.0
args.step pgd_anneal_iters 969 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 970 400
penalty weights 10000.0
args.step pgd_anneal_iters 970 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 971 400
penalty weights 10000.0
args.step pgd_anneal_iters 971 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 972 400
penalty weights 10000.0
args.step pgd_anneal_iters 972 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 973 400
penalty weights 10000.0
args.step pgd_anneal_iters 973 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 974 400
penalty weights 10000.0
args.step pgd_anneal_iters 974 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 975 400
penalty weights 10000.0
args.step pgd_anneal_iters 975 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 976 400
penalty weights 10000.0
args.step pgd_anneal_iters 976 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 977 400
penalty weights 10000.0
args.step pgd_anneal_iters 977 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 978 400
penalty weights 10000.0
args.step pgd_anneal_iters 978 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 979 400
penalty weights 10000.0
args.step pgd_anneal_iters 979 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 980 400
penalty weights 10000.0
args.step pgd_anneal_iters 980 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 981 400
penalty weights 10000.0
args.step pgd_anneal_iters 981 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 982 400
penalty weights 10000.0
args.step pgd_anneal_iters 982 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 983 400
penalty weights 10000.0
args.step pgd_anneal_iters 983 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 984 400
penalty weights 10000.0
args.step pgd_anneal_iters 984 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 985 400
penalty weights 10000.0
args.step pgd_anneal_iters 985 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 986 400
penalty weights 10000.0
args.step pgd_anneal_iters 986 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 987 400
penalty weights 10000.0
args.step pgd_anneal_iters 987 600
dim_v 512
Epoch: [37][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.15 (  0.15)	train_acc   0.50 (  0.52)	train_minacc   0.46 (  0.52)	train_majacc   0.51 (  0.52)	train_corr   0.00 (  0.00)	l1 8.2339 (8.2394)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.75it/s] 23%|##3       | 6/26 [00:00<00:00, 29.70it/s]                                               23%|##3       | 6/26 [00:00<00:00, 29.70it/s] 42%|####2     | 11/26 [00:00<00:00, 37.95it/s] 65%|######5   | 17/26 [00:00<00:00, 43.14it/s]                                                65%|######5   | 17/26 [00:00<00:00, 43.14it/s] 88%|########8 | 23/26 [00:00<00:00, 47.48it/s]100%|##########| 26/26 [00:00<00:00, 38.90it/s]
Test: [   0/  26]	Loss 0.692 (0.692)	test_acc   0.53 (  0.53)	test_minacc   0.54 (  0.54)	test_majacc   0.53 (  0.53)	Loss_d 0.692 (0.692)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.54 (  0.54)	test_majacc_d   0.53 (  0.53)	test_corr_d   0.11 (  0.11)
Test: [  10/  26]	Loss 0.691 (0.693)	test_acc   0.54 (  0.52)	test_minacc   0.45 (  0.53)	test_majacc   0.56 (  0.52)	Loss_d 0.691 (0.693)	test_acc_d   0.54 (  0.52)	test_minacc_d   0.45 (  0.53)	test_majacc_d   0.56 (  0.52)	test_corr_d   0.09 (  0.07)
Test: [  20/  26]	Loss 0.692 (0.692)	test_acc   0.53 (  0.52)	test_minacc   0.55 (  0.53)	test_majacc   0.53 (  0.52)	Loss_d 0.692 (0.692)	test_acc_d   0.53 (  0.52)	test_minacc_d   0.55 (  0.53)	test_majacc_d   0.53 (  0.52)	test_corr_d   0.09 (  0.07)
Test: [  26/  26]	Loss 0.693 (0.692)	test_acc   0.50 (  0.52)	test_minacc   0.46 (  0.52)	test_majacc   0.51 (  0.52)	Loss_d 0.693 (0.692)	test_acc_d   0.50 (  0.52)	test_minacc_d   0.46 (  0.52)	test_majacc_d   0.51 (  0.52)	test_corr_d   0.08 (  0.07)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 65.43it/s]
Test: [  0/  1]	Loss 0.692 (0.692)	test_acc   0.52 (  0.52)	test_minacc   0.52 (  0.52)	test_majacc   0.52 (  0.52)	Loss_d 0.692 (0.692)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.52 (  0.52)	test_corr_d  -0.11 ( -0.11)
Test: [  1/  1]	Loss 0.692 (0.692)	test_acc   0.52 (  0.52)	test_minacc   0.52 (  0.52)	test_majacc   0.52 (  0.52)	Loss_d 0.692 (0.692)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.52 (  0.52)	test_corr_d  -0.11 ( -0.11)
Overall Timing[ 37/  1]	epoch_time 0.0366 (0.0373)	validation_time 0.0006 (0.0006)	train_time 0.0360 (0.0365)
record: (train_acc, test_acc) (0.6775000246167183, 0.6940000057220459)
last accs (train_acc, test_acc) (0.5201000150740147, 0.5200000405311584)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.43it/s] 19%|#9        | 5/26 [00:00<00:00, 22.19it/s] 35%|###4      | 9/26 [00:00<00:00, 26.69it/s] 50%|#####     | 13/26 [00:00<00:00, 29.82it/s] 65%|######5   | 17/26 [00:00<00:00, 31.75it/s] 81%|########  | 21/26 [00:00<00:00, 32.65it/s] 96%|#########6| 25/26 [00:00<00:00, 33.28it/s]100%|##########| 26/26 [00:00<00:00, 28.66it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 988 400
penalty weights 10000.0
args.step pgd_anneal_iters 988 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 989 400
penalty weights 10000.0
args.step pgd_anneal_iters 989 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 990 400
penalty weights 10000.0
args.step pgd_anneal_iters 990 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 991 400
penalty weights 10000.0
args.step pgd_anneal_iters 991 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 992 400
penalty weights 10000.0
args.step pgd_anneal_iters 992 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 993 400
penalty weights 10000.0
args.step pgd_anneal_iters 993 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 994 400
penalty weights 10000.0
args.step pgd_anneal_iters 994 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 995 400
penalty weights 10000.0
args.step pgd_anneal_iters 995 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 996 400
penalty weights 10000.0
args.step pgd_anneal_iters 996 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 997 400
penalty weights 10000.0
args.step pgd_anneal_iters 997 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 998 400
penalty weights 10000.0
args.step pgd_anneal_iters 998 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 999 400
penalty weights 10000.0
args.step pgd_anneal_iters 999 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1000 400
penalty weights 10000.0
args.step pgd_anneal_iters 1000 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1001 400
penalty weights 10000.0
args.step pgd_anneal_iters 1001 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1002 400
penalty weights 10000.0
args.step pgd_anneal_iters 1002 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1003 400
penalty weights 10000.0
args.step pgd_anneal_iters 1003 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1004 400
penalty weights 10000.0
args.step pgd_anneal_iters 1004 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1005 400
penalty weights 10000.0
args.step pgd_anneal_iters 1005 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1006 400
penalty weights 10000.0
args.step pgd_anneal_iters 1006 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1007 400
penalty weights 10000.0
args.step pgd_anneal_iters 1007 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1008 400
penalty weights 10000.0
args.step pgd_anneal_iters 1008 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1009 400
penalty weights 10000.0
args.step pgd_anneal_iters 1009 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1010 400
penalty weights 10000.0
args.step pgd_anneal_iters 1010 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1011 400
penalty weights 10000.0
args.step pgd_anneal_iters 1011 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1012 400
penalty weights 10000.0
args.step pgd_anneal_iters 1012 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1013 400
penalty weights 10000.0
args.step pgd_anneal_iters 1013 600
dim_v 512
Epoch: [38][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.15 (  0.15)	train_acc   0.50 (  0.52)	train_minacc   0.46 (  0.52)	train_majacc   0.51 (  0.52)	train_corr   0.00 (  0.00)	l1 8.2221 (8.2270)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 18.13it/s] 31%|###       | 8/26 [00:00<00:00, 39.76it/s]                                               31%|###       | 8/26 [00:00<00:00, 39.76it/s] 50%|#####     | 13/26 [00:00<00:00, 43.54it/s] 73%|#######3  | 19/26 [00:00<00:00, 47.15it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 47.15it/s] 96%|#########6| 25/26 [00:00<00:00, 48.83it/s]100%|##########| 26/26 [00:00<00:00, 41.79it/s]
Test: [   0/  26]	Loss 0.692 (0.692)	test_acc   0.53 (  0.53)	test_minacc   0.54 (  0.54)	test_majacc   0.52 (  0.52)	Loss_d 0.692 (0.692)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.54 (  0.54)	test_majacc_d   0.52 (  0.52)	test_corr_d   0.09 (  0.09)
Test: [  10/  26]	Loss 0.691 (0.693)	test_acc   0.54 (  0.52)	test_minacc   0.45 (  0.53)	test_majacc   0.56 (  0.52)	Loss_d 0.691 (0.693)	test_acc_d   0.54 (  0.52)	test_minacc_d   0.45 (  0.53)	test_majacc_d   0.56 (  0.52)	test_corr_d   0.08 (  0.06)
Test: [  20/  26]	Loss 0.692 (0.693)	test_acc   0.53 (  0.52)	test_minacc   0.55 (  0.53)	test_majacc   0.53 (  0.52)	Loss_d 0.692 (0.693)	test_acc_d   0.53 (  0.52)	test_minacc_d   0.55 (  0.53)	test_majacc_d   0.53 (  0.52)	test_corr_d   0.07 (  0.05)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.50 (  0.52)	test_minacc   0.46 (  0.53)	test_majacc   0.51 (  0.52)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.52)	test_minacc_d   0.46 (  0.53)	test_majacc_d   0.51 (  0.52)	test_corr_d   0.06 (  0.05)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.22it/s]
Test: [  0/  1]	Loss 0.692 (0.692)	test_acc   0.52 (  0.52)	test_minacc   0.52 (  0.52)	test_majacc   0.52 (  0.52)	Loss_d 0.692 (0.692)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.52 (  0.52)	test_corr_d  -0.10 ( -0.10)
Test: [  1/  1]	Loss 0.692 (0.692)	test_acc   0.52 (  0.52)	test_minacc   0.52 (  0.52)	test_majacc   0.52 (  0.52)	Loss_d 0.692 (0.692)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.52 (  0.52)	test_corr_d  -0.10 ( -0.10)
Overall Timing[ 38/  1]	epoch_time 0.0372 (0.0373)	validation_time 0.0003 (0.0006)	train_time 0.0369 (0.0365)
record: (train_acc, test_acc) (0.6775000246167183, 0.6940000057220459)
last accs (train_acc, test_acc) (0.5214000149965287, 0.5200000405311584)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.13it/s] 19%|#9        | 5/26 [00:00<00:00, 21.12it/s] 35%|###4      | 9/26 [00:00<00:00, 27.12it/s] 50%|#####     | 13/26 [00:00<00:00, 30.00it/s] 65%|######5   | 17/26 [00:00<00:00, 31.00it/s] 81%|########  | 21/26 [00:00<00:00, 32.49it/s] 96%|#########6| 25/26 [00:00<00:00, 33.39it/s]100%|##########| 26/26 [00:00<00:00, 28.28it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1014 400
penalty weights 10000.0
args.step pgd_anneal_iters 1014 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1015 400
penalty weights 10000.0
args.step pgd_anneal_iters 1015 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1016 400
penalty weights 10000.0
args.step pgd_anneal_iters 1016 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1017 400
penalty weights 10000.0
args.step pgd_anneal_iters 1017 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1018 400
penalty weights 10000.0
args.step pgd_anneal_iters 1018 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1019 400
penalty weights 10000.0
args.step pgd_anneal_iters 1019 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1020 400
penalty weights 10000.0
args.step pgd_anneal_iters 1020 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1021 400
penalty weights 10000.0
args.step pgd_anneal_iters 1021 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1022 400
penalty weights 10000.0
args.step pgd_anneal_iters 1022 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1023 400
penalty weights 10000.0
args.step pgd_anneal_iters 1023 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1024 400
penalty weights 10000.0
args.step pgd_anneal_iters 1024 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1025 400
penalty weights 10000.0
args.step pgd_anneal_iters 1025 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1026 400
penalty weights 10000.0
args.step pgd_anneal_iters 1026 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1027 400
penalty weights 10000.0
args.step pgd_anneal_iters 1027 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1028 400
penalty weights 10000.0
args.step pgd_anneal_iters 1028 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1029 400
penalty weights 10000.0
args.step pgd_anneal_iters 1029 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1030 400
penalty weights 10000.0
args.step pgd_anneal_iters 1030 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1031 400
penalty weights 10000.0
args.step pgd_anneal_iters 1031 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1032 400
penalty weights 10000.0
args.step pgd_anneal_iters 1032 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1033 400
penalty weights 10000.0
args.step pgd_anneal_iters 1033 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1034 400
penalty weights 10000.0
args.step pgd_anneal_iters 1034 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1035 400
penalty weights 10000.0
args.step pgd_anneal_iters 1035 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1036 400
penalty weights 10000.0
args.step pgd_anneal_iters 1036 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1037 400
penalty weights 10000.0
args.step pgd_anneal_iters 1037 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1038 400
penalty weights 10000.0
args.step pgd_anneal_iters 1038 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1039 400
penalty weights 10000.0
args.step pgd_anneal_iters 1039 600
dim_v 512
Epoch: [39][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.15 (  0.15)	train_acc   0.50 (  0.52)	train_minacc   0.49 (  0.53)	train_majacc   0.51 (  0.52)	train_corr   0.00 (  0.00)	l1 8.2119 (8.2162)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.79it/s] 27%|##6       | 7/26 [00:00<00:00, 31.04it/s]                                               27%|##6       | 7/26 [00:00<00:00, 31.04it/s] 50%|#####     | 13/26 [00:00<00:00, 37.60it/s] 73%|#######3  | 19/26 [00:00<00:00, 44.67it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 44.67it/s] 96%|#########6| 25/26 [00:00<00:00, 45.74it/s]100%|##########| 26/26 [00:00<00:00, 37.70it/s]
Test: [   0/  26]	Loss 0.692 (0.692)	test_acc   0.53 (  0.53)	test_minacc   0.54 (  0.54)	test_majacc   0.53 (  0.53)	Loss_d 0.692 (0.692)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.54 (  0.54)	test_majacc_d   0.53 (  0.53)	test_corr_d   0.08 (  0.08)
Test: [  10/  26]	Loss 0.692 (0.693)	test_acc   0.55 (  0.52)	test_minacc   0.45 (  0.53)	test_majacc   0.56 (  0.52)	Loss_d 0.692 (0.693)	test_acc_d   0.55 (  0.52)	test_minacc_d   0.45 (  0.53)	test_majacc_d   0.56 (  0.52)	test_corr_d   0.07 (  0.04)
Test: [  20/  26]	Loss 0.692 (0.693)	test_acc   0.54 (  0.52)	test_minacc   0.55 (  0.53)	test_majacc   0.53 (  0.52)	Loss_d 0.692 (0.693)	test_acc_d   0.54 (  0.52)	test_minacc_d   0.55 (  0.53)	test_majacc_d   0.53 (  0.52)	test_corr_d   0.06 (  0.03)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.50 (  0.52)	test_minacc   0.49 (  0.53)	test_majacc   0.51 (  0.52)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.52)	test_minacc_d   0.49 (  0.53)	test_majacc_d   0.51 (  0.52)	test_corr_d   0.05 (  0.04)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.63it/s]
Test: [  0/  1]	Loss 0.692 (0.692)	test_acc   0.52 (  0.52)	test_minacc   0.52 (  0.52)	test_majacc   0.52 (  0.52)	Loss_d 0.692 (0.692)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.52 (  0.52)	test_corr_d  -0.09 ( -0.09)
Test: [  1/  1]	Loss 0.692 (0.692)	test_acc   0.52 (  0.52)	test_minacc   0.52 (  0.52)	test_majacc   0.52 (  0.52)	Loss_d 0.692 (0.692)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.52 (  0.52)	test_corr_d  -0.09 ( -0.09)
Overall Timing[ 39/  1]	epoch_time 0.0355 (0.0372)	validation_time 0.0004 (0.0006)	train_time 0.0350 (0.0365)
record: (train_acc, test_acc) (0.6775000246167183, 0.6940000057220459)
last accs (train_acc, test_acc) (0.5234000104367733, 0.5200000405311584)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.51it/s] 19%|#9        | 5/26 [00:00<00:01, 19.46it/s] 35%|###4      | 9/26 [00:00<00:00, 25.27it/s] 50%|#####     | 13/26 [00:00<00:00, 28.50it/s] 65%|######5   | 17/26 [00:00<00:00, 30.62it/s] 81%|########  | 21/26 [00:00<00:00, 32.20it/s] 96%|#########6| 25/26 [00:00<00:00, 33.22it/s]100%|##########| 26/26 [00:00<00:00, 27.47it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1040 400
penalty weights 10000.0
args.step pgd_anneal_iters 1040 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1041 400
penalty weights 10000.0
args.step pgd_anneal_iters 1041 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1042 400
penalty weights 10000.0
args.step pgd_anneal_iters 1042 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1043 400
penalty weights 10000.0
args.step pgd_anneal_iters 1043 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1044 400
penalty weights 10000.0
args.step pgd_anneal_iters 1044 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1045 400
penalty weights 10000.0
args.step pgd_anneal_iters 1045 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1046 400
penalty weights 10000.0
args.step pgd_anneal_iters 1046 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1047 400
penalty weights 10000.0
args.step pgd_anneal_iters 1047 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1048 400
penalty weights 10000.0
args.step pgd_anneal_iters 1048 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1049 400
penalty weights 10000.0
args.step pgd_anneal_iters 1049 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1050 400
penalty weights 10000.0
args.step pgd_anneal_iters 1050 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1051 400
penalty weights 10000.0
args.step pgd_anneal_iters 1051 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1052 400
penalty weights 10000.0
args.step pgd_anneal_iters 1052 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1053 400
penalty weights 10000.0
args.step pgd_anneal_iters 1053 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1054 400
penalty weights 10000.0
args.step pgd_anneal_iters 1054 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1055 400
penalty weights 10000.0
args.step pgd_anneal_iters 1055 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1056 400
penalty weights 10000.0
args.step pgd_anneal_iters 1056 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1057 400
penalty weights 10000.0
args.step pgd_anneal_iters 1057 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1058 400
penalty weights 10000.0
args.step pgd_anneal_iters 1058 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1059 400
penalty weights 10000.0
args.step pgd_anneal_iters 1059 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1060 400
penalty weights 10000.0
args.step pgd_anneal_iters 1060 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1061 400
penalty weights 10000.0
args.step pgd_anneal_iters 1061 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1062 400
penalty weights 10000.0
args.step pgd_anneal_iters 1062 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1063 400
penalty weights 10000.0
args.step pgd_anneal_iters 1063 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1064 400
penalty weights 10000.0
args.step pgd_anneal_iters 1064 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1065 400
penalty weights 10000.0
args.step pgd_anneal_iters 1065 600
dim_v 512
Epoch: [40][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.15 (  0.15)	train_acc   0.50 (  0.52)	train_minacc   0.49 (  0.53)	train_majacc   0.51 (  0.52)	train_corr   0.00 (  0.00)	l1 8.2031 (8.2068)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.43it/s] 19%|#9        | 5/26 [00:00<00:00, 22.50it/s]                                               19%|#9        | 5/26 [00:00<00:00, 22.50it/s] 42%|####2     | 11/26 [00:00<00:00, 34.00it/s] 65%|######5   | 17/26 [00:00<00:00, 42.77it/s]                                                65%|######5   | 17/26 [00:00<00:00, 42.77it/s] 88%|########8 | 23/26 [00:00<00:00, 44.45it/s]100%|##########| 26/26 [00:00<00:00, 37.06it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.53 (  0.53)	test_minacc   0.54 (  0.54)	test_majacc   0.53 (  0.53)	Loss_d 0.693 (0.693)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.54 (  0.54)	test_majacc_d   0.53 (  0.53)	test_corr_d   0.07 (  0.07)
Test: [  10/  26]	Loss 0.692 (0.693)	test_acc   0.55 (  0.52)	test_minacc   0.45 (  0.53)	test_majacc   0.57 (  0.52)	Loss_d 0.692 (0.693)	test_acc_d   0.55 (  0.52)	test_minacc_d   0.45 (  0.53)	test_majacc_d   0.57 (  0.52)	test_corr_d   0.06 (  0.03)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.54 (  0.53)	test_minacc   0.55 (  0.53)	test_majacc   0.53 (  0.52)	Loss_d 0.693 (0.693)	test_acc_d   0.54 (  0.53)	test_minacc_d   0.55 (  0.53)	test_majacc_d   0.53 (  0.52)	test_corr_d   0.04 (  0.02)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.50 (  0.53)	test_minacc   0.49 (  0.53)	test_majacc   0.51 (  0.52)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.53)	test_minacc_d   0.49 (  0.53)	test_majacc_d   0.51 (  0.52)	test_corr_d   0.04 (  0.02)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 65.10it/s]
Test: [  0/  1]	Loss 0.692 (0.692)	test_acc   0.52 (  0.52)	test_minacc   0.52 (  0.52)	test_majacc   0.52 (  0.52)	Loss_d 0.692 (0.692)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.52 (  0.52)	test_corr_d  -0.08 ( -0.08)
Test: [  1/  1]	Loss 0.692 (0.692)	test_acc   0.52 (  0.52)	test_minacc   0.52 (  0.52)	test_majacc   0.52 (  0.52)	Loss_d 0.692 (0.692)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.52 (  0.52)	test_corr_d  -0.08 ( -0.08)
Overall Timing[ 40/  1]	epoch_time 0.0362 (0.0372)	validation_time 0.0004 (0.0006)	train_time 0.0358 (0.0365)
record: (train_acc, test_acc) (0.6775000246167183, 0.6940000057220459)
last accs (train_acc, test_acc) (0.5251000091731548, 0.5240000486373901)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.35it/s] 19%|#9        | 5/26 [00:00<00:00, 23.62it/s] 35%|###4      | 9/26 [00:00<00:00, 28.54it/s] 50%|#####     | 13/26 [00:00<00:00, 31.14it/s] 65%|######5   | 17/26 [00:00<00:00, 32.15it/s] 81%|########  | 21/26 [00:00<00:00, 31.93it/s] 96%|#########6| 25/26 [00:00<00:00, 32.75it/s]100%|##########| 26/26 [00:00<00:00, 28.64it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1066 400
penalty weights 10000.0
args.step pgd_anneal_iters 1066 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1067 400
penalty weights 10000.0
args.step pgd_anneal_iters 1067 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1068 400
penalty weights 10000.0
args.step pgd_anneal_iters 1068 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1069 400
penalty weights 10000.0
args.step pgd_anneal_iters 1069 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1070 400
penalty weights 10000.0
args.step pgd_anneal_iters 1070 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1071 400
penalty weights 10000.0
args.step pgd_anneal_iters 1071 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1072 400
penalty weights 10000.0
args.step pgd_anneal_iters 1072 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1073 400
penalty weights 10000.0
args.step pgd_anneal_iters 1073 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1074 400
penalty weights 10000.0
args.step pgd_anneal_iters 1074 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1075 400
penalty weights 10000.0
args.step pgd_anneal_iters 1075 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1076 400
penalty weights 10000.0
args.step pgd_anneal_iters 1076 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1077 400
penalty weights 10000.0
args.step pgd_anneal_iters 1077 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1078 400
penalty weights 10000.0
args.step pgd_anneal_iters 1078 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1079 400
penalty weights 10000.0
args.step pgd_anneal_iters 1079 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1080 400
penalty weights 10000.0
args.step pgd_anneal_iters 1080 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1081 400
penalty weights 10000.0
args.step pgd_anneal_iters 1081 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1082 400
penalty weights 10000.0
args.step pgd_anneal_iters 1082 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1083 400
penalty weights 10000.0
args.step pgd_anneal_iters 1083 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1084 400
penalty weights 10000.0
args.step pgd_anneal_iters 1084 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1085 400
penalty weights 10000.0
args.step pgd_anneal_iters 1085 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1086 400
penalty weights 10000.0
args.step pgd_anneal_iters 1086 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1087 400
penalty weights 10000.0
args.step pgd_anneal_iters 1087 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1088 400
penalty weights 10000.0
args.step pgd_anneal_iters 1088 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1089 400
penalty weights 10000.0
args.step pgd_anneal_iters 1089 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1090 400
penalty weights 10000.0
args.step pgd_anneal_iters 1090 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1091 400
penalty weights 10000.0
args.step pgd_anneal_iters 1091 600
dim_v 512
Epoch: [41][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.15 (  0.15)	train_acc   0.51 (  0.53)	train_minacc   0.49 (  0.53)	train_majacc   0.52 (  0.53)	train_corr   0.00 (  0.00)	l1 8.1956 (8.1988)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 18.51it/s] 31%|###       | 8/26 [00:00<00:00, 40.47it/s]                                               31%|###       | 8/26 [00:00<00:00, 40.47it/s] 50%|#####     | 13/26 [00:00<00:00, 42.99it/s] 73%|#######3  | 19/26 [00:00<00:00, 47.76it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 47.76it/s] 96%|#########6| 25/26 [00:00<00:00, 47.61it/s]100%|##########| 26/26 [00:00<00:00, 41.34it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.54 (  0.54)	test_minacc   0.54 (  0.54)	test_majacc   0.54 (  0.54)	Loss_d 0.693 (0.693)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.54 (  0.54)	test_majacc_d   0.54 (  0.54)	test_corr_d   0.06 (  0.06)
Test: [  10/  26]	Loss 0.692 (0.693)	test_acc   0.55 (  0.52)	test_minacc   0.45 (  0.53)	test_majacc   0.57 (  0.52)	Loss_d 0.692 (0.693)	test_acc_d   0.55 (  0.52)	test_minacc_d   0.45 (  0.53)	test_majacc_d   0.57 (  0.52)	test_corr_d   0.05 (  0.02)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.54 (  0.53)	test_minacc   0.55 (  0.54)	test_majacc   0.54 (  0.53)	Loss_d 0.693 (0.693)	test_acc_d   0.54 (  0.53)	test_minacc_d   0.55 (  0.54)	test_majacc_d   0.54 (  0.53)	test_corr_d   0.03 (  0.01)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.52 (  0.53)	test_minacc   0.49 (  0.53)	test_majacc   0.52 (  0.53)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.53)	test_minacc_d   0.49 (  0.53)	test_majacc_d   0.52 (  0.53)	test_corr_d   0.03 (  0.01)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.09it/s]
Test: [  0/  1]	Loss 0.692 (0.692)	test_acc   0.53 (  0.53)	test_minacc   0.53 (  0.53)	test_majacc   0.52 (  0.52)	Loss_d 0.692 (0.692)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.52 (  0.52)	test_corr_d  -0.07 ( -0.07)
Test: [  1/  1]	Loss 0.692 (0.692)	test_acc   0.53 (  0.53)	test_minacc   0.53 (  0.53)	test_majacc   0.52 (  0.52)	Loss_d 0.692 (0.692)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.52 (  0.52)	test_corr_d  -0.07 ( -0.07)
Overall Timing[ 41/  1]	epoch_time 0.0362 (0.0372)	validation_time 0.0006 (0.0006)	train_time 0.0356 (0.0365)
record: (train_acc, test_acc) (0.6775000246167183, 0.6940000057220459)
last accs (train_acc, test_acc) (0.5271000178158283, 0.5270000100135803)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.20it/s] 19%|#9        | 5/26 [00:00<00:00, 21.73it/s] 35%|###4      | 9/26 [00:00<00:00, 27.72it/s] 50%|#####     | 13/26 [00:00<00:00, 30.20it/s] 65%|######5   | 17/26 [00:00<00:00, 31.82it/s] 81%|########  | 21/26 [00:00<00:00, 32.78it/s] 96%|#########6| 25/26 [00:00<00:00, 33.41it/s]100%|##########| 26/26 [00:00<00:00, 28.33it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1092 400
penalty weights 10000.0
args.step pgd_anneal_iters 1092 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1093 400
penalty weights 10000.0
args.step pgd_anneal_iters 1093 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1094 400
penalty weights 10000.0
args.step pgd_anneal_iters 1094 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1095 400
penalty weights 10000.0
args.step pgd_anneal_iters 1095 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1096 400
penalty weights 10000.0
args.step pgd_anneal_iters 1096 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1097 400
penalty weights 10000.0
args.step pgd_anneal_iters 1097 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1098 400
penalty weights 10000.0
args.step pgd_anneal_iters 1098 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1099 400
penalty weights 10000.0
args.step pgd_anneal_iters 1099 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1100 400
penalty weights 10000.0
args.step pgd_anneal_iters 1100 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1101 400
penalty weights 10000.0
args.step pgd_anneal_iters 1101 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1102 400
penalty weights 10000.0
args.step pgd_anneal_iters 1102 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1103 400
penalty weights 10000.0
args.step pgd_anneal_iters 1103 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1104 400
penalty weights 10000.0
args.step pgd_anneal_iters 1104 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1105 400
penalty weights 10000.0
args.step pgd_anneal_iters 1105 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1106 400
penalty weights 10000.0
args.step pgd_anneal_iters 1106 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1107 400
penalty weights 10000.0
args.step pgd_anneal_iters 1107 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1108 400
penalty weights 10000.0
args.step pgd_anneal_iters 1108 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1109 400
penalty weights 10000.0
args.step pgd_anneal_iters 1109 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1110 400
penalty weights 10000.0
args.step pgd_anneal_iters 1110 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1111 400
penalty weights 10000.0
args.step pgd_anneal_iters 1111 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1112 400
penalty weights 10000.0
args.step pgd_anneal_iters 1112 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1113 400
penalty weights 10000.0
args.step pgd_anneal_iters 1113 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1114 400
penalty weights 10000.0
args.step pgd_anneal_iters 1114 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1115 400
penalty weights 10000.0
args.step pgd_anneal_iters 1115 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1116 400
penalty weights 10000.0
args.step pgd_anneal_iters 1116 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1117 400
penalty weights 10000.0
args.step pgd_anneal_iters 1117 600
dim_v 512
Epoch: [42][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.15 (  0.15)	train_acc   0.52 (  0.53)	train_minacc   0.49 (  0.53)	train_majacc   0.53 (  0.53)	train_corr   0.00 (  0.00)	l1 8.1892 (8.1919)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.04it/s] 27%|##6       | 7/26 [00:00<00:00, 35.02it/s]                                               27%|##6       | 7/26 [00:00<00:00, 35.02it/s] 50%|#####     | 13/26 [00:00<00:00, 39.80it/s] 73%|#######3  | 19/26 [00:00<00:00, 46.00it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 46.00it/s] 96%|#########6| 25/26 [00:00<00:00, 46.02it/s]100%|##########| 26/26 [00:00<00:00, 39.59it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.54 (  0.54)	test_minacc   0.55 (  0.55)	test_majacc   0.54 (  0.54)	Loss_d 0.693 (0.693)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.55 (  0.55)	test_majacc_d   0.54 (  0.54)	test_corr_d   0.05 (  0.05)
Test: [  10/  26]	Loss 0.692 (0.693)	test_acc   0.55 (  0.53)	test_minacc   0.47 (  0.54)	test_majacc   0.57 (  0.52)	Loss_d 0.692 (0.693)	test_acc_d   0.55 (  0.53)	test_minacc_d   0.47 (  0.54)	test_majacc_d   0.57 (  0.52)	test_corr_d   0.04 (  0.02)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.54 (  0.53)	test_minacc   0.55 (  0.54)	test_majacc   0.53 (  0.53)	Loss_d 0.693 (0.693)	test_acc_d   0.54 (  0.53)	test_minacc_d   0.55 (  0.54)	test_majacc_d   0.53 (  0.53)	test_corr_d   0.03 (  0.01)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.52 (  0.53)	test_minacc   0.49 (  0.53)	test_majacc   0.53 (  0.53)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.53)	test_minacc_d   0.49 (  0.53)	test_majacc_d   0.53 (  0.53)	test_corr_d   0.02 (  0.01)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.86it/s]
Test: [  0/  1]	Loss 0.692 (0.692)	test_acc   0.53 (  0.53)	test_minacc   0.53 (  0.53)	test_majacc   0.53 (  0.53)	Loss_d 0.692 (0.692)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.53 (  0.53)	test_corr_d  -0.07 ( -0.07)
Test: [  1/  1]	Loss 0.692 (0.692)	test_acc   0.53 (  0.53)	test_minacc   0.53 (  0.53)	test_majacc   0.53 (  0.53)	Loss_d 0.692 (0.692)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.53 (  0.53)	test_corr_d  -0.07 ( -0.07)
Overall Timing[ 42/  1]	epoch_time 0.0351 (0.0371)	validation_time 0.0004 (0.0006)	train_time 0.0347 (0.0364)
record: (train_acc, test_acc) (0.6775000246167183, 0.6940000057220459)
last accs (train_acc, test_acc) (0.5293000144064426, 0.5300000309944153)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.60it/s] 19%|#9        | 5/26 [00:00<00:00, 24.04it/s] 35%|###4      | 9/26 [00:00<00:00, 28.36it/s] 50%|#####     | 13/26 [00:00<00:00, 30.37it/s] 65%|######5   | 17/26 [00:00<00:00, 31.40it/s] 81%|########  | 21/26 [00:00<00:00, 32.34it/s] 96%|#########6| 25/26 [00:00<00:00, 32.42it/s]100%|##########| 26/26 [00:00<00:00, 28.27it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1118 400
penalty weights 10000.0
args.step pgd_anneal_iters 1118 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1119 400
penalty weights 10000.0
args.step pgd_anneal_iters 1119 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1120 400
penalty weights 10000.0
args.step pgd_anneal_iters 1120 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1121 400
penalty weights 10000.0
args.step pgd_anneal_iters 1121 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1122 400
penalty weights 10000.0
args.step pgd_anneal_iters 1122 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1123 400
penalty weights 10000.0
args.step pgd_anneal_iters 1123 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1124 400
penalty weights 10000.0
args.step pgd_anneal_iters 1124 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1125 400
penalty weights 10000.0
args.step pgd_anneal_iters 1125 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1126 400
penalty weights 10000.0
args.step pgd_anneal_iters 1126 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1127 400
penalty weights 10000.0
args.step pgd_anneal_iters 1127 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1128 400
penalty weights 10000.0
args.step pgd_anneal_iters 1128 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1129 400
penalty weights 10000.0
args.step pgd_anneal_iters 1129 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1130 400
penalty weights 10000.0
args.step pgd_anneal_iters 1130 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1131 400
penalty weights 10000.0
args.step pgd_anneal_iters 1131 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1132 400
penalty weights 10000.0
args.step pgd_anneal_iters 1132 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1133 400
penalty weights 10000.0
args.step pgd_anneal_iters 1133 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1134 400
penalty weights 10000.0
args.step pgd_anneal_iters 1134 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1135 400
penalty weights 10000.0
args.step pgd_anneal_iters 1135 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1136 400
penalty weights 10000.0
args.step pgd_anneal_iters 1136 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1137 400
penalty weights 10000.0
args.step pgd_anneal_iters 1137 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1138 400
penalty weights 10000.0
args.step pgd_anneal_iters 1138 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1139 400
penalty weights 10000.0
args.step pgd_anneal_iters 1139 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1140 400
penalty weights 10000.0
args.step pgd_anneal_iters 1140 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1141 400
penalty weights 10000.0
args.step pgd_anneal_iters 1141 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1142 400
penalty weights 10000.0
args.step pgd_anneal_iters 1142 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1143 400
penalty weights 10000.0
args.step pgd_anneal_iters 1143 600
dim_v 512
Epoch: [43][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.15 (  0.15)	train_acc   0.52 (  0.53)	train_minacc   0.49 (  0.54)	train_majacc   0.53 (  0.53)	train_corr   0.00 (  0.00)	l1 8.1839 (8.1861)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.73it/s] 27%|##6       | 7/26 [00:00<00:00, 35.91it/s]                                               27%|##6       | 7/26 [00:00<00:00, 35.91it/s] 50%|#####     | 13/26 [00:00<00:00, 41.54it/s] 73%|#######3  | 19/26 [00:00<00:00, 46.79it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 46.79it/s] 96%|#########6| 25/26 [00:00<00:00, 47.13it/s]100%|##########| 26/26 [00:00<00:00, 40.53it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.54 (  0.54)	test_minacc   0.52 (  0.52)	test_majacc   0.54 (  0.54)	Loss_d 0.693 (0.693)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.54 (  0.54)	test_corr_d   0.04 (  0.04)
Test: [  10/  26]	Loss 0.692 (0.693)	test_acc   0.56 (  0.53)	test_minacc   0.47 (  0.54)	test_majacc   0.57 (  0.53)	Loss_d 0.692 (0.693)	test_acc_d   0.56 (  0.53)	test_minacc_d   0.47 (  0.54)	test_majacc_d   0.57 (  0.53)	test_corr_d   0.04 (  0.01)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.54 (  0.53)	test_minacc   0.55 (  0.54)	test_majacc   0.53 (  0.53)	Loss_d 0.693 (0.693)	test_acc_d   0.54 (  0.53)	test_minacc_d   0.55 (  0.54)	test_majacc_d   0.53 (  0.53)	test_corr_d   0.02 (  0.00)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.52 (  0.53)	test_minacc   0.49 (  0.53)	test_majacc   0.53 (  0.53)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.53)	test_minacc_d   0.49 (  0.53)	test_majacc_d   0.53 (  0.53)	test_corr_d   0.01 (  0.00)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 67.40it/s]
Test: [  0/  1]	Loss 0.692 (0.692)	test_acc   0.54 (  0.54)	test_minacc   0.54 (  0.54)	test_majacc   0.53 (  0.53)	Loss_d 0.692 (0.692)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.54 (  0.54)	test_majacc_d   0.53 (  0.53)	test_corr_d  -0.06 ( -0.06)
Test: [  1/  1]	Loss 0.692 (0.692)	test_acc   0.54 (  0.54)	test_minacc   0.54 (  0.54)	test_majacc   0.53 (  0.53)	Loss_d 0.692 (0.692)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.54 (  0.54)	test_majacc_d   0.53 (  0.53)	test_corr_d  -0.06 ( -0.06)
Overall Timing[ 43/  1]	epoch_time 0.0355 (0.0371)	validation_time 0.0003 (0.0006)	train_time 0.0351 (0.0364)
record: (train_acc, test_acc) (0.6775000246167183, 0.6940000057220459)
last accs (train_acc, test_acc) (0.5312000108063221, 0.5350000262260437)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.77it/s] 19%|#9        | 5/26 [00:00<00:00, 21.36it/s] 35%|###4      | 9/26 [00:00<00:00, 26.54it/s] 50%|#####     | 13/26 [00:00<00:00, 29.04it/s] 65%|######5   | 17/26 [00:00<00:00, 30.54it/s] 81%|########  | 21/26 [00:00<00:00, 31.85it/s] 96%|#########6| 25/26 [00:00<00:00, 32.85it/s]100%|##########| 26/26 [00:00<00:00, 28.13it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1144 400
penalty weights 10000.0
args.step pgd_anneal_iters 1144 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1145 400
penalty weights 10000.0
args.step pgd_anneal_iters 1145 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1146 400
penalty weights 10000.0
args.step pgd_anneal_iters 1146 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1147 400
penalty weights 10000.0
args.step pgd_anneal_iters 1147 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1148 400
penalty weights 10000.0
args.step pgd_anneal_iters 1148 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1149 400
penalty weights 10000.0
args.step pgd_anneal_iters 1149 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1150 400
penalty weights 10000.0
args.step pgd_anneal_iters 1150 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1151 400
penalty weights 10000.0
args.step pgd_anneal_iters 1151 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1152 400
penalty weights 10000.0
args.step pgd_anneal_iters 1152 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1153 400
penalty weights 10000.0
args.step pgd_anneal_iters 1153 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1154 400
penalty weights 10000.0
args.step pgd_anneal_iters 1154 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1155 400
penalty weights 10000.0
args.step pgd_anneal_iters 1155 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1156 400
penalty weights 10000.0
args.step pgd_anneal_iters 1156 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1157 400
penalty weights 10000.0
args.step pgd_anneal_iters 1157 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1158 400
penalty weights 10000.0
args.step pgd_anneal_iters 1158 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1159 400
penalty weights 10000.0
args.step pgd_anneal_iters 1159 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1160 400
penalty weights 10000.0
args.step pgd_anneal_iters 1160 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1161 400
penalty weights 10000.0
args.step pgd_anneal_iters 1161 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1162 400
penalty weights 10000.0
args.step pgd_anneal_iters 1162 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1163 400
penalty weights 10000.0
args.step pgd_anneal_iters 1163 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1164 400
penalty weights 10000.0
args.step pgd_anneal_iters 1164 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1165 400
penalty weights 10000.0
args.step pgd_anneal_iters 1165 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1166 400
penalty weights 10000.0
args.step pgd_anneal_iters 1166 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1167 400
penalty weights 10000.0
args.step pgd_anneal_iters 1167 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1168 400
penalty weights 10000.0
args.step pgd_anneal_iters 1168 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1169 400
penalty weights 10000.0
args.step pgd_anneal_iters 1169 600
dim_v 512
Epoch: [44][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.15 (  0.15)	train_acc   0.52 (  0.53)	train_minacc   0.49 (  0.54)	train_majacc   0.53 (  0.53)	train_corr   0.00 (  0.00)	l1 8.1794 (8.1813)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.61it/s] 23%|##3       | 6/26 [00:00<00:00, 27.46it/s]                                               23%|##3       | 6/26 [00:00<00:00, 27.46it/s] 46%|####6     | 12/26 [00:00<00:00, 38.40it/s] 65%|######5   | 17/26 [00:00<00:00, 41.04it/s]                                                65%|######5   | 17/26 [00:00<00:00, 41.04it/s] 88%|########8 | 23/26 [00:00<00:00, 45.86it/s]100%|##########| 26/26 [00:00<00:00, 36.89it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.54 (  0.54)	test_minacc   0.52 (  0.52)	test_majacc   0.55 (  0.55)	Loss_d 0.693 (0.693)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.55 (  0.55)	test_corr_d   0.04 (  0.04)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.56 (  0.53)	test_minacc   0.47 (  0.54)	test_majacc   0.57 (  0.53)	Loss_d 0.693 (0.693)	test_acc_d   0.56 (  0.53)	test_minacc_d   0.47 (  0.54)	test_majacc_d   0.57 (  0.53)	test_corr_d   0.04 (  0.01)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.54 (  0.53)	test_minacc   0.55 (  0.54)	test_majacc   0.54 (  0.53)	Loss_d 0.693 (0.693)	test_acc_d   0.54 (  0.53)	test_minacc_d   0.55 (  0.54)	test_majacc_d   0.54 (  0.53)	test_corr_d   0.02 ( -0.00)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.52 (  0.53)	test_minacc   0.49 (  0.54)	test_majacc   0.53 (  0.53)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.53)	test_minacc_d   0.49 (  0.54)	test_majacc_d   0.53 (  0.53)	test_corr_d   0.01 ( -0.00)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 67.17it/s]
Test: [  0/  1]	Loss 0.692 (0.692)	test_acc   0.54 (  0.54)	test_minacc   0.54 (  0.54)	test_majacc   0.53 (  0.53)	Loss_d 0.692 (0.692)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.54 (  0.54)	test_majacc_d   0.53 (  0.53)	test_corr_d  -0.06 ( -0.06)
Test: [  1/  1]	Loss 0.692 (0.692)	test_acc   0.54 (  0.54)	test_minacc   0.54 (  0.54)	test_majacc   0.53 (  0.53)	Loss_d 0.692 (0.692)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.54 (  0.54)	test_majacc_d   0.53 (  0.53)	test_corr_d  -0.06 ( -0.06)
Overall Timing[ 44/  1]	epoch_time 0.0379 (0.0371)	validation_time 0.0003 (0.0006)	train_time 0.0376 (0.0364)
record: (train_acc, test_acc) (0.6775000246167183, 0.6940000057220459)
last accs (train_acc, test_acc) (0.5330000153481961, 0.5350000262260437)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.56it/s] 19%|#9        | 5/26 [00:00<00:01, 20.32it/s] 35%|###4      | 9/26 [00:00<00:00, 25.65it/s] 50%|#####     | 13/26 [00:00<00:00, 29.19it/s] 65%|######5   | 17/26 [00:00<00:00, 31.39it/s] 81%|########  | 21/26 [00:00<00:00, 32.67it/s] 96%|#########6| 25/26 [00:00<00:00, 33.09it/s]100%|##########| 26/26 [00:00<00:00, 27.76it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1170 400
penalty weights 10000.0
args.step pgd_anneal_iters 1170 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1171 400
penalty weights 10000.0
args.step pgd_anneal_iters 1171 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1172 400
penalty weights 10000.0
args.step pgd_anneal_iters 1172 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1173 400
penalty weights 10000.0
args.step pgd_anneal_iters 1173 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1174 400
penalty weights 10000.0
args.step pgd_anneal_iters 1174 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1175 400
penalty weights 10000.0
args.step pgd_anneal_iters 1175 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1176 400
penalty weights 10000.0
args.step pgd_anneal_iters 1176 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1177 400
penalty weights 10000.0
args.step pgd_anneal_iters 1177 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1178 400
penalty weights 10000.0
args.step pgd_anneal_iters 1178 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1179 400
penalty weights 10000.0
args.step pgd_anneal_iters 1179 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1180 400
penalty weights 10000.0
args.step pgd_anneal_iters 1180 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1181 400
penalty weights 10000.0
args.step pgd_anneal_iters 1181 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1182 400
penalty weights 10000.0
args.step pgd_anneal_iters 1182 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1183 400
penalty weights 10000.0
args.step pgd_anneal_iters 1183 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1184 400
penalty weights 10000.0
args.step pgd_anneal_iters 1184 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1185 400
penalty weights 10000.0
args.step pgd_anneal_iters 1185 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1186 400
penalty weights 10000.0
args.step pgd_anneal_iters 1186 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1187 400
penalty weights 10000.0
args.step pgd_anneal_iters 1187 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1188 400
penalty weights 10000.0
args.step pgd_anneal_iters 1188 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1189 400
penalty weights 10000.0
args.step pgd_anneal_iters 1189 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1190 400
penalty weights 10000.0
args.step pgd_anneal_iters 1190 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1191 400
penalty weights 10000.0
args.step pgd_anneal_iters 1191 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1192 400
penalty weights 10000.0
args.step pgd_anneal_iters 1192 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1193 400
penalty weights 10000.0
args.step pgd_anneal_iters 1193 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1194 400
penalty weights 10000.0
args.step pgd_anneal_iters 1194 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1195 400
penalty weights 10000.0
args.step pgd_anneal_iters 1195 600
dim_v 512
Epoch: [45][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.15 (  0.15)	train_acc   0.52 (  0.53)	train_minacc   0.49 (  0.54)	train_majacc   0.52 (  0.53)	train_corr   0.00 (  0.00)	l1 8.1758 (8.1774)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.44it/s] 27%|##6       | 7/26 [00:00<00:00, 35.25it/s]                                               27%|##6       | 7/26 [00:00<00:00, 35.25it/s] 50%|#####     | 13/26 [00:00<00:00, 40.53it/s] 73%|#######3  | 19/26 [00:00<00:00, 46.10it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 46.10it/s] 96%|#########6| 25/26 [00:00<00:00, 46.34it/s]100%|##########| 26/26 [00:00<00:00, 39.55it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.54 (  0.54)	test_minacc   0.52 (  0.52)	test_majacc   0.55 (  0.55)	Loss_d 0.693 (0.693)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.55 (  0.55)	test_corr_d   0.03 (  0.03)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.56 (  0.53)	test_minacc   0.47 (  0.54)	test_majacc   0.57 (  0.53)	Loss_d 0.693 (0.693)	test_acc_d   0.56 (  0.53)	test_minacc_d   0.47 (  0.54)	test_majacc_d   0.57 (  0.53)	test_corr_d   0.03 (  0.01)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.54 (  0.54)	test_minacc   0.55 (  0.54)	test_majacc   0.54 (  0.53)	Loss_d 0.693 (0.693)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.55 (  0.54)	test_majacc_d   0.54 (  0.53)	test_corr_d   0.01 ( -0.00)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.52 (  0.54)	test_minacc   0.49 (  0.54)	test_majacc   0.53 (  0.53)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.54)	test_minacc_d   0.49 (  0.54)	test_majacc_d   0.53 (  0.53)	test_corr_d   0.01 ( -0.00)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.63it/s]
Test: [  0/  1]	Loss 0.692 (0.692)	test_acc   0.54 (  0.54)	test_minacc   0.54 (  0.54)	test_majacc   0.53 (  0.53)	Loss_d 0.692 (0.692)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.54 (  0.54)	test_majacc_d   0.53 (  0.53)	test_corr_d  -0.06 ( -0.06)
Test: [  1/  1]	Loss 0.692 (0.692)	test_acc   0.54 (  0.54)	test_minacc   0.54 (  0.54)	test_majacc   0.53 (  0.53)	Loss_d 0.692 (0.692)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.54 (  0.54)	test_majacc_d   0.53 (  0.53)	test_corr_d  -0.06 ( -0.06)
Overall Timing[ 45/  1]	epoch_time 0.0377 (0.0371)	validation_time 0.0004 (0.0006)	train_time 0.0373 (0.0364)
record: (train_acc, test_acc) (0.6775000246167183, 0.6940000057220459)
last accs (train_acc, test_acc) (0.5356000163555146, 0.5360000133514404)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.13it/s] 19%|#9        | 5/26 [00:00<00:00, 23.29it/s] 35%|###4      | 9/26 [00:00<00:00, 28.29it/s] 50%|#####     | 13/26 [00:00<00:00, 30.88it/s] 65%|######5   | 17/26 [00:00<00:00, 32.46it/s] 81%|########  | 21/26 [00:00<00:00, 33.40it/s] 96%|#########6| 25/26 [00:00<00:00, 34.04it/s]100%|##########| 26/26 [00:00<00:00, 29.29it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1196 400
penalty weights 10000.0
args.step pgd_anneal_iters 1196 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1197 400
penalty weights 10000.0
args.step pgd_anneal_iters 1197 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1198 400
penalty weights 10000.0
args.step pgd_anneal_iters 1198 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1199 400
penalty weights 10000.0
args.step pgd_anneal_iters 1199 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1200 400
penalty weights 10000.0
args.step pgd_anneal_iters 1200 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1201 400
penalty weights 10000.0
args.step pgd_anneal_iters 1201 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1202 400
penalty weights 10000.0
args.step pgd_anneal_iters 1202 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1203 400
penalty weights 10000.0
args.step pgd_anneal_iters 1203 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1204 400
penalty weights 10000.0
args.step pgd_anneal_iters 1204 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1205 400
penalty weights 10000.0
args.step pgd_anneal_iters 1205 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1206 400
penalty weights 10000.0
args.step pgd_anneal_iters 1206 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1207 400
penalty weights 10000.0
args.step pgd_anneal_iters 1207 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1208 400
penalty weights 10000.0
args.step pgd_anneal_iters 1208 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1209 400
penalty weights 10000.0
args.step pgd_anneal_iters 1209 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1210 400
penalty weights 10000.0
args.step pgd_anneal_iters 1210 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1211 400
penalty weights 10000.0
args.step pgd_anneal_iters 1211 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1212 400
penalty weights 10000.0
args.step pgd_anneal_iters 1212 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1213 400
penalty weights 10000.0
args.step pgd_anneal_iters 1213 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1214 400
penalty weights 10000.0
args.step pgd_anneal_iters 1214 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1215 400
penalty weights 10000.0
args.step pgd_anneal_iters 1215 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1216 400
penalty weights 10000.0
args.step pgd_anneal_iters 1216 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1217 400
penalty weights 10000.0
args.step pgd_anneal_iters 1217 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1218 400
penalty weights 10000.0
args.step pgd_anneal_iters 1218 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1219 400
penalty weights 10000.0
args.step pgd_anneal_iters 1219 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1220 400
penalty weights 10000.0
args.step pgd_anneal_iters 1220 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1221 400
penalty weights 10000.0
args.step pgd_anneal_iters 1221 600
dim_v 512
Epoch: [46][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.15 (  0.15)	train_acc   0.52 (  0.54)	train_minacc   0.49 (  0.54)	train_majacc   0.53 (  0.54)	train_corr   0.00 (  0.00)	l1 8.1728 (8.1741)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:00, 28.00it/s] 35%|###4      | 9/26 [00:00<00:00, 44.28it/s]                                               35%|###4      | 9/26 [00:00<00:00, 44.28it/s] 58%|#####7    | 15/26 [00:00<00:00, 45.02it/s]                                                58%|#####7    | 15/26 [00:00<00:00, 45.02it/s] 81%|########  | 21/26 [00:00<00:00, 49.37it/s]100%|##########| 26/26 [00:00<00:00, 44.16it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.55 (  0.55)	test_minacc   0.52 (  0.52)	test_majacc   0.55 (  0.55)	Loss_d 0.693 (0.693)	test_acc_d   0.55 (  0.55)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.55 (  0.55)	test_corr_d   0.03 (  0.03)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.56 (  0.53)	test_minacc   0.47 (  0.54)	test_majacc   0.58 (  0.53)	Loss_d 0.693 (0.693)	test_acc_d   0.56 (  0.53)	test_minacc_d   0.47 (  0.54)	test_majacc_d   0.58 (  0.53)	test_corr_d   0.03 (  0.01)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.54 (  0.54)	test_minacc   0.55 (  0.55)	test_majacc   0.54 (  0.54)	Loss_d 0.693 (0.693)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.55 (  0.55)	test_majacc_d   0.54 (  0.54)	test_corr_d   0.01 ( -0.01)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.52 (  0.54)	test_minacc   0.49 (  0.54)	test_majacc   0.53 (  0.54)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.54)	test_minacc_d   0.49 (  0.54)	test_majacc_d   0.53 (  0.54)	test_corr_d   0.01 ( -0.01)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 60.20it/s]
Test: [  0/  1]	Loss 0.692 (0.692)	test_acc   0.54 (  0.54)	test_minacc   0.54 (  0.54)	test_majacc   0.53 (  0.53)	Loss_d 0.692 (0.692)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.54 (  0.54)	test_majacc_d   0.53 (  0.53)	test_corr_d  -0.06 ( -0.06)
Test: [  1/  1]	Loss 0.692 (0.692)	test_acc   0.54 (  0.54)	test_minacc   0.54 (  0.54)	test_majacc   0.53 (  0.53)	Loss_d 0.692 (0.692)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.54 (  0.54)	test_majacc_d   0.53 (  0.53)	test_corr_d  -0.06 ( -0.06)
Overall Timing[ 46/  1]	epoch_time 0.0352 (0.0371)	validation_time 0.0003 (0.0005)	train_time 0.0349 (0.0364)
record: (train_acc, test_acc) (0.6775000246167183, 0.6940000057220459)
last accs (train_acc, test_acc) (0.5382000150382519, 0.5380000472068787)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.75it/s] 15%|#5        | 4/26 [00:00<00:01, 19.41it/s] 31%|###       | 8/26 [00:00<00:00, 26.49it/s] 46%|####6     | 12/26 [00:00<00:00, 29.75it/s] 62%|######1   | 16/26 [00:00<00:00, 30.99it/s] 77%|#######6  | 20/26 [00:00<00:00, 31.82it/s] 92%|#########2| 24/26 [00:00<00:00, 33.10it/s]100%|##########| 26/26 [00:00<00:00, 28.37it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1222 400
penalty weights 10000.0
args.step pgd_anneal_iters 1222 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1223 400
penalty weights 10000.0
args.step pgd_anneal_iters 1223 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1224 400
penalty weights 10000.0
args.step pgd_anneal_iters 1224 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1225 400
penalty weights 10000.0
args.step pgd_anneal_iters 1225 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1226 400
penalty weights 10000.0
args.step pgd_anneal_iters 1226 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1227 400
penalty weights 10000.0
args.step pgd_anneal_iters 1227 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1228 400
penalty weights 10000.0
args.step pgd_anneal_iters 1228 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1229 400
penalty weights 10000.0
args.step pgd_anneal_iters 1229 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1230 400
penalty weights 10000.0
args.step pgd_anneal_iters 1230 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1231 400
penalty weights 10000.0
args.step pgd_anneal_iters 1231 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1232 400
penalty weights 10000.0
args.step pgd_anneal_iters 1232 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1233 400
penalty weights 10000.0
args.step pgd_anneal_iters 1233 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1234 400
penalty weights 10000.0
args.step pgd_anneal_iters 1234 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1235 400
penalty weights 10000.0
args.step pgd_anneal_iters 1235 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1236 400
penalty weights 10000.0
args.step pgd_anneal_iters 1236 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1237 400
penalty weights 10000.0
args.step pgd_anneal_iters 1237 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1238 400
penalty weights 10000.0
args.step pgd_anneal_iters 1238 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1239 400
penalty weights 10000.0
args.step pgd_anneal_iters 1239 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1240 400
penalty weights 10000.0
args.step pgd_anneal_iters 1240 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1241 400
penalty weights 10000.0
args.step pgd_anneal_iters 1241 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1242 400
penalty weights 10000.0
args.step pgd_anneal_iters 1242 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1243 400
penalty weights 10000.0
args.step pgd_anneal_iters 1243 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1244 400
penalty weights 10000.0
args.step pgd_anneal_iters 1244 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1245 400
penalty weights 10000.0
args.step pgd_anneal_iters 1245 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1246 400
penalty weights 10000.0
args.step pgd_anneal_iters 1246 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1247 400
penalty weights 10000.0
args.step pgd_anneal_iters 1247 600
dim_v 512
Epoch: [47][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.15 (  0.15)	train_acc   0.53 (  0.54)	train_minacc   0.46 (  0.54)	train_majacc   0.55 (  0.54)	train_corr   0.00 (  0.00)	l1 8.1704 (8.1714)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 17.57it/s] 27%|##6       | 7/26 [00:00<00:00, 35.26it/s]                                               27%|##6       | 7/26 [00:00<00:00, 35.26it/s] 50%|#####     | 13/26 [00:00<00:00, 40.75it/s] 73%|#######3  | 19/26 [00:00<00:00, 46.76it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 46.76it/s] 96%|#########6| 25/26 [00:00<00:00, 46.98it/s]100%|##########| 26/26 [00:00<00:00, 40.35it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.54 (  0.54)	test_minacc   0.50 (  0.50)	test_majacc   0.55 (  0.55)	Loss_d 0.693 (0.693)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.55 (  0.55)	test_corr_d   0.03 (  0.03)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.57 (  0.54)	test_minacc   0.47 (  0.54)	test_majacc   0.58 (  0.54)	Loss_d 0.693 (0.693)	test_acc_d   0.57 (  0.54)	test_minacc_d   0.47 (  0.54)	test_majacc_d   0.58 (  0.54)	test_corr_d   0.03 (  0.01)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.54 (  0.54)	test_minacc   0.55 (  0.54)	test_majacc   0.54 (  0.54)	Loss_d 0.693 (0.693)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.55 (  0.54)	test_majacc_d   0.54 (  0.54)	test_corr_d   0.01 ( -0.01)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.53 (  0.54)	test_minacc   0.46 (  0.53)	test_majacc   0.55 (  0.54)	Loss_d 0.693 (0.693)	test_acc_d   0.53 (  0.54)	test_minacc_d   0.46 (  0.53)	test_majacc_d   0.55 (  0.54)	test_corr_d   0.01 ( -0.01)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.28it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.54 (  0.54)	test_minacc   0.54 (  0.54)	test_majacc   0.53 (  0.53)	Loss_d 0.693 (0.693)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.54 (  0.54)	test_majacc_d   0.53 (  0.53)	test_corr_d  -0.05 ( -0.05)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.54 (  0.54)	test_minacc   0.54 (  0.54)	test_majacc   0.53 (  0.53)	Loss_d 0.693 (0.693)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.54 (  0.54)	test_majacc_d   0.53 (  0.53)	test_corr_d  -0.05 ( -0.05)
Overall Timing[ 47/  1]	epoch_time 0.0352 (0.0371)	validation_time 0.0004 (0.0005)	train_time 0.0348 (0.0364)
record: (train_acc, test_acc) (0.6775000246167183, 0.6940000057220459)
last accs (train_acc, test_acc) (0.5429000150561333, 0.5400000214576721)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.22it/s] 19%|#9        | 5/26 [00:00<00:01, 20.44it/s] 35%|###4      | 9/26 [00:00<00:00, 25.99it/s] 50%|#####     | 13/26 [00:00<00:00, 28.05it/s] 65%|######5   | 17/26 [00:00<00:00, 30.36it/s] 81%|########  | 21/26 [00:00<00:00, 31.79it/s] 96%|#########6| 25/26 [00:00<00:00, 32.74it/s]100%|##########| 26/26 [00:00<00:00, 27.55it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1248 400
penalty weights 10000.0
args.step pgd_anneal_iters 1248 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1249 400
penalty weights 10000.0
args.step pgd_anneal_iters 1249 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1250 400
penalty weights 10000.0
args.step pgd_anneal_iters 1250 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1251 400
penalty weights 10000.0
args.step pgd_anneal_iters 1251 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1252 400
penalty weights 10000.0
args.step pgd_anneal_iters 1252 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1253 400
penalty weights 10000.0
args.step pgd_anneal_iters 1253 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1254 400
penalty weights 10000.0
args.step pgd_anneal_iters 1254 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1255 400
penalty weights 10000.0
args.step pgd_anneal_iters 1255 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1256 400
penalty weights 10000.0
args.step pgd_anneal_iters 1256 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1257 400
penalty weights 10000.0
args.step pgd_anneal_iters 1257 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1258 400
penalty weights 10000.0
args.step pgd_anneal_iters 1258 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1259 400
penalty weights 10000.0
args.step pgd_anneal_iters 1259 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1260 400
penalty weights 10000.0
args.step pgd_anneal_iters 1260 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1261 400
penalty weights 10000.0
args.step pgd_anneal_iters 1261 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1262 400
penalty weights 10000.0
args.step pgd_anneal_iters 1262 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1263 400
penalty weights 10000.0
args.step pgd_anneal_iters 1263 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1264 400
penalty weights 10000.0
args.step pgd_anneal_iters 1264 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1265 400
penalty weights 10000.0
args.step pgd_anneal_iters 1265 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1266 400
penalty weights 10000.0
args.step pgd_anneal_iters 1266 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1267 400
penalty weights 10000.0
args.step pgd_anneal_iters 1267 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1268 400
penalty weights 10000.0
args.step pgd_anneal_iters 1268 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1269 400
penalty weights 10000.0
args.step pgd_anneal_iters 1269 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1270 400
penalty weights 10000.0
args.step pgd_anneal_iters 1270 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1271 400
penalty weights 10000.0
args.step pgd_anneal_iters 1271 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1272 400
penalty weights 10000.0
args.step pgd_anneal_iters 1272 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1273 400
penalty weights 10000.0
args.step pgd_anneal_iters 1273 600
dim_v 512
Epoch: [48][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.15 (  0.15)	train_acc   0.54 (  0.55)	train_minacc   0.44 (  0.53)	train_majacc   0.56 (  0.55)	train_corr   0.00 (  0.00)	l1 8.1687 (8.1694)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.68it/s] 27%|##6       | 7/26 [00:00<00:00, 30.91it/s]                                               27%|##6       | 7/26 [00:00<00:00, 30.91it/s] 46%|####6     | 12/26 [00:00<00:00, 36.42it/s] 69%|######9   | 18/26 [00:00<00:00, 43.63it/s]                                                69%|######9   | 18/26 [00:00<00:00, 43.63it/s] 92%|#########2| 24/26 [00:00<00:00, 46.03it/s]100%|##########| 26/26 [00:00<00:00, 37.48it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.55 (  0.55)	test_minacc   0.48 (  0.48)	test_majacc   0.56 (  0.56)	Loss_d 0.693 (0.693)	test_acc_d   0.55 (  0.55)	test_minacc_d   0.48 (  0.48)	test_majacc_d   0.56 (  0.56)	test_corr_d   0.03 (  0.03)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.57 (  0.54)	test_minacc   0.47 (  0.52)	test_majacc   0.59 (  0.55)	Loss_d 0.693 (0.693)	test_acc_d   0.57 (  0.54)	test_minacc_d   0.47 (  0.52)	test_majacc_d   0.59 (  0.55)	test_corr_d   0.03 (  0.01)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.55 (  0.55)	test_minacc   0.56 (  0.53)	test_majacc   0.55 (  0.55)	Loss_d 0.693 (0.693)	test_acc_d   0.55 (  0.55)	test_minacc_d   0.56 (  0.53)	test_majacc_d   0.55 (  0.55)	test_corr_d   0.01 ( -0.01)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.54 (  0.55)	test_minacc   0.44 (  0.52)	test_majacc   0.56 (  0.56)	Loss_d 0.693 (0.693)	test_acc_d   0.54 (  0.55)	test_minacc_d   0.44 (  0.52)	test_majacc_d   0.56 (  0.56)	test_corr_d   0.01 ( -0.01)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.23it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.53 (  0.53)	test_minacc   0.53 (  0.53)	test_majacc   0.53 (  0.53)	Loss_d 0.693 (0.693)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.53 (  0.53)	test_corr_d  -0.05 ( -0.05)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.53 (  0.53)	test_minacc   0.53 (  0.53)	test_majacc   0.53 (  0.53)	Loss_d 0.693 (0.693)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.53 (  0.53)	test_corr_d  -0.05 ( -0.05)
Overall Timing[ 48/  1]	epoch_time 0.0364 (0.0370)	validation_time 0.0003 (0.0005)	train_time 0.0361 (0.0364)
record: (train_acc, test_acc) (0.6775000246167183, 0.6940000057220459)
last accs (train_acc, test_acc) (0.5502000162005425, 0.5330000519752502)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  6.01it/s] 12%|#1        | 3/26 [00:00<00:02, 11.14it/s] 27%|##6       | 7/26 [00:00<00:00, 20.80it/s] 42%|####2     | 11/26 [00:00<00:00, 26.03it/s] 58%|#####7    | 15/26 [00:00<00:00, 28.82it/s] 73%|#######3  | 19/26 [00:00<00:00, 30.57it/s] 88%|########8 | 23/26 [00:00<00:00, 32.19it/s]100%|##########| 26/26 [00:01<00:00, 25.68it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1274 400
penalty weights 10000.0
args.step pgd_anneal_iters 1274 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1275 400
penalty weights 10000.0
args.step pgd_anneal_iters 1275 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1276 400
penalty weights 10000.0
args.step pgd_anneal_iters 1276 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1277 400
penalty weights 10000.0
args.step pgd_anneal_iters 1277 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1278 400
penalty weights 10000.0
args.step pgd_anneal_iters 1278 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1279 400
penalty weights 10000.0
args.step pgd_anneal_iters 1279 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1280 400
penalty weights 10000.0
args.step pgd_anneal_iters 1280 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1281 400
penalty weights 10000.0
args.step pgd_anneal_iters 1281 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1282 400
penalty weights 10000.0
args.step pgd_anneal_iters 1282 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1283 400
penalty weights 10000.0
args.step pgd_anneal_iters 1283 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1284 400
penalty weights 10000.0
args.step pgd_anneal_iters 1284 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1285 400
penalty weights 10000.0
args.step pgd_anneal_iters 1285 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1286 400
penalty weights 10000.0
args.step pgd_anneal_iters 1286 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1287 400
penalty weights 10000.0
args.step pgd_anneal_iters 1287 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1288 400
penalty weights 10000.0
args.step pgd_anneal_iters 1288 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1289 400
penalty weights 10000.0
args.step pgd_anneal_iters 1289 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1290 400
penalty weights 10000.0
args.step pgd_anneal_iters 1290 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1291 400
penalty weights 10000.0
args.step pgd_anneal_iters 1291 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1292 400
penalty weights 10000.0
args.step pgd_anneal_iters 1292 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1293 400
penalty weights 10000.0
args.step pgd_anneal_iters 1293 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1294 400
penalty weights 10000.0
args.step pgd_anneal_iters 1294 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1295 400
penalty weights 10000.0
args.step pgd_anneal_iters 1295 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1296 400
penalty weights 10000.0
args.step pgd_anneal_iters 1296 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1297 400
penalty weights 10000.0
args.step pgd_anneal_iters 1297 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1298 400
penalty weights 10000.0
args.step pgd_anneal_iters 1298 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1299 400
penalty weights 10000.0
args.step pgd_anneal_iters 1299 600
dim_v 512
Epoch: [49][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.15 (  0.15)	train_acc   0.54 (  0.55)	train_minacc   0.41 (  0.52)	train_majacc   0.56 (  0.56)	train_corr   0.00 (  0.00)	l1 8.1673 (8.1679)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:00, 27.47it/s] 35%|###4      | 9/26 [00:00<00:00, 40.84it/s]                                               35%|###4      | 9/26 [00:00<00:00, 40.84it/s] 58%|#####7    | 15/26 [00:00<00:00, 47.01it/s]                                                58%|#####7    | 15/26 [00:00<00:00, 47.01it/s] 81%|########  | 21/26 [00:00<00:00, 48.07it/s]100%|##########| 26/26 [00:00<00:00, 43.89it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.56 (  0.56)	test_minacc   0.46 (  0.46)	test_majacc   0.57 (  0.57)	Loss_d 0.693 (0.693)	test_acc_d   0.56 (  0.56)	test_minacc_d   0.46 (  0.46)	test_majacc_d   0.57 (  0.57)	test_corr_d   0.03 (  0.03)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.57 (  0.55)	test_minacc   0.47 (  0.51)	test_majacc   0.59 (  0.55)	Loss_d 0.693 (0.693)	test_acc_d   0.57 (  0.55)	test_minacc_d   0.47 (  0.51)	test_majacc_d   0.59 (  0.55)	test_corr_d   0.03 (  0.01)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.54 (  0.55)	test_minacc   0.58 (  0.52)	test_majacc   0.54 (  0.56)	Loss_d 0.693 (0.693)	test_acc_d   0.54 (  0.55)	test_minacc_d   0.58 (  0.52)	test_majacc_d   0.54 (  0.56)	test_corr_d   0.01 ( -0.01)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.54 (  0.55)	test_minacc   0.41 (  0.51)	test_majacc   0.56 (  0.56)	Loss_d 0.693 (0.693)	test_acc_d   0.54 (  0.55)	test_minacc_d   0.41 (  0.51)	test_majacc_d   0.56 (  0.56)	test_corr_d   0.01 ( -0.01)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.88it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.52 (  0.52)	test_minacc   0.51 (  0.51)	test_majacc   0.55 (  0.55)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.55 (  0.55)	test_corr_d  -0.05 ( -0.05)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.52 (  0.52)	test_minacc   0.51 (  0.51)	test_majacc   0.55 (  0.55)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.55 (  0.55)	test_corr_d  -0.05 ( -0.05)
Overall Timing[ 49/  1]	epoch_time 0.0351 (0.0370)	validation_time 0.0004 (0.0005)	train_time 0.0347 (0.0363)
record: (train_acc, test_acc) (0.6775000246167183, 0.6940000057220459)
last accs (train_acc, test_acc) (0.5511000149846077, 0.5160000324249268)
done saving aggregate.csv to ./aggregate.csv
wandb: - 0.097 MB of 0.097 MB uploadedwandb: \ 0.097 MB of 0.097 MB uploadedwandb: | 0.097 MB of 0.097 MB uploadedwandb: / 0.119 MB of 0.127 MB uploaded (0.003 MB deduped)wandb: - 0.494 MB of 0.494 MB uploaded (0.003 MB deduped)wandb: 
wandb: Run history:
wandb:                                                                           global_step ▁▁▁▁▂▂▂▂▂▃▃▃▃▃▃▄▄▄▄▄▅▅▅▅▅▅▆▆▆▆▆▆▇▇▇▇▇███
wandb:      resnet18-usc-unsigned/baseline/prune_rate=1.0/31/logs/diagnostics/epoch_time_val █▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:      resnet18-usc-unsigned/baseline/prune_rate=1.0/31/logs/diagnostics/train_time_val █▁▂▁▁▁▁▁▂▁▁▁▁▁▁▁▁▁▁▂▁▁▁▁▁▁▁▁▂▁▁▂▁▁▁▁▂▁▁▁
wandb: resnet18-usc-unsigned/baseline/prune_rate=1.0/31/logs/diagnostics/validation_time_val █▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:                     resnet18-usc-unsigned/baseline/prune_rate=1.0/31/logs/global_step ▁▁▁▁▂▂▂▂▂▃▃▃▃▃▃▄▄▄▄▄▅▅▅▅▅▅▆▆▆▆▆▆▇▇▇▇▇███
wandb:                   resnet18-usc-unsigned/baseline/prune_rate=1.0/31/logs/test/Loss_avg ▇██▇▇▇▇▇▇▇▆█▁▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂
wandb:                 resnet18-usc-unsigned/baseline/prune_rate=1.0/31/logs/test/Loss_d_avg ▇██▇▇▇▇▇▇▇▆█▁▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂
wandb:                 resnet18-usc-unsigned/baseline/prune_rate=1.0/31/logs/test/Loss_d_val ▇██▇▇▇▇▇▇▇▆█▁▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂
wandb:                   resnet18-usc-unsigned/baseline/prune_rate=1.0/31/logs/test/Loss_val ▇██▇▇▇▇▇▇▇▆█▁▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂
wandb:               resnet18-usc-unsigned/baseline/prune_rate=1.0/31/logs/test/test_acc_avg ▁▁▁▂▁▂▂▂▂▂▄▂█▇▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/31/logs/test/test_acc_d_avg ▁▁▁▂▁▂▂▂▂▂▄▂█▇▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/31/logs/test/test_acc_d_val ▁▁▁▂▁▂▂▂▂▂▄▂█▇▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆
wandb:               resnet18-usc-unsigned/baseline/prune_rate=1.0/31/logs/test/test_acc_val ▁▁▁▂▁▂▂▂▂▂▄▂█▇▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/31/logs/test/test_corr_d_avg ███▇█▇▇▇▇▇▆▇▁▂▂▂▂▃▃▂▂▂▂▂▂▂▂▂▂▃▃▃▃▃▃▃▃▃▃▃
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/31/logs/test/test_corr_d_val ███▇█▇▇▇▇▇▆▇▁▂▂▂▂▃▃▂▂▂▂▂▂▂▂▂▂▃▃▃▃▃▃▃▃▃▃▃
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/31/logs/test/test_majacc_avg ███▇██▇▇████▃▂▂▂▁▁▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/31/logs/test/test_majacc_d_avg ███▇██▇▇████▃▂▂▂▁▁▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/31/logs/test/test_majacc_d_val ███▇██▇▇████▃▂▂▂▁▁▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/31/logs/test/test_majacc_val ███▇██▇▇████▃▂▂▂▁▁▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/31/logs/test/test_minacc_avg ▁▁▁▂▁▂▂▂▂▂▄▂█▇▇▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/31/logs/test/test_minacc_d_avg ▁▁▁▂▁▂▂▂▂▂▄▂█▇▇▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/31/logs/test/test_minacc_d_val ▁▁▁▂▁▂▂▂▂▂▄▂█▇▇▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/31/logs/test/test_minacc_val ▁▁▁▂▁▂▂▂▂▂▄▂█▇▇▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆
wandb:                  resnet18-usc-unsigned/baseline/prune_rate=1.0/31/logs/train/Loss_avg █▅▃▂▂▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:                  resnet18-usc-unsigned/baseline/prune_rate=1.0/31/logs/train/Loss_val █▅▃▃▂▂▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:                    resnet18-usc-unsigned/baseline/prune_rate=1.0/31/logs/train/l1_avg ▃▂▁▁▁▂▃▃▅▆▇▇███████▄▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃
wandb:                    resnet18-usc-unsigned/baseline/prune_rate=1.0/31/logs/train/l1_val ▂▁▁▁▁▂▃▄▅▆▇▇███████▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/31/logs/train/train_acc_avg ▇███████████▇▄▃▂▂▁▁▂▂▂▂▂▁▁▁▁▁▁▁▂▂▂▂▂▂▂▂▂
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/31/logs/train/train_acc_val ▇▇▇▇▇▇▇▇▇▇█▇▅▃▃▂▂▂▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▂▂▁▂▂▂
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/31/logs/train/train_corr_avg ▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/31/logs/train/train_corr_val ▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/31/logs/train/train_majacc_avg ▇███████████▆▃▂▂▁▁▁▂▂▂▂▂▁▁▁▁▁▁▁▂▂▂▂▂▂▂▂▂
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/31/logs/train/train_majacc_val █████▇█▇▇▇█▇▃▃▂▂▂▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▂▂
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/31/logs/train/train_minacc_avg ▂▁▁▂▂▃▃▃▃▄▄▄▆█▇▇▇▇▆▇▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/31/logs/train/train_minacc_val ▁▁▂▁▂▃▂▄▄▅▅▄█▆▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▄
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/31/logs/train/train_nll_avg ▅▃▂▂▂▂▁▁▁▁▁▁▃▇██████████████████████████
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/31/logs/train/train_nll_val ▃▃▃▂▂▂▂▂▂▂▁▁▇▇██████████████████████████
wandb:         resnet18-usc-unsigned/baseline/prune_rate=1.0/31/logs/train/train_penalty_avg █▂▂▂▂▂▂▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:         resnet18-usc-unsigned/baseline/prune_rate=1.0/31/logs/train/train_penalty_val █▇▅▅▄▃▃▃▃▂▃▃▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:           resnet18-usc-unsigned/baseline/prune_rate=1.0/31/logs/train/weight_norm_avg █▅▃▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:           resnet18-usc-unsigned/baseline/prune_rate=1.0/31/logs/train/weight_norm_val █▄▃▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb: 
wandb: Run summary:
wandb:                                                                           global_step 49
wandb:      resnet18-usc-unsigned/baseline/prune_rate=1.0/31/logs/diagnostics/epoch_time_val 0.0351
wandb:      resnet18-usc-unsigned/baseline/prune_rate=1.0/31/logs/diagnostics/train_time_val 0.0347
wandb: resnet18-usc-unsigned/baseline/prune_rate=1.0/31/logs/diagnostics/validation_time_val 0.00037
wandb:                     resnet18-usc-unsigned/baseline/prune_rate=1.0/31/logs/global_step 49
wandb:                   resnet18-usc-unsigned/baseline/prune_rate=1.0/31/logs/test/Loss_avg 0.69254
wandb:                 resnet18-usc-unsigned/baseline/prune_rate=1.0/31/logs/test/Loss_d_avg 0.69254
wandb:                 resnet18-usc-unsigned/baseline/prune_rate=1.0/31/logs/test/Loss_d_val 0.69254
wandb:                   resnet18-usc-unsigned/baseline/prune_rate=1.0/31/logs/test/Loss_val 0.69254
wandb:               resnet18-usc-unsigned/baseline/prune_rate=1.0/31/logs/test/test_acc_avg 0.516
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/31/logs/test/test_acc_d_avg 0.516
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/31/logs/test/test_acc_d_val 0.516
wandb:               resnet18-usc-unsigned/baseline/prune_rate=1.0/31/logs/test/test_acc_val 0.516
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/31/logs/test/test_corr_d_avg -0.05119
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/31/logs/test/test_corr_d_val -0.05119
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/31/logs/test/test_majacc_avg 0.55
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/31/logs/test/test_majacc_d_avg 0.55
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/31/logs/test/test_majacc_d_val 0.55
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/31/logs/test/test_majacc_val 0.55
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/31/logs/test/test_minacc_avg 0.51222
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/31/logs/test/test_minacc_d_avg 0.51222
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/31/logs/test/test_minacc_d_val 0.51222
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/31/logs/test/test_minacc_val 0.51222
wandb:                  resnet18-usc-unsigned/baseline/prune_rate=1.0/31/logs/train/Loss_avg 8e-05
wandb:                  resnet18-usc-unsigned/baseline/prune_rate=1.0/31/logs/train/Loss_val 8e-05
wandb:                    resnet18-usc-unsigned/baseline/prune_rate=1.0/31/logs/train/l1_avg 8.1679
wandb:                    resnet18-usc-unsigned/baseline/prune_rate=1.0/31/logs/train/l1_val 8.16728
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/31/logs/train/train_acc_avg 0.5505
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/31/logs/train/train_acc_val 0.54
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/31/logs/train/train_corr_avg 0.0
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/31/logs/train/train_corr_val 0.0
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/31/logs/train/train_majacc_avg 0.55658
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/31/logs/train/train_majacc_val 0.56459
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/31/logs/train/train_minacc_avg 0.51512
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/31/logs/train/train_minacc_val 0.41463
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/31/logs/train/train_nll_avg 0.69308
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/31/logs/train/train_nll_val 0.69314
wandb:         resnet18-usc-unsigned/baseline/prune_rate=1.0/31/logs/train/train_penalty_avg 0.0
wandb:         resnet18-usc-unsigned/baseline/prune_rate=1.0/31/logs/train/train_penalty_val 0.0
wandb:           resnet18-usc-unsigned/baseline/prune_rate=1.0/31/logs/train/weight_norm_avg 0.15183
wandb:           resnet18-usc-unsigned/baseline/prune_rate=1.0/31/logs/train/weight_norm_val 0.15172
wandb: 
wandb: 🚀 View run name_random at: https://wandb.ai/janezdu-uiuc/irm/runs/oe9kzqg8
wandb: ⭐️ View project at: https://wandb.ai/janezdu-uiuc/irm
wandb: Synced 5 W&B file(s), 0 media file(s), 2 artifact file(s) and 1 other file(s)
wandb: Find logs at: ./wandb/run-20240906_150403-oe9kzqg8/logs
wandb: WARNING The new W&B backend becomes opt-out in version 0.18.0; try it out with `wandb.require("core")`! See https://wandb.me/wandb-core for more information.
wandb: Currently logged in as: janezdu (janezdu-uiuc). Use `wandb login --relogin` to force relogin
wandb: wandb version 0.17.9 is available!  To upgrade, please run:
wandb:  $ pip install wandb --upgrade
wandb: Tracking run with wandb version 0.17.7
wandb: Run data is saved locally in /scratch/users/zd16/sparseIRM-resnet-ver/wandb/run-20240906_150632-bq24aa3p
wandb: Run `wandb offline` to turn off syncing.
wandb: Syncing run name_random
wandb: ⭐️ View project at https://wandb.ai/janezdu-uiuc/irm
wandb: 🚀 View run at https://wandb.ai/janezdu-uiuc/irm/runs/bq24aa3p
=> Reading YAML config from configs/smallscale/resnet18/resnet18-usc-unsigned.yaml
Namespace(data='dataset/', optimizer='adam', weight_opt='adam', set='mnistcifar', arch='ResNet18', config='configs/smallscale/resnet18/resnet18-usc-unsigned.yaml', log_dir=None, workers=4, epochs=50, start_epoch=None, batch_size=390, lr=0.006, warmup_length=0, momentum=0.9, weight_decay=0.0, print_freq=10, num_classes=1, resume='', resume_train_weights='', evaluate=False, pretrained=None, pretrained_distill=None, alpha_distill=0.95, T_distill=2, seed=0, multigpu=[0], lr_policy='cosine_lr', lr_adjust=30, lr_gamma=0.1, name='baseline', save_every=-1, prune_rate=1.0, param_prune_rate=0.0, pr_start=1.0, low_data=1, width_mult=1.0, nesterov=False, threetimes=False, random_subnet=False, one_batch=False, conv_type='DenseConv', freeze_weights=False, st=False, mode='fan_in', nonlinearity='relu', bn_type='LearnedBatchNorm', init='kaiming_normal', no_bn_decay=False, scale_fan=False, first_layer_dense=False, last_layer_dense=True, approx=False, zero=False, flip=False, bs=False, gumbel_sample=False, multiply_prob=False, no_multiply=False, multiply_cont=False, multiply_prob_bs=False, indiv=False, label_smoothing=None, first_layer_type=None, trainer='default', score_init_constant=1.0, K=1, update_freq=20, D=0.01, T=1, TA=True, TA2=False, TA_grow=False, center=False, straight_through=False, PLA_factor=0.1, PLA_patience=10, gradient_loss_para=0, abs_loss_para=0, thres=0.9, runs_name='name_random', resume_compare_loss1='', resume_compare_loss2='', init_weights='', trained_mask='', weight_rescaling=False, constrain_by_layer=False, weight_rescaling_data=False, use_running_stats=False, not_clipping=False, rescaling_para=False, lasso_para=0, dont_freeze_weights=False, iterative=True, prob_by_weight=False, rescale_at_fix_subnet=False, train_weights_at_the_same_time=False, sample_from_training_set=False, load_true_para=False, distill=False, finetune=False, stablize=False, prev_best=0, weight_opt_lr=0.0006, n=500, ts=0.28, te=0.6, d=20000, s=80, c=0.75, init_prob=False, thres_before=0.001, wide_ratio=0.001, noise=1, cal_p_q=False, just_finetune=False, snip=False, envs_num=2, l2_regularizer_weight=0.001, data_num=50000, env_type='linear', irm_type='irmv1', hidden_dim=390, penalty_anneal_iters=400, penalty_weight=10000.0, grayscale_model=0, weight_lr_schedule=False, fix_subnet=False, freeze_weight=False, step='ours', prior_sd_coef=0, dim_inv=2, variance_gamma=1.0, dim_spu=10, image_scale=32, cons_ratio='0.999_0.7_0.1', noise_ratio=0.2, step_gamma=0.1, step_round=3, inner_steps=1, use_pgd=True, z=11.0, pgd_anneal_iters=600)
=> Creating model 'ResNet18'
Here!!!!!!!!
==> Conv Type: DenseConv
==> BN Type: LearnedBatchNorm
<class 'torch.nn.modules.conv.Conv2d'>
<class 'torch.nn.modules.batchnorm.BatchNorm2d'>
==> Building first layer with <class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
ResNet(
  (conv1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
  (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (relu): ReLU(inplace=True)
  (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
  (layer1): Sequential(
    (0): BasicBlock(
      (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (1): BasicBlock(
      (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (layer2): Sequential(
    (0): BasicBlock(
      (conv1): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (downsample): Sequential(
        (0): Conv2d(64, 128, kernel_size=(1, 1), stride=(2, 2), bias=False)
        (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (1): BasicBlock(
      (conv1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (layer3): Sequential(
    (0): BasicBlock(
      (conv1): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (downsample): Sequential(
        (0): Conv2d(128, 256, kernel_size=(1, 1), stride=(2, 2), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (1): BasicBlock(
      (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (layer4): Sequential(
    (0): BasicBlock(
      (conv1): Conv2d(256, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (downsample): Sequential(
        (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (1): BasicBlock(
      (conv1): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (avgpool): AdaptiveAvgPool2d(output_size=1)
  (fc): Linear(in_features=512, out_features=1, bias=True)
)
=> Parallelizing on [0] gpus
<DEBUG> gradient to module.conv1.weight
<DEBUG> gradient to module.bn1.weight
<DEBUG> gradient to module.bn1.bias
<DEBUG> gradient to module.layer1.0.conv1.weight
<DEBUG> gradient to module.layer1.0.bn1.weight
<DEBUG> gradient to module.layer1.0.bn1.bias
<DEBUG> gradient to module.layer1.0.conv2.weight
<DEBUG> gradient to module.layer1.0.bn2.weight
<DEBUG> gradient to module.layer1.0.bn2.bias
<DEBUG> gradient to module.layer1.1.conv1.weight
<DEBUG> gradient to module.layer1.1.bn1.weight
<DEBUG> gradient to module.layer1.1.bn1.bias
<DEBUG> gradient to module.layer1.1.conv2.weight
<DEBUG> gradient to module.layer1.1.bn2.weight
<DEBUG> gradient to module.layer1.1.bn2.bias
<DEBUG> gradient to module.layer2.0.conv1.weight
<DEBUG> gradient to module.layer2.0.bn1.weight
<DEBUG> gradient to module.layer2.0.bn1.bias
<DEBUG> gradient to module.layer2.0.conv2.weight
<DEBUG> gradient to module.layer2.0.bn2.weight
<DEBUG> gradient to module.layer2.0.bn2.bias
<DEBUG> gradient to module.layer2.0.downsample.0.weight
<DEBUG> gradient to module.layer2.0.downsample.1.weight
<DEBUG> gradient to module.layer2.0.downsample.1.bias
<DEBUG> gradient to module.layer2.1.conv1.weight
<DEBUG> gradient to module.layer2.1.bn1.weight
<DEBUG> gradient to module.layer2.1.bn1.bias
<DEBUG> gradient to module.layer2.1.conv2.weight
<DEBUG> gradient to module.layer2.1.bn2.weight
<DEBUG> gradient to module.layer2.1.bn2.bias
<DEBUG> gradient to module.layer3.0.conv1.weight
<DEBUG> gradient to module.layer3.0.bn1.weight
<DEBUG> gradient to module.layer3.0.bn1.bias
<DEBUG> gradient to module.layer3.0.conv2.weight
<DEBUG> gradient to module.layer3.0.bn2.weight
<DEBUG> gradient to module.layer3.0.bn2.bias
<DEBUG> gradient to module.layer3.0.downsample.0.weight
<DEBUG> gradient to module.layer3.0.downsample.1.weight
<DEBUG> gradient to module.layer3.0.downsample.1.bias
<DEBUG> gradient to module.layer3.1.conv1.weight
<DEBUG> gradient to module.layer3.1.bn1.weight
<DEBUG> gradient to module.layer3.1.bn1.bias
<DEBUG> gradient to module.layer3.1.conv2.weight
<DEBUG> gradient to module.layer3.1.bn2.weight
<DEBUG> gradient to module.layer3.1.bn2.bias
<DEBUG> gradient to module.layer4.0.conv1.weight
<DEBUG> gradient to module.layer4.0.bn1.weight
<DEBUG> gradient to module.layer4.0.bn1.bias
<DEBUG> gradient to module.layer4.0.conv2.weight
<DEBUG> gradient to module.layer4.0.bn2.weight
<DEBUG> gradient to module.layer4.0.bn2.bias
<DEBUG> gradient to module.layer4.0.downsample.0.weight
<DEBUG> gradient to module.layer4.0.downsample.1.weight
<DEBUG> gradient to module.layer4.0.downsample.1.bias
<DEBUG> gradient to module.layer4.1.conv1.weight
<DEBUG> gradient to module.layer4.1.bn1.weight
<DEBUG> gradient to module.layer4.1.bn1.bias
<DEBUG> gradient to module.layer4.1.conv2.weight
<DEBUG> gradient to module.layer4.1.bn2.weight
<DEBUG> gradient to module.layer4.1.bn2.bias
<DEBUG> gradient to module.fc.weight
<DEBUG> gradient to module.fc.bias
Files already downloaded and verified
Files already downloaded and verified
Adding Noise to Label, len(Y)=12000, Label_noise=1169
Xmp (7877, 3, 32, 32) (6903, 3, 32, 32)
Xcp (6015, 3, 32, 32) (5985, 3, 32, 32)
env=0 2497 2497 3 3
xn 2500 xp 2500
env=1 1750 1750 750 750
xn 2500 xp 2500
env=2 50 50 450 450
xn 500 xp 500
=> Creating model 'EBD'
EBD(
  (embedings): Embedding(2, 1)
)
=> Parallelizing on [0] gpus
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:01<00:39,  1.60s/it] 19%|#9        | 5/26 [00:01<00:05,  3.81it/s] 35%|###4      | 9/26 [00:01<00:02,  7.46it/s] 50%|#####     | 13/26 [00:01<00:01, 11.36it/s] 65%|######5   | 17/26 [00:02<00:00, 15.24it/s] 81%|########  | 21/26 [00:02<00:00, 19.00it/s] 96%|#########6| 25/26 [00:02<00:00, 22.39it/s]100%|##########| 26/26 [00:02<00:00,  9.72it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 0 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 2 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 3 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 4 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 5 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 6 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 7 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 8 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 9 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 10 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 11 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 12 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 13 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 14 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 15 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 16 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 17 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 18 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 19 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 20 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 21 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 22 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 23 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 24 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 25 400
penalty weights 0.0
Epoch: [0][  26/  26]	Loss 10.695 (12.883)	train_nll   0.47 (  0.65)	train_penalty   0.09 (  0.50)	weight_norm  10.23 ( 12.23)	train_acc   0.83 (  0.78)	train_minacc   0.05 (  0.10)	train_majacc   0.99 (  0.91)	train_corr   0.00 (  0.00)	l1 6.7878 (8.1978)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.87it/s] 27%|##6       | 7/26 [00:00<00:00, 32.66it/s]                                               27%|##6       | 7/26 [00:00<00:00, 32.66it/s] 50%|#####     | 13/26 [00:00<00:00, 41.79it/s] 69%|######9   | 18/26 [00:00<00:00, 44.35it/s]                                                69%|######9   | 18/26 [00:00<00:00, 44.35it/s] 92%|#########2| 24/26 [00:00<00:00, 49.00it/s]100%|##########| 26/26 [00:00<00:00, 39.98it/s]
Test: [   0/  26]	Loss 0.397 (0.397)	test_acc   0.86 (  0.86)	test_minacc   0.00 (  0.00)	test_majacc   0.99 (  0.99)	Loss_d 0.397 (0.397)	test_acc_d   0.86 (  0.86)	test_minacc_d   0.00 (  0.00)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.97 (  0.97)
Test: [  10/  26]	Loss 0.392 (0.409)	test_acc   0.86 (  0.85)	test_minacc   0.00 (  0.02)	test_majacc   0.98 (  0.99)	Loss_d 0.392 (0.409)	test_acc_d   0.86 (  0.85)	test_minacc_d   0.00 (  0.02)	test_majacc_d   0.98 (  0.99)	test_corr_d   0.97 (  0.97)
Test: [  20/  26]	Loss 0.429 (0.418)	test_acc   0.83 (  0.85)	test_minacc   0.00 (  0.01)	test_majacc   0.99 (  0.99)	Loss_d 0.429 (0.418)	test_acc_d   0.83 (  0.85)	test_minacc_d   0.00 (  0.01)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.96 (  0.97)
Test: [  26/  26]	Loss 0.462 (0.421)	test_acc   0.83 (  0.84)	test_minacc   0.05 (  0.01)	test_majacc   0.99 (  0.99)	Loss_d 0.462 (0.421)	test_acc_d   0.83 (  0.84)	test_minacc_d   0.05 (  0.01)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.96 (  0.97)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00,  2.56it/s]100%|##########| 1/1 [00:00<00:00,  2.56it/s]
Test: [  0/  1]	Loss 1.632 (1.632)	test_acc   0.11 (  0.11)	test_minacc   0.02 (  0.02)	test_majacc   0.99 (  0.99)	Loss_d 1.632 (1.632)	test_acc_d   0.11 (  0.11)	test_minacc_d   0.02 (  0.02)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.96 (  0.96)
Test: [  1/  1]	Loss 1.632 (1.632)	test_acc   0.11 (  0.11)	test_minacc   0.02 (  0.02)	test_majacc   0.99 (  0.99)	Loss_d 1.632 (1.632)	test_acc_d   0.11 (  0.11)	test_minacc_d   0.02 (  0.02)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.96 (  0.96)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/32/checkpoints/model_best.pth
Overall Timing[  0/  1]	epoch_time 0.0800 (0.0800)	validation_time 0.0066 (0.0066)	train_time 0.0648 (0.0648)
record: (train_acc, test_acc) (0.8449000222086906, 0.11400000751018524)
last accs (train_acc, test_acc) (0.8449000222086906, 0.11400000751018524)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.50it/s] 19%|#9        | 5/26 [00:00<00:00, 21.97it/s] 35%|###4      | 9/26 [00:00<00:00, 27.57it/s] 50%|#####     | 13/26 [00:00<00:00, 30.16it/s] 65%|######5   | 17/26 [00:00<00:00, 31.75it/s] 81%|########  | 21/26 [00:00<00:00, 32.82it/s] 96%|#########6| 25/26 [00:00<00:00, 33.30it/s]100%|##########| 26/26 [00:00<00:00, 28.43it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 26 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 27 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 28 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 29 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 30 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 31 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 32 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 33 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 34 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 35 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 36 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 37 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 38 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 39 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 40 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 41 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 42 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 43 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 44 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 45 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 46 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 47 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 48 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 49 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 50 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 51 400
penalty weights 0.0
Epoch: [1][  26/  26]	Loss 6.020 (8.011)	train_nll   0.44 (  0.42)	train_penalty   0.06 (  0.06)	weight_norm   5.58 (  7.60)	train_acc   0.83 (  0.85)	train_minacc   0.00 (  0.01)	train_majacc   1.00 (  1.00)	train_corr   0.00 (  0.00)	l1 6.2044 (6.4501)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 18.50it/s] 27%|##6       | 7/26 [00:00<00:00, 35.65it/s]                                               27%|##6       | 7/26 [00:00<00:00, 35.65it/s] 50%|#####     | 13/26 [00:00<00:00, 41.29it/s] 73%|#######3  | 19/26 [00:00<00:00, 47.41it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 47.41it/s] 96%|#########6| 25/26 [00:00<00:00, 47.23it/s]100%|##########| 26/26 [00:00<00:00, 40.46it/s]
Test: [   0/  26]	Loss 0.386 (0.386)	test_acc   0.86 (  0.86)	test_minacc   0.00 (  0.00)	test_majacc   1.00 (  1.00)	Loss_d 0.386 (0.386)	test_acc_d   0.86 (  0.86)	test_minacc_d   0.00 (  0.00)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.98 (  0.98)
Test: [  10/  26]	Loss 0.381 (0.398)	test_acc   0.87 (  0.86)	test_minacc   0.02 (  0.01)	test_majacc   0.99 (  1.00)	Loss_d 0.381 (0.398)	test_acc_d   0.87 (  0.86)	test_minacc_d   0.02 (  0.01)	test_majacc_d   0.99 (  1.00)	test_corr_d   0.97 (  0.97)
Test: [  20/  26]	Loss 0.421 (0.407)	test_acc   0.84 (  0.85)	test_minacc   0.02 (  0.02)	test_majacc   0.99 (  1.00)	Loss_d 0.421 (0.407)	test_acc_d   0.84 (  0.85)	test_minacc_d   0.02 (  0.02)	test_majacc_d   0.99 (  1.00)	test_corr_d   0.97 (  0.97)
Test: [  26/  26]	Loss 0.444 (0.410)	test_acc   0.83 (  0.85)	test_minacc   0.00 (  0.01)	test_majacc   1.00 (  1.00)	Loss_d 0.444 (0.410)	test_acc_d   0.83 (  0.85)	test_minacc_d   0.00 (  0.01)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.98 (  0.97)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.85it/s]
Test: [  0/  1]	Loss 1.594 (1.594)	test_acc   0.11 (  0.11)	test_minacc   0.01 (  0.01)	test_majacc   1.00 (  1.00)	Loss_d 1.594 (1.594)	test_acc_d   0.11 (  0.11)	test_minacc_d   0.01 (  0.01)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.97 (  0.97)
Test: [  1/  1]	Loss 1.594 (1.594)	test_acc   0.11 (  0.11)	test_minacc   0.01 (  0.01)	test_majacc   1.00 (  1.00)	Loss_d 1.594 (1.594)	test_acc_d   0.11 (  0.11)	test_minacc_d   0.01 (  0.01)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.97 (  0.97)
Overall Timing[  1/  1]	epoch_time 0.0373 (0.0586)	validation_time 0.0004 (0.0035)	train_time 0.0369 (0.0509)
record: (train_acc, test_acc) (0.8449000222086906, 0.11400000751018524)
last accs (train_acc, test_acc) (0.8488000209331512, 0.10600000619888306)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.36it/s] 19%|#9        | 5/26 [00:00<00:00, 23.10it/s] 35%|###4      | 9/26 [00:00<00:00, 28.08it/s] 50%|#####     | 13/26 [00:00<00:00, 30.68it/s] 65%|######5   | 17/26 [00:00<00:00, 32.25it/s] 81%|########  | 21/26 [00:00<00:00, 33.30it/s] 96%|#########6| 25/26 [00:00<00:00, 33.83it/s]100%|##########| 26/26 [00:00<00:00, 29.00it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 52 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 53 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 54 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 55 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 56 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 57 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 58 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 59 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 60 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 61 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 62 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 63 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 64 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 65 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 66 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 67 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 68 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 69 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 70 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 71 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 72 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 73 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 74 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 75 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 76 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 77 400
penalty weights 0.0
Epoch: [2][  26/  26]	Loss 3.780 (4.712)	train_nll   0.44 (  0.41)	train_penalty   0.05 (  0.06)	weight_norm   3.34 (  4.30)	train_acc   0.83 (  0.85)	train_minacc   0.02 (  0.02)	train_majacc   0.99 (  0.99)	train_corr   0.00 (  0.00)	l1 5.4306 (5.8658)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 19.85it/s] 31%|###       | 8/26 [00:00<00:00, 42.45it/s]                                               31%|###       | 8/26 [00:00<00:00, 42.45it/s] 50%|#####     | 13/26 [00:00<00:00, 42.87it/s] 73%|#######3  | 19/26 [00:00<00:00, 49.07it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 49.07it/s] 96%|#########6| 25/26 [00:00<00:00, 48.34it/s]100%|##########| 26/26 [00:00<00:00, 42.23it/s]
Test: [   0/  26]	Loss 0.377 (0.377)	test_acc   0.86 (  0.86)	test_minacc   0.02 (  0.02)	test_majacc   0.99 (  0.99)	Loss_d 0.377 (0.377)	test_acc_d   0.86 (  0.86)	test_minacc_d   0.02 (  0.02)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.95 (  0.95)
Test: [  10/  26]	Loss 0.369 (0.387)	test_acc   0.88 (  0.86)	test_minacc   0.04 (  0.04)	test_majacc   1.00 (  0.99)	Loss_d 0.369 (0.387)	test_acc_d   0.88 (  0.86)	test_minacc_d   0.04 (  0.04)	test_majacc_d   1.00 (  0.99)	test_corr_d   0.95 (  0.95)
Test: [  20/  26]	Loss 0.408 (0.396)	test_acc   0.84 (  0.85)	test_minacc   0.08 (  0.04)	test_majacc   0.98 (  0.99)	Loss_d 0.408 (0.396)	test_acc_d   0.84 (  0.85)	test_minacc_d   0.08 (  0.04)	test_majacc_d   0.98 (  0.99)	test_corr_d   0.94 (  0.95)
Test: [  26/  26]	Loss 0.431 (0.398)	test_acc   0.84 (  0.85)	test_minacc   0.05 (  0.04)	test_majacc   1.00 (  0.99)	Loss_d 0.431 (0.398)	test_acc_d   0.84 (  0.85)	test_minacc_d   0.05 (  0.04)	test_majacc_d   1.00 (  0.99)	test_corr_d   0.94 (  0.95)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.52it/s]
Test: [  0/  1]	Loss 1.622 (1.622)	test_acc   0.12 (  0.12)	test_minacc   0.02 (  0.02)	test_majacc   1.00 (  1.00)	Loss_d 1.622 (1.622)	test_acc_d   0.12 (  0.12)	test_minacc_d   0.02 (  0.02)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.93 (  0.93)
Test: [  1/  1]	Loss 1.622 (1.622)	test_acc   0.12 (  0.12)	test_minacc   0.02 (  0.02)	test_majacc   1.00 (  1.00)	Loss_d 1.622 (1.622)	test_acc_d   0.12 (  0.12)	test_minacc_d   0.02 (  0.02)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.93 (  0.93)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/32/checkpoints/model_best.pth
Overall Timing[  2/  1]	epoch_time 0.0362 (0.0512)	validation_time 0.0003 (0.0024)	train_time 0.0359 (0.0459)
record: (train_acc, test_acc) (0.8499000209569931, 0.11500000208616257)
last accs (train_acc, test_acc) (0.8499000209569931, 0.11500000208616257)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  6.03it/s] 19%|#9        | 5/26 [00:00<00:01, 19.35it/s] 35%|###4      | 9/26 [00:00<00:00, 24.63it/s] 50%|#####     | 13/26 [00:00<00:00, 27.92it/s] 65%|######5   | 17/26 [00:00<00:00, 29.09it/s] 81%|########  | 21/26 [00:00<00:00, 30.66it/s] 96%|#########6| 25/26 [00:00<00:00, 31.79it/s]100%|##########| 26/26 [00:00<00:00, 26.56it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 78 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 79 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 80 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 81 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 82 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 83 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 84 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 85 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 86 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 87 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 88 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 89 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 90 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 91 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 92 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 93 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 94 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 95 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 96 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 97 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 98 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 99 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 100 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 101 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 102 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 103 400
penalty weights 0.0
Epoch: [3][  26/  26]	Loss 2.600 (3.087)	train_nll   0.44 (  0.40)	train_penalty   0.05 (  0.05)	weight_norm   2.16 (  2.68)	train_acc   0.82 (  0.85)	train_minacc   0.02 (  0.03)	train_majacc   0.99 (  0.99)	train_corr   0.00 (  0.00)	l1 4.9567 (5.1938)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:00, 29.38it/s] 31%|###       | 8/26 [00:00<00:00, 38.64it/s]                                               31%|###       | 8/26 [00:00<00:00, 38.64it/s] 54%|#####3    | 14/26 [00:00<00:00, 47.44it/s] 77%|#######6  | 20/26 [00:00<00:00, 48.25it/s]                                                77%|#######6  | 20/26 [00:00<00:00, 48.25it/s]100%|##########| 26/26 [00:00<00:00, 51.46it/s]100%|##########| 26/26 [00:00<00:00, 43.63it/s]
Test: [   0/  26]	Loss 0.379 (0.379)	test_acc   0.86 (  0.86)	test_minacc   0.04 (  0.04)	test_majacc   0.99 (  0.99)	Loss_d 0.379 (0.379)	test_acc_d   0.86 (  0.86)	test_minacc_d   0.04 (  0.04)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.95 (  0.95)
Test: [  10/  26]	Loss 0.376 (0.389)	test_acc   0.86 (  0.85)	test_minacc   0.00 (  0.03)	test_majacc   0.99 (  0.99)	Loss_d 0.376 (0.389)	test_acc_d   0.86 (  0.85)	test_minacc_d   0.00 (  0.03)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.95 (  0.95)
Test: [  20/  26]	Loss 0.407 (0.398)	test_acc   0.83 (  0.85)	test_minacc   0.00 (  0.03)	test_majacc   0.99 (  0.99)	Loss_d 0.407 (0.398)	test_acc_d   0.83 (  0.85)	test_minacc_d   0.00 (  0.03)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.95 (  0.95)
Test: [  26/  26]	Loss 0.425 (0.399)	test_acc   0.83 (  0.85)	test_minacc   0.05 (  0.02)	test_majacc   0.99 (  0.99)	Loss_d 0.425 (0.399)	test_acc_d   0.83 (  0.85)	test_minacc_d   0.05 (  0.02)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.94 (  0.95)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.49it/s]
Test: [  0/  1]	Loss 1.638 (1.638)	test_acc   0.11 (  0.11)	test_minacc   0.01 (  0.01)	test_majacc   1.00 (  1.00)	Loss_d 1.638 (1.638)	test_acc_d   0.11 (  0.11)	test_minacc_d   0.01 (  0.01)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.95 (  0.95)
Test: [  1/  1]	Loss 1.638 (1.638)	test_acc   0.11 (  0.11)	test_minacc   0.01 (  0.01)	test_majacc   1.00 (  1.00)	Loss_d 1.638 (1.638)	test_acc_d   0.11 (  0.11)	test_minacc_d   0.01 (  0.01)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.95 (  0.95)
Overall Timing[  3/  1]	epoch_time 0.0368 (0.0476)	validation_time 0.0004 (0.0019)	train_time 0.0364 (0.0435)
record: (train_acc, test_acc) (0.8499000209569931, 0.11500000208616257)
last accs (train_acc, test_acc) (0.8475000221729279, 0.10900000482797623)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.22it/s] 19%|#9        | 5/26 [00:00<00:01, 18.70it/s] 35%|###4      | 9/26 [00:00<00:00, 25.16it/s] 50%|#####     | 13/26 [00:00<00:00, 28.19it/s] 65%|######5   | 17/26 [00:00<00:00, 30.25it/s] 81%|########  | 21/26 [00:00<00:00, 31.54it/s] 96%|#########6| 25/26 [00:00<00:00, 32.43it/s]100%|##########| 26/26 [00:00<00:00, 26.59it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 104 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 105 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 106 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 107 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 108 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 109 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 110 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 111 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 112 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 113 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 114 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 115 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 116 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 117 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 118 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 119 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 120 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 121 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 122 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 123 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 124 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 125 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 126 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 127 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 128 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 129 400
penalty weights 0.0
Epoch: [4][  26/  26]	Loss 1.875 (2.160)	train_nll   0.44 (  0.40)	train_penalty   0.04 (  0.05)	weight_norm   1.44 (  1.76)	train_acc   0.83 (  0.85)	train_minacc   0.14 (  0.04)	train_majacc   0.97 (  0.99)	train_corr   0.00 (  0.00)	l1 4.8385 (4.8787)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.29it/s] 27%|##6       | 7/26 [00:00<00:00, 28.49it/s]                                               27%|##6       | 7/26 [00:00<00:00, 28.49it/s] 50%|#####     | 13/26 [00:00<00:00, 37.48it/s] 73%|#######3  | 19/26 [00:00<00:00, 44.80it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 44.80it/s] 96%|#########6| 25/26 [00:00<00:00, 45.85it/s]100%|##########| 26/26 [00:00<00:00, 36.78it/s]
Test: [   0/  26]	Loss 0.377 (0.377)	test_acc   0.86 (  0.86)	test_minacc   0.02 (  0.02)	test_majacc   0.99 (  0.99)	Loss_d 0.377 (0.377)	test_acc_d   0.86 (  0.86)	test_minacc_d   0.02 (  0.02)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.95 (  0.95)
Test: [  10/  26]	Loss 0.375 (0.389)	test_acc   0.86 (  0.85)	test_minacc   0.02 (  0.05)	test_majacc   0.98 (  0.99)	Loss_d 0.375 (0.389)	test_acc_d   0.86 (  0.85)	test_minacc_d   0.02 (  0.05)	test_majacc_d   0.98 (  0.99)	test_corr_d   0.94 (  0.94)
Test: [  20/  26]	Loss 0.410 (0.395)	test_acc   0.84 (  0.85)	test_minacc   0.11 (  0.05)	test_majacc   0.98 (  0.99)	Loss_d 0.410 (0.395)	test_acc_d   0.84 (  0.85)	test_minacc_d   0.11 (  0.05)	test_majacc_d   0.98 (  0.99)	test_corr_d   0.93 (  0.95)
Test: [  26/  26]	Loss 0.417 (0.396)	test_acc   0.83 (  0.85)	test_minacc   0.10 (  0.05)	test_majacc   0.98 (  0.99)	Loss_d 0.417 (0.396)	test_acc_d   0.83 (  0.85)	test_minacc_d   0.10 (  0.05)	test_majacc_d   0.98 (  0.99)	test_corr_d   0.94 (  0.95)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.53it/s]
Test: [  0/  1]	Loss 1.614 (1.614)	test_acc   0.13 (  0.13)	test_minacc   0.04 (  0.04)	test_majacc   0.99 (  0.99)	Loss_d 1.614 (1.614)	test_acc_d   0.13 (  0.13)	test_minacc_d   0.04 (  0.04)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.91 (  0.91)
Test: [  1/  1]	Loss 1.614 (1.614)	test_acc   0.13 (  0.13)	test_minacc   0.04 (  0.04)	test_majacc   0.99 (  0.99)	Loss_d 1.614 (1.614)	test_acc_d   0.13 (  0.13)	test_minacc_d   0.04 (  0.04)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.91 (  0.91)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/32/checkpoints/model_best.pth
Overall Timing[  4/  1]	epoch_time 0.0379 (0.0456)	validation_time 0.0003 (0.0016)	train_time 0.0376 (0.0423)
record: (train_acc, test_acc) (0.8482000231742859, 0.13300000131130219)
last accs (train_acc, test_acc) (0.8482000231742859, 0.13300000131130219)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  6.09it/s] 15%|#5        | 4/26 [00:00<00:01, 17.05it/s] 31%|###       | 8/26 [00:00<00:00, 23.62it/s] 46%|####6     | 12/26 [00:00<00:00, 27.44it/s] 62%|######1   | 16/26 [00:00<00:00, 29.69it/s] 77%|#######6  | 20/26 [00:00<00:00, 30.77it/s] 92%|#########2| 24/26 [00:00<00:00, 31.56it/s]100%|##########| 26/26 [00:00<00:00, 26.24it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 130 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 131 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 132 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 133 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 134 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 135 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 136 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 137 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 138 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 139 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 140 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 141 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 142 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 143 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 144 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 145 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 146 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 147 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 148 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 149 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 150 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 151 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 152 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 153 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 154 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 155 400
penalty weights 0.0
Epoch: [5][  26/  26]	Loss 1.419 (1.581)	train_nll   0.44 (  0.40)	train_penalty   0.06 (  0.05)	weight_norm   0.98 (  1.19)	train_acc   0.83 (  0.85)	train_minacc   0.00 (  0.04)	train_majacc   1.00 (  0.99)	train_corr   0.00 (  0.00)	l1 5.1374 (4.9043)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.70it/s] 27%|##6       | 7/26 [00:00<00:00, 36.21it/s]                                               27%|##6       | 7/26 [00:00<00:00, 36.21it/s] 46%|####6     | 12/26 [00:00<00:00, 38.90it/s] 69%|######9   | 18/26 [00:00<00:00, 45.28it/s]                                                69%|######9   | 18/26 [00:00<00:00, 45.28it/s] 92%|#########2| 24/26 [00:00<00:00, 46.18it/s]100%|##########| 26/26 [00:00<00:00, 39.46it/s]
Test: [   0/  26]	Loss 0.376 (0.376)	test_acc   0.86 (  0.86)	test_minacc   0.00 (  0.00)	test_majacc   1.00 (  1.00)	Loss_d 0.376 (0.376)	test_acc_d   0.86 (  0.86)	test_minacc_d   0.00 (  0.00)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.96 (  0.96)
Test: [  10/  26]	Loss 0.369 (0.388)	test_acc   0.87 (  0.86)	test_minacc   0.00 (  0.01)	test_majacc   1.00 (  1.00)	Loss_d 0.369 (0.388)	test_acc_d   0.87 (  0.86)	test_minacc_d   0.00 (  0.01)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.96 (  0.96)
Test: [  20/  26]	Loss 0.407 (0.395)	test_acc   0.84 (  0.85)	test_minacc   0.02 (  0.01)	test_majacc   0.99 (  1.00)	Loss_d 0.407 (0.395)	test_acc_d   0.84 (  0.85)	test_minacc_d   0.02 (  0.01)	test_majacc_d   0.99 (  1.00)	test_corr_d   0.96 (  0.96)
Test: [  26/  26]	Loss 0.419 (0.396)	test_acc   0.83 (  0.85)	test_minacc   0.00 (  0.01)	test_majacc   1.00 (  1.00)	Loss_d 0.419 (0.396)	test_acc_d   0.83 (  0.85)	test_minacc_d   0.00 (  0.01)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.96 (  0.96)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.83it/s]
Test: [  0/  1]	Loss 1.591 (1.591)	test_acc   0.10 (  0.10)	test_minacc   0.00 (  0.00)	test_majacc   1.00 (  1.00)	Loss_d 1.591 (1.591)	test_acc_d   0.10 (  0.10)	test_minacc_d   0.00 (  0.00)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.95 (  0.95)
Test: [  1/  1]	Loss 1.591 (1.591)	test_acc   0.10 (  0.10)	test_minacc   0.00 (  0.00)	test_majacc   1.00 (  1.00)	Loss_d 1.591 (1.591)	test_acc_d   0.10 (  0.10)	test_minacc_d   0.00 (  0.00)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.95 (  0.95)
Overall Timing[  5/  1]	epoch_time 0.0371 (0.0442)	validation_time 0.0004 (0.0014)	train_time 0.0367 (0.0414)
record: (train_acc, test_acc) (0.8482000231742859, 0.13300000131130219)
last accs (train_acc, test_acc) (0.8491000242829323, 0.10200000554323196)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.78it/s] 19%|#9        | 5/26 [00:00<00:00, 21.36it/s] 35%|###4      | 9/26 [00:00<00:00, 26.14it/s] 50%|#####     | 13/26 [00:00<00:00, 28.80it/s] 65%|######5   | 17/26 [00:00<00:00, 30.42it/s] 81%|########  | 21/26 [00:00<00:00, 31.47it/s] 96%|#########6| 25/26 [00:00<00:00, 31.83it/s]100%|##########| 26/26 [00:00<00:00, 27.34it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 156 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 157 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 158 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 159 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 160 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 161 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 162 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 163 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 164 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 165 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 166 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 167 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 168 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 169 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 170 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 171 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 172 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 173 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 174 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 175 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 176 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 177 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 178 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 179 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 180 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 181 400
penalty weights 0.0
Epoch: [6][  26/  26]	Loss 1.131 (1.201)	train_nll   0.45 (  0.39)	train_penalty   0.07 (  0.04)	weight_norm   0.68 (  0.81)	train_acc   0.82 (  0.85)	train_minacc   0.00 (  0.05)	train_majacc   0.99 (  0.99)	train_corr   0.00 (  0.00)	l1 5.8266 (5.2866)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 18.53it/s] 31%|###       | 8/26 [00:00<00:00, 41.21it/s]                                               31%|###       | 8/26 [00:00<00:00, 41.21it/s] 50%|#####     | 13/26 [00:00<00:00, 41.28it/s] 73%|#######3  | 19/26 [00:00<00:00, 47.19it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 47.19it/s] 96%|#########6| 25/26 [00:00<00:00, 47.63it/s]100%|##########| 26/26 [00:00<00:00, 41.52it/s]
Test: [   0/  26]	Loss 0.357 (0.357)	test_acc   0.86 (  0.86)	test_minacc   0.00 (  0.00)	test_majacc   1.00 (  1.00)	Loss_d 0.357 (0.357)	test_acc_d   0.86 (  0.86)	test_minacc_d   0.00 (  0.00)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.96 (  0.96)
Test: [  10/  26]	Loss 0.355 (0.376)	test_acc   0.87 (  0.86)	test_minacc   0.02 (  0.02)	test_majacc   1.00 (  1.00)	Loss_d 0.355 (0.376)	test_acc_d   0.87 (  0.86)	test_minacc_d   0.02 (  0.02)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.95 (  0.95)
Test: [  20/  26]	Loss 0.397 (0.384)	test_acc   0.85 (  0.85)	test_minacc   0.06 (  0.03)	test_majacc   0.99 (  1.00)	Loss_d 0.397 (0.384)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.06 (  0.03)	test_majacc_d   0.99 (  1.00)	test_corr_d   0.95 (  0.96)
Test: [  26/  26]	Loss 0.407 (0.385)	test_acc   0.82 (  0.85)	test_minacc   0.00 (  0.02)	test_majacc   0.99 (  1.00)	Loss_d 0.407 (0.385)	test_acc_d   0.82 (  0.85)	test_minacc_d   0.00 (  0.02)	test_majacc_d   0.99 (  1.00)	test_corr_d   0.95 (  0.96)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.34it/s]
Test: [  0/  1]	Loss 1.800 (1.800)	test_acc   0.11 (  0.11)	test_minacc   0.02 (  0.02)	test_majacc   1.00 (  1.00)	Loss_d 1.800 (1.800)	test_acc_d   0.11 (  0.11)	test_minacc_d   0.02 (  0.02)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.93 (  0.93)
Test: [  1/  1]	Loss 1.800 (1.800)	test_acc   0.11 (  0.11)	test_minacc   0.02 (  0.02)	test_majacc   1.00 (  1.00)	Loss_d 1.800 (1.800)	test_acc_d   0.11 (  0.11)	test_minacc_d   0.02 (  0.02)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.93 (  0.93)
Overall Timing[  6/  1]	epoch_time 0.0365 (0.0431)	validation_time 0.0006 (0.0013)	train_time 0.0359 (0.0406)
record: (train_acc, test_acc) (0.8482000231742859, 0.13300000131130219)
last accs (train_acc, test_acc) (0.8505000299215317, 0.11400000751018524)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.89it/s] 15%|#5        | 4/26 [00:00<00:01, 18.99it/s] 31%|###       | 8/26 [00:00<00:00, 25.55it/s] 46%|####6     | 12/26 [00:00<00:00, 29.09it/s] 62%|######1   | 16/26 [00:00<00:00, 31.26it/s] 77%|#######6  | 20/26 [00:00<00:00, 32.15it/s] 92%|#########2| 24/26 [00:00<00:00, 32.61it/s]100%|##########| 26/26 [00:00<00:00, 27.65it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 182 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 183 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 184 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 185 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 186 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 187 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 188 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 189 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 190 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 191 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 192 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 193 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 194 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 195 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 196 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 197 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 198 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 199 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 200 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 201 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 202 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 203 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 204 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 205 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 206 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 207 400
penalty weights 0.0
Epoch: [7][  26/  26]	Loss 0.925 (0.947)	train_nll   0.45 (  0.38)	train_penalty   0.10 (  0.04)	weight_norm   0.47 (  0.56)	train_acc   0.83 (  0.85)	train_minacc   0.00 (  0.07)	train_majacc   1.00 (  0.98)	train_corr   0.00 (  0.00)	l1 6.9288 (6.2085)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.96it/s] 27%|##6       | 7/26 [00:00<00:00, 29.47it/s]                                               27%|##6       | 7/26 [00:00<00:00, 29.47it/s] 50%|#####     | 13/26 [00:00<00:00, 37.42it/s] 73%|#######3  | 19/26 [00:00<00:00, 44.68it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 44.68it/s] 96%|#########6| 25/26 [00:00<00:00, 46.24it/s]100%|##########| 26/26 [00:00<00:00, 37.34it/s]
Test: [   0/  26]	Loss 0.355 (0.355)	test_acc   0.87 (  0.87)	test_minacc   0.02 (  0.02)	test_majacc   1.00 (  1.00)	Loss_d 0.355 (0.355)	test_acc_d   0.87 (  0.87)	test_minacc_d   0.02 (  0.02)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.97 (  0.97)
Test: [  10/  26]	Loss 0.350 (0.376)	test_acc   0.87 (  0.86)	test_minacc   0.00 (  0.00)	test_majacc   1.00 (  1.00)	Loss_d 0.350 (0.376)	test_acc_d   0.87 (  0.86)	test_minacc_d   0.00 (  0.00)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.97 (  0.97)
Test: [  20/  26]	Loss 0.399 (0.385)	test_acc   0.84 (  0.85)	test_minacc   0.00 (  0.00)	test_majacc   1.00 (  1.00)	Loss_d 0.399 (0.385)	test_acc_d   0.84 (  0.85)	test_minacc_d   0.00 (  0.00)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.97 (  0.97)
Test: [  26/  26]	Loss 0.418 (0.386)	test_acc   0.83 (  0.85)	test_minacc   0.00 (  0.00)	test_majacc   1.00 (  1.00)	Loss_d 0.418 (0.386)	test_acc_d   0.83 (  0.85)	test_minacc_d   0.00 (  0.00)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.97 (  0.97)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.03it/s]
Test: [  0/  1]	Loss 1.939 (1.939)	test_acc   0.10 (  0.10)	test_minacc   0.00 (  0.00)	test_majacc   1.00 (  1.00)	Loss_d 1.939 (1.939)	test_acc_d   0.10 (  0.10)	test_minacc_d   0.00 (  0.00)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.97 (  0.97)
Test: [  1/  1]	Loss 1.939 (1.939)	test_acc   0.10 (  0.10)	test_minacc   0.00 (  0.00)	test_majacc   1.00 (  1.00)	Loss_d 1.939 (1.939)	test_acc_d   0.10 (  0.10)	test_minacc_d   0.00 (  0.00)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.97 (  0.97)
Overall Timing[  7/  1]	epoch_time 0.0369 (0.0424)	validation_time 0.0004 (0.0012)	train_time 0.0365 (0.0401)
record: (train_acc, test_acc) (0.8482000231742859, 0.13300000131130219)
last accs (train_acc, test_acc) (0.8491000219583511, 0.10100000351667404)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.27it/s] 19%|#9        | 5/26 [00:00<00:01, 19.81it/s] 35%|###4      | 9/26 [00:00<00:00, 25.66it/s] 50%|#####     | 13/26 [00:00<00:00, 28.80it/s] 65%|######5   | 17/26 [00:00<00:00, 29.86it/s] 81%|########  | 21/26 [00:00<00:00, 30.93it/s] 96%|#########6| 25/26 [00:00<00:00, 31.85it/s]100%|##########| 26/26 [00:00<00:00, 26.71it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 208 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 209 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 210 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 211 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 212 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 213 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 214 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 215 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 216 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 217 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 218 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 219 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 220 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 221 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 222 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 223 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 224 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 225 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 226 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 227 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 228 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 229 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 230 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 231 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 232 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 233 400
penalty weights 0.0
Epoch: [8][  26/  26]	Loss 0.741 (0.771)	train_nll   0.41 (  0.37)	train_penalty   0.06 (  0.04)	weight_norm   0.33 (  0.40)	train_acc   0.83 (  0.85)	train_minacc   0.02 (  0.06)	train_majacc   0.99 (  0.99)	train_corr   0.00 (  0.00)	l1 8.3017 (7.3062)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.46it/s] 27%|##6       | 7/26 [00:00<00:00, 36.51it/s]                                               27%|##6       | 7/26 [00:00<00:00, 36.51it/s] 50%|#####     | 13/26 [00:00<00:00, 41.93it/s] 77%|#######6  | 20/26 [00:00<00:00, 49.82it/s]                                                77%|#######6  | 20/26 [00:00<00:00, 49.82it/s]100%|##########| 26/26 [00:00<00:00, 49.61it/s]100%|##########| 26/26 [00:00<00:00, 41.26it/s]
Test: [   0/  26]	Loss 0.351 (0.351)	test_acc   0.86 (  0.86)	test_minacc   0.04 (  0.04)	test_majacc   0.99 (  0.99)	Loss_d 0.351 (0.351)	test_acc_d   0.86 (  0.86)	test_minacc_d   0.04 (  0.04)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.91 (  0.91)
Test: [  10/  26]	Loss 0.344 (0.361)	test_acc   0.87 (  0.86)	test_minacc   0.02 (  0.02)	test_majacc   1.00 (  1.00)	Loss_d 0.344 (0.361)	test_acc_d   0.87 (  0.86)	test_minacc_d   0.02 (  0.02)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.92 (  0.92)
Test: [  20/  26]	Loss 0.360 (0.363)	test_acc   0.84 (  0.85)	test_minacc   0.03 (  0.03)	test_majacc   1.00 (  1.00)	Loss_d 0.360 (0.363)	test_acc_d   0.84 (  0.85)	test_minacc_d   0.03 (  0.03)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.92 (  0.92)
Test: [  26/  26]	Loss 0.381 (0.362)	test_acc   0.83 (  0.85)	test_minacc   0.02 (  0.02)	test_majacc   1.00 (  1.00)	Loss_d 0.381 (0.362)	test_acc_d   0.83 (  0.85)	test_minacc_d   0.02 (  0.02)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.91 (  0.92)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 65.87it/s]
Test: [  0/  1]	Loss 1.774 (1.774)	test_acc   0.11 (  0.11)	test_minacc   0.01 (  0.01)	test_majacc   1.00 (  1.00)	Loss_d 1.774 (1.774)	test_acc_d   0.11 (  0.11)	test_minacc_d   0.01 (  0.01)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.88 (  0.88)
Test: [  1/  1]	Loss 1.774 (1.774)	test_acc   0.11 (  0.11)	test_minacc   0.01 (  0.01)	test_majacc   1.00 (  1.00)	Loss_d 1.774 (1.774)	test_acc_d   0.11 (  0.11)	test_minacc_d   0.01 (  0.01)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.88 (  0.88)
Overall Timing[  8/  1]	epoch_time 0.0366 (0.0417)	validation_time 0.0003 (0.0011)	train_time 0.0363 (0.0397)
record: (train_acc, test_acc) (0.8482000231742859, 0.13300000131130219)
last accs (train_acc, test_acc) (0.8500000207424164, 0.11100000888109207)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.50it/s] 19%|#9        | 5/26 [00:00<00:00, 23.35it/s] 35%|###4      | 9/26 [00:00<00:00, 28.16it/s] 50%|#####     | 13/26 [00:00<00:00, 30.43it/s] 65%|######5   | 17/26 [00:00<00:00, 31.29it/s] 81%|########  | 21/26 [00:00<00:00, 32.37it/s] 96%|#########6| 25/26 [00:00<00:00, 32.45it/s]100%|##########| 26/26 [00:00<00:00, 28.43it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 234 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 235 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 236 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 237 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 238 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 239 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 240 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 241 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 242 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 243 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 244 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 245 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 246 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 247 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 248 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 249 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 250 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 251 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 252 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 253 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 254 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 255 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 256 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 257 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 258 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 259 400
penalty weights 0.0
Epoch: [9][  26/  26]	Loss 0.661 (0.653)	train_nll   0.41 (  0.36)	train_penalty   0.06 (  0.03)	weight_norm   0.25 (  0.29)	train_acc   0.82 (  0.85)	train_minacc   0.19 (  0.12)	train_majacc   0.95 (  0.98)	train_corr   0.00 (  0.00)	l1 9.8028 (8.9552)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.41it/s] 27%|##6       | 7/26 [00:00<00:00, 34.53it/s]                                               27%|##6       | 7/26 [00:00<00:00, 34.53it/s] 50%|#####     | 13/26 [00:00<00:00, 39.83it/s] 73%|#######3  | 19/26 [00:00<00:00, 46.04it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 46.04it/s] 96%|#########6| 25/26 [00:00<00:00, 46.03it/s]100%|##########| 26/26 [00:00<00:00, 39.34it/s]
Test: [   0/  26]	Loss 0.343 (0.343)	test_acc   0.86 (  0.86)	test_minacc   0.04 (  0.04)	test_majacc   0.99 (  0.99)	Loss_d 0.343 (0.343)	test_acc_d   0.86 (  0.86)	test_minacc_d   0.04 (  0.04)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.96 (  0.96)
Test: [  10/  26]	Loss 0.318 (0.357)	test_acc   0.87 (  0.85)	test_minacc   0.00 (  0.03)	test_majacc   1.00 (  0.99)	Loss_d 0.318 (0.357)	test_acc_d   0.87 (  0.85)	test_minacc_d   0.00 (  0.03)	test_majacc_d   1.00 (  0.99)	test_corr_d   0.96 (  0.96)
Test: [  20/  26]	Loss 0.366 (0.364)	test_acc   0.84 (  0.85)	test_minacc   0.02 (  0.02)	test_majacc   1.00 (  0.99)	Loss_d 0.366 (0.364)	test_acc_d   0.84 (  0.85)	test_minacc_d   0.02 (  0.02)	test_majacc_d   1.00 (  0.99)	test_corr_d   0.97 (  0.96)
Test: [  26/  26]	Loss 0.394 (0.364)	test_acc   0.83 (  0.85)	test_minacc   0.02 (  0.02)	test_majacc   0.99 (  0.99)	Loss_d 0.394 (0.364)	test_acc_d   0.83 (  0.85)	test_minacc_d   0.02 (  0.02)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.95 (  0.96)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 65.79it/s]
Test: [  0/  1]	Loss 1.977 (1.977)	test_acc   0.11 (  0.11)	test_minacc   0.01 (  0.01)	test_majacc   1.00 (  1.00)	Loss_d 1.977 (1.977)	test_acc_d   0.11 (  0.11)	test_minacc_d   0.01 (  0.01)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.94 (  0.94)
Test: [  1/  1]	Loss 1.977 (1.977)	test_acc   0.11 (  0.11)	test_minacc   0.01 (  0.01)	test_majacc   1.00 (  1.00)	Loss_d 1.977 (1.977)	test_acc_d   0.11 (  0.11)	test_minacc_d   0.01 (  0.01)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.94 (  0.94)
Overall Timing[  9/  1]	epoch_time 0.0358 (0.0411)	validation_time 0.0003 (0.0010)	train_time 0.0354 (0.0392)
record: (train_acc, test_acc) (0.8482000231742859, 0.13300000131130219)
last accs (train_acc, test_acc) (0.8487000290751457, 0.10900000482797623)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.14it/s] 19%|#9        | 5/26 [00:00<00:01, 18.13it/s] 35%|###4      | 9/26 [00:00<00:00, 24.52it/s] 50%|#####     | 13/26 [00:00<00:00, 28.07it/s] 65%|######5   | 17/26 [00:00<00:00, 30.23it/s] 81%|########  | 21/26 [00:00<00:00, 31.61it/s] 96%|#########6| 25/26 [00:00<00:00, 31.25it/s]100%|##########| 26/26 [00:00<00:00, 26.05it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 260 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 261 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 262 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 263 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 264 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 265 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 266 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 267 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 268 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 269 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 270 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 271 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 272 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 273 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 274 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 275 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 276 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 277 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 278 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 279 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 280 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 281 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 282 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 283 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 284 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 285 400
penalty weights 0.0
Epoch: [10][  26/  26]	Loss 0.581 (0.567)	train_nll   0.39 (  0.35)	train_penalty   0.05 (  0.03)	weight_norm   0.19 (  0.22)	train_acc   0.83 (  0.85)	train_minacc   0.12 (  0.16)	train_majacc   0.97 (  0.97)	train_corr   0.00 (  0.00)	l1 11.3275 (10.4406)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:00, 25.28it/s] 35%|###4      | 9/26 [00:00<00:00, 38.88it/s]                                               35%|###4      | 9/26 [00:00<00:00, 38.88it/s] 58%|#####7    | 15/26 [00:00<00:00, 44.66it/s]                                                58%|#####7    | 15/26 [00:00<00:00, 44.66it/s] 81%|########  | 21/26 [00:00<00:00, 45.46it/s]100%|##########| 26/26 [00:00<00:00, 41.09it/s]
Test: [   0/  26]	Loss 0.336 (0.336)	test_acc   0.87 (  0.87)	test_minacc   0.06 (  0.06)	test_majacc   1.00 (  1.00)	Loss_d 0.336 (0.336)	test_acc_d   0.87 (  0.87)	test_minacc_d   0.06 (  0.06)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.96 (  0.96)
Test: [  10/  26]	Loss 0.338 (0.355)	test_acc   0.87 (  0.86)	test_minacc   0.00 (  0.02)	test_majacc   0.99 (  1.00)	Loss_d 0.338 (0.355)	test_acc_d   0.87 (  0.86)	test_minacc_d   0.00 (  0.02)	test_majacc_d   0.99 (  1.00)	test_corr_d   0.97 (  0.97)
Test: [  20/  26]	Loss 0.348 (0.360)	test_acc   0.84 (  0.85)	test_minacc   0.02 (  0.02)	test_majacc   1.00 (  1.00)	Loss_d 0.348 (0.360)	test_acc_d   0.84 (  0.85)	test_minacc_d   0.02 (  0.02)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.96 (  0.97)
Test: [  26/  26]	Loss 0.379 (0.361)	test_acc   0.84 (  0.85)	test_minacc   0.07 (  0.02)	test_majacc   0.99 (  1.00)	Loss_d 0.379 (0.361)	test_acc_d   0.84 (  0.85)	test_minacc_d   0.07 (  0.02)	test_majacc_d   0.99 (  1.00)	test_corr_d   0.95 (  0.97)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 60.52it/s]
Test: [  0/  1]	Loss 1.957 (1.957)	test_acc   0.11 (  0.11)	test_minacc   0.01 (  0.01)	test_majacc   1.00 (  1.00)	Loss_d 1.957 (1.957)	test_acc_d   0.11 (  0.11)	test_minacc_d   0.01 (  0.01)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.95 (  0.95)
Test: [  1/  1]	Loss 1.957 (1.957)	test_acc   0.11 (  0.11)	test_minacc   0.01 (  0.01)	test_majacc   1.00 (  1.00)	Loss_d 1.957 (1.957)	test_acc_d   0.11 (  0.11)	test_minacc_d   0.01 (  0.01)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.95 (  0.95)
Overall Timing[ 10/  1]	epoch_time 0.0367 (0.0407)	validation_time 0.0004 (0.0010)	train_time 0.0363 (0.0390)
record: (train_acc, test_acc) (0.8482000231742859, 0.13300000131130219)
last accs (train_acc, test_acc) (0.8504000267386437, 0.11000000685453415)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.53it/s] 19%|#9        | 5/26 [00:00<00:01, 19.75it/s] 35%|###4      | 9/26 [00:00<00:00, 25.70it/s] 50%|#####     | 13/26 [00:00<00:00, 29.02it/s] 65%|######5   | 17/26 [00:00<00:00, 30.92it/s] 81%|########  | 21/26 [00:00<00:00, 32.28it/s] 96%|#########6| 25/26 [00:00<00:00, 33.25it/s]100%|##########| 26/26 [00:00<00:00, 27.59it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 286 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 287 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 288 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 289 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 290 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 291 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 292 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 293 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 294 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 295 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 296 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 297 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 298 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 299 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 300 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 301 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 302 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 303 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 304 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 305 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 306 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 307 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 308 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 309 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 310 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 311 400
penalty weights 0.0
Epoch: [11][  26/  26]	Loss 0.568 (0.520)	train_nll   0.41 (  0.35)	train_penalty   0.02 (  0.03)	weight_norm   0.16 (  0.17)	train_acc   0.82 (  0.85)	train_minacc   0.52 (  0.17)	train_majacc   0.88 (  0.97)	train_corr   0.00 (  0.00)	l1 13.1579 (12.2001)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.91it/s] 27%|##6       | 7/26 [00:00<00:00, 31.82it/s]                                               27%|##6       | 7/26 [00:00<00:00, 31.82it/s] 50%|#####     | 13/26 [00:00<00:00, 38.45it/s] 73%|#######3  | 19/26 [00:00<00:00, 45.31it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 45.31it/s] 96%|#########6| 25/26 [00:00<00:00, 46.46it/s]100%|##########| 26/26 [00:00<00:00, 36.85it/s]
Test: [   0/  26]	Loss 0.341 (0.341)	test_acc   0.86 (  0.86)	test_minacc   0.28 (  0.28)	test_majacc   0.96 (  0.96)	Loss_d 0.341 (0.341)	test_acc_d   0.86 (  0.86)	test_minacc_d   0.28 (  0.28)	test_majacc_d   0.96 (  0.96)	test_corr_d   0.91 (  0.91)
Test: [  10/  26]	Loss 0.325 (0.352)	test_acc   0.86 (  0.85)	test_minacc   0.31 (  0.25)	test_majacc   0.94 (  0.95)	Loss_d 0.325 (0.352)	test_acc_d   0.86 (  0.85)	test_minacc_d   0.31 (  0.25)	test_majacc_d   0.94 (  0.95)	test_corr_d   0.92 (  0.92)
Test: [  20/  26]	Loss 0.337 (0.354)	test_acc   0.85 (  0.85)	test_minacc   0.29 (  0.24)	test_majacc   0.96 (  0.96)	Loss_d 0.337 (0.354)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.29 (  0.24)	test_majacc_d   0.96 (  0.96)	test_corr_d   0.91 (  0.92)
Test: [  26/  26]	Loss 0.373 (0.354)	test_acc   0.84 (  0.85)	test_minacc   0.29 (  0.24)	test_majacc   0.95 (  0.96)	Loss_d 0.373 (0.354)	test_acc_d   0.84 (  0.85)	test_minacc_d   0.29 (  0.24)	test_majacc_d   0.95 (  0.96)	test_corr_d   0.90 (  0.92)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.28it/s]
Test: [  0/  1]	Loss 1.821 (1.821)	test_acc   0.27 (  0.27)	test_minacc   0.19 (  0.19)	test_majacc   0.96 (  0.96)	Loss_d 1.821 (1.821)	test_acc_d   0.27 (  0.27)	test_minacc_d   0.19 (  0.19)	test_majacc_d   0.96 (  0.96)	test_corr_d   0.80 (  0.80)
Test: [  1/  1]	Loss 1.821 (1.821)	test_acc   0.27 (  0.27)	test_minacc   0.19 (  0.19)	test_majacc   0.96 (  0.96)	Loss_d 1.821 (1.821)	test_acc_d   0.27 (  0.27)	test_minacc_d   0.19 (  0.19)	test_majacc_d   0.96 (  0.96)	test_corr_d   0.80 (  0.80)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/32/checkpoints/model_best.pth
Overall Timing[ 11/  1]	epoch_time 0.0371 (0.0404)	validation_time 0.0003 (0.0009)	train_time 0.0367 (0.0388)
record: (train_acc, test_acc) (0.8523000245094299, 0.2680000066757202)
last accs (train_acc, test_acc) (0.8523000245094299, 0.2680000066757202)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.72it/s] 19%|#9        | 5/26 [00:00<00:01, 18.58it/s] 35%|###4      | 9/26 [00:00<00:00, 25.02it/s] 50%|#####     | 13/26 [00:00<00:00, 28.89it/s] 65%|######5   | 17/26 [00:00<00:00, 31.23it/s] 81%|########  | 21/26 [00:00<00:00, 32.79it/s] 96%|#########6| 25/26 [00:00<00:00, 33.39it/s]100%|##########| 26/26 [00:00<00:00, 27.41it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 312 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 313 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 314 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 315 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 316 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 317 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 318 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 319 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 320 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 321 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 322 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 323 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 324 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 325 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 326 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 327 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 328 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 329 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 330 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 331 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 332 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 333 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 334 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 335 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 336 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 337 400
penalty weights 0.0
Epoch: [12][  26/  26]	Loss 0.529 (0.486)	train_nll   0.39 (  0.34)	train_penalty   0.03 (  0.03)	weight_norm   0.14 (  0.14)	train_acc   0.83 (  0.85)	train_minacc   0.31 (  0.20)	train_majacc   0.93 (  0.97)	train_corr   0.00 (  0.00)	l1 14.3999 (13.6871)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:05,  4.74it/s] 27%|##6       | 7/26 [00:00<00:00, 25.39it/s]                                               27%|##6       | 7/26 [00:00<00:00, 25.39it/s] 50%|#####     | 13/26 [00:00<00:00, 34.02it/s] 73%|#######3  | 19/26 [00:00<00:00, 41.52it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 41.52it/s] 96%|#########6| 25/26 [00:00<00:00, 43.86it/s]100%|##########| 26/26 [00:00<00:00, 34.39it/s]
Test: [   0/  26]	Loss 0.320 (0.320)	test_acc   0.87 (  0.87)	test_minacc   0.11 (  0.11)	test_majacc   0.99 (  0.99)	Loss_d 0.320 (0.320)	test_acc_d   0.87 (  0.87)	test_minacc_d   0.11 (  0.11)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.95 (  0.95)
Test: [  10/  26]	Loss 0.318 (0.339)	test_acc   0.88 (  0.86)	test_minacc   0.08 (  0.08)	test_majacc   0.99 (  0.99)	Loss_d 0.318 (0.339)	test_acc_d   0.88 (  0.86)	test_minacc_d   0.08 (  0.08)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.95 (  0.95)
Test: [  20/  26]	Loss 0.340 (0.344)	test_acc   0.86 (  0.86)	test_minacc   0.15 (  0.08)	test_majacc   0.99 (  0.99)	Loss_d 0.340 (0.344)	test_acc_d   0.86 (  0.86)	test_minacc_d   0.15 (  0.08)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.94 (  0.95)
Test: [  26/  26]	Loss 0.370 (0.344)	test_acc   0.83 (  0.86)	test_minacc   0.12 (  0.08)	test_majacc   0.98 (  0.99)	Loss_d 0.370 (0.344)	test_acc_d   0.83 (  0.86)	test_minacc_d   0.12 (  0.08)	test_majacc_d   0.98 (  0.99)	test_corr_d   0.93 (  0.95)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 65.35it/s]
Test: [  0/  1]	Loss 1.912 (1.912)	test_acc   0.15 (  0.15)	test_minacc   0.05 (  0.05)	test_majacc   0.99 (  0.99)	Loss_d 1.912 (1.912)	test_acc_d   0.15 (  0.15)	test_minacc_d   0.05 (  0.05)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.91 (  0.91)
Test: [  1/  1]	Loss 1.912 (1.912)	test_acc   0.15 (  0.15)	test_minacc   0.05 (  0.05)	test_majacc   0.99 (  0.99)	Loss_d 1.912 (1.912)	test_acc_d   0.15 (  0.15)	test_minacc_d   0.05 (  0.05)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.91 (  0.91)
Overall Timing[ 12/  1]	epoch_time 0.0371 (0.0402)	validation_time 0.0004 (0.0009)	train_time 0.0366 (0.0386)
record: (train_acc, test_acc) (0.8523000245094299, 0.2680000066757202)
last accs (train_acc, test_acc) (0.8552000250816345, 0.1469999998807907)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.52it/s] 19%|#9        | 5/26 [00:00<00:00, 23.29it/s] 35%|###4      | 9/26 [00:00<00:00, 28.73it/s] 50%|#####     | 13/26 [00:00<00:00, 31.13it/s] 65%|######5   | 17/26 [00:00<00:00, 32.47it/s] 81%|########  | 21/26 [00:00<00:00, 33.02it/s] 96%|#########6| 25/26 [00:00<00:00, 33.86it/s]100%|##########| 26/26 [00:00<00:00, 29.29it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 338 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 339 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 340 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 341 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 342 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 343 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 344 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 345 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 346 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 347 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 348 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 349 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 350 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 351 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 352 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 353 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 354 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 355 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 356 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 357 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 358 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 359 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 360 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 361 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 362 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 363 400
penalty weights 0.0
Epoch: [13][  26/  26]	Loss 0.555 (0.465)	train_nll   0.44 (  0.34)	train_penalty   0.02 (  0.03)	weight_norm   0.11 (  0.12)	train_acc   0.80 (  0.86)	train_minacc   0.40 (  0.22)	train_majacc   0.88 (  0.97)	train_corr   0.00 (  0.00)	l1 15.3889 (14.8248)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:00, 29.08it/s] 35%|###4      | 9/26 [00:00<00:00, 41.34it/s]                                               35%|###4      | 9/26 [00:00<00:00, 41.34it/s] 58%|#####7    | 15/26 [00:00<00:00, 46.72it/s]                                                58%|#####7    | 15/26 [00:00<00:00, 46.72it/s] 81%|########  | 21/26 [00:00<00:00, 49.20it/s]100%|##########| 26/26 [00:00<00:00, 43.55it/s]
Test: [   0/  26]	Loss 0.322 (0.322)	test_acc   0.87 (  0.87)	test_minacc   0.13 (  0.13)	test_majacc   0.99 (  0.99)	Loss_d 0.322 (0.322)	test_acc_d   0.87 (  0.87)	test_minacc_d   0.13 (  0.13)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.95 (  0.95)
Test: [  10/  26]	Loss 0.316 (0.340)	test_acc   0.87 (  0.86)	test_minacc   0.10 (  0.09)	test_majacc   0.98 (  0.99)	Loss_d 0.316 (0.340)	test_acc_d   0.87 (  0.86)	test_minacc_d   0.10 (  0.09)	test_majacc_d   0.98 (  0.99)	test_corr_d   0.96 (  0.96)
Test: [  20/  26]	Loss 0.343 (0.346)	test_acc   0.86 (  0.86)	test_minacc   0.11 (  0.09)	test_majacc   1.00 (  0.99)	Loss_d 0.343 (0.346)	test_acc_d   0.86 (  0.86)	test_minacc_d   0.11 (  0.09)	test_majacc_d   1.00 (  0.99)	test_corr_d   0.95 (  0.96)
Test: [  26/  26]	Loss 0.371 (0.346)	test_acc   0.85 (  0.86)	test_minacc   0.17 (  0.10)	test_majacc   0.99 (  0.99)	Loss_d 0.371 (0.346)	test_acc_d   0.85 (  0.86)	test_minacc_d   0.17 (  0.10)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.95 (  0.96)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.83it/s]
Test: [  0/  1]	Loss 1.982 (1.982)	test_acc   0.15 (  0.15)	test_minacc   0.06 (  0.06)	test_majacc   0.98 (  0.98)	Loss_d 1.982 (1.982)	test_acc_d   0.15 (  0.15)	test_minacc_d   0.06 (  0.06)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.91 (  0.91)
Test: [  1/  1]	Loss 1.982 (1.982)	test_acc   0.15 (  0.15)	test_minacc   0.06 (  0.06)	test_majacc   0.98 (  0.98)	Loss_d 1.982 (1.982)	test_acc_d   0.15 (  0.15)	test_minacc_d   0.06 (  0.06)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.91 (  0.91)
Overall Timing[ 13/  1]	epoch_time 0.0353 (0.0398)	validation_time 0.0004 (0.0008)	train_time 0.0349 (0.0383)
record: (train_acc, test_acc) (0.8523000245094299, 0.2680000066757202)
last accs (train_acc, test_acc) (0.85700002348423, 0.14800000190734863)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.79it/s] 19%|#9        | 5/26 [00:00<00:00, 22.19it/s] 35%|###4      | 9/26 [00:00<00:00, 26.60it/s] 50%|#####     | 13/26 [00:00<00:00, 29.86it/s] 65%|######5   | 17/26 [00:00<00:00, 31.02it/s] 81%|########  | 21/26 [00:00<00:00, 32.09it/s] 96%|#########6| 25/26 [00:00<00:00, 32.89it/s]100%|##########| 26/26 [00:00<00:00, 28.15it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 364 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 365 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 366 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 367 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 368 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 369 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 370 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 371 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 372 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 373 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 374 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 375 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 376 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 377 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 378 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 379 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 380 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 381 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 382 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 383 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 384 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 385 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 386 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 387 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 388 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 389 400
penalty weights 0.0
Epoch: [14][  26/  26]	Loss 0.483 (0.452)	train_nll   0.37 (  0.34)	train_penalty   0.02 (  0.03)	weight_norm   0.11 (  0.11)	train_acc   0.84 (  0.86)	train_minacc   0.55 (  0.22)	train_majacc   0.90 (  0.97)	train_corr   0.00 (  0.00)	l1 16.4739 (15.8063)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.69it/s] 27%|##6       | 7/26 [00:00<00:00, 37.42it/s]                                               27%|##6       | 7/26 [00:00<00:00, 37.42it/s] 46%|####6     | 12/26 [00:00<00:00, 40.10it/s] 69%|######9   | 18/26 [00:00<00:00, 46.70it/s]                                                69%|######9   | 18/26 [00:00<00:00, 46.70it/s] 92%|#########2| 24/26 [00:00<00:00, 47.42it/s]100%|##########| 26/26 [00:00<00:00, 41.00it/s]
Test: [   0/  26]	Loss 0.314 (0.314)	test_acc   0.86 (  0.86)	test_minacc   0.40 (  0.40)	test_majacc   0.93 (  0.93)	Loss_d 0.314 (0.314)	test_acc_d   0.86 (  0.86)	test_minacc_d   0.40 (  0.40)	test_majacc_d   0.93 (  0.93)	test_corr_d   0.88 (  0.88)
Test: [  10/  26]	Loss 0.319 (0.332)	test_acc   0.87 (  0.86)	test_minacc   0.33 (  0.30)	test_majacc   0.94 (  0.95)	Loss_d 0.319 (0.332)	test_acc_d   0.87 (  0.86)	test_minacc_d   0.33 (  0.30)	test_majacc_d   0.94 (  0.95)	test_corr_d   0.89 (  0.90)
Test: [  20/  26]	Loss 0.306 (0.331)	test_acc   0.87 (  0.86)	test_minacc   0.39 (  0.29)	test_majacc   0.97 (  0.96)	Loss_d 0.306 (0.331)	test_acc_d   0.87 (  0.86)	test_minacc_d   0.39 (  0.29)	test_majacc_d   0.97 (  0.96)	test_corr_d   0.89 (  0.90)
Test: [  26/  26]	Loss 0.330 (0.329)	test_acc   0.86 (  0.86)	test_minacc   0.36 (  0.29)	test_majacc   0.96 (  0.96)	Loss_d 0.330 (0.329)	test_acc_d   0.86 (  0.86)	test_minacc_d   0.36 (  0.29)	test_majacc_d   0.96 (  0.96)	test_corr_d   0.89 (  0.90)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.93it/s]
Test: [  0/  1]	Loss 1.638 (1.638)	test_acc   0.31 (  0.31)	test_minacc   0.24 (  0.24)	test_majacc   0.95 (  0.95)	Loss_d 1.638 (1.638)	test_acc_d   0.31 (  0.31)	test_minacc_d   0.24 (  0.24)	test_majacc_d   0.95 (  0.95)	test_corr_d   0.71 (  0.71)
Test: [  1/  1]	Loss 1.638 (1.638)	test_acc   0.31 (  0.31)	test_minacc   0.24 (  0.24)	test_majacc   0.95 (  0.95)	Loss_d 1.638 (1.638)	test_acc_d   0.31 (  0.31)	test_minacc_d   0.24 (  0.24)	test_majacc_d   0.95 (  0.95)	test_corr_d   0.71 (  0.71)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/32/checkpoints/model_best.pth
Overall Timing[ 14/  1]	epoch_time 0.0364 (0.0396)	validation_time 0.0003 (0.0008)	train_time 0.0360 (0.0382)
record: (train_acc, test_acc) (0.8570000284314155, 0.30900001525878906)
last accs (train_acc, test_acc) (0.8570000284314155, 0.30900001525878906)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.31it/s] 19%|#9        | 5/26 [00:00<00:00, 23.01it/s] 35%|###4      | 9/26 [00:00<00:00, 27.61it/s] 50%|#####     | 13/26 [00:00<00:00, 30.05it/s] 65%|######5   | 17/26 [00:00<00:00, 31.58it/s] 81%|########  | 21/26 [00:00<00:00, 32.75it/s] 96%|#########6| 25/26 [00:00<00:00, 33.46it/s]100%|##########| 26/26 [00:00<00:00, 28.65it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 390 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 391 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 392 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 393 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 394 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 395 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 396 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 397 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 398 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 399 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 400 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 401 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 402 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 403 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 404 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 405 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 406 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 407 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 408 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 409 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 410 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 411 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 412 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 413 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 414 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 415 400
penalty weights 10000.0
Epoch: [15][  26/  26]	Loss 0.001 (0.178)	train_nll   0.63 (  0.46)	train_penalty   0.00 (  0.02)	weight_norm   0.15 (  0.12)	train_acc   0.67 (  0.76)	train_minacc   0.64 (  0.46)	train_majacc   0.68 (  0.82)	train_corr   0.00 (  0.00)	l1 15.9109 (16.3820)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.27it/s] 27%|##6       | 7/26 [00:00<00:00, 32.34it/s]                                               27%|##6       | 7/26 [00:00<00:00, 32.34it/s] 50%|#####     | 13/26 [00:00<00:00, 42.18it/s] 73%|#######3  | 19/26 [00:00<00:00, 44.85it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 44.85it/s] 96%|#########6| 25/26 [00:00<00:00, 49.20it/s]100%|##########| 26/26 [00:00<00:00, 40.34it/s]
Test: [   0/  26]	Loss 0.629 (0.629)	test_acc   0.67 (  0.67)	test_minacc   0.68 (  0.68)	test_majacc   0.67 (  0.67)	Loss_d 0.629 (0.629)	test_acc_d   0.67 (  0.67)	test_minacc_d   0.68 (  0.68)	test_majacc_d   0.67 (  0.67)	test_corr_d   0.29 (  0.29)
Test: [  10/  26]	Loss 0.653 (0.638)	test_acc   0.65 (  0.65)	test_minacc   0.71 (  0.70)	test_majacc   0.64 (  0.64)	Loss_d 0.653 (0.638)	test_acc_d   0.65 (  0.65)	test_minacc_d   0.71 (  0.70)	test_majacc_d   0.64 (  0.64)	test_corr_d   0.22 (  0.25)
Test: [  20/  26]	Loss 0.633 (0.637)	test_acc   0.65 (  0.64)	test_minacc   0.71 (  0.69)	test_majacc   0.63 (  0.64)	Loss_d 0.633 (0.637)	test_acc_d   0.65 (  0.64)	test_minacc_d   0.71 (  0.69)	test_majacc_d   0.63 (  0.64)	test_corr_d   0.23 (  0.26)
Test: [  26/  26]	Loss 0.635 (0.637)	test_acc   0.65 (  0.65)	test_minacc   0.62 (  0.68)	test_majacc   0.65 (  0.64)	Loss_d 0.635 (0.637)	test_acc_d   0.65 (  0.65)	test_minacc_d   0.62 (  0.68)	test_majacc_d   0.65 (  0.64)	test_corr_d   0.29 (  0.27)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.10it/s]
Test: [  0/  1]	Loss 0.645 (0.645)	test_acc   0.67 (  0.67)	test_minacc   0.67 (  0.67)	test_majacc   0.68 (  0.68)	Loss_d 0.645 (0.645)	test_acc_d   0.67 (  0.67)	test_minacc_d   0.67 (  0.67)	test_majacc_d   0.68 (  0.68)	test_corr_d  -0.28 ( -0.28)
Test: [  1/  1]	Loss 0.645 (0.645)	test_acc   0.67 (  0.67)	test_minacc   0.67 (  0.67)	test_majacc   0.68 (  0.68)	Loss_d 0.645 (0.645)	test_acc_d   0.67 (  0.67)	test_minacc_d   0.67 (  0.67)	test_majacc_d   0.68 (  0.68)	test_corr_d  -0.28 ( -0.28)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/32/checkpoints/model_best.pth
Overall Timing[ 15/  1]	epoch_time 0.0354 (0.0393)	validation_time 0.0004 (0.0008)	train_time 0.0350 (0.0380)
record: (train_acc, test_acc) (0.6467000194191933, 0.6680000424385071)
last accs (train_acc, test_acc) (0.6467000194191933, 0.6680000424385071)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.92it/s] 19%|#9        | 5/26 [00:00<00:00, 22.30it/s] 35%|###4      | 9/26 [00:00<00:00, 27.02it/s] 50%|#####     | 13/26 [00:00<00:00, 29.68it/s] 65%|######5   | 17/26 [00:00<00:00, 31.18it/s] 81%|########  | 21/26 [00:00<00:00, 32.48it/s] 96%|#########6| 25/26 [00:00<00:00, 33.32it/s]100%|##########| 26/26 [00:00<00:00, 28.39it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 416 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 417 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 418 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 419 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 420 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 421 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 422 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 423 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 424 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 425 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 426 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 427 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 428 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 429 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 430 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 431 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 432 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 433 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 434 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 435 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 436 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 437 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 438 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 439 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 440 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 441 400
penalty weights 10000.0
Epoch: [16][  26/  26]	Loss 0.000 (0.000)	train_nll   0.68 (  0.67)	train_penalty   0.00 (  0.00)	weight_norm   0.18 (  0.17)	train_acc   0.50 (  0.51)	train_minacc   0.48 (  0.55)	train_majacc   0.50 (  0.50)	train_corr   0.00 (  0.00)	l1 15.5831 (15.6891)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:00, 25.67it/s] 35%|###4      | 9/26 [00:00<00:00, 38.61it/s]                                               35%|###4      | 9/26 [00:00<00:00, 38.61it/s] 58%|#####7    | 15/26 [00:00<00:00, 46.74it/s]                                                58%|#####7    | 15/26 [00:00<00:00, 46.74it/s] 81%|########  | 21/26 [00:00<00:00, 47.15it/s]100%|##########| 26/26 [00:00<00:00, 42.01it/s]
Test: [   0/  26]	Loss 0.672 (0.672)	test_acc   0.53 (  0.53)	test_minacc   0.45 (  0.45)	test_majacc   0.54 (  0.54)	Loss_d 0.672 (0.672)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.45 (  0.45)	test_majacc_d   0.54 (  0.54)	test_corr_d   0.22 (  0.22)
Test: [  10/  26]	Loss 0.683 (0.676)	test_acc   0.50 (  0.51)	test_minacc   0.45 (  0.50)	test_majacc   0.51 (  0.51)	Loss_d 0.683 (0.676)	test_acc_d   0.50 (  0.51)	test_minacc_d   0.45 (  0.50)	test_majacc_d   0.51 (  0.51)	test_corr_d   0.17 (  0.20)
Test: [  20/  26]	Loss 0.671 (0.677)	test_acc   0.52 (  0.50)	test_minacc   0.61 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.671 (0.677)	test_acc_d   0.52 (  0.50)	test_minacc_d   0.61 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d   0.18 (  0.21)
Test: [  26/  26]	Loss 0.677 (0.677)	test_acc   0.50 (  0.50)	test_minacc   0.48 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.677 (0.677)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.48 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d   0.27 (  0.22)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.36it/s]
Test: [  0/  1]	Loss 0.681 (0.681)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.681 (0.681)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.19 ( -0.19)
Test: [  1/  1]	Loss 0.681 (0.681)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.681 (0.681)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.19 ( -0.19)
Overall Timing[ 16/  1]	epoch_time 0.0365 (0.0392)	validation_time 0.0004 (0.0008)	train_time 0.0360 (0.0379)
record: (train_acc, test_acc) (0.6467000194191933, 0.6680000424385071)
last accs (train_acc, test_acc) (0.5000000109970569, 0.5010000467300415)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.67it/s] 19%|#9        | 5/26 [00:00<00:00, 22.60it/s] 35%|###4      | 9/26 [00:00<00:00, 27.98it/s] 50%|#####     | 13/26 [00:00<00:00, 30.64it/s] 65%|######5   | 17/26 [00:00<00:00, 31.88it/s] 81%|########  | 21/26 [00:00<00:00, 32.47it/s] 96%|#########6| 25/26 [00:00<00:00, 33.00it/s]100%|##########| 26/26 [00:00<00:00, 28.66it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 442 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 443 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 444 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 445 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 446 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 447 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 448 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 449 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 450 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 451 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 452 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 453 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 454 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 455 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 456 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 457 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 458 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 459 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 460 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 461 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 462 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 463 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 464 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 465 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 466 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 467 400
penalty weights 10000.0
Epoch: [17][  26/  26]	Loss 0.000 (0.000)	train_nll   0.68 (  0.68)	train_penalty   0.00 (  0.00)	weight_norm   0.19 (  0.19)	train_acc   0.50 (  0.50)	train_minacc   0.48 (  0.50)	train_majacc   0.50 (  0.50)	train_corr   0.00 (  0.00)	l1 15.5406 (15.5581)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 18.02it/s] 31%|###       | 8/26 [00:00<00:00, 39.06it/s]                                               31%|###       | 8/26 [00:00<00:00, 39.06it/s] 50%|#####     | 13/26 [00:00<00:00, 40.47it/s] 73%|#######3  | 19/26 [00:00<00:00, 46.90it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 46.90it/s] 96%|#########6| 25/26 [00:00<00:00, 47.51it/s]100%|##########| 26/26 [00:00<00:00, 40.82it/s]
Test: [   0/  26]	Loss 0.677 (0.677)	test_acc   0.53 (  0.53)	test_minacc   0.45 (  0.45)	test_majacc   0.54 (  0.54)	Loss_d 0.677 (0.677)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.45 (  0.45)	test_majacc_d   0.54 (  0.54)	test_corr_d   0.21 (  0.21)
Test: [  10/  26]	Loss 0.686 (0.681)	test_acc   0.50 (  0.51)	test_minacc   0.45 (  0.50)	test_majacc   0.51 (  0.51)	Loss_d 0.686 (0.681)	test_acc_d   0.50 (  0.51)	test_minacc_d   0.45 (  0.50)	test_majacc_d   0.51 (  0.51)	test_corr_d   0.15 (  0.19)
Test: [  20/  26]	Loss 0.677 (0.682)	test_acc   0.52 (  0.50)	test_minacc   0.61 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.677 (0.682)	test_acc_d   0.52 (  0.50)	test_minacc_d   0.61 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d   0.17 (  0.19)
Test: [  26/  26]	Loss 0.681 (0.682)	test_acc   0.50 (  0.50)	test_minacc   0.48 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.681 (0.682)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.48 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d   0.27 (  0.20)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 64.30it/s]
Test: [  0/  1]	Loss 0.685 (0.685)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.685 (0.685)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.16 ( -0.16)
Test: [  1/  1]	Loss 0.685 (0.685)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.685 (0.685)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.16 ( -0.16)
Overall Timing[ 17/  1]	epoch_time 0.0367 (0.0390)	validation_time 0.0003 (0.0007)	train_time 0.0364 (0.0378)
record: (train_acc, test_acc) (0.6467000194191933, 0.6680000424385071)
last accs (train_acc, test_acc) (0.5000000109970569, 0.503000020980835)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  6.18it/s] 19%|#9        | 5/26 [00:00<00:01, 19.23it/s] 35%|###4      | 9/26 [00:00<00:00, 25.62it/s] 50%|#####     | 13/26 [00:00<00:00, 29.47it/s] 65%|######5   | 17/26 [00:00<00:00, 31.62it/s] 81%|########  | 21/26 [00:00<00:00, 33.16it/s] 96%|#########6| 25/26 [00:00<00:00, 33.62it/s]100%|##########| 26/26 [00:00<00:00, 27.72it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 468 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 469 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 470 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 471 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 472 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 473 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 474 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 475 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 476 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 477 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 478 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 479 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 480 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 481 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 482 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 483 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 484 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 485 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 486 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 487 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 488 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 489 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 490 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 491 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 492 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 493 400
penalty weights 10000.0
Epoch: [18][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.19 (  0.19)	train_acc   0.50 (  0.50)	train_minacc   0.48 (  0.50)	train_majacc   0.50 (  0.50)	train_corr   0.00 (  0.00)	l1 15.5286 (15.5345)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.73it/s] 27%|##6       | 7/26 [00:00<00:00, 37.67it/s]                                               27%|##6       | 7/26 [00:00<00:00, 37.67it/s] 50%|#####     | 13/26 [00:00<00:00, 44.11it/s] 73%|#######3  | 19/26 [00:00<00:00, 48.10it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 48.10it/s] 96%|#########6| 25/26 [00:00<00:00, 49.83it/s]100%|##########| 26/26 [00:00<00:00, 42.12it/s]
Test: [   0/  26]	Loss 0.684 (0.684)	test_acc   0.53 (  0.53)	test_minacc   0.45 (  0.45)	test_majacc   0.54 (  0.54)	Loss_d 0.684 (0.684)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.45 (  0.45)	test_majacc_d   0.54 (  0.54)	test_corr_d   0.16 (  0.16)
Test: [  10/  26]	Loss 0.690 (0.687)	test_acc   0.50 (  0.51)	test_minacc   0.45 (  0.50)	test_majacc   0.51 (  0.51)	Loss_d 0.690 (0.687)	test_acc_d   0.50 (  0.51)	test_minacc_d   0.45 (  0.50)	test_majacc_d   0.51 (  0.51)	test_corr_d   0.10 (  0.14)
Test: [  20/  26]	Loss 0.684 (0.687)	test_acc   0.52 (  0.50)	test_minacc   0.61 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.684 (0.687)	test_acc_d   0.52 (  0.50)	test_minacc_d   0.61 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d   0.13 (  0.14)
Test: [  26/  26]	Loss 0.688 (0.687)	test_acc   0.50 (  0.50)	test_minacc   0.48 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.688 (0.687)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.48 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d   0.23 (  0.15)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.77it/s]
Test: [  0/  1]	Loss 0.688 (0.688)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.688 (0.688)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.13 ( -0.13)
Test: [  1/  1]	Loss 0.688 (0.688)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.688 (0.688)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.13 ( -0.13)
Overall Timing[ 18/  1]	epoch_time 0.0344 (0.0388)	validation_time 0.0005 (0.0007)	train_time 0.0339 (0.0376)
record: (train_acc, test_acc) (0.6467000194191933, 0.6680000424385071)
last accs (train_acc, test_acc) (0.5000000109970569, 0.503000020980835)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.54it/s] 19%|#9        | 5/26 [00:00<00:00, 21.74it/s] 35%|###4      | 9/26 [00:00<00:00, 27.05it/s] 50%|#####     | 13/26 [00:00<00:00, 29.83it/s] 65%|######5   | 17/26 [00:00<00:00, 31.55it/s] 81%|########  | 21/26 [00:00<00:00, 32.43it/s] 96%|#########6| 25/26 [00:00<00:00, 32.73it/s]100%|##########| 26/26 [00:00<00:00, 28.06it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 494 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 495 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 496 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 497 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 498 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 499 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 500 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 501 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 502 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 503 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 504 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 505 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 506 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 507 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 508 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 509 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 510 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 511 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 512 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 513 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 514 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 515 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 516 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 517 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 518 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 519 400
penalty weights 10000.0
Epoch: [19][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.19 (  0.19)	train_acc   0.50 (  0.50)	train_minacc   0.48 (  0.50)	train_majacc   0.50 (  0.50)	train_corr   0.00 (  0.00)	l1 15.5228 (15.5252)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.31it/s] 27%|##6       | 7/26 [00:00<00:00, 33.73it/s]                                               27%|##6       | 7/26 [00:00<00:00, 33.73it/s] 50%|#####     | 13/26 [00:00<00:00, 40.26it/s] 73%|#######3  | 19/26 [00:00<00:00, 46.85it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 46.85it/s] 96%|#########6| 25/26 [00:00<00:00, 47.73it/s]100%|##########| 26/26 [00:00<00:00, 39.72it/s]
Test: [   0/  26]	Loss 0.688 (0.688)	test_acc   0.53 (  0.53)	test_minacc   0.45 (  0.45)	test_majacc   0.54 (  0.54)	Loss_d 0.688 (0.688)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.45 (  0.45)	test_majacc_d   0.54 (  0.54)	test_corr_d   0.11 (  0.11)
Test: [  10/  26]	Loss 0.693 (0.691)	test_acc   0.50 (  0.50)	test_minacc   0.45 (  0.50)	test_majacc   0.51 (  0.50)	Loss_d 0.693 (0.691)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.45 (  0.50)	test_majacc_d   0.51 (  0.50)	test_corr_d   0.04 (  0.06)
Test: [  20/  26]	Loss 0.689 (0.691)	test_acc   0.52 (  0.50)	test_minacc   0.61 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.689 (0.691)	test_acc_d   0.52 (  0.50)	test_minacc_d   0.61 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d   0.06 (  0.06)
Test: [  26/  26]	Loss 0.692 (0.691)	test_acc   0.50 (  0.50)	test_minacc   0.48 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.692 (0.691)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.48 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d   0.14 (  0.07)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 60.81it/s]
Test: [  0/  1]	Loss 0.690 (0.690)	test_acc   0.52 (  0.52)	test_minacc   0.53 (  0.53)	test_majacc   0.49 (  0.49)	Loss_d 0.690 (0.690)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.49 (  0.49)	test_corr_d  -0.08 ( -0.08)
Test: [  1/  1]	Loss 0.690 (0.690)	test_acc   0.52 (  0.52)	test_minacc   0.53 (  0.53)	test_majacc   0.49 (  0.49)	Loss_d 0.690 (0.690)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.49 (  0.49)	test_corr_d  -0.08 ( -0.08)
Overall Timing[ 19/  1]	epoch_time 0.0360 (0.0386)	validation_time 0.0005 (0.0007)	train_time 0.0355 (0.0375)
record: (train_acc, test_acc) (0.6467000194191933, 0.6680000424385071)
last accs (train_acc, test_acc) (0.49740001347661017, 0.5220000147819519)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.97it/s] 19%|#9        | 5/26 [00:00<00:00, 23.28it/s] 35%|###4      | 9/26 [00:00<00:00, 27.58it/s] 50%|#####     | 13/26 [00:00<00:00, 30.28it/s] 65%|######5   | 17/26 [00:00<00:00, 31.70it/s] 81%|########  | 21/26 [00:00<00:00, 32.87it/s] 96%|#########6| 25/26 [00:00<00:00, 33.83it/s]100%|##########| 26/26 [00:00<00:00, 29.13it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 520 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 521 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 522 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 523 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 524 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 525 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 526 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 527 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 528 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 529 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 530 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 531 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 532 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 533 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 534 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 535 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 536 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 537 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 538 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 539 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 540 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 541 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 542 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 543 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 544 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 545 400
penalty weights 10000.0
Epoch: [20][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.19 (  0.19)	train_acc   0.47 (  0.48)	train_minacc   0.48 (  0.53)	train_majacc   0.47 (  0.47)	train_corr   0.00 (  0.00)	l1 15.5202 (15.5212)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.49it/s] 31%|###       | 8/26 [00:00<00:00, 42.52it/s]                                               31%|###       | 8/26 [00:00<00:00, 42.52it/s] 50%|#####     | 13/26 [00:00<00:00, 44.24it/s] 73%|#######3  | 19/26 [00:00<00:00, 49.73it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 49.73it/s] 96%|#########6| 25/26 [00:00<00:00, 48.83it/s]100%|##########| 26/26 [00:00<00:00, 42.19it/s]
Test: [   0/  26]	Loss 0.690 (0.690)	test_acc   0.47 (  0.47)	test_minacc   0.57 (  0.57)	test_majacc   0.45 (  0.45)	Loss_d 0.690 (0.690)	test_acc_d   0.47 (  0.47)	test_minacc_d   0.57 (  0.57)	test_majacc_d   0.45 (  0.45)	test_corr_d   0.08 (  0.08)
Test: [  10/  26]	Loss 0.693 (0.692)	test_acc   0.44 (  0.46)	test_minacc   0.41 (  0.56)	test_majacc   0.44 (  0.45)	Loss_d 0.693 (0.692)	test_acc_d   0.44 (  0.46)	test_minacc_d   0.41 (  0.56)	test_majacc_d   0.44 (  0.45)	test_corr_d   0.01 (  0.03)
Test: [  20/  26]	Loss 0.691 (0.692)	test_acc   0.49 (  0.46)	test_minacc   0.55 (  0.54)	test_majacc   0.48 (  0.45)	Loss_d 0.691 (0.692)	test_acc_d   0.49 (  0.46)	test_minacc_d   0.55 (  0.54)	test_majacc_d   0.48 (  0.45)	test_corr_d   0.03 (  0.03)
Test: [  26/  26]	Loss 0.693 (0.692)	test_acc   0.46 (  0.46)	test_minacc   0.48 (  0.54)	test_majacc   0.45 (  0.45)	Loss_d 0.693 (0.692)	test_acc_d   0.46 (  0.46)	test_minacc_d   0.48 (  0.54)	test_majacc_d   0.45 (  0.45)	test_corr_d   0.10 (  0.04)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 67.26it/s]
Test: [  0/  1]	Loss 0.691 (0.691)	test_acc   0.58 (  0.58)	test_minacc   0.60 (  0.60)	test_majacc   0.45 (  0.45)	Loss_d 0.691 (0.691)	test_acc_d   0.58 (  0.58)	test_minacc_d   0.60 (  0.60)	test_majacc_d   0.45 (  0.45)	test_corr_d  -0.07 ( -0.07)
Test: [  1/  1]	Loss 0.691 (0.691)	test_acc   0.58 (  0.58)	test_minacc   0.60 (  0.60)	test_majacc   0.45 (  0.45)	Loss_d 0.691 (0.691)	test_acc_d   0.58 (  0.58)	test_minacc_d   0.60 (  0.60)	test_majacc_d   0.45 (  0.45)	test_corr_d  -0.07 ( -0.07)
Overall Timing[ 20/  1]	epoch_time 0.0370 (0.0386)	validation_time 0.0004 (0.0007)	train_time 0.0366 (0.0374)
record: (train_acc, test_acc) (0.6467000194191933, 0.6680000424385071)
last accs (train_acc, test_acc) (0.4599000030755997, 0.5830000042915344)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.47it/s] 19%|#9        | 5/26 [00:00<00:00, 23.58it/s] 35%|###4      | 9/26 [00:00<00:00, 27.90it/s] 50%|#####     | 13/26 [00:00<00:00, 30.60it/s] 65%|######5   | 17/26 [00:00<00:00, 30.99it/s] 81%|########  | 21/26 [00:00<00:00, 32.15it/s] 96%|#########6| 25/26 [00:00<00:00, 33.10it/s]100%|##########| 26/26 [00:00<00:00, 28.46it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 546 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 547 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 548 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 549 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 550 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 551 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 552 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 553 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 554 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 555 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 556 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 557 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 558 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 559 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 560 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 561 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 562 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 563 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 564 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 565 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 566 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 567 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 568 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 569 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 570 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 571 400
penalty weights 10000.0
Epoch: [21][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.19 (  0.19)	train_acc   0.46 (  0.46)	train_minacc   0.43 (  0.53)	train_majacc   0.46 (  0.45)	train_corr   0.00 (  0.00)	l1 15.5190 (15.5195)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:00, 28.61it/s] 35%|###4      | 9/26 [00:00<00:00, 39.98it/s]                                               35%|###4      | 9/26 [00:00<00:00, 39.98it/s] 58%|#####7    | 15/26 [00:00<00:00, 46.24it/s]                                                58%|#####7    | 15/26 [00:00<00:00, 46.24it/s] 81%|########  | 21/26 [00:00<00:00, 48.38it/s]100%|##########| 26/26 [00:00<00:00, 43.25it/s]
Test: [   0/  26]	Loss 0.691 (0.691)	test_acc   0.46 (  0.46)	test_minacc   0.51 (  0.51)	test_majacc   0.46 (  0.46)	Loss_d 0.691 (0.691)	test_acc_d   0.46 (  0.46)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.46 (  0.46)	test_corr_d   0.06 (  0.06)
Test: [  10/  26]	Loss 0.694 (0.692)	test_acc   0.44 (  0.46)	test_minacc   0.39 (  0.53)	test_majacc   0.45 (  0.45)	Loss_d 0.694 (0.692)	test_acc_d   0.44 (  0.46)	test_minacc_d   0.39 (  0.53)	test_majacc_d   0.45 (  0.45)	test_corr_d  -0.00 (  0.02)
Test: [  20/  26]	Loss 0.692 (0.693)	test_acc   0.46 (  0.46)	test_minacc   0.47 (  0.52)	test_majacc   0.46 (  0.45)	Loss_d 0.692 (0.693)	test_acc_d   0.46 (  0.46)	test_minacc_d   0.47 (  0.52)	test_majacc_d   0.46 (  0.45)	test_corr_d   0.02 (  0.02)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.46 (  0.46)	test_minacc   0.43 (  0.52)	test_majacc   0.46 (  0.45)	Loss_d 0.693 (0.693)	test_acc_d   0.46 (  0.46)	test_minacc_d   0.43 (  0.52)	test_majacc_d   0.46 (  0.45)	test_corr_d   0.09 (  0.03)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.54it/s]
Test: [  0/  1]	Loss 0.691 (0.691)	test_acc   0.56 (  0.56)	test_minacc   0.57 (  0.57)	test_majacc   0.46 (  0.46)	Loss_d 0.691 (0.691)	test_acc_d   0.56 (  0.56)	test_minacc_d   0.57 (  0.57)	test_majacc_d   0.46 (  0.46)	test_corr_d  -0.07 ( -0.07)
Test: [  1/  1]	Loss 0.691 (0.691)	test_acc   0.56 (  0.56)	test_minacc   0.57 (  0.57)	test_majacc   0.46 (  0.46)	Loss_d 0.691 (0.691)	test_acc_d   0.56 (  0.56)	test_minacc_d   0.57 (  0.57)	test_majacc_d   0.46 (  0.46)	test_corr_d  -0.07 ( -0.07)
Overall Timing[ 21/  1]	epoch_time 0.0366 (0.0385)	validation_time 0.0003 (0.0007)	train_time 0.0362 (0.0374)
record: (train_acc, test_acc) (0.6467000194191933, 0.6680000424385071)
last accs (train_acc, test_acc) (0.4604000042080879, 0.5550000071525574)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.26it/s] 15%|#5        | 4/26 [00:00<00:01, 15.71it/s] 31%|###       | 8/26 [00:00<00:00, 22.97it/s] 46%|####6     | 12/26 [00:00<00:00, 27.27it/s] 62%|######1   | 16/26 [00:00<00:00, 30.02it/s] 77%|#######6  | 20/26 [00:00<00:00, 31.75it/s] 92%|#########2| 24/26 [00:00<00:00, 32.82it/s]100%|##########| 26/26 [00:00<00:00, 26.45it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 572 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 573 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 574 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 575 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 576 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 577 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 578 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 579 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 580 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 581 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 582 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 583 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 584 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 585 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 586 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 587 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 588 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 589 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 590 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 591 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 592 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 593 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 594 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 595 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 596 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 597 400
penalty weights 10000.0
Epoch: [22][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.19 (  0.19)	train_acc   0.44 (  0.46)	train_minacc   0.36 (  0.51)	train_majacc   0.46 (  0.45)	train_corr   0.00 (  0.00)	l1 15.5183 (15.5187)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.67it/s] 27%|##6       | 7/26 [00:00<00:00, 28.24it/s]                                               27%|##6       | 7/26 [00:00<00:00, 28.24it/s] 50%|#####     | 13/26 [00:00<00:00, 36.37it/s] 73%|#######3  | 19/26 [00:00<00:00, 43.02it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 43.02it/s] 96%|#########6| 25/26 [00:00<00:00, 45.61it/s]100%|##########| 26/26 [00:00<00:00, 36.68it/s]
Test: [   0/  26]	Loss 0.692 (0.692)	test_acc   0.48 (  0.48)	test_minacc   0.49 (  0.49)	test_majacc   0.48 (  0.48)	Loss_d 0.692 (0.692)	test_acc_d   0.48 (  0.48)	test_minacc_d   0.49 (  0.49)	test_majacc_d   0.48 (  0.48)	test_corr_d   0.04 (  0.04)
Test: [  10/  26]	Loss 0.694 (0.693)	test_acc   0.46 (  0.46)	test_minacc   0.39 (  0.50)	test_majacc   0.47 (  0.46)	Loss_d 0.694 (0.693)	test_acc_d   0.46 (  0.46)	test_minacc_d   0.39 (  0.50)	test_majacc_d   0.47 (  0.46)	test_corr_d  -0.01 (  0.02)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.46 (  0.46)	test_minacc   0.45 (  0.50)	test_majacc   0.47 (  0.46)	Loss_d 0.693 (0.693)	test_acc_d   0.46 (  0.46)	test_minacc_d   0.45 (  0.50)	test_majacc_d   0.47 (  0.46)	test_corr_d   0.01 (  0.02)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.44 (  0.46)	test_minacc   0.36 (  0.50)	test_majacc   0.46 (  0.45)	Loss_d 0.693 (0.693)	test_acc_d   0.44 (  0.46)	test_minacc_d   0.36 (  0.50)	test_majacc_d   0.46 (  0.45)	test_corr_d   0.08 (  0.03)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.79it/s]
Test: [  0/  1]	Loss 0.691 (0.691)	test_acc   0.54 (  0.54)	test_minacc   0.55 (  0.55)	test_majacc   0.43 (  0.43)	Loss_d 0.691 (0.691)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.55 (  0.55)	test_majacc_d   0.43 (  0.43)	test_corr_d  -0.07 ( -0.07)
Test: [  1/  1]	Loss 0.691 (0.691)	test_acc   0.54 (  0.54)	test_minacc   0.55 (  0.55)	test_majacc   0.43 (  0.43)	Loss_d 0.691 (0.691)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.55 (  0.55)	test_majacc_d   0.43 (  0.43)	test_corr_d  -0.07 ( -0.07)
Overall Timing[ 22/  1]	epoch_time 0.0380 (0.0384)	validation_time 0.0004 (0.0007)	train_time 0.0375 (0.0374)
record: (train_acc, test_acc) (0.6467000194191933, 0.6680000424385071)
last accs (train_acc, test_acc) (0.4612000042796135, 0.5370000004768372)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.26it/s] 15%|#5        | 4/26 [00:00<00:01, 16.44it/s] 31%|###       | 8/26 [00:00<00:00, 21.45it/s] 42%|####2     | 11/26 [00:00<00:00, 19.07it/s] 50%|#####     | 13/26 [00:00<00:00, 18.22it/s] 58%|#####7    | 15/26 [00:00<00:00, 17.69it/s] 65%|######5   | 17/26 [00:00<00:00, 17.38it/s] 73%|#######3  | 19/26 [00:01<00:00, 17.21it/s] 81%|########  | 21/26 [00:01<00:00, 17.07it/s] 88%|########8 | 23/26 [00:01<00:00, 16.95it/s] 96%|#########6| 25/26 [00:01<00:00, 16.71it/s]100%|##########| 26/26 [00:01<00:00, 16.53it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 598 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 599 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 600 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 601 400
penalty weights 10000.0
args.step pgd_anneal_iters 601 600
dim_v 512
rho, theta 318 tensor(-0.0119, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 602 400
penalty weights 10000.0
args.step pgd_anneal_iters 602 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 603 400
penalty weights 10000.0
args.step pgd_anneal_iters 603 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 604 400
penalty weights 10000.0
args.step pgd_anneal_iters 604 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 605 400
penalty weights 10000.0
args.step pgd_anneal_iters 605 600
dim_v 512
rho, theta 478 tensor(-0.0006, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 606 400
penalty weights 10000.0
args.step pgd_anneal_iters 606 600
dim_v 512
rho, theta 508 tensor(-0.0002, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 607 400
penalty weights 10000.0
args.step pgd_anneal_iters 607 600
dim_v 512
rho, theta 508 tensor(-0.0001, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 608 400
penalty weights 10000.0
args.step pgd_anneal_iters 608 600
dim_v 512
rho, theta 509 tensor(-0.0001, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 609 400
penalty weights 10000.0
args.step pgd_anneal_iters 609 600
dim_v 512
rho, theta 510 tensor(-0.0001, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 610 400
penalty weights 10000.0
args.step pgd_anneal_iters 610 600
dim_v 512
rho, theta 510 tensor(-9.5535e-05, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 611 400
penalty weights 10000.0
args.step pgd_anneal_iters 611 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 612 400
penalty weights 10000.0
args.step pgd_anneal_iters 612 600
dim_v 512
rho, theta 507 tensor(-0.0002, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 613 400
penalty weights 10000.0
args.step pgd_anneal_iters 613 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 614 400
penalty weights 10000.0
args.step pgd_anneal_iters 614 600
dim_v 512
rho, theta 508 tensor(-0.0001, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 615 400
penalty weights 10000.0
args.step pgd_anneal_iters 615 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 616 400
penalty weights 10000.0
args.step pgd_anneal_iters 616 600
dim_v 512
rho, theta 510 tensor(-0.0001, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 617 400
penalty weights 10000.0
args.step pgd_anneal_iters 617 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 618 400
penalty weights 10000.0
args.step pgd_anneal_iters 618 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 619 400
penalty weights 10000.0
args.step pgd_anneal_iters 619 600
dim_v 512
rho, theta 510 tensor(-0.0001, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 620 400
penalty weights 10000.0
args.step pgd_anneal_iters 620 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 621 400
penalty weights 10000.0
args.step pgd_anneal_iters 621 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 622 400
penalty weights 10000.0
args.step pgd_anneal_iters 622 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 623 400
penalty weights 10000.0
args.step pgd_anneal_iters 623 600
dim_v 512
rho, theta 510 tensor(-0.0001, device='cuda:0')
Epoch: [23][  26/  26]	Loss 0.000 (0.002)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.20 (  0.19)	train_acc   0.61 (  0.56)	train_minacc   0.45 (  0.51)	train_majacc   0.64 (  0.57)	train_corr   0.00 (  0.00)	l1 11.0259 (11.5459)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.29it/s] 27%|##6       | 7/26 [00:00<00:00, 36.64it/s]                                               27%|##6       | 7/26 [00:00<00:00, 36.64it/s] 50%|#####     | 13/26 [00:00<00:00, 41.10it/s] 73%|#######3  | 19/26 [00:00<00:00, 47.35it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 47.35it/s] 96%|#########6| 25/26 [00:00<00:00, 47.82it/s]100%|##########| 26/26 [00:00<00:00, 40.60it/s]
Test: [   0/  26]	Loss 0.690 (0.690)	test_acc   0.65 (  0.65)	test_minacc   0.45 (  0.45)	test_majacc   0.68 (  0.68)	Loss_d 0.690 (0.690)	test_acc_d   0.65 (  0.65)	test_minacc_d   0.45 (  0.45)	test_majacc_d   0.68 (  0.68)	test_corr_d   0.31 (  0.31)
Test: [  10/  26]	Loss 0.691 (0.691)	test_acc   0.58 (  0.62)	test_minacc   0.51 (  0.53)	test_majacc   0.60 (  0.64)	Loss_d 0.691 (0.691)	test_acc_d   0.58 (  0.62)	test_minacc_d   0.51 (  0.53)	test_majacc_d   0.60 (  0.64)	test_corr_d   0.19 (  0.26)
Test: [  20/  26]	Loss 0.691 (0.691)	test_acc   0.62 (  0.62)	test_minacc   0.63 (  0.53)	test_majacc   0.62 (  0.63)	Loss_d 0.691 (0.691)	test_acc_d   0.62 (  0.62)	test_minacc_d   0.63 (  0.53)	test_majacc_d   0.62 (  0.63)	test_corr_d   0.21 (  0.26)
Test: [  26/  26]	Loss 0.691 (0.691)	test_acc   0.63 (  0.62)	test_minacc   0.48 (  0.53)	test_majacc   0.66 (  0.63)	Loss_d 0.691 (0.691)	test_acc_d   0.63 (  0.62)	test_minacc_d   0.48 (  0.53)	test_majacc_d   0.66 (  0.63)	test_corr_d   0.27 (  0.26)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.66it/s]
Test: [  0/  1]	Loss 0.692 (0.692)	test_acc   0.56 (  0.56)	test_minacc   0.55 (  0.55)	test_majacc   0.67 (  0.67)	Loss_d 0.692 (0.692)	test_acc_d   0.56 (  0.56)	test_minacc_d   0.55 (  0.55)	test_majacc_d   0.67 (  0.67)	test_corr_d  -0.04 ( -0.04)
Test: [  1/  1]	Loss 0.692 (0.692)	test_acc   0.56 (  0.56)	test_minacc   0.55 (  0.55)	test_majacc   0.67 (  0.67)	Loss_d 0.692 (0.692)	test_acc_d   0.56 (  0.56)	test_minacc_d   0.55 (  0.55)	test_majacc_d   0.67 (  0.67)	test_corr_d  -0.04 ( -0.04)
Overall Timing[ 23/  1]	epoch_time 0.0468 (0.0388)	validation_time 0.0004 (0.0007)	train_time 0.0464 (0.0378)
record: (train_acc, test_acc) (0.6467000194191933, 0.6680000424385071)
last accs (train_acc, test_acc) (0.6176000123023987, 0.5600000023841858)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.49it/s] 12%|#1        | 3/26 [00:00<00:02, 10.95it/s] 19%|#9        | 5/26 [00:00<00:01, 13.24it/s] 27%|##6       | 7/26 [00:00<00:01, 14.38it/s] 35%|###4      | 9/26 [00:00<00:01, 15.32it/s] 42%|####2     | 11/26 [00:00<00:00, 15.89it/s] 50%|#####     | 13/26 [00:00<00:00, 16.33it/s] 58%|#####7    | 15/26 [00:01<00:00, 16.58it/s] 65%|######5   | 17/26 [00:01<00:00, 16.75it/s] 73%|#######3  | 19/26 [00:01<00:00, 16.87it/s] 81%|########  | 21/26 [00:01<00:00, 16.82it/s] 88%|########8 | 23/26 [00:01<00:00, 16.80it/s] 96%|#########6| 25/26 [00:01<00:00, 16.86it/s]100%|##########| 26/26 [00:01<00:00, 15.15it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 624 400
penalty weights 10000.0
args.step pgd_anneal_iters 624 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 625 400
penalty weights 10000.0
args.step pgd_anneal_iters 625 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 626 400
penalty weights 10000.0
args.step pgd_anneal_iters 626 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 627 400
penalty weights 10000.0
args.step pgd_anneal_iters 627 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 628 400
penalty weights 10000.0
args.step pgd_anneal_iters 628 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 629 400
penalty weights 10000.0
args.step pgd_anneal_iters 629 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 630 400
penalty weights 10000.0
args.step pgd_anneal_iters 630 600
dim_v 512
rho, theta 510 tensor(-0.0001, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 631 400
penalty weights 10000.0
args.step pgd_anneal_iters 631 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 632 400
penalty weights 10000.0
args.step pgd_anneal_iters 632 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 633 400
penalty weights 10000.0
args.step pgd_anneal_iters 633 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 634 400
penalty weights 10000.0
args.step pgd_anneal_iters 634 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 635 400
penalty weights 10000.0
args.step pgd_anneal_iters 635 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 636 400
penalty weights 10000.0
args.step pgd_anneal_iters 636 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 637 400
penalty weights 10000.0
args.step pgd_anneal_iters 637 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 638 400
penalty weights 10000.0
args.step pgd_anneal_iters 638 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 639 400
penalty weights 10000.0
args.step pgd_anneal_iters 639 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 640 400
penalty weights 10000.0
args.step pgd_anneal_iters 640 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 641 400
penalty weights 10000.0
args.step pgd_anneal_iters 641 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 642 400
penalty weights 10000.0
args.step pgd_anneal_iters 642 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 643 400
penalty weights 10000.0
args.step pgd_anneal_iters 643 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 644 400
penalty weights 10000.0
args.step pgd_anneal_iters 644 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 645 400
penalty weights 10000.0
args.step pgd_anneal_iters 645 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 646 400
penalty weights 10000.0
args.step pgd_anneal_iters 646 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 647 400
penalty weights 10000.0
args.step pgd_anneal_iters 647 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 648 400
penalty weights 10000.0
args.step pgd_anneal_iters 648 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 649 400
penalty weights 10000.0
args.step pgd_anneal_iters 649 600
dim_v 512
retunring when rho == dim_v - 1
Epoch: [24][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.20 (  0.20)	train_acc   0.50 (  0.55)	train_minacc   0.50 (  0.52)	train_majacc   0.50 (  0.55)	train_corr   0.00 (  0.00)	l1 11.0201 (11.0225)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  6.15it/s] 27%|##6       | 7/26 [00:00<00:00, 30.26it/s]                                               27%|##6       | 7/26 [00:00<00:00, 30.26it/s] 50%|#####     | 13/26 [00:00<00:00, 37.73it/s] 73%|#######3  | 19/26 [00:00<00:00, 44.82it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 44.82it/s] 96%|#########6| 25/26 [00:00<00:00, 45.85it/s]100%|##########| 26/26 [00:00<00:00, 37.59it/s]
Test: [   0/  26]	Loss 0.692 (0.692)	test_acc   0.55 (  0.55)	test_minacc   0.45 (  0.45)	test_majacc   0.57 (  0.57)	Loss_d 0.692 (0.692)	test_acc_d   0.55 (  0.55)	test_minacc_d   0.45 (  0.45)	test_majacc_d   0.57 (  0.57)	test_corr_d   0.18 (  0.18)
Test: [  10/  26]	Loss 0.693 (0.692)	test_acc   0.52 (  0.52)	test_minacc   0.47 (  0.50)	test_majacc   0.52 (  0.52)	Loss_d 0.693 (0.692)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.47 (  0.50)	test_majacc_d   0.52 (  0.52)	test_corr_d   0.05 (  0.11)
Test: [  20/  26]	Loss 0.692 (0.693)	test_acc   0.53 (  0.51)	test_minacc   0.65 (  0.51)	test_majacc   0.51 (  0.51)	Loss_d 0.692 (0.693)	test_acc_d   0.53 (  0.51)	test_minacc_d   0.65 (  0.51)	test_majacc_d   0.51 (  0.51)	test_corr_d   0.04 (  0.10)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.50 (  0.51)	test_minacc   0.50 (  0.51)	test_majacc   0.50 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.51)	test_minacc_d   0.50 (  0.51)	test_majacc_d   0.50 (  0.51)	test_corr_d   0.13 (  0.11)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.40it/s]
Test: [  0/  1]	Loss 0.692 (0.692)	test_acc   0.51 (  0.51)	test_minacc   0.51 (  0.51)	test_majacc   0.54 (  0.54)	Loss_d 0.692 (0.692)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.54 (  0.54)	test_corr_d  -0.20 ( -0.20)
Test: [  1/  1]	Loss 0.692 (0.692)	test_acc   0.51 (  0.51)	test_minacc   0.51 (  0.51)	test_majacc   0.54 (  0.54)	Loss_d 0.692 (0.692)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.54 (  0.54)	test_corr_d  -0.20 ( -0.20)
Overall Timing[ 24/  1]	epoch_time 0.0497 (0.0392)	validation_time 0.0004 (0.0006)	train_time 0.0492 (0.0382)
record: (train_acc, test_acc) (0.6467000194191933, 0.6680000424385071)
last accs (train_acc, test_acc) (0.5109000111818314, 0.5100000500679016)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.75it/s] 12%|#1        | 3/26 [00:00<00:01, 12.07it/s] 19%|#9        | 5/26 [00:00<00:01, 14.12it/s] 27%|##6       | 7/26 [00:00<00:01, 15.07it/s] 35%|###4      | 9/26 [00:00<00:01, 15.70it/s] 42%|####2     | 11/26 [00:00<00:00, 16.15it/s] 50%|#####     | 13/26 [00:00<00:00, 16.48it/s] 58%|#####7    | 15/26 [00:00<00:00, 16.68it/s] 65%|######5   | 17/26 [00:01<00:00, 16.67it/s] 73%|#######3  | 19/26 [00:01<00:00, 16.75it/s] 81%|########  | 21/26 [00:01<00:00, 16.93it/s] 88%|########8 | 23/26 [00:01<00:00, 16.97it/s] 96%|#########6| 25/26 [00:01<00:00, 16.89it/s]100%|##########| 26/26 [00:01<00:00, 15.45it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 650 400
penalty weights 10000.0
args.step pgd_anneal_iters 650 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 651 400
penalty weights 10000.0
args.step pgd_anneal_iters 651 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 652 400
penalty weights 10000.0
args.step pgd_anneal_iters 652 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 653 400
penalty weights 10000.0
args.step pgd_anneal_iters 653 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 654 400
penalty weights 10000.0
args.step pgd_anneal_iters 654 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 655 400
penalty weights 10000.0
args.step pgd_anneal_iters 655 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 656 400
penalty weights 10000.0
args.step pgd_anneal_iters 656 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 657 400
penalty weights 10000.0
args.step pgd_anneal_iters 657 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 658 400
penalty weights 10000.0
args.step pgd_anneal_iters 658 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 659 400
penalty weights 10000.0
args.step pgd_anneal_iters 659 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 660 400
penalty weights 10000.0
args.step pgd_anneal_iters 660 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 661 400
penalty weights 10000.0
args.step pgd_anneal_iters 661 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 662 400
penalty weights 10000.0
args.step pgd_anneal_iters 662 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 663 400
penalty weights 10000.0
args.step pgd_anneal_iters 663 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 664 400
penalty weights 10000.0
args.step pgd_anneal_iters 664 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 665 400
penalty weights 10000.0
args.step pgd_anneal_iters 665 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 666 400
penalty weights 10000.0
args.step pgd_anneal_iters 666 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 667 400
penalty weights 10000.0
args.step pgd_anneal_iters 667 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 668 400
penalty weights 10000.0
args.step pgd_anneal_iters 668 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 669 400
penalty weights 10000.0
args.step pgd_anneal_iters 669 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 670 400
penalty weights 10000.0
args.step pgd_anneal_iters 670 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 671 400
penalty weights 10000.0
args.step pgd_anneal_iters 671 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 672 400
penalty weights 10000.0
args.step pgd_anneal_iters 672 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 673 400
penalty weights 10000.0
args.step pgd_anneal_iters 673 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 674 400
penalty weights 10000.0
args.step pgd_anneal_iters 674 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 675 400
penalty weights 10000.0
args.step pgd_anneal_iters 675 600
dim_v 512
retunring when rho == dim_v - 1
Epoch: [25][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.20 (  0.20)	train_acc   0.50 (  0.51)	train_minacc   0.48 (  0.50)	train_majacc   0.50 (  0.51)	train_corr   0.00 (  0.00)	l1 11.0165 (11.0182)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s] 15%|#5        | 4/26 [00:00<00:00, 37.68it/s] 35%|###4      | 9/26 [00:00<00:00, 42.06it/s]                                               35%|###4      | 9/26 [00:00<00:00, 42.06it/s] 58%|#####7    | 15/26 [00:00<00:00, 49.23it/s] 77%|#######6  | 20/26 [00:00<00:00, 49.51it/s]                                                77%|#######6  | 20/26 [00:00<00:00, 49.51it/s]100%|##########| 26/26 [00:00<00:00, 51.51it/s]100%|##########| 26/26 [00:00<00:00, 44.63it/s]
Test: [   0/  26]	Loss 0.692 (0.692)	test_acc   0.54 (  0.54)	test_minacc   0.45 (  0.45)	test_majacc   0.55 (  0.55)	Loss_d 0.692 (0.692)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.45 (  0.45)	test_majacc_d   0.55 (  0.55)	test_corr_d   0.16 (  0.16)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.52 (  0.51)	test_minacc   0.49 (  0.50)	test_majacc   0.52 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.51)	test_minacc_d   0.49 (  0.50)	test_majacc_d   0.52 (  0.51)	test_corr_d   0.02 (  0.07)
Test: [  20/  26]	Loss 0.692 (0.693)	test_acc   0.52 (  0.51)	test_minacc   0.63 (  0.51)	test_majacc   0.50 (  0.51)	Loss_d 0.692 (0.693)	test_acc_d   0.52 (  0.51)	test_minacc_d   0.63 (  0.51)	test_majacc_d   0.50 (  0.51)	test_corr_d   0.00 (  0.07)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.50 (  0.51)	test_minacc   0.48 (  0.50)	test_majacc   0.50 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.51)	test_minacc_d   0.48 (  0.50)	test_majacc_d   0.50 (  0.51)	test_corr_d   0.10 (  0.07)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.95it/s]
Test: [  0/  1]	Loss 0.692 (0.692)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.52 (  0.52)	Loss_d 0.692 (0.692)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.52 (  0.52)	test_corr_d  -0.23 ( -0.23)
Test: [  1/  1]	Loss 0.692 (0.692)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.52 (  0.52)	Loss_d 0.692 (0.692)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.52 (  0.52)	test_corr_d  -0.23 ( -0.23)
Overall Timing[ 25/  1]	epoch_time 0.0489 (0.0396)	validation_time 0.0004 (0.0006)	train_time 0.0485 (0.0386)
record: (train_acc, test_acc) (0.6467000194191933, 0.6680000424385071)
last accs (train_acc, test_acc) (0.5056000054776668, 0.5049999952316284)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.12it/s] 12%|#1        | 3/26 [00:00<00:02, 10.56it/s] 19%|#9        | 5/26 [00:00<00:01, 12.91it/s] 27%|##6       | 7/26 [00:00<00:01, 14.24it/s] 35%|###4      | 9/26 [00:00<00:01, 15.01it/s] 42%|####2     | 11/26 [00:00<00:00, 15.49it/s] 50%|#####     | 13/26 [00:00<00:00, 15.92it/s] 58%|#####7    | 15/26 [00:01<00:00, 16.21it/s] 65%|######5   | 17/26 [00:01<00:00, 16.42it/s] 73%|#######3  | 19/26 [00:01<00:00, 16.61it/s] 81%|########  | 21/26 [00:01<00:00, 16.63it/s] 88%|########8 | 23/26 [00:01<00:00, 16.82it/s] 96%|#########6| 25/26 [00:01<00:00, 16.83it/s]100%|##########| 26/26 [00:01<00:00, 14.93it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 676 400
penalty weights 10000.0
args.step pgd_anneal_iters 676 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 677 400
penalty weights 10000.0
args.step pgd_anneal_iters 677 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 678 400
penalty weights 10000.0
args.step pgd_anneal_iters 678 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 679 400
penalty weights 10000.0
args.step pgd_anneal_iters 679 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 680 400
penalty weights 10000.0
args.step pgd_anneal_iters 680 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 681 400
penalty weights 10000.0
args.step pgd_anneal_iters 681 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 682 400
penalty weights 10000.0
args.step pgd_anneal_iters 682 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 683 400
penalty weights 10000.0
args.step pgd_anneal_iters 683 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 684 400
penalty weights 10000.0
args.step pgd_anneal_iters 684 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 685 400
penalty weights 10000.0
args.step pgd_anneal_iters 685 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 686 400
penalty weights 10000.0
args.step pgd_anneal_iters 686 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 687 400
penalty weights 10000.0
args.step pgd_anneal_iters 687 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 688 400
penalty weights 10000.0
args.step pgd_anneal_iters 688 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 689 400
penalty weights 10000.0
args.step pgd_anneal_iters 689 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 690 400
penalty weights 10000.0
args.step pgd_anneal_iters 690 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 691 400
penalty weights 10000.0
args.step pgd_anneal_iters 691 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 692 400
penalty weights 10000.0
args.step pgd_anneal_iters 692 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 693 400
penalty weights 10000.0
args.step pgd_anneal_iters 693 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 694 400
penalty weights 10000.0
args.step pgd_anneal_iters 694 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 695 400
penalty weights 10000.0
args.step pgd_anneal_iters 695 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 696 400
penalty weights 10000.0
args.step pgd_anneal_iters 696 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 697 400
penalty weights 10000.0
args.step pgd_anneal_iters 697 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 698 400
penalty weights 10000.0
args.step pgd_anneal_iters 698 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 699 400
penalty weights 10000.0
args.step pgd_anneal_iters 699 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 700 400
penalty weights 10000.0
args.step pgd_anneal_iters 700 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 701 400
penalty weights 10000.0
args.step pgd_anneal_iters 701 600
dim_v 512
retunring when rho == dim_v - 1
Epoch: [26][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.20 (  0.20)	train_acc   0.50 (  0.51)	train_minacc   0.48 (  0.50)	train_majacc   0.50 (  0.51)	train_corr   0.00 (  0.00)	l1 11.0133 (11.0149)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.57it/s] 27%|##6       | 7/26 [00:00<00:00, 33.18it/s]                                               27%|##6       | 7/26 [00:00<00:00, 33.18it/s] 50%|#####     | 13/26 [00:00<00:00, 39.62it/s] 73%|#######3  | 19/26 [00:00<00:00, 46.25it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 46.25it/s] 96%|#########6| 25/26 [00:00<00:00, 47.12it/s]100%|##########| 26/26 [00:00<00:00, 39.23it/s]
Test: [   0/  26]	Loss 0.692 (0.692)	test_acc   0.54 (  0.54)	test_minacc   0.45 (  0.45)	test_majacc   0.55 (  0.55)	Loss_d 0.692 (0.692)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.45 (  0.45)	test_majacc_d   0.55 (  0.55)	test_corr_d   0.14 (  0.14)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.52 (  0.51)	test_minacc   0.49 (  0.51)	test_majacc   0.52 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.51)	test_minacc_d   0.49 (  0.51)	test_majacc_d   0.52 (  0.51)	test_corr_d   0.00 (  0.06)
Test: [  20/  26]	Loss 0.692 (0.693)	test_acc   0.52 (  0.51)	test_minacc   0.63 (  0.51)	test_majacc   0.50 (  0.51)	Loss_d 0.692 (0.693)	test_acc_d   0.52 (  0.51)	test_minacc_d   0.63 (  0.51)	test_majacc_d   0.50 (  0.51)	test_corr_d  -0.02 (  0.05)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.50 (  0.51)	test_minacc   0.48 (  0.50)	test_majacc   0.50 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.51)	test_minacc_d   0.48 (  0.50)	test_majacc_d   0.50 (  0.51)	test_corr_d   0.08 (  0.06)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 67.13it/s]
Test: [  0/  1]	Loss 0.692 (0.692)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.52 (  0.52)	Loss_d 0.692 (0.692)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.52 (  0.52)	test_corr_d  -0.24 ( -0.24)
Test: [  1/  1]	Loss 0.692 (0.692)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.52 (  0.52)	Loss_d 0.692 (0.692)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.52 (  0.52)	test_corr_d  -0.24 ( -0.24)
Overall Timing[ 26/  1]	epoch_time 0.0507 (0.0400)	validation_time 0.0003 (0.0006)	train_time 0.0504 (0.0391)
record: (train_acc, test_acc) (0.6467000194191933, 0.6680000424385071)
last accs (train_acc, test_acc) (0.5054000066518783, 0.5049999952316284)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.41it/s] 12%|#1        | 3/26 [00:00<00:01, 12.40it/s] 19%|#9        | 5/26 [00:00<00:01, 14.38it/s] 27%|##6       | 7/26 [00:00<00:01, 15.54it/s] 35%|###4      | 9/26 [00:00<00:01, 16.15it/s] 42%|####2     | 11/26 [00:00<00:00, 16.54it/s] 50%|#####     | 13/26 [00:00<00:00, 16.61it/s] 58%|#####7    | 15/26 [00:00<00:00, 16.81it/s] 65%|######5   | 17/26 [00:01<00:00, 16.92it/s] 73%|#######3  | 19/26 [00:01<00:00, 17.07it/s] 81%|########  | 21/26 [00:01<00:00, 17.07it/s] 88%|########8 | 23/26 [00:01<00:00, 17.14it/s] 96%|#########6| 25/26 [00:01<00:00, 17.11it/s]100%|##########| 26/26 [00:01<00:00, 15.77it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 702 400
penalty weights 10000.0
args.step pgd_anneal_iters 702 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 703 400
penalty weights 10000.0
args.step pgd_anneal_iters 703 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 704 400
penalty weights 10000.0
args.step pgd_anneal_iters 704 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 705 400
penalty weights 10000.0
args.step pgd_anneal_iters 705 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 706 400
penalty weights 10000.0
args.step pgd_anneal_iters 706 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 707 400
penalty weights 10000.0
args.step pgd_anneal_iters 707 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 708 400
penalty weights 10000.0
args.step pgd_anneal_iters 708 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 709 400
penalty weights 10000.0
args.step pgd_anneal_iters 709 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 710 400
penalty weights 10000.0
args.step pgd_anneal_iters 710 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 711 400
penalty weights 10000.0
args.step pgd_anneal_iters 711 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 712 400
penalty weights 10000.0
args.step pgd_anneal_iters 712 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 713 400
penalty weights 10000.0
args.step pgd_anneal_iters 713 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 714 400
penalty weights 10000.0
args.step pgd_anneal_iters 714 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 715 400
penalty weights 10000.0
args.step pgd_anneal_iters 715 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 716 400
penalty weights 10000.0
args.step pgd_anneal_iters 716 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 717 400
penalty weights 10000.0
args.step pgd_anneal_iters 717 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 718 400
penalty weights 10000.0
args.step pgd_anneal_iters 718 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 719 400
penalty weights 10000.0
args.step pgd_anneal_iters 719 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 720 400
penalty weights 10000.0
args.step pgd_anneal_iters 720 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 721 400
penalty weights 10000.0
args.step pgd_anneal_iters 721 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 722 400
penalty weights 10000.0
args.step pgd_anneal_iters 722 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 723 400
penalty weights 10000.0
args.step pgd_anneal_iters 723 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 724 400
penalty weights 10000.0
args.step pgd_anneal_iters 724 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 725 400
penalty weights 10000.0
args.step pgd_anneal_iters 725 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 726 400
penalty weights 10000.0
args.step pgd_anneal_iters 726 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 727 400
penalty weights 10000.0
args.step pgd_anneal_iters 727 600
dim_v 512
retunring when rho == dim_v - 1
Epoch: [27][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.20 (  0.20)	train_acc   0.50 (  0.51)	train_minacc   0.48 (  0.50)	train_majacc   0.50 (  0.51)	train_corr   0.00 (  0.00)	l1 11.0102 (11.0117)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.08it/s] 27%|##6       | 7/26 [00:00<00:00, 32.02it/s]                                               27%|##6       | 7/26 [00:00<00:00, 32.02it/s] 50%|#####     | 13/26 [00:00<00:00, 38.28it/s] 73%|#######3  | 19/26 [00:00<00:00, 45.49it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 45.49it/s] 96%|#########6| 25/26 [00:00<00:00, 46.35it/s]100%|##########| 26/26 [00:00<00:00, 38.25it/s]
Test: [   0/  26]	Loss 0.692 (0.692)	test_acc   0.54 (  0.54)	test_minacc   0.45 (  0.45)	test_majacc   0.55 (  0.55)	Loss_d 0.692 (0.692)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.45 (  0.45)	test_majacc_d   0.55 (  0.55)	test_corr_d   0.13 (  0.13)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.52 (  0.51)	test_minacc   0.49 (  0.51)	test_majacc   0.52 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.51)	test_minacc_d   0.49 (  0.51)	test_majacc_d   0.52 (  0.51)	test_corr_d  -0.01 (  0.04)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.52 (  0.51)	test_minacc   0.63 (  0.51)	test_majacc   0.50 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.51)	test_minacc_d   0.63 (  0.51)	test_majacc_d   0.50 (  0.51)	test_corr_d  -0.03 (  0.04)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.50 (  0.51)	test_minacc   0.48 (  0.50)	test_majacc   0.50 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.51)	test_minacc_d   0.48 (  0.50)	test_majacc_d   0.50 (  0.51)	test_corr_d   0.06 (  0.04)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.60it/s]
Test: [  0/  1]	Loss 0.692 (0.692)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.52 (  0.52)	Loss_d 0.692 (0.692)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.52 (  0.52)	test_corr_d  -0.24 ( -0.24)
Test: [  1/  1]	Loss 0.692 (0.692)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.52 (  0.52)	Loss_d 0.692 (0.692)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.52 (  0.52)	test_corr_d  -0.24 ( -0.24)
Overall Timing[ 27/  1]	epoch_time 0.0489 (0.0403)	validation_time 0.0004 (0.0006)	train_time 0.0484 (0.0394)
record: (train_acc, test_acc) (0.6467000194191933, 0.6680000424385071)
last accs (train_acc, test_acc) (0.5058000054657459, 0.5049999952316284)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.29it/s] 12%|#1        | 3/26 [00:00<00:02, 11.19it/s] 19%|#9        | 5/26 [00:00<00:01, 13.42it/s] 27%|##6       | 7/26 [00:00<00:01, 14.70it/s] 35%|###4      | 9/26 [00:00<00:01, 15.47it/s] 42%|####2     | 11/26 [00:00<00:00, 15.95it/s] 50%|#####     | 13/26 [00:00<00:00, 16.17it/s] 58%|#####7    | 15/26 [00:01<00:00, 16.25it/s] 65%|######5   | 17/26 [00:01<00:00, 16.18it/s] 73%|#######3  | 19/26 [00:01<00:00, 16.34it/s] 81%|########  | 21/26 [00:01<00:00, 16.44it/s] 88%|########8 | 23/26 [00:01<00:00, 16.53it/s] 96%|#########6| 25/26 [00:01<00:00, 16.62it/s]100%|##########| 26/26 [00:01<00:00, 15.13it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 728 400
penalty weights 10000.0
args.step pgd_anneal_iters 728 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 729 400
penalty weights 10000.0
args.step pgd_anneal_iters 729 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 730 400
penalty weights 10000.0
args.step pgd_anneal_iters 730 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 731 400
penalty weights 10000.0
args.step pgd_anneal_iters 731 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 732 400
penalty weights 10000.0
args.step pgd_anneal_iters 732 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 733 400
penalty weights 10000.0
args.step pgd_anneal_iters 733 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 734 400
penalty weights 10000.0
args.step pgd_anneal_iters 734 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 735 400
penalty weights 10000.0
args.step pgd_anneal_iters 735 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 736 400
penalty weights 10000.0
args.step pgd_anneal_iters 736 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 737 400
penalty weights 10000.0
args.step pgd_anneal_iters 737 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 738 400
penalty weights 10000.0
args.step pgd_anneal_iters 738 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 739 400
penalty weights 10000.0
args.step pgd_anneal_iters 739 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 740 400
penalty weights 10000.0
args.step pgd_anneal_iters 740 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 741 400
penalty weights 10000.0
args.step pgd_anneal_iters 741 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 742 400
penalty weights 10000.0
args.step pgd_anneal_iters 742 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 743 400
penalty weights 10000.0
args.step pgd_anneal_iters 743 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 744 400
penalty weights 10000.0
args.step pgd_anneal_iters 744 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 745 400
penalty weights 10000.0
args.step pgd_anneal_iters 745 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 746 400
penalty weights 10000.0
args.step pgd_anneal_iters 746 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 747 400
penalty weights 10000.0
args.step pgd_anneal_iters 747 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 748 400
penalty weights 10000.0
args.step pgd_anneal_iters 748 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 749 400
penalty weights 10000.0
args.step pgd_anneal_iters 749 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 750 400
penalty weights 10000.0
args.step pgd_anneal_iters 750 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 751 400
penalty weights 10000.0
args.step pgd_anneal_iters 751 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 752 400
penalty weights 10000.0
args.step pgd_anneal_iters 752 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 753 400
penalty weights 10000.0
args.step pgd_anneal_iters 753 600
dim_v 512
retunring when rho == dim_v - 1
Epoch: [28][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.20 (  0.20)	train_acc   0.50 (  0.51)	train_minacc   0.48 (  0.50)	train_majacc   0.50 (  0.51)	train_corr   0.00 (  0.00)	l1 11.0072 (11.0086)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 19.04it/s] 31%|###       | 8/26 [00:00<00:00, 41.70it/s]                                               31%|###       | 8/26 [00:00<00:00, 41.70it/s] 50%|#####     | 13/26 [00:00<00:00, 43.21it/s] 73%|#######3  | 19/26 [00:00<00:00, 49.52it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 49.52it/s] 96%|#########6| 25/26 [00:00<00:00, 49.25it/s]100%|##########| 26/26 [00:00<00:00, 42.88it/s]
Test: [   0/  26]	Loss 0.692 (0.692)	test_acc   0.54 (  0.54)	test_minacc   0.45 (  0.45)	test_majacc   0.55 (  0.55)	Loss_d 0.692 (0.692)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.45 (  0.45)	test_majacc_d   0.55 (  0.55)	test_corr_d   0.12 (  0.12)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.52 (  0.51)	test_minacc   0.49 (  0.50)	test_majacc   0.52 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.51)	test_minacc_d   0.49 (  0.50)	test_majacc_d   0.52 (  0.51)	test_corr_d  -0.02 (  0.03)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.52 (  0.51)	test_minacc   0.63 (  0.51)	test_majacc   0.50 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.51)	test_minacc_d   0.63 (  0.51)	test_majacc_d   0.50 (  0.51)	test_corr_d  -0.04 (  0.02)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.50 (  0.51)	test_minacc   0.48 (  0.50)	test_majacc   0.50 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.51)	test_minacc_d   0.48 (  0.50)	test_majacc_d   0.50 (  0.51)	test_corr_d   0.05 (  0.03)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.45it/s]
Test: [  0/  1]	Loss 0.692 (0.692)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.52 (  0.52)	Loss_d 0.692 (0.692)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.52 (  0.52)	test_corr_d  -0.25 ( -0.25)
Test: [  1/  1]	Loss 0.692 (0.692)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.52 (  0.52)	Loss_d 0.692 (0.692)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.52 (  0.52)	test_corr_d  -0.25 ( -0.25)
Overall Timing[ 28/  1]	epoch_time 0.0483 (0.0406)	validation_time 0.0004 (0.0006)	train_time 0.0478 (0.0397)
record: (train_acc, test_acc) (0.6467000194191933, 0.6680000424385071)
last accs (train_acc, test_acc) (0.5059000077843666, 0.5049999952316284)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.18it/s] 12%|#1        | 3/26 [00:00<00:01, 12.66it/s] 19%|#9        | 5/26 [00:00<00:01, 14.46it/s] 27%|##6       | 7/26 [00:00<00:01, 15.23it/s] 35%|###4      | 9/26 [00:00<00:01, 15.65it/s] 42%|####2     | 11/26 [00:00<00:00, 15.98it/s] 50%|#####     | 13/26 [00:00<00:00, 16.20it/s] 58%|#####7    | 15/26 [00:00<00:00, 15.91it/s] 65%|######5   | 17/26 [00:01<00:00, 16.07it/s] 73%|#######3  | 19/26 [00:01<00:00, 16.21it/s] 81%|########  | 21/26 [00:01<00:00, 16.33it/s] 88%|########8 | 23/26 [00:01<00:00, 16.59it/s] 96%|#########6| 25/26 [00:01<00:00, 16.75it/s]100%|##########| 26/26 [00:01<00:00, 15.37it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 754 400
penalty weights 10000.0
args.step pgd_anneal_iters 754 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 755 400
penalty weights 10000.0
args.step pgd_anneal_iters 755 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 756 400
penalty weights 10000.0
args.step pgd_anneal_iters 756 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 757 400
penalty weights 10000.0
args.step pgd_anneal_iters 757 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 758 400
penalty weights 10000.0
args.step pgd_anneal_iters 758 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 759 400
penalty weights 10000.0
args.step pgd_anneal_iters 759 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 760 400
penalty weights 10000.0
args.step pgd_anneal_iters 760 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 761 400
penalty weights 10000.0
args.step pgd_anneal_iters 761 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 762 400
penalty weights 10000.0
args.step pgd_anneal_iters 762 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 763 400
penalty weights 10000.0
args.step pgd_anneal_iters 763 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 764 400
penalty weights 10000.0
args.step pgd_anneal_iters 764 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 765 400
penalty weights 10000.0
args.step pgd_anneal_iters 765 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 766 400
penalty weights 10000.0
args.step pgd_anneal_iters 766 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 767 400
penalty weights 10000.0
args.step pgd_anneal_iters 767 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 768 400
penalty weights 10000.0
args.step pgd_anneal_iters 768 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 769 400
penalty weights 10000.0
args.step pgd_anneal_iters 769 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 770 400
penalty weights 10000.0
args.step pgd_anneal_iters 770 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 771 400
penalty weights 10000.0
args.step pgd_anneal_iters 771 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 772 400
penalty weights 10000.0
args.step pgd_anneal_iters 772 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 773 400
penalty weights 10000.0
args.step pgd_anneal_iters 773 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 774 400
penalty weights 10000.0
args.step pgd_anneal_iters 774 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 775 400
penalty weights 10000.0
args.step pgd_anneal_iters 775 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 776 400
penalty weights 10000.0
args.step pgd_anneal_iters 776 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 777 400
penalty weights 10000.0
args.step pgd_anneal_iters 777 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 778 400
penalty weights 10000.0
args.step pgd_anneal_iters 778 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 779 400
penalty weights 10000.0
args.step pgd_anneal_iters 779 600
dim_v 512
retunring when rho == dim_v - 1
Epoch: [29][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.20 (  0.20)	train_acc   0.50 (  0.51)	train_minacc   0.48 (  0.50)	train_majacc   0.50 (  0.51)	train_corr   0.00 (  0.00)	l1 11.0043 (11.0057)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:01, 18.98it/s] 35%|###4      | 9/26 [00:00<00:00, 36.20it/s]                                               35%|###4      | 9/26 [00:00<00:00, 36.20it/s] 58%|#####7    | 15/26 [00:00<00:00, 40.55it/s]                                                58%|#####7    | 15/26 [00:00<00:00, 40.55it/s] 81%|########  | 21/26 [00:00<00:00, 46.48it/s]100%|##########| 26/26 [00:00<00:00, 39.80it/s]
Test: [   0/  26]	Loss 0.692 (0.692)	test_acc   0.54 (  0.54)	test_minacc   0.45 (  0.45)	test_majacc   0.55 (  0.55)	Loss_d 0.692 (0.692)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.45 (  0.45)	test_majacc_d   0.55 (  0.55)	test_corr_d   0.11 (  0.11)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.52 (  0.51)	test_minacc   0.49 (  0.50)	test_majacc   0.52 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.51)	test_minacc_d   0.49 (  0.50)	test_majacc_d   0.52 (  0.51)	test_corr_d  -0.03 (  0.01)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.52 (  0.51)	test_minacc   0.63 (  0.51)	test_majacc   0.50 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.51)	test_minacc_d   0.63 (  0.51)	test_majacc_d   0.50 (  0.51)	test_corr_d  -0.05 (  0.01)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.50 (  0.51)	test_minacc   0.48 (  0.50)	test_majacc   0.50 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.51)	test_minacc_d   0.48 (  0.50)	test_majacc_d   0.50 (  0.51)	test_corr_d   0.04 (  0.01)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 65.69it/s]
Test: [  0/  1]	Loss 0.692 (0.692)	test_acc   0.51 (  0.51)	test_minacc   0.50 (  0.50)	test_majacc   0.53 (  0.53)	Loss_d 0.692 (0.692)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.53 (  0.53)	test_corr_d  -0.25 ( -0.25)
Test: [  1/  1]	Loss 0.692 (0.692)	test_acc   0.51 (  0.51)	test_minacc   0.50 (  0.50)	test_majacc   0.53 (  0.53)	Loss_d 0.692 (0.692)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.53 (  0.53)	test_corr_d  -0.25 ( -0.25)
Overall Timing[ 29/  1]	epoch_time 0.0480 (0.0409)	validation_time 0.0004 (0.0006)	train_time 0.0476 (0.0399)
record: (train_acc, test_acc) (0.6467000194191933, 0.6680000424385071)
last accs (train_acc, test_acc) (0.5058000089526177, 0.5060000419616699)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.71it/s] 12%|#1        | 3/26 [00:00<00:01, 11.87it/s] 19%|#9        | 5/26 [00:00<00:01, 13.83it/s] 27%|##6       | 7/26 [00:00<00:01, 14.88it/s] 35%|###4      | 9/26 [00:00<00:01, 15.59it/s] 42%|####2     | 11/26 [00:00<00:00, 16.03it/s] 50%|#####     | 13/26 [00:00<00:00, 16.18it/s] 58%|#####7    | 15/26 [00:00<00:00, 16.32it/s] 65%|######5   | 17/26 [00:01<00:00, 16.49it/s] 73%|#######3  | 19/26 [00:01<00:00, 16.67it/s] 81%|########  | 21/26 [00:01<00:00, 16.72it/s] 88%|########8 | 23/26 [00:01<00:00, 16.71it/s] 96%|#########6| 25/26 [00:01<00:00, 16.58it/s]100%|##########| 26/26 [00:01<00:00, 15.20it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 780 400
penalty weights 10000.0
args.step pgd_anneal_iters 780 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 781 400
penalty weights 10000.0
args.step pgd_anneal_iters 781 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 782 400
penalty weights 10000.0
args.step pgd_anneal_iters 782 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 783 400
penalty weights 10000.0
args.step pgd_anneal_iters 783 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 784 400
penalty weights 10000.0
args.step pgd_anneal_iters 784 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 785 400
penalty weights 10000.0
args.step pgd_anneal_iters 785 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 786 400
penalty weights 10000.0
args.step pgd_anneal_iters 786 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 787 400
penalty weights 10000.0
args.step pgd_anneal_iters 787 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 788 400
penalty weights 10000.0
args.step pgd_anneal_iters 788 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 789 400
penalty weights 10000.0
args.step pgd_anneal_iters 789 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 790 400
penalty weights 10000.0
args.step pgd_anneal_iters 790 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 791 400
penalty weights 10000.0
args.step pgd_anneal_iters 791 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 792 400
penalty weights 10000.0
args.step pgd_anneal_iters 792 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 793 400
penalty weights 10000.0
args.step pgd_anneal_iters 793 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 794 400
penalty weights 10000.0
args.step pgd_anneal_iters 794 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 795 400
penalty weights 10000.0
args.step pgd_anneal_iters 795 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 796 400
penalty weights 10000.0
args.step pgd_anneal_iters 796 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 797 400
penalty weights 10000.0
args.step pgd_anneal_iters 797 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 798 400
penalty weights 10000.0
args.step pgd_anneal_iters 798 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 799 400
penalty weights 10000.0
args.step pgd_anneal_iters 799 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 800 400
penalty weights 10000.0
args.step pgd_anneal_iters 800 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 801 400
penalty weights 10000.0
args.step pgd_anneal_iters 801 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 802 400
penalty weights 10000.0
args.step pgd_anneal_iters 802 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 803 400
penalty weights 10000.0
args.step pgd_anneal_iters 803 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 804 400
penalty weights 10000.0
args.step pgd_anneal_iters 804 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 805 400
penalty weights 10000.0
args.step pgd_anneal_iters 805 600
dim_v 512
retunring when rho == dim_v - 1
Epoch: [30][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.20 (  0.20)	train_acc   0.50 (  0.51)	train_minacc   0.48 (  0.51)	train_majacc   0.50 (  0.51)	train_corr   0.00 (  0.00)	l1 11.0017 (11.0029)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.72it/s] 27%|##6       | 7/26 [00:00<00:00, 29.36it/s]                                               27%|##6       | 7/26 [00:00<00:00, 29.36it/s] 50%|#####     | 13/26 [00:00<00:00, 38.72it/s] 73%|#######3  | 19/26 [00:00<00:00, 44.23it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 44.23it/s] 96%|#########6| 25/26 [00:00<00:00, 46.76it/s]100%|##########| 26/26 [00:00<00:00, 37.47it/s]
Test: [   0/  26]	Loss 0.692 (0.692)	test_acc   0.54 (  0.54)	test_minacc   0.45 (  0.45)	test_majacc   0.55 (  0.55)	Loss_d 0.692 (0.692)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.45 (  0.45)	test_majacc_d   0.55 (  0.55)	test_corr_d   0.10 (  0.10)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.51 (  0.51)	test_minacc   0.47 (  0.50)	test_majacc   0.52 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.47 (  0.50)	test_majacc_d   0.52 (  0.51)	test_corr_d  -0.04 (  0.00)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.52 (  0.51)	test_minacc   0.63 (  0.51)	test_majacc   0.50 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.51)	test_minacc_d   0.63 (  0.51)	test_majacc_d   0.50 (  0.51)	test_corr_d  -0.06 (  0.00)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.50 (  0.51)	test_minacc   0.48 (  0.51)	test_majacc   0.50 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.51)	test_minacc_d   0.48 (  0.51)	test_majacc_d   0.50 (  0.51)	test_corr_d   0.03 (  0.00)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 67.28it/s]
Test: [  0/  1]	Loss 0.692 (0.692)	test_acc   0.51 (  0.51)	test_minacc   0.51 (  0.51)	test_majacc   0.53 (  0.53)	Loss_d 0.692 (0.692)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.53 (  0.53)	test_corr_d  -0.26 ( -0.26)
Test: [  1/  1]	Loss 0.692 (0.692)	test_acc   0.51 (  0.51)	test_minacc   0.51 (  0.51)	test_majacc   0.53 (  0.53)	Loss_d 0.692 (0.692)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.53 (  0.53)	test_corr_d  -0.26 ( -0.26)
Overall Timing[ 30/  1]	epoch_time 0.0481 (0.0411)	validation_time 0.0004 (0.0006)	train_time 0.0477 (0.0402)
record: (train_acc, test_acc) (0.6467000194191933, 0.6680000424385071)
last accs (train_acc, test_acc) (0.506100012421608, 0.5090000033378601)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:05,  4.80it/s] 12%|#1        | 3/26 [00:00<00:02,  9.78it/s] 19%|#9        | 5/26 [00:00<00:01, 12.45it/s] 27%|##6       | 7/26 [00:00<00:01, 14.19it/s] 35%|###4      | 9/26 [00:00<00:01, 15.21it/s] 42%|####2     | 11/26 [00:00<00:00, 15.97it/s] 50%|#####     | 13/26 [00:00<00:00, 16.21it/s] 58%|#####7    | 15/26 [00:01<00:00, 16.45it/s] 65%|######5   | 17/26 [00:01<00:00, 16.73it/s] 73%|#######3  | 19/26 [00:01<00:00, 16.87it/s] 81%|########  | 21/26 [00:01<00:00, 17.08it/s] 92%|#########2| 24/26 [00:01<00:00, 19.97it/s]100%|##########| 26/26 [00:01<00:00, 16.20it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 806 400
penalty weights 10000.0
args.step pgd_anneal_iters 806 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 807 400
penalty weights 10000.0
args.step pgd_anneal_iters 807 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 808 400
penalty weights 10000.0
args.step pgd_anneal_iters 808 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 809 400
penalty weights 10000.0
args.step pgd_anneal_iters 809 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 810 400
penalty weights 10000.0
args.step pgd_anneal_iters 810 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 811 400
penalty weights 10000.0
args.step pgd_anneal_iters 811 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 812 400
penalty weights 10000.0
args.step pgd_anneal_iters 812 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 813 400
penalty weights 10000.0
args.step pgd_anneal_iters 813 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 814 400
penalty weights 10000.0
args.step pgd_anneal_iters 814 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 815 400
penalty weights 10000.0
args.step pgd_anneal_iters 815 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 816 400
penalty weights 10000.0
args.step pgd_anneal_iters 816 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 817 400
penalty weights 10000.0
args.step pgd_anneal_iters 817 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 818 400
penalty weights 10000.0
args.step pgd_anneal_iters 818 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 819 400
penalty weights 10000.0
args.step pgd_anneal_iters 819 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 820 400
penalty weights 10000.0
args.step pgd_anneal_iters 820 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 821 400
penalty weights 10000.0
args.step pgd_anneal_iters 821 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 822 400
penalty weights 10000.0
args.step pgd_anneal_iters 822 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 823 400
penalty weights 10000.0
args.step pgd_anneal_iters 823 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 824 400
penalty weights 10000.0
args.step pgd_anneal_iters 824 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 825 400
penalty weights 10000.0
args.step pgd_anneal_iters 825 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 826 400
penalty weights 10000.0
args.step pgd_anneal_iters 826 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 827 400
penalty weights 10000.0
args.step pgd_anneal_iters 827 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 828 400
penalty weights 10000.0
args.step pgd_anneal_iters 828 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 829 400
penalty weights 10000.0
args.step pgd_anneal_iters 829 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 830 400
penalty weights 10000.0
args.step pgd_anneal_iters 830 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 831 400
penalty weights 10000.0
args.step pgd_anneal_iters 831 600
dim_v 512
Epoch: [31][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.20 (  0.20)	train_acc   0.50 (  0.51)	train_minacc   0.48 (  0.51)	train_majacc   0.50 (  0.51)	train_corr   0.00 (  0.00)	l1 10.9996 (11.0006)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 17.82it/s] 19%|#9        | 5/26 [00:00<00:00, 24.02it/s]                                               19%|#9        | 5/26 [00:00<00:00, 24.02it/s] 42%|####2     | 11/26 [00:00<00:00, 38.40it/s] 62%|######1   | 16/26 [00:00<00:00, 41.75it/s]                                                62%|######1   | 16/26 [00:00<00:00, 41.75it/s] 85%|########4 | 22/26 [00:00<00:00, 47.29it/s]100%|##########| 26/26 [00:00<00:00, 38.85it/s]
Test: [   0/  26]	Loss 0.692 (0.692)	test_acc   0.54 (  0.54)	test_minacc   0.45 (  0.45)	test_majacc   0.55 (  0.55)	Loss_d 0.692 (0.692)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.45 (  0.45)	test_majacc_d   0.55 (  0.55)	test_corr_d   0.09 (  0.09)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.51 (  0.51)	test_minacc   0.47 (  0.51)	test_majacc   0.52 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.47 (  0.51)	test_majacc_d   0.52 (  0.51)	test_corr_d  -0.05 ( -0.00)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.52 (  0.51)	test_minacc   0.63 (  0.51)	test_majacc   0.50 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.51)	test_minacc_d   0.63 (  0.51)	test_majacc_d   0.50 (  0.51)	test_corr_d  -0.07 ( -0.01)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.50 (  0.51)	test_minacc   0.48 (  0.51)	test_majacc   0.50 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.51)	test_minacc_d   0.48 (  0.51)	test_majacc_d   0.50 (  0.51)	test_corr_d   0.02 ( -0.01)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 65.70it/s]
Test: [  0/  1]	Loss 0.692 (0.692)	test_acc   0.51 (  0.51)	test_minacc   0.51 (  0.51)	test_majacc   0.53 (  0.53)	Loss_d 0.692 (0.692)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.53 (  0.53)	test_corr_d  -0.26 ( -0.26)
Test: [  1/  1]	Loss 0.692 (0.692)	test_acc   0.51 (  0.51)	test_minacc   0.51 (  0.51)	test_majacc   0.53 (  0.53)	Loss_d 0.692 (0.692)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.53 (  0.53)	test_corr_d  -0.26 ( -0.26)
Overall Timing[ 31/  1]	epoch_time 0.0484 (0.0413)	validation_time 0.0004 (0.0006)	train_time 0.0479 (0.0404)
record: (train_acc, test_acc) (0.6467000194191933, 0.6680000424385071)
last accs (train_acc, test_acc) (0.507100007712841, 0.5090000033378601)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.62it/s] 15%|#5        | 4/26 [00:00<00:01, 17.75it/s] 31%|###       | 8/26 [00:00<00:00, 24.40it/s] 46%|####6     | 12/26 [00:00<00:00, 27.91it/s] 62%|######1   | 16/26 [00:00<00:00, 29.96it/s] 77%|#######6  | 20/26 [00:00<00:00, 31.65it/s] 92%|#########2| 24/26 [00:00<00:00, 32.74it/s]100%|##########| 26/26 [00:00<00:00, 27.16it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 832 400
penalty weights 10000.0
args.step pgd_anneal_iters 832 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 833 400
penalty weights 10000.0
args.step pgd_anneal_iters 833 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 834 400
penalty weights 10000.0
args.step pgd_anneal_iters 834 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 835 400
penalty weights 10000.0
args.step pgd_anneal_iters 835 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 836 400
penalty weights 10000.0
args.step pgd_anneal_iters 836 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 837 400
penalty weights 10000.0
args.step pgd_anneal_iters 837 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 838 400
penalty weights 10000.0
args.step pgd_anneal_iters 838 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 839 400
penalty weights 10000.0
args.step pgd_anneal_iters 839 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 840 400
penalty weights 10000.0
args.step pgd_anneal_iters 840 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 841 400
penalty weights 10000.0
args.step pgd_anneal_iters 841 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 842 400
penalty weights 10000.0
args.step pgd_anneal_iters 842 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 843 400
penalty weights 10000.0
args.step pgd_anneal_iters 843 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 844 400
penalty weights 10000.0
args.step pgd_anneal_iters 844 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 845 400
penalty weights 10000.0
args.step pgd_anneal_iters 845 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 846 400
penalty weights 10000.0
args.step pgd_anneal_iters 846 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 847 400
penalty weights 10000.0
args.step pgd_anneal_iters 847 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 848 400
penalty weights 10000.0
args.step pgd_anneal_iters 848 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 849 400
penalty weights 10000.0
args.step pgd_anneal_iters 849 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 850 400
penalty weights 10000.0
args.step pgd_anneal_iters 850 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 851 400
penalty weights 10000.0
args.step pgd_anneal_iters 851 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 852 400
penalty weights 10000.0
args.step pgd_anneal_iters 852 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 853 400
penalty weights 10000.0
args.step pgd_anneal_iters 853 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 854 400
penalty weights 10000.0
args.step pgd_anneal_iters 854 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 855 400
penalty weights 10000.0
args.step pgd_anneal_iters 855 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 856 400
penalty weights 10000.0
args.step pgd_anneal_iters 856 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 857 400
penalty weights 10000.0
args.step pgd_anneal_iters 857 600
dim_v 512
Epoch: [32][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.20 (  0.20)	train_acc   0.50 (  0.51)	train_minacc   0.50 (  0.51)	train_majacc   0.50 (  0.51)	train_corr   0.00 (  0.00)	l1 10.9986 (10.9990)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.96it/s] 27%|##6       | 7/26 [00:00<00:00, 32.32it/s]                                               27%|##6       | 7/26 [00:00<00:00, 32.32it/s] 50%|#####     | 13/26 [00:00<00:00, 40.24it/s] 73%|#######3  | 19/26 [00:00<00:00, 45.29it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 45.29it/s] 96%|#########6| 25/26 [00:00<00:00, 46.20it/s]100%|##########| 26/26 [00:00<00:00, 38.21it/s]
Test: [   0/  26]	Loss 0.692 (0.692)	test_acc   0.54 (  0.54)	test_minacc   0.45 (  0.45)	test_majacc   0.56 (  0.56)	Loss_d 0.692 (0.692)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.45 (  0.45)	test_majacc_d   0.56 (  0.56)	test_corr_d   0.09 (  0.09)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.51 (  0.51)	test_minacc   0.47 (  0.51)	test_majacc   0.52 (  0.52)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.47 (  0.51)	test_majacc_d   0.52 (  0.52)	test_corr_d  -0.05 ( -0.01)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.53 (  0.51)	test_minacc   0.65 (  0.51)	test_majacc   0.50 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.53 (  0.51)	test_minacc_d   0.65 (  0.51)	test_majacc_d   0.50 (  0.51)	test_corr_d  -0.08 ( -0.02)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.50 (  0.51)	test_minacc   0.50 (  0.51)	test_majacc   0.50 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.51)	test_minacc_d   0.50 (  0.51)	test_majacc_d   0.50 (  0.51)	test_corr_d   0.01 ( -0.01)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.98it/s]
Test: [  0/  1]	Loss 0.692 (0.692)	test_acc   0.51 (  0.51)	test_minacc   0.51 (  0.51)	test_majacc   0.54 (  0.54)	Loss_d 0.692 (0.692)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.54 (  0.54)	test_corr_d  -0.26 ( -0.26)
Test: [  1/  1]	Loss 0.692 (0.692)	test_acc   0.51 (  0.51)	test_minacc   0.51 (  0.51)	test_majacc   0.54 (  0.54)	Loss_d 0.692 (0.692)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.54 (  0.54)	test_corr_d  -0.26 ( -0.26)
Overall Timing[ 32/  1]	epoch_time 0.0369 (0.0412)	validation_time 0.0004 (0.0006)	train_time 0.0365 (0.0403)
record: (train_acc, test_acc) (0.6467000194191933, 0.6680000424385071)
last accs (train_acc, test_acc) (0.5082000064849853, 0.5100000500679016)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.29it/s] 19%|#9        | 5/26 [00:00<00:01, 20.92it/s] 35%|###4      | 9/26 [00:00<00:00, 25.89it/s] 50%|#####     | 13/26 [00:00<00:00, 28.30it/s] 65%|######5   | 17/26 [00:00<00:00, 30.24it/s] 81%|########  | 21/26 [00:00<00:00, 31.78it/s] 96%|#########6| 25/26 [00:00<00:00, 32.59it/s]100%|##########| 26/26 [00:00<00:00, 27.35it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 858 400
penalty weights 10000.0
args.step pgd_anneal_iters 858 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 859 400
penalty weights 10000.0
args.step pgd_anneal_iters 859 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 860 400
penalty weights 10000.0
args.step pgd_anneal_iters 860 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 861 400
penalty weights 10000.0
args.step pgd_anneal_iters 861 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 862 400
penalty weights 10000.0
args.step pgd_anneal_iters 862 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 863 400
penalty weights 10000.0
args.step pgd_anneal_iters 863 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 864 400
penalty weights 10000.0
args.step pgd_anneal_iters 864 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 865 400
penalty weights 10000.0
args.step pgd_anneal_iters 865 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 866 400
penalty weights 10000.0
args.step pgd_anneal_iters 866 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 867 400
penalty weights 10000.0
args.step pgd_anneal_iters 867 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 868 400
penalty weights 10000.0
args.step pgd_anneal_iters 868 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 869 400
penalty weights 10000.0
args.step pgd_anneal_iters 869 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 870 400
penalty weights 10000.0
args.step pgd_anneal_iters 870 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 871 400
penalty weights 10000.0
args.step pgd_anneal_iters 871 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 872 400
penalty weights 10000.0
args.step pgd_anneal_iters 872 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 873 400
penalty weights 10000.0
args.step pgd_anneal_iters 873 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 874 400
penalty weights 10000.0
args.step pgd_anneal_iters 874 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 875 400
penalty weights 10000.0
args.step pgd_anneal_iters 875 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 876 400
penalty weights 10000.0
args.step pgd_anneal_iters 876 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 877 400
penalty weights 10000.0
args.step pgd_anneal_iters 877 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 878 400
penalty weights 10000.0
args.step pgd_anneal_iters 878 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 879 400
penalty weights 10000.0
args.step pgd_anneal_iters 879 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 880 400
penalty weights 10000.0
args.step pgd_anneal_iters 880 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 881 400
penalty weights 10000.0
args.step pgd_anneal_iters 881 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 882 400
penalty weights 10000.0
args.step pgd_anneal_iters 882 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 883 400
penalty weights 10000.0
args.step pgd_anneal_iters 883 600
dim_v 512
Epoch: [33][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.20 (  0.20)	train_acc   0.50 (  0.51)	train_minacc   0.50 (  0.51)	train_majacc   0.50 (  0.51)	train_corr   0.00 (  0.00)	l1 10.9986 (10.9986)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.46it/s] 27%|##6       | 7/26 [00:00<00:00, 30.99it/s]                                               27%|##6       | 7/26 [00:00<00:00, 30.99it/s] 50%|#####     | 13/26 [00:00<00:00, 37.25it/s] 73%|#######3  | 19/26 [00:00<00:00, 43.41it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 43.41it/s] 96%|#########6| 25/26 [00:00<00:00, 44.58it/s]100%|##########| 26/26 [00:00<00:00, 36.94it/s]
Test: [   0/  26]	Loss 0.692 (0.692)	test_acc   0.54 (  0.54)	test_minacc   0.45 (  0.45)	test_majacc   0.56 (  0.56)	Loss_d 0.692 (0.692)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.45 (  0.45)	test_majacc_d   0.56 (  0.56)	test_corr_d   0.08 (  0.08)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.51 (  0.51)	test_minacc   0.49 (  0.51)	test_majacc   0.52 (  0.52)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.49 (  0.51)	test_majacc_d   0.52 (  0.52)	test_corr_d  -0.06 ( -0.02)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.53 (  0.51)	test_minacc   0.65 (  0.51)	test_majacc   0.50 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.53 (  0.51)	test_minacc_d   0.65 (  0.51)	test_majacc_d   0.50 (  0.51)	test_corr_d  -0.08 ( -0.02)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.50 (  0.51)	test_minacc   0.50 (  0.51)	test_majacc   0.50 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.51)	test_minacc_d   0.50 (  0.51)	test_majacc_d   0.50 (  0.51)	test_corr_d   0.00 ( -0.02)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 65.10it/s]
Test: [  0/  1]	Loss 0.692 (0.692)	test_acc   0.51 (  0.51)	test_minacc   0.51 (  0.51)	test_majacc   0.54 (  0.54)	Loss_d 0.692 (0.692)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.54 (  0.54)	test_corr_d  -0.26 ( -0.26)
Test: [  1/  1]	Loss 0.692 (0.692)	test_acc   0.51 (  0.51)	test_minacc   0.51 (  0.51)	test_majacc   0.54 (  0.54)	Loss_d 0.692 (0.692)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.54 (  0.54)	test_corr_d  -0.26 ( -0.26)
Overall Timing[ 33/  1]	epoch_time 0.0370 (0.0411)	validation_time 0.0004 (0.0006)	train_time 0.0366 (0.0402)
record: (train_acc, test_acc) (0.6467000194191933, 0.6680000424385071)
last accs (train_acc, test_acc) (0.5088000099360943, 0.5110000371932983)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.08it/s] 19%|#9        | 5/26 [00:00<00:01, 20.66it/s] 35%|###4      | 9/26 [00:00<00:00, 26.92it/s] 50%|#####     | 13/26 [00:00<00:00, 30.17it/s] 65%|######5   | 17/26 [00:00<00:00, 31.41it/s] 81%|########  | 21/26 [00:00<00:00, 32.32it/s] 96%|#########6| 25/26 [00:00<00:00, 32.80it/s]100%|##########| 26/26 [00:00<00:00, 28.13it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 884 400
penalty weights 10000.0
args.step pgd_anneal_iters 884 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 885 400
penalty weights 10000.0
args.step pgd_anneal_iters 885 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 886 400
penalty weights 10000.0
args.step pgd_anneal_iters 886 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 887 400
penalty weights 10000.0
args.step pgd_anneal_iters 887 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 888 400
penalty weights 10000.0
args.step pgd_anneal_iters 888 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 889 400
penalty weights 10000.0
args.step pgd_anneal_iters 889 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 890 400
penalty weights 10000.0
args.step pgd_anneal_iters 890 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 891 400
penalty weights 10000.0
args.step pgd_anneal_iters 891 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 892 400
penalty weights 10000.0
args.step pgd_anneal_iters 892 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 893 400
penalty weights 10000.0
args.step pgd_anneal_iters 893 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 894 400
penalty weights 10000.0
args.step pgd_anneal_iters 894 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 895 400
penalty weights 10000.0
args.step pgd_anneal_iters 895 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 896 400
penalty weights 10000.0
args.step pgd_anneal_iters 896 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 897 400
penalty weights 10000.0
args.step pgd_anneal_iters 897 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 898 400
penalty weights 10000.0
args.step pgd_anneal_iters 898 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 899 400
penalty weights 10000.0
args.step pgd_anneal_iters 899 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 900 400
penalty weights 10000.0
args.step pgd_anneal_iters 900 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 901 400
penalty weights 10000.0
args.step pgd_anneal_iters 901 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 902 400
penalty weights 10000.0
args.step pgd_anneal_iters 902 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 903 400
penalty weights 10000.0
args.step pgd_anneal_iters 903 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 904 400
penalty weights 10000.0
args.step pgd_anneal_iters 904 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 905 400
penalty weights 10000.0
args.step pgd_anneal_iters 905 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 906 400
penalty weights 10000.0
args.step pgd_anneal_iters 906 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 907 400
penalty weights 10000.0
args.step pgd_anneal_iters 907 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 908 400
penalty weights 10000.0
args.step pgd_anneal_iters 908 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 909 400
penalty weights 10000.0
args.step pgd_anneal_iters 909 600
dim_v 512
Epoch: [34][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.20 (  0.20)	train_acc   0.50 (  0.51)	train_minacc   0.50 (  0.51)	train_majacc   0.50 (  0.51)	train_corr   0.00 (  0.00)	l1 10.9993 (10.9990)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.08it/s] 19%|#9        | 5/26 [00:00<00:00, 23.35it/s] 38%|###8      | 10/26 [00:00<00:00, 33.78it/s]                                                38%|###8      | 10/26 [00:00<00:00, 33.78it/s] 58%|#####7    | 15/26 [00:00<00:00, 37.89it/s]                                                58%|#####7    | 15/26 [00:00<00:00, 37.89it/s] 81%|########  | 21/26 [00:00<00:00, 44.92it/s]100%|##########| 26/26 [00:00<00:00, 36.87it/s]
Test: [   0/  26]	Loss 0.692 (0.692)	test_acc   0.54 (  0.54)	test_minacc   0.45 (  0.45)	test_majacc   0.56 (  0.56)	Loss_d 0.692 (0.692)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.45 (  0.45)	test_majacc_d   0.56 (  0.56)	test_corr_d   0.08 (  0.08)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.51 (  0.51)	test_minacc   0.49 (  0.51)	test_majacc   0.52 (  0.52)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.49 (  0.51)	test_majacc_d   0.52 (  0.52)	test_corr_d  -0.06 ( -0.02)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.53 (  0.51)	test_minacc   0.65 (  0.52)	test_majacc   0.50 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.53 (  0.51)	test_minacc_d   0.65 (  0.52)	test_majacc_d   0.50 (  0.51)	test_corr_d  -0.09 ( -0.03)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.50 (  0.51)	test_minacc   0.50 (  0.51)	test_majacc   0.50 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.51)	test_minacc_d   0.50 (  0.51)	test_majacc_d   0.50 (  0.51)	test_corr_d  -0.00 ( -0.03)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.40it/s]
Test: [  0/  1]	Loss 0.692 (0.692)	test_acc   0.51 (  0.51)	test_minacc   0.51 (  0.51)	test_majacc   0.54 (  0.54)	Loss_d 0.692 (0.692)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.54 (  0.54)	test_corr_d  -0.26 ( -0.26)
Test: [  1/  1]	Loss 0.692 (0.692)	test_acc   0.51 (  0.51)	test_minacc   0.51 (  0.51)	test_majacc   0.54 (  0.54)	Loss_d 0.692 (0.692)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.54 (  0.54)	test_corr_d  -0.26 ( -0.26)
Overall Timing[ 34/  1]	epoch_time 0.0373 (0.0410)	validation_time 0.0004 (0.0006)	train_time 0.0368 (0.0401)
record: (train_acc, test_acc) (0.6467000194191933, 0.6680000424385071)
last accs (train_acc, test_acc) (0.509500012755394, 0.5130000114440918)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  6.15it/s] 15%|#5        | 4/26 [00:00<00:01, 17.21it/s] 31%|###       | 8/26 [00:00<00:00, 23.78it/s] 46%|####6     | 12/26 [00:00<00:00, 27.75it/s] 62%|######1   | 16/26 [00:00<00:00, 30.03it/s] 77%|#######6  | 20/26 [00:00<00:00, 24.75it/s] 88%|########8 | 23/26 [00:01<00:00, 21.88it/s]100%|##########| 26/26 [00:01<00:00, 20.14it/s]100%|##########| 26/26 [00:01<00:00, 20.80it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 910 400
penalty weights 10000.0
args.step pgd_anneal_iters 910 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 911 400
penalty weights 10000.0
args.step pgd_anneal_iters 911 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 912 400
penalty weights 10000.0
args.step pgd_anneal_iters 912 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 913 400
penalty weights 10000.0
args.step pgd_anneal_iters 913 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 914 400
penalty weights 10000.0
args.step pgd_anneal_iters 914 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 915 400
penalty weights 10000.0
args.step pgd_anneal_iters 915 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 916 400
penalty weights 10000.0
args.step pgd_anneal_iters 916 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 917 400
penalty weights 10000.0
args.step pgd_anneal_iters 917 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 918 400
penalty weights 10000.0
args.step pgd_anneal_iters 918 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 919 400
penalty weights 10000.0
args.step pgd_anneal_iters 919 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 920 400
penalty weights 10000.0
args.step pgd_anneal_iters 920 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 921 400
penalty weights 10000.0
args.step pgd_anneal_iters 921 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 922 400
penalty weights 10000.0
args.step pgd_anneal_iters 922 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 923 400
penalty weights 10000.0
args.step pgd_anneal_iters 923 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 924 400
penalty weights 10000.0
args.step pgd_anneal_iters 924 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 925 400
penalty weights 10000.0
args.step pgd_anneal_iters 925 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 926 400
penalty weights 10000.0
args.step pgd_anneal_iters 926 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 927 400
penalty weights 10000.0
args.step pgd_anneal_iters 927 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 928 400
penalty weights 10000.0
args.step pgd_anneal_iters 928 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 929 400
penalty weights 10000.0
args.step pgd_anneal_iters 929 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 930 400
penalty weights 10000.0
args.step pgd_anneal_iters 930 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 931 400
penalty weights 10000.0
args.step pgd_anneal_iters 931 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 932 400
penalty weights 10000.0
args.step pgd_anneal_iters 932 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 933 400
penalty weights 10000.0
args.step pgd_anneal_iters 933 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 934 400
penalty weights 10000.0
args.step pgd_anneal_iters 934 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 935 400
penalty weights 10000.0
args.step pgd_anneal_iters 935 600
dim_v 512
retunring when rho == dim_v - 1
Epoch: [35][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.20 (  0.20)	train_acc   0.50 (  0.51)	train_minacc   0.50 (  0.51)	train_majacc   0.50 (  0.51)	train_corr   0.00 (  0.00)	l1 11.0003 (10.9998)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.34it/s] 27%|##6       | 7/26 [00:00<00:00, 33.42it/s]                                               27%|##6       | 7/26 [00:00<00:00, 33.42it/s] 50%|#####     | 13/26 [00:00<00:00, 39.98it/s] 73%|#######3  | 19/26 [00:00<00:00, 46.26it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 46.26it/s] 96%|#########6| 25/26 [00:00<00:00, 46.72it/s]100%|##########| 26/26 [00:00<00:00, 39.07it/s]
Test: [   0/  26]	Loss 0.692 (0.692)	test_acc   0.54 (  0.54)	test_minacc   0.45 (  0.45)	test_majacc   0.56 (  0.56)	Loss_d 0.692 (0.692)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.45 (  0.45)	test_majacc_d   0.56 (  0.56)	test_corr_d   0.07 (  0.07)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.52 (  0.51)	test_minacc   0.49 (  0.51)	test_majacc   0.52 (  0.52)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.51)	test_minacc_d   0.49 (  0.51)	test_majacc_d   0.52 (  0.52)	test_corr_d  -0.07 ( -0.03)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.53 (  0.51)	test_minacc   0.65 (  0.52)	test_majacc   0.51 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.53 (  0.51)	test_minacc_d   0.65 (  0.52)	test_majacc_d   0.51 (  0.51)	test_corr_d  -0.09 ( -0.03)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.50 (  0.51)	test_minacc   0.50 (  0.51)	test_majacc   0.50 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.51)	test_minacc_d   0.50 (  0.51)	test_majacc_d   0.50 (  0.51)	test_corr_d  -0.01 ( -0.03)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.66it/s]
Test: [  0/  1]	Loss 0.692 (0.692)	test_acc   0.52 (  0.52)	test_minacc   0.52 (  0.52)	test_majacc   0.54 (  0.54)	Loss_d 0.692 (0.692)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.54 (  0.54)	test_corr_d  -0.26 ( -0.26)
Test: [  1/  1]	Loss 0.692 (0.692)	test_acc   0.52 (  0.52)	test_minacc   0.52 (  0.52)	test_majacc   0.54 (  0.54)	Loss_d 0.692 (0.692)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.54 (  0.54)	test_corr_d  -0.26 ( -0.26)
Overall Timing[ 35/  1]	epoch_time 0.0406 (0.0409)	validation_time 0.0004 (0.0006)	train_time 0.0401 (0.0401)
record: (train_acc, test_acc) (0.6467000194191933, 0.6680000424385071)
last accs (train_acc, test_acc) (0.5105000121593475, 0.5200000405311584)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.58it/s] 12%|#1        | 3/26 [00:00<00:02, 11.17it/s] 19%|#9        | 5/26 [00:00<00:01, 13.25it/s] 27%|##6       | 7/26 [00:00<00:01, 14.52it/s] 35%|###4      | 9/26 [00:00<00:01, 15.33it/s] 42%|####2     | 11/26 [00:00<00:00, 15.97it/s] 50%|#####     | 13/26 [00:00<00:00, 16.41it/s] 58%|#####7    | 15/26 [00:00<00:00, 16.65it/s] 65%|######5   | 17/26 [00:01<00:00, 16.72it/s] 73%|#######3  | 19/26 [00:01<00:00, 16.78it/s] 81%|########  | 21/26 [00:01<00:00, 16.78it/s] 88%|########8 | 23/26 [00:01<00:00, 16.81it/s] 96%|#########6| 25/26 [00:01<00:00, 16.88it/s]100%|##########| 26/26 [00:01<00:00, 15.29it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 936 400
penalty weights 10000.0
args.step pgd_anneal_iters 936 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 937 400
penalty weights 10000.0
args.step pgd_anneal_iters 937 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 938 400
penalty weights 10000.0
args.step pgd_anneal_iters 938 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 939 400
penalty weights 10000.0
args.step pgd_anneal_iters 939 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 940 400
penalty weights 10000.0
args.step pgd_anneal_iters 940 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 941 400
penalty weights 10000.0
args.step pgd_anneal_iters 941 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 942 400
penalty weights 10000.0
args.step pgd_anneal_iters 942 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 943 400
penalty weights 10000.0
args.step pgd_anneal_iters 943 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 944 400
penalty weights 10000.0
args.step pgd_anneal_iters 944 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 945 400
penalty weights 10000.0
args.step pgd_anneal_iters 945 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 946 400
penalty weights 10000.0
args.step pgd_anneal_iters 946 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 947 400
penalty weights 10000.0
args.step pgd_anneal_iters 947 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 948 400
penalty weights 10000.0
args.step pgd_anneal_iters 948 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 949 400
penalty weights 10000.0
args.step pgd_anneal_iters 949 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 950 400
penalty weights 10000.0
args.step pgd_anneal_iters 950 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 951 400
penalty weights 10000.0
args.step pgd_anneal_iters 951 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 952 400
penalty weights 10000.0
args.step pgd_anneal_iters 952 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 953 400
penalty weights 10000.0
args.step pgd_anneal_iters 953 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 954 400
penalty weights 10000.0
args.step pgd_anneal_iters 954 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 955 400
penalty weights 10000.0
args.step pgd_anneal_iters 955 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 956 400
penalty weights 10000.0
args.step pgd_anneal_iters 956 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 957 400
penalty weights 10000.0
args.step pgd_anneal_iters 957 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 958 400
penalty weights 10000.0
args.step pgd_anneal_iters 958 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 959 400
penalty weights 10000.0
args.step pgd_anneal_iters 959 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 960 400
penalty weights 10000.0
args.step pgd_anneal_iters 960 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 961 400
penalty weights 10000.0
args.step pgd_anneal_iters 961 600
dim_v 512
retunring when rho == dim_v - 1
Epoch: [36][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.20 (  0.20)	train_acc   0.50 (  0.51)	train_minacc   0.50 (  0.51)	train_majacc   0.50 (  0.51)	train_corr   0.00 (  0.00)	l1 11.0016 (11.0010)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.60it/s] 27%|##6       | 7/26 [00:00<00:00, 33.04it/s]                                               27%|##6       | 7/26 [00:00<00:00, 33.04it/s] 50%|#####     | 13/26 [00:00<00:00, 40.83it/s] 73%|#######3  | 19/26 [00:00<00:00, 46.27it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 46.27it/s] 96%|#########6| 25/26 [00:00<00:00, 47.65it/s]100%|##########| 26/26 [00:00<00:00, 39.63it/s]
Test: [   0/  26]	Loss 0.692 (0.692)	test_acc   0.55 (  0.55)	test_minacc   0.45 (  0.45)	test_majacc   0.56 (  0.56)	Loss_d 0.692 (0.692)	test_acc_d   0.55 (  0.55)	test_minacc_d   0.45 (  0.45)	test_majacc_d   0.56 (  0.56)	test_corr_d   0.07 (  0.07)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.52 (  0.52)	test_minacc   0.49 (  0.51)	test_majacc   0.52 (  0.52)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.49 (  0.51)	test_majacc_d   0.52 (  0.52)	test_corr_d  -0.07 ( -0.03)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.53 (  0.51)	test_minacc   0.65 (  0.52)	test_majacc   0.51 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.53 (  0.51)	test_minacc_d   0.65 (  0.52)	test_majacc_d   0.51 (  0.51)	test_corr_d  -0.10 ( -0.04)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.50 (  0.51)	test_minacc   0.50 (  0.51)	test_majacc   0.50 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.51)	test_minacc_d   0.50 (  0.51)	test_majacc_d   0.50 (  0.51)	test_corr_d  -0.01 ( -0.03)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 67.12it/s]
Test: [  0/  1]	Loss 0.692 (0.692)	test_acc   0.52 (  0.52)	test_minacc   0.52 (  0.52)	test_majacc   0.54 (  0.54)	Loss_d 0.692 (0.692)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.54 (  0.54)	test_corr_d  -0.26 ( -0.26)
Test: [  1/  1]	Loss 0.692 (0.692)	test_acc   0.52 (  0.52)	test_minacc   0.52 (  0.52)	test_majacc   0.54 (  0.54)	Loss_d 0.692 (0.692)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.54 (  0.54)	test_corr_d  -0.26 ( -0.26)
Overall Timing[ 36/  1]	epoch_time 0.0504 (0.0412)	validation_time 0.0003 (0.0006)	train_time 0.0500 (0.0404)
record: (train_acc, test_acc) (0.6467000194191933, 0.6680000424385071)
last accs (train_acc, test_acc) (0.5121000087857246, 0.5230000019073486)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.12it/s] 12%|#1        | 3/26 [00:00<00:01, 12.04it/s] 19%|#9        | 5/26 [00:00<00:01, 14.21it/s] 27%|##6       | 7/26 [00:00<00:01, 15.26it/s] 35%|###4      | 9/26 [00:00<00:01, 15.91it/s] 42%|####2     | 11/26 [00:00<00:00, 16.35it/s] 50%|#####     | 13/26 [00:00<00:00, 16.65it/s] 58%|#####7    | 15/26 [00:00<00:00, 16.80it/s] 65%|######5   | 17/26 [00:01<00:00, 16.98it/s] 73%|#######3  | 19/26 [00:01<00:00, 17.06it/s] 81%|########  | 21/26 [00:01<00:00, 16.95it/s] 88%|########8 | 23/26 [00:01<00:00, 16.88it/s] 96%|#########6| 25/26 [00:01<00:00, 16.91it/s]100%|##########| 26/26 [00:01<00:00, 15.57it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 962 400
penalty weights 10000.0
args.step pgd_anneal_iters 962 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 963 400
penalty weights 10000.0
args.step pgd_anneal_iters 963 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 964 400
penalty weights 10000.0
args.step pgd_anneal_iters 964 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 965 400
penalty weights 10000.0
args.step pgd_anneal_iters 965 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 966 400
penalty weights 10000.0
args.step pgd_anneal_iters 966 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 967 400
penalty weights 10000.0
args.step pgd_anneal_iters 967 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 968 400
penalty weights 10000.0
args.step pgd_anneal_iters 968 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 969 400
penalty weights 10000.0
args.step pgd_anneal_iters 969 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 970 400
penalty weights 10000.0
args.step pgd_anneal_iters 970 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 971 400
penalty weights 10000.0
args.step pgd_anneal_iters 971 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 972 400
penalty weights 10000.0
args.step pgd_anneal_iters 972 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 973 400
penalty weights 10000.0
args.step pgd_anneal_iters 973 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 974 400
penalty weights 10000.0
args.step pgd_anneal_iters 974 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 975 400
penalty weights 10000.0
args.step pgd_anneal_iters 975 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 976 400
penalty weights 10000.0
args.step pgd_anneal_iters 976 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 977 400
penalty weights 10000.0
args.step pgd_anneal_iters 977 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 978 400
penalty weights 10000.0
args.step pgd_anneal_iters 978 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 979 400
penalty weights 10000.0
args.step pgd_anneal_iters 979 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 980 400
penalty weights 10000.0
args.step pgd_anneal_iters 980 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 981 400
penalty weights 10000.0
args.step pgd_anneal_iters 981 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 982 400
penalty weights 10000.0
args.step pgd_anneal_iters 982 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 983 400
penalty weights 10000.0
args.step pgd_anneal_iters 983 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 984 400
penalty weights 10000.0
args.step pgd_anneal_iters 984 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 985 400
penalty weights 10000.0
args.step pgd_anneal_iters 985 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 986 400
penalty weights 10000.0
args.step pgd_anneal_iters 986 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 987 400
penalty weights 10000.0
args.step pgd_anneal_iters 987 600
dim_v 512
retunring when rho == dim_v - 1
Epoch: [37][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.20 (  0.20)	train_acc   0.51 (  0.51)	train_minacc   0.52 (  0.51)	train_majacc   0.50 (  0.51)	train_corr   0.00 (  0.00)	l1 11.0033 (11.0025)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.67it/s] 27%|##6       | 7/26 [00:00<00:00, 32.57it/s]                                               27%|##6       | 7/26 [00:00<00:00, 32.57it/s] 50%|#####     | 13/26 [00:00<00:00, 39.39it/s] 73%|#######3  | 19/26 [00:00<00:00, 45.49it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 45.49it/s] 96%|#########6| 25/26 [00:00<00:00, 46.05it/s]100%|##########| 26/26 [00:00<00:00, 39.01it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.55 (  0.55)	test_minacc   0.45 (  0.45)	test_majacc   0.56 (  0.56)	Loss_d 0.693 (0.693)	test_acc_d   0.55 (  0.55)	test_minacc_d   0.45 (  0.45)	test_majacc_d   0.56 (  0.56)	test_corr_d   0.07 (  0.07)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.52 (  0.52)	test_minacc   0.51 (  0.51)	test_majacc   0.52 (  0.52)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.52 (  0.52)	test_corr_d  -0.07 ( -0.04)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.54 (  0.52)	test_minacc   0.65 (  0.52)	test_majacc   0.52 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.54 (  0.52)	test_minacc_d   0.65 (  0.52)	test_majacc_d   0.52 (  0.51)	test_corr_d  -0.10 ( -0.04)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.51 (  0.51)	test_minacc   0.52 (  0.51)	test_majacc   0.50 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.52 (  0.51)	test_majacc_d   0.50 (  0.51)	test_corr_d  -0.02 ( -0.04)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.76it/s]
Test: [  0/  1]	Loss 0.692 (0.692)	test_acc   0.53 (  0.53)	test_minacc   0.52 (  0.52)	test_majacc   0.54 (  0.54)	Loss_d 0.692 (0.692)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.54 (  0.54)	test_corr_d  -0.26 ( -0.26)
Test: [  1/  1]	Loss 0.692 (0.692)	test_acc   0.53 (  0.53)	test_minacc   0.52 (  0.52)	test_majacc   0.54 (  0.54)	Loss_d 0.692 (0.692)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.54 (  0.54)	test_corr_d  -0.26 ( -0.26)
Overall Timing[ 37/  1]	epoch_time 0.0499 (0.0414)	validation_time 0.0004 (0.0006)	train_time 0.0495 (0.0406)
record: (train_acc, test_acc) (0.6467000194191933, 0.6680000424385071)
last accs (train_acc, test_acc) (0.5138000112175941, 0.5250000357627869)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:05,  4.76it/s] 12%|#1        | 3/26 [00:00<00:02, 10.06it/s] 19%|#9        | 5/26 [00:00<00:01, 12.66it/s] 27%|##6       | 7/26 [00:00<00:01, 14.11it/s] 35%|###4      | 9/26 [00:00<00:01, 15.01it/s] 42%|####2     | 11/26 [00:00<00:00, 15.54it/s] 50%|#####     | 13/26 [00:00<00:00, 15.97it/s] 58%|#####7    | 15/26 [00:01<00:00, 16.28it/s] 65%|######5   | 17/26 [00:01<00:00, 16.47it/s] 73%|#######3  | 19/26 [00:01<00:00, 16.70it/s] 81%|########  | 21/26 [00:01<00:00, 16.81it/s] 88%|########8 | 23/26 [00:01<00:00, 16.87it/s] 96%|#########6| 25/26 [00:01<00:00, 16.86it/s]100%|##########| 26/26 [00:01<00:00, 14.83it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 988 400
penalty weights 10000.0
args.step pgd_anneal_iters 988 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 989 400
penalty weights 10000.0
args.step pgd_anneal_iters 989 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 990 400
penalty weights 10000.0
args.step pgd_anneal_iters 990 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 991 400
penalty weights 10000.0
args.step pgd_anneal_iters 991 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 992 400
penalty weights 10000.0
args.step pgd_anneal_iters 992 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 993 400
penalty weights 10000.0
args.step pgd_anneal_iters 993 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 994 400
penalty weights 10000.0
args.step pgd_anneal_iters 994 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 995 400
penalty weights 10000.0
args.step pgd_anneal_iters 995 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 996 400
penalty weights 10000.0
args.step pgd_anneal_iters 996 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 997 400
penalty weights 10000.0
args.step pgd_anneal_iters 997 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 998 400
penalty weights 10000.0
args.step pgd_anneal_iters 998 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 999 400
penalty weights 10000.0
args.step pgd_anneal_iters 999 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1000 400
penalty weights 10000.0
args.step pgd_anneal_iters 1000 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1001 400
penalty weights 10000.0
args.step pgd_anneal_iters 1001 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1002 400
penalty weights 10000.0
args.step pgd_anneal_iters 1002 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1003 400
penalty weights 10000.0
args.step pgd_anneal_iters 1003 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1004 400
penalty weights 10000.0
args.step pgd_anneal_iters 1004 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1005 400
penalty weights 10000.0
args.step pgd_anneal_iters 1005 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1006 400
penalty weights 10000.0
args.step pgd_anneal_iters 1006 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1007 400
penalty weights 10000.0
args.step pgd_anneal_iters 1007 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1008 400
penalty weights 10000.0
args.step pgd_anneal_iters 1008 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1009 400
penalty weights 10000.0
args.step pgd_anneal_iters 1009 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1010 400
penalty weights 10000.0
args.step pgd_anneal_iters 1010 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1011 400
penalty weights 10000.0
args.step pgd_anneal_iters 1011 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1012 400
penalty weights 10000.0
args.step pgd_anneal_iters 1012 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1013 400
penalty weights 10000.0
args.step pgd_anneal_iters 1013 600
dim_v 512
retunring when rho == dim_v - 1
Epoch: [38][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.20 (  0.20)	train_acc   0.52 (  0.52)	train_minacc   0.52 (  0.51)	train_majacc   0.52 (  0.51)	train_corr   0.00 (  0.00)	l1 11.0050 (11.0042)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:05,  4.93it/s] 27%|##6       | 7/26 [00:00<00:00, 27.18it/s]                                               27%|##6       | 7/26 [00:00<00:00, 27.18it/s] 50%|#####     | 13/26 [00:00<00:00, 36.19it/s] 73%|#######3  | 19/26 [00:00<00:00, 43.53it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 43.53it/s] 96%|#########6| 25/26 [00:00<00:00, 44.67it/s]100%|##########| 26/26 [00:00<00:00, 35.62it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.55 (  0.55)	test_minacc   0.45 (  0.45)	test_majacc   0.56 (  0.56)	Loss_d 0.693 (0.693)	test_acc_d   0.55 (  0.55)	test_minacc_d   0.45 (  0.45)	test_majacc_d   0.56 (  0.56)	test_corr_d   0.07 (  0.07)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.52 (  0.52)	test_minacc   0.51 (  0.51)	test_majacc   0.52 (  0.52)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.52 (  0.52)	test_corr_d  -0.07 ( -0.04)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.54 (  0.52)	test_minacc   0.66 (  0.52)	test_majacc   0.52 (  0.52)	Loss_d 0.693 (0.693)	test_acc_d   0.54 (  0.52)	test_minacc_d   0.66 (  0.52)	test_majacc_d   0.52 (  0.52)	test_corr_d  -0.10 ( -0.04)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.52 (  0.52)	test_minacc   0.52 (  0.52)	test_majacc   0.52 (  0.52)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.52 (  0.52)	test_corr_d  -0.02 ( -0.04)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.09it/s]
Test: [  0/  1]	Loss 0.692 (0.692)	test_acc   0.53 (  0.53)	test_minacc   0.53 (  0.53)	test_majacc   0.55 (  0.55)	Loss_d 0.692 (0.692)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.55 (  0.55)	test_corr_d  -0.26 ( -0.26)
Test: [  1/  1]	Loss 0.692 (0.692)	test_acc   0.53 (  0.53)	test_minacc   0.53 (  0.53)	test_majacc   0.55 (  0.55)	Loss_d 0.692 (0.692)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.55 (  0.55)	test_corr_d  -0.26 ( -0.26)
Overall Timing[ 38/  1]	epoch_time 0.0500 (0.0416)	validation_time 0.0004 (0.0006)	train_time 0.0495 (0.0408)
record: (train_acc, test_acc) (0.6467000194191933, 0.6680000424385071)
last accs (train_acc, test_acc) (0.5162000128626824, 0.527999997138977)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.33it/s] 12%|#1        | 3/26 [00:00<00:02, 10.45it/s] 19%|#9        | 5/26 [00:00<00:01, 12.82it/s] 27%|##6       | 7/26 [00:00<00:01, 14.18it/s] 35%|###4      | 9/26 [00:00<00:01, 15.18it/s] 42%|####2     | 11/26 [00:00<00:00, 15.84it/s] 50%|#####     | 13/26 [00:00<00:00, 16.30it/s] 58%|#####7    | 15/26 [00:01<00:00, 16.29it/s] 65%|######5   | 17/26 [00:01<00:00, 16.18it/s] 73%|#######3  | 19/26 [00:01<00:00, 16.32it/s] 81%|########  | 21/26 [00:01<00:00, 16.31it/s] 88%|########8 | 23/26 [00:01<00:00, 16.38it/s] 96%|#########6| 25/26 [00:01<00:00, 16.44it/s]100%|##########| 26/26 [00:01<00:00, 14.90it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1014 400
penalty weights 10000.0
args.step pgd_anneal_iters 1014 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1015 400
penalty weights 10000.0
args.step pgd_anneal_iters 1015 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1016 400
penalty weights 10000.0
args.step pgd_anneal_iters 1016 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1017 400
penalty weights 10000.0
args.step pgd_anneal_iters 1017 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1018 400
penalty weights 10000.0
args.step pgd_anneal_iters 1018 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1019 400
penalty weights 10000.0
args.step pgd_anneal_iters 1019 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1020 400
penalty weights 10000.0
args.step pgd_anneal_iters 1020 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1021 400
penalty weights 10000.0
args.step pgd_anneal_iters 1021 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1022 400
penalty weights 10000.0
args.step pgd_anneal_iters 1022 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1023 400
penalty weights 10000.0
args.step pgd_anneal_iters 1023 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1024 400
penalty weights 10000.0
args.step pgd_anneal_iters 1024 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1025 400
penalty weights 10000.0
args.step pgd_anneal_iters 1025 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1026 400
penalty weights 10000.0
args.step pgd_anneal_iters 1026 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1027 400
penalty weights 10000.0
args.step pgd_anneal_iters 1027 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1028 400
penalty weights 10000.0
args.step pgd_anneal_iters 1028 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1029 400
penalty weights 10000.0
args.step pgd_anneal_iters 1029 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1030 400
penalty weights 10000.0
args.step pgd_anneal_iters 1030 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1031 400
penalty weights 10000.0
args.step pgd_anneal_iters 1031 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1032 400
penalty weights 10000.0
args.step pgd_anneal_iters 1032 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1033 400
penalty weights 10000.0
args.step pgd_anneal_iters 1033 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1034 400
penalty weights 10000.0
args.step pgd_anneal_iters 1034 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1035 400
penalty weights 10000.0
args.step pgd_anneal_iters 1035 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1036 400
penalty weights 10000.0
args.step pgd_anneal_iters 1036 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1037 400
penalty weights 10000.0
args.step pgd_anneal_iters 1037 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1038 400
penalty weights 10000.0
args.step pgd_anneal_iters 1038 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1039 400
penalty weights 10000.0
args.step pgd_anneal_iters 1039 600
dim_v 512
retunring when rho == dim_v - 1
Epoch: [39][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.20 (  0.20)	train_acc   0.52 (  0.52)	train_minacc   0.52 (  0.51)	train_majacc   0.51 (  0.52)	train_corr   0.00 (  0.00)	l1 11.0069 (11.0060)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.41it/s] 27%|##6       | 7/26 [00:00<00:00, 34.24it/s]                                               27%|##6       | 7/26 [00:00<00:00, 34.24it/s] 50%|#####     | 13/26 [00:00<00:00, 40.57it/s] 73%|#######3  | 19/26 [00:00<00:00, 47.08it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 47.08it/s] 96%|#########6| 25/26 [00:00<00:00, 47.11it/s]100%|##########| 26/26 [00:00<00:00, 39.48it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.55 (  0.55)	test_minacc   0.45 (  0.45)	test_majacc   0.57 (  0.57)	Loss_d 0.693 (0.693)	test_acc_d   0.55 (  0.55)	test_minacc_d   0.45 (  0.45)	test_majacc_d   0.57 (  0.57)	test_corr_d   0.07 (  0.07)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.52 (  0.52)	test_minacc   0.51 (  0.51)	test_majacc   0.52 (  0.53)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.52 (  0.53)	test_corr_d  -0.08 ( -0.04)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.54 (  0.52)	test_minacc   0.65 (  0.52)	test_majacc   0.52 (  0.52)	Loss_d 0.693 (0.693)	test_acc_d   0.54 (  0.52)	test_minacc_d   0.65 (  0.52)	test_majacc_d   0.52 (  0.52)	test_corr_d  -0.10 ( -0.05)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.52 (  0.52)	test_minacc   0.52 (  0.51)	test_majacc   0.51 (  0.52)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.52 (  0.51)	test_majacc_d   0.51 (  0.52)	test_corr_d  -0.02 ( -0.04)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.84it/s]
Test: [  0/  1]	Loss 0.692 (0.692)	test_acc   0.53 (  0.53)	test_minacc   0.53 (  0.53)	test_majacc   0.53 (  0.53)	Loss_d 0.692 (0.692)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.53 (  0.53)	test_corr_d  -0.26 ( -0.26)
Test: [  1/  1]	Loss 0.692 (0.692)	test_acc   0.53 (  0.53)	test_minacc   0.53 (  0.53)	test_majacc   0.53 (  0.53)	Loss_d 0.692 (0.692)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.53 (  0.53)	test_corr_d  -0.26 ( -0.26)
Overall Timing[ 39/  1]	epoch_time 0.0500 (0.0419)	validation_time 0.0004 (0.0005)	train_time 0.0496 (0.0411)
record: (train_acc, test_acc) (0.6467000194191933, 0.6680000424385071)
last accs (train_acc, test_acc) (0.5181000206768512, 0.5260000228881836)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.73it/s] 12%|#1        | 3/26 [00:00<00:02, 11.13it/s] 19%|#9        | 5/26 [00:00<00:01, 13.56it/s] 27%|##6       | 7/26 [00:00<00:01, 14.95it/s] 35%|###4      | 9/26 [00:00<00:01, 15.61it/s] 42%|####2     | 11/26 [00:00<00:00, 16.14it/s] 50%|#####     | 13/26 [00:00<00:00, 16.42it/s] 58%|#####7    | 15/26 [00:00<00:00, 16.62it/s] 65%|######5   | 17/26 [00:01<00:00, 16.78it/s] 73%|#######3  | 19/26 [00:01<00:00, 17.00it/s] 81%|########  | 21/26 [00:01<00:00, 17.14it/s] 88%|########8 | 23/26 [00:01<00:00, 17.23it/s] 96%|#########6| 25/26 [00:01<00:00, 17.27it/s]100%|##########| 26/26 [00:01<00:00, 15.47it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1040 400
penalty weights 10000.0
args.step pgd_anneal_iters 1040 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1041 400
penalty weights 10000.0
args.step pgd_anneal_iters 1041 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1042 400
penalty weights 10000.0
args.step pgd_anneal_iters 1042 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1043 400
penalty weights 10000.0
args.step pgd_anneal_iters 1043 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1044 400
penalty weights 10000.0
args.step pgd_anneal_iters 1044 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1045 400
penalty weights 10000.0
args.step pgd_anneal_iters 1045 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1046 400
penalty weights 10000.0
args.step pgd_anneal_iters 1046 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1047 400
penalty weights 10000.0
args.step pgd_anneal_iters 1047 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1048 400
penalty weights 10000.0
args.step pgd_anneal_iters 1048 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1049 400
penalty weights 10000.0
args.step pgd_anneal_iters 1049 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1050 400
penalty weights 10000.0
args.step pgd_anneal_iters 1050 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1051 400
penalty weights 10000.0
args.step pgd_anneal_iters 1051 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1052 400
penalty weights 10000.0
args.step pgd_anneal_iters 1052 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1053 400
penalty weights 10000.0
args.step pgd_anneal_iters 1053 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1054 400
penalty weights 10000.0
args.step pgd_anneal_iters 1054 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1055 400
penalty weights 10000.0
args.step pgd_anneal_iters 1055 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1056 400
penalty weights 10000.0
args.step pgd_anneal_iters 1056 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1057 400
penalty weights 10000.0
args.step pgd_anneal_iters 1057 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1058 400
penalty weights 10000.0
args.step pgd_anneal_iters 1058 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1059 400
penalty weights 10000.0
args.step pgd_anneal_iters 1059 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1060 400
penalty weights 10000.0
args.step pgd_anneal_iters 1060 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1061 400
penalty weights 10000.0
args.step pgd_anneal_iters 1061 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1062 400
penalty weights 10000.0
args.step pgd_anneal_iters 1062 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1063 400
penalty weights 10000.0
args.step pgd_anneal_iters 1063 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1064 400
penalty weights 10000.0
args.step pgd_anneal_iters 1064 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1065 400
penalty weights 10000.0
args.step pgd_anneal_iters 1065 600
dim_v 512
retunring when rho == dim_v - 1
Epoch: [40][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.20 (  0.20)	train_acc   0.51 (  0.52)	train_minacc   0.52 (  0.51)	train_majacc   0.51 (  0.52)	train_corr   0.00 (  0.00)	l1 11.0088 (11.0079)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.70it/s] 27%|##6       | 7/26 [00:00<00:00, 36.44it/s]                                               27%|##6       | 7/26 [00:00<00:00, 36.44it/s] 50%|#####     | 13/26 [00:00<00:00, 40.35it/s] 73%|#######3  | 19/26 [00:00<00:00, 46.16it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 46.16it/s] 96%|#########6| 25/26 [00:00<00:00, 47.04it/s]100%|##########| 26/26 [00:00<00:00, 39.59it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.55 (  0.55)	test_minacc   0.45 (  0.45)	test_majacc   0.57 (  0.57)	Loss_d 0.693 (0.693)	test_acc_d   0.55 (  0.55)	test_minacc_d   0.45 (  0.45)	test_majacc_d   0.57 (  0.57)	test_corr_d   0.06 (  0.06)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.52 (  0.52)	test_minacc   0.51 (  0.51)	test_majacc   0.52 (  0.53)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.52 (  0.53)	test_corr_d  -0.08 ( -0.04)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.54 (  0.52)	test_minacc   0.65 (  0.52)	test_majacc   0.52 (  0.52)	Loss_d 0.693 (0.693)	test_acc_d   0.54 (  0.52)	test_minacc_d   0.65 (  0.52)	test_majacc_d   0.52 (  0.52)	test_corr_d  -0.11 ( -0.05)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.51 (  0.52)	test_minacc   0.52 (  0.51)	test_majacc   0.51 (  0.52)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.52)	test_minacc_d   0.52 (  0.51)	test_majacc_d   0.51 (  0.52)	test_corr_d  -0.03 ( -0.05)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.52it/s]
Test: [  0/  1]	Loss 0.692 (0.692)	test_acc   0.53 (  0.53)	test_minacc   0.53 (  0.53)	test_majacc   0.53 (  0.53)	Loss_d 0.692 (0.692)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.53 (  0.53)	test_corr_d  -0.26 ( -0.26)
Test: [  1/  1]	Loss 0.692 (0.692)	test_acc   0.53 (  0.53)	test_minacc   0.53 (  0.53)	test_majacc   0.53 (  0.53)	Loss_d 0.692 (0.692)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.53 (  0.53)	test_corr_d  -0.26 ( -0.26)
Overall Timing[ 40/  1]	epoch_time 0.0498 (0.0420)	validation_time 0.0006 (0.0006)	train_time 0.0492 (0.0413)
record: (train_acc, test_acc) (0.6467000194191933, 0.6680000424385071)
last accs (train_acc, test_acc) (0.5184000123143196, 0.5290000438690186)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.15it/s] 12%|#1        | 3/26 [00:00<00:01, 12.03it/s] 19%|#9        | 5/26 [00:00<00:01, 13.80it/s] 27%|##6       | 7/26 [00:00<00:01, 14.83it/s] 35%|###4      | 9/26 [00:00<00:01, 15.12it/s] 42%|####2     | 11/26 [00:00<00:00, 15.36it/s] 50%|#####     | 13/26 [00:00<00:00, 15.72it/s] 58%|#####7    | 15/26 [00:01<00:00, 15.93it/s] 65%|######5   | 17/26 [00:01<00:00, 16.27it/s] 73%|#######3  | 19/26 [00:01<00:00, 16.51it/s] 81%|########  | 21/26 [00:01<00:00, 16.61it/s] 88%|########8 | 23/26 [00:01<00:00, 16.70it/s] 96%|#########6| 25/26 [00:01<00:00, 16.86it/s]100%|##########| 26/26 [00:01<00:00, 15.28it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1066 400
penalty weights 10000.0
args.step pgd_anneal_iters 1066 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1067 400
penalty weights 10000.0
args.step pgd_anneal_iters 1067 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1068 400
penalty weights 10000.0
args.step pgd_anneal_iters 1068 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1069 400
penalty weights 10000.0
args.step pgd_anneal_iters 1069 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1070 400
penalty weights 10000.0
args.step pgd_anneal_iters 1070 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1071 400
penalty weights 10000.0
args.step pgd_anneal_iters 1071 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1072 400
penalty weights 10000.0
args.step pgd_anneal_iters 1072 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1073 400
penalty weights 10000.0
args.step pgd_anneal_iters 1073 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1074 400
penalty weights 10000.0
args.step pgd_anneal_iters 1074 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1075 400
penalty weights 10000.0
args.step pgd_anneal_iters 1075 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1076 400
penalty weights 10000.0
args.step pgd_anneal_iters 1076 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1077 400
penalty weights 10000.0
args.step pgd_anneal_iters 1077 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1078 400
penalty weights 10000.0
args.step pgd_anneal_iters 1078 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1079 400
penalty weights 10000.0
args.step pgd_anneal_iters 1079 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1080 400
penalty weights 10000.0
args.step pgd_anneal_iters 1080 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1081 400
penalty weights 10000.0
args.step pgd_anneal_iters 1081 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1082 400
penalty weights 10000.0
args.step pgd_anneal_iters 1082 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1083 400
penalty weights 10000.0
args.step pgd_anneal_iters 1083 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1084 400
penalty weights 10000.0
args.step pgd_anneal_iters 1084 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1085 400
penalty weights 10000.0
args.step pgd_anneal_iters 1085 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1086 400
penalty weights 10000.0
args.step pgd_anneal_iters 1086 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1087 400
penalty weights 10000.0
args.step pgd_anneal_iters 1087 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1088 400
penalty weights 10000.0
args.step pgd_anneal_iters 1088 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1089 400
penalty weights 10000.0
args.step pgd_anneal_iters 1089 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1090 400
penalty weights 10000.0
args.step pgd_anneal_iters 1090 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1091 400
penalty weights 10000.0
args.step pgd_anneal_iters 1091 600
dim_v 512
retunring when rho == dim_v - 1
Epoch: [41][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.20 (  0.20)	train_acc   0.51 (  0.52)	train_minacc   0.52 (  0.52)	train_majacc   0.51 (  0.52)	train_corr   0.00 (  0.00)	l1 11.0107 (11.0098)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.75it/s] 27%|##6       | 7/26 [00:00<00:00, 34.27it/s]                                               27%|##6       | 7/26 [00:00<00:00, 34.27it/s] 50%|#####     | 13/26 [00:00<00:00, 40.10it/s] 73%|#######3  | 19/26 [00:00<00:00, 46.25it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 46.25it/s] 96%|#########6| 25/26 [00:00<00:00, 46.45it/s]100%|##########| 26/26 [00:00<00:00, 38.92it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.56 (  0.56)	test_minacc   0.47 (  0.47)	test_majacc   0.58 (  0.58)	Loss_d 0.693 (0.693)	test_acc_d   0.56 (  0.56)	test_minacc_d   0.47 (  0.47)	test_majacc_d   0.58 (  0.58)	test_corr_d   0.06 (  0.06)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.52 (  0.53)	test_minacc   0.51 (  0.52)	test_majacc   0.52 (  0.53)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.53)	test_minacc_d   0.51 (  0.52)	test_majacc_d   0.52 (  0.53)	test_corr_d  -0.08 ( -0.04)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.55 (  0.52)	test_minacc   0.66 (  0.52)	test_majacc   0.52 (  0.52)	Loss_d 0.693 (0.693)	test_acc_d   0.55 (  0.52)	test_minacc_d   0.66 (  0.52)	test_majacc_d   0.52 (  0.52)	test_corr_d  -0.11 ( -0.05)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.51 (  0.52)	test_minacc   0.52 (  0.52)	test_majacc   0.51 (  0.52)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.52)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.51 (  0.52)	test_corr_d  -0.03 ( -0.05)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.60it/s]
Test: [  0/  1]	Loss 0.692 (0.692)	test_acc   0.53 (  0.53)	test_minacc   0.53 (  0.53)	test_majacc   0.54 (  0.54)	Loss_d 0.692 (0.692)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.54 (  0.54)	test_corr_d  -0.26 ( -0.26)
Test: [  1/  1]	Loss 0.692 (0.692)	test_acc   0.53 (  0.53)	test_minacc   0.53 (  0.53)	test_majacc   0.54 (  0.54)	Loss_d 0.692 (0.692)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.54 (  0.54)	test_corr_d  -0.26 ( -0.26)
Overall Timing[ 41/  1]	epoch_time 0.0490 (0.0422)	validation_time 0.0004 (0.0005)	train_time 0.0486 (0.0414)
record: (train_acc, test_acc) (0.6467000194191933, 0.6680000424385071)
last accs (train_acc, test_acc) (0.5213000156283378, 0.5290000438690186)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.21it/s] 12%|#1        | 3/26 [00:00<00:02, 10.44it/s] 19%|#9        | 5/26 [00:00<00:01, 12.69it/s] 27%|##6       | 7/26 [00:00<00:01, 14.15it/s] 35%|###4      | 9/26 [00:00<00:01, 15.08it/s] 42%|####2     | 11/26 [00:00<00:00, 15.53it/s] 50%|#####     | 13/26 [00:00<00:00, 15.97it/s] 58%|#####7    | 15/26 [00:01<00:00, 16.16it/s] 65%|######5   | 17/26 [00:01<00:00, 16.43it/s] 73%|#######3  | 19/26 [00:01<00:00, 16.61it/s] 81%|########  | 21/26 [00:01<00:00, 16.79it/s] 88%|########8 | 23/26 [00:01<00:00, 16.89it/s] 96%|#########6| 25/26 [00:01<00:00, 16.93it/s]100%|##########| 26/26 [00:01<00:00, 14.95it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1092 400
penalty weights 10000.0
args.step pgd_anneal_iters 1092 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1093 400
penalty weights 10000.0
args.step pgd_anneal_iters 1093 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1094 400
penalty weights 10000.0
args.step pgd_anneal_iters 1094 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1095 400
penalty weights 10000.0
args.step pgd_anneal_iters 1095 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1096 400
penalty weights 10000.0
args.step pgd_anneal_iters 1096 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1097 400
penalty weights 10000.0
args.step pgd_anneal_iters 1097 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1098 400
penalty weights 10000.0
args.step pgd_anneal_iters 1098 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1099 400
penalty weights 10000.0
args.step pgd_anneal_iters 1099 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1100 400
penalty weights 10000.0
args.step pgd_anneal_iters 1100 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1101 400
penalty weights 10000.0
args.step pgd_anneal_iters 1101 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1102 400
penalty weights 10000.0
args.step pgd_anneal_iters 1102 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1103 400
penalty weights 10000.0
args.step pgd_anneal_iters 1103 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1104 400
penalty weights 10000.0
args.step pgd_anneal_iters 1104 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1105 400
penalty weights 10000.0
args.step pgd_anneal_iters 1105 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1106 400
penalty weights 10000.0
args.step pgd_anneal_iters 1106 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1107 400
penalty weights 10000.0
args.step pgd_anneal_iters 1107 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1108 400
penalty weights 10000.0
args.step pgd_anneal_iters 1108 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1109 400
penalty weights 10000.0
args.step pgd_anneal_iters 1109 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1110 400
penalty weights 10000.0
args.step pgd_anneal_iters 1110 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1111 400
penalty weights 10000.0
args.step pgd_anneal_iters 1111 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1112 400
penalty weights 10000.0
args.step pgd_anneal_iters 1112 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1113 400
penalty weights 10000.0
args.step pgd_anneal_iters 1113 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1114 400
penalty weights 10000.0
args.step pgd_anneal_iters 1114 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1115 400
penalty weights 10000.0
args.step pgd_anneal_iters 1115 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1116 400
penalty weights 10000.0
args.step pgd_anneal_iters 1116 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1117 400
penalty weights 10000.0
args.step pgd_anneal_iters 1117 600
dim_v 512
retunring when rho == dim_v - 1
Epoch: [42][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.20 (  0.20)	train_acc   0.52 (  0.52)	train_minacc   0.55 (  0.52)	train_majacc   0.52 (  0.52)	train_corr   0.00 (  0.00)	l1 11.0128 (11.0118)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 18.81it/s] 31%|###       | 8/26 [00:00<00:00, 40.68it/s]                                               31%|###       | 8/26 [00:00<00:00, 40.68it/s] 50%|#####     | 13/26 [00:00<00:00, 42.47it/s] 73%|#######3  | 19/26 [00:00<00:00, 48.03it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 48.03it/s] 96%|#########6| 25/26 [00:00<00:00, 48.15it/s]100%|##########| 26/26 [00:00<00:00, 41.85it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.56 (  0.56)	test_minacc   0.47 (  0.47)	test_majacc   0.58 (  0.58)	Loss_d 0.693 (0.693)	test_acc_d   0.56 (  0.56)	test_minacc_d   0.47 (  0.47)	test_majacc_d   0.58 (  0.58)	test_corr_d   0.06 (  0.06)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.53 (  0.53)	test_minacc   0.51 (  0.52)	test_majacc   0.53 (  0.53)	Loss_d 0.693 (0.693)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.51 (  0.52)	test_majacc_d   0.53 (  0.53)	test_corr_d  -0.08 ( -0.05)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.55 (  0.53)	test_minacc   0.65 (  0.52)	test_majacc   0.53 (  0.53)	Loss_d 0.693 (0.693)	test_acc_d   0.55 (  0.53)	test_minacc_d   0.65 (  0.52)	test_majacc_d   0.53 (  0.53)	test_corr_d  -0.11 ( -0.05)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.53 (  0.52)	test_minacc   0.55 (  0.52)	test_majacc   0.52 (  0.52)	Loss_d 0.693 (0.693)	test_acc_d   0.53 (  0.52)	test_minacc_d   0.55 (  0.52)	test_majacc_d   0.52 (  0.52)	test_corr_d  -0.03 ( -0.05)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 67.20it/s]
Test: [  0/  1]	Loss 0.692 (0.692)	test_acc   0.53 (  0.53)	test_minacc   0.52 (  0.52)	test_majacc   0.54 (  0.54)	Loss_d 0.692 (0.692)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.54 (  0.54)	test_corr_d  -0.25 ( -0.25)
Test: [  1/  1]	Loss 0.692 (0.692)	test_acc   0.53 (  0.53)	test_minacc   0.52 (  0.52)	test_majacc   0.54 (  0.54)	Loss_d 0.692 (0.692)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.54 (  0.54)	test_corr_d  -0.25 ( -0.25)
Overall Timing[ 42/  1]	epoch_time 0.0494 (0.0424)	validation_time 0.0003 (0.0005)	train_time 0.0491 (0.0416)
record: (train_acc, test_acc) (0.6467000194191933, 0.6680000424385071)
last accs (train_acc, test_acc) (0.5242000136375428, 0.5260000228881836)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.38it/s] 12%|#1        | 3/26 [00:00<00:02, 10.19it/s] 19%|#9        | 5/26 [00:00<00:01, 12.67it/s] 27%|##6       | 7/26 [00:00<00:01, 14.03it/s] 35%|###4      | 9/26 [00:00<00:01, 14.99it/s] 42%|####2     | 11/26 [00:00<00:00, 15.56it/s] 50%|#####     | 13/26 [00:00<00:00, 15.88it/s] 58%|#####7    | 15/26 [00:01<00:00, 15.69it/s] 65%|######5   | 17/26 [00:01<00:00, 16.04it/s] 73%|#######3  | 19/26 [00:01<00:00, 16.09it/s] 81%|########  | 21/26 [00:01<00:00, 16.24it/s] 88%|########8 | 23/26 [00:01<00:00, 16.39it/s] 96%|#########6| 25/26 [00:01<00:00, 16.56it/s]100%|##########| 26/26 [00:01<00:00, 14.72it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1118 400
penalty weights 10000.0
args.step pgd_anneal_iters 1118 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1119 400
penalty weights 10000.0
args.step pgd_anneal_iters 1119 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1120 400
penalty weights 10000.0
args.step pgd_anneal_iters 1120 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1121 400
penalty weights 10000.0
args.step pgd_anneal_iters 1121 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1122 400
penalty weights 10000.0
args.step pgd_anneal_iters 1122 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1123 400
penalty weights 10000.0
args.step pgd_anneal_iters 1123 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1124 400
penalty weights 10000.0
args.step pgd_anneal_iters 1124 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1125 400
penalty weights 10000.0
args.step pgd_anneal_iters 1125 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1126 400
penalty weights 10000.0
args.step pgd_anneal_iters 1126 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1127 400
penalty weights 10000.0
args.step pgd_anneal_iters 1127 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1128 400
penalty weights 10000.0
args.step pgd_anneal_iters 1128 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1129 400
penalty weights 10000.0
args.step pgd_anneal_iters 1129 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1130 400
penalty weights 10000.0
args.step pgd_anneal_iters 1130 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1131 400
penalty weights 10000.0
args.step pgd_anneal_iters 1131 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1132 400
penalty weights 10000.0
args.step pgd_anneal_iters 1132 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1133 400
penalty weights 10000.0
args.step pgd_anneal_iters 1133 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1134 400
penalty weights 10000.0
args.step pgd_anneal_iters 1134 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1135 400
penalty weights 10000.0
args.step pgd_anneal_iters 1135 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1136 400
penalty weights 10000.0
args.step pgd_anneal_iters 1136 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1137 400
penalty weights 10000.0
args.step pgd_anneal_iters 1137 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1138 400
penalty weights 10000.0
args.step pgd_anneal_iters 1138 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1139 400
penalty weights 10000.0
args.step pgd_anneal_iters 1139 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1140 400
penalty weights 10000.0
args.step pgd_anneal_iters 1140 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1141 400
penalty weights 10000.0
args.step pgd_anneal_iters 1141 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1142 400
penalty weights 10000.0
args.step pgd_anneal_iters 1142 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1143 400
penalty weights 10000.0
args.step pgd_anneal_iters 1143 600
dim_v 512
retunring when rho == dim_v - 1
Epoch: [43][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.20 (  0.20)	train_acc   0.52 (  0.52)	train_minacc   0.52 (  0.52)	train_majacc   0.52 (  0.52)	train_corr   0.00 (  0.00)	l1 11.0149 (11.0139)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.55it/s] 27%|##6       | 7/26 [00:00<00:00, 34.21it/s]                                               27%|##6       | 7/26 [00:00<00:00, 34.21it/s] 50%|#####     | 13/26 [00:00<00:00, 40.63it/s] 73%|#######3  | 19/26 [00:00<00:00, 47.16it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 47.16it/s] 96%|#########6| 25/26 [00:00<00:00, 47.59it/s]100%|##########| 26/26 [00:00<00:00, 40.01it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.56 (  0.56)	test_minacc   0.47 (  0.47)	test_majacc   0.57 (  0.57)	Loss_d 0.693 (0.693)	test_acc_d   0.56 (  0.56)	test_minacc_d   0.47 (  0.47)	test_majacc_d   0.57 (  0.57)	test_corr_d   0.06 (  0.06)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.53 (  0.53)	test_minacc   0.51 (  0.52)	test_majacc   0.54 (  0.53)	Loss_d 0.693 (0.693)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.51 (  0.52)	test_majacc_d   0.54 (  0.53)	test_corr_d  -0.08 ( -0.05)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.55 (  0.53)	test_minacc   0.65 (  0.52)	test_majacc   0.53 (  0.53)	Loss_d 0.693 (0.693)	test_acc_d   0.55 (  0.53)	test_minacc_d   0.65 (  0.52)	test_majacc_d   0.53 (  0.53)	test_corr_d  -0.11 ( -0.05)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.52 (  0.53)	test_minacc   0.52 (  0.52)	test_majacc   0.52 (  0.53)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.53)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.52 (  0.53)	test_corr_d  -0.03 ( -0.05)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 65.54it/s]
Test: [  0/  1]	Loss 0.692 (0.692)	test_acc   0.53 (  0.53)	test_minacc   0.53 (  0.53)	test_majacc   0.55 (  0.55)	Loss_d 0.692 (0.692)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.55 (  0.55)	test_corr_d  -0.25 ( -0.25)
Test: [  1/  1]	Loss 0.692 (0.692)	test_acc   0.53 (  0.53)	test_minacc   0.53 (  0.53)	test_majacc   0.55 (  0.55)	Loss_d 0.692 (0.692)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.55 (  0.55)	test_corr_d  -0.25 ( -0.25)
Overall Timing[ 43/  1]	epoch_time 0.0498 (0.0425)	validation_time 0.0004 (0.0005)	train_time 0.0494 (0.0418)
record: (train_acc, test_acc) (0.6467000194191933, 0.6680000424385071)
last accs (train_acc, test_acc) (0.5252000171840191, 0.531000018119812)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.52it/s] 12%|#1        | 3/26 [00:00<00:01, 12.31it/s] 19%|#9        | 5/26 [00:00<00:01, 14.10it/s] 27%|##6       | 7/26 [00:00<00:01, 15.10it/s] 35%|###4      | 9/26 [00:00<00:01, 15.62it/s] 42%|####2     | 11/26 [00:00<00:00, 16.03it/s] 50%|#####     | 13/26 [00:00<00:00, 16.19it/s] 58%|#####7    | 15/26 [00:00<00:00, 16.44it/s] 65%|######5   | 17/26 [00:01<00:00, 16.53it/s] 73%|#######3  | 19/26 [00:01<00:00, 16.72it/s] 81%|########  | 21/26 [00:01<00:00, 16.64it/s] 88%|########8 | 23/26 [00:01<00:00, 16.65it/s] 96%|#########6| 25/26 [00:01<00:00, 16.78it/s]100%|##########| 26/26 [00:01<00:00, 15.37it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1144 400
penalty weights 10000.0
args.step pgd_anneal_iters 1144 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1145 400
penalty weights 10000.0
args.step pgd_anneal_iters 1145 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1146 400
penalty weights 10000.0
args.step pgd_anneal_iters 1146 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1147 400
penalty weights 10000.0
args.step pgd_anneal_iters 1147 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1148 400
penalty weights 10000.0
args.step pgd_anneal_iters 1148 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1149 400
penalty weights 10000.0
args.step pgd_anneal_iters 1149 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1150 400
penalty weights 10000.0
args.step pgd_anneal_iters 1150 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1151 400
penalty weights 10000.0
args.step pgd_anneal_iters 1151 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1152 400
penalty weights 10000.0
args.step pgd_anneal_iters 1152 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1153 400
penalty weights 10000.0
args.step pgd_anneal_iters 1153 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1154 400
penalty weights 10000.0
args.step pgd_anneal_iters 1154 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1155 400
penalty weights 10000.0
args.step pgd_anneal_iters 1155 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1156 400
penalty weights 10000.0
args.step pgd_anneal_iters 1156 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1157 400
penalty weights 10000.0
args.step pgd_anneal_iters 1157 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1158 400
penalty weights 10000.0
args.step pgd_anneal_iters 1158 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1159 400
penalty weights 10000.0
args.step pgd_anneal_iters 1159 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1160 400
penalty weights 10000.0
args.step pgd_anneal_iters 1160 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1161 400
penalty weights 10000.0
args.step pgd_anneal_iters 1161 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1162 400
penalty weights 10000.0
args.step pgd_anneal_iters 1162 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1163 400
penalty weights 10000.0
args.step pgd_anneal_iters 1163 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1164 400
penalty weights 10000.0
args.step pgd_anneal_iters 1164 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1165 400
penalty weights 10000.0
args.step pgd_anneal_iters 1165 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1166 400
penalty weights 10000.0
args.step pgd_anneal_iters 1166 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1167 400
penalty weights 10000.0
args.step pgd_anneal_iters 1167 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1168 400
penalty weights 10000.0
args.step pgd_anneal_iters 1168 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1169 400
penalty weights 10000.0
args.step pgd_anneal_iters 1169 600
dim_v 512
retunring when rho == dim_v - 1
Epoch: [44][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.20 (  0.20)	train_acc   0.52 (  0.53)	train_minacc   0.52 (  0.52)	train_majacc   0.52 (  0.53)	train_corr   0.00 (  0.00)	l1 11.0170 (11.0160)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.94it/s] 31%|###       | 8/26 [00:00<00:00, 38.23it/s]                                               31%|###       | 8/26 [00:00<00:00, 38.23it/s] 50%|#####     | 13/26 [00:00<00:00, 41.28it/s] 73%|#######3  | 19/26 [00:00<00:00, 47.48it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 47.48it/s] 96%|#########6| 25/26 [00:00<00:00, 47.77it/s]100%|##########| 26/26 [00:00<00:00, 40.23it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.56 (  0.56)	test_minacc   0.47 (  0.47)	test_majacc   0.57 (  0.57)	Loss_d 0.693 (0.693)	test_acc_d   0.56 (  0.56)	test_minacc_d   0.47 (  0.47)	test_majacc_d   0.57 (  0.57)	test_corr_d   0.06 (  0.06)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.54 (  0.54)	test_minacc   0.51 (  0.53)	test_majacc   0.54 (  0.54)	Loss_d 0.693 (0.693)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.51 (  0.53)	test_majacc_d   0.54 (  0.54)	test_corr_d  -0.08 ( -0.05)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.55 (  0.53)	test_minacc   0.65 (  0.53)	test_majacc   0.53 (  0.53)	Loss_d 0.693 (0.693)	test_acc_d   0.55 (  0.53)	test_minacc_d   0.65 (  0.53)	test_majacc_d   0.53 (  0.53)	test_corr_d  -0.11 ( -0.05)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.52 (  0.53)	test_minacc   0.52 (  0.53)	test_majacc   0.52 (  0.53)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.53)	test_minacc_d   0.52 (  0.53)	test_majacc_d   0.52 (  0.53)	test_corr_d  -0.03 ( -0.05)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.83it/s]
Test: [  0/  1]	Loss 0.692 (0.692)	test_acc   0.53 (  0.53)	test_minacc   0.53 (  0.53)	test_majacc   0.55 (  0.55)	Loss_d 0.692 (0.692)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.55 (  0.55)	test_corr_d  -0.25 ( -0.25)
Test: [  1/  1]	Loss 0.692 (0.692)	test_acc   0.53 (  0.53)	test_minacc   0.53 (  0.53)	test_majacc   0.55 (  0.55)	Loss_d 0.692 (0.692)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.55 (  0.55)	test_corr_d  -0.25 ( -0.25)
Overall Timing[ 44/  1]	epoch_time 0.0498 (0.0427)	validation_time 0.0004 (0.0005)	train_time 0.0494 (0.0420)
record: (train_acc, test_acc) (0.6467000194191933, 0.6680000424385071)
last accs (train_acc, test_acc) (0.5291000146269799, 0.5320000052452087)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.36it/s] 12%|#1        | 3/26 [00:00<00:01, 13.22it/s] 19%|#9        | 5/26 [00:00<00:01, 15.09it/s] 27%|##6       | 7/26 [00:00<00:01, 15.95it/s] 35%|###4      | 9/26 [00:00<00:01, 16.44it/s] 42%|####2     | 11/26 [00:00<00:00, 16.73it/s] 50%|#####     | 13/26 [00:00<00:00, 16.94it/s] 58%|#####7    | 15/26 [00:00<00:00, 16.85it/s] 65%|######5   | 17/26 [00:01<00:00, 16.83it/s] 73%|#######3  | 19/26 [00:01<00:00, 16.82it/s] 81%|########  | 21/26 [00:01<00:00, 16.83it/s] 88%|########8 | 23/26 [00:01<00:00, 16.74it/s] 96%|#########6| 25/26 [00:01<00:00, 16.77it/s]100%|##########| 26/26 [00:01<00:00, 15.81it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1170 400
penalty weights 10000.0
args.step pgd_anneal_iters 1170 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1171 400
penalty weights 10000.0
args.step pgd_anneal_iters 1171 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1172 400
penalty weights 10000.0
args.step pgd_anneal_iters 1172 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1173 400
penalty weights 10000.0
args.step pgd_anneal_iters 1173 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1174 400
penalty weights 10000.0
args.step pgd_anneal_iters 1174 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1175 400
penalty weights 10000.0
args.step pgd_anneal_iters 1175 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1176 400
penalty weights 10000.0
args.step pgd_anneal_iters 1176 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1177 400
penalty weights 10000.0
args.step pgd_anneal_iters 1177 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1178 400
penalty weights 10000.0
args.step pgd_anneal_iters 1178 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1179 400
penalty weights 10000.0
args.step pgd_anneal_iters 1179 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1180 400
penalty weights 10000.0
args.step pgd_anneal_iters 1180 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1181 400
penalty weights 10000.0
args.step pgd_anneal_iters 1181 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1182 400
penalty weights 10000.0
args.step pgd_anneal_iters 1182 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1183 400
penalty weights 10000.0
args.step pgd_anneal_iters 1183 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1184 400
penalty weights 10000.0
args.step pgd_anneal_iters 1184 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1185 400
penalty weights 10000.0
args.step pgd_anneal_iters 1185 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1186 400
penalty weights 10000.0
args.step pgd_anneal_iters 1186 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1187 400
penalty weights 10000.0
args.step pgd_anneal_iters 1187 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1188 400
penalty weights 10000.0
args.step pgd_anneal_iters 1188 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1189 400
penalty weights 10000.0
args.step pgd_anneal_iters 1189 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1190 400
penalty weights 10000.0
args.step pgd_anneal_iters 1190 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1191 400
penalty weights 10000.0
args.step pgd_anneal_iters 1191 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1192 400
penalty weights 10000.0
args.step pgd_anneal_iters 1192 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1193 400
penalty weights 10000.0
args.step pgd_anneal_iters 1193 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1194 400
penalty weights 10000.0
args.step pgd_anneal_iters 1194 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1195 400
penalty weights 10000.0
args.step pgd_anneal_iters 1195 600
dim_v 512
retunring when rho == dim_v - 1
Epoch: [45][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.20 (  0.20)	train_acc   0.52 (  0.53)	train_minacc   0.52 (  0.53)	train_majacc   0.52 (  0.53)	train_corr   0.00 (  0.00)	l1 11.0190 (11.0181)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.65it/s] 27%|##6       | 7/26 [00:00<00:00, 31.50it/s]                                               27%|##6       | 7/26 [00:00<00:00, 31.50it/s] 50%|#####     | 13/26 [00:00<00:00, 37.81it/s] 73%|#######3  | 19/26 [00:00<00:00, 44.57it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 44.57it/s] 96%|#########6| 25/26 [00:00<00:00, 45.45it/s]100%|##########| 26/26 [00:00<00:00, 37.39it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.56 (  0.56)	test_minacc   0.47 (  0.47)	test_majacc   0.58 (  0.58)	Loss_d 0.693 (0.693)	test_acc_d   0.56 (  0.56)	test_minacc_d   0.47 (  0.47)	test_majacc_d   0.58 (  0.58)	test_corr_d   0.06 (  0.06)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.53 (  0.54)	test_minacc   0.51 (  0.54)	test_majacc   0.53 (  0.54)	Loss_d 0.693 (0.693)	test_acc_d   0.53 (  0.54)	test_minacc_d   0.51 (  0.54)	test_majacc_d   0.53 (  0.54)	test_corr_d  -0.08 ( -0.05)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.55 (  0.53)	test_minacc   0.65 (  0.54)	test_majacc   0.53 (  0.53)	Loss_d 0.693 (0.693)	test_acc_d   0.55 (  0.53)	test_minacc_d   0.65 (  0.54)	test_majacc_d   0.53 (  0.53)	test_corr_d  -0.11 ( -0.05)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.52 (  0.53)	test_minacc   0.52 (  0.53)	test_majacc   0.52 (  0.53)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.53)	test_minacc_d   0.52 (  0.53)	test_majacc_d   0.52 (  0.53)	test_corr_d  -0.03 ( -0.05)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 60.98it/s]
Test: [  0/  1]	Loss 0.692 (0.692)	test_acc   0.54 (  0.54)	test_minacc   0.53 (  0.53)	test_majacc   0.56 (  0.56)	Loss_d 0.692 (0.692)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.56 (  0.56)	test_corr_d  -0.25 ( -0.25)
Test: [  1/  1]	Loss 0.692 (0.692)	test_acc   0.54 (  0.54)	test_minacc   0.53 (  0.53)	test_majacc   0.56 (  0.56)	Loss_d 0.692 (0.692)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.56 (  0.56)	test_corr_d  -0.25 ( -0.25)
Overall Timing[ 45/  1]	epoch_time 0.0500 (0.0429)	validation_time 0.0003 (0.0005)	train_time 0.0497 (0.0421)
record: (train_acc, test_acc) (0.6467000194191933, 0.6680000424385071)
last accs (train_acc, test_acc) (0.5317000098228455, 0.5350000262260437)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.99it/s] 12%|#1        | 3/26 [00:00<00:01, 13.37it/s] 19%|#9        | 5/26 [00:00<00:01, 14.89it/s] 27%|##6       | 7/26 [00:00<00:01, 15.68it/s] 35%|###4      | 9/26 [00:00<00:01, 15.94it/s] 42%|####2     | 11/26 [00:00<00:00, 15.94it/s] 50%|#####     | 13/26 [00:00<00:00, 16.10it/s] 58%|#####7    | 15/26 [00:00<00:00, 16.38it/s] 65%|######5   | 17/26 [00:01<00:00, 16.68it/s] 73%|#######3  | 19/26 [00:01<00:00, 16.85it/s] 81%|########  | 21/26 [00:01<00:00, 16.93it/s] 88%|########8 | 23/26 [00:01<00:00, 17.04it/s] 96%|#########6| 25/26 [00:01<00:00, 17.11it/s]100%|##########| 26/26 [00:01<00:00, 15.74it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1196 400
penalty weights 10000.0
args.step pgd_anneal_iters 1196 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1197 400
penalty weights 10000.0
args.step pgd_anneal_iters 1197 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1198 400
penalty weights 10000.0
args.step pgd_anneal_iters 1198 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1199 400
penalty weights 10000.0
args.step pgd_anneal_iters 1199 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1200 400
penalty weights 10000.0
args.step pgd_anneal_iters 1200 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1201 400
penalty weights 10000.0
args.step pgd_anneal_iters 1201 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1202 400
penalty weights 10000.0
args.step pgd_anneal_iters 1202 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1203 400
penalty weights 10000.0
args.step pgd_anneal_iters 1203 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1204 400
penalty weights 10000.0
args.step pgd_anneal_iters 1204 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1205 400
penalty weights 10000.0
args.step pgd_anneal_iters 1205 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1206 400
penalty weights 10000.0
args.step pgd_anneal_iters 1206 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1207 400
penalty weights 10000.0
args.step pgd_anneal_iters 1207 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1208 400
penalty weights 10000.0
args.step pgd_anneal_iters 1208 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1209 400
penalty weights 10000.0
args.step pgd_anneal_iters 1209 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1210 400
penalty weights 10000.0
args.step pgd_anneal_iters 1210 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1211 400
penalty weights 10000.0
args.step pgd_anneal_iters 1211 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1212 400
penalty weights 10000.0
args.step pgd_anneal_iters 1212 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1213 400
penalty weights 10000.0
args.step pgd_anneal_iters 1213 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1214 400
penalty weights 10000.0
args.step pgd_anneal_iters 1214 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1215 400
penalty weights 10000.0
args.step pgd_anneal_iters 1215 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1216 400
penalty weights 10000.0
args.step pgd_anneal_iters 1216 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1217 400
penalty weights 10000.0
args.step pgd_anneal_iters 1217 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1218 400
penalty weights 10000.0
args.step pgd_anneal_iters 1218 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1219 400
penalty weights 10000.0
args.step pgd_anneal_iters 1219 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1220 400
penalty weights 10000.0
args.step pgd_anneal_iters 1220 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1221 400
penalty weights 10000.0
args.step pgd_anneal_iters 1221 600
dim_v 512
retunring when rho == dim_v - 1
Epoch: [46][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.20 (  0.20)	train_acc   0.53 (  0.53)	train_minacc   0.52 (  0.53)	train_majacc   0.53 (  0.53)	train_corr   0.00 (  0.00)	l1 11.0210 (11.0201)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.83it/s] 19%|#9        | 5/26 [00:00<00:00, 22.68it/s]                                               19%|#9        | 5/26 [00:00<00:00, 22.68it/s] 42%|####2     | 11/26 [00:00<00:00, 36.73it/s] 62%|######1   | 16/26 [00:00<00:00, 40.96it/s]                                                62%|######1   | 16/26 [00:00<00:00, 40.96it/s] 85%|########4 | 22/26 [00:00<00:00, 46.91it/s]100%|##########| 26/26 [00:00<00:00, 37.25it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.57 (  0.57)	test_minacc   0.47 (  0.47)	test_majacc   0.58 (  0.58)	Loss_d 0.693 (0.693)	test_acc_d   0.57 (  0.57)	test_minacc_d   0.47 (  0.47)	test_majacc_d   0.58 (  0.58)	test_corr_d   0.06 (  0.06)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.53 (  0.54)	test_minacc   0.49 (  0.54)	test_majacc   0.54 (  0.54)	Loss_d 0.693 (0.693)	test_acc_d   0.53 (  0.54)	test_minacc_d   0.49 (  0.54)	test_majacc_d   0.54 (  0.54)	test_corr_d  -0.08 ( -0.05)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.55 (  0.54)	test_minacc   0.65 (  0.54)	test_majacc   0.53 (  0.54)	Loss_d 0.693 (0.693)	test_acc_d   0.55 (  0.54)	test_minacc_d   0.65 (  0.54)	test_majacc_d   0.53 (  0.54)	test_corr_d  -0.11 ( -0.05)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.53 (  0.53)	test_minacc   0.52 (  0.54)	test_majacc   0.53 (  0.53)	Loss_d 0.693 (0.693)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.52 (  0.54)	test_majacc_d   0.53 (  0.53)	test_corr_d  -0.03 ( -0.05)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 64.20it/s]
Test: [  0/  1]	Loss 0.692 (0.692)	test_acc   0.53 (  0.53)	test_minacc   0.53 (  0.53)	test_majacc   0.55 (  0.55)	Loss_d 0.692 (0.692)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.55 (  0.55)	test_corr_d  -0.25 ( -0.25)
Test: [  1/  1]	Loss 0.692 (0.692)	test_acc   0.53 (  0.53)	test_minacc   0.53 (  0.53)	test_majacc   0.55 (  0.55)	Loss_d 0.692 (0.692)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.55 (  0.55)	test_corr_d  -0.25 ( -0.25)
Overall Timing[ 46/  1]	epoch_time 0.0486 (0.0430)	validation_time 0.0004 (0.0005)	train_time 0.0482 (0.0423)
record: (train_acc, test_acc) (0.6467000194191933, 0.6680000424385071)
last accs (train_acc, test_acc) (0.534300015360117, 0.5320000052452087)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 12.71it/s] 15%|#5        | 4/26 [00:00<00:01, 14.47it/s] 23%|##3       | 6/26 [00:00<00:01, 15.24it/s] 31%|###       | 8/26 [00:00<00:01, 15.55it/s] 38%|###8      | 10/26 [00:00<00:01, 15.95it/s] 46%|####6     | 12/26 [00:00<00:00, 16.19it/s] 54%|#####3    | 14/26 [00:00<00:00, 16.38it/s] 62%|######1   | 16/26 [00:01<00:00, 16.65it/s] 69%|######9   | 18/26 [00:01<00:00, 16.82it/s] 77%|#######6  | 20/26 [00:01<00:00, 16.97it/s] 85%|########4 | 22/26 [00:01<00:00, 16.90it/s] 92%|#########2| 24/26 [00:01<00:00, 16.81it/s]100%|##########| 26/26 [00:01<00:00, 16.92it/s]100%|##########| 26/26 [00:01<00:00, 15.89it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1222 400
penalty weights 10000.0
args.step pgd_anneal_iters 1222 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1223 400
penalty weights 10000.0
args.step pgd_anneal_iters 1223 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1224 400
penalty weights 10000.0
args.step pgd_anneal_iters 1224 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1225 400
penalty weights 10000.0
args.step pgd_anneal_iters 1225 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1226 400
penalty weights 10000.0
args.step pgd_anneal_iters 1226 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1227 400
penalty weights 10000.0
args.step pgd_anneal_iters 1227 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1228 400
penalty weights 10000.0
args.step pgd_anneal_iters 1228 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1229 400
penalty weights 10000.0
args.step pgd_anneal_iters 1229 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1230 400
penalty weights 10000.0
args.step pgd_anneal_iters 1230 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1231 400
penalty weights 10000.0
args.step pgd_anneal_iters 1231 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1232 400
penalty weights 10000.0
args.step pgd_anneal_iters 1232 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1233 400
penalty weights 10000.0
args.step pgd_anneal_iters 1233 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1234 400
penalty weights 10000.0
args.step pgd_anneal_iters 1234 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1235 400
penalty weights 10000.0
args.step pgd_anneal_iters 1235 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1236 400
penalty weights 10000.0
args.step pgd_anneal_iters 1236 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1237 400
penalty weights 10000.0
args.step pgd_anneal_iters 1237 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1238 400
penalty weights 10000.0
args.step pgd_anneal_iters 1238 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1239 400
penalty weights 10000.0
args.step pgd_anneal_iters 1239 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1240 400
penalty weights 10000.0
args.step pgd_anneal_iters 1240 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1241 400
penalty weights 10000.0
args.step pgd_anneal_iters 1241 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1242 400
penalty weights 10000.0
args.step pgd_anneal_iters 1242 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1243 400
penalty weights 10000.0
args.step pgd_anneal_iters 1243 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1244 400
penalty weights 10000.0
args.step pgd_anneal_iters 1244 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1245 400
penalty weights 10000.0
args.step pgd_anneal_iters 1245 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1246 400
penalty weights 10000.0
args.step pgd_anneal_iters 1246 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1247 400
penalty weights 10000.0
args.step pgd_anneal_iters 1247 600
dim_v 512
retunring when rho == dim_v - 1
Epoch: [47][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.20 (  0.20)	train_acc   0.52 (  0.54)	train_minacc   0.52 (  0.54)	train_majacc   0.52 (  0.53)	train_corr   0.00 (  0.00)	l1 11.0229 (11.0220)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 19.62it/s] 31%|###       | 8/26 [00:00<00:00, 41.15it/s]                                               31%|###       | 8/26 [00:00<00:00, 41.15it/s] 50%|#####     | 13/26 [00:00<00:00, 42.41it/s] 73%|#######3  | 19/26 [00:00<00:00, 47.77it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 47.77it/s] 96%|#########6| 25/26 [00:00<00:00, 48.67it/s]100%|##########| 26/26 [00:00<00:00, 42.22it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.57 (  0.57)	test_minacc   0.47 (  0.47)	test_majacc   0.59 (  0.59)	Loss_d 0.693 (0.693)	test_acc_d   0.57 (  0.57)	test_minacc_d   0.47 (  0.47)	test_majacc_d   0.59 (  0.59)	test_corr_d   0.06 (  0.06)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.53 (  0.54)	test_minacc   0.49 (  0.55)	test_majacc   0.54 (  0.55)	Loss_d 0.693 (0.693)	test_acc_d   0.53 (  0.54)	test_minacc_d   0.49 (  0.55)	test_majacc_d   0.54 (  0.55)	test_corr_d  -0.08 ( -0.05)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.55 (  0.54)	test_minacc   0.65 (  0.55)	test_majacc   0.53 (  0.54)	Loss_d 0.693 (0.693)	test_acc_d   0.55 (  0.54)	test_minacc_d   0.65 (  0.55)	test_majacc_d   0.53 (  0.54)	test_corr_d  -0.11 ( -0.05)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.52 (  0.54)	test_minacc   0.52 (  0.54)	test_majacc   0.52 (  0.53)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.54)	test_minacc_d   0.52 (  0.54)	test_majacc_d   0.52 (  0.53)	test_corr_d  -0.03 ( -0.05)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 65.08it/s]
Test: [  0/  1]	Loss 0.692 (0.692)	test_acc   0.53 (  0.53)	test_minacc   0.53 (  0.53)	test_majacc   0.54 (  0.54)	Loss_d 0.692 (0.692)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.54 (  0.54)	test_corr_d  -0.24 ( -0.24)
Test: [  1/  1]	Loss 0.692 (0.692)	test_acc   0.53 (  0.53)	test_minacc   0.53 (  0.53)	test_majacc   0.54 (  0.54)	Loss_d 0.692 (0.692)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.54 (  0.54)	test_corr_d  -0.24 ( -0.24)
Overall Timing[ 47/  1]	epoch_time 0.0493 (0.0431)	validation_time 0.0004 (0.0005)	train_time 0.0488 (0.0424)
record: (train_acc, test_acc) (0.6467000194191933, 0.6680000424385071)
last accs (train_acc, test_acc) (0.5355000130832195, 0.5330000519752502)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.53it/s] 12%|#1        | 3/26 [00:00<00:01, 11.74it/s] 19%|#9        | 5/26 [00:00<00:01, 13.80it/s] 27%|##6       | 7/26 [00:00<00:01, 14.85it/s] 35%|###4      | 9/26 [00:00<00:01, 15.68it/s] 42%|####2     | 11/26 [00:00<00:00, 16.16it/s] 50%|#####     | 13/26 [00:00<00:00, 16.48it/s] 58%|#####7    | 15/26 [00:00<00:00, 16.52it/s] 65%|######5   | 17/26 [00:01<00:00, 16.67it/s] 73%|#######3  | 19/26 [00:01<00:00, 16.79it/s] 81%|########  | 21/26 [00:01<00:00, 16.89it/s] 88%|########8 | 23/26 [00:01<00:00, 16.95it/s] 96%|#########6| 25/26 [00:01<00:00, 17.04it/s]100%|##########| 26/26 [00:01<00:00, 15.15it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1248 400
penalty weights 10000.0
args.step pgd_anneal_iters 1248 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1249 400
penalty weights 10000.0
args.step pgd_anneal_iters 1249 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1250 400
penalty weights 10000.0
args.step pgd_anneal_iters 1250 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1251 400
penalty weights 10000.0
args.step pgd_anneal_iters 1251 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1252 400
penalty weights 10000.0
args.step pgd_anneal_iters 1252 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1253 400
penalty weights 10000.0
args.step pgd_anneal_iters 1253 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1254 400
penalty weights 10000.0
args.step pgd_anneal_iters 1254 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1255 400
penalty weights 10000.0
args.step pgd_anneal_iters 1255 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1256 400
penalty weights 10000.0
args.step pgd_anneal_iters 1256 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1257 400
penalty weights 10000.0
args.step pgd_anneal_iters 1257 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1258 400
penalty weights 10000.0
args.step pgd_anneal_iters 1258 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1259 400
penalty weights 10000.0
args.step pgd_anneal_iters 1259 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1260 400
penalty weights 10000.0
args.step pgd_anneal_iters 1260 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1261 400
penalty weights 10000.0
args.step pgd_anneal_iters 1261 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1262 400
penalty weights 10000.0
args.step pgd_anneal_iters 1262 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1263 400
penalty weights 10000.0
args.step pgd_anneal_iters 1263 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1264 400
penalty weights 10000.0
args.step pgd_anneal_iters 1264 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1265 400
penalty weights 10000.0
args.step pgd_anneal_iters 1265 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1266 400
penalty weights 10000.0
args.step pgd_anneal_iters 1266 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1267 400
penalty weights 10000.0
args.step pgd_anneal_iters 1267 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1268 400
penalty weights 10000.0
args.step pgd_anneal_iters 1268 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1269 400
penalty weights 10000.0
args.step pgd_anneal_iters 1269 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1270 400
penalty weights 10000.0
args.step pgd_anneal_iters 1270 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1271 400
penalty weights 10000.0
args.step pgd_anneal_iters 1271 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1272 400
penalty weights 10000.0
args.step pgd_anneal_iters 1272 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1273 400
penalty weights 10000.0
args.step pgd_anneal_iters 1273 600
dim_v 512
retunring when rho == dim_v - 1
Epoch: [48][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.20 (  0.20)	train_acc   0.53 (  0.54)	train_minacc   0.52 (  0.54)	train_majacc   0.53 (  0.53)	train_corr   0.00 (  0.00)	l1 11.0247 (11.0239)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.41it/s] 27%|##6       | 7/26 [00:00<00:00, 33.45it/s]                                               27%|##6       | 7/26 [00:00<00:00, 33.45it/s] 50%|#####     | 13/26 [00:00<00:00, 39.73it/s] 73%|#######3  | 19/26 [00:00<00:00, 45.74it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 45.74it/s] 96%|#########6| 25/26 [00:00<00:00, 46.79it/s]100%|##########| 26/26 [00:00<00:00, 39.24it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.57 (  0.57)	test_minacc   0.45 (  0.45)	test_majacc   0.59 (  0.59)	Loss_d 0.693 (0.693)	test_acc_d   0.57 (  0.57)	test_minacc_d   0.45 (  0.45)	test_majacc_d   0.59 (  0.59)	test_corr_d   0.06 (  0.06)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.53 (  0.55)	test_minacc   0.49 (  0.54)	test_majacc   0.54 (  0.55)	Loss_d 0.693 (0.693)	test_acc_d   0.53 (  0.55)	test_minacc_d   0.49 (  0.54)	test_majacc_d   0.54 (  0.55)	test_corr_d  -0.08 ( -0.05)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.55 (  0.54)	test_minacc   0.65 (  0.54)	test_majacc   0.53 (  0.54)	Loss_d 0.693 (0.693)	test_acc_d   0.55 (  0.54)	test_minacc_d   0.65 (  0.54)	test_majacc_d   0.53 (  0.54)	test_corr_d  -0.11 ( -0.05)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.53 (  0.54)	test_minacc   0.52 (  0.54)	test_majacc   0.53 (  0.54)	Loss_d 0.693 (0.693)	test_acc_d   0.53 (  0.54)	test_minacc_d   0.52 (  0.54)	test_majacc_d   0.53 (  0.54)	test_corr_d  -0.03 ( -0.05)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 64.22it/s]
Test: [  0/  1]	Loss 0.692 (0.692)	test_acc   0.54 (  0.54)	test_minacc   0.53 (  0.53)	test_majacc   0.55 (  0.55)	Loss_d 0.692 (0.692)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.55 (  0.55)	test_corr_d  -0.24 ( -0.24)
Test: [  1/  1]	Loss 0.692 (0.692)	test_acc   0.54 (  0.54)	test_minacc   0.53 (  0.53)	test_majacc   0.55 (  0.55)	Loss_d 0.692 (0.692)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.55 (  0.55)	test_corr_d  -0.24 ( -0.24)
Overall Timing[ 48/  1]	epoch_time 0.0481 (0.0432)	validation_time 0.0006 (0.0005)	train_time 0.0475 (0.0425)
record: (train_acc, test_acc) (0.6467000194191933, 0.6680000424385071)
last accs (train_acc, test_acc) (0.5360000131428242, 0.5350000262260437)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.13it/s] 12%|#1        | 3/26 [00:00<00:02, 10.35it/s] 19%|#9        | 5/26 [00:00<00:01, 12.84it/s] 27%|##6       | 7/26 [00:00<00:01, 14.29it/s] 35%|###4      | 9/26 [00:00<00:01, 15.19it/s] 42%|####2     | 11/26 [00:00<00:00, 15.82it/s] 50%|#####     | 13/26 [00:00<00:00, 16.15it/s] 58%|#####7    | 15/26 [00:01<00:00, 16.47it/s] 65%|######5   | 17/26 [00:01<00:00, 16.62it/s] 73%|#######3  | 19/26 [00:01<00:00, 16.79it/s] 81%|########  | 21/26 [00:01<00:00, 16.67it/s] 88%|########8 | 23/26 [00:01<00:00, 16.71it/s] 96%|#########6| 25/26 [00:01<00:00, 16.77it/s]100%|##########| 26/26 [00:01<00:00, 15.06it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1274 400
penalty weights 10000.0
args.step pgd_anneal_iters 1274 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1275 400
penalty weights 10000.0
args.step pgd_anneal_iters 1275 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1276 400
penalty weights 10000.0
args.step pgd_anneal_iters 1276 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1277 400
penalty weights 10000.0
args.step pgd_anneal_iters 1277 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1278 400
penalty weights 10000.0
args.step pgd_anneal_iters 1278 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1279 400
penalty weights 10000.0
args.step pgd_anneal_iters 1279 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1280 400
penalty weights 10000.0
args.step pgd_anneal_iters 1280 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1281 400
penalty weights 10000.0
args.step pgd_anneal_iters 1281 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1282 400
penalty weights 10000.0
args.step pgd_anneal_iters 1282 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1283 400
penalty weights 10000.0
args.step pgd_anneal_iters 1283 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1284 400
penalty weights 10000.0
args.step pgd_anneal_iters 1284 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1285 400
penalty weights 10000.0
args.step pgd_anneal_iters 1285 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1286 400
penalty weights 10000.0
args.step pgd_anneal_iters 1286 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1287 400
penalty weights 10000.0
args.step pgd_anneal_iters 1287 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1288 400
penalty weights 10000.0
args.step pgd_anneal_iters 1288 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1289 400
penalty weights 10000.0
args.step pgd_anneal_iters 1289 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1290 400
penalty weights 10000.0
args.step pgd_anneal_iters 1290 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1291 400
penalty weights 10000.0
args.step pgd_anneal_iters 1291 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1292 400
penalty weights 10000.0
args.step pgd_anneal_iters 1292 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1293 400
penalty weights 10000.0
args.step pgd_anneal_iters 1293 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1294 400
penalty weights 10000.0
args.step pgd_anneal_iters 1294 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1295 400
penalty weights 10000.0
args.step pgd_anneal_iters 1295 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1296 400
penalty weights 10000.0
args.step pgd_anneal_iters 1296 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1297 400
penalty weights 10000.0
args.step pgd_anneal_iters 1297 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1298 400
penalty weights 10000.0
args.step pgd_anneal_iters 1298 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1299 400
penalty weights 10000.0
args.step pgd_anneal_iters 1299 600
dim_v 512
retunring when rho == dim_v - 1
Epoch: [49][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.20 (  0.20)	train_acc   0.53 (  0.54)	train_minacc   0.52 (  0.54)	train_majacc   0.53 (  0.54)	train_corr   0.00 (  0.00)	l1 11.0266 (11.0257)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.69it/s] 27%|##6       | 7/26 [00:00<00:00, 32.61it/s]                                               27%|##6       | 7/26 [00:00<00:00, 32.61it/s] 46%|####6     | 12/26 [00:00<00:00, 37.23it/s] 69%|######9   | 18/26 [00:00<00:00, 44.06it/s]                                                69%|######9   | 18/26 [00:00<00:00, 44.06it/s] 92%|#########2| 24/26 [00:00<00:00, 45.61it/s]100%|##########| 26/26 [00:00<00:00, 38.57it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.58 (  0.58)	test_minacc   0.47 (  0.47)	test_majacc   0.60 (  0.60)	Loss_d 0.693 (0.693)	test_acc_d   0.58 (  0.58)	test_minacc_d   0.47 (  0.47)	test_majacc_d   0.60 (  0.60)	test_corr_d   0.06 (  0.06)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.53 (  0.55)	test_minacc   0.49 (  0.55)	test_majacc   0.54 (  0.55)	Loss_d 0.693 (0.693)	test_acc_d   0.53 (  0.55)	test_minacc_d   0.49 (  0.55)	test_majacc_d   0.54 (  0.55)	test_corr_d  -0.08 ( -0.05)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.55 (  0.54)	test_minacc   0.65 (  0.55)	test_majacc   0.53 (  0.54)	Loss_d 0.693 (0.693)	test_acc_d   0.55 (  0.54)	test_minacc_d   0.65 (  0.55)	test_majacc_d   0.53 (  0.54)	test_corr_d  -0.11 ( -0.05)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.53 (  0.54)	test_minacc   0.52 (  0.54)	test_majacc   0.53 (  0.54)	Loss_d 0.693 (0.693)	test_acc_d   0.53 (  0.54)	test_minacc_d   0.52 (  0.54)	test_majacc_d   0.53 (  0.54)	test_corr_d  -0.04 ( -0.05)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 65.01it/s]
Test: [  0/  1]	Loss 0.692 (0.692)	test_acc   0.54 (  0.54)	test_minacc   0.53 (  0.53)	test_majacc   0.55 (  0.55)	Loss_d 0.692 (0.692)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.55 (  0.55)	test_corr_d  -0.24 ( -0.24)
Test: [  1/  1]	Loss 0.692 (0.692)	test_acc   0.54 (  0.54)	test_minacc   0.53 (  0.53)	test_majacc   0.55 (  0.55)	Loss_d 0.692 (0.692)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.55 (  0.55)	test_corr_d  -0.24 ( -0.24)
Overall Timing[ 49/  1]	epoch_time 0.0488 (0.0433)	validation_time 0.0004 (0.0005)	train_time 0.0483 (0.0426)
record: (train_acc, test_acc) (0.6467000194191933, 0.6680000424385071)
last accs (train_acc, test_acc) (0.5381000106930732, 0.5350000262260437)
done saving aggregate.csv to ./aggregate.csv
wandb: - 0.161 MB of 0.161 MB uploadedwandb: \ 0.161 MB of 0.161 MB uploadedwandb: | 0.161 MB of 0.161 MB uploadedwandb: / 0.183 MB of 0.196 MB uploaded (0.003 MB deduped)wandb: - 0.512 MB of 0.512 MB uploaded (0.003 MB deduped)wandb: 
wandb: Run history:
wandb:                                                                           global_step ▁▁▁▁▂▂▂▂▂▃▃▃▃▃▃▄▄▄▄▄▅▅▅▅▅▅▆▆▆▆▆▆▇▇▇▇▇███
wandb:      resnet18-usc-unsigned/baseline/prune_rate=1.0/32/logs/diagnostics/epoch_time_val █▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▂▃▃▄▃▃▃▃▁▁▂▃▃▃▃▃▃▃▃▃▃▃
wandb:      resnet18-usc-unsigned/baseline/prune_rate=1.0/32/logs/diagnostics/train_time_val █▂▁▂▂▁▂▂▂▂▂▁▁▁▂▁▂▂▂▄▄▅▄▄▄▄▂▂▂▅▅▅▄▄▄▅▅▄▄▄
wandb: resnet18-usc-unsigned/baseline/prune_rate=1.0/32/logs/diagnostics/validation_time_val █▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:                     resnet18-usc-unsigned/baseline/prune_rate=1.0/32/logs/global_step ▁▁▁▁▂▂▂▂▂▃▃▃▃▃▃▄▄▄▄▄▅▅▅▅▅▅▆▆▆▆▆▆▇▇▇▇▇███
wandb:                   resnet18-usc-unsigned/baseline/prune_rate=1.0/32/logs/test/Loss_avg ▆▆▆▆▆▇█▇█▇██▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:                 resnet18-usc-unsigned/baseline/prune_rate=1.0/32/logs/test/Loss_d_avg ▆▆▆▆▆▇█▇█▇██▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:                 resnet18-usc-unsigned/baseline/prune_rate=1.0/32/logs/test/Loss_d_val ▆▆▆▆▆▇█▇█▇██▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:                   resnet18-usc-unsigned/baseline/prune_rate=1.0/32/logs/test/Loss_val ▆▆▆▆▆▇█▇█▇██▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:               resnet18-usc-unsigned/baseline/prune_rate=1.0/32/logs/test/test_acc_avg ▁▁▁▁▁▁▁▁▁▃▂▂█▆▆▆▇▇▆▇▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/32/logs/test/test_acc_d_avg ▁▁▁▁▁▁▁▁▁▃▂▂█▆▆▆▇▇▆▇▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/32/logs/test/test_acc_d_val ▁▁▁▁▁▁▁▁▁▃▂▂█▆▆▆▇▇▆▇▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆
wandb:               resnet18-usc-unsigned/baseline/prune_rate=1.0/32/logs/test/test_acc_val ▁▁▁▁▁▁▁▁▁▃▂▂█▆▆▆▇▇▆▇▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/32/logs/test/test_corr_d_avg █████████▇██▁▁▂▂▂▂▂▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/32/logs/test/test_corr_d_val █████████▇██▁▁▂▂▂▂▂▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/32/logs/test/test_majacc_avg ████████████▄▂▂▂▁▁▁▄▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▃▂▂▂
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/32/logs/test/test_majacc_d_avg ████████████▄▂▂▂▁▁▁▄▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▃▂▂▂
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/32/logs/test/test_majacc_d_val ████████████▄▂▂▂▁▁▁▄▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▃▂▂▂
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/32/logs/test/test_majacc_val ████████████▄▂▂▂▁▁▁▄▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▃▂▂▂
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/32/logs/test/test_minacc_avg ▁▁▁▁▁▁▁▁▁▃▂▂█▆▆▆▇▇▇▇▆▆▆▆▆▆▆▆▆▆▆▇▇▇▇▇▇▇▇▇
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/32/logs/test/test_minacc_d_avg ▁▁▁▁▁▁▁▁▁▃▂▂█▆▆▆▇▇▇▇▆▆▆▆▆▆▆▆▆▆▆▇▇▇▇▇▇▇▇▇
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/32/logs/test/test_minacc_d_val ▁▁▁▁▁▁▁▁▁▃▂▂█▆▆▆▇▇▇▇▆▆▆▆▆▆▆▆▆▆▆▇▇▇▇▇▇▇▇▇
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/32/logs/test/test_minacc_val ▁▁▁▁▁▁▁▁▁▃▂▂█▆▆▆▇▇▇▇▆▆▆▆▆▆▆▆▆▆▆▇▇▇▇▇▇▇▇▇
wandb:                  resnet18-usc-unsigned/baseline/prune_rate=1.0/32/logs/train/Loss_avg █▅▄▃▂▂▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:                  resnet18-usc-unsigned/baseline/prune_rate=1.0/32/logs/train/Loss_val █▅▃▃▂▂▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:                    resnet18-usc-unsigned/baseline/prune_rate=1.0/32/logs/train/l1_avg ▃▂▂▁▁▁▂▂▄▅▆▇██▇▇▇▇▇▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅
wandb:                    resnet18-usc-unsigned/baseline/prune_rate=1.0/32/logs/train/l1_val ▂▂▁▁▁▂▂▃▅▆▇████████▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/32/logs/train/train_acc_avg ▇███████████▆▂▂▂▁▁▁▃▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/32/logs/train/train_acc_val ███████████▇▅▂▂▂▁▁▁▄▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▃▂▃
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/32/logs/train/train_corr_avg ▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/32/logs/train/train_corr_val ▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/32/logs/train/train_majacc_avg ▇███████████▆▂▂▂▁▁▁▃▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/32/logs/train/train_majacc_val █████████▆▇▆▄▁▁▁▁▁▁▃▂▂▂▂▂▂▁▁▁▂▂▂▂▂▂▂▂▂▂▂
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/32/logs/train/train_minacc_avg ▂▁▁▁▁▂▂▂▃▃▃▄▇█▇▇██▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇███████
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/32/logs/train/train_minacc_val ▂▁▁▁▁▁▁▁▂▇▄▅█▆▆▆▆▆▅▆▆▆▆▆▆▆▆▆▆▆▇▇▇▇▇▇▇▇▇▇
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/32/logs/train/train_nll_avg ▇▂▂▂▂▂▂▂▁▁▁▁▃███████████████████████████
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/32/logs/train/train_nll_val ▃▂▂▂▂▂▂▁▁▁▁▂▆███████████████████████████
wandb:         resnet18-usc-unsigned/baseline/prune_rate=1.0/32/logs/train/train_penalty_avg █▂▂▂▂▂▂▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:         resnet18-usc-unsigned/baseline/prune_rate=1.0/32/logs/train/train_penalty_val █▅▄▅▆▆█▆▄▃▃▃▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:           resnet18-usc-unsigned/baseline/prune_rate=1.0/32/logs/train/weight_norm_avg █▅▃▂▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:           resnet18-usc-unsigned/baseline/prune_rate=1.0/32/logs/train/weight_norm_val █▅▃▂▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb: 
wandb: Run summary:
wandb:                                                                           global_step 49
wandb:      resnet18-usc-unsigned/baseline/prune_rate=1.0/32/logs/diagnostics/epoch_time_val 0.04875
wandb:      resnet18-usc-unsigned/baseline/prune_rate=1.0/32/logs/diagnostics/train_time_val 0.04832
wandb: resnet18-usc-unsigned/baseline/prune_rate=1.0/32/logs/diagnostics/validation_time_val 0.00041
wandb:                     resnet18-usc-unsigned/baseline/prune_rate=1.0/32/logs/global_step 49
wandb:                   resnet18-usc-unsigned/baseline/prune_rate=1.0/32/logs/test/Loss_avg 0.69247
wandb:                 resnet18-usc-unsigned/baseline/prune_rate=1.0/32/logs/test/Loss_d_avg 0.69247
wandb:                 resnet18-usc-unsigned/baseline/prune_rate=1.0/32/logs/test/Loss_d_val 0.69247
wandb:                   resnet18-usc-unsigned/baseline/prune_rate=1.0/32/logs/test/Loss_val 0.69247
wandb:               resnet18-usc-unsigned/baseline/prune_rate=1.0/32/logs/test/test_acc_avg 0.535
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/32/logs/test/test_acc_d_avg 0.535
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/32/logs/test/test_acc_d_val 0.535
wandb:               resnet18-usc-unsigned/baseline/prune_rate=1.0/32/logs/test/test_acc_val 0.535
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/32/logs/test/test_corr_d_avg -0.24024
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/32/logs/test/test_corr_d_val -0.24024
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/32/logs/test/test_majacc_avg 0.55
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/32/logs/test/test_majacc_d_avg 0.55
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/32/logs/test/test_majacc_d_val 0.55
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/32/logs/test/test_majacc_val 0.55
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/32/logs/test/test_minacc_avg 0.53333
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/32/logs/test/test_minacc_d_avg 0.53333
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/32/logs/test/test_minacc_d_val 0.53333
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/32/logs/test/test_minacc_val 0.53333
wandb:                  resnet18-usc-unsigned/baseline/prune_rate=1.0/32/logs/train/Loss_avg 9e-05
wandb:                  resnet18-usc-unsigned/baseline/prune_rate=1.0/32/logs/train/Loss_val 9e-05
wandb:                    resnet18-usc-unsigned/baseline/prune_rate=1.0/32/logs/train/l1_avg 11.0257
wandb:                    resnet18-usc-unsigned/baseline/prune_rate=1.0/32/logs/train/l1_val 11.02656
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/32/logs/train/train_acc_avg 0.5362
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/32/logs/train/train_acc_val 0.532
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/32/logs/train/train_corr_avg 0.0
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/32/logs/train/train_corr_val 0.0
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/32/logs/train/train_majacc_avg 0.53539
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/32/logs/train/train_majacc_val 0.53365
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/32/logs/train/train_minacc_avg 0.53971
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/32/logs/train/train_minacc_val 0.52381
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/32/logs/train/train_nll_avg 0.69308
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/32/logs/train/train_nll_val 0.69306
wandb:         resnet18-usc-unsigned/baseline/prune_rate=1.0/32/logs/train/train_penalty_avg 0.0
wandb:         resnet18-usc-unsigned/baseline/prune_rate=1.0/32/logs/train/train_penalty_val 0.0
wandb:           resnet18-usc-unsigned/baseline/prune_rate=1.0/32/logs/train/weight_norm_avg 0.19728
wandb:           resnet18-usc-unsigned/baseline/prune_rate=1.0/32/logs/train/weight_norm_val 0.19711
wandb: 
wandb: 🚀 View run name_random at: https://wandb.ai/janezdu-uiuc/irm/runs/bq24aa3p
wandb: ⭐️ View project at: https://wandb.ai/janezdu-uiuc/irm
wandb: Synced 5 W&B file(s), 0 media file(s), 2 artifact file(s) and 1 other file(s)
wandb: Find logs at: ./wandb/run-20240906_150632-bq24aa3p/logs
wandb: WARNING The new W&B backend becomes opt-out in version 0.18.0; try it out with `wandb.require("core")`! See https://wandb.me/wandb-core for more information.
wandb: Currently logged in as: janezdu (janezdu-uiuc). Use `wandb login --relogin` to force relogin
wandb: wandb version 0.17.9 is available!  To upgrade, please run:
wandb:  $ pip install wandb --upgrade
wandb: Tracking run with wandb version 0.17.7
wandb: Run data is saved locally in /scratch/users/zd16/sparseIRM-resnet-ver/wandb/run-20240906_150917-g9mnb4gu
wandb: Run `wandb offline` to turn off syncing.
wandb: Syncing run name_random
wandb: ⭐️ View project at https://wandb.ai/janezdu-uiuc/irm
wandb: 🚀 View run at https://wandb.ai/janezdu-uiuc/irm/runs/g9mnb4gu
=> Reading YAML config from configs/smallscale/resnet18/resnet18-usc-unsigned.yaml
Namespace(data='dataset/', optimizer='adam', weight_opt='adam', set='mnistcifar', arch='ResNet18', config='configs/smallscale/resnet18/resnet18-usc-unsigned.yaml', log_dir=None, workers=4, epochs=50, start_epoch=None, batch_size=390, lr=0.006, warmup_length=0, momentum=0.9, weight_decay=0.0, print_freq=10, num_classes=1, resume='', resume_train_weights='', evaluate=False, pretrained=None, pretrained_distill=None, alpha_distill=0.95, T_distill=2, seed=0, multigpu=[0], lr_policy='cosine_lr', lr_adjust=30, lr_gamma=0.1, name='baseline', save_every=-1, prune_rate=1.0, param_prune_rate=0.0, pr_start=1.0, low_data=1, width_mult=1.0, nesterov=False, threetimes=False, random_subnet=False, one_batch=False, conv_type='DenseConv', freeze_weights=False, st=False, mode='fan_in', nonlinearity='relu', bn_type='LearnedBatchNorm', init='kaiming_normal', no_bn_decay=False, scale_fan=False, first_layer_dense=False, last_layer_dense=True, approx=False, zero=False, flip=False, bs=False, gumbel_sample=False, multiply_prob=False, no_multiply=False, multiply_cont=False, multiply_prob_bs=False, indiv=False, label_smoothing=None, first_layer_type=None, trainer='default', score_init_constant=1.0, K=1, update_freq=20, D=0.01, T=1, TA=True, TA2=False, TA_grow=False, center=False, straight_through=False, PLA_factor=0.1, PLA_patience=10, gradient_loss_para=0, abs_loss_para=0, thres=0.9, runs_name='name_random', resume_compare_loss1='', resume_compare_loss2='', init_weights='', trained_mask='', weight_rescaling=False, constrain_by_layer=False, weight_rescaling_data=False, use_running_stats=False, not_clipping=False, rescaling_para=False, lasso_para=0, dont_freeze_weights=False, iterative=True, prob_by_weight=False, rescale_at_fix_subnet=False, train_weights_at_the_same_time=False, sample_from_training_set=False, load_true_para=False, distill=False, finetune=False, stablize=False, prev_best=0, weight_opt_lr=0.0006, n=500, ts=0.28, te=0.6, d=20000, s=80, c=0.75, init_prob=False, thres_before=0.001, wide_ratio=0.001, noise=1, cal_p_q=False, just_finetune=False, snip=False, envs_num=2, l2_regularizer_weight=0.001, data_num=50000, env_type='linear', irm_type='irmv1', hidden_dim=390, penalty_anneal_iters=400, penalty_weight=10000.0, grayscale_model=0, weight_lr_schedule=False, fix_subnet=False, freeze_weight=False, step='ours', prior_sd_coef=0, dim_inv=2, variance_gamma=1.0, dim_spu=10, image_scale=32, cons_ratio='0.999_0.7_0.1', noise_ratio=0.2, step_gamma=0.1, step_round=3, inner_steps=1, use_pgd=True, z=13.0, pgd_anneal_iters=600)
=> Creating model 'ResNet18'
Here!!!!!!!!
==> Conv Type: DenseConv
==> BN Type: LearnedBatchNorm
<class 'torch.nn.modules.conv.Conv2d'>
<class 'torch.nn.modules.batchnorm.BatchNorm2d'>
==> Building first layer with <class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
ResNet(
  (conv1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
  (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (relu): ReLU(inplace=True)
  (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
  (layer1): Sequential(
    (0): BasicBlock(
      (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (1): BasicBlock(
      (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (layer2): Sequential(
    (0): BasicBlock(
      (conv1): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (downsample): Sequential(
        (0): Conv2d(64, 128, kernel_size=(1, 1), stride=(2, 2), bias=False)
        (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (1): BasicBlock(
      (conv1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (layer3): Sequential(
    (0): BasicBlock(
      (conv1): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (downsample): Sequential(
        (0): Conv2d(128, 256, kernel_size=(1, 1), stride=(2, 2), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (1): BasicBlock(
      (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (layer4): Sequential(
    (0): BasicBlock(
      (conv1): Conv2d(256, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (downsample): Sequential(
        (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (1): BasicBlock(
      (conv1): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (avgpool): AdaptiveAvgPool2d(output_size=1)
  (fc): Linear(in_features=512, out_features=1, bias=True)
)
=> Parallelizing on [0] gpus
<DEBUG> gradient to module.conv1.weight
<DEBUG> gradient to module.bn1.weight
<DEBUG> gradient to module.bn1.bias
<DEBUG> gradient to module.layer1.0.conv1.weight
<DEBUG> gradient to module.layer1.0.bn1.weight
<DEBUG> gradient to module.layer1.0.bn1.bias
<DEBUG> gradient to module.layer1.0.conv2.weight
<DEBUG> gradient to module.layer1.0.bn2.weight
<DEBUG> gradient to module.layer1.0.bn2.bias
<DEBUG> gradient to module.layer1.1.conv1.weight
<DEBUG> gradient to module.layer1.1.bn1.weight
<DEBUG> gradient to module.layer1.1.bn1.bias
<DEBUG> gradient to module.layer1.1.conv2.weight
<DEBUG> gradient to module.layer1.1.bn2.weight
<DEBUG> gradient to module.layer1.1.bn2.bias
<DEBUG> gradient to module.layer2.0.conv1.weight
<DEBUG> gradient to module.layer2.0.bn1.weight
<DEBUG> gradient to module.layer2.0.bn1.bias
<DEBUG> gradient to module.layer2.0.conv2.weight
<DEBUG> gradient to module.layer2.0.bn2.weight
<DEBUG> gradient to module.layer2.0.bn2.bias
<DEBUG> gradient to module.layer2.0.downsample.0.weight
<DEBUG> gradient to module.layer2.0.downsample.1.weight
<DEBUG> gradient to module.layer2.0.downsample.1.bias
<DEBUG> gradient to module.layer2.1.conv1.weight
<DEBUG> gradient to module.layer2.1.bn1.weight
<DEBUG> gradient to module.layer2.1.bn1.bias
<DEBUG> gradient to module.layer2.1.conv2.weight
<DEBUG> gradient to module.layer2.1.bn2.weight
<DEBUG> gradient to module.layer2.1.bn2.bias
<DEBUG> gradient to module.layer3.0.conv1.weight
<DEBUG> gradient to module.layer3.0.bn1.weight
<DEBUG> gradient to module.layer3.0.bn1.bias
<DEBUG> gradient to module.layer3.0.conv2.weight
<DEBUG> gradient to module.layer3.0.bn2.weight
<DEBUG> gradient to module.layer3.0.bn2.bias
<DEBUG> gradient to module.layer3.0.downsample.0.weight
<DEBUG> gradient to module.layer3.0.downsample.1.weight
<DEBUG> gradient to module.layer3.0.downsample.1.bias
<DEBUG> gradient to module.layer3.1.conv1.weight
<DEBUG> gradient to module.layer3.1.bn1.weight
<DEBUG> gradient to module.layer3.1.bn1.bias
<DEBUG> gradient to module.layer3.1.conv2.weight
<DEBUG> gradient to module.layer3.1.bn2.weight
<DEBUG> gradient to module.layer3.1.bn2.bias
<DEBUG> gradient to module.layer4.0.conv1.weight
<DEBUG> gradient to module.layer4.0.bn1.weight
<DEBUG> gradient to module.layer4.0.bn1.bias
<DEBUG> gradient to module.layer4.0.conv2.weight
<DEBUG> gradient to module.layer4.0.bn2.weight
<DEBUG> gradient to module.layer4.0.bn2.bias
<DEBUG> gradient to module.layer4.0.downsample.0.weight
<DEBUG> gradient to module.layer4.0.downsample.1.weight
<DEBUG> gradient to module.layer4.0.downsample.1.bias
<DEBUG> gradient to module.layer4.1.conv1.weight
<DEBUG> gradient to module.layer4.1.bn1.weight
<DEBUG> gradient to module.layer4.1.bn1.bias
<DEBUG> gradient to module.layer4.1.conv2.weight
<DEBUG> gradient to module.layer4.1.bn2.weight
<DEBUG> gradient to module.layer4.1.bn2.bias
<DEBUG> gradient to module.fc.weight
<DEBUG> gradient to module.fc.bias
Files already downloaded and verified
Files already downloaded and verified
Adding Noise to Label, len(Y)=12000, Label_noise=1158
Xmp (7877, 3, 32, 32) (6903, 3, 32, 32)
Xcp (6022, 3, 32, 32) (5978, 3, 32, 32)
env=0 2497 2497 3 3
xn 2500 xp 2500
env=1 1750 1750 750 750
xn 2500 xp 2500
env=2 50 50 450 450
xn 500 xp 500
=> Creating model 'EBD'
EBD(
  (embedings): Embedding(2, 1)
)
=> Parallelizing on [0] gpus
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:01<00:44,  1.79s/it] 19%|#9        | 5/26 [00:01<00:06,  3.41it/s] 35%|###4      | 9/26 [00:02<00:02,  6.72it/s] 50%|#####     | 13/26 [00:02<00:01, 10.41it/s] 65%|######5   | 17/26 [00:02<00:00, 14.30it/s] 81%|########  | 21/26 [00:02<00:00, 18.14it/s] 96%|#########6| 25/26 [00:02<00:00, 21.56it/s]100%|##########| 26/26 [00:02<00:00,  9.02it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 0 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 2 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 3 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 4 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 5 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 6 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 7 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 8 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 9 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 10 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 11 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 12 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 13 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 14 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 15 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 16 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 17 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 18 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 19 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 20 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 21 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 22 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 23 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 24 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 25 400
penalty weights 0.0
Epoch: [0][  26/  26]	Loss 10.011 (12.495)	train_nll   0.42 (  0.54)	train_penalty   0.06 (  0.17)	weight_norm   9.59 ( 11.96)	train_acc   0.85 (  0.79)	train_minacc   0.00 (  0.08)	train_majacc   1.00 (  0.92)	train_corr   0.00 (  0.00)	l1 7.2337 (7.9345)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.36it/s] 27%|##6       | 7/26 [00:00<00:00, 35.82it/s]                                               27%|##6       | 7/26 [00:00<00:00, 35.82it/s] 50%|#####     | 13/26 [00:00<00:00, 40.30it/s] 73%|#######3  | 19/26 [00:00<00:00, 46.16it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 46.16it/s] 96%|#########6| 25/26 [00:00<00:00, 47.15it/s]100%|##########| 26/26 [00:00<00:00, 39.93it/s]
Test: [   0/  26]	Loss 0.417 (0.417)	test_acc   0.84 (  0.84)	test_minacc   0.03 (  0.03)	test_majacc   0.99 (  0.99)	Loss_d 0.417 (0.417)	test_acc_d   0.84 (  0.84)	test_minacc_d   0.03 (  0.03)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.97 (  0.97)
Test: [  10/  26]	Loss 0.465 (0.422)	test_acc   0.82 (  0.84)	test_minacc   0.00 (  0.01)	test_majacc   0.98 (  0.99)	Loss_d 0.465 (0.422)	test_acc_d   0.82 (  0.84)	test_minacc_d   0.00 (  0.01)	test_majacc_d   0.98 (  0.99)	test_corr_d   0.96 (  0.97)
Test: [  20/  26]	Loss 0.424 (0.421)	test_acc   0.84 (  0.84)	test_minacc   0.02 (  0.01)	test_majacc   1.00 (  0.99)	Loss_d 0.424 (0.421)	test_acc_d   0.84 (  0.84)	test_minacc_d   0.02 (  0.01)	test_majacc_d   1.00 (  0.99)	test_corr_d   0.98 (  0.97)
Test: [  26/  26]	Loss 0.417 (0.418)	test_acc   0.85 (  0.85)	test_minacc   0.00 (  0.01)	test_majacc   1.00 (  0.99)	Loss_d 0.417 (0.418)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.00 (  0.01)	test_majacc_d   1.00 (  0.99)	test_corr_d   0.98 (  0.97)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00,  2.54it/s]100%|##########| 1/1 [00:00<00:00,  2.54it/s]
Test: [  0/  1]	Loss 1.606 (1.606)	test_acc   0.11 (  0.11)	test_minacc   0.01 (  0.01)	test_majacc   0.99 (  0.99)	Loss_d 1.606 (1.606)	test_acc_d   0.11 (  0.11)	test_minacc_d   0.01 (  0.01)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.96 (  0.96)
Test: [  1/  1]	Loss 1.606 (1.606)	test_acc   0.11 (  0.11)	test_minacc   0.01 (  0.01)	test_majacc   0.99 (  0.99)	Loss_d 1.606 (1.606)	test_acc_d   0.11 (  0.11)	test_minacc_d   0.01 (  0.01)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.96 (  0.96)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/33/checkpoints/model_best.pth
Overall Timing[  0/  1]	epoch_time 0.0782 (0.0782)	validation_time 0.0067 (0.0067)	train_time 0.0684 (0.0684)
record: (train_acc, test_acc) (0.8461000289916992, 0.10600000619888306)
last accs (train_acc, test_acc) (0.8461000289916992, 0.10600000619888306)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.09it/s] 19%|#9        | 5/26 [00:00<00:00, 23.62it/s] 35%|###4      | 9/26 [00:00<00:00, 28.90it/s] 50%|#####     | 13/26 [00:00<00:00, 31.49it/s] 65%|######5   | 17/26 [00:00<00:00, 32.41it/s] 81%|########  | 21/26 [00:00<00:00, 33.50it/s] 96%|#########6| 25/26 [00:00<00:00, 33.82it/s]100%|##########| 26/26 [00:00<00:00, 29.59it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 26 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 27 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 28 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 29 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 30 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 31 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 32 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 33 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 34 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 35 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 36 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 37 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 38 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 39 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 40 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 41 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 42 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 43 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 44 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 45 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 46 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 47 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 48 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 49 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 50 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 51 400
penalty weights 0.0
Epoch: [1][  26/  26]	Loss 5.325 (7.318)	train_nll   0.41 (  0.42)	train_penalty   0.08 (  0.06)	weight_norm   4.91 (  6.90)	train_acc   0.86 (  0.85)	train_minacc   0.00 (  0.01)	train_majacc   1.00 (  1.00)	train_corr   0.00 (  0.00)	l1 6.6612 (6.9966)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 19.53it/s] 27%|##6       | 7/26 [00:00<00:00, 37.21it/s]                                               27%|##6       | 7/26 [00:00<00:00, 37.21it/s] 46%|####6     | 12/26 [00:00<00:00, 39.11it/s] 69%|######9   | 18/26 [00:00<00:00, 45.10it/s]                                                69%|######9   | 18/26 [00:00<00:00, 45.10it/s] 92%|#########2| 24/26 [00:00<00:00, 46.49it/s]100%|##########| 26/26 [00:00<00:00, 40.04it/s]
Test: [   0/  26]	Loss 0.419 (0.419)	test_acc   0.84 (  0.84)	test_minacc   0.00 (  0.00)	test_majacc   1.00 (  1.00)	Loss_d 0.419 (0.419)	test_acc_d   0.84 (  0.84)	test_minacc_d   0.00 (  0.00)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.98 (  0.98)
Test: [  10/  26]	Loss 0.450 (0.415)	test_acc   0.83 (  0.85)	test_minacc   0.00 (  0.00)	test_majacc   0.99 (  1.00)	Loss_d 0.450 (0.415)	test_acc_d   0.83 (  0.85)	test_minacc_d   0.00 (  0.00)	test_majacc_d   0.99 (  1.00)	test_corr_d   0.98 (  0.98)
Test: [  20/  26]	Loss 0.412 (0.411)	test_acc   0.84 (  0.85)	test_minacc   0.02 (  0.01)	test_majacc   1.00 (  1.00)	Loss_d 0.412 (0.411)	test_acc_d   0.84 (  0.85)	test_minacc_d   0.02 (  0.01)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.98 (  0.98)
Test: [  26/  26]	Loss 0.392 (0.406)	test_acc   0.86 (  0.85)	test_minacc   0.00 (  0.00)	test_majacc   1.00 (  1.00)	Loss_d 0.392 (0.406)	test_acc_d   0.86 (  0.85)	test_minacc_d   0.00 (  0.00)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.98 (  0.98)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.80it/s]
Test: [  0/  1]	Loss 1.891 (1.891)	test_acc   0.10 (  0.10)	test_minacc   0.00 (  0.00)	test_majacc   0.99 (  0.99)	Loss_d 1.891 (1.891)	test_acc_d   0.10 (  0.10)	test_minacc_d   0.00 (  0.00)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.97 (  0.97)
Test: [  1/  1]	Loss 1.891 (1.891)	test_acc   0.10 (  0.10)	test_minacc   0.00 (  0.00)	test_majacc   0.99 (  0.99)	Loss_d 1.891 (1.891)	test_acc_d   0.10 (  0.10)	test_minacc_d   0.00 (  0.00)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.97 (  0.97)
Overall Timing[  1/  1]	epoch_time 0.0361 (0.0572)	validation_time 0.0004 (0.0036)	train_time 0.0357 (0.0520)
record: (train_acc, test_acc) (0.8461000289916992, 0.10600000619888306)
last accs (train_acc, test_acc) (0.8487000209093094, 0.10000000149011612)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.50it/s] 19%|#9        | 5/26 [00:00<00:00, 21.62it/s] 35%|###4      | 9/26 [00:00<00:00, 26.39it/s] 50%|#####     | 13/26 [00:00<00:00, 27.44it/s] 65%|######5   | 17/26 [00:00<00:00, 29.82it/s] 81%|########  | 21/26 [00:00<00:00, 31.70it/s] 96%|#########6| 25/26 [00:00<00:00, 32.83it/s]100%|##########| 26/26 [00:00<00:00, 27.59it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 52 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 53 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 54 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 55 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 56 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 57 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 58 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 59 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 60 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 61 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 62 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 63 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 64 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 65 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 66 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 67 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 68 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 69 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 70 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 71 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 72 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 73 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 74 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 75 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 76 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 77 400
penalty weights 0.0
Epoch: [2][  26/  26]	Loss 3.240 (4.125)	train_nll   0.40 (  0.41)	train_penalty   0.07 (  0.06)	weight_norm   2.84 (  3.72)	train_acc   0.86 (  0.85)	train_minacc   0.00 (  0.01)	train_majacc   1.00 (  0.99)	train_corr   0.00 (  0.00)	l1 5.6361 (6.1081)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:00, 27.57it/s] 35%|###4      | 9/26 [00:00<00:00, 39.51it/s]                                               35%|###4      | 9/26 [00:00<00:00, 39.51it/s] 58%|#####7    | 15/26 [00:00<00:00, 47.11it/s]                                                58%|#####7    | 15/26 [00:00<00:00, 47.11it/s] 81%|########  | 21/26 [00:00<00:00, 46.95it/s]100%|##########| 26/26 [00:00<00:00, 42.47it/s]
Test: [   0/  26]	Loss 0.411 (0.411)	test_acc   0.85 (  0.85)	test_minacc   0.00 (  0.00)	test_majacc   1.00 (  1.00)	Loss_d 0.411 (0.411)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.00 (  0.00)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.98 (  0.98)
Test: [  10/  26]	Loss 0.437 (0.402)	test_acc   0.83 (  0.85)	test_minacc   0.00 (  0.01)	test_majacc   0.99 (  1.00)	Loss_d 0.437 (0.402)	test_acc_d   0.83 (  0.85)	test_minacc_d   0.00 (  0.01)	test_majacc_d   0.99 (  1.00)	test_corr_d   0.98 (  0.98)
Test: [  20/  26]	Loss 0.380 (0.397)	test_acc   0.84 (  0.85)	test_minacc   0.00 (  0.00)	test_majacc   1.00 (  1.00)	Loss_d 0.380 (0.397)	test_acc_d   0.84 (  0.85)	test_minacc_d   0.00 (  0.00)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.98 (  0.98)
Test: [  26/  26]	Loss 0.380 (0.392)	test_acc   0.86 (  0.85)	test_minacc   0.00 (  0.00)	test_majacc   1.00 (  1.00)	Loss_d 0.380 (0.392)	test_acc_d   0.86 (  0.85)	test_minacc_d   0.00 (  0.00)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.98 (  0.98)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.56it/s]
Test: [  0/  1]	Loss 1.847 (1.847)	test_acc   0.10 (  0.10)	test_minacc   0.00 (  0.00)	test_majacc   0.99 (  0.99)	Loss_d 1.847 (1.847)	test_acc_d   0.10 (  0.10)	test_minacc_d   0.00 (  0.00)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.96 (  0.96)
Test: [  1/  1]	Loss 1.847 (1.847)	test_acc   0.10 (  0.10)	test_minacc   0.00 (  0.00)	test_majacc   0.99 (  0.99)	Loss_d 1.847 (1.847)	test_acc_d   0.10 (  0.10)	test_minacc_d   0.00 (  0.00)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.96 (  0.96)
Overall Timing[  2/  1]	epoch_time 0.0357 (0.0500)	validation_time 0.0003 (0.0025)	train_time 0.0354 (0.0465)
record: (train_acc, test_acc) (0.8461000289916992, 0.10600000619888306)
last accs (train_acc, test_acc) (0.8487000255584717, 0.10300000756978989)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.37it/s] 19%|#9        | 5/26 [00:00<00:00, 21.01it/s] 35%|###4      | 9/26 [00:00<00:00, 26.13it/s] 50%|#####     | 13/26 [00:00<00:00, 28.66it/s] 65%|######5   | 17/26 [00:00<00:00, 30.51it/s] 81%|########  | 21/26 [00:00<00:00, 31.64it/s] 96%|#########6| 25/26 [00:00<00:00, 32.71it/s]100%|##########| 26/26 [00:00<00:00, 27.44it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 78 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 79 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 80 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 81 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 82 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 83 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 84 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 85 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 86 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 87 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 88 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 89 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 90 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 91 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 92 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 93 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 94 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 95 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 96 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 97 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 98 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 99 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 100 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 101 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 102 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 103 400
penalty weights 0.0
Epoch: [3][  26/  26]	Loss 2.147 (2.635)	train_nll   0.36 (  0.39)	train_penalty   0.05 (  0.05)	weight_norm   1.78 (  2.24)	train_acc   0.84 (  0.84)	train_minacc   0.00 (  0.05)	train_majacc   0.98 (  0.99)	train_corr   0.00 (  0.00)	l1 4.9916 (5.2053)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.27it/s] 27%|##6       | 7/26 [00:00<00:00, 36.66it/s]                                               27%|##6       | 7/26 [00:00<00:00, 36.66it/s] 50%|#####     | 13/26 [00:00<00:00, 40.53it/s] 73%|#######3  | 19/26 [00:00<00:00, 46.07it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 46.07it/s] 96%|#########6| 25/26 [00:00<00:00, 45.09it/s]100%|##########| 26/26 [00:00<00:00, 39.55it/s]
Test: [   0/  26]	Loss 0.381 (0.381)	test_acc   0.84 (  0.84)	test_minacc   0.00 (  0.00)	test_majacc   0.99 (  0.99)	Loss_d 0.381 (0.381)	test_acc_d   0.84 (  0.84)	test_minacc_d   0.00 (  0.00)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.96 (  0.96)
Test: [  10/  26]	Loss 0.425 (0.387)	test_acc   0.83 (  0.84)	test_minacc   0.00 (  0.02)	test_majacc   0.99 (  0.99)	Loss_d 0.425 (0.387)	test_acc_d   0.83 (  0.84)	test_minacc_d   0.00 (  0.02)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.95 (  0.96)
Test: [  20/  26]	Loss 0.389 (0.381)	test_acc   0.83 (  0.85)	test_minacc   0.00 (  0.02)	test_majacc   0.99 (  0.99)	Loss_d 0.389 (0.381)	test_acc_d   0.83 (  0.85)	test_minacc_d   0.00 (  0.02)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.96 (  0.96)
Test: [  26/  26]	Loss 0.324 (0.374)	test_acc   0.85 (  0.85)	test_minacc   0.03 (  0.02)	test_majacc   0.99 (  0.99)	Loss_d 0.324 (0.374)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.03 (  0.02)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.96 (  0.96)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 67.10it/s]
Test: [  0/  1]	Loss 1.729 (1.729)	test_acc   0.12 (  0.12)	test_minacc   0.02 (  0.02)	test_majacc   0.99 (  0.99)	Loss_d 1.729 (1.729)	test_acc_d   0.12 (  0.12)	test_minacc_d   0.02 (  0.02)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.93 (  0.93)
Test: [  1/  1]	Loss 1.729 (1.729)	test_acc   0.12 (  0.12)	test_minacc   0.02 (  0.02)	test_majacc   0.99 (  0.99)	Loss_d 1.729 (1.729)	test_acc_d   0.12 (  0.12)	test_minacc_d   0.02 (  0.02)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.93 (  0.93)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/33/checkpoints/model_best.pth
Overall Timing[  3/  1]	epoch_time 0.0364 (0.0466)	validation_time 0.0006 (0.0020)	train_time 0.0358 (0.0438)
record: (train_acc, test_acc) (0.8482000184059143, 0.11800000816583633)
last accs (train_acc, test_acc) (0.8482000184059143, 0.11800000816583633)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 18.45it/s] 23%|##3       | 6/26 [00:00<00:00, 27.82it/s] 38%|###8      | 10/26 [00:00<00:00, 31.08it/s] 54%|#####3    | 14/26 [00:00<00:00, 32.77it/s] 69%|######9   | 18/26 [00:00<00:00, 33.75it/s] 85%|########4 | 22/26 [00:00<00:00, 34.19it/s]100%|##########| 26/26 [00:00<00:00, 34.33it/s]100%|##########| 26/26 [00:00<00:00, 30.39it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 104 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 105 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 106 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 107 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 108 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 109 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 110 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 111 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 112 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 113 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 114 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 115 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 116 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 117 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 118 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 119 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 120 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 121 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 122 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 123 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 124 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 125 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 126 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 127 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 128 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 129 400
penalty weights 0.0
Epoch: [4][  26/  26]	Loss 1.490 (1.806)	train_nll   0.34 (  0.37)	train_penalty   0.02 (  0.04)	weight_norm   1.15 (  1.44)	train_acc   0.84 (  0.85)	train_minacc   0.14 (  0.07)	train_majacc   0.96 (  0.98)	train_corr   0.00 (  0.00)	l1 5.0815 (4.9744)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 17.79it/s] 27%|##6       | 7/26 [00:00<00:00, 33.98it/s]                                               27%|##6       | 7/26 [00:00<00:00, 33.98it/s] 46%|####6     | 12/26 [00:00<00:00, 39.30it/s] 69%|######9   | 18/26 [00:00<00:00, 45.82it/s]                                                69%|######9   | 18/26 [00:00<00:00, 45.82it/s] 92%|#########2| 24/26 [00:00<00:00, 47.87it/s]100%|##########| 26/26 [00:00<00:00, 40.10it/s]
Test: [   0/  26]	Loss 0.368 (0.368)	test_acc   0.83 (  0.83)	test_minacc   0.07 (  0.07)	test_majacc   0.97 (  0.97)	Loss_d 0.368 (0.368)	test_acc_d   0.83 (  0.83)	test_minacc_d   0.07 (  0.07)	test_majacc_d   0.97 (  0.97)	test_corr_d   0.92 (  0.92)
Test: [  10/  26]	Loss 0.394 (0.364)	test_acc   0.85 (  0.85)	test_minacc   0.16 (  0.10)	test_majacc   0.98 (  0.98)	Loss_d 0.394 (0.364)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.16 (  0.10)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.92 (  0.92)
Test: [  20/  26]	Loss 0.353 (0.358)	test_acc   0.85 (  0.85)	test_minacc   0.11 (  0.10)	test_majacc   0.99 (  0.98)	Loss_d 0.353 (0.358)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.11 (  0.10)	test_majacc_d   0.99 (  0.98)	test_corr_d   0.92 (  0.93)
Test: [  26/  26]	Loss 0.307 (0.351)	test_acc   0.86 (  0.85)	test_minacc   0.14 (  0.10)	test_majacc   0.99 (  0.99)	Loss_d 0.307 (0.351)	test_acc_d   0.86 (  0.85)	test_minacc_d   0.14 (  0.10)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.92 (  0.93)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.52it/s]
Test: [  0/  1]	Loss 1.699 (1.699)	test_acc   0.22 (  0.22)	test_minacc   0.13 (  0.13)	test_majacc   0.99 (  0.99)	Loss_d 1.699 (1.699)	test_acc_d   0.22 (  0.22)	test_minacc_d   0.13 (  0.13)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.78 (  0.78)
Test: [  1/  1]	Loss 1.699 (1.699)	test_acc   0.22 (  0.22)	test_minacc   0.13 (  0.13)	test_majacc   0.99 (  0.99)	Loss_d 1.699 (1.699)	test_acc_d   0.22 (  0.22)	test_minacc_d   0.13 (  0.13)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.78 (  0.78)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/33/checkpoints/model_best.pth
Overall Timing[  4/  1]	epoch_time 0.0371 (0.0447)	validation_time 0.0003 (0.0017)	train_time 0.0367 (0.0424)
record: (train_acc, test_acc) (0.8519000242948532, 0.21900001168251038)
last accs (train_acc, test_acc) (0.8519000242948532, 0.21900001168251038)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.94it/s] 19%|#9        | 5/26 [00:00<00:01, 19.84it/s] 35%|###4      | 9/26 [00:00<00:00, 25.63it/s] 50%|#####     | 13/26 [00:00<00:00, 29.25it/s] 65%|######5   | 17/26 [00:00<00:00, 31.43it/s] 81%|########  | 21/26 [00:00<00:00, 32.74it/s] 96%|#########6| 25/26 [00:00<00:00, 33.23it/s]100%|##########| 26/26 [00:00<00:00, 27.44it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 130 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 131 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 132 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 133 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 134 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 135 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 136 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 137 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 138 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 139 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 140 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 141 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 142 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 143 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 144 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 145 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 146 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 147 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 148 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 149 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 150 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 151 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 152 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 153 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 154 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 155 400
penalty weights 0.0
Epoch: [5][  26/  26]	Loss 1.109 (1.303)	train_nll   0.35 (  0.37)	train_penalty   0.03 (  0.03)	weight_norm   0.76 (  0.94)	train_acc   0.86 (  0.85)	train_minacc   0.14 (  0.10)	train_majacc   0.98 (  0.98)	train_corr   0.00 (  0.00)	l1 5.6513 (5.3436)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:00, 26.77it/s] 35%|###4      | 9/26 [00:00<00:00, 37.05it/s]                                               35%|###4      | 9/26 [00:00<00:00, 37.05it/s] 58%|#####7    | 15/26 [00:00<00:00, 45.02it/s]                                                58%|#####7    | 15/26 [00:00<00:00, 45.02it/s] 81%|########  | 21/26 [00:00<00:00, 44.96it/s]100%|##########| 26/26 [00:00<00:00, 41.10it/s]
Test: [   0/  26]	Loss 0.347 (0.347)	test_acc   0.85 (  0.85)	test_minacc   0.23 (  0.23)	test_majacc   0.97 (  0.97)	Loss_d 0.347 (0.347)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.23 (  0.23)	test_majacc_d   0.97 (  0.97)	test_corr_d   0.89 (  0.89)
Test: [  10/  26]	Loss 0.392 (0.354)	test_acc   0.85 (  0.85)	test_minacc   0.25 (  0.21)	test_majacc   0.97 (  0.96)	Loss_d 0.392 (0.354)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.25 (  0.21)	test_majacc_d   0.97 (  0.96)	test_corr_d   0.89 (  0.90)
Test: [  20/  26]	Loss 0.332 (0.351)	test_acc   0.85 (  0.85)	test_minacc   0.30 (  0.22)	test_majacc   0.96 (  0.96)	Loss_d 0.332 (0.351)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.30 (  0.22)	test_majacc_d   0.96 (  0.96)	test_corr_d   0.89 (  0.90)
Test: [  26/  26]	Loss 0.325 (0.346)	test_acc   0.84 (  0.85)	test_minacc   0.19 (  0.22)	test_majacc   0.95 (  0.97)	Loss_d 0.325 (0.346)	test_acc_d   0.84 (  0.85)	test_minacc_d   0.19 (  0.22)	test_majacc_d   0.95 (  0.97)	test_corr_d   0.90 (  0.90)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.72it/s]
Test: [  0/  1]	Loss 1.532 (1.532)	test_acc   0.30 (  0.30)	test_minacc   0.23 (  0.23)	test_majacc   0.98 (  0.98)	Loss_d 1.532 (1.532)	test_acc_d   0.30 (  0.30)	test_minacc_d   0.23 (  0.23)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.68 (  0.68)
Test: [  1/  1]	Loss 1.532 (1.532)	test_acc   0.30 (  0.30)	test_minacc   0.23 (  0.23)	test_majacc   0.98 (  0.98)	Loss_d 1.532 (1.532)	test_acc_d   0.30 (  0.30)	test_minacc_d   0.23 (  0.23)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.68 (  0.68)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/33/checkpoints/model_best.pth
Overall Timing[  5/  1]	epoch_time 0.0359 (0.0432)	validation_time 0.0004 (0.0015)	train_time 0.0355 (0.0412)
record: (train_acc, test_acc) (0.8536000269651413, 0.30300000309944153)
last accs (train_acc, test_acc) (0.8536000269651413, 0.30300000309944153)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.34it/s] 19%|#9        | 5/26 [00:00<00:01, 20.70it/s] 35%|###4      | 9/26 [00:00<00:00, 26.28it/s] 50%|#####     | 13/26 [00:00<00:00, 29.30it/s] 65%|######5   | 17/26 [00:00<00:00, 31.35it/s] 81%|########  | 21/26 [00:00<00:00, 32.69it/s] 96%|#########6| 25/26 [00:00<00:00, 33.52it/s]100%|##########| 26/26 [00:00<00:00, 27.72it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 156 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 157 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 158 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 159 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 160 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 161 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 162 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 163 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 164 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 165 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 166 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 167 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 168 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 169 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 170 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 171 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 172 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 173 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 174 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 175 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 176 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 177 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 178 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 179 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 180 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 181 400
penalty weights 0.0
Epoch: [6][  26/  26]	Loss 0.848 (0.974)	train_nll   0.35 (  0.36)	train_penalty   0.05 (  0.03)	weight_norm   0.50 (  0.62)	train_acc   0.85 (  0.85)	train_minacc   0.00 (  0.12)	train_majacc   0.99 (  0.98)	train_corr   0.00 (  0.00)	l1 6.9373 (6.2406)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 19.77it/s] 31%|###       | 8/26 [00:00<00:00, 41.91it/s]                                               31%|###       | 8/26 [00:00<00:00, 41.91it/s] 50%|#####     | 13/26 [00:00<00:00, 41.52it/s] 73%|#######3  | 19/26 [00:00<00:00, 47.98it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 47.98it/s] 96%|#########6| 25/26 [00:00<00:00, 47.90it/s]100%|##########| 26/26 [00:00<00:00, 41.53it/s]
Test: [   0/  26]	Loss 0.390 (0.390)	test_acc   0.84 (  0.84)	test_minacc   0.02 (  0.02)	test_majacc   0.99 (  0.99)	Loss_d 0.390 (0.390)	test_acc_d   0.84 (  0.84)	test_minacc_d   0.02 (  0.02)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.94 (  0.94)
Test: [  10/  26]	Loss 0.405 (0.378)	test_acc   0.83 (  0.85)	test_minacc   0.02 (  0.02)	test_majacc   0.99 (  1.00)	Loss_d 0.405 (0.378)	test_acc_d   0.83 (  0.85)	test_minacc_d   0.02 (  0.02)	test_majacc_d   0.99 (  1.00)	test_corr_d   0.94 (  0.94)
Test: [  20/  26]	Loss 0.363 (0.377)	test_acc   0.83 (  0.85)	test_minacc   0.02 (  0.02)	test_majacc   0.99 (  1.00)	Loss_d 0.363 (0.377)	test_acc_d   0.83 (  0.85)	test_minacc_d   0.02 (  0.02)	test_majacc_d   0.99 (  1.00)	test_corr_d   0.94 (  0.94)
Test: [  26/  26]	Loss 0.344 (0.371)	test_acc   0.86 (  0.85)	test_minacc   0.03 (  0.02)	test_majacc   1.00 (  1.00)	Loss_d 0.344 (0.371)	test_acc_d   0.86 (  0.85)	test_minacc_d   0.03 (  0.02)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.94 (  0.94)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.70it/s]
Test: [  0/  1]	Loss 1.816 (1.816)	test_acc   0.15 (  0.15)	test_minacc   0.05 (  0.05)	test_majacc   0.99 (  0.99)	Loss_d 1.816 (1.816)	test_acc_d   0.15 (  0.15)	test_minacc_d   0.05 (  0.05)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.86 (  0.86)
Test: [  1/  1]	Loss 1.816 (1.816)	test_acc   0.15 (  0.15)	test_minacc   0.05 (  0.05)	test_majacc   0.99 (  0.99)	Loss_d 1.816 (1.816)	test_acc_d   0.15 (  0.15)	test_minacc_d   0.05 (  0.05)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.86 (  0.86)
Overall Timing[  6/  1]	epoch_time 0.0369 (0.0423)	validation_time 0.0004 (0.0013)	train_time 0.0365 (0.0405)
record: (train_acc, test_acc) (0.8536000269651413, 0.30300000309944153)
last accs (train_acc, test_acc) (0.8494000242352485, 0.14600001275539398)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.06it/s] 19%|#9        | 5/26 [00:00<00:00, 22.43it/s] 35%|###4      | 9/26 [00:00<00:00, 27.88it/s] 50%|#####     | 13/26 [00:00<00:00, 30.78it/s] 65%|######5   | 17/26 [00:00<00:00, 32.53it/s] 81%|########  | 21/26 [00:00<00:00, 33.55it/s] 96%|#########6| 25/26 [00:00<00:00, 34.35it/s]100%|##########| 26/26 [00:00<00:00, 29.18it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 182 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 183 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 184 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 185 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 186 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 187 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 188 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 189 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 190 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 191 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 192 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 193 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 194 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 195 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 196 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 197 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 198 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 199 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 200 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 201 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 202 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 203 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 204 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 205 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 206 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 207 400
penalty weights 0.0
Epoch: [7][  26/  26]	Loss 0.694 (0.775)	train_nll   0.34 (  0.35)	train_penalty   0.02 (  0.03)	weight_norm   0.36 (  0.42)	train_acc   0.85 (  0.85)	train_minacc   0.17 (  0.17)	train_majacc   0.96 (  0.97)	train_corr   0.00 (  0.00)	l1 8.2323 (7.4430)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.17it/s] 27%|##6       | 7/26 [00:00<00:00, 34.59it/s]                                               27%|##6       | 7/26 [00:00<00:00, 34.59it/s] 46%|####6     | 12/26 [00:00<00:00, 38.33it/s] 69%|######9   | 18/26 [00:00<00:00, 45.38it/s]                                                69%|######9   | 18/26 [00:00<00:00, 45.38it/s] 92%|#########2| 24/26 [00:00<00:00, 46.08it/s]100%|##########| 26/26 [00:00<00:00, 39.28it/s]
Test: [   0/  26]	Loss 0.369 (0.369)	test_acc   0.84 (  0.84)	test_minacc   0.10 (  0.10)	test_majacc   0.97 (  0.97)	Loss_d 0.369 (0.369)	test_acc_d   0.84 (  0.84)	test_minacc_d   0.10 (  0.10)	test_majacc_d   0.97 (  0.97)	test_corr_d   0.93 (  0.93)
Test: [  10/  26]	Loss 0.394 (0.369)	test_acc   0.84 (  0.85)	test_minacc   0.11 (  0.08)	test_majacc   0.99 (  0.99)	Loss_d 0.394 (0.369)	test_acc_d   0.84 (  0.85)	test_minacc_d   0.11 (  0.08)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.93 (  0.93)
Test: [  20/  26]	Loss 0.347 (0.364)	test_acc   0.85 (  0.85)	test_minacc   0.09 (  0.10)	test_majacc   0.99 (  0.99)	Loss_d 0.347 (0.364)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.09 (  0.10)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.93 (  0.93)
Test: [  26/  26]	Loss 0.316 (0.357)	test_acc   0.87 (  0.85)	test_minacc   0.14 (  0.10)	test_majacc   0.99 (  0.99)	Loss_d 0.316 (0.357)	test_acc_d   0.87 (  0.85)	test_minacc_d   0.14 (  0.10)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.93 (  0.93)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.38it/s]
Test: [  0/  1]	Loss 1.771 (1.771)	test_acc   0.19 (  0.19)	test_minacc   0.10 (  0.10)	test_majacc   0.99 (  0.99)	Loss_d 1.771 (1.771)	test_acc_d   0.19 (  0.19)	test_minacc_d   0.10 (  0.10)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.83 (  0.83)
Test: [  1/  1]	Loss 1.771 (1.771)	test_acc   0.19 (  0.19)	test_minacc   0.10 (  0.10)	test_majacc   0.99 (  0.99)	Loss_d 1.771 (1.771)	test_acc_d   0.19 (  0.19)	test_minacc_d   0.10 (  0.10)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.83 (  0.83)
Overall Timing[  7/  1]	epoch_time 0.0353 (0.0414)	validation_time 0.0003 (0.0012)	train_time 0.0349 (0.0398)
record: (train_acc, test_acc) (0.8536000269651413, 0.30300000309944153)
last accs (train_acc, test_acc) (0.8518000268340111, 0.19300000369548798)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.20it/s] 19%|#9        | 5/26 [00:00<00:00, 23.74it/s] 35%|###4      | 9/26 [00:00<00:00, 28.58it/s] 50%|#####     | 13/26 [00:00<00:00, 31.42it/s] 65%|######5   | 17/26 [00:00<00:00, 33.08it/s] 81%|########  | 21/26 [00:00<00:00, 34.14it/s] 96%|#########6| 25/26 [00:00<00:00, 34.93it/s]100%|##########| 26/26 [00:00<00:00, 29.96it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 208 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 209 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 210 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 211 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 212 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 213 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 214 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 215 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 216 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 217 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 218 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 219 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 220 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 221 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 222 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 223 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 224 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 225 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 226 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 227 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 228 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 229 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 230 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 231 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 232 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 233 400
penalty weights 0.0
Epoch: [8][  26/  26]	Loss 0.585 (0.649)	train_nll   0.33 (  0.35)	train_penalty   0.02 (  0.03)	weight_norm   0.25 (  0.30)	train_acc   0.84 (  0.85)	train_minacc   0.42 (  0.17)	train_majacc   0.91 (  0.97)	train_corr   0.00 (  0.00)	l1 10.1133 (9.0108)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.46it/s] 27%|##6       | 7/26 [00:00<00:00, 28.39it/s]                                               27%|##6       | 7/26 [00:00<00:00, 28.39it/s] 50%|#####     | 13/26 [00:00<00:00, 35.98it/s] 73%|#######3  | 19/26 [00:00<00:00, 43.17it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 43.17it/s] 96%|#########6| 25/26 [00:00<00:00, 44.00it/s]100%|##########| 26/26 [00:00<00:00, 35.76it/s]
Test: [   0/  26]	Loss 0.320 (0.320)	test_acc   0.85 (  0.85)	test_minacc   0.17 (  0.17)	test_majacc   0.98 (  0.98)	Loss_d 0.320 (0.320)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.17 (  0.17)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.89 (  0.89)
Test: [  10/  26]	Loss 0.362 (0.330)	test_acc   0.86 (  0.85)	test_minacc   0.30 (  0.19)	test_majacc   0.97 (  0.97)	Loss_d 0.362 (0.330)	test_acc_d   0.86 (  0.85)	test_minacc_d   0.30 (  0.19)	test_majacc_d   0.97 (  0.97)	test_corr_d   0.88 (  0.89)
Test: [  20/  26]	Loss 0.308 (0.329)	test_acc   0.85 (  0.85)	test_minacc   0.23 (  0.18)	test_majacc   0.98 (  0.97)	Loss_d 0.308 (0.329)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.23 (  0.18)	test_majacc_d   0.98 (  0.97)	test_corr_d   0.89 (  0.90)
Test: [  26/  26]	Loss 0.294 (0.322)	test_acc   0.88 (  0.86)	test_minacc   0.22 (  0.20)	test_majacc   0.99 (  0.98)	Loss_d 0.294 (0.322)	test_acc_d   0.88 (  0.86)	test_minacc_d   0.22 (  0.20)	test_majacc_d   0.99 (  0.98)	test_corr_d   0.90 (  0.90)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 67.59it/s]
Test: [  0/  1]	Loss 1.474 (1.474)	test_acc   0.32 (  0.32)	test_minacc   0.25 (  0.25)	test_majacc   0.98 (  0.98)	Loss_d 1.474 (1.474)	test_acc_d   0.32 (  0.32)	test_minacc_d   0.25 (  0.25)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.61 (  0.61)
Test: [  1/  1]	Loss 1.474 (1.474)	test_acc   0.32 (  0.32)	test_minacc   0.25 (  0.25)	test_majacc   0.98 (  0.98)	Loss_d 1.474 (1.474)	test_acc_d   0.32 (  0.32)	test_minacc_d   0.25 (  0.25)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.61 (  0.61)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/33/checkpoints/model_best.pth
Overall Timing[  8/  1]	epoch_time 0.0374 (0.0410)	validation_time 0.0004 (0.0011)	train_time 0.0370 (0.0395)
record: (train_acc, test_acc) (0.8581000233888626, 0.3190000057220459)
last accs (train_acc, test_acc) (0.8581000233888626, 0.3190000057220459)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.40it/s] 19%|#9        | 5/26 [00:00<00:00, 21.28it/s] 35%|###4      | 9/26 [00:00<00:00, 26.72it/s] 50%|#####     | 13/26 [00:00<00:00, 29.54it/s] 65%|######5   | 17/26 [00:00<00:00, 31.63it/s] 81%|########  | 21/26 [00:00<00:00, 33.07it/s] 96%|#########6| 25/26 [00:00<00:00, 33.47it/s]100%|##########| 26/26 [00:00<00:00, 28.32it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 234 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 235 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 236 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 237 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 238 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 239 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 240 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 241 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 242 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 243 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 244 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 245 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 246 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 247 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 248 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 249 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 250 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 251 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 252 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 253 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 254 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 255 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 256 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 257 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 258 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 259 400
penalty weights 0.0
Epoch: [9][  26/  26]	Loss 0.495 (0.555)	train_nll   0.32 (  0.34)	train_penalty   0.02 (  0.02)	weight_norm   0.18 (  0.21)	train_acc   0.84 (  0.85)	train_minacc   0.14 (  0.18)	train_majacc   0.95 (  0.97)	train_corr   0.00 (  0.00)	l1 12.0089 (11.2048)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  6.01it/s] 31%|###       | 8/26 [00:00<00:00, 33.91it/s]                                               31%|###       | 8/26 [00:00<00:00, 33.91it/s] 50%|#####     | 13/26 [00:00<00:00, 37.57it/s] 73%|#######3  | 19/26 [00:00<00:00, 44.70it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 44.70it/s] 96%|#########6| 25/26 [00:00<00:00, 45.50it/s]100%|##########| 26/26 [00:00<00:00, 37.72it/s]
Test: [   0/  26]	Loss 0.342 (0.342)	test_acc   0.84 (  0.84)	test_minacc   0.12 (  0.12)	test_majacc   0.98 (  0.98)	Loss_d 0.342 (0.342)	test_acc_d   0.84 (  0.84)	test_minacc_d   0.12 (  0.12)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.92 (  0.92)
Test: [  10/  26]	Loss 0.366 (0.343)	test_acc   0.85 (  0.85)	test_minacc   0.14 (  0.08)	test_majacc   0.98 (  0.99)	Loss_d 0.366 (0.343)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.14 (  0.08)	test_majacc_d   0.98 (  0.99)	test_corr_d   0.92 (  0.93)
Test: [  20/  26]	Loss 0.338 (0.343)	test_acc   0.84 (  0.85)	test_minacc   0.09 (  0.10)	test_majacc   0.99 (  0.99)	Loss_d 0.338 (0.343)	test_acc_d   0.84 (  0.85)	test_minacc_d   0.09 (  0.10)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.93 (  0.93)
Test: [  26/  26]	Loss 0.290 (0.334)	test_acc   0.87 (  0.86)	test_minacc   0.17 (  0.11)	test_majacc   0.99 (  0.99)	Loss_d 0.290 (0.334)	test_acc_d   0.87 (  0.86)	test_minacc_d   0.17 (  0.11)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.93 (  0.93)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 65.97it/s]
Test: [  0/  1]	Loss 1.668 (1.668)	test_acc   0.25 (  0.25)	test_minacc   0.17 (  0.17)	test_majacc   1.00 (  1.00)	Loss_d 1.668 (1.668)	test_acc_d   0.25 (  0.25)	test_minacc_d   0.17 (  0.17)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.77 (  0.77)
Test: [  1/  1]	Loss 1.668 (1.668)	test_acc   0.25 (  0.25)	test_minacc   0.17 (  0.17)	test_majacc   1.00 (  1.00)	Loss_d 1.668 (1.668)	test_acc_d   0.25 (  0.25)	test_minacc_d   0.17 (  0.17)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.77 (  0.77)
Overall Timing[  9/  1]	epoch_time 0.0368 (0.0406)	validation_time 0.0003 (0.0010)	train_time 0.0365 (0.0392)
record: (train_acc, test_acc) (0.8581000233888626, 0.3190000057220459)
last accs (train_acc, test_acc) (0.8559000244736672, 0.25)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.57it/s] 19%|#9        | 5/26 [00:00<00:00, 23.47it/s] 35%|###4      | 9/26 [00:00<00:00, 28.08it/s] 50%|#####     | 13/26 [00:00<00:00, 30.89it/s] 65%|######5   | 17/26 [00:00<00:00, 31.49it/s] 81%|########  | 21/26 [00:00<00:00, 32.88it/s] 96%|#########6| 25/26 [00:00<00:00, 34.01it/s]100%|##########| 26/26 [00:00<00:00, 29.02it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 260 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 261 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 262 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 263 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 264 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 265 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 266 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 267 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 268 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 269 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 270 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 271 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 272 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 273 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 274 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 275 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 276 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 277 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 278 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 279 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 280 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 281 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 282 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 283 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 284 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 285 400
penalty weights 0.0
Epoch: [10][  26/  26]	Loss 0.483 (0.500)	train_nll   0.34 (  0.34)	train_penalty   0.02 (  0.02)	weight_norm   0.14 (  0.16)	train_acc   0.86 (  0.85)	train_minacc   0.42 (  0.22)	train_majacc   0.93 (  0.96)	train_corr   0.00 (  0.00)	l1 13.7556 (12.8470)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 19.50it/s] 15%|#5        | 4/26 [00:00<00:01, 19.20it/s]                                               15%|#5        | 4/26 [00:00<00:01, 19.20it/s] 42%|####2     | 11/26 [00:00<00:00, 39.39it/s] 65%|######5   | 17/26 [00:00<00:00, 46.57it/s]                                                65%|######5   | 17/26 [00:00<00:00, 46.57it/s] 88%|########8 | 23/26 [00:00<00:00, 46.98it/s]100%|##########| 26/26 [00:00<00:00, 40.21it/s]
Test: [   0/  26]	Loss 0.339 (0.339)	test_acc   0.84 (  0.84)	test_minacc   0.25 (  0.25)	test_majacc   0.95 (  0.95)	Loss_d 0.339 (0.339)	test_acc_d   0.84 (  0.84)	test_minacc_d   0.25 (  0.25)	test_majacc_d   0.95 (  0.95)	test_corr_d   0.90 (  0.90)
Test: [  10/  26]	Loss 0.360 (0.347)	test_acc   0.84 (  0.85)	test_minacc   0.22 (  0.19)	test_majacc   0.96 (  0.97)	Loss_d 0.360 (0.347)	test_acc_d   0.84 (  0.85)	test_minacc_d   0.22 (  0.19)	test_majacc_d   0.96 (  0.97)	test_corr_d   0.90 (  0.92)
Test: [  20/  26]	Loss 0.325 (0.347)	test_acc   0.87 (  0.85)	test_minacc   0.28 (  0.19)	test_majacc   0.98 (  0.97)	Loss_d 0.325 (0.347)	test_acc_d   0.87 (  0.85)	test_minacc_d   0.28 (  0.19)	test_majacc_d   0.98 (  0.97)	test_corr_d   0.92 (  0.92)
Test: [  26/  26]	Loss 0.274 (0.337)	test_acc   0.89 (  0.86)	test_minacc   0.31 (  0.21)	test_majacc   0.99 (  0.97)	Loss_d 0.274 (0.337)	test_acc_d   0.89 (  0.86)	test_minacc_d   0.31 (  0.21)	test_majacc_d   0.99 (  0.97)	test_corr_d   0.92 (  0.92)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 59.78it/s]
Test: [  0/  1]	Loss 1.603 (1.603)	test_acc   0.35 (  0.35)	test_minacc   0.28 (  0.28)	test_majacc   0.98 (  0.98)	Loss_d 1.603 (1.603)	test_acc_d   0.35 (  0.35)	test_minacc_d   0.28 (  0.28)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.68 (  0.68)
Test: [  1/  1]	Loss 1.603 (1.603)	test_acc   0.35 (  0.35)	test_minacc   0.28 (  0.28)	test_majacc   0.98 (  0.98)	Loss_d 1.603 (1.603)	test_acc_d   0.35 (  0.35)	test_minacc_d   0.28 (  0.28)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.68 (  0.68)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/33/checkpoints/model_best.pth
Overall Timing[ 10/  1]	epoch_time 0.0365 (0.0402)	validation_time 0.0004 (0.0010)	train_time 0.0361 (0.0389)
record: (train_acc, test_acc) (0.8580000285506248, 0.3460000157356262)
last accs (train_acc, test_acc) (0.8580000285506248, 0.3460000157356262)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  6.19it/s] 19%|#9        | 5/26 [00:00<00:01, 20.38it/s] 35%|###4      | 9/26 [00:00<00:00, 26.70it/s] 50%|#####     | 13/26 [00:00<00:00, 30.30it/s] 65%|######5   | 17/26 [00:00<00:00, 32.21it/s] 81%|########  | 21/26 [00:00<00:00, 33.68it/s] 96%|#########6| 25/26 [00:00<00:00, 34.62it/s]100%|##########| 26/26 [00:00<00:00, 28.74it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 286 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 287 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 288 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 289 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 290 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 291 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 292 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 293 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 294 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 295 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 296 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 297 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 298 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 299 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 300 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 301 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 302 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 303 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 304 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 305 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 306 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 307 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 308 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 309 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 310 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 311 400
penalty weights 0.0
Epoch: [11][  26/  26]	Loss 0.450 (0.477)	train_nll   0.32 (  0.34)	train_penalty   0.01 (  0.02)	weight_norm   0.13 (  0.14)	train_acc   0.85 (  0.85)	train_minacc   0.44 (  0.23)	train_majacc   0.92 (  0.96)	train_corr   0.00 (  0.00)	l1 15.3018 (14.5655)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:00, 23.51it/s] 35%|###4      | 9/26 [00:00<00:00, 39.94it/s]                                               35%|###4      | 9/26 [00:00<00:00, 39.94it/s] 58%|#####7    | 15/26 [00:00<00:00, 44.83it/s] 77%|#######6  | 20/26 [00:00<00:00, 46.50it/s]                                                77%|#######6  | 20/26 [00:00<00:00, 46.50it/s]100%|##########| 26/26 [00:00<00:00, 50.90it/s]100%|##########| 26/26 [00:00<00:00, 42.09it/s]
Test: [   0/  26]	Loss 0.320 (0.320)	test_acc   0.87 (  0.87)	test_minacc   0.53 (  0.53)	test_majacc   0.93 (  0.93)	Loss_d 0.320 (0.320)	test_acc_d   0.87 (  0.87)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.93 (  0.93)	test_corr_d   0.85 (  0.85)
Test: [  10/  26]	Loss 0.360 (0.330)	test_acc   0.85 (  0.85)	test_minacc   0.42 (  0.39)	test_majacc   0.93 (  0.94)	Loss_d 0.360 (0.330)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.42 (  0.39)	test_majacc_d   0.93 (  0.94)	test_corr_d   0.85 (  0.87)
Test: [  20/  26]	Loss 0.331 (0.332)	test_acc   0.86 (  0.85)	test_minacc   0.42 (  0.37)	test_majacc   0.95 (  0.94)	Loss_d 0.331 (0.332)	test_acc_d   0.86 (  0.85)	test_minacc_d   0.42 (  0.37)	test_majacc_d   0.95 (  0.94)	test_corr_d   0.87 (  0.88)
Test: [  26/  26]	Loss 0.279 (0.323)	test_acc   0.87 (  0.86)	test_minacc   0.44 (  0.39)	test_majacc   0.94 (  0.94)	Loss_d 0.279 (0.323)	test_acc_d   0.87 (  0.86)	test_minacc_d   0.44 (  0.39)	test_majacc_d   0.94 (  0.94)	test_corr_d   0.87 (  0.87)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 65.07it/s]
Test: [  0/  1]	Loss 1.405 (1.405)	test_acc   0.47 (  0.47)	test_minacc   0.42 (  0.42)	test_majacc   0.92 (  0.92)	Loss_d 1.405 (1.405)	test_acc_d   0.47 (  0.47)	test_minacc_d   0.42 (  0.42)	test_majacc_d   0.92 (  0.92)	test_corr_d   0.48 (  0.48)
Test: [  1/  1]	Loss 1.405 (1.405)	test_acc   0.47 (  0.47)	test_minacc   0.42 (  0.42)	test_majacc   0.92 (  0.92)	Loss_d 1.405 (1.405)	test_acc_d   0.47 (  0.47)	test_minacc_d   0.42 (  0.42)	test_majacc_d   0.92 (  0.92)	test_corr_d   0.48 (  0.48)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/33/checkpoints/model_best.pth
Overall Timing[ 11/  1]	epoch_time 0.0366 (0.0399)	validation_time 0.0003 (0.0009)	train_time 0.0362 (0.0387)
record: (train_acc, test_acc) (0.8579000173807144, 0.46800002455711365)
last accs (train_acc, test_acc) (0.8579000173807144, 0.46800002455711365)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.88it/s] 19%|#9        | 5/26 [00:00<00:01, 19.79it/s] 35%|###4      | 9/26 [00:00<00:00, 25.76it/s] 50%|#####     | 13/26 [00:00<00:00, 29.50it/s] 65%|######5   | 17/26 [00:00<00:00, 31.74it/s] 81%|########  | 21/26 [00:00<00:00, 33.31it/s] 96%|#########6| 25/26 [00:00<00:00, 34.08it/s]100%|##########| 26/26 [00:00<00:00, 27.92it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 312 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 313 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 314 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 315 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 316 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 317 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 318 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 319 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 320 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 321 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 322 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 323 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 324 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 325 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 326 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 327 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 328 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 329 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 330 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 331 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 332 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 333 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 334 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 335 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 336 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 337 400
penalty weights 0.0
Epoch: [12][  26/  26]	Loss 0.421 (0.460)	train_nll   0.31 (  0.34)	train_penalty   0.02 (  0.03)	weight_norm   0.11 (  0.12)	train_acc   0.86 (  0.85)	train_minacc   0.36 (  0.24)	train_majacc   0.94 (  0.96)	train_corr   0.00 (  0.00)	l1 16.9217 (16.1911)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.27it/s] 27%|##6       | 7/26 [00:00<00:00, 30.85it/s]                                               27%|##6       | 7/26 [00:00<00:00, 30.85it/s] 50%|#####     | 13/26 [00:00<00:00, 37.62it/s] 73%|#######3  | 19/26 [00:00<00:00, 44.42it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 44.42it/s] 96%|#########6| 25/26 [00:00<00:00, 45.49it/s]100%|##########| 26/26 [00:00<00:00, 37.39it/s]
Test: [   0/  26]	Loss 0.345 (0.345)	test_acc   0.86 (  0.86)	test_minacc   0.53 (  0.53)	test_majacc   0.92 (  0.92)	Loss_d 0.345 (0.345)	test_acc_d   0.86 (  0.86)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.92 (  0.92)	test_corr_d   0.79 (  0.79)
Test: [  10/  26]	Loss 0.370 (0.347)	test_acc   0.83 (  0.84)	test_minacc   0.45 (  0.49)	test_majacc   0.90 (  0.91)	Loss_d 0.370 (0.347)	test_acc_d   0.83 (  0.84)	test_minacc_d   0.45 (  0.49)	test_majacc_d   0.90 (  0.91)	test_corr_d   0.80 (  0.81)
Test: [  20/  26]	Loss 0.341 (0.347)	test_acc   0.84 (  0.85)	test_minacc   0.48 (  0.48)	test_majacc   0.91 (  0.91)	Loss_d 0.341 (0.347)	test_acc_d   0.84 (  0.85)	test_minacc_d   0.48 (  0.48)	test_majacc_d   0.91 (  0.91)	test_corr_d   0.81 (  0.82)
Test: [  26/  26]	Loss 0.299 (0.339)	test_acc   0.87 (  0.85)	test_minacc   0.47 (  0.50)	test_majacc   0.93 (  0.91)	Loss_d 0.299 (0.339)	test_acc_d   0.87 (  0.85)	test_minacc_d   0.47 (  0.50)	test_majacc_d   0.93 (  0.91)	test_corr_d   0.84 (  0.82)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 65.71it/s]
Test: [  0/  1]	Loss 1.290 (1.290)	test_acc   0.50 (  0.50)	test_minacc   0.46 (  0.46)	test_majacc   0.88 (  0.88)	Loss_d 1.290 (1.290)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.46 (  0.46)	test_majacc_d   0.88 (  0.88)	test_corr_d   0.38 (  0.38)
Test: [  1/  1]	Loss 1.290 (1.290)	test_acc   0.50 (  0.50)	test_minacc   0.46 (  0.46)	test_majacc   0.88 (  0.88)	Loss_d 1.290 (1.290)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.46 (  0.46)	test_majacc_d   0.88 (  0.88)	test_corr_d   0.38 (  0.38)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/33/checkpoints/model_best.pth
Overall Timing[ 12/  1]	epoch_time 0.0365 (0.0396)	validation_time 0.0004 (0.0009)	train_time 0.0361 (0.0385)
record: (train_acc, test_acc) (0.84950002348423, 0.5010000467300415)
last accs (train_acc, test_acc) (0.84950002348423, 0.5010000467300415)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.02it/s] 19%|#9        | 5/26 [00:00<00:00, 22.74it/s] 35%|###4      | 9/26 [00:00<00:00, 28.45it/s] 50%|#####     | 13/26 [00:00<00:00, 31.09it/s] 65%|######5   | 17/26 [00:00<00:00, 32.66it/s] 81%|########  | 21/26 [00:00<00:00, 33.93it/s] 96%|#########6| 25/26 [00:00<00:00, 34.80it/s]100%|##########| 26/26 [00:00<00:00, 29.58it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 338 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 339 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 340 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 341 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 342 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 343 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 344 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 345 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 346 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 347 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 348 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 349 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 350 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 351 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 352 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 353 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 354 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 355 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 356 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 357 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 358 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 359 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 360 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 361 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 362 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 363 400
penalty weights 0.0
Epoch: [13][  26/  26]	Loss 0.380 (0.427)	train_nll   0.28 (  0.32)	train_penalty   0.01 (  0.02)	weight_norm   0.10 (  0.10)	train_acc   0.86 (  0.86)	train_minacc   0.50 (  0.30)	train_majacc   0.93 (  0.95)	train_corr   0.00 (  0.00)	l1 18.1897 (17.6478)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 19.83it/s] 31%|###       | 8/26 [00:00<00:00, 42.11it/s]                                               31%|###       | 8/26 [00:00<00:00, 42.11it/s] 50%|#####     | 13/26 [00:00<00:00, 42.01it/s] 73%|#######3  | 19/26 [00:00<00:00, 48.08it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 48.08it/s] 96%|#########6| 25/26 [00:00<00:00, 47.97it/s]100%|##########| 26/26 [00:00<00:00, 42.22it/s]
Test: [   0/  26]	Loss 0.298 (0.298)	test_acc   0.88 (  0.88)	test_minacc   0.48 (  0.48)	test_majacc   0.95 (  0.95)	Loss_d 0.298 (0.298)	test_acc_d   0.88 (  0.88)	test_minacc_d   0.48 (  0.48)	test_majacc_d   0.95 (  0.95)	test_corr_d   0.87 (  0.87)
Test: [  10/  26]	Loss 0.361 (0.323)	test_acc   0.84 (  0.86)	test_minacc   0.33 (  0.34)	test_majacc   0.94 (  0.95)	Loss_d 0.361 (0.323)	test_acc_d   0.84 (  0.86)	test_minacc_d   0.33 (  0.34)	test_majacc_d   0.94 (  0.95)	test_corr_d   0.87 (  0.88)
Test: [  20/  26]	Loss 0.321 (0.325)	test_acc   0.87 (  0.86)	test_minacc   0.38 (  0.34)	test_majacc   0.96 (  0.96)	Loss_d 0.321 (0.325)	test_acc_d   0.87 (  0.86)	test_minacc_d   0.38 (  0.34)	test_majacc_d   0.96 (  0.96)	test_corr_d   0.88 (  0.89)
Test: [  26/  26]	Loss 0.252 (0.314)	test_acc   0.88 (  0.87)	test_minacc   0.39 (  0.36)	test_majacc   0.97 (  0.96)	Loss_d 0.252 (0.314)	test_acc_d   0.88 (  0.87)	test_minacc_d   0.39 (  0.36)	test_majacc_d   0.97 (  0.96)	test_corr_d   0.90 (  0.89)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 67.28it/s]
Test: [  0/  1]	Loss 1.511 (1.511)	test_acc   0.41 (  0.41)	test_minacc   0.35 (  0.35)	test_majacc   0.93 (  0.93)	Loss_d 1.511 (1.511)	test_acc_d   0.41 (  0.41)	test_minacc_d   0.35 (  0.35)	test_majacc_d   0.93 (  0.93)	test_corr_d   0.58 (  0.58)
Test: [  1/  1]	Loss 1.511 (1.511)	test_acc   0.41 (  0.41)	test_minacc   0.35 (  0.35)	test_majacc   0.93 (  0.93)	Loss_d 1.511 (1.511)	test_acc_d   0.41 (  0.41)	test_minacc_d   0.35 (  0.35)	test_majacc_d   0.93 (  0.93)	test_corr_d   0.58 (  0.58)
Overall Timing[ 13/  1]	epoch_time 0.0365 (0.0394)	validation_time 0.0003 (0.0008)	train_time 0.0361 (0.0383)
record: (train_acc, test_acc) (0.84950002348423, 0.5010000467300415)
last accs (train_acc, test_acc) (0.8661000210046769, 0.4090000092983246)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.80it/s] 19%|#9        | 5/26 [00:00<00:00, 21.07it/s] 35%|###4      | 9/26 [00:00<00:00, 27.11it/s] 50%|#####     | 13/26 [00:00<00:00, 30.19it/s] 65%|######5   | 17/26 [00:00<00:00, 31.98it/s] 81%|########  | 21/26 [00:00<00:00, 33.06it/s] 96%|#########6| 25/26 [00:00<00:00, 33.75it/s]100%|##########| 26/26 [00:00<00:00, 28.30it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 364 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 365 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 366 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 367 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 368 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 369 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 370 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 371 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 372 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 373 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 374 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 375 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 376 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 377 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 378 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 379 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 380 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 381 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 382 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 383 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 384 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 385 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 386 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 387 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 388 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 389 400
penalty weights 0.0
Epoch: [14][  26/  26]	Loss 0.370 (0.419)	train_nll   0.28 (  0.32)	train_penalty   0.01 (  0.02)	weight_norm   0.09 (  0.10)	train_acc   0.88 (  0.86)	train_minacc   0.47 (  0.31)	train_majacc   0.95 (  0.96)	train_corr   0.00 (  0.00)	l1 19.0489 (18.6522)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.36it/s] 27%|##6       | 7/26 [00:00<00:00, 36.81it/s]                                               27%|##6       | 7/26 [00:00<00:00, 36.81it/s] 50%|#####     | 13/26 [00:00<00:00, 42.26it/s] 73%|#######3  | 19/26 [00:00<00:00, 46.66it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 46.66it/s] 96%|#########6| 25/26 [00:00<00:00, 47.49it/s]100%|##########| 26/26 [00:00<00:00, 40.57it/s]
Test: [   0/  26]	Loss 0.302 (0.302)	test_acc   0.85 (  0.85)	test_minacc   0.30 (  0.30)	test_majacc   0.95 (  0.95)	Loss_d 0.302 (0.302)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.30 (  0.30)	test_majacc_d   0.95 (  0.95)	test_corr_d   0.89 (  0.89)
Test: [  10/  26]	Loss 0.352 (0.315)	test_acc   0.87 (  0.86)	test_minacc   0.34 (  0.32)	test_majacc   0.97 (  0.96)	Loss_d 0.352 (0.315)	test_acc_d   0.87 (  0.86)	test_minacc_d   0.34 (  0.32)	test_majacc_d   0.97 (  0.96)	test_corr_d   0.90 (  0.89)
Test: [  20/  26]	Loss 0.302 (0.312)	test_acc   0.87 (  0.86)	test_minacc   0.34 (  0.32)	test_majacc   0.97 (  0.96)	Loss_d 0.302 (0.312)	test_acc_d   0.87 (  0.86)	test_minacc_d   0.34 (  0.32)	test_majacc_d   0.97 (  0.96)	test_corr_d   0.90 (  0.90)
Test: [  26/  26]	Loss 0.253 (0.305)	test_acc   0.91 (  0.87)	test_minacc   0.50 (  0.33)	test_majacc   0.98 (  0.96)	Loss_d 0.253 (0.305)	test_acc_d   0.91 (  0.87)	test_minacc_d   0.50 (  0.33)	test_majacc_d   0.98 (  0.96)	test_corr_d   0.90 (  0.90)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.85it/s]
Test: [  0/  1]	Loss 1.420 (1.420)	test_acc   0.42 (  0.42)	test_minacc   0.36 (  0.36)	test_majacc   0.94 (  0.94)	Loss_d 1.420 (1.420)	test_acc_d   0.42 (  0.42)	test_minacc_d   0.36 (  0.36)	test_majacc_d   0.94 (  0.94)	test_corr_d   0.54 (  0.54)
Test: [  1/  1]	Loss 1.420 (1.420)	test_acc   0.42 (  0.42)	test_minacc   0.36 (  0.36)	test_majacc   0.94 (  0.94)	Loss_d 1.420 (1.420)	test_acc_d   0.42 (  0.42)	test_minacc_d   0.36 (  0.36)	test_majacc_d   0.94 (  0.94)	test_corr_d   0.54 (  0.54)
Overall Timing[ 14/  1]	epoch_time 0.0365 (0.0392)	validation_time 0.0004 (0.0008)	train_time 0.0360 (0.0382)
record: (train_acc, test_acc) (0.84950002348423, 0.5010000467300415)
last accs (train_acc, test_acc) (0.8685000196695328, 0.41600000858306885)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.25it/s] 19%|#9        | 5/26 [00:00<00:00, 22.42it/s] 35%|###4      | 9/26 [00:00<00:00, 28.70it/s] 50%|#####     | 13/26 [00:00<00:00, 31.68it/s] 65%|######5   | 17/26 [00:00<00:00, 32.75it/s] 81%|########  | 21/26 [00:00<00:00, 33.85it/s] 96%|#########6| 25/26 [00:00<00:00, 34.55it/s]100%|##########| 26/26 [00:00<00:00, 29.26it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 390 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 391 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 392 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 393 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 394 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 395 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 396 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 397 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 398 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 399 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 400 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 401 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 402 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 403 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 404 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 405 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 406 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 407 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 408 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 409 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 410 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 411 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 412 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 413 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 414 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 415 400
penalty weights 10000.0
Epoch: [15][  26/  26]	Loss 0.001 (0.171)	train_nll   0.61 (  0.43)	train_penalty   0.00 (  0.01)	weight_norm   0.13 (  0.10)	train_acc   0.66 (  0.78)	train_minacc   0.64 (  0.45)	train_majacc   0.66 (  0.84)	train_corr   0.00 (  0.00)	l1 18.5000 (18.9390)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.21it/s] 27%|##6       | 7/26 [00:00<00:00, 35.22it/s]                                               27%|##6       | 7/26 [00:00<00:00, 35.22it/s] 50%|#####     | 13/26 [00:00<00:00, 40.83it/s] 73%|#######3  | 19/26 [00:00<00:00, 46.83it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 46.83it/s] 96%|#########6| 25/26 [00:00<00:00, 47.11it/s]100%|##########| 26/26 [00:00<00:00, 39.55it/s]
Test: [   0/  26]	Loss 0.579 (0.579)	test_acc   0.67 (  0.67)	test_minacc   0.77 (  0.77)	test_majacc   0.65 (  0.65)	Loss_d 0.579 (0.579)	test_acc_d   0.67 (  0.67)	test_minacc_d   0.77 (  0.77)	test_majacc_d   0.65 (  0.65)	test_corr_d   0.37 (  0.37)
Test: [  10/  26]	Loss 0.602 (0.582)	test_acc   0.64 (  0.67)	test_minacc   0.66 (  0.70)	test_majacc   0.63 (  0.66)	Loss_d 0.602 (0.582)	test_acc_d   0.64 (  0.67)	test_minacc_d   0.66 (  0.70)	test_majacc_d   0.63 (  0.66)	test_corr_d   0.39 (  0.42)
Test: [  20/  26]	Loss 0.595 (0.581)	test_acc   0.63 (  0.66)	test_minacc   0.62 (  0.69)	test_majacc   0.63 (  0.66)	Loss_d 0.595 (0.581)	test_acc_d   0.63 (  0.66)	test_minacc_d   0.62 (  0.69)	test_majacc_d   0.63 (  0.66)	test_corr_d   0.38 (  0.42)
Test: [  26/  26]	Loss 0.587 (0.581)	test_acc   0.67 (  0.66)	test_minacc   0.61 (  0.69)	test_majacc   0.68 (  0.66)	Loss_d 0.587 (0.581)	test_acc_d   0.67 (  0.66)	test_minacc_d   0.61 (  0.69)	test_majacc_d   0.68 (  0.66)	test_corr_d   0.44 (  0.42)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 60.13it/s]
Test: [  0/  1]	Loss 0.691 (0.691)	test_acc   0.65 (  0.65)	test_minacc   0.64 (  0.64)	test_majacc   0.71 (  0.71)	Loss_d 0.691 (0.691)	test_acc_d   0.65 (  0.65)	test_minacc_d   0.64 (  0.64)	test_majacc_d   0.71 (  0.71)	test_corr_d  -0.12 ( -0.12)
Test: [  1/  1]	Loss 0.691 (0.691)	test_acc   0.65 (  0.65)	test_minacc   0.64 (  0.64)	test_majacc   0.71 (  0.71)	Loss_d 0.691 (0.691)	test_acc_d   0.65 (  0.65)	test_minacc_d   0.64 (  0.64)	test_majacc_d   0.71 (  0.71)	test_corr_d  -0.12 ( -0.12)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/33/checkpoints/model_best.pth
Overall Timing[ 15/  1]	epoch_time 0.0349 (0.0389)	validation_time 0.0004 (0.0008)	train_time 0.0344 (0.0379)
record: (train_acc, test_acc) (0.6639000242948532, 0.6460000276565552)
last accs (train_acc, test_acc) (0.6639000242948532, 0.6460000276565552)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 16.01it/s] 23%|##3       | 6/26 [00:00<00:00, 26.17it/s] 38%|###8      | 10/26 [00:00<00:00, 30.07it/s] 54%|#####3    | 14/26 [00:00<00:00, 31.92it/s] 69%|######9   | 18/26 [00:00<00:00, 33.21it/s] 85%|########4 | 22/26 [00:00<00:00, 33.85it/s]100%|##########| 26/26 [00:00<00:00, 33.90it/s]100%|##########| 26/26 [00:00<00:00, 29.75it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 416 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 417 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 418 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 419 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 420 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 421 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 422 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 423 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 424 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 425 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 426 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 427 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 428 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 429 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 430 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 431 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 432 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 433 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 434 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 435 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 436 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 437 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 438 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 439 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 440 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 441 400
penalty weights 10000.0
Epoch: [16][  26/  26]	Loss 0.000 (0.001)	train_nll   0.62 (  0.61)	train_penalty   0.00 (  0.00)	weight_norm   0.16 (  0.15)	train_acc   0.62 (  0.63)	train_minacc   0.61 (  0.71)	train_majacc   0.62 (  0.61)	train_corr   0.00 (  0.00)	l1 18.0424 (18.2096)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.54it/s] 27%|##6       | 7/26 [00:00<00:00, 31.49it/s]                                               27%|##6       | 7/26 [00:00<00:00, 31.49it/s] 50%|#####     | 13/26 [00:00<00:00, 38.94it/s] 73%|#######3  | 19/26 [00:00<00:00, 43.89it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 43.89it/s] 96%|#########6| 25/26 [00:00<00:00, 46.69it/s]100%|##########| 26/26 [00:00<00:00, 38.77it/s]
Test: [   0/  26]	Loss 0.631 (0.631)	test_acc   0.61 (  0.61)	test_minacc   0.78 (  0.78)	test_majacc   0.58 (  0.58)	Loss_d 0.631 (0.631)	test_acc_d   0.61 (  0.61)	test_minacc_d   0.78 (  0.78)	test_majacc_d   0.58 (  0.58)	test_corr_d   0.21 (  0.21)
Test: [  10/  26]	Loss 0.641 (0.629)	test_acc   0.58 (  0.61)	test_minacc   0.72 (  0.73)	test_majacc   0.56 (  0.59)	Loss_d 0.641 (0.629)	test_acc_d   0.58 (  0.61)	test_minacc_d   0.72 (  0.73)	test_majacc_d   0.56 (  0.59)	test_corr_d   0.24 (  0.26)
Test: [  20/  26]	Loss 0.633 (0.629)	test_acc   0.59 (  0.61)	test_minacc   0.66 (  0.73)	test_majacc   0.57 (  0.59)	Loss_d 0.633 (0.629)	test_acc_d   0.59 (  0.61)	test_minacc_d   0.66 (  0.73)	test_majacc_d   0.57 (  0.59)	test_corr_d   0.23 (  0.26)
Test: [  26/  26]	Loss 0.637 (0.629)	test_acc   0.61 (  0.61)	test_minacc   0.61 (  0.73)	test_majacc   0.61 (  0.59)	Loss_d 0.637 (0.629)	test_acc_d   0.61 (  0.61)	test_minacc_d   0.61 (  0.73)	test_majacc_d   0.61 (  0.59)	test_corr_d   0.25 (  0.26)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.57it/s]
Test: [  0/  1]	Loss 0.649 (0.649)	test_acc   0.68 (  0.68)	test_minacc   0.68 (  0.68)	test_majacc   0.65 (  0.65)	Loss_d 0.649 (0.649)	test_acc_d   0.68 (  0.68)	test_minacc_d   0.68 (  0.68)	test_majacc_d   0.65 (  0.65)	test_corr_d  -0.22 ( -0.22)
Test: [  1/  1]	Loss 0.649 (0.649)	test_acc   0.68 (  0.68)	test_minacc   0.68 (  0.68)	test_majacc   0.65 (  0.65)	Loss_d 0.649 (0.649)	test_acc_d   0.68 (  0.68)	test_minacc_d   0.68 (  0.68)	test_majacc_d   0.65 (  0.65)	test_corr_d  -0.22 ( -0.22)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/33/checkpoints/model_best.pth
Overall Timing[ 16/  1]	epoch_time 0.0363 (0.0388)	validation_time 0.0004 (0.0008)	train_time 0.0358 (0.0378)
record: (train_acc, test_acc) (0.6109000098705292, 0.6800000071525574)
last accs (train_acc, test_acc) (0.6109000098705292, 0.6800000071525574)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.99it/s] 19%|#9        | 5/26 [00:00<00:00, 25.38it/s] 35%|###4      | 9/26 [00:00<00:00, 29.95it/s] 50%|#####     | 13/26 [00:00<00:00, 31.86it/s] 65%|######5   | 17/26 [00:00<00:00, 33.20it/s] 81%|########  | 21/26 [00:00<00:00, 34.07it/s] 96%|#########6| 25/26 [00:00<00:00, 34.00it/s]100%|##########| 26/26 [00:00<00:00, 29.80it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 442 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 443 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 444 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 445 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 446 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 447 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 448 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 449 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 450 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 451 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 452 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 453 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 454 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 455 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 456 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 457 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 458 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 459 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 460 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 461 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 462 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 463 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 464 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 465 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 466 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 467 400
penalty weights 10000.0
Epoch: [17][  26/  26]	Loss 0.000 (0.001)	train_nll   0.65 (  0.64)	train_penalty   0.00 (  0.00)	weight_norm   0.16 (  0.16)	train_acc   0.57 (  0.59)	train_minacc   0.67 (  0.73)	train_majacc   0.56 (  0.57)	train_corr   0.00 (  0.00)	l1 17.9209 (17.9753)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.51it/s] 27%|##6       | 7/26 [00:00<00:00, 31.35it/s]                                               27%|##6       | 7/26 [00:00<00:00, 31.35it/s] 50%|#####     | 13/26 [00:00<00:00, 41.17it/s] 73%|#######3  | 19/26 [00:00<00:00, 42.55it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 42.55it/s] 96%|#########6| 25/26 [00:00<00:00, 46.65it/s]100%|##########| 26/26 [00:00<00:00, 38.61it/s]
Test: [   0/  26]	Loss 0.632 (0.632)	test_acc   0.61 (  0.61)	test_minacc   0.77 (  0.77)	test_majacc   0.58 (  0.58)	Loss_d 0.632 (0.632)	test_acc_d   0.61 (  0.61)	test_minacc_d   0.77 (  0.77)	test_majacc_d   0.58 (  0.58)	test_corr_d   0.23 (  0.23)
Test: [  10/  26]	Loss 0.633 (0.625)	test_acc   0.59 (  0.62)	test_minacc   0.69 (  0.70)	test_majacc   0.57 (  0.60)	Loss_d 0.633 (0.625)	test_acc_d   0.59 (  0.62)	test_minacc_d   0.69 (  0.70)	test_majacc_d   0.57 (  0.60)	test_corr_d   0.28 (  0.29)
Test: [  20/  26]	Loss 0.626 (0.625)	test_acc   0.62 (  0.62)	test_minacc   0.67 (  0.71)	test_majacc   0.61 (  0.60)	Loss_d 0.626 (0.625)	test_acc_d   0.62 (  0.62)	test_minacc_d   0.67 (  0.71)	test_majacc_d   0.61 (  0.60)	test_corr_d   0.27 (  0.28)
Test: [  26/  26]	Loss 0.645 (0.627)	test_acc   0.58 (  0.62)	test_minacc   0.67 (  0.71)	test_majacc   0.56 (  0.60)	Loss_d 0.645 (0.627)	test_acc_d   0.58 (  0.62)	test_minacc_d   0.67 (  0.71)	test_majacc_d   0.56 (  0.60)	test_corr_d   0.24 (  0.28)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 64.73it/s]
Test: [  0/  1]	Loss 0.662 (0.662)	test_acc   0.67 (  0.67)	test_minacc   0.67 (  0.67)	test_majacc   0.65 (  0.65)	Loss_d 0.662 (0.662)	test_acc_d   0.67 (  0.67)	test_minacc_d   0.67 (  0.67)	test_majacc_d   0.65 (  0.65)	test_corr_d  -0.14 ( -0.14)
Test: [  1/  1]	Loss 0.662 (0.662)	test_acc   0.67 (  0.67)	test_minacc   0.67 (  0.67)	test_majacc   0.65 (  0.65)	Loss_d 0.662 (0.662)	test_acc_d   0.67 (  0.67)	test_minacc_d   0.67 (  0.67)	test_majacc_d   0.65 (  0.65)	test_corr_d  -0.14 ( -0.14)
Overall Timing[ 17/  1]	epoch_time 0.0359 (0.0386)	validation_time 0.0003 (0.0007)	train_time 0.0356 (0.0377)
record: (train_acc, test_acc) (0.6109000098705292, 0.6800000071525574)
last accs (train_acc, test_acc) (0.617600011408329, 0.6700000166893005)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.69it/s] 19%|#9        | 5/26 [00:00<00:01, 19.46it/s] 35%|###4      | 9/26 [00:00<00:00, 25.29it/s] 50%|#####     | 13/26 [00:00<00:00, 29.44it/s] 65%|######5   | 17/26 [00:00<00:00, 31.75it/s] 81%|########  | 21/26 [00:00<00:00, 33.49it/s] 96%|#########6| 25/26 [00:00<00:00, 34.24it/s]100%|##########| 26/26 [00:00<00:00, 27.88it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 468 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 469 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 470 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 471 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 472 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 473 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 474 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 475 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 476 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 477 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 478 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 479 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 480 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 481 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 482 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 483 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 484 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 485 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 486 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 487 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 488 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 489 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 490 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 491 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 492 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 493 400
penalty weights 10000.0
Epoch: [18][  26/  26]	Loss 0.001 (0.001)	train_nll   0.69 (  0.65)	train_penalty   0.00 (  0.00)	weight_norm   0.16 (  0.16)	train_acc   0.51 (  0.58)	train_minacc   0.58 (  0.70)	train_majacc   0.50 (  0.56)	train_corr   0.00 (  0.00)	l1 17.8528 (17.8883)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 18.33it/s] 27%|##6       | 7/26 [00:00<00:00, 30.29it/s]                                               27%|##6       | 7/26 [00:00<00:00, 30.29it/s] 50%|#####     | 13/26 [00:00<00:00, 40.13it/s] 73%|#######3  | 19/26 [00:00<00:00, 42.63it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 42.63it/s] 96%|#########6| 25/26 [00:00<00:00, 47.33it/s]100%|##########| 26/26 [00:00<00:00, 39.21it/s]
Test: [   0/  26]	Loss 0.663 (0.663)	test_acc   0.56 (  0.56)	test_minacc   0.73 (  0.73)	test_majacc   0.53 (  0.53)	Loss_d 0.663 (0.663)	test_acc_d   0.56 (  0.56)	test_minacc_d   0.73 (  0.73)	test_majacc_d   0.53 (  0.53)	test_corr_d   0.13 (  0.13)
Test: [  10/  26]	Loss 0.663 (0.656)	test_acc   0.55 (  0.57)	test_minacc   0.64 (  0.68)	test_majacc   0.54 (  0.56)	Loss_d 0.663 (0.656)	test_acc_d   0.55 (  0.57)	test_minacc_d   0.64 (  0.68)	test_majacc_d   0.54 (  0.56)	test_corr_d   0.19 (  0.19)
Test: [  20/  26]	Loss 0.654 (0.657)	test_acc   0.58 (  0.57)	test_minacc   0.66 (  0.69)	test_majacc   0.56 (  0.55)	Loss_d 0.654 (0.657)	test_acc_d   0.58 (  0.57)	test_minacc_d   0.66 (  0.69)	test_majacc_d   0.56 (  0.55)	test_corr_d   0.19 (  0.18)
Test: [  26/  26]	Loss 0.682 (0.658)	test_acc   0.52 (  0.57)	test_minacc   0.58 (  0.69)	test_majacc   0.50 (  0.55)	Loss_d 0.682 (0.658)	test_acc_d   0.52 (  0.57)	test_minacc_d   0.58 (  0.69)	test_majacc_d   0.50 (  0.55)	test_corr_d   0.13 (  0.18)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 65.87it/s]
Test: [  0/  1]	Loss 0.661 (0.661)	test_acc   0.66 (  0.66)	test_minacc   0.67 (  0.67)	test_majacc   0.59 (  0.59)	Loss_d 0.661 (0.661)	test_acc_d   0.66 (  0.66)	test_minacc_d   0.67 (  0.67)	test_majacc_d   0.59 (  0.59)	test_corr_d  -0.18 ( -0.18)
Test: [  1/  1]	Loss 0.661 (0.661)	test_acc   0.66 (  0.66)	test_minacc   0.67 (  0.67)	test_majacc   0.59 (  0.59)	Loss_d 0.661 (0.661)	test_acc_d   0.66 (  0.66)	test_minacc_d   0.67 (  0.67)	test_majacc_d   0.59 (  0.59)	test_corr_d  -0.18 ( -0.18)
Overall Timing[ 18/  1]	epoch_time 0.0356 (0.0385)	validation_time 0.0004 (0.0007)	train_time 0.0352 (0.0376)
record: (train_acc, test_acc) (0.6109000098705292, 0.6800000071525574)
last accs (train_acc, test_acc) (0.5711000117063523, 0.6630000472068787)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.02it/s] 15%|#5        | 4/26 [00:00<00:01, 19.27it/s] 31%|###       | 8/26 [00:00<00:00, 25.85it/s] 46%|####6     | 12/26 [00:00<00:00, 29.58it/s] 62%|######1   | 16/26 [00:00<00:00, 31.62it/s] 77%|#######6  | 20/26 [00:00<00:00, 32.88it/s] 92%|#########2| 24/26 [00:00<00:00, 33.32it/s]100%|##########| 26/26 [00:00<00:00, 28.36it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 494 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 495 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 496 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 497 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 498 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 499 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 500 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 501 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 502 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 503 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 504 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 505 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 506 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 507 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 508 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 509 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 510 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 511 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 512 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 513 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 514 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 515 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 516 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 517 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 518 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 519 400
penalty weights 10000.0
Epoch: [19][  26/  26]	Loss 0.001 (0.000)	train_nll   0.69 (  0.66)	train_penalty   0.00 (  0.00)	weight_norm   0.16 (  0.16)	train_acc   0.50 (  0.56)	train_minacc   0.58 (  0.68)	train_majacc   0.49 (  0.54)	train_corr   0.00 (  0.00)	l1 17.7809 (17.8079)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.35it/s] 23%|##3       | 6/26 [00:00<00:00, 32.57it/s]                                               23%|##3       | 6/26 [00:00<00:00, 32.57it/s] 46%|####6     | 12/26 [00:00<00:00, 44.27it/s] 65%|######5   | 17/26 [00:00<00:00, 44.48it/s]                                                65%|######5   | 17/26 [00:00<00:00, 44.48it/s] 88%|########8 | 23/26 [00:00<00:00, 49.24it/s]100%|##########| 26/26 [00:00<00:00, 40.45it/s]
Test: [   0/  26]	Loss 0.675 (0.675)	test_acc   0.52 (  0.52)	test_minacc   0.68 (  0.68)	test_majacc   0.49 (  0.49)	Loss_d 0.675 (0.675)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.68 (  0.68)	test_majacc_d   0.49 (  0.49)	test_corr_d   0.07 (  0.07)
Test: [  10/  26]	Loss 0.677 (0.672)	test_acc   0.55 (  0.55)	test_minacc   0.62 (  0.68)	test_majacc   0.53 (  0.53)	Loss_d 0.677 (0.672)	test_acc_d   0.55 (  0.55)	test_minacc_d   0.62 (  0.68)	test_majacc_d   0.53 (  0.53)	test_corr_d   0.14 (  0.13)
Test: [  20/  26]	Loss 0.670 (0.673)	test_acc   0.55 (  0.55)	test_minacc   0.64 (  0.68)	test_majacc   0.53 (  0.53)	Loss_d 0.670 (0.673)	test_acc_d   0.55 (  0.55)	test_minacc_d   0.64 (  0.68)	test_majacc_d   0.53 (  0.53)	test_corr_d   0.13 (  0.11)
Test: [  26/  26]	Loss 0.691 (0.674)	test_acc   0.50 (  0.55)	test_minacc   0.58 (  0.68)	test_majacc   0.49 (  0.53)	Loss_d 0.691 (0.674)	test_acc_d   0.50 (  0.55)	test_minacc_d   0.58 (  0.68)	test_majacc_d   0.49 (  0.53)	test_corr_d   0.07 (  0.11)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 67.49it/s]
Test: [  0/  1]	Loss 0.660 (0.660)	test_acc   0.65 (  0.65)	test_minacc   0.66 (  0.66)	test_majacc   0.58 (  0.58)	Loss_d 0.660 (0.660)	test_acc_d   0.65 (  0.65)	test_minacc_d   0.66 (  0.66)	test_majacc_d   0.58 (  0.58)	test_corr_d  -0.23 ( -0.23)
Test: [  1/  1]	Loss 0.660 (0.660)	test_acc   0.65 (  0.65)	test_minacc   0.66 (  0.66)	test_majacc   0.58 (  0.58)	Loss_d 0.660 (0.660)	test_acc_d   0.65 (  0.65)	test_minacc_d   0.66 (  0.66)	test_majacc_d   0.58 (  0.58)	test_corr_d  -0.23 ( -0.23)
Overall Timing[ 19/  1]	epoch_time 0.0346 (0.0383)	validation_time 0.0003 (0.0007)	train_time 0.0342 (0.0374)
record: (train_acc, test_acc) (0.6109000098705292, 0.6800000071525574)
last accs (train_acc, test_acc) (0.549600007712841, 0.6530000567436218)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.21it/s] 19%|#9        | 5/26 [00:00<00:00, 21.56it/s] 35%|###4      | 9/26 [00:00<00:00, 27.34it/s] 50%|#####     | 13/26 [00:00<00:00, 30.38it/s] 65%|######5   | 17/26 [00:00<00:00, 30.89it/s] 81%|########  | 21/26 [00:00<00:00, 32.35it/s] 96%|#########6| 25/26 [00:00<00:00, 33.46it/s]100%|##########| 26/26 [00:00<00:00, 28.32it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 520 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 521 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 522 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 523 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 524 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 525 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 526 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 527 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 528 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 529 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 530 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 531 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 532 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 533 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 534 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 535 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 536 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 537 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 538 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 539 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 540 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 541 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 542 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 543 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 544 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 545 400
penalty weights 10000.0
Epoch: [20][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.67)	train_penalty   0.00 (  0.00)	weight_norm   0.16 (  0.16)	train_acc   0.48 (  0.55)	train_minacc   0.58 (  0.67)	train_majacc   0.47 (  0.52)	train_corr   0.00 (  0.00)	l1 17.7539 (17.7642)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 17.42it/s] 27%|##6       | 7/26 [00:00<00:00, 35.41it/s]                                               27%|##6       | 7/26 [00:00<00:00, 35.41it/s] 46%|####6     | 12/26 [00:00<00:00, 40.53it/s] 69%|######9   | 18/26 [00:00<00:00, 45.09it/s]                                                69%|######9   | 18/26 [00:00<00:00, 45.09it/s] 92%|#########2| 24/26 [00:00<00:00, 47.41it/s]100%|##########| 26/26 [00:00<00:00, 40.78it/s]
Test: [   0/  26]	Loss 0.678 (0.678)	test_acc   0.53 (  0.53)	test_minacc   0.67 (  0.67)	test_majacc   0.50 (  0.50)	Loss_d 0.678 (0.678)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.67 (  0.67)	test_majacc_d   0.50 (  0.50)	test_corr_d   0.05 (  0.05)
Test: [  10/  26]	Loss 0.679 (0.676)	test_acc   0.54 (  0.55)	test_minacc   0.61 (  0.67)	test_majacc   0.53 (  0.53)	Loss_d 0.679 (0.676)	test_acc_d   0.54 (  0.55)	test_minacc_d   0.61 (  0.67)	test_majacc_d   0.53 (  0.53)	test_corr_d   0.13 (  0.11)
Test: [  20/  26]	Loss 0.675 (0.676)	test_acc   0.55 (  0.55)	test_minacc   0.61 (  0.68)	test_majacc   0.53 (  0.52)	Loss_d 0.675 (0.676)	test_acc_d   0.55 (  0.55)	test_minacc_d   0.61 (  0.68)	test_majacc_d   0.53 (  0.52)	test_corr_d   0.11 (  0.09)
Test: [  26/  26]	Loss 0.691 (0.677)	test_acc   0.49 (  0.54)	test_minacc   0.58 (  0.67)	test_majacc   0.47 (  0.52)	Loss_d 0.691 (0.677)	test_acc_d   0.49 (  0.54)	test_minacc_d   0.58 (  0.67)	test_majacc_d   0.47 (  0.52)	test_corr_d   0.06 (  0.09)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 64.10it/s]
Test: [  0/  1]	Loss 0.664 (0.664)	test_acc   0.65 (  0.65)	test_minacc   0.66 (  0.66)	test_majacc   0.57 (  0.57)	Loss_d 0.664 (0.664)	test_acc_d   0.65 (  0.65)	test_minacc_d   0.66 (  0.66)	test_majacc_d   0.57 (  0.57)	test_corr_d  -0.22 ( -0.22)
Test: [  1/  1]	Loss 0.664 (0.664)	test_acc   0.65 (  0.65)	test_minacc   0.66 (  0.66)	test_majacc   0.57 (  0.57)	Loss_d 0.664 (0.664)	test_acc_d   0.65 (  0.65)	test_minacc_d   0.66 (  0.66)	test_majacc_d   0.57 (  0.57)	test_corr_d  -0.22 ( -0.22)
Overall Timing[ 20/  1]	epoch_time 0.0369 (0.0382)	validation_time 0.0004 (0.0007)	train_time 0.0365 (0.0374)
record: (train_acc, test_acc) (0.6109000098705292, 0.6800000071525574)
last accs (train_acc, test_acc) (0.542600013434887, 0.6480000019073486)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.61it/s] 19%|#9        | 5/26 [00:00<00:01, 20.25it/s] 35%|###4      | 9/26 [00:00<00:00, 26.75it/s] 50%|#####     | 13/26 [00:00<00:00, 29.96it/s] 65%|######5   | 17/26 [00:00<00:00, 30.85it/s] 81%|########  | 21/26 [00:00<00:00, 32.14it/s] 96%|#########6| 25/26 [00:00<00:00, 32.76it/s]100%|##########| 26/26 [00:00<00:00, 27.79it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 546 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 547 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 548 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 549 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 550 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 551 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 552 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 553 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 554 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 555 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 556 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 557 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 558 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 559 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 560 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 561 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 562 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 563 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 564 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 565 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 566 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 567 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 568 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 569 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 570 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 571 400
penalty weights 10000.0
Epoch: [21][  26/  26]	Loss 0.000 (0.000)	train_nll   0.70 (  0.68)	train_penalty   0.00 (  0.00)	weight_norm   0.16 (  0.16)	train_acc   0.46 (  0.54)	train_minacc   0.56 (  0.67)	train_majacc   0.45 (  0.51)	train_corr   0.00 (  0.00)	l1 17.7402 (17.7464)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 19.41it/s] 31%|###       | 8/26 [00:00<00:00, 40.82it/s]                                               31%|###       | 8/26 [00:00<00:00, 40.82it/s] 50%|#####     | 13/26 [00:00<00:00, 41.83it/s] 73%|#######3  | 19/26 [00:00<00:00, 46.82it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 46.82it/s] 96%|#########6| 25/26 [00:00<00:00, 47.95it/s]100%|##########| 26/26 [00:00<00:00, 41.91it/s]
Test: [   0/  26]	Loss 0.683 (0.683)	test_acc   0.52 (  0.52)	test_minacc   0.67 (  0.67)	test_majacc   0.49 (  0.49)	Loss_d 0.683 (0.683)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.67 (  0.67)	test_majacc_d   0.49 (  0.49)	test_corr_d   0.03 (  0.03)
Test: [  10/  26]	Loss 0.683 (0.681)	test_acc   0.54 (  0.54)	test_minacc   0.59 (  0.67)	test_majacc   0.52 (  0.52)	Loss_d 0.683 (0.681)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.59 (  0.67)	test_majacc_d   0.52 (  0.52)	test_corr_d   0.11 (  0.08)
Test: [  20/  26]	Loss 0.681 (0.681)	test_acc   0.53 (  0.53)	test_minacc   0.59 (  0.67)	test_majacc   0.52 (  0.51)	Loss_d 0.681 (0.681)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.59 (  0.67)	test_majacc_d   0.52 (  0.51)	test_corr_d   0.09 (  0.07)
Test: [  26/  26]	Loss 0.693 (0.682)	test_acc   0.48 (  0.53)	test_minacc   0.56 (  0.66)	test_majacc   0.46 (  0.51)	Loss_d 0.693 (0.682)	test_acc_d   0.48 (  0.53)	test_minacc_d   0.56 (  0.66)	test_majacc_d   0.46 (  0.51)	test_corr_d   0.03 (  0.07)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.87it/s]
Test: [  0/  1]	Loss 0.670 (0.670)	test_acc   0.64 (  0.64)	test_minacc   0.65 (  0.65)	test_majacc   0.55 (  0.55)	Loss_d 0.670 (0.670)	test_acc_d   0.64 (  0.64)	test_minacc_d   0.65 (  0.65)	test_majacc_d   0.55 (  0.55)	test_corr_d  -0.20 ( -0.20)
Test: [  1/  1]	Loss 0.670 (0.670)	test_acc   0.64 (  0.64)	test_minacc   0.65 (  0.65)	test_majacc   0.55 (  0.55)	Loss_d 0.670 (0.670)	test_acc_d   0.64 (  0.64)	test_minacc_d   0.65 (  0.65)	test_majacc_d   0.55 (  0.55)	test_corr_d  -0.20 ( -0.20)
Overall Timing[ 21/  1]	epoch_time 0.0372 (0.0382)	validation_time 0.0003 (0.0007)	train_time 0.0368 (0.0373)
record: (train_acc, test_acc) (0.6109000098705292, 0.6800000071525574)
last accs (train_acc, test_acc) (0.5320000099539757, 0.6360000371932983)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.16it/s] 19%|#9        | 5/26 [00:00<00:00, 24.22it/s] 35%|###4      | 9/26 [00:00<00:00, 29.20it/s] 50%|#####     | 13/26 [00:00<00:00, 31.86it/s] 65%|######5   | 17/26 [00:00<00:00, 33.38it/s] 81%|########  | 21/26 [00:00<00:00, 34.25it/s] 96%|#########6| 25/26 [00:00<00:00, 34.16it/s]100%|##########| 26/26 [00:00<00:00, 29.71it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 572 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 573 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 574 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 575 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 576 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 577 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 578 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 579 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 580 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 581 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 582 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 583 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 584 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 585 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 586 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 587 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 588 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 589 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 590 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 591 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 592 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 593 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 594 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 595 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 596 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 597 400
penalty weights 10000.0
Epoch: [22][  26/  26]	Loss 0.000 (0.000)	train_nll   0.70 (  0.68)	train_penalty   0.00 (  0.00)	weight_norm   0.16 (  0.16)	train_acc   0.48 (  0.53)	train_minacc   0.53 (  0.66)	train_majacc   0.47 (  0.51)	train_corr   0.00 (  0.00)	l1 17.7305 (17.7349)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:00, 27.80it/s] 35%|###4      | 9/26 [00:00<00:00, 39.14it/s]                                               35%|###4      | 9/26 [00:00<00:00, 39.14it/s] 58%|#####7    | 15/26 [00:00<00:00, 46.69it/s]                                                58%|#####7    | 15/26 [00:00<00:00, 46.69it/s] 81%|########  | 21/26 [00:00<00:00, 46.97it/s]100%|##########| 26/26 [00:00<00:00, 42.15it/s]
Test: [   0/  26]	Loss 0.685 (0.685)	test_acc   0.51 (  0.51)	test_minacc   0.60 (  0.60)	test_majacc   0.49 (  0.49)	Loss_d 0.685 (0.685)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.60 (  0.60)	test_majacc_d   0.49 (  0.49)	test_corr_d   0.02 (  0.02)
Test: [  10/  26]	Loss 0.686 (0.684)	test_acc   0.54 (  0.53)	test_minacc   0.59 (  0.66)	test_majacc   0.52 (  0.51)	Loss_d 0.686 (0.684)	test_acc_d   0.54 (  0.53)	test_minacc_d   0.59 (  0.66)	test_majacc_d   0.52 (  0.51)	test_corr_d   0.10 (  0.07)
Test: [  20/  26]	Loss 0.684 (0.684)	test_acc   0.53 (  0.53)	test_minacc   0.59 (  0.67)	test_majacc   0.51 (  0.51)	Loss_d 0.684 (0.684)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.59 (  0.67)	test_majacc_d   0.51 (  0.51)	test_corr_d   0.09 (  0.05)
Test: [  26/  26]	Loss 0.694 (0.685)	test_acc   0.48 (  0.53)	test_minacc   0.53 (  0.66)	test_majacc   0.47 (  0.50)	Loss_d 0.694 (0.685)	test_acc_d   0.48 (  0.53)	test_minacc_d   0.53 (  0.66)	test_majacc_d   0.47 (  0.50)	test_corr_d   0.01 (  0.05)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.79it/s]
Test: [  0/  1]	Loss 0.676 (0.676)	test_acc   0.63 (  0.63)	test_minacc   0.64 (  0.64)	test_majacc   0.55 (  0.55)	Loss_d 0.676 (0.676)	test_acc_d   0.63 (  0.63)	test_minacc_d   0.64 (  0.64)	test_majacc_d   0.55 (  0.55)	test_corr_d  -0.17 ( -0.17)
Test: [  1/  1]	Loss 0.676 (0.676)	test_acc   0.63 (  0.63)	test_minacc   0.64 (  0.64)	test_majacc   0.55 (  0.55)	Loss_d 0.676 (0.676)	test_acc_d   0.63 (  0.63)	test_minacc_d   0.64 (  0.64)	test_majacc_d   0.55 (  0.55)	test_corr_d  -0.17 ( -0.17)
Overall Timing[ 22/  1]	epoch_time 0.0350 (0.0380)	validation_time 0.0003 (0.0007)	train_time 0.0346 (0.0372)
record: (train_acc, test_acc) (0.6109000098705292, 0.6800000071525574)
last accs (train_acc, test_acc) (0.5270000149011612, 0.6340000033378601)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.59it/s] 15%|#5        | 4/26 [00:00<00:01, 16.87it/s] 27%|##6       | 7/26 [00:00<00:00, 20.88it/s] 38%|###8      | 10/26 [00:00<00:00, 19.53it/s] 50%|#####     | 13/26 [00:00<00:00, 18.60it/s] 58%|#####7    | 15/26 [00:00<00:00, 18.18it/s] 65%|######5   | 17/26 [00:00<00:00, 17.94it/s] 73%|#######3  | 19/26 [00:01<00:00, 17.82it/s] 81%|########  | 21/26 [00:01<00:00, 17.71it/s] 88%|########8 | 23/26 [00:01<00:00, 17.66it/s] 96%|#########6| 25/26 [00:01<00:00, 17.60it/s]100%|##########| 26/26 [00:01<00:00, 17.19it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 598 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 599 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 600 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 601 400
penalty weights 10000.0
args.step pgd_anneal_iters 601 600
dim_v 512
rho, theta 329 tensor(-0.0127, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 602 400
penalty weights 10000.0
args.step pgd_anneal_iters 602 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 603 400
penalty weights 10000.0
args.step pgd_anneal_iters 603 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 604 400
penalty weights 10000.0
args.step pgd_anneal_iters 604 600
dim_v 512
rho, theta 456 tensor(-0.0007, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 605 400
penalty weights 10000.0
args.step pgd_anneal_iters 605 600
dim_v 512
rho, theta 467 tensor(-0.0004, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 606 400
penalty weights 10000.0
args.step pgd_anneal_iters 606 600
dim_v 512
rho, theta 475 tensor(-0.0004, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 607 400
penalty weights 10000.0
args.step pgd_anneal_iters 607 600
dim_v 512
rho, theta 483 tensor(-0.0003, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 608 400
penalty weights 10000.0
args.step pgd_anneal_iters 608 600
dim_v 512
rho, theta 491 tensor(-0.0003, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 609 400
penalty weights 10000.0
args.step pgd_anneal_iters 609 600
dim_v 512
rho, theta 497 tensor(-0.0003, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 610 400
penalty weights 10000.0
args.step pgd_anneal_iters 610 600
dim_v 512
rho, theta 500 tensor(-0.0002, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 611 400
penalty weights 10000.0
args.step pgd_anneal_iters 611 600
dim_v 512
rho, theta 504 tensor(-0.0002, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 612 400
penalty weights 10000.0
args.step pgd_anneal_iters 612 600
dim_v 512
rho, theta 506 tensor(-0.0002, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 613 400
penalty weights 10000.0
args.step pgd_anneal_iters 613 600
dim_v 512
rho, theta 509 tensor(-0.0002, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 614 400
penalty weights 10000.0
args.step pgd_anneal_iters 614 600
dim_v 512
rho, theta 509 tensor(-0.0001, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 615 400
penalty weights 10000.0
args.step pgd_anneal_iters 615 600
dim_v 512
rho, theta 509 tensor(-0.0001, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 616 400
penalty weights 10000.0
args.step pgd_anneal_iters 616 600
dim_v 512
rho, theta 510 tensor(-0.0001, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 617 400
penalty weights 10000.0
args.step pgd_anneal_iters 617 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 618 400
penalty weights 10000.0
args.step pgd_anneal_iters 618 600
dim_v 512
rho, theta 504 tensor(-0.0002, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 619 400
penalty weights 10000.0
args.step pgd_anneal_iters 619 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 620 400
penalty weights 10000.0
args.step pgd_anneal_iters 620 600
dim_v 512
rho, theta 508 tensor(-0.0002, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 621 400
penalty weights 10000.0
args.step pgd_anneal_iters 621 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 622 400
penalty weights 10000.0
args.step pgd_anneal_iters 622 600
dim_v 512
rho, theta 509 tensor(-0.0001, device='cuda:0')
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 623 400
penalty weights 10000.0
args.step pgd_anneal_iters 623 600
dim_v 512
retunring when rho == dim_v - 1
Epoch: [23][  26/  26]	Loss 0.000 (0.004)	train_nll   0.70 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.17 (  0.16)	train_acc   0.48 (  0.49)	train_minacc   0.56 (  0.65)	train_majacc   0.47 (  0.46)	train_corr   0.00 (  0.00)	l1 13.0257 (13.5775)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  6.14it/s] 27%|##6       | 7/26 [00:00<00:00, 29.40it/s]                                               27%|##6       | 7/26 [00:00<00:00, 29.40it/s] 50%|#####     | 13/26 [00:00<00:00, 36.30it/s] 73%|#######3  | 19/26 [00:00<00:00, 43.51it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 43.51it/s] 96%|#########6| 25/26 [00:00<00:00, 44.23it/s]100%|##########| 26/26 [00:00<00:00, 36.48it/s]
Test: [   0/  26]	Loss 0.694 (0.694)	test_acc   0.53 (  0.53)	test_minacc   0.72 (  0.72)	test_majacc   0.50 (  0.50)	Loss_d 0.694 (0.694)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.72 (  0.72)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.31 ( -0.31)
Test: [  10/  26]	Loss 0.696 (0.695)	test_acc   0.48 (  0.51)	test_minacc   0.59 (  0.67)	test_majacc   0.46 (  0.48)	Loss_d 0.696 (0.695)	test_acc_d   0.48 (  0.51)	test_minacc_d   0.59 (  0.67)	test_majacc_d   0.46 (  0.48)	test_corr_d  -0.25 ( -0.28)
Test: [  20/  26]	Loss 0.694 (0.695)	test_acc   0.51 (  0.51)	test_minacc   0.55 (  0.67)	test_majacc   0.51 (  0.48)	Loss_d 0.694 (0.695)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.55 (  0.67)	test_majacc_d   0.51 (  0.48)	test_corr_d  -0.24 ( -0.28)
Test: [  26/  26]	Loss 0.697 (0.695)	test_acc   0.50 (  0.51)	test_minacc   0.53 (  0.67)	test_majacc   0.50 (  0.48)	Loss_d 0.697 (0.695)	test_acc_d   0.50 (  0.51)	test_minacc_d   0.53 (  0.67)	test_majacc_d   0.50 (  0.48)	test_corr_d  -0.24 ( -0.28)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 67.30it/s]
Test: [  0/  1]	Loss 0.676 (0.676)	test_acc   0.67 (  0.67)	test_minacc   0.68 (  0.68)	test_majacc   0.53 (  0.53)	Loss_d 0.676 (0.676)	test_acc_d   0.67 (  0.67)	test_minacc_d   0.68 (  0.68)	test_majacc_d   0.53 (  0.53)	test_corr_d  -0.55 ( -0.55)
Test: [  1/  1]	Loss 0.676 (0.676)	test_acc   0.67 (  0.67)	test_minacc   0.68 (  0.68)	test_majacc   0.53 (  0.53)	Loss_d 0.676 (0.676)	test_acc_d   0.67 (  0.67)	test_minacc_d   0.68 (  0.68)	test_majacc_d   0.53 (  0.53)	test_corr_d  -0.55 ( -0.55)
Overall Timing[ 23/  1]	epoch_time 0.0463 (0.0384)	validation_time 0.0004 (0.0006)	train_time 0.0459 (0.0376)
record: (train_acc, test_acc) (0.6109000098705292, 0.6800000071525574)
last accs (train_acc, test_acc) (0.5068000112175941, 0.6660000085830688)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.47it/s] 12%|#1        | 3/26 [00:00<00:02, 11.35it/s] 19%|#9        | 5/26 [00:00<00:01, 13.60it/s] 27%|##6       | 7/26 [00:00<00:01, 14.87it/s] 35%|###4      | 9/26 [00:00<00:01, 15.60it/s] 42%|####2     | 11/26 [00:00<00:00, 15.98it/s] 50%|#####     | 13/26 [00:00<00:00, 16.30it/s] 58%|#####7    | 15/26 [00:00<00:00, 16.63it/s] 65%|######5   | 17/26 [00:01<00:00, 16.87it/s] 73%|#######3  | 19/26 [00:01<00:00, 17.04it/s] 81%|########  | 21/26 [00:01<00:00, 17.17it/s] 88%|########8 | 23/26 [00:01<00:00, 17.34it/s] 96%|#########6| 25/26 [00:01<00:00, 17.41it/s]100%|##########| 26/26 [00:01<00:00, 15.56it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 624 400
penalty weights 10000.0
args.step pgd_anneal_iters 624 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 625 400
penalty weights 10000.0
args.step pgd_anneal_iters 625 600
dim_v 512
rho, theta 509 tensor(-0.0002, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 626 400
penalty weights 10000.0
args.step pgd_anneal_iters 626 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 627 400
penalty weights 10000.0
args.step pgd_anneal_iters 627 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 628 400
penalty weights 10000.0
args.step pgd_anneal_iters 628 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 629 400
penalty weights 10000.0
args.step pgd_anneal_iters 629 600
dim_v 512
rho, theta 509 tensor(-0.0002, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 630 400
penalty weights 10000.0
args.step pgd_anneal_iters 630 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 631 400
penalty weights 10000.0
args.step pgd_anneal_iters 631 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 632 400
penalty weights 10000.0
args.step pgd_anneal_iters 632 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 633 400
penalty weights 10000.0
args.step pgd_anneal_iters 633 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 634 400
penalty weights 10000.0
args.step pgd_anneal_iters 634 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 635 400
penalty weights 10000.0
args.step pgd_anneal_iters 635 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 636 400
penalty weights 10000.0
args.step pgd_anneal_iters 636 600
dim_v 512
rho, theta 509 tensor(-0.0001, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 637 400
penalty weights 10000.0
args.step pgd_anneal_iters 637 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 638 400
penalty weights 10000.0
args.step pgd_anneal_iters 638 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 639 400
penalty weights 10000.0
args.step pgd_anneal_iters 639 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 640 400
penalty weights 10000.0
args.step pgd_anneal_iters 640 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 641 400
penalty weights 10000.0
args.step pgd_anneal_iters 641 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 642 400
penalty weights 10000.0
args.step pgd_anneal_iters 642 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 643 400
penalty weights 10000.0
args.step pgd_anneal_iters 643 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 644 400
penalty weights 10000.0
args.step pgd_anneal_iters 644 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 645 400
penalty weights 10000.0
args.step pgd_anneal_iters 645 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 646 400
penalty weights 10000.0
args.step pgd_anneal_iters 646 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 647 400
penalty weights 10000.0
args.step pgd_anneal_iters 647 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 648 400
penalty weights 10000.0
args.step pgd_anneal_iters 648 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 649 400
penalty weights 10000.0
args.step pgd_anneal_iters 649 600
dim_v 512
retunring when rho == dim_v - 1
Epoch: [24][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.18 (  0.17)	train_acc   0.52 (  0.53)	train_minacc   0.39 (  0.60)	train_majacc   0.54 (  0.52)	train_corr   0.00 (  0.00)	l1 13.0115 (13.0214)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 18.30it/s] 31%|###       | 8/26 [00:00<00:00, 39.84it/s]                                               31%|###       | 8/26 [00:00<00:00, 39.84it/s] 50%|#####     | 13/26 [00:00<00:00, 41.44it/s] 73%|#######3  | 19/26 [00:00<00:00, 47.50it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 47.50it/s] 96%|#########6| 25/26 [00:00<00:00, 47.60it/s]100%|##########| 26/26 [00:00<00:00, 41.06it/s]
Test: [   0/  26]	Loss 0.689 (0.689)	test_acc   0.55 (  0.55)	test_minacc   0.60 (  0.60)	test_majacc   0.54 (  0.54)	Loss_d 0.689 (0.689)	test_acc_d   0.55 (  0.55)	test_minacc_d   0.60 (  0.60)	test_majacc_d   0.54 (  0.54)	test_corr_d  -0.04 ( -0.04)
Test: [  10/  26]	Loss 0.693 (0.691)	test_acc   0.51 (  0.53)	test_minacc   0.47 (  0.57)	test_majacc   0.51 (  0.52)	Loss_d 0.693 (0.691)	test_acc_d   0.51 (  0.53)	test_minacc_d   0.47 (  0.57)	test_majacc_d   0.51 (  0.52)	test_corr_d   0.02 (  0.00)
Test: [  20/  26]	Loss 0.691 (0.691)	test_acc   0.53 (  0.53)	test_minacc   0.52 (  0.57)	test_majacc   0.54 (  0.52)	Loss_d 0.691 (0.691)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.52 (  0.57)	test_majacc_d   0.54 (  0.52)	test_corr_d   0.04 (  0.00)
Test: [  26/  26]	Loss 0.692 (0.691)	test_acc   0.52 (  0.53)	test_minacc   0.39 (  0.57)	test_majacc   0.54 (  0.52)	Loss_d 0.692 (0.691)	test_acc_d   0.52 (  0.53)	test_minacc_d   0.39 (  0.57)	test_majacc_d   0.54 (  0.52)	test_corr_d   0.08 (  0.00)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 67.04it/s]
Test: [  0/  1]	Loss 0.685 (0.685)	test_acc   0.56 (  0.56)	test_minacc   0.57 (  0.57)	test_majacc   0.56 (  0.56)	Loss_d 0.685 (0.685)	test_acc_d   0.56 (  0.56)	test_minacc_d   0.57 (  0.57)	test_majacc_d   0.56 (  0.56)	test_corr_d  -0.39 ( -0.39)
Test: [  1/  1]	Loss 0.685 (0.685)	test_acc   0.56 (  0.56)	test_minacc   0.57 (  0.57)	test_majacc   0.56 (  0.56)	Loss_d 0.685 (0.685)	test_acc_d   0.56 (  0.56)	test_minacc_d   0.57 (  0.57)	test_majacc_d   0.56 (  0.56)	test_corr_d  -0.39 ( -0.39)
Overall Timing[ 24/  1]	epoch_time 0.0476 (0.0387)	validation_time 0.0003 (0.0006)	train_time 0.0473 (0.0380)
record: (train_acc, test_acc) (0.6109000098705292, 0.6800000071525574)
last accs (train_acc, test_acc) (0.527900012165308, 0.5649999976158142)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.86it/s] 12%|#1        | 3/26 [00:00<00:01, 11.56it/s] 19%|#9        | 5/26 [00:00<00:01, 13.87it/s] 27%|##6       | 7/26 [00:00<00:01, 14.96it/s] 35%|###4      | 9/26 [00:00<00:01, 15.78it/s] 42%|####2     | 11/26 [00:00<00:00, 16.10it/s] 54%|#####3    | 14/26 [00:00<00:00, 19.27it/s] 69%|######9   | 18/26 [00:00<00:00, 24.03it/s] 85%|########4 | 22/26 [00:01<00:00, 27.71it/s]100%|##########| 26/26 [00:01<00:00, 30.24it/s]100%|##########| 26/26 [00:01<00:00, 20.78it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 650 400
penalty weights 10000.0
args.step pgd_anneal_iters 650 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 651 400
penalty weights 10000.0
args.step pgd_anneal_iters 651 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 652 400
penalty weights 10000.0
args.step pgd_anneal_iters 652 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 653 400
penalty weights 10000.0
args.step pgd_anneal_iters 653 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 654 400
penalty weights 10000.0
args.step pgd_anneal_iters 654 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 655 400
penalty weights 10000.0
args.step pgd_anneal_iters 655 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 656 400
penalty weights 10000.0
args.step pgd_anneal_iters 656 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 657 400
penalty weights 10000.0
args.step pgd_anneal_iters 657 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 658 400
penalty weights 10000.0
args.step pgd_anneal_iters 658 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 659 400
penalty weights 10000.0
args.step pgd_anneal_iters 659 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 660 400
penalty weights 10000.0
args.step pgd_anneal_iters 660 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 661 400
penalty weights 10000.0
args.step pgd_anneal_iters 661 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 662 400
penalty weights 10000.0
args.step pgd_anneal_iters 662 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 663 400
penalty weights 10000.0
args.step pgd_anneal_iters 663 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 664 400
penalty weights 10000.0
args.step pgd_anneal_iters 664 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 665 400
penalty weights 10000.0
args.step pgd_anneal_iters 665 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 666 400
penalty weights 10000.0
args.step pgd_anneal_iters 666 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 667 400
penalty weights 10000.0
args.step pgd_anneal_iters 667 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 668 400
penalty weights 10000.0
args.step pgd_anneal_iters 668 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 669 400
penalty weights 10000.0
args.step pgd_anneal_iters 669 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 670 400
penalty weights 10000.0
args.step pgd_anneal_iters 670 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 671 400
penalty weights 10000.0
args.step pgd_anneal_iters 671 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 672 400
penalty weights 10000.0
args.step pgd_anneal_iters 672 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 673 400
penalty weights 10000.0
args.step pgd_anneal_iters 673 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 674 400
penalty weights 10000.0
args.step pgd_anneal_iters 674 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 675 400
penalty weights 10000.0
args.step pgd_anneal_iters 675 600
dim_v 512
Epoch: [25][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.18 (  0.18)	train_acc   0.52 (  0.53)	train_minacc   0.36 (  0.56)	train_majacc   0.54 (  0.52)	train_corr   0.00 (  0.00)	l1 12.9899 (13.0002)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.15it/s] 23%|##3       | 6/26 [00:00<00:00, 28.12it/s]                                               23%|##3       | 6/26 [00:00<00:00, 28.12it/s] 46%|####6     | 12/26 [00:00<00:00, 40.47it/s] 65%|######5   | 17/26 [00:00<00:00, 43.39it/s]                                                65%|######5   | 17/26 [00:00<00:00, 43.39it/s] 85%|########4 | 22/26 [00:00<00:00, 45.23it/s]100%|##########| 26/26 [00:00<00:00, 38.79it/s]
Test: [   0/  26]	Loss 0.690 (0.690)	test_acc   0.54 (  0.54)	test_minacc   0.58 (  0.58)	test_majacc   0.53 (  0.53)	Loss_d 0.690 (0.690)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.58 (  0.58)	test_majacc_d   0.53 (  0.53)	test_corr_d  -0.06 ( -0.06)
Test: [  10/  26]	Loss 0.693 (0.691)	test_acc   0.50 (  0.52)	test_minacc   0.47 (  0.57)	test_majacc   0.51 (  0.51)	Loss_d 0.693 (0.691)	test_acc_d   0.50 (  0.52)	test_minacc_d   0.47 (  0.57)	test_majacc_d   0.51 (  0.51)	test_corr_d  -0.00 ( -0.02)
Test: [  20/  26]	Loss 0.691 (0.691)	test_acc   0.53 (  0.52)	test_minacc   0.52 (  0.56)	test_majacc   0.53 (  0.52)	Loss_d 0.691 (0.691)	test_acc_d   0.53 (  0.52)	test_minacc_d   0.52 (  0.56)	test_majacc_d   0.53 (  0.52)	test_corr_d   0.01 ( -0.02)
Test: [  26/  26]	Loss 0.693 (0.691)	test_acc   0.52 (  0.52)	test_minacc   0.36 (  0.56)	test_majacc   0.54 (  0.52)	Loss_d 0.693 (0.691)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.36 (  0.56)	test_majacc_d   0.54 (  0.52)	test_corr_d   0.05 ( -0.02)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 64.05it/s]
Test: [  0/  1]	Loss 0.685 (0.685)	test_acc   0.56 (  0.56)	test_minacc   0.56 (  0.56)	test_majacc   0.55 (  0.55)	Loss_d 0.685 (0.685)	test_acc_d   0.56 (  0.56)	test_minacc_d   0.56 (  0.56)	test_majacc_d   0.55 (  0.55)	test_corr_d  -0.41 ( -0.41)
Test: [  1/  1]	Loss 0.685 (0.685)	test_acc   0.56 (  0.56)	test_minacc   0.56 (  0.56)	test_majacc   0.55 (  0.55)	Loss_d 0.685 (0.685)	test_acc_d   0.56 (  0.56)	test_minacc_d   0.56 (  0.56)	test_majacc_d   0.55 (  0.55)	test_corr_d  -0.41 ( -0.41)
Overall Timing[ 25/  1]	epoch_time 0.0425 (0.0389)	validation_time 0.0004 (0.0006)	train_time 0.0421 (0.0381)
record: (train_acc, test_acc) (0.6109000098705292, 0.6800000071525574)
last accs (train_acc, test_acc) (0.5240000098645687, 0.5630000233650208)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.38it/s] 19%|#9        | 5/26 [00:00<00:01, 18.38it/s] 35%|###4      | 9/26 [00:00<00:00, 24.74it/s] 50%|#####     | 13/26 [00:00<00:00, 28.48it/s] 65%|######5   | 17/26 [00:00<00:00, 30.93it/s] 81%|########  | 21/26 [00:00<00:00, 32.52it/s] 96%|#########6| 25/26 [00:00<00:00, 33.81it/s]100%|##########| 26/26 [00:00<00:00, 27.38it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 676 400
penalty weights 10000.0
args.step pgd_anneal_iters 676 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 677 400
penalty weights 10000.0
args.step pgd_anneal_iters 677 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 678 400
penalty weights 10000.0
args.step pgd_anneal_iters 678 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 679 400
penalty weights 10000.0
args.step pgd_anneal_iters 679 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 680 400
penalty weights 10000.0
args.step pgd_anneal_iters 680 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 681 400
penalty weights 10000.0
args.step pgd_anneal_iters 681 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 682 400
penalty weights 10000.0
args.step pgd_anneal_iters 682 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 683 400
penalty weights 10000.0
args.step pgd_anneal_iters 683 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 684 400
penalty weights 10000.0
args.step pgd_anneal_iters 684 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 685 400
penalty weights 10000.0
args.step pgd_anneal_iters 685 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 686 400
penalty weights 10000.0
args.step pgd_anneal_iters 686 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 687 400
penalty weights 10000.0
args.step pgd_anneal_iters 687 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 688 400
penalty weights 10000.0
args.step pgd_anneal_iters 688 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 689 400
penalty weights 10000.0
args.step pgd_anneal_iters 689 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 690 400
penalty weights 10000.0
args.step pgd_anneal_iters 690 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 691 400
penalty weights 10000.0
args.step pgd_anneal_iters 691 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 692 400
penalty weights 10000.0
args.step pgd_anneal_iters 692 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 693 400
penalty weights 10000.0
args.step pgd_anneal_iters 693 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 694 400
penalty weights 10000.0
args.step pgd_anneal_iters 694 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 695 400
penalty weights 10000.0
args.step pgd_anneal_iters 695 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 696 400
penalty weights 10000.0
args.step pgd_anneal_iters 696 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 697 400
penalty weights 10000.0
args.step pgd_anneal_iters 697 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 698 400
penalty weights 10000.0
args.step pgd_anneal_iters 698 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 699 400
penalty weights 10000.0
args.step pgd_anneal_iters 699 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 700 400
penalty weights 10000.0
args.step pgd_anneal_iters 700 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 701 400
penalty weights 10000.0
args.step pgd_anneal_iters 701 600
dim_v 512
Epoch: [26][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.18 (  0.18)	train_acc   0.52 (  0.52)	train_minacc   0.36 (  0.56)	train_majacc   0.54 (  0.52)	train_corr   0.00 (  0.00)	l1 12.9820 (12.9819)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  6.16it/s] 15%|#5        | 4/26 [00:00<00:01, 17.04it/s] 38%|###8      | 10/26 [00:00<00:00, 32.51it/s]                                                38%|###8      | 10/26 [00:00<00:00, 32.51it/s] 58%|#####7    | 15/26 [00:00<00:00, 36.16it/s]                                                58%|#####7    | 15/26 [00:00<00:00, 36.16it/s] 81%|########  | 21/26 [00:00<00:00, 43.33it/s]100%|##########| 26/26 [00:00<00:00, 35.16it/s]
Test: [   0/  26]	Loss 0.690 (0.690)	test_acc   0.54 (  0.54)	test_minacc   0.60 (  0.60)	test_majacc   0.53 (  0.53)	Loss_d 0.690 (0.690)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.60 (  0.60)	test_majacc_d   0.53 (  0.53)	test_corr_d  -0.09 ( -0.09)
Test: [  10/  26]	Loss 0.693 (0.692)	test_acc   0.50 (  0.52)	test_minacc   0.47 (  0.57)	test_majacc   0.51 (  0.51)	Loss_d 0.693 (0.692)	test_acc_d   0.50 (  0.52)	test_minacc_d   0.47 (  0.57)	test_majacc_d   0.51 (  0.51)	test_corr_d  -0.03 ( -0.05)
Test: [  20/  26]	Loss 0.691 (0.692)	test_acc   0.53 (  0.52)	test_minacc   0.52 (  0.57)	test_majacc   0.53 (  0.52)	Loss_d 0.691 (0.692)	test_acc_d   0.53 (  0.52)	test_minacc_d   0.52 (  0.57)	test_majacc_d   0.53 (  0.52)	test_corr_d  -0.01 ( -0.05)
Test: [  26/  26]	Loss 0.693 (0.692)	test_acc   0.52 (  0.52)	test_minacc   0.36 (  0.56)	test_majacc   0.54 (  0.52)	Loss_d 0.693 (0.692)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.36 (  0.56)	test_majacc_d   0.54 (  0.52)	test_corr_d   0.02 ( -0.05)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 64.71it/s]
Test: [  0/  1]	Loss 0.685 (0.685)	test_acc   0.57 (  0.57)	test_minacc   0.57 (  0.57)	test_majacc   0.55 (  0.55)	Loss_d 0.685 (0.685)	test_acc_d   0.57 (  0.57)	test_minacc_d   0.57 (  0.57)	test_majacc_d   0.55 (  0.55)	test_corr_d  -0.42 ( -0.42)
Test: [  1/  1]	Loss 0.685 (0.685)	test_acc   0.57 (  0.57)	test_minacc   0.57 (  0.57)	test_majacc   0.55 (  0.55)	Loss_d 0.685 (0.685)	test_acc_d   0.57 (  0.57)	test_minacc_d   0.57 (  0.57)	test_majacc_d   0.55 (  0.55)	test_corr_d  -0.42 ( -0.42)
Overall Timing[ 26/  1]	epoch_time 0.0362 (0.0388)	validation_time 0.0003 (0.0006)	train_time 0.0359 (0.0380)
record: (train_acc, test_acc) (0.6109000098705292, 0.6800000071525574)
last accs (train_acc, test_acc) (0.5227000111043453, 0.5680000185966492)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.48it/s] 19%|#9        | 5/26 [00:00<00:01, 20.36it/s] 35%|###4      | 9/26 [00:00<00:00, 26.32it/s] 50%|#####     | 13/26 [00:00<00:00, 29.97it/s] 65%|######5   | 17/26 [00:00<00:00, 32.17it/s] 81%|########  | 21/26 [00:00<00:00, 33.54it/s] 96%|#########6| 25/26 [00:00<00:00, 27.09it/s]100%|##########| 26/26 [00:01<00:00, 25.11it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 702 400
penalty weights 10000.0
args.step pgd_anneal_iters 702 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 703 400
penalty weights 10000.0
args.step pgd_anneal_iters 703 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 704 400
penalty weights 10000.0
args.step pgd_anneal_iters 704 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 705 400
penalty weights 10000.0
args.step pgd_anneal_iters 705 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 706 400
penalty weights 10000.0
args.step pgd_anneal_iters 706 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 707 400
penalty weights 10000.0
args.step pgd_anneal_iters 707 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 708 400
penalty weights 10000.0
args.step pgd_anneal_iters 708 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 709 400
penalty weights 10000.0
args.step pgd_anneal_iters 709 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 710 400
penalty weights 10000.0
args.step pgd_anneal_iters 710 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 711 400
penalty weights 10000.0
args.step pgd_anneal_iters 711 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 712 400
penalty weights 10000.0
args.step pgd_anneal_iters 712 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 713 400
penalty weights 10000.0
args.step pgd_anneal_iters 713 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 714 400
penalty weights 10000.0
args.step pgd_anneal_iters 714 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 715 400
penalty weights 10000.0
args.step pgd_anneal_iters 715 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 716 400
penalty weights 10000.0
args.step pgd_anneal_iters 716 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 717 400
penalty weights 10000.0
args.step pgd_anneal_iters 717 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 718 400
penalty weights 10000.0
args.step pgd_anneal_iters 718 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 719 400
penalty weights 10000.0
args.step pgd_anneal_iters 719 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 720 400
penalty weights 10000.0
args.step pgd_anneal_iters 720 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 721 400
penalty weights 10000.0
args.step pgd_anneal_iters 721 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 722 400
penalty weights 10000.0
args.step pgd_anneal_iters 722 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 723 400
penalty weights 10000.0
args.step pgd_anneal_iters 723 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 724 400
penalty weights 10000.0
args.step pgd_anneal_iters 724 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 725 400
penalty weights 10000.0
args.step pgd_anneal_iters 725 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 726 400
penalty weights 10000.0
args.step pgd_anneal_iters 726 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 727 400
penalty weights 10000.0
args.step pgd_anneal_iters 727 600
dim_v 512
retunring when rho == dim_v - 1
Epoch: [27][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.18 (  0.18)	train_acc   0.52 (  0.52)	train_minacc   0.36 (  0.57)	train_majacc   0.54 (  0.52)	train_corr   0.00 (  0.00)	l1 13.0041 (12.9930)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.79it/s] 23%|##3       | 6/26 [00:00<00:00, 29.27it/s]                                               23%|##3       | 6/26 [00:00<00:00, 29.27it/s] 46%|####6     | 12/26 [00:00<00:00, 41.40it/s] 65%|######5   | 17/26 [00:00<00:00, 43.73it/s]                                                65%|######5   | 17/26 [00:00<00:00, 43.73it/s] 85%|########4 | 22/26 [00:00<00:00, 45.64it/s]100%|##########| 26/26 [00:00<00:00, 39.37it/s]
Test: [   0/  26]	Loss 0.691 (0.691)	test_acc   0.54 (  0.54)	test_minacc   0.60 (  0.60)	test_majacc   0.53 (  0.53)	Loss_d 0.691 (0.691)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.60 (  0.60)	test_majacc_d   0.53 (  0.53)	test_corr_d  -0.11 ( -0.11)
Test: [  10/  26]	Loss 0.693 (0.692)	test_acc   0.50 (  0.52)	test_minacc   0.47 (  0.57)	test_majacc   0.51 (  0.51)	Loss_d 0.693 (0.692)	test_acc_d   0.50 (  0.52)	test_minacc_d   0.47 (  0.57)	test_majacc_d   0.51 (  0.51)	test_corr_d  -0.04 ( -0.06)
Test: [  20/  26]	Loss 0.692 (0.692)	test_acc   0.53 (  0.52)	test_minacc   0.52 (  0.57)	test_majacc   0.53 (  0.52)	Loss_d 0.692 (0.692)	test_acc_d   0.53 (  0.52)	test_minacc_d   0.52 (  0.57)	test_majacc_d   0.53 (  0.52)	test_corr_d  -0.03 ( -0.06)
Test: [  26/  26]	Loss 0.693 (0.692)	test_acc   0.52 (  0.52)	test_minacc   0.36 (  0.57)	test_majacc   0.54 (  0.52)	Loss_d 0.693 (0.692)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.36 (  0.57)	test_majacc_d   0.54 (  0.52)	test_corr_d   0.01 ( -0.06)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 59.67it/s]
Test: [  0/  1]	Loss 0.685 (0.685)	test_acc   0.57 (  0.57)	test_minacc   0.58 (  0.58)	test_majacc   0.55 (  0.55)	Loss_d 0.685 (0.685)	test_acc_d   0.57 (  0.57)	test_minacc_d   0.58 (  0.58)	test_majacc_d   0.55 (  0.55)	test_corr_d  -0.43 ( -0.43)
Test: [  1/  1]	Loss 0.685 (0.685)	test_acc   0.57 (  0.57)	test_minacc   0.58 (  0.58)	test_majacc   0.55 (  0.55)	Loss_d 0.685 (0.685)	test_acc_d   0.57 (  0.57)	test_minacc_d   0.58 (  0.58)	test_majacc_d   0.55 (  0.55)	test_corr_d  -0.43 ( -0.43)
Overall Timing[ 27/  1]	epoch_time 0.0396 (0.0388)	validation_time 0.0003 (0.0006)	train_time 0.0392 (0.0381)
record: (train_acc, test_acc) (0.6109000098705292, 0.6800000071525574)
last accs (train_acc, test_acc) (0.5237000122070312, 0.5730000138282776)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.28it/s] 12%|#1        | 3/26 [00:00<00:02, 10.35it/s] 19%|#9        | 5/26 [00:00<00:01, 12.73it/s] 27%|##6       | 7/26 [00:00<00:01, 14.30it/s] 35%|###4      | 9/26 [00:00<00:01, 14.56it/s] 42%|####2     | 11/26 [00:00<00:00, 15.08it/s] 50%|#####     | 13/26 [00:00<00:00, 15.73it/s] 58%|#####7    | 15/26 [00:01<00:00, 16.13it/s] 65%|######5   | 17/26 [00:01<00:00, 16.43it/s] 73%|#######3  | 19/26 [00:01<00:00, 16.63it/s] 81%|########  | 21/26 [00:01<00:00, 16.67it/s] 88%|########8 | 23/26 [00:01<00:00, 16.83it/s] 96%|#########6| 25/26 [00:01<00:00, 16.90it/s]100%|##########| 26/26 [00:01<00:00, 14.91it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 728 400
penalty weights 10000.0
args.step pgd_anneal_iters 728 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 729 400
penalty weights 10000.0
args.step pgd_anneal_iters 729 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 730 400
penalty weights 10000.0
args.step pgd_anneal_iters 730 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 731 400
penalty weights 10000.0
args.step pgd_anneal_iters 731 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 732 400
penalty weights 10000.0
args.step pgd_anneal_iters 732 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 733 400
penalty weights 10000.0
args.step pgd_anneal_iters 733 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 734 400
penalty weights 10000.0
args.step pgd_anneal_iters 734 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 735 400
penalty weights 10000.0
args.step pgd_anneal_iters 735 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 736 400
penalty weights 10000.0
args.step pgd_anneal_iters 736 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 737 400
penalty weights 10000.0
args.step pgd_anneal_iters 737 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 738 400
penalty weights 10000.0
args.step pgd_anneal_iters 738 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 739 400
penalty weights 10000.0
args.step pgd_anneal_iters 739 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 740 400
penalty weights 10000.0
args.step pgd_anneal_iters 740 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 741 400
penalty weights 10000.0
args.step pgd_anneal_iters 741 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 742 400
penalty weights 10000.0
args.step pgd_anneal_iters 742 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 743 400
penalty weights 10000.0
args.step pgd_anneal_iters 743 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 744 400
penalty weights 10000.0
args.step pgd_anneal_iters 744 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 745 400
penalty weights 10000.0
args.step pgd_anneal_iters 745 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 746 400
penalty weights 10000.0
args.step pgd_anneal_iters 746 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 747 400
penalty weights 10000.0
args.step pgd_anneal_iters 747 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 748 400
penalty weights 10000.0
args.step pgd_anneal_iters 748 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 749 400
penalty weights 10000.0
args.step pgd_anneal_iters 749 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 750 400
penalty weights 10000.0
args.step pgd_anneal_iters 750 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 751 400
penalty weights 10000.0
args.step pgd_anneal_iters 751 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 752 400
penalty weights 10000.0
args.step pgd_anneal_iters 752 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 753 400
penalty weights 10000.0
args.step pgd_anneal_iters 753 600
dim_v 512
retunring when rho == dim_v - 1
Epoch: [28][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.18 (  0.18)	train_acc   0.52 (  0.52)	train_minacc   0.39 (  0.57)	train_majacc   0.54 (  0.52)	train_corr   0.00 (  0.00)	l1 13.0280 (13.0163)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.63it/s] 27%|##6       | 7/26 [00:00<00:00, 34.12it/s]                                               27%|##6       | 7/26 [00:00<00:00, 34.12it/s] 50%|#####     | 13/26 [00:00<00:00, 39.03it/s] 73%|#######3  | 19/26 [00:00<00:00, 45.20it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 45.20it/s] 96%|#########6| 25/26 [00:00<00:00, 45.10it/s]100%|##########| 26/26 [00:00<00:00, 38.68it/s]
Test: [   0/  26]	Loss 0.691 (0.691)	test_acc   0.54 (  0.54)	test_minacc   0.60 (  0.60)	test_majacc   0.53 (  0.53)	Loss_d 0.691 (0.691)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.60 (  0.60)	test_majacc_d   0.53 (  0.53)	test_corr_d  -0.12 ( -0.12)
Test: [  10/  26]	Loss 0.693 (0.692)	test_acc   0.50 (  0.52)	test_minacc   0.47 (  0.58)	test_majacc   0.50 (  0.51)	Loss_d 0.693 (0.692)	test_acc_d   0.50 (  0.52)	test_minacc_d   0.47 (  0.58)	test_majacc_d   0.50 (  0.51)	test_corr_d  -0.05 ( -0.07)
Test: [  20/  26]	Loss 0.692 (0.692)	test_acc   0.53 (  0.52)	test_minacc   0.52 (  0.58)	test_majacc   0.53 (  0.51)	Loss_d 0.692 (0.692)	test_acc_d   0.53 (  0.52)	test_minacc_d   0.52 (  0.58)	test_majacc_d   0.53 (  0.51)	test_corr_d  -0.04 ( -0.07)
Test: [  26/  26]	Loss 0.693 (0.692)	test_acc   0.52 (  0.52)	test_minacc   0.39 (  0.57)	test_majacc   0.54 (  0.52)	Loss_d 0.693 (0.692)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.39 (  0.57)	test_majacc_d   0.54 (  0.52)	test_corr_d  -0.01 ( -0.07)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.40it/s]
Test: [  0/  1]	Loss 0.685 (0.685)	test_acc   0.57 (  0.57)	test_minacc   0.57 (  0.57)	test_majacc   0.55 (  0.55)	Loss_d 0.685 (0.685)	test_acc_d   0.57 (  0.57)	test_minacc_d   0.57 (  0.57)	test_majacc_d   0.55 (  0.55)	test_corr_d  -0.44 ( -0.44)
Test: [  1/  1]	Loss 0.685 (0.685)	test_acc   0.57 (  0.57)	test_minacc   0.57 (  0.57)	test_majacc   0.55 (  0.55)	Loss_d 0.685 (0.685)	test_acc_d   0.57 (  0.57)	test_minacc_d   0.57 (  0.57)	test_majacc_d   0.55 (  0.55)	test_corr_d  -0.44 ( -0.44)
Overall Timing[ 28/  1]	epoch_time 0.0502 (0.0392)	validation_time 0.0004 (0.0006)	train_time 0.0498 (0.0385)
record: (train_acc, test_acc) (0.6109000098705292, 0.6800000071525574)
last accs (train_acc, test_acc) (0.5240000112354756, 0.5700000524520874)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  6.15it/s] 12%|#1        | 3/26 [00:00<00:02, 11.30it/s] 19%|#9        | 5/26 [00:00<00:01, 13.72it/s] 27%|##6       | 7/26 [00:00<00:01, 15.31it/s] 35%|###4      | 9/26 [00:00<00:01, 16.18it/s] 42%|####2     | 11/26 [00:00<00:00, 16.81it/s] 50%|#####     | 13/26 [00:00<00:00, 17.15it/s] 58%|#####7    | 15/26 [00:00<00:00, 17.28it/s] 65%|######5   | 17/26 [00:01<00:00, 17.27it/s] 73%|#######3  | 19/26 [00:01<00:00, 17.43it/s] 81%|########  | 21/26 [00:01<00:00, 17.30it/s] 88%|########8 | 23/26 [00:01<00:00, 17.39it/s] 96%|#########6| 25/26 [00:01<00:00, 17.37it/s]100%|##########| 26/26 [00:01<00:00, 15.82it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 754 400
penalty weights 10000.0
args.step pgd_anneal_iters 754 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 755 400
penalty weights 10000.0
args.step pgd_anneal_iters 755 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 756 400
penalty weights 10000.0
args.step pgd_anneal_iters 756 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 757 400
penalty weights 10000.0
args.step pgd_anneal_iters 757 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 758 400
penalty weights 10000.0
args.step pgd_anneal_iters 758 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 759 400
penalty weights 10000.0
args.step pgd_anneal_iters 759 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 760 400
penalty weights 10000.0
args.step pgd_anneal_iters 760 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 761 400
penalty weights 10000.0
args.step pgd_anneal_iters 761 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 762 400
penalty weights 10000.0
args.step pgd_anneal_iters 762 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 763 400
penalty weights 10000.0
args.step pgd_anneal_iters 763 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 764 400
penalty weights 10000.0
args.step pgd_anneal_iters 764 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 765 400
penalty weights 10000.0
args.step pgd_anneal_iters 765 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 766 400
penalty weights 10000.0
args.step pgd_anneal_iters 766 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 767 400
penalty weights 10000.0
args.step pgd_anneal_iters 767 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 768 400
penalty weights 10000.0
args.step pgd_anneal_iters 768 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 769 400
penalty weights 10000.0
args.step pgd_anneal_iters 769 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 770 400
penalty weights 10000.0
args.step pgd_anneal_iters 770 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 771 400
penalty weights 10000.0
args.step pgd_anneal_iters 771 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 772 400
penalty weights 10000.0
args.step pgd_anneal_iters 772 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 773 400
penalty weights 10000.0
args.step pgd_anneal_iters 773 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 774 400
penalty weights 10000.0
args.step pgd_anneal_iters 774 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 775 400
penalty weights 10000.0
args.step pgd_anneal_iters 775 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 776 400
penalty weights 10000.0
args.step pgd_anneal_iters 776 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 777 400
penalty weights 10000.0
args.step pgd_anneal_iters 777 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 778 400
penalty weights 10000.0
args.step pgd_anneal_iters 778 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 779 400
penalty weights 10000.0
args.step pgd_anneal_iters 779 600
dim_v 512
retunring when rho == dim_v - 1
Epoch: [29][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.18 (  0.18)	train_acc   0.52 (  0.52)	train_minacc   0.42 (  0.58)	train_majacc   0.54 (  0.52)	train_corr   0.00 (  0.00)	l1 13.0518 (13.0402)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.08it/s] 27%|##6       | 7/26 [00:00<00:00, 36.57it/s]                                               27%|##6       | 7/26 [00:00<00:00, 36.57it/s] 50%|#####     | 13/26 [00:00<00:00, 42.39it/s] 73%|#######3  | 19/26 [00:00<00:00, 47.87it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 47.87it/s] 96%|#########6| 25/26 [00:00<00:00, 47.41it/s]100%|##########| 26/26 [00:00<00:00, 40.63it/s]
Test: [   0/  26]	Loss 0.691 (0.691)	test_acc   0.54 (  0.54)	test_minacc   0.60 (  0.60)	test_majacc   0.53 (  0.53)	Loss_d 0.691 (0.691)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.60 (  0.60)	test_majacc_d   0.53 (  0.53)	test_corr_d  -0.13 ( -0.13)
Test: [  10/  26]	Loss 0.693 (0.692)	test_acc   0.50 (  0.52)	test_minacc   0.47 (  0.58)	test_majacc   0.50 (  0.51)	Loss_d 0.693 (0.692)	test_acc_d   0.50 (  0.52)	test_minacc_d   0.47 (  0.58)	test_majacc_d   0.50 (  0.51)	test_corr_d  -0.06 ( -0.08)
Test: [  20/  26]	Loss 0.692 (0.692)	test_acc   0.53 (  0.53)	test_minacc   0.52 (  0.58)	test_majacc   0.53 (  0.52)	Loss_d 0.692 (0.692)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.52 (  0.58)	test_majacc_d   0.53 (  0.52)	test_corr_d  -0.05 ( -0.08)
Test: [  26/  26]	Loss 0.693 (0.692)	test_acc   0.52 (  0.53)	test_minacc   0.42 (  0.58)	test_majacc   0.54 (  0.52)	Loss_d 0.693 (0.692)	test_acc_d   0.52 (  0.53)	test_minacc_d   0.42 (  0.58)	test_majacc_d   0.54 (  0.52)	test_corr_d  -0.02 ( -0.08)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.14it/s]
Test: [  0/  1]	Loss 0.685 (0.685)	test_acc   0.58 (  0.58)	test_minacc   0.58 (  0.58)	test_majacc   0.55 (  0.55)	Loss_d 0.685 (0.685)	test_acc_d   0.58 (  0.58)	test_minacc_d   0.58 (  0.58)	test_majacc_d   0.55 (  0.55)	test_corr_d  -0.44 ( -0.44)
Test: [  1/  1]	Loss 0.685 (0.685)	test_acc   0.58 (  0.58)	test_minacc   0.58 (  0.58)	test_majacc   0.55 (  0.55)	Loss_d 0.685 (0.685)	test_acc_d   0.58 (  0.58)	test_minacc_d   0.58 (  0.58)	test_majacc_d   0.55 (  0.55)	test_corr_d  -0.44 ( -0.44)
Overall Timing[ 29/  1]	epoch_time 0.0480 (0.0395)	validation_time 0.0004 (0.0006)	train_time 0.0475 (0.0388)
record: (train_acc, test_acc) (0.6109000098705292, 0.6800000071525574)
last accs (train_acc, test_acc) (0.5253000148534774, 0.5760000348091125)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.91it/s] 12%|#1        | 3/26 [00:00<00:02, 11.02it/s] 19%|#9        | 5/26 [00:00<00:01, 13.43it/s] 27%|##6       | 7/26 [00:00<00:01, 14.85it/s] 35%|###4      | 9/26 [00:00<00:01, 15.74it/s] 42%|####2     | 11/26 [00:00<00:00, 16.22it/s] 50%|#####     | 13/26 [00:00<00:00, 16.47it/s] 58%|#####7    | 15/26 [00:00<00:00, 16.67it/s] 65%|######5   | 17/26 [00:01<00:00, 16.84it/s] 73%|#######3  | 19/26 [00:01<00:00, 16.92it/s] 81%|########  | 21/26 [00:01<00:00, 16.93it/s] 88%|########8 | 23/26 [00:01<00:00, 16.89it/s] 96%|#########6| 25/26 [00:01<00:00, 17.05it/s]100%|##########| 26/26 [00:01<00:00, 15.36it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 780 400
penalty weights 10000.0
args.step pgd_anneal_iters 780 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 781 400
penalty weights 10000.0
args.step pgd_anneal_iters 781 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 782 400
penalty weights 10000.0
args.step pgd_anneal_iters 782 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 783 400
penalty weights 10000.0
args.step pgd_anneal_iters 783 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 784 400
penalty weights 10000.0
args.step pgd_anneal_iters 784 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 785 400
penalty weights 10000.0
args.step pgd_anneal_iters 785 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 786 400
penalty weights 10000.0
args.step pgd_anneal_iters 786 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 787 400
penalty weights 10000.0
args.step pgd_anneal_iters 787 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 788 400
penalty weights 10000.0
args.step pgd_anneal_iters 788 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 789 400
penalty weights 10000.0
args.step pgd_anneal_iters 789 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 790 400
penalty weights 10000.0
args.step pgd_anneal_iters 790 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 791 400
penalty weights 10000.0
args.step pgd_anneal_iters 791 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 792 400
penalty weights 10000.0
args.step pgd_anneal_iters 792 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 793 400
penalty weights 10000.0
args.step pgd_anneal_iters 793 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 794 400
penalty weights 10000.0
args.step pgd_anneal_iters 794 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 795 400
penalty weights 10000.0
args.step pgd_anneal_iters 795 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 796 400
penalty weights 10000.0
args.step pgd_anneal_iters 796 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 797 400
penalty weights 10000.0
args.step pgd_anneal_iters 797 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 798 400
penalty weights 10000.0
args.step pgd_anneal_iters 798 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 799 400
penalty weights 10000.0
args.step pgd_anneal_iters 799 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 800 400
penalty weights 10000.0
args.step pgd_anneal_iters 800 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 801 400
penalty weights 10000.0
args.step pgd_anneal_iters 801 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 802 400
penalty weights 10000.0
args.step pgd_anneal_iters 802 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 803 400
penalty weights 10000.0
args.step pgd_anneal_iters 803 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 804 400
penalty weights 10000.0
args.step pgd_anneal_iters 804 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 805 400
penalty weights 10000.0
args.step pgd_anneal_iters 805 600
dim_v 512
retunring when rho == dim_v - 1
Epoch: [30][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.18 (  0.18)	train_acc   0.53 (  0.53)	train_minacc   0.42 (  0.58)	train_majacc   0.55 (  0.52)	train_corr   0.00 (  0.00)	l1 13.0750 (13.0638)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.56it/s] 27%|##6       | 7/26 [00:00<00:00, 34.98it/s]                                               27%|##6       | 7/26 [00:00<00:00, 34.98it/s] 50%|#####     | 13/26 [00:00<00:00, 39.23it/s] 73%|#######3  | 19/26 [00:00<00:00, 45.54it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 45.54it/s] 96%|#########6| 25/26 [00:00<00:00, 46.29it/s]100%|##########| 26/26 [00:00<00:00, 39.29it/s]
Test: [   0/  26]	Loss 0.691 (0.691)	test_acc   0.55 (  0.55)	test_minacc   0.63 (  0.63)	test_majacc   0.53 (  0.53)	Loss_d 0.691 (0.691)	test_acc_d   0.55 (  0.55)	test_minacc_d   0.63 (  0.63)	test_majacc_d   0.53 (  0.53)	test_corr_d  -0.13 ( -0.13)
Test: [  10/  26]	Loss 0.693 (0.692)	test_acc   0.50 (  0.52)	test_minacc   0.48 (  0.59)	test_majacc   0.51 (  0.51)	Loss_d 0.693 (0.692)	test_acc_d   0.50 (  0.52)	test_minacc_d   0.48 (  0.59)	test_majacc_d   0.51 (  0.51)	test_corr_d  -0.07 ( -0.09)
Test: [  20/  26]	Loss 0.692 (0.692)	test_acc   0.53 (  0.53)	test_minacc   0.52 (  0.58)	test_majacc   0.53 (  0.52)	Loss_d 0.692 (0.692)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.52 (  0.58)	test_majacc_d   0.53 (  0.52)	test_corr_d  -0.06 ( -0.09)
Test: [  26/  26]	Loss 0.693 (0.692)	test_acc   0.53 (  0.53)	test_minacc   0.42 (  0.59)	test_majacc   0.55 (  0.52)	Loss_d 0.693 (0.692)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.42 (  0.59)	test_majacc_d   0.55 (  0.52)	test_corr_d  -0.02 ( -0.09)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 60.10it/s]
Test: [  0/  1]	Loss 0.685 (0.685)	test_acc   0.58 (  0.58)	test_minacc   0.58 (  0.58)	test_majacc   0.56 (  0.56)	Loss_d 0.685 (0.685)	test_acc_d   0.58 (  0.58)	test_minacc_d   0.58 (  0.58)	test_majacc_d   0.56 (  0.56)	test_corr_d  -0.44 ( -0.44)
Test: [  1/  1]	Loss 0.685 (0.685)	test_acc   0.58 (  0.58)	test_minacc   0.58 (  0.58)	test_majacc   0.56 (  0.56)	Loss_d 0.685 (0.685)	test_acc_d   0.58 (  0.58)	test_minacc_d   0.58 (  0.58)	test_majacc_d   0.56 (  0.56)	test_corr_d  -0.44 ( -0.44)
Overall Timing[ 30/  1]	epoch_time 0.0486 (0.0398)	validation_time 0.0005 (0.0006)	train_time 0.0481 (0.0391)
record: (train_acc, test_acc) (0.6109000098705292, 0.6800000071525574)
last accs (train_acc, test_acc) (0.526400006532669, 0.5800000429153442)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.71it/s] 12%|#1        | 3/26 [00:00<00:01, 12.56it/s] 19%|#9        | 5/26 [00:00<00:01, 14.68it/s] 27%|##6       | 7/26 [00:00<00:01, 15.70it/s] 35%|###4      | 9/26 [00:00<00:01, 16.47it/s] 42%|####2     | 11/26 [00:00<00:00, 16.84it/s] 50%|#####     | 13/26 [00:00<00:00, 16.81it/s] 58%|#####7    | 15/26 [00:00<00:00, 16.72it/s] 65%|######5   | 17/26 [00:01<00:00, 16.95it/s] 73%|#######3  | 19/26 [00:01<00:00, 16.90it/s] 81%|########  | 21/26 [00:01<00:00, 16.84it/s] 88%|########8 | 23/26 [00:01<00:00, 17.01it/s] 96%|#########6| 25/26 [00:01<00:00, 17.06it/s]100%|##########| 26/26 [00:01<00:00, 15.78it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 806 400
penalty weights 10000.0
args.step pgd_anneal_iters 806 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 807 400
penalty weights 10000.0
args.step pgd_anneal_iters 807 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 808 400
penalty weights 10000.0
args.step pgd_anneal_iters 808 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 809 400
penalty weights 10000.0
args.step pgd_anneal_iters 809 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 810 400
penalty weights 10000.0
args.step pgd_anneal_iters 810 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 811 400
penalty weights 10000.0
args.step pgd_anneal_iters 811 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 812 400
penalty weights 10000.0
args.step pgd_anneal_iters 812 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 813 400
penalty weights 10000.0
args.step pgd_anneal_iters 813 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 814 400
penalty weights 10000.0
args.step pgd_anneal_iters 814 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 815 400
penalty weights 10000.0
args.step pgd_anneal_iters 815 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 816 400
penalty weights 10000.0
args.step pgd_anneal_iters 816 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 817 400
penalty weights 10000.0
args.step pgd_anneal_iters 817 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 818 400
penalty weights 10000.0
args.step pgd_anneal_iters 818 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 819 400
penalty weights 10000.0
args.step pgd_anneal_iters 819 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 820 400
penalty weights 10000.0
args.step pgd_anneal_iters 820 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 821 400
penalty weights 10000.0
args.step pgd_anneal_iters 821 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 822 400
penalty weights 10000.0
args.step pgd_anneal_iters 822 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 823 400
penalty weights 10000.0
args.step pgd_anneal_iters 823 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 824 400
penalty weights 10000.0
args.step pgd_anneal_iters 824 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 825 400
penalty weights 10000.0
args.step pgd_anneal_iters 825 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 826 400
penalty weights 10000.0
args.step pgd_anneal_iters 826 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 827 400
penalty weights 10000.0
args.step pgd_anneal_iters 827 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 828 400
penalty weights 10000.0
args.step pgd_anneal_iters 828 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 829 400
penalty weights 10000.0
args.step pgd_anneal_iters 829 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 830 400
penalty weights 10000.0
args.step pgd_anneal_iters 830 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 831 400
penalty weights 10000.0
args.step pgd_anneal_iters 831 600
dim_v 512
retunring when rho == dim_v - 1
Epoch: [31][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.18 (  0.18)	train_acc   0.53 (  0.53)	train_minacc   0.44 (  0.59)	train_majacc   0.54 (  0.52)	train_corr   0.00 (  0.00)	l1 13.0974 (13.0866)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.08it/s] 23%|##3       | 6/26 [00:00<00:00, 31.59it/s]                                               23%|##3       | 6/26 [00:00<00:00, 31.59it/s] 46%|####6     | 12/26 [00:00<00:00, 42.00it/s] 65%|######5   | 17/26 [00:00<00:00, 44.11it/s]                                                65%|######5   | 17/26 [00:00<00:00, 44.11it/s] 85%|########4 | 22/26 [00:00<00:00, 45.98it/s]100%|##########| 26/26 [00:00<00:00, 40.08it/s]
Test: [   0/  26]	Loss 0.691 (0.691)	test_acc   0.55 (  0.55)	test_minacc   0.67 (  0.67)	test_majacc   0.53 (  0.53)	Loss_d 0.691 (0.691)	test_acc_d   0.55 (  0.55)	test_minacc_d   0.67 (  0.67)	test_majacc_d   0.53 (  0.53)	test_corr_d  -0.14 ( -0.14)
Test: [  10/  26]	Loss 0.693 (0.692)	test_acc   0.51 (  0.53)	test_minacc   0.48 (  0.60)	test_majacc   0.51 (  0.52)	Loss_d 0.693 (0.692)	test_acc_d   0.51 (  0.53)	test_minacc_d   0.48 (  0.60)	test_majacc_d   0.51 (  0.52)	test_corr_d  -0.07 ( -0.10)
Test: [  20/  26]	Loss 0.692 (0.692)	test_acc   0.53 (  0.53)	test_minacc   0.52 (  0.59)	test_majacc   0.53 (  0.52)	Loss_d 0.692 (0.692)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.52 (  0.59)	test_majacc_d   0.53 (  0.52)	test_corr_d  -0.06 ( -0.10)
Test: [  26/  26]	Loss 0.693 (0.692)	test_acc   0.53 (  0.53)	test_minacc   0.47 (  0.59)	test_majacc   0.54 (  0.52)	Loss_d 0.693 (0.692)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.47 (  0.59)	test_majacc_d   0.54 (  0.52)	test_corr_d  -0.03 ( -0.10)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.46it/s]
Test: [  0/  1]	Loss 0.685 (0.685)	test_acc   0.58 (  0.58)	test_minacc   0.58 (  0.58)	test_majacc   0.57 (  0.57)	Loss_d 0.685 (0.685)	test_acc_d   0.58 (  0.58)	test_minacc_d   0.58 (  0.58)	test_majacc_d   0.57 (  0.57)	test_corr_d  -0.45 ( -0.45)
Test: [  1/  1]	Loss 0.685 (0.685)	test_acc   0.58 (  0.58)	test_minacc   0.58 (  0.58)	test_majacc   0.57 (  0.57)	Loss_d 0.685 (0.685)	test_acc_d   0.58 (  0.58)	test_minacc_d   0.58 (  0.58)	test_majacc_d   0.57 (  0.57)	test_corr_d  -0.45 ( -0.45)
Overall Timing[ 31/  1]	epoch_time 0.0499 (0.0401)	validation_time 0.0004 (0.0006)	train_time 0.0495 (0.0394)
record: (train_acc, test_acc) (0.6109000098705292, 0.6800000071525574)
last accs (train_acc, test_acc) (0.5277000136375427, 0.5820000171661377)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:06,  3.71it/s] 12%|#1        | 3/26 [00:00<00:02,  8.77it/s] 19%|#9        | 5/26 [00:00<00:01, 11.58it/s] 27%|##6       | 7/26 [00:00<00:01, 13.31it/s] 35%|###4      | 9/26 [00:00<00:01, 14.46it/s] 42%|####2     | 11/26 [00:00<00:00, 15.23it/s] 50%|#####     | 13/26 [00:00<00:00, 15.86it/s] 58%|#####7    | 15/26 [00:01<00:00, 16.36it/s] 65%|######5   | 17/26 [00:01<00:00, 16.59it/s] 73%|#######3  | 19/26 [00:01<00:00, 16.72it/s] 81%|########  | 21/26 [00:01<00:00, 16.64it/s] 88%|########8 | 23/26 [00:01<00:00, 16.85it/s] 96%|#########6| 25/26 [00:01<00:00, 16.87it/s]100%|##########| 26/26 [00:01<00:00, 14.44it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 832 400
penalty weights 10000.0
args.step pgd_anneal_iters 832 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 833 400
penalty weights 10000.0
args.step pgd_anneal_iters 833 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 834 400
penalty weights 10000.0
args.step pgd_anneal_iters 834 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 835 400
penalty weights 10000.0
args.step pgd_anneal_iters 835 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 836 400
penalty weights 10000.0
args.step pgd_anneal_iters 836 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 837 400
penalty weights 10000.0
args.step pgd_anneal_iters 837 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 838 400
penalty weights 10000.0
args.step pgd_anneal_iters 838 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 839 400
penalty weights 10000.0
args.step pgd_anneal_iters 839 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 840 400
penalty weights 10000.0
args.step pgd_anneal_iters 840 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 841 400
penalty weights 10000.0
args.step pgd_anneal_iters 841 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 842 400
penalty weights 10000.0
args.step pgd_anneal_iters 842 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 843 400
penalty weights 10000.0
args.step pgd_anneal_iters 843 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 844 400
penalty weights 10000.0
args.step pgd_anneal_iters 844 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 845 400
penalty weights 10000.0
args.step pgd_anneal_iters 845 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 846 400
penalty weights 10000.0
args.step pgd_anneal_iters 846 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 847 400
penalty weights 10000.0
args.step pgd_anneal_iters 847 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 848 400
penalty weights 10000.0
args.step pgd_anneal_iters 848 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 849 400
penalty weights 10000.0
args.step pgd_anneal_iters 849 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 850 400
penalty weights 10000.0
args.step pgd_anneal_iters 850 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 851 400
penalty weights 10000.0
args.step pgd_anneal_iters 851 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 852 400
penalty weights 10000.0
args.step pgd_anneal_iters 852 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 853 400
penalty weights 10000.0
args.step pgd_anneal_iters 853 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 854 400
penalty weights 10000.0
args.step pgd_anneal_iters 854 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 855 400
penalty weights 10000.0
args.step pgd_anneal_iters 855 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 856 400
penalty weights 10000.0
args.step pgd_anneal_iters 856 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 857 400
penalty weights 10000.0
args.step pgd_anneal_iters 857 600
dim_v 512
retunring when rho == dim_v - 1
Epoch: [32][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.17 (  0.17)	train_acc   0.53 (  0.53)	train_minacc   0.47 (  0.59)	train_majacc   0.54 (  0.52)	train_corr   0.00 (  0.00)	l1 13.1189 (13.1085)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 18.71it/s] 31%|###       | 8/26 [00:00<00:00, 41.76it/s]                                               31%|###       | 8/26 [00:00<00:00, 41.76it/s] 50%|#####     | 13/26 [00:00<00:00, 42.75it/s] 73%|#######3  | 19/26 [00:00<00:00, 48.59it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 48.59it/s] 96%|#########6| 25/26 [00:00<00:00, 48.27it/s]100%|##########| 26/26 [00:00<00:00, 41.75it/s]
Test: [   0/  26]	Loss 0.691 (0.691)	test_acc   0.55 (  0.55)	test_minacc   0.68 (  0.68)	test_majacc   0.52 (  0.52)	Loss_d 0.691 (0.691)	test_acc_d   0.55 (  0.55)	test_minacc_d   0.68 (  0.68)	test_majacc_d   0.52 (  0.52)	test_corr_d  -0.15 ( -0.15)
Test: [  10/  26]	Loss 0.693 (0.692)	test_acc   0.51 (  0.53)	test_minacc   0.48 (  0.61)	test_majacc   0.52 (  0.52)	Loss_d 0.693 (0.692)	test_acc_d   0.51 (  0.53)	test_minacc_d   0.48 (  0.61)	test_majacc_d   0.52 (  0.52)	test_corr_d  -0.08 ( -0.10)
Test: [  20/  26]	Loss 0.692 (0.692)	test_acc   0.53 (  0.53)	test_minacc   0.52 (  0.60)	test_majacc   0.54 (  0.52)	Loss_d 0.692 (0.692)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.52 (  0.60)	test_majacc_d   0.54 (  0.52)	test_corr_d  -0.07 ( -0.10)
Test: [  26/  26]	Loss 0.693 (0.692)	test_acc   0.53 (  0.53)	test_minacc   0.47 (  0.60)	test_majacc   0.54 (  0.52)	Loss_d 0.693 (0.692)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.47 (  0.60)	test_majacc_d   0.54 (  0.52)	test_corr_d  -0.04 ( -0.10)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.37it/s]
Test: [  0/  1]	Loss 0.686 (0.686)	test_acc   0.59 (  0.59)	test_minacc   0.59 (  0.59)	test_majacc   0.58 (  0.58)	Loss_d 0.686 (0.686)	test_acc_d   0.59 (  0.59)	test_minacc_d   0.59 (  0.59)	test_majacc_d   0.58 (  0.58)	test_corr_d  -0.45 ( -0.45)
Test: [  1/  1]	Loss 0.686 (0.686)	test_acc   0.59 (  0.59)	test_minacc   0.59 (  0.59)	test_majacc   0.58 (  0.58)	Loss_d 0.686 (0.686)	test_acc_d   0.59 (  0.59)	test_minacc_d   0.59 (  0.59)	test_majacc_d   0.58 (  0.58)	test_corr_d  -0.45 ( -0.45)
Overall Timing[ 32/  1]	epoch_time 0.0521 (0.0405)	validation_time 0.0006 (0.0006)	train_time 0.0514 (0.0398)
record: (train_acc, test_acc) (0.6109000098705292, 0.6800000071525574)
last accs (train_acc, test_acc) (0.5293000181913375, 0.5879999995231628)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.38it/s] 12%|#1        | 3/26 [00:00<00:02, 10.07it/s] 19%|#9        | 5/26 [00:00<00:01, 12.77it/s] 27%|##6       | 7/26 [00:00<00:01, 14.34it/s] 35%|###4      | 9/26 [00:00<00:01, 15.47it/s] 42%|####2     | 11/26 [00:00<00:00, 15.90it/s] 50%|#####     | 13/26 [00:00<00:00, 16.32it/s] 58%|#####7    | 15/26 [00:01<00:00, 16.67it/s] 65%|######5   | 17/26 [00:01<00:00, 16.84it/s] 73%|#######3  | 19/26 [00:01<00:00, 17.05it/s] 81%|########  | 21/26 [00:01<00:00, 17.07it/s] 88%|########8 | 23/26 [00:01<00:00, 17.25it/s] 96%|#########6| 25/26 [00:01<00:00, 17.33it/s]100%|##########| 26/26 [00:01<00:00, 15.30it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 858 400
penalty weights 10000.0
args.step pgd_anneal_iters 858 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 859 400
penalty weights 10000.0
args.step pgd_anneal_iters 859 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 860 400
penalty weights 10000.0
args.step pgd_anneal_iters 860 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 861 400
penalty weights 10000.0
args.step pgd_anneal_iters 861 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 862 400
penalty weights 10000.0
args.step pgd_anneal_iters 862 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 863 400
penalty weights 10000.0
args.step pgd_anneal_iters 863 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 864 400
penalty weights 10000.0
args.step pgd_anneal_iters 864 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 865 400
penalty weights 10000.0
args.step pgd_anneal_iters 865 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 866 400
penalty weights 10000.0
args.step pgd_anneal_iters 866 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 867 400
penalty weights 10000.0
args.step pgd_anneal_iters 867 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 868 400
penalty weights 10000.0
args.step pgd_anneal_iters 868 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 869 400
penalty weights 10000.0
args.step pgd_anneal_iters 869 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 870 400
penalty weights 10000.0
args.step pgd_anneal_iters 870 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 871 400
penalty weights 10000.0
args.step pgd_anneal_iters 871 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 872 400
penalty weights 10000.0
args.step pgd_anneal_iters 872 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 873 400
penalty weights 10000.0
args.step pgd_anneal_iters 873 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 874 400
penalty weights 10000.0
args.step pgd_anneal_iters 874 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 875 400
penalty weights 10000.0
args.step pgd_anneal_iters 875 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 876 400
penalty weights 10000.0
args.step pgd_anneal_iters 876 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 877 400
penalty weights 10000.0
args.step pgd_anneal_iters 877 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 878 400
penalty weights 10000.0
args.step pgd_anneal_iters 878 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 879 400
penalty weights 10000.0
args.step pgd_anneal_iters 879 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 880 400
penalty weights 10000.0
args.step pgd_anneal_iters 880 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 881 400
penalty weights 10000.0
args.step pgd_anneal_iters 881 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 882 400
penalty weights 10000.0
args.step pgd_anneal_iters 882 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 883 400
penalty weights 10000.0
args.step pgd_anneal_iters 883 600
dim_v 512
retunring when rho == dim_v - 1
Epoch: [33][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.17 (  0.17)	train_acc   0.53 (  0.53)	train_minacc   0.47 (  0.60)	train_majacc   0.54 (  0.52)	train_corr   0.00 (  0.00)	l1 13.1394 (13.1295)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.22it/s] 27%|##6       | 7/26 [00:00<00:00, 34.14it/s]                                               27%|##6       | 7/26 [00:00<00:00, 34.14it/s] 46%|####6     | 12/26 [00:00<00:00, 40.35it/s] 65%|######5   | 17/26 [00:00<00:00, 42.12it/s]                                                65%|######5   | 17/26 [00:00<00:00, 42.12it/s] 88%|########8 | 23/26 [00:00<00:00, 46.71it/s]100%|##########| 26/26 [00:00<00:00, 39.41it/s]
Test: [   0/  26]	Loss 0.692 (0.692)	test_acc   0.55 (  0.55)	test_minacc   0.70 (  0.70)	test_majacc   0.52 (  0.52)	Loss_d 0.692 (0.692)	test_acc_d   0.55 (  0.55)	test_minacc_d   0.70 (  0.70)	test_majacc_d   0.52 (  0.52)	test_corr_d  -0.15 ( -0.15)
Test: [  10/  26]	Loss 0.693 (0.692)	test_acc   0.51 (  0.53)	test_minacc   0.48 (  0.61)	test_majacc   0.52 (  0.52)	Loss_d 0.693 (0.692)	test_acc_d   0.51 (  0.53)	test_minacc_d   0.48 (  0.61)	test_majacc_d   0.52 (  0.52)	test_corr_d  -0.08 ( -0.11)
Test: [  20/  26]	Loss 0.692 (0.692)	test_acc   0.53 (  0.53)	test_minacc   0.52 (  0.60)	test_majacc   0.54 (  0.52)	Loss_d 0.692 (0.692)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.52 (  0.60)	test_majacc_d   0.54 (  0.52)	test_corr_d  -0.07 ( -0.11)
Test: [  26/  26]	Loss 0.693 (0.692)	test_acc   0.53 (  0.53)	test_minacc   0.47 (  0.60)	test_majacc   0.54 (  0.52)	Loss_d 0.693 (0.692)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.47 (  0.60)	test_majacc_d   0.54 (  0.52)	test_corr_d  -0.04 ( -0.11)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.66it/s]
Test: [  0/  1]	Loss 0.686 (0.686)	test_acc   0.59 (  0.59)	test_minacc   0.59 (  0.59)	test_majacc   0.59 (  0.59)	Loss_d 0.686 (0.686)	test_acc_d   0.59 (  0.59)	test_minacc_d   0.59 (  0.59)	test_majacc_d   0.59 (  0.59)	test_corr_d  -0.45 ( -0.45)
Test: [  1/  1]	Loss 0.686 (0.686)	test_acc   0.59 (  0.59)	test_minacc   0.59 (  0.59)	test_majacc   0.59 (  0.59)	Loss_d 0.686 (0.686)	test_acc_d   0.59 (  0.59)	test_minacc_d   0.59 (  0.59)	test_majacc_d   0.59 (  0.59)	test_corr_d  -0.45 ( -0.45)
Overall Timing[ 33/  1]	epoch_time 0.0488 (0.0407)	validation_time 0.0004 (0.0006)	train_time 0.0484 (0.0400)
record: (train_acc, test_acc) (0.6109000098705292, 0.6800000071525574)
last accs (train_acc, test_acc) (0.5309000097513199, 0.5910000205039978)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.72it/s] 12%|#1        | 3/26 [00:00<00:01, 11.81it/s] 19%|#9        | 5/26 [00:00<00:01, 14.09it/s] 27%|##6       | 7/26 [00:00<00:01, 15.36it/s] 35%|###4      | 9/26 [00:00<00:01, 16.16it/s] 42%|####2     | 11/26 [00:00<00:00, 16.55it/s] 50%|#####     | 13/26 [00:00<00:00, 16.85it/s] 58%|#####7    | 15/26 [00:00<00:00, 17.03it/s] 65%|######5   | 17/26 [00:01<00:00, 17.23it/s] 73%|#######3  | 19/26 [00:01<00:00, 17.28it/s] 81%|########  | 21/26 [00:01<00:00, 17.22it/s] 88%|########8 | 23/26 [00:01<00:00, 17.26it/s] 96%|#########6| 25/26 [00:01<00:00, 17.28it/s]100%|##########| 26/26 [00:01<00:00, 15.82it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 884 400
penalty weights 10000.0
args.step pgd_anneal_iters 884 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 885 400
penalty weights 10000.0
args.step pgd_anneal_iters 885 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 886 400
penalty weights 10000.0
args.step pgd_anneal_iters 886 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 887 400
penalty weights 10000.0
args.step pgd_anneal_iters 887 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 888 400
penalty weights 10000.0
args.step pgd_anneal_iters 888 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 889 400
penalty weights 10000.0
args.step pgd_anneal_iters 889 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 890 400
penalty weights 10000.0
args.step pgd_anneal_iters 890 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 891 400
penalty weights 10000.0
args.step pgd_anneal_iters 891 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 892 400
penalty weights 10000.0
args.step pgd_anneal_iters 892 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 893 400
penalty weights 10000.0
args.step pgd_anneal_iters 893 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 894 400
penalty weights 10000.0
args.step pgd_anneal_iters 894 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 895 400
penalty weights 10000.0
args.step pgd_anneal_iters 895 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 896 400
penalty weights 10000.0
args.step pgd_anneal_iters 896 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 897 400
penalty weights 10000.0
args.step pgd_anneal_iters 897 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 898 400
penalty weights 10000.0
args.step pgd_anneal_iters 898 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 899 400
penalty weights 10000.0
args.step pgd_anneal_iters 899 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 900 400
penalty weights 10000.0
args.step pgd_anneal_iters 900 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 901 400
penalty weights 10000.0
args.step pgd_anneal_iters 901 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 902 400
penalty weights 10000.0
args.step pgd_anneal_iters 902 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 903 400
penalty weights 10000.0
args.step pgd_anneal_iters 903 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 904 400
penalty weights 10000.0
args.step pgd_anneal_iters 904 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 905 400
penalty weights 10000.0
args.step pgd_anneal_iters 905 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 906 400
penalty weights 10000.0
args.step pgd_anneal_iters 906 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 907 400
penalty weights 10000.0
args.step pgd_anneal_iters 907 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 908 400
penalty weights 10000.0
args.step pgd_anneal_iters 908 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 909 400
penalty weights 10000.0
args.step pgd_anneal_iters 909 600
dim_v 512
retunring when rho == dim_v - 1
Epoch: [34][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.17 (  0.17)	train_acc   0.53 (  0.53)	train_minacc   0.47 (  0.60)	train_majacc   0.54 (  0.52)	train_corr   0.00 (  0.00)	l1 13.1589 (13.1495)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.22it/s] 23%|##3       | 6/26 [00:00<00:00, 28.93it/s]                                               23%|##3       | 6/26 [00:00<00:00, 28.93it/s] 46%|####6     | 12/26 [00:00<00:00, 36.40it/s] 69%|######9   | 18/26 [00:00<00:00, 43.14it/s]                                                69%|######9   | 18/26 [00:00<00:00, 43.14it/s] 92%|#########2| 24/26 [00:00<00:00, 45.24it/s]100%|##########| 26/26 [00:00<00:00, 37.91it/s]
Test: [   0/  26]	Loss 0.692 (0.692)	test_acc   0.56 (  0.56)	test_minacc   0.70 (  0.70)	test_majacc   0.53 (  0.53)	Loss_d 0.692 (0.692)	test_acc_d   0.56 (  0.56)	test_minacc_d   0.70 (  0.70)	test_majacc_d   0.53 (  0.53)	test_corr_d  -0.16 ( -0.16)
Test: [  10/  26]	Loss 0.693 (0.692)	test_acc   0.52 (  0.53)	test_minacc   0.48 (  0.61)	test_majacc   0.52 (  0.52)	Loss_d 0.693 (0.692)	test_acc_d   0.52 (  0.53)	test_minacc_d   0.48 (  0.61)	test_majacc_d   0.52 (  0.52)	test_corr_d  -0.09 ( -0.11)
Test: [  20/  26]	Loss 0.692 (0.692)	test_acc   0.53 (  0.53)	test_minacc   0.52 (  0.60)	test_majacc   0.54 (  0.52)	Loss_d 0.692 (0.692)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.52 (  0.60)	test_majacc_d   0.54 (  0.52)	test_corr_d  -0.08 ( -0.11)
Test: [  26/  26]	Loss 0.693 (0.692)	test_acc   0.53 (  0.53)	test_minacc   0.47 (  0.60)	test_majacc   0.54 (  0.52)	Loss_d 0.693 (0.692)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.47 (  0.60)	test_majacc_d   0.54 (  0.52)	test_corr_d  -0.05 ( -0.11)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.72it/s]
Test: [  0/  1]	Loss 0.686 (0.686)	test_acc   0.60 (  0.60)	test_minacc   0.60 (  0.60)	test_majacc   0.59 (  0.59)	Loss_d 0.686 (0.686)	test_acc_d   0.60 (  0.60)	test_minacc_d   0.60 (  0.60)	test_majacc_d   0.59 (  0.59)	test_corr_d  -0.45 ( -0.45)
Test: [  1/  1]	Loss 0.686 (0.686)	test_acc   0.60 (  0.60)	test_minacc   0.60 (  0.60)	test_majacc   0.59 (  0.59)	Loss_d 0.686 (0.686)	test_acc_d   0.60 (  0.60)	test_minacc_d   0.60 (  0.60)	test_majacc_d   0.59 (  0.59)	test_corr_d  -0.45 ( -0.45)
Overall Timing[ 34/  1]	epoch_time 0.0484 (0.0409)	validation_time 0.0003 (0.0006)	train_time 0.0480 (0.0403)
record: (train_acc, test_acc) (0.6109000098705292, 0.6800000071525574)
last accs (train_acc, test_acc) (0.5326000110208988, 0.5960000157356262)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.88it/s] 12%|#1        | 3/26 [00:00<00:02, 10.86it/s] 19%|#9        | 5/26 [00:00<00:01, 13.09it/s] 27%|##6       | 7/26 [00:00<00:01, 14.56it/s] 35%|###4      | 9/26 [00:00<00:01, 15.26it/s] 42%|####2     | 11/26 [00:00<00:00, 15.77it/s] 50%|#####     | 13/26 [00:00<00:00, 15.93it/s] 58%|#####7    | 15/26 [00:01<00:00, 16.15it/s] 65%|######5   | 17/26 [00:01<00:00, 16.60it/s] 73%|#######3  | 19/26 [00:01<00:00, 16.85it/s] 81%|########  | 21/26 [00:01<00:00, 16.98it/s] 88%|########8 | 23/26 [00:01<00:00, 17.13it/s] 96%|#########6| 25/26 [00:01<00:00, 17.23it/s]100%|##########| 26/26 [00:01<00:00, 15.19it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 910 400
penalty weights 10000.0
args.step pgd_anneal_iters 910 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 911 400
penalty weights 10000.0
args.step pgd_anneal_iters 911 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 912 400
penalty weights 10000.0
args.step pgd_anneal_iters 912 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 913 400
penalty weights 10000.0
args.step pgd_anneal_iters 913 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 914 400
penalty weights 10000.0
args.step pgd_anneal_iters 914 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 915 400
penalty weights 10000.0
args.step pgd_anneal_iters 915 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 916 400
penalty weights 10000.0
args.step pgd_anneal_iters 916 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 917 400
penalty weights 10000.0
args.step pgd_anneal_iters 917 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 918 400
penalty weights 10000.0
args.step pgd_anneal_iters 918 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 919 400
penalty weights 10000.0
args.step pgd_anneal_iters 919 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 920 400
penalty weights 10000.0
args.step pgd_anneal_iters 920 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 921 400
penalty weights 10000.0
args.step pgd_anneal_iters 921 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 922 400
penalty weights 10000.0
args.step pgd_anneal_iters 922 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 923 400
penalty weights 10000.0
args.step pgd_anneal_iters 923 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 924 400
penalty weights 10000.0
args.step pgd_anneal_iters 924 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 925 400
penalty weights 10000.0
args.step pgd_anneal_iters 925 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 926 400
penalty weights 10000.0
args.step pgd_anneal_iters 926 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 927 400
penalty weights 10000.0
args.step pgd_anneal_iters 927 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 928 400
penalty weights 10000.0
args.step pgd_anneal_iters 928 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 929 400
penalty weights 10000.0
args.step pgd_anneal_iters 929 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 930 400
penalty weights 10000.0
args.step pgd_anneal_iters 930 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 931 400
penalty weights 10000.0
args.step pgd_anneal_iters 931 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 932 400
penalty weights 10000.0
args.step pgd_anneal_iters 932 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 933 400
penalty weights 10000.0
args.step pgd_anneal_iters 933 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 934 400
penalty weights 10000.0
args.step pgd_anneal_iters 934 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 935 400
penalty weights 10000.0
args.step pgd_anneal_iters 935 600
dim_v 512
retunring when rho == dim_v - 1
Epoch: [35][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.17 (  0.17)	train_acc   0.54 (  0.53)	train_minacc   0.47 (  0.60)	train_majacc   0.55 (  0.52)	train_corr   0.00 (  0.00)	l1 13.1775 (13.1685)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 18.72it/s] 31%|###       | 8/26 [00:00<00:00, 40.88it/s]                                               31%|###       | 8/26 [00:00<00:00, 40.88it/s] 50%|#####     | 13/26 [00:00<00:00, 42.28it/s] 73%|#######3  | 19/26 [00:00<00:00, 47.83it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 47.83it/s] 96%|#########6| 25/26 [00:00<00:00, 47.83it/s]100%|##########| 26/26 [00:00<00:00, 41.58it/s]
Test: [   0/  26]	Loss 0.692 (0.692)	test_acc   0.56 (  0.56)	test_minacc   0.70 (  0.70)	test_majacc   0.53 (  0.53)	Loss_d 0.692 (0.692)	test_acc_d   0.56 (  0.56)	test_minacc_d   0.70 (  0.70)	test_majacc_d   0.53 (  0.53)	test_corr_d  -0.16 ( -0.16)
Test: [  10/  26]	Loss 0.693 (0.692)	test_acc   0.52 (  0.53)	test_minacc   0.48 (  0.62)	test_majacc   0.52 (  0.52)	Loss_d 0.693 (0.692)	test_acc_d   0.52 (  0.53)	test_minacc_d   0.48 (  0.62)	test_majacc_d   0.52 (  0.52)	test_corr_d  -0.09 ( -0.12)
Test: [  20/  26]	Loss 0.692 (0.692)	test_acc   0.54 (  0.54)	test_minacc   0.52 (  0.61)	test_majacc   0.54 (  0.52)	Loss_d 0.692 (0.692)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.52 (  0.61)	test_majacc_d   0.54 (  0.52)	test_corr_d  -0.08 ( -0.12)
Test: [  26/  26]	Loss 0.693 (0.692)	test_acc   0.54 (  0.53)	test_minacc   0.47 (  0.61)	test_majacc   0.55 (  0.52)	Loss_d 0.693 (0.692)	test_acc_d   0.54 (  0.53)	test_minacc_d   0.47 (  0.61)	test_majacc_d   0.55 (  0.52)	test_corr_d  -0.05 ( -0.12)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 67.28it/s]
Test: [  0/  1]	Loss 0.686 (0.686)	test_acc   0.60 (  0.60)	test_minacc   0.60 (  0.60)	test_majacc   0.59 (  0.59)	Loss_d 0.686 (0.686)	test_acc_d   0.60 (  0.60)	test_minacc_d   0.60 (  0.60)	test_majacc_d   0.59 (  0.59)	test_corr_d  -0.45 ( -0.45)
Test: [  1/  1]	Loss 0.686 (0.686)	test_acc   0.60 (  0.60)	test_minacc   0.60 (  0.60)	test_majacc   0.59 (  0.59)	Loss_d 0.686 (0.686)	test_acc_d   0.60 (  0.60)	test_minacc_d   0.60 (  0.60)	test_majacc_d   0.59 (  0.59)	test_corr_d  -0.45 ( -0.45)
Overall Timing[ 35/  1]	epoch_time 0.0481 (0.0411)	validation_time 0.0004 (0.0006)	train_time 0.0477 (0.0405)
record: (train_acc, test_acc) (0.6109000098705292, 0.6800000071525574)
last accs (train_acc, test_acc) (0.5342000122964382, 0.6010000109672546)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  6.19it/s] 12%|#1        | 3/26 [00:00<00:02, 11.33it/s] 19%|#9        | 5/26 [00:00<00:01, 13.52it/s] 27%|##6       | 7/26 [00:00<00:01, 14.63it/s] 35%|###4      | 9/26 [00:00<00:01, 15.47it/s] 42%|####2     | 11/26 [00:00<00:00, 16.02it/s] 50%|#####     | 13/26 [00:00<00:00, 16.40it/s] 58%|#####7    | 15/26 [00:00<00:00, 16.83it/s] 65%|######5   | 17/26 [00:01<00:00, 17.05it/s] 73%|#######3  | 19/26 [00:01<00:00, 17.23it/s] 81%|########  | 21/26 [00:01<00:00, 17.31it/s] 88%|########8 | 23/26 [00:01<00:00, 17.41it/s] 96%|#########6| 25/26 [00:01<00:00, 17.46it/s]100%|##########| 26/26 [00:01<00:00, 15.58it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 936 400
penalty weights 10000.0
args.step pgd_anneal_iters 936 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 937 400
penalty weights 10000.0
args.step pgd_anneal_iters 937 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 938 400
penalty weights 10000.0
args.step pgd_anneal_iters 938 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 939 400
penalty weights 10000.0
args.step pgd_anneal_iters 939 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 940 400
penalty weights 10000.0
args.step pgd_anneal_iters 940 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 941 400
penalty weights 10000.0
args.step pgd_anneal_iters 941 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 942 400
penalty weights 10000.0
args.step pgd_anneal_iters 942 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 943 400
penalty weights 10000.0
args.step pgd_anneal_iters 943 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 944 400
penalty weights 10000.0
args.step pgd_anneal_iters 944 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 945 400
penalty weights 10000.0
args.step pgd_anneal_iters 945 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 946 400
penalty weights 10000.0
args.step pgd_anneal_iters 946 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 947 400
penalty weights 10000.0
args.step pgd_anneal_iters 947 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 948 400
penalty weights 10000.0
args.step pgd_anneal_iters 948 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 949 400
penalty weights 10000.0
args.step pgd_anneal_iters 949 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 950 400
penalty weights 10000.0
args.step pgd_anneal_iters 950 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 951 400
penalty weights 10000.0
args.step pgd_anneal_iters 951 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 952 400
penalty weights 10000.0
args.step pgd_anneal_iters 952 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 953 400
penalty weights 10000.0
args.step pgd_anneal_iters 953 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 954 400
penalty weights 10000.0
args.step pgd_anneal_iters 954 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 955 400
penalty weights 10000.0
args.step pgd_anneal_iters 955 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 956 400
penalty weights 10000.0
args.step pgd_anneal_iters 956 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 957 400
penalty weights 10000.0
args.step pgd_anneal_iters 957 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 958 400
penalty weights 10000.0
args.step pgd_anneal_iters 958 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 959 400
penalty weights 10000.0
args.step pgd_anneal_iters 959 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 960 400
penalty weights 10000.0
args.step pgd_anneal_iters 960 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 961 400
penalty weights 10000.0
args.step pgd_anneal_iters 961 600
dim_v 512
retunring when rho == dim_v - 1
Epoch: [36][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.17 (  0.17)	train_acc   0.54 (  0.53)	train_minacc   0.47 (  0.61)	train_majacc   0.55 (  0.52)	train_corr   0.00 (  0.00)	l1 13.1951 (13.1866)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.40it/s] 27%|##6       | 7/26 [00:00<00:00, 30.18it/s]                                               27%|##6       | 7/26 [00:00<00:00, 30.18it/s] 50%|#####     | 13/26 [00:00<00:00, 37.16it/s] 73%|#######3  | 19/26 [00:00<00:00, 44.44it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 44.44it/s] 96%|#########6| 25/26 [00:00<00:00, 45.56it/s]100%|##########| 26/26 [00:00<00:00, 37.29it/s]
Test: [   0/  26]	Loss 0.692 (0.692)	test_acc   0.56 (  0.56)	test_minacc   0.70 (  0.70)	test_majacc   0.53 (  0.53)	Loss_d 0.692 (0.692)	test_acc_d   0.56 (  0.56)	test_minacc_d   0.70 (  0.70)	test_majacc_d   0.53 (  0.53)	test_corr_d  -0.16 ( -0.16)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.52 (  0.54)	test_minacc   0.48 (  0.62)	test_majacc   0.52 (  0.52)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.54)	test_minacc_d   0.48 (  0.62)	test_majacc_d   0.52 (  0.52)	test_corr_d  -0.09 ( -0.12)
Test: [  20/  26]	Loss 0.692 (0.693)	test_acc   0.53 (  0.54)	test_minacc   0.52 (  0.61)	test_majacc   0.53 (  0.52)	Loss_d 0.692 (0.693)	test_acc_d   0.53 (  0.54)	test_minacc_d   0.52 (  0.61)	test_majacc_d   0.53 (  0.52)	test_corr_d  -0.09 ( -0.12)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.54 (  0.53)	test_minacc   0.47 (  0.61)	test_majacc   0.55 (  0.52)	Loss_d 0.693 (0.693)	test_acc_d   0.54 (  0.53)	test_minacc_d   0.47 (  0.61)	test_majacc_d   0.55 (  0.52)	test_corr_d  -0.06 ( -0.12)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 67.31it/s]
Test: [  0/  1]	Loss 0.686 (0.686)	test_acc   0.60 (  0.60)	test_minacc   0.61 (  0.61)	test_majacc   0.58 (  0.58)	Loss_d 0.686 (0.686)	test_acc_d   0.60 (  0.60)	test_minacc_d   0.61 (  0.61)	test_majacc_d   0.58 (  0.58)	test_corr_d  -0.45 ( -0.45)
Test: [  1/  1]	Loss 0.686 (0.686)	test_acc   0.60 (  0.60)	test_minacc   0.61 (  0.61)	test_majacc   0.58 (  0.58)	Loss_d 0.686 (0.686)	test_acc_d   0.60 (  0.60)	test_minacc_d   0.61 (  0.61)	test_majacc_d   0.58 (  0.58)	test_corr_d  -0.45 ( -0.45)
Overall Timing[ 36/  1]	epoch_time 0.0480 (0.0413)	validation_time 0.0003 (0.0006)	train_time 0.0477 (0.0407)
record: (train_acc, test_acc) (0.6109000098705292, 0.6800000071525574)
last accs (train_acc, test_acc) (0.5342000146210194, 0.6040000319480896)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.45it/s] 12%|#1        | 3/26 [00:00<00:01, 11.68it/s] 19%|#9        | 5/26 [00:00<00:01, 13.69it/s] 27%|##6       | 7/26 [00:00<00:01, 15.01it/s] 35%|###4      | 9/26 [00:00<00:01, 15.71it/s] 42%|####2     | 11/26 [00:00<00:00, 16.28it/s] 50%|#####     | 13/26 [00:00<00:00, 16.60it/s] 58%|#####7    | 15/26 [00:00<00:00, 16.88it/s] 65%|######5   | 17/26 [00:01<00:00, 17.05it/s] 73%|#######3  | 19/26 [00:01<00:00, 17.16it/s] 81%|########  | 21/26 [00:01<00:00, 17.21it/s] 88%|########8 | 23/26 [00:01<00:00, 17.12it/s] 96%|#########6| 25/26 [00:01<00:00, 17.16it/s]100%|##########| 26/26 [00:01<00:00, 15.64it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 962 400
penalty weights 10000.0
args.step pgd_anneal_iters 962 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 963 400
penalty weights 10000.0
args.step pgd_anneal_iters 963 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 964 400
penalty weights 10000.0
args.step pgd_anneal_iters 964 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 965 400
penalty weights 10000.0
args.step pgd_anneal_iters 965 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 966 400
penalty weights 10000.0
args.step pgd_anneal_iters 966 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 967 400
penalty weights 10000.0
args.step pgd_anneal_iters 967 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 968 400
penalty weights 10000.0
args.step pgd_anneal_iters 968 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 969 400
penalty weights 10000.0
args.step pgd_anneal_iters 969 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 970 400
penalty weights 10000.0
args.step pgd_anneal_iters 970 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 971 400
penalty weights 10000.0
args.step pgd_anneal_iters 971 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 972 400
penalty weights 10000.0
args.step pgd_anneal_iters 972 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 973 400
penalty weights 10000.0
args.step pgd_anneal_iters 973 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 974 400
penalty weights 10000.0
args.step pgd_anneal_iters 974 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 975 400
penalty weights 10000.0
args.step pgd_anneal_iters 975 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 976 400
penalty weights 10000.0
args.step pgd_anneal_iters 976 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 977 400
penalty weights 10000.0
args.step pgd_anneal_iters 977 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 978 400
penalty weights 10000.0
args.step pgd_anneal_iters 978 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 979 400
penalty weights 10000.0
args.step pgd_anneal_iters 979 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 980 400
penalty weights 10000.0
args.step pgd_anneal_iters 980 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 981 400
penalty weights 10000.0
args.step pgd_anneal_iters 981 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 982 400
penalty weights 10000.0
args.step pgd_anneal_iters 982 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 983 400
penalty weights 10000.0
args.step pgd_anneal_iters 983 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 984 400
penalty weights 10000.0
args.step pgd_anneal_iters 984 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 985 400
penalty weights 10000.0
args.step pgd_anneal_iters 985 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 986 400
penalty weights 10000.0
args.step pgd_anneal_iters 986 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 987 400
penalty weights 10000.0
args.step pgd_anneal_iters 987 600
dim_v 512
retunring when rho == dim_v - 1
Epoch: [37][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.17 (  0.17)	train_acc   0.54 (  0.53)	train_minacc   0.47 (  0.61)	train_majacc   0.55 (  0.52)	train_corr   0.00 (  0.00)	l1 13.2117 (13.2037)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  6.09it/s] 27%|##6       | 7/26 [00:00<00:00, 30.49it/s]                                               27%|##6       | 7/26 [00:00<00:00, 30.49it/s] 50%|#####     | 13/26 [00:00<00:00, 36.65it/s] 73%|#######3  | 19/26 [00:00<00:00, 43.12it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 43.12it/s] 96%|#########6| 25/26 [00:00<00:00, 44.84it/s]100%|##########| 26/26 [00:00<00:00, 36.59it/s]
Test: [   0/  26]	Loss 0.692 (0.692)	test_acc   0.56 (  0.56)	test_minacc   0.70 (  0.70)	test_majacc   0.53 (  0.53)	Loss_d 0.692 (0.692)	test_acc_d   0.56 (  0.56)	test_minacc_d   0.70 (  0.70)	test_majacc_d   0.53 (  0.53)	test_corr_d  -0.17 ( -0.17)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.52 (  0.54)	test_minacc   0.50 (  0.63)	test_majacc   0.53 (  0.52)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.54)	test_minacc_d   0.50 (  0.63)	test_majacc_d   0.53 (  0.52)	test_corr_d  -0.09 ( -0.12)
Test: [  20/  26]	Loss 0.692 (0.693)	test_acc   0.53 (  0.54)	test_minacc   0.53 (  0.62)	test_majacc   0.53 (  0.52)	Loss_d 0.692 (0.693)	test_acc_d   0.53 (  0.54)	test_minacc_d   0.53 (  0.62)	test_majacc_d   0.53 (  0.52)	test_corr_d  -0.09 ( -0.12)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.54 (  0.53)	test_minacc   0.47 (  0.62)	test_majacc   0.55 (  0.52)	Loss_d 0.693 (0.693)	test_acc_d   0.54 (  0.53)	test_minacc_d   0.47 (  0.62)	test_majacc_d   0.55 (  0.52)	test_corr_d  -0.06 ( -0.12)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.36it/s]
Test: [  0/  1]	Loss 0.687 (0.687)	test_acc   0.61 (  0.61)	test_minacc   0.61 (  0.61)	test_majacc   0.59 (  0.59)	Loss_d 0.687 (0.687)	test_acc_d   0.61 (  0.61)	test_minacc_d   0.61 (  0.61)	test_majacc_d   0.59 (  0.59)	test_corr_d  -0.45 ( -0.45)
Test: [  1/  1]	Loss 0.687 (0.687)	test_acc   0.61 (  0.61)	test_minacc   0.61 (  0.61)	test_majacc   0.59 (  0.59)	Loss_d 0.687 (0.687)	test_acc_d   0.61 (  0.61)	test_minacc_d   0.61 (  0.61)	test_majacc_d   0.59 (  0.59)	test_corr_d  -0.45 ( -0.45)
Overall Timing[ 37/  1]	epoch_time 0.0507 (0.0416)	validation_time 0.0004 (0.0005)	train_time 0.0502 (0.0409)
record: (train_acc, test_acc) (0.6109000098705292, 0.6800000071525574)
last accs (train_acc, test_acc) (0.5346000136435032, 0.6060000061988831)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.15it/s] 12%|#1        | 3/26 [00:00<00:01, 12.25it/s] 19%|#9        | 5/26 [00:00<00:01, 14.46it/s] 27%|##6       | 7/26 [00:00<00:01, 15.52it/s] 35%|###4      | 9/26 [00:00<00:01, 16.14it/s] 42%|####2     | 11/26 [00:00<00:00, 16.50it/s] 50%|#####     | 13/26 [00:00<00:00, 16.70it/s] 58%|#####7    | 15/26 [00:00<00:00, 16.86it/s] 65%|######5   | 17/26 [00:01<00:00, 16.97it/s] 73%|#######3  | 19/26 [00:01<00:00, 17.06it/s] 81%|########  | 21/26 [00:01<00:00, 16.99it/s] 88%|########8 | 23/26 [00:01<00:00, 17.08it/s] 96%|#########6| 25/26 [00:01<00:00, 16.86it/s]100%|##########| 26/26 [00:01<00:00, 15.62it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 988 400
penalty weights 10000.0
args.step pgd_anneal_iters 988 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 989 400
penalty weights 10000.0
args.step pgd_anneal_iters 989 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 990 400
penalty weights 10000.0
args.step pgd_anneal_iters 990 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 991 400
penalty weights 10000.0
args.step pgd_anneal_iters 991 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 992 400
penalty weights 10000.0
args.step pgd_anneal_iters 992 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 993 400
penalty weights 10000.0
args.step pgd_anneal_iters 993 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 994 400
penalty weights 10000.0
args.step pgd_anneal_iters 994 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 995 400
penalty weights 10000.0
args.step pgd_anneal_iters 995 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 996 400
penalty weights 10000.0
args.step pgd_anneal_iters 996 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 997 400
penalty weights 10000.0
args.step pgd_anneal_iters 997 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 998 400
penalty weights 10000.0
args.step pgd_anneal_iters 998 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 999 400
penalty weights 10000.0
args.step pgd_anneal_iters 999 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1000 400
penalty weights 10000.0
args.step pgd_anneal_iters 1000 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1001 400
penalty weights 10000.0
args.step pgd_anneal_iters 1001 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1002 400
penalty weights 10000.0
args.step pgd_anneal_iters 1002 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1003 400
penalty weights 10000.0
args.step pgd_anneal_iters 1003 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1004 400
penalty weights 10000.0
args.step pgd_anneal_iters 1004 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1005 400
penalty weights 10000.0
args.step pgd_anneal_iters 1005 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1006 400
penalty weights 10000.0
args.step pgd_anneal_iters 1006 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1007 400
penalty weights 10000.0
args.step pgd_anneal_iters 1007 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1008 400
penalty weights 10000.0
args.step pgd_anneal_iters 1008 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1009 400
penalty weights 10000.0
args.step pgd_anneal_iters 1009 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1010 400
penalty weights 10000.0
args.step pgd_anneal_iters 1010 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1011 400
penalty weights 10000.0
args.step pgd_anneal_iters 1011 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1012 400
penalty weights 10000.0
args.step pgd_anneal_iters 1012 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1013 400
penalty weights 10000.0
args.step pgd_anneal_iters 1013 600
dim_v 512
retunring when rho == dim_v - 1
Epoch: [38][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.17 (  0.17)	train_acc   0.54 (  0.53)	train_minacc   0.47 (  0.62)	train_majacc   0.55 (  0.52)	train_corr   0.00 (  0.00)	l1 13.2273 (13.2197)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 18.85it/s] 27%|##6       | 7/26 [00:00<00:00, 33.94it/s]                                               27%|##6       | 7/26 [00:00<00:00, 33.94it/s] 50%|#####     | 13/26 [00:00<00:00, 44.07it/s] 69%|######9   | 18/26 [00:00<00:00, 45.70it/s]                                                69%|######9   | 18/26 [00:00<00:00, 45.70it/s] 88%|########8 | 23/26 [00:00<00:00, 46.87it/s]100%|##########| 26/26 [00:00<00:00, 41.18it/s]
Test: [   0/  26]	Loss 0.692 (0.692)	test_acc   0.55 (  0.55)	test_minacc   0.70 (  0.70)	test_majacc   0.52 (  0.52)	Loss_d 0.692 (0.692)	test_acc_d   0.55 (  0.55)	test_minacc_d   0.70 (  0.70)	test_majacc_d   0.52 (  0.52)	test_corr_d  -0.17 ( -0.17)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.51 (  0.54)	test_minacc   0.50 (  0.63)	test_majacc   0.52 (  0.52)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.54)	test_minacc_d   0.50 (  0.63)	test_majacc_d   0.52 (  0.52)	test_corr_d  -0.10 ( -0.13)
Test: [  20/  26]	Loss 0.692 (0.693)	test_acc   0.53 (  0.53)	test_minacc   0.53 (  0.62)	test_majacc   0.53 (  0.52)	Loss_d 0.692 (0.693)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.53 (  0.62)	test_majacc_d   0.53 (  0.52)	test_corr_d  -0.09 ( -0.13)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.54 (  0.53)	test_minacc   0.47 (  0.62)	test_majacc   0.55 (  0.52)	Loss_d 0.693 (0.693)	test_acc_d   0.54 (  0.53)	test_minacc_d   0.47 (  0.62)	test_majacc_d   0.55 (  0.52)	test_corr_d  -0.06 ( -0.12)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.63it/s]
Test: [  0/  1]	Loss 0.687 (0.687)	test_acc   0.61 (  0.61)	test_minacc   0.61 (  0.61)	test_majacc   0.57 (  0.57)	Loss_d 0.687 (0.687)	test_acc_d   0.61 (  0.61)	test_minacc_d   0.61 (  0.61)	test_majacc_d   0.57 (  0.57)	test_corr_d  -0.45 ( -0.45)
Test: [  1/  1]	Loss 0.687 (0.687)	test_acc   0.61 (  0.61)	test_minacc   0.61 (  0.61)	test_majacc   0.57 (  0.57)	Loss_d 0.687 (0.687)	test_acc_d   0.61 (  0.61)	test_minacc_d   0.61 (  0.61)	test_majacc_d   0.57 (  0.57)	test_corr_d  -0.45 ( -0.45)
Overall Timing[ 38/  1]	epoch_time 0.0482 (0.0417)	validation_time 0.0004 (0.0005)	train_time 0.0478 (0.0411)
record: (train_acc, test_acc) (0.6109000098705292, 0.6800000071525574)
last accs (train_acc, test_acc) (0.532200014948845, 0.6070000529289246)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.29it/s] 12%|#1        | 3/26 [00:00<00:01, 11.51it/s] 19%|#9        | 5/26 [00:00<00:01, 13.74it/s] 27%|##6       | 7/26 [00:00<00:01, 15.08it/s] 35%|###4      | 9/26 [00:00<00:01, 15.82it/s] 42%|####2     | 11/26 [00:00<00:00, 16.27it/s] 50%|#####     | 13/26 [00:00<00:00, 16.62it/s] 58%|#####7    | 15/26 [00:00<00:00, 16.78it/s] 65%|######5   | 17/26 [00:01<00:00, 16.89it/s] 73%|#######3  | 19/26 [00:01<00:00, 16.82it/s] 81%|########  | 21/26 [00:01<00:00, 16.89it/s] 88%|########8 | 23/26 [00:01<00:00, 17.01it/s] 96%|#########6| 25/26 [00:01<00:00, 17.08it/s]100%|##########| 26/26 [00:01<00:00, 15.48it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1014 400
penalty weights 10000.0
args.step pgd_anneal_iters 1014 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1015 400
penalty weights 10000.0
args.step pgd_anneal_iters 1015 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1016 400
penalty weights 10000.0
args.step pgd_anneal_iters 1016 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1017 400
penalty weights 10000.0
args.step pgd_anneal_iters 1017 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1018 400
penalty weights 10000.0
args.step pgd_anneal_iters 1018 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1019 400
penalty weights 10000.0
args.step pgd_anneal_iters 1019 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1020 400
penalty weights 10000.0
args.step pgd_anneal_iters 1020 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1021 400
penalty weights 10000.0
args.step pgd_anneal_iters 1021 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1022 400
penalty weights 10000.0
args.step pgd_anneal_iters 1022 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1023 400
penalty weights 10000.0
args.step pgd_anneal_iters 1023 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1024 400
penalty weights 10000.0
args.step pgd_anneal_iters 1024 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1025 400
penalty weights 10000.0
args.step pgd_anneal_iters 1025 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1026 400
penalty weights 10000.0
args.step pgd_anneal_iters 1026 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1027 400
penalty weights 10000.0
args.step pgd_anneal_iters 1027 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1028 400
penalty weights 10000.0
args.step pgd_anneal_iters 1028 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1029 400
penalty weights 10000.0
args.step pgd_anneal_iters 1029 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1030 400
penalty weights 10000.0
args.step pgd_anneal_iters 1030 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1031 400
penalty weights 10000.0
args.step pgd_anneal_iters 1031 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1032 400
penalty weights 10000.0
args.step pgd_anneal_iters 1032 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1033 400
penalty weights 10000.0
args.step pgd_anneal_iters 1033 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1034 400
penalty weights 10000.0
args.step pgd_anneal_iters 1034 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1035 400
penalty weights 10000.0
args.step pgd_anneal_iters 1035 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1036 400
penalty weights 10000.0
args.step pgd_anneal_iters 1036 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1037 400
penalty weights 10000.0
args.step pgd_anneal_iters 1037 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1038 400
penalty weights 10000.0
args.step pgd_anneal_iters 1038 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1039 400
penalty weights 10000.0
args.step pgd_anneal_iters 1039 600
dim_v 512
retunring when rho == dim_v - 1
Epoch: [39][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.17 (  0.17)	train_acc   0.54 (  0.53)	train_minacc   0.50 (  0.63)	train_majacc   0.55 (  0.52)	train_corr   0.00 (  0.00)	l1 13.2419 (13.2349)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.62it/s] 27%|##6       | 7/26 [00:00<00:00, 36.75it/s]                                               27%|##6       | 7/26 [00:00<00:00, 36.75it/s] 46%|####6     | 12/26 [00:00<00:00, 41.87it/s] 65%|######5   | 17/26 [00:00<00:00, 44.67it/s]                                                65%|######5   | 17/26 [00:00<00:00, 44.67it/s] 88%|########8 | 23/26 [00:00<00:00, 49.54it/s]100%|##########| 26/26 [00:00<00:00, 40.76it/s]
Test: [   0/  26]	Loss 0.692 (0.692)	test_acc   0.56 (  0.56)	test_minacc   0.70 (  0.70)	test_majacc   0.53 (  0.53)	Loss_d 0.692 (0.692)	test_acc_d   0.56 (  0.56)	test_minacc_d   0.70 (  0.70)	test_majacc_d   0.53 (  0.53)	test_corr_d  -0.17 ( -0.17)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.52 (  0.54)	test_minacc   0.55 (  0.64)	test_majacc   0.52 (  0.52)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.54)	test_minacc_d   0.55 (  0.64)	test_majacc_d   0.52 (  0.52)	test_corr_d  -0.10 ( -0.13)
Test: [  20/  26]	Loss 0.692 (0.693)	test_acc   0.53 (  0.53)	test_minacc   0.53 (  0.63)	test_majacc   0.53 (  0.52)	Loss_d 0.692 (0.693)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.53 (  0.63)	test_majacc_d   0.53 (  0.52)	test_corr_d  -0.10 ( -0.13)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.54 (  0.53)	test_minacc   0.50 (  0.63)	test_majacc   0.55 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.54 (  0.53)	test_minacc_d   0.50 (  0.63)	test_majacc_d   0.55 (  0.51)	test_corr_d  -0.07 ( -0.13)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 67.60it/s]
Test: [  0/  1]	Loss 0.687 (0.687)	test_acc   0.62 (  0.62)	test_minacc   0.63 (  0.63)	test_majacc   0.56 (  0.56)	Loss_d 0.687 (0.687)	test_acc_d   0.62 (  0.62)	test_minacc_d   0.63 (  0.63)	test_majacc_d   0.56 (  0.56)	test_corr_d  -0.45 ( -0.45)
Test: [  1/  1]	Loss 0.687 (0.687)	test_acc   0.62 (  0.62)	test_minacc   0.63 (  0.63)	test_majacc   0.56 (  0.56)	Loss_d 0.687 (0.687)	test_acc_d   0.62 (  0.62)	test_minacc_d   0.63 (  0.63)	test_majacc_d   0.56 (  0.56)	test_corr_d  -0.45 ( -0.45)
Overall Timing[ 39/  1]	epoch_time 0.0492 (0.0419)	validation_time 0.0004 (0.0005)	train_time 0.0487 (0.0413)
record: (train_acc, test_acc) (0.6109000098705292, 0.6800000071525574)
last accs (train_acc, test_acc) (0.5313000128865242, 0.6190000176429749)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.76it/s] 12%|#1        | 3/26 [00:00<00:01, 13.04it/s] 19%|#9        | 5/26 [00:00<00:01, 14.88it/s] 27%|##6       | 7/26 [00:00<00:01, 15.62it/s] 35%|###4      | 9/26 [00:00<00:01, 16.26it/s] 42%|####2     | 11/26 [00:00<00:00, 16.62it/s] 50%|#####     | 13/26 [00:00<00:00, 16.74it/s] 58%|#####7    | 15/26 [00:00<00:00, 16.90it/s] 65%|######5   | 17/26 [00:01<00:00, 17.07it/s] 73%|#######3  | 19/26 [00:01<00:00, 17.16it/s] 81%|########  | 21/26 [00:01<00:00, 16.86it/s] 88%|########8 | 23/26 [00:01<00:00, 16.89it/s] 96%|#########6| 25/26 [00:01<00:00, 17.00it/s]100%|##########| 26/26 [00:01<00:00, 15.77it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1040 400
penalty weights 10000.0
args.step pgd_anneal_iters 1040 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1041 400
penalty weights 10000.0
args.step pgd_anneal_iters 1041 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1042 400
penalty weights 10000.0
args.step pgd_anneal_iters 1042 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1043 400
penalty weights 10000.0
args.step pgd_anneal_iters 1043 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1044 400
penalty weights 10000.0
args.step pgd_anneal_iters 1044 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1045 400
penalty weights 10000.0
args.step pgd_anneal_iters 1045 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1046 400
penalty weights 10000.0
args.step pgd_anneal_iters 1046 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1047 400
penalty weights 10000.0
args.step pgd_anneal_iters 1047 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1048 400
penalty weights 10000.0
args.step pgd_anneal_iters 1048 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1049 400
penalty weights 10000.0
args.step pgd_anneal_iters 1049 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1050 400
penalty weights 10000.0
args.step pgd_anneal_iters 1050 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1051 400
penalty weights 10000.0
args.step pgd_anneal_iters 1051 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1052 400
penalty weights 10000.0
args.step pgd_anneal_iters 1052 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1053 400
penalty weights 10000.0
args.step pgd_anneal_iters 1053 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1054 400
penalty weights 10000.0
args.step pgd_anneal_iters 1054 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1055 400
penalty weights 10000.0
args.step pgd_anneal_iters 1055 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1056 400
penalty weights 10000.0
args.step pgd_anneal_iters 1056 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1057 400
penalty weights 10000.0
args.step pgd_anneal_iters 1057 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1058 400
penalty weights 10000.0
args.step pgd_anneal_iters 1058 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1059 400
penalty weights 10000.0
args.step pgd_anneal_iters 1059 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1060 400
penalty weights 10000.0
args.step pgd_anneal_iters 1060 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1061 400
penalty weights 10000.0
args.step pgd_anneal_iters 1061 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1062 400
penalty weights 10000.0
args.step pgd_anneal_iters 1062 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1063 400
penalty weights 10000.0
args.step pgd_anneal_iters 1063 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1064 400
penalty weights 10000.0
args.step pgd_anneal_iters 1064 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1065 400
penalty weights 10000.0
args.step pgd_anneal_iters 1065 600
dim_v 512
retunring when rho == dim_v - 1
Epoch: [40][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.17 (  0.17)	train_acc   0.55 (  0.53)	train_minacc   0.50 (  0.63)	train_majacc   0.56 (  0.51)	train_corr   0.00 (  0.00)	l1 13.2556 (13.2490)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 19.14it/s] 31%|###       | 8/26 [00:00<00:00, 41.62it/s]                                               31%|###       | 8/26 [00:00<00:00, 41.62it/s] 50%|#####     | 13/26 [00:00<00:00, 42.38it/s] 73%|#######3  | 19/26 [00:00<00:00, 48.54it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 48.54it/s] 96%|#########6| 25/26 [00:00<00:00, 48.19it/s]100%|##########| 26/26 [00:00<00:00, 41.80it/s]
Test: [   0/  26]	Loss 0.692 (0.692)	test_acc   0.55 (  0.55)	test_minacc   0.70 (  0.70)	test_majacc   0.52 (  0.52)	Loss_d 0.692 (0.692)	test_acc_d   0.55 (  0.55)	test_minacc_d   0.70 (  0.70)	test_majacc_d   0.52 (  0.52)	test_corr_d  -0.17 ( -0.17)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.52 (  0.53)	test_minacc   0.56 (  0.65)	test_majacc   0.52 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.53)	test_minacc_d   0.56 (  0.65)	test_majacc_d   0.52 (  0.51)	test_corr_d  -0.10 ( -0.13)
Test: [  20/  26]	Loss 0.692 (0.693)	test_acc   0.53 (  0.53)	test_minacc   0.53 (  0.64)	test_majacc   0.53 (  0.51)	Loss_d 0.692 (0.693)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.53 (  0.64)	test_majacc_d   0.53 (  0.51)	test_corr_d  -0.10 ( -0.13)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.55 (  0.53)	test_minacc   0.50 (  0.63)	test_majacc   0.56 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.55 (  0.53)	test_minacc_d   0.50 (  0.63)	test_majacc_d   0.56 (  0.51)	test_corr_d  -0.07 ( -0.13)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 67.36it/s]
Test: [  0/  1]	Loss 0.687 (0.687)	test_acc   0.62 (  0.62)	test_minacc   0.63 (  0.63)	test_majacc   0.54 (  0.54)	Loss_d 0.687 (0.687)	test_acc_d   0.62 (  0.62)	test_minacc_d   0.63 (  0.63)	test_majacc_d   0.54 (  0.54)	test_corr_d  -0.45 ( -0.45)
Test: [  1/  1]	Loss 0.687 (0.687)	test_acc   0.62 (  0.62)	test_minacc   0.63 (  0.63)	test_majacc   0.54 (  0.54)	Loss_d 0.687 (0.687)	test_acc_d   0.62 (  0.62)	test_minacc_d   0.63 (  0.63)	test_majacc_d   0.54 (  0.54)	test_corr_d  -0.45 ( -0.45)
Overall Timing[ 40/  1]	epoch_time 0.0498 (0.0421)	validation_time 0.0006 (0.0005)	train_time 0.0492 (0.0415)
record: (train_acc, test_acc) (0.6109000098705292, 0.6800000071525574)
last accs (train_acc, test_acc) (0.5285000155866146, 0.6220000386238098)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.97it/s] 12%|#1        | 3/26 [00:00<00:01, 11.99it/s] 19%|#9        | 5/26 [00:00<00:01, 14.02it/s] 27%|##6       | 7/26 [00:00<00:01, 15.24it/s] 35%|###4      | 9/26 [00:00<00:01, 15.92it/s] 42%|####2     | 11/26 [00:00<00:00, 15.75it/s] 50%|#####     | 13/26 [00:00<00:00, 16.23it/s] 58%|#####7    | 15/26 [00:00<00:00, 16.56it/s] 65%|######5   | 17/26 [00:01<00:00, 16.76it/s] 73%|#######3  | 19/26 [00:01<00:00, 16.94it/s] 81%|########  | 21/26 [00:01<00:00, 16.97it/s] 88%|########8 | 23/26 [00:01<00:00, 17.11it/s] 96%|#########6| 25/26 [00:01<00:00, 17.19it/s]100%|##########| 26/26 [00:01<00:00, 15.56it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1066 400
penalty weights 10000.0
args.step pgd_anneal_iters 1066 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1067 400
penalty weights 10000.0
args.step pgd_anneal_iters 1067 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1068 400
penalty weights 10000.0
args.step pgd_anneal_iters 1068 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1069 400
penalty weights 10000.0
args.step pgd_anneal_iters 1069 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1070 400
penalty weights 10000.0
args.step pgd_anneal_iters 1070 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1071 400
penalty weights 10000.0
args.step pgd_anneal_iters 1071 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1072 400
penalty weights 10000.0
args.step pgd_anneal_iters 1072 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1073 400
penalty weights 10000.0
args.step pgd_anneal_iters 1073 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1074 400
penalty weights 10000.0
args.step pgd_anneal_iters 1074 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1075 400
penalty weights 10000.0
args.step pgd_anneal_iters 1075 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1076 400
penalty weights 10000.0
args.step pgd_anneal_iters 1076 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1077 400
penalty weights 10000.0
args.step pgd_anneal_iters 1077 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1078 400
penalty weights 10000.0
args.step pgd_anneal_iters 1078 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1079 400
penalty weights 10000.0
args.step pgd_anneal_iters 1079 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1080 400
penalty weights 10000.0
args.step pgd_anneal_iters 1080 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1081 400
penalty weights 10000.0
args.step pgd_anneal_iters 1081 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1082 400
penalty weights 10000.0
args.step pgd_anneal_iters 1082 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1083 400
penalty weights 10000.0
args.step pgd_anneal_iters 1083 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1084 400
penalty weights 10000.0
args.step pgd_anneal_iters 1084 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1085 400
penalty weights 10000.0
args.step pgd_anneal_iters 1085 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1086 400
penalty weights 10000.0
args.step pgd_anneal_iters 1086 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1087 400
penalty weights 10000.0
args.step pgd_anneal_iters 1087 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1088 400
penalty weights 10000.0
args.step pgd_anneal_iters 1088 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1089 400
penalty weights 10000.0
args.step pgd_anneal_iters 1089 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1090 400
penalty weights 10000.0
args.step pgd_anneal_iters 1090 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1091 400
penalty weights 10000.0
args.step pgd_anneal_iters 1091 600
dim_v 512
retunring when rho == dim_v - 1
Epoch: [41][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.17 (  0.17)	train_acc   0.54 (  0.53)	train_minacc   0.50 (  0.64)	train_majacc   0.54 (  0.51)	train_corr   0.00 (  0.00)	l1 13.2684 (13.2623)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:00, 25.57it/s] 35%|###4      | 9/26 [00:00<00:00, 40.77it/s]                                               35%|###4      | 9/26 [00:00<00:00, 40.77it/s] 58%|#####7    | 15/26 [00:00<00:00, 43.68it/s]                                                58%|#####7    | 15/26 [00:00<00:00, 43.68it/s] 81%|########  | 21/26 [00:00<00:00, 47.71it/s]100%|##########| 26/26 [00:00<00:00, 42.31it/s]
Test: [   0/  26]	Loss 0.692 (0.692)	test_acc   0.55 (  0.55)	test_minacc   0.72 (  0.72)	test_majacc   0.52 (  0.52)	Loss_d 0.692 (0.692)	test_acc_d   0.55 (  0.55)	test_minacc_d   0.72 (  0.72)	test_majacc_d   0.52 (  0.52)	test_corr_d  -0.17 ( -0.17)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.51 (  0.53)	test_minacc   0.56 (  0.66)	test_majacc   0.50 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.53)	test_minacc_d   0.56 (  0.66)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.10 ( -0.13)
Test: [  20/  26]	Loss 0.692 (0.693)	test_acc   0.53 (  0.53)	test_minacc   0.55 (  0.65)	test_majacc   0.53 (  0.51)	Loss_d 0.692 (0.693)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.55 (  0.65)	test_majacc_d   0.53 (  0.51)	test_corr_d  -0.10 ( -0.13)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.54 (  0.53)	test_minacc   0.50 (  0.64)	test_majacc   0.54 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.54 (  0.53)	test_minacc_d   0.50 (  0.64)	test_majacc_d   0.54 (  0.50)	test_corr_d  -0.07 ( -0.13)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 64.38it/s]
Test: [  0/  1]	Loss 0.687 (0.687)	test_acc   0.64 (  0.64)	test_minacc   0.65 (  0.65)	test_majacc   0.54 (  0.54)	Loss_d 0.687 (0.687)	test_acc_d   0.64 (  0.64)	test_minacc_d   0.65 (  0.65)	test_majacc_d   0.54 (  0.54)	test_corr_d  -0.45 ( -0.45)
Test: [  1/  1]	Loss 0.687 (0.687)	test_acc   0.64 (  0.64)	test_minacc   0.65 (  0.65)	test_majacc   0.54 (  0.54)	Loss_d 0.687 (0.687)	test_acc_d   0.64 (  0.64)	test_minacc_d   0.65 (  0.65)	test_majacc_d   0.54 (  0.54)	test_corr_d  -0.45 ( -0.45)
Overall Timing[ 41/  1]	epoch_time 0.0492 (0.0423)	validation_time 0.0003 (0.0005)	train_time 0.0489 (0.0417)
record: (train_acc, test_acc) (0.6109000098705292, 0.6800000071525574)
last accs (train_acc, test_acc) (0.5258000116348267, 0.6370000243186951)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.52it/s] 12%|#1        | 3/26 [00:00<00:01, 11.85it/s] 19%|#9        | 5/26 [00:00<00:01, 14.09it/s] 27%|##6       | 7/26 [00:00<00:01, 15.35it/s] 35%|###4      | 9/26 [00:00<00:01, 16.13it/s] 42%|####2     | 11/26 [00:00<00:00, 16.57it/s] 50%|#####     | 13/26 [00:00<00:00, 16.93it/s] 58%|#####7    | 15/26 [00:00<00:00, 17.11it/s] 65%|######5   | 17/26 [00:01<00:00, 17.21it/s] 73%|#######3  | 19/26 [00:01<00:00, 17.31it/s] 81%|########  | 21/26 [00:01<00:00, 17.20it/s] 88%|########8 | 23/26 [00:01<00:00, 17.24it/s] 96%|#########6| 25/26 [00:01<00:00, 17.27it/s]100%|##########| 26/26 [00:01<00:00, 15.78it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1092 400
penalty weights 10000.0
args.step pgd_anneal_iters 1092 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1093 400
penalty weights 10000.0
args.step pgd_anneal_iters 1093 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1094 400
penalty weights 10000.0
args.step pgd_anneal_iters 1094 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1095 400
penalty weights 10000.0
args.step pgd_anneal_iters 1095 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1096 400
penalty weights 10000.0
args.step pgd_anneal_iters 1096 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1097 400
penalty weights 10000.0
args.step pgd_anneal_iters 1097 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1098 400
penalty weights 10000.0
args.step pgd_anneal_iters 1098 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1099 400
penalty weights 10000.0
args.step pgd_anneal_iters 1099 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1100 400
penalty weights 10000.0
args.step pgd_anneal_iters 1100 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1101 400
penalty weights 10000.0
args.step pgd_anneal_iters 1101 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1102 400
penalty weights 10000.0
args.step pgd_anneal_iters 1102 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1103 400
penalty weights 10000.0
args.step pgd_anneal_iters 1103 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1104 400
penalty weights 10000.0
args.step pgd_anneal_iters 1104 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1105 400
penalty weights 10000.0
args.step pgd_anneal_iters 1105 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1106 400
penalty weights 10000.0
args.step pgd_anneal_iters 1106 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1107 400
penalty weights 10000.0
args.step pgd_anneal_iters 1107 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1108 400
penalty weights 10000.0
args.step pgd_anneal_iters 1108 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1109 400
penalty weights 10000.0
args.step pgd_anneal_iters 1109 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1110 400
penalty weights 10000.0
args.step pgd_anneal_iters 1110 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1111 400
penalty weights 10000.0
args.step pgd_anneal_iters 1111 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1112 400
penalty weights 10000.0
args.step pgd_anneal_iters 1112 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1113 400
penalty weights 10000.0
args.step pgd_anneal_iters 1113 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1114 400
penalty weights 10000.0
args.step pgd_anneal_iters 1114 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1115 400
penalty weights 10000.0
args.step pgd_anneal_iters 1115 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1116 400
penalty weights 10000.0
args.step pgd_anneal_iters 1116 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1117 400
penalty weights 10000.0
args.step pgd_anneal_iters 1117 600
dim_v 512
retunring when rho == dim_v - 1
Epoch: [42][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.17 (  0.17)	train_acc   0.52 (  0.53)	train_minacc   0.50 (  0.65)	train_majacc   0.53 (  0.50)	train_corr   0.00 (  0.00)	l1 13.2803 (13.2746)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 17.37it/s] 31%|###       | 8/26 [00:00<00:00, 40.17it/s]                                               31%|###       | 8/26 [00:00<00:00, 40.17it/s] 54%|#####3    | 14/26 [00:00<00:00, 43.75it/s] 77%|#######6  | 20/26 [00:00<00:00, 48.90it/s]                                                77%|#######6  | 20/26 [00:00<00:00, 48.90it/s]100%|##########| 26/26 [00:00<00:00, 51.66it/s]100%|##########| 26/26 [00:00<00:00, 42.28it/s]
Test: [   0/  26]	Loss 0.692 (0.692)	test_acc   0.54 (  0.54)	test_minacc   0.72 (  0.72)	test_majacc   0.51 (  0.51)	Loss_d 0.692 (0.692)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.72 (  0.72)	test_majacc_d   0.51 (  0.51)	test_corr_d  -0.18 ( -0.18)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.51 (  0.52)	test_minacc   0.56 (  0.66)	test_majacc   0.50 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.52)	test_minacc_d   0.56 (  0.66)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.10 ( -0.13)
Test: [  20/  26]	Loss 0.692 (0.693)	test_acc   0.53 (  0.52)	test_minacc   0.53 (  0.65)	test_majacc   0.53 (  0.50)	Loss_d 0.692 (0.693)	test_acc_d   0.53 (  0.52)	test_minacc_d   0.53 (  0.65)	test_majacc_d   0.53 (  0.50)	test_corr_d  -0.10 ( -0.13)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.52 (  0.52)	test_minacc   0.50 (  0.65)	test_majacc   0.52 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.50 (  0.65)	test_majacc_d   0.52 (  0.50)	test_corr_d  -0.07 ( -0.13)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 67.40it/s]
Test: [  0/  1]	Loss 0.688 (0.688)	test_acc   0.64 (  0.64)	test_minacc   0.65 (  0.65)	test_majacc   0.53 (  0.53)	Loss_d 0.688 (0.688)	test_acc_d   0.64 (  0.64)	test_minacc_d   0.65 (  0.65)	test_majacc_d   0.53 (  0.53)	test_corr_d  -0.45 ( -0.45)
Test: [  1/  1]	Loss 0.688 (0.688)	test_acc   0.64 (  0.64)	test_minacc   0.65 (  0.65)	test_majacc   0.53 (  0.53)	Loss_d 0.688 (0.688)	test_acc_d   0.64 (  0.64)	test_minacc_d   0.65 (  0.65)	test_majacc_d   0.53 (  0.53)	test_corr_d  -0.45 ( -0.45)
Overall Timing[ 42/  1]	epoch_time 0.0479 (0.0424)	validation_time 0.0003 (0.0005)	train_time 0.0476 (0.0418)
record: (train_acc, test_acc) (0.6109000098705292, 0.6800000071525574)
last accs (train_acc, test_acc) (0.5227000113129616, 0.6390000581741333)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.58it/s] 12%|#1        | 3/26 [00:00<00:01, 11.71it/s] 19%|#9        | 5/26 [00:00<00:01, 13.93it/s] 27%|##6       | 7/26 [00:00<00:01, 15.12it/s] 35%|###4      | 9/26 [00:00<00:01, 15.89it/s] 42%|####2     | 11/26 [00:00<00:00, 16.34it/s] 50%|#####     | 13/26 [00:00<00:00, 16.66it/s] 58%|#####7    | 15/26 [00:00<00:00, 16.74it/s] 65%|######5   | 17/26 [00:01<00:00, 16.88it/s] 73%|#######3  | 19/26 [00:01<00:00, 16.90it/s] 81%|########  | 21/26 [00:01<00:00, 17.10it/s] 88%|########8 | 23/26 [00:01<00:00, 17.15it/s] 96%|#########6| 25/26 [00:01<00:00, 17.20it/s]100%|##########| 26/26 [00:01<00:00, 15.59it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1118 400
penalty weights 10000.0
args.step pgd_anneal_iters 1118 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1119 400
penalty weights 10000.0
args.step pgd_anneal_iters 1119 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1120 400
penalty weights 10000.0
args.step pgd_anneal_iters 1120 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1121 400
penalty weights 10000.0
args.step pgd_anneal_iters 1121 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1122 400
penalty weights 10000.0
args.step pgd_anneal_iters 1122 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1123 400
penalty weights 10000.0
args.step pgd_anneal_iters 1123 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1124 400
penalty weights 10000.0
args.step pgd_anneal_iters 1124 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1125 400
penalty weights 10000.0
args.step pgd_anneal_iters 1125 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1126 400
penalty weights 10000.0
args.step pgd_anneal_iters 1126 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1127 400
penalty weights 10000.0
args.step pgd_anneal_iters 1127 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1128 400
penalty weights 10000.0
args.step pgd_anneal_iters 1128 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1129 400
penalty weights 10000.0
args.step pgd_anneal_iters 1129 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1130 400
penalty weights 10000.0
args.step pgd_anneal_iters 1130 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1131 400
penalty weights 10000.0
args.step pgd_anneal_iters 1131 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1132 400
penalty weights 10000.0
args.step pgd_anneal_iters 1132 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1133 400
penalty weights 10000.0
args.step pgd_anneal_iters 1133 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1134 400
penalty weights 10000.0
args.step pgd_anneal_iters 1134 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1135 400
penalty weights 10000.0
args.step pgd_anneal_iters 1135 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1136 400
penalty weights 10000.0
args.step pgd_anneal_iters 1136 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1137 400
penalty weights 10000.0
args.step pgd_anneal_iters 1137 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1138 400
penalty weights 10000.0
args.step pgd_anneal_iters 1138 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1139 400
penalty weights 10000.0
args.step pgd_anneal_iters 1139 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1140 400
penalty weights 10000.0
args.step pgd_anneal_iters 1140 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1141 400
penalty weights 10000.0
args.step pgd_anneal_iters 1141 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1142 400
penalty weights 10000.0
args.step pgd_anneal_iters 1142 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1143 400
penalty weights 10000.0
args.step pgd_anneal_iters 1143 600
dim_v 512
retunring when rho == dim_v - 1
Epoch: [43][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.17 (  0.17)	train_acc   0.53 (  0.52)	train_minacc   0.53 (  0.65)	train_majacc   0.53 (  0.50)	train_corr   0.00 (  0.00)	l1 13.2913 (13.2860)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.46it/s] 27%|##6       | 7/26 [00:00<00:00, 33.51it/s]                                               27%|##6       | 7/26 [00:00<00:00, 33.51it/s] 50%|#####     | 13/26 [00:00<00:00, 39.16it/s] 73%|#######3  | 19/26 [00:00<00:00, 45.12it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 45.12it/s] 96%|#########6| 25/26 [00:00<00:00, 45.89it/s]100%|##########| 26/26 [00:00<00:00, 38.59it/s]
Test: [   0/  26]	Loss 0.692 (0.692)	test_acc   0.54 (  0.54)	test_minacc   0.72 (  0.72)	test_majacc   0.51 (  0.51)	Loss_d 0.692 (0.692)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.72 (  0.72)	test_majacc_d   0.51 (  0.51)	test_corr_d  -0.18 ( -0.18)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.50 (  0.52)	test_minacc   0.58 (  0.66)	test_majacc   0.48 (  0.49)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.52)	test_minacc_d   0.58 (  0.66)	test_majacc_d   0.48 (  0.49)	test_corr_d  -0.10 ( -0.13)
Test: [  20/  26]	Loss 0.692 (0.693)	test_acc   0.52 (  0.52)	test_minacc   0.53 (  0.66)	test_majacc   0.52 (  0.50)	Loss_d 0.692 (0.693)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.53 (  0.66)	test_majacc_d   0.52 (  0.50)	test_corr_d  -0.10 ( -0.13)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.53 (  0.52)	test_minacc   0.53 (  0.65)	test_majacc   0.53 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.53 (  0.52)	test_minacc_d   0.53 (  0.65)	test_majacc_d   0.53 (  0.50)	test_corr_d  -0.07 ( -0.13)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 67.06it/s]
Test: [  0/  1]	Loss 0.688 (0.688)	test_acc   0.64 (  0.64)	test_minacc   0.66 (  0.66)	test_majacc   0.50 (  0.50)	Loss_d 0.688 (0.688)	test_acc_d   0.64 (  0.64)	test_minacc_d   0.66 (  0.66)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.45 ( -0.45)
Test: [  1/  1]	Loss 0.688 (0.688)	test_acc   0.64 (  0.64)	test_minacc   0.66 (  0.66)	test_majacc   0.50 (  0.50)	Loss_d 0.688 (0.688)	test_acc_d   0.64 (  0.64)	test_minacc_d   0.66 (  0.66)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.45 ( -0.45)
Overall Timing[ 43/  1]	epoch_time 0.0499 (0.0426)	validation_time 0.0004 (0.0005)	train_time 0.0495 (0.0420)
record: (train_acc, test_acc) (0.6109000098705292, 0.6800000071525574)
last accs (train_acc, test_acc) (0.5199000117778778, 0.6430000066757202)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.49it/s] 12%|#1        | 3/26 [00:00<00:01, 11.75it/s] 19%|#9        | 5/26 [00:00<00:01, 14.08it/s] 27%|##6       | 7/26 [00:00<00:01, 15.24it/s] 35%|###4      | 9/26 [00:00<00:01, 15.97it/s] 42%|####2     | 11/26 [00:00<00:00, 16.20it/s] 50%|#####     | 13/26 [00:00<00:00, 16.47it/s] 58%|#####7    | 15/26 [00:00<00:00, 16.50it/s] 65%|######5   | 17/26 [00:01<00:00, 16.51it/s] 73%|#######3  | 19/26 [00:01<00:00, 16.78it/s] 81%|########  | 21/26 [00:01<00:00, 16.91it/s] 88%|########8 | 23/26 [00:01<00:00, 17.06it/s] 96%|#########6| 25/26 [00:01<00:00, 16.98it/s]100%|##########| 26/26 [00:01<00:00, 15.47it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1144 400
penalty weights 10000.0
args.step pgd_anneal_iters 1144 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1145 400
penalty weights 10000.0
args.step pgd_anneal_iters 1145 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1146 400
penalty weights 10000.0
args.step pgd_anneal_iters 1146 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1147 400
penalty weights 10000.0
args.step pgd_anneal_iters 1147 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1148 400
penalty weights 10000.0
args.step pgd_anneal_iters 1148 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1149 400
penalty weights 10000.0
args.step pgd_anneal_iters 1149 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1150 400
penalty weights 10000.0
args.step pgd_anneal_iters 1150 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1151 400
penalty weights 10000.0
args.step pgd_anneal_iters 1151 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1152 400
penalty weights 10000.0
args.step pgd_anneal_iters 1152 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1153 400
penalty weights 10000.0
args.step pgd_anneal_iters 1153 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1154 400
penalty weights 10000.0
args.step pgd_anneal_iters 1154 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1155 400
penalty weights 10000.0
args.step pgd_anneal_iters 1155 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1156 400
penalty weights 10000.0
args.step pgd_anneal_iters 1156 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1157 400
penalty weights 10000.0
args.step pgd_anneal_iters 1157 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1158 400
penalty weights 10000.0
args.step pgd_anneal_iters 1158 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1159 400
penalty weights 10000.0
args.step pgd_anneal_iters 1159 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1160 400
penalty weights 10000.0
args.step pgd_anneal_iters 1160 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1161 400
penalty weights 10000.0
args.step pgd_anneal_iters 1161 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1162 400
penalty weights 10000.0
args.step pgd_anneal_iters 1162 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1163 400
penalty weights 10000.0
args.step pgd_anneal_iters 1163 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1164 400
penalty weights 10000.0
args.step pgd_anneal_iters 1164 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1165 400
penalty weights 10000.0
args.step pgd_anneal_iters 1165 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1166 400
penalty weights 10000.0
args.step pgd_anneal_iters 1166 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1167 400
penalty weights 10000.0
args.step pgd_anneal_iters 1167 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1168 400
penalty weights 10000.0
args.step pgd_anneal_iters 1168 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1169 400
penalty weights 10000.0
args.step pgd_anneal_iters 1169 600
dim_v 512
retunring when rho == dim_v - 1
Epoch: [44][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.17 (  0.17)	train_acc   0.52 (  0.52)	train_minacc   0.53 (  0.66)	train_majacc   0.51 (  0.49)	train_corr   0.00 (  0.00)	l1 13.3016 (13.2967)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 19.72it/s] 27%|##6       | 7/26 [00:00<00:00, 37.36it/s]                                               27%|##6       | 7/26 [00:00<00:00, 37.36it/s] 46%|####6     | 12/26 [00:00<00:00, 42.28it/s] 65%|######5   | 17/26 [00:00<00:00, 43.33it/s]                                                65%|######5   | 17/26 [00:00<00:00, 43.33it/s] 88%|########8 | 23/26 [00:00<00:00, 47.70it/s]100%|##########| 26/26 [00:00<00:00, 39.84it/s]
Test: [   0/  26]	Loss 0.692 (0.692)	test_acc   0.53 (  0.53)	test_minacc   0.72 (  0.72)	test_majacc   0.50 (  0.50)	Loss_d 0.692 (0.692)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.72 (  0.72)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.18 ( -0.18)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.49 (  0.52)	test_minacc   0.59 (  0.66)	test_majacc   0.48 (  0.49)	Loss_d 0.693 (0.693)	test_acc_d   0.49 (  0.52)	test_minacc_d   0.59 (  0.66)	test_majacc_d   0.48 (  0.49)	test_corr_d  -0.10 ( -0.14)
Test: [  20/  26]	Loss 0.692 (0.693)	test_acc   0.51 (  0.52)	test_minacc   0.53 (  0.66)	test_majacc   0.51 (  0.49)	Loss_d 0.692 (0.693)	test_acc_d   0.51 (  0.52)	test_minacc_d   0.53 (  0.66)	test_majacc_d   0.51 (  0.49)	test_corr_d  -0.10 ( -0.13)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.52 (  0.52)	test_minacc   0.53 (  0.66)	test_majacc   0.51 (  0.49)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.53 (  0.66)	test_majacc_d   0.51 (  0.49)	test_corr_d  -0.08 ( -0.13)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.76it/s]
Test: [  0/  1]	Loss 0.688 (0.688)	test_acc   0.65 (  0.65)	test_minacc   0.67 (  0.67)	test_majacc   0.49 (  0.49)	Loss_d 0.688 (0.688)	test_acc_d   0.65 (  0.65)	test_minacc_d   0.67 (  0.67)	test_majacc_d   0.49 (  0.49)	test_corr_d  -0.44 ( -0.44)
Test: [  1/  1]	Loss 0.688 (0.688)	test_acc   0.65 (  0.65)	test_minacc   0.67 (  0.67)	test_majacc   0.49 (  0.49)	Loss_d 0.688 (0.688)	test_acc_d   0.65 (  0.65)	test_minacc_d   0.67 (  0.67)	test_majacc_d   0.49 (  0.49)	test_corr_d  -0.44 ( -0.44)
Overall Timing[ 44/  1]	epoch_time 0.0504 (0.0428)	validation_time 0.0004 (0.0005)	train_time 0.0500 (0.0421)
record: (train_acc, test_acc) (0.6109000098705292, 0.6800000071525574)
last accs (train_acc, test_acc) (0.5166000172793865, 0.6500000357627869)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.69it/s] 12%|#1        | 3/26 [00:00<00:01, 12.89it/s] 19%|#9        | 5/26 [00:00<00:01, 14.72it/s] 27%|##6       | 7/26 [00:00<00:01, 15.74it/s] 35%|###4      | 9/26 [00:00<00:01, 16.34it/s] 42%|####2     | 11/26 [00:00<00:00, 16.59it/s] 50%|#####     | 13/26 [00:00<00:00, 16.52it/s] 58%|#####7    | 15/26 [00:00<00:00, 16.64it/s] 65%|######5   | 17/26 [00:01<00:00, 16.84it/s] 73%|#######3  | 19/26 [00:01<00:00, 17.06it/s] 81%|########  | 21/26 [00:01<00:00, 17.08it/s] 88%|########8 | 23/26 [00:01<00:00, 17.04it/s] 96%|#########6| 25/26 [00:01<00:00, 16.98it/s]100%|##########| 26/26 [00:01<00:00, 15.70it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1170 400
penalty weights 10000.0
args.step pgd_anneal_iters 1170 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1171 400
penalty weights 10000.0
args.step pgd_anneal_iters 1171 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1172 400
penalty weights 10000.0
args.step pgd_anneal_iters 1172 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1173 400
penalty weights 10000.0
args.step pgd_anneal_iters 1173 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1174 400
penalty weights 10000.0
args.step pgd_anneal_iters 1174 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1175 400
penalty weights 10000.0
args.step pgd_anneal_iters 1175 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1176 400
penalty weights 10000.0
args.step pgd_anneal_iters 1176 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1177 400
penalty weights 10000.0
args.step pgd_anneal_iters 1177 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1178 400
penalty weights 10000.0
args.step pgd_anneal_iters 1178 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1179 400
penalty weights 10000.0
args.step pgd_anneal_iters 1179 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1180 400
penalty weights 10000.0
args.step pgd_anneal_iters 1180 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1181 400
penalty weights 10000.0
args.step pgd_anneal_iters 1181 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1182 400
penalty weights 10000.0
args.step pgd_anneal_iters 1182 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1183 400
penalty weights 10000.0
args.step pgd_anneal_iters 1183 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1184 400
penalty weights 10000.0
args.step pgd_anneal_iters 1184 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1185 400
penalty weights 10000.0
args.step pgd_anneal_iters 1185 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1186 400
penalty weights 10000.0
args.step pgd_anneal_iters 1186 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1187 400
penalty weights 10000.0
args.step pgd_anneal_iters 1187 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1188 400
penalty weights 10000.0
args.step pgd_anneal_iters 1188 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1189 400
penalty weights 10000.0
args.step pgd_anneal_iters 1189 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1190 400
penalty weights 10000.0
args.step pgd_anneal_iters 1190 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1191 400
penalty weights 10000.0
args.step pgd_anneal_iters 1191 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1192 400
penalty weights 10000.0
args.step pgd_anneal_iters 1192 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1193 400
penalty weights 10000.0
args.step pgd_anneal_iters 1193 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1194 400
penalty weights 10000.0
args.step pgd_anneal_iters 1194 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1195 400
penalty weights 10000.0
args.step pgd_anneal_iters 1195 600
dim_v 512
retunring when rho == dim_v - 1
Epoch: [45][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.17 (  0.17)	train_acc   0.52 (  0.52)	train_minacc   0.53 (  0.66)	train_majacc   0.52 (  0.49)	train_corr   0.00 (  0.00)	l1 13.3110 (13.3065)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 17.92it/s] 27%|##6       | 7/26 [00:00<00:00, 34.19it/s]                                               27%|##6       | 7/26 [00:00<00:00, 34.19it/s] 50%|#####     | 13/26 [00:00<00:00, 40.15it/s] 73%|#######3  | 19/26 [00:00<00:00, 46.19it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 46.19it/s] 96%|#########6| 25/26 [00:00<00:00, 45.80it/s]100%|##########| 26/26 [00:00<00:00, 39.36it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.53 (  0.53)	test_minacc   0.72 (  0.72)	test_majacc   0.50 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.72 (  0.72)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.18 ( -0.18)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.49 (  0.51)	test_minacc   0.61 (  0.67)	test_majacc   0.47 (  0.49)	Loss_d 0.693 (0.693)	test_acc_d   0.49 (  0.51)	test_minacc_d   0.61 (  0.67)	test_majacc_d   0.47 (  0.49)	test_corr_d  -0.10 ( -0.14)
Test: [  20/  26]	Loss 0.692 (0.693)	test_acc   0.51 (  0.51)	test_minacc   0.55 (  0.67)	test_majacc   0.50 (  0.49)	Loss_d 0.692 (0.693)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.55 (  0.67)	test_majacc_d   0.50 (  0.49)	test_corr_d  -0.10 ( -0.13)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.52 (  0.51)	test_minacc   0.53 (  0.67)	test_majacc   0.52 (  0.49)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.51)	test_minacc_d   0.53 (  0.67)	test_majacc_d   0.52 (  0.49)	test_corr_d  -0.08 ( -0.13)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.76it/s]
Test: [  0/  1]	Loss 0.688 (0.688)	test_acc   0.66 (  0.66)	test_minacc   0.68 (  0.68)	test_majacc   0.48 (  0.48)	Loss_d 0.688 (0.688)	test_acc_d   0.66 (  0.66)	test_minacc_d   0.68 (  0.68)	test_majacc_d   0.48 (  0.48)	test_corr_d  -0.44 ( -0.44)
Test: [  1/  1]	Loss 0.688 (0.688)	test_acc   0.66 (  0.66)	test_minacc   0.68 (  0.68)	test_majacc   0.48 (  0.48)	Loss_d 0.688 (0.688)	test_acc_d   0.66 (  0.66)	test_minacc_d   0.68 (  0.68)	test_majacc_d   0.48 (  0.48)	test_corr_d  -0.44 ( -0.44)
Overall Timing[ 45/  1]	epoch_time 0.0491 (0.0429)	validation_time 0.0004 (0.0005)	train_time 0.0487 (0.0423)
record: (train_acc, test_acc) (0.6109000098705292, 0.6800000071525574)
last accs (train_acc, test_acc) (0.5142000141441823, 0.6600000262260437)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.76it/s] 12%|#1        | 3/26 [00:00<00:02, 10.53it/s] 19%|#9        | 5/26 [00:00<00:01, 13.09it/s] 27%|##6       | 7/26 [00:00<00:01, 14.58it/s] 35%|###4      | 9/26 [00:00<00:01, 15.40it/s] 42%|####2     | 11/26 [00:00<00:00, 15.88it/s] 50%|#####     | 13/26 [00:00<00:00, 16.30it/s] 58%|#####7    | 15/26 [00:01<00:00, 16.47it/s] 65%|######5   | 17/26 [00:01<00:00, 16.70it/s] 73%|#######3  | 19/26 [00:01<00:00, 16.82it/s] 81%|########  | 21/26 [00:01<00:00, 16.87it/s] 88%|########8 | 23/26 [00:01<00:00, 17.02it/s] 96%|#########6| 25/26 [00:01<00:00, 17.08it/s]100%|##########| 26/26 [00:01<00:00, 15.29it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1196 400
penalty weights 10000.0
args.step pgd_anneal_iters 1196 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1197 400
penalty weights 10000.0
args.step pgd_anneal_iters 1197 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1198 400
penalty weights 10000.0
args.step pgd_anneal_iters 1198 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1199 400
penalty weights 10000.0
args.step pgd_anneal_iters 1199 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1200 400
penalty weights 10000.0
args.step pgd_anneal_iters 1200 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1201 400
penalty weights 10000.0
args.step pgd_anneal_iters 1201 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1202 400
penalty weights 10000.0
args.step pgd_anneal_iters 1202 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1203 400
penalty weights 10000.0
args.step pgd_anneal_iters 1203 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1204 400
penalty weights 10000.0
args.step pgd_anneal_iters 1204 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1205 400
penalty weights 10000.0
args.step pgd_anneal_iters 1205 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1206 400
penalty weights 10000.0
args.step pgd_anneal_iters 1206 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1207 400
penalty weights 10000.0
args.step pgd_anneal_iters 1207 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1208 400
penalty weights 10000.0
args.step pgd_anneal_iters 1208 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1209 400
penalty weights 10000.0
args.step pgd_anneal_iters 1209 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1210 400
penalty weights 10000.0
args.step pgd_anneal_iters 1210 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1211 400
penalty weights 10000.0
args.step pgd_anneal_iters 1211 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1212 400
penalty weights 10000.0
args.step pgd_anneal_iters 1212 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1213 400
penalty weights 10000.0
args.step pgd_anneal_iters 1213 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1214 400
penalty weights 10000.0
args.step pgd_anneal_iters 1214 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1215 400
penalty weights 10000.0
args.step pgd_anneal_iters 1215 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1216 400
penalty weights 10000.0
args.step pgd_anneal_iters 1216 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1217 400
penalty weights 10000.0
args.step pgd_anneal_iters 1217 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1218 400
penalty weights 10000.0
args.step pgd_anneal_iters 1218 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1219 400
penalty weights 10000.0
args.step pgd_anneal_iters 1219 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1220 400
penalty weights 10000.0
args.step pgd_anneal_iters 1220 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1221 400
penalty weights 10000.0
args.step pgd_anneal_iters 1221 600
dim_v 512
retunring when rho == dim_v - 1
Epoch: [46][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.17 (  0.17)	train_acc   0.52 (  0.51)	train_minacc   0.53 (  0.67)	train_majacc   0.52 (  0.48)	train_corr   0.00 (  0.00)	l1 13.3197 (13.3155)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.48it/s] 27%|##6       | 7/26 [00:00<00:00, 36.45it/s]                                               27%|##6       | 7/26 [00:00<00:00, 36.45it/s] 50%|#####     | 13/26 [00:00<00:00, 42.01it/s] 73%|#######3  | 19/26 [00:00<00:00, 46.99it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 46.99it/s] 96%|#########6| 25/26 [00:00<00:00, 47.00it/s]100%|##########| 26/26 [00:00<00:00, 40.49it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.53 (  0.53)	test_minacc   0.72 (  0.72)	test_majacc   0.49 (  0.49)	Loss_d 0.693 (0.693)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.72 (  0.72)	test_majacc_d   0.49 (  0.49)	test_corr_d  -0.18 ( -0.18)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.47 (  0.51)	test_minacc   0.61 (  0.67)	test_majacc   0.45 (  0.48)	Loss_d 0.693 (0.693)	test_acc_d   0.47 (  0.51)	test_minacc_d   0.61 (  0.67)	test_majacc_d   0.45 (  0.48)	test_corr_d  -0.10 ( -0.14)
Test: [  20/  26]	Loss 0.692 (0.693)	test_acc   0.51 (  0.51)	test_minacc   0.56 (  0.67)	test_majacc   0.49 (  0.48)	Loss_d 0.692 (0.693)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.56 (  0.67)	test_majacc_d   0.49 (  0.48)	test_corr_d  -0.10 ( -0.13)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.52 (  0.51)	test_minacc   0.53 (  0.67)	test_majacc   0.52 (  0.48)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.51)	test_minacc_d   0.53 (  0.67)	test_majacc_d   0.52 (  0.48)	test_corr_d  -0.08 ( -0.13)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.95it/s]
Test: [  0/  1]	Loss 0.688 (0.688)	test_acc   0.67 (  0.67)	test_minacc   0.69 (  0.69)	test_majacc   0.47 (  0.47)	Loss_d 0.688 (0.688)	test_acc_d   0.67 (  0.67)	test_minacc_d   0.69 (  0.69)	test_majacc_d   0.47 (  0.47)	test_corr_d  -0.44 ( -0.44)
Test: [  1/  1]	Loss 0.688 (0.688)	test_acc   0.67 (  0.67)	test_minacc   0.69 (  0.69)	test_majacc   0.47 (  0.47)	Loss_d 0.688 (0.688)	test_acc_d   0.67 (  0.67)	test_minacc_d   0.69 (  0.69)	test_majacc_d   0.47 (  0.47)	test_corr_d  -0.44 ( -0.44)
Overall Timing[ 46/  1]	epoch_time 0.0496 (0.0430)	validation_time 0.0006 (0.0005)	train_time 0.0490 (0.0424)
record: (train_acc, test_acc) (0.6109000098705292, 0.6800000071525574)
last accs (train_acc, test_acc) (0.5087000179588794, 0.6670000553131104)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.04it/s] 12%|#1        | 3/26 [00:00<00:01, 11.66it/s] 19%|#9        | 5/26 [00:00<00:01, 13.90it/s] 27%|##6       | 7/26 [00:00<00:01, 15.12it/s] 35%|###4      | 9/26 [00:00<00:01, 15.76it/s] 42%|####2     | 11/26 [00:00<00:00, 16.20it/s] 50%|#####     | 13/26 [00:00<00:00, 16.54it/s] 58%|#####7    | 15/26 [00:00<00:00, 16.73it/s] 65%|######5   | 17/26 [00:01<00:00, 16.96it/s] 73%|#######3  | 19/26 [00:01<00:00, 17.09it/s] 81%|########  | 21/26 [00:01<00:00, 16.88it/s] 88%|########8 | 23/26 [00:01<00:00, 16.59it/s] 96%|#########6| 25/26 [00:01<00:00, 16.60it/s]100%|##########| 26/26 [00:01<00:00, 15.40it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1222 400
penalty weights 10000.0
args.step pgd_anneal_iters 1222 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1223 400
penalty weights 10000.0
args.step pgd_anneal_iters 1223 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1224 400
penalty weights 10000.0
args.step pgd_anneal_iters 1224 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1225 400
penalty weights 10000.0
args.step pgd_anneal_iters 1225 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1226 400
penalty weights 10000.0
args.step pgd_anneal_iters 1226 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1227 400
penalty weights 10000.0
args.step pgd_anneal_iters 1227 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1228 400
penalty weights 10000.0
args.step pgd_anneal_iters 1228 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1229 400
penalty weights 10000.0
args.step pgd_anneal_iters 1229 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1230 400
penalty weights 10000.0
args.step pgd_anneal_iters 1230 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1231 400
penalty weights 10000.0
args.step pgd_anneal_iters 1231 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1232 400
penalty weights 10000.0
args.step pgd_anneal_iters 1232 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1233 400
penalty weights 10000.0
args.step pgd_anneal_iters 1233 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1234 400
penalty weights 10000.0
args.step pgd_anneal_iters 1234 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1235 400
penalty weights 10000.0
args.step pgd_anneal_iters 1235 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1236 400
penalty weights 10000.0
args.step pgd_anneal_iters 1236 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1237 400
penalty weights 10000.0
args.step pgd_anneal_iters 1237 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1238 400
penalty weights 10000.0
args.step pgd_anneal_iters 1238 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1239 400
penalty weights 10000.0
args.step pgd_anneal_iters 1239 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1240 400
penalty weights 10000.0
args.step pgd_anneal_iters 1240 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1241 400
penalty weights 10000.0
args.step pgd_anneal_iters 1241 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1242 400
penalty weights 10000.0
args.step pgd_anneal_iters 1242 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1243 400
penalty weights 10000.0
args.step pgd_anneal_iters 1243 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1244 400
penalty weights 10000.0
args.step pgd_anneal_iters 1244 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1245 400
penalty weights 10000.0
args.step pgd_anneal_iters 1245 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1246 400
penalty weights 10000.0
args.step pgd_anneal_iters 1246 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1247 400
penalty weights 10000.0
args.step pgd_anneal_iters 1247 600
dim_v 512
retunring when rho == dim_v - 1
Epoch: [47][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.17 (  0.17)	train_acc   0.52 (  0.51)	train_minacc   0.53 (  0.68)	train_majacc   0.51 (  0.48)	train_corr   0.00 (  0.00)	l1 13.3276 (13.3238)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 18.89it/s] 31%|###       | 8/26 [00:00<00:00, 38.55it/s]                                               31%|###       | 8/26 [00:00<00:00, 38.55it/s] 54%|#####3    | 14/26 [00:00<00:00, 45.31it/s] 77%|#######6  | 20/26 [00:00<00:00, 47.52it/s]                                                77%|#######6  | 20/26 [00:00<00:00, 47.52it/s]100%|##########| 26/26 [00:00<00:00, 50.22it/s]100%|##########| 26/26 [00:00<00:00, 41.94it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.51 (  0.51)	test_minacc   0.72 (  0.72)	test_majacc   0.48 (  0.48)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.72 (  0.72)	test_majacc_d   0.48 (  0.48)	test_corr_d  -0.18 ( -0.18)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.48 (  0.50)	test_minacc   0.61 (  0.68)	test_majacc   0.45 (  0.47)	Loss_d 0.693 (0.693)	test_acc_d   0.48 (  0.50)	test_minacc_d   0.61 (  0.68)	test_majacc_d   0.45 (  0.47)	test_corr_d  -0.10 ( -0.14)
Test: [  20/  26]	Loss 0.692 (0.693)	test_acc   0.50 (  0.51)	test_minacc   0.56 (  0.68)	test_majacc   0.49 (  0.48)	Loss_d 0.692 (0.693)	test_acc_d   0.50 (  0.51)	test_minacc_d   0.56 (  0.68)	test_majacc_d   0.49 (  0.48)	test_corr_d  -0.10 ( -0.13)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.52 (  0.51)	test_minacc   0.53 (  0.68)	test_majacc   0.51 (  0.48)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.51)	test_minacc_d   0.53 (  0.68)	test_majacc_d   0.51 (  0.48)	test_corr_d  -0.08 ( -0.13)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.33it/s]
Test: [  0/  1]	Loss 0.688 (0.688)	test_acc   0.68 (  0.68)	test_minacc   0.70 (  0.70)	test_majacc   0.47 (  0.47)	Loss_d 0.688 (0.688)	test_acc_d   0.68 (  0.68)	test_minacc_d   0.70 (  0.70)	test_majacc_d   0.47 (  0.47)	test_corr_d  -0.44 ( -0.44)
Test: [  1/  1]	Loss 0.688 (0.688)	test_acc   0.68 (  0.68)	test_minacc   0.70 (  0.70)	test_majacc   0.47 (  0.47)	Loss_d 0.688 (0.688)	test_acc_d   0.68 (  0.68)	test_minacc_d   0.70 (  0.70)	test_majacc_d   0.47 (  0.47)	test_corr_d  -0.44 ( -0.44)
Overall Timing[ 47/  1]	epoch_time 0.0493 (0.0432)	validation_time 0.0004 (0.0005)	train_time 0.0489 (0.0426)
record: (train_acc, test_acc) (0.6109000098705292, 0.6800000071525574)
last accs (train_acc, test_acc) (0.5062000109255314, 0.6770000457763672)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.67it/s] 12%|#1        | 3/26 [00:00<00:01, 12.71it/s] 19%|#9        | 5/26 [00:00<00:01, 14.56it/s] 27%|##6       | 7/26 [00:00<00:01, 15.61it/s] 35%|###4      | 9/26 [00:00<00:01, 16.17it/s] 42%|####2     | 11/26 [00:00<00:00, 16.55it/s] 50%|#####     | 13/26 [00:00<00:00, 16.53it/s] 58%|#####7    | 15/26 [00:00<00:00, 16.77it/s] 65%|######5   | 17/26 [00:01<00:00, 16.81it/s] 73%|#######3  | 19/26 [00:01<00:00, 16.93it/s] 81%|########  | 21/26 [00:01<00:00, 16.86it/s] 88%|########8 | 23/26 [00:01<00:00, 16.93it/s] 96%|#########6| 25/26 [00:01<00:00, 16.94it/s]100%|##########| 26/26 [00:01<00:00, 15.77it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1248 400
penalty weights 10000.0
args.step pgd_anneal_iters 1248 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1249 400
penalty weights 10000.0
args.step pgd_anneal_iters 1249 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1250 400
penalty weights 10000.0
args.step pgd_anneal_iters 1250 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1251 400
penalty weights 10000.0
args.step pgd_anneal_iters 1251 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1252 400
penalty weights 10000.0
args.step pgd_anneal_iters 1252 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1253 400
penalty weights 10000.0
args.step pgd_anneal_iters 1253 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1254 400
penalty weights 10000.0
args.step pgd_anneal_iters 1254 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1255 400
penalty weights 10000.0
args.step pgd_anneal_iters 1255 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1256 400
penalty weights 10000.0
args.step pgd_anneal_iters 1256 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1257 400
penalty weights 10000.0
args.step pgd_anneal_iters 1257 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1258 400
penalty weights 10000.0
args.step pgd_anneal_iters 1258 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1259 400
penalty weights 10000.0
args.step pgd_anneal_iters 1259 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1260 400
penalty weights 10000.0
args.step pgd_anneal_iters 1260 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1261 400
penalty weights 10000.0
args.step pgd_anneal_iters 1261 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1262 400
penalty weights 10000.0
args.step pgd_anneal_iters 1262 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1263 400
penalty weights 10000.0
args.step pgd_anneal_iters 1263 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1264 400
penalty weights 10000.0
args.step pgd_anneal_iters 1264 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1265 400
penalty weights 10000.0
args.step pgd_anneal_iters 1265 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1266 400
penalty weights 10000.0
args.step pgd_anneal_iters 1266 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1267 400
penalty weights 10000.0
args.step pgd_anneal_iters 1267 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1268 400
penalty weights 10000.0
args.step pgd_anneal_iters 1268 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1269 400
penalty weights 10000.0
args.step pgd_anneal_iters 1269 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1270 400
penalty weights 10000.0
args.step pgd_anneal_iters 1270 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1271 400
penalty weights 10000.0
args.step pgd_anneal_iters 1271 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1272 400
penalty weights 10000.0
args.step pgd_anneal_iters 1272 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1273 400
penalty weights 10000.0
args.step pgd_anneal_iters 1273 600
dim_v 512
retunring when rho == dim_v - 1
Epoch: [48][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.17 (  0.17)	train_acc   0.50 (  0.50)	train_minacc   0.53 (  0.68)	train_majacc   0.50 (  0.47)	train_corr   0.00 (  0.00)	l1 13.3349 (13.3315)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 17.99it/s] 27%|##6       | 7/26 [00:00<00:00, 35.27it/s]                                               27%|##6       | 7/26 [00:00<00:00, 35.27it/s] 46%|####6     | 12/26 [00:00<00:00, 40.79it/s] 69%|######9   | 18/26 [00:00<00:00, 44.94it/s]                                                69%|######9   | 18/26 [00:00<00:00, 44.94it/s] 92%|#########2| 24/26 [00:00<00:00, 48.22it/s]100%|##########| 26/26 [00:00<00:00, 40.98it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.51 (  0.51)	test_minacc   0.73 (  0.73)	test_majacc   0.47 (  0.47)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.73 (  0.73)	test_majacc_d   0.47 (  0.47)	test_corr_d  -0.18 ( -0.18)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.47 (  0.50)	test_minacc   0.61 (  0.69)	test_majacc   0.44 (  0.46)	Loss_d 0.693 (0.693)	test_acc_d   0.47 (  0.50)	test_minacc_d   0.61 (  0.69)	test_majacc_d   0.44 (  0.46)	test_corr_d  -0.10 ( -0.14)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.50 (  0.50)	test_minacc   0.56 (  0.69)	test_majacc   0.48 (  0.47)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.56 (  0.69)	test_majacc_d   0.48 (  0.47)	test_corr_d  -0.10 ( -0.13)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.50 (  0.50)	test_minacc   0.53 (  0.69)	test_majacc   0.50 (  0.47)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.53 (  0.69)	test_majacc_d   0.50 (  0.47)	test_corr_d  -0.08 ( -0.13)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.60it/s]
Test: [  0/  1]	Loss 0.689 (0.689)	test_acc   0.68 (  0.68)	test_minacc   0.71 (  0.71)	test_majacc   0.47 (  0.47)	Loss_d 0.689 (0.689)	test_acc_d   0.68 (  0.68)	test_minacc_d   0.71 (  0.71)	test_majacc_d   0.47 (  0.47)	test_corr_d  -0.43 ( -0.43)
Test: [  1/  1]	Loss 0.689 (0.689)	test_acc   0.68 (  0.68)	test_minacc   0.71 (  0.71)	test_majacc   0.47 (  0.47)	Loss_d 0.689 (0.689)	test_acc_d   0.68 (  0.68)	test_minacc_d   0.71 (  0.71)	test_majacc_d   0.47 (  0.47)	test_corr_d  -0.43 ( -0.43)
Overall Timing[ 48/  1]	epoch_time 0.0487 (0.0433)	validation_time 0.0004 (0.0005)	train_time 0.0482 (0.0427)
record: (train_acc, test_acc) (0.6109000098705292, 0.6800000071525574)
last accs (train_acc, test_acc) (0.5024000105261802, 0.6820000410079956)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.48it/s] 12%|#1        | 3/26 [00:00<00:01, 11.75it/s] 19%|#9        | 5/26 [00:00<00:01, 13.84it/s] 27%|##6       | 7/26 [00:00<00:01, 15.08it/s] 35%|###4      | 9/26 [00:00<00:01, 15.70it/s] 42%|####2     | 11/26 [00:00<00:00, 16.27it/s] 50%|#####     | 13/26 [00:00<00:00, 16.67it/s] 58%|#####7    | 15/26 [00:00<00:00, 16.89it/s] 65%|######5   | 17/26 [00:01<00:00, 17.09it/s] 73%|#######3  | 19/26 [00:01<00:00, 17.19it/s] 81%|########  | 21/26 [00:01<00:00, 17.00it/s] 88%|########8 | 23/26 [00:01<00:00, 17.01it/s] 96%|#########6| 25/26 [00:01<00:00, 17.11it/s]100%|##########| 26/26 [00:01<00:00, 15.53it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1274 400
penalty weights 10000.0
args.step pgd_anneal_iters 1274 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1275 400
penalty weights 10000.0
args.step pgd_anneal_iters 1275 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1276 400
penalty weights 10000.0
args.step pgd_anneal_iters 1276 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1277 400
penalty weights 10000.0
args.step pgd_anneal_iters 1277 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1278 400
penalty weights 10000.0
args.step pgd_anneal_iters 1278 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1279 400
penalty weights 10000.0
args.step pgd_anneal_iters 1279 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1280 400
penalty weights 10000.0
args.step pgd_anneal_iters 1280 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1281 400
penalty weights 10000.0
args.step pgd_anneal_iters 1281 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1282 400
penalty weights 10000.0
args.step pgd_anneal_iters 1282 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1283 400
penalty weights 10000.0
args.step pgd_anneal_iters 1283 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1284 400
penalty weights 10000.0
args.step pgd_anneal_iters 1284 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1285 400
penalty weights 10000.0
args.step pgd_anneal_iters 1285 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1286 400
penalty weights 10000.0
args.step pgd_anneal_iters 1286 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1287 400
penalty weights 10000.0
args.step pgd_anneal_iters 1287 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1288 400
penalty weights 10000.0
args.step pgd_anneal_iters 1288 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1289 400
penalty weights 10000.0
args.step pgd_anneal_iters 1289 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1290 400
penalty weights 10000.0
args.step pgd_anneal_iters 1290 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1291 400
penalty weights 10000.0
args.step pgd_anneal_iters 1291 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1292 400
penalty weights 10000.0
args.step pgd_anneal_iters 1292 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1293 400
penalty weights 10000.0
args.step pgd_anneal_iters 1293 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1294 400
penalty weights 10000.0
args.step pgd_anneal_iters 1294 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1295 400
penalty weights 10000.0
args.step pgd_anneal_iters 1295 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1296 400
penalty weights 10000.0
args.step pgd_anneal_iters 1296 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1297 400
penalty weights 10000.0
args.step pgd_anneal_iters 1297 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1298 400
penalty weights 10000.0
args.step pgd_anneal_iters 1298 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1299 400
penalty weights 10000.0
args.step pgd_anneal_iters 1299 600
dim_v 512
retunring when rho == dim_v - 1
Epoch: [49][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.17 (  0.17)	train_acc   0.50 (  0.50)	train_minacc   0.53 (  0.69)	train_majacc   0.50 (  0.47)	train_corr   0.00 (  0.00)	l1 13.3416 (13.3384)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.05it/s] 23%|##3       | 6/26 [00:00<00:00, 24.88it/s]                                               23%|##3       | 6/26 [00:00<00:00, 24.88it/s] 46%|####6     | 12/26 [00:00<00:00, 37.37it/s] 69%|######9   | 18/26 [00:00<00:00, 41.31it/s]                                                69%|######9   | 18/26 [00:00<00:00, 41.31it/s] 92%|#########2| 24/26 [00:00<00:00, 46.60it/s]100%|##########| 26/26 [00:00<00:00, 37.91it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.51 (  0.51)	test_minacc   0.73 (  0.73)	test_majacc   0.46 (  0.46)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.73 (  0.73)	test_majacc_d   0.46 (  0.46)	test_corr_d  -0.18 ( -0.18)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.48 (  0.50)	test_minacc   0.64 (  0.69)	test_majacc   0.45 (  0.46)	Loss_d 0.693 (0.693)	test_acc_d   0.48 (  0.50)	test_minacc_d   0.64 (  0.69)	test_majacc_d   0.45 (  0.46)	test_corr_d  -0.10 ( -0.14)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.49 (  0.50)	test_minacc   0.58 (  0.69)	test_majacc   0.48 (  0.47)	Loss_d 0.693 (0.693)	test_acc_d   0.49 (  0.50)	test_minacc_d   0.58 (  0.69)	test_majacc_d   0.48 (  0.47)	test_corr_d  -0.10 ( -0.13)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.50 (  0.50)	test_minacc   0.53 (  0.69)	test_majacc   0.50 (  0.47)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.53 (  0.69)	test_majacc_d   0.50 (  0.47)	test_corr_d  -0.08 ( -0.13)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 67.28it/s]
Test: [  0/  1]	Loss 0.689 (0.689)	test_acc   0.69 (  0.69)	test_minacc   0.71 (  0.71)	test_majacc   0.48 (  0.48)	Loss_d 0.689 (0.689)	test_acc_d   0.69 (  0.69)	test_minacc_d   0.71 (  0.71)	test_majacc_d   0.48 (  0.48)	test_corr_d  -0.43 ( -0.43)
Test: [  1/  1]	Loss 0.689 (0.689)	test_acc   0.69 (  0.69)	test_minacc   0.71 (  0.71)	test_majacc   0.48 (  0.48)	Loss_d 0.689 (0.689)	test_acc_d   0.69 (  0.69)	test_minacc_d   0.71 (  0.71)	test_majacc_d   0.48 (  0.48)	test_corr_d  -0.43 ( -0.43)
Overall Timing[ 49/  1]	epoch_time 0.0488 (0.0434)	validation_time 0.0004 (0.0005)	train_time 0.0484 (0.0428)
record: (train_acc, test_acc) (0.6109000098705292, 0.6800000071525574)
last accs (train_acc, test_acc) (0.5002000104486942, 0.687000036239624)
done saving aggregate.csv to ./aggregate.csv
wandb: - 0.159 MB of 0.159 MB uploadedwandb: \ 0.159 MB of 0.159 MB uploadedwandb: | 0.159 MB of 0.159 MB uploadedwandb: / 0.159 MB of 0.159 MB uploadedwandb: - 0.159 MB of 0.159 MB uploadedwandb: \ 0.159 MB of 0.159 MB uploadedwandb: | 0.159 MB of 0.159 MB uploadedwandb: / 0.159 MB of 0.159 MB uploadedwandb: - 0.159 MB of 0.159 MB uploadedwandb: \ 0.181 MB of 0.190 MB uploaded (0.003 MB deduped)wandb: 
wandb: Run history:
wandb:                                                                           global_step ▁▁▁▁▂▂▂▂▂▃▃▃▃▃▃▄▄▄▄▄▅▅▅▅▅▅▆▆▆▆▆▆▇▇▇▇▇███
wandb:      resnet18-usc-unsigned/baseline/prune_rate=1.0/33/logs/diagnostics/epoch_time_val █▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▃▂▁▂▃▃▃▄▃▃▃▄▃▃▃▃▃▃▃▃▃
wandb:      resnet18-usc-unsigned/baseline/prune_rate=1.0/33/logs/diagnostics/train_time_val █▁▁▁▁▁▁▂▁▁▁▁▁▁▁▁▁▁▁▃▃▁▂▄▄▄▅▄▄▄▄▄▄▄▄▄▄▄▄▄
wandb: resnet18-usc-unsigned/baseline/prune_rate=1.0/33/logs/diagnostics/validation_time_val █▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:                     resnet18-usc-unsigned/baseline/prune_rate=1.0/33/logs/global_step ▁▁▁▁▂▂▂▂▂▃▃▃▃▃▃▄▄▄▄▄▅▅▅▅▅▅▆▆▆▆▆▆▇▇▇▇▇███
wandb:                   resnet18-usc-unsigned/baseline/prune_rate=1.0/33/logs/test/Loss_avg ▆██▇▆█▇▆▆▅▅▆▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:                 resnet18-usc-unsigned/baseline/prune_rate=1.0/33/logs/test/Loss_d_avg ▆██▇▆█▇▆▆▅▅▆▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:                 resnet18-usc-unsigned/baseline/prune_rate=1.0/33/logs/test/Loss_d_val ▆██▇▆█▇▆▆▅▅▆▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:                   resnet18-usc-unsigned/baseline/prune_rate=1.0/33/logs/test/Loss_val ▆██▇▆█▇▆▆▅▅▆▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:               resnet18-usc-unsigned/baseline/prune_rate=1.0/33/logs/test/test_acc_avg ▁▁▁▁▃▂▂▄▄▅▆▅█████▇▇█▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇████
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/33/logs/test/test_acc_d_avg ▁▁▁▁▃▂▂▄▄▅▆▅█████▇▇█▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇████
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/33/logs/test/test_acc_d_val ▁▁▁▁▃▂▂▄▄▅▆▅█████▇▇█▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇████
wandb:               resnet18-usc-unsigned/baseline/prune_rate=1.0/33/logs/test/test_acc_val ▁▁▁▁▃▂▂▄▄▅▆▅█████▇▇█▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇████
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/33/logs/test/test_corr_d_avg ████▇▇▇▆▇▆▅▆▃▃▃▃▃▃▃▁▂▂▂▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▂▂
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/33/logs/test/test_corr_d_val ████▇▇▇▆▇▆▅▆▃▃▃▃▃▃▃▁▂▂▂▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▂▂
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/33/logs/test/test_majacc_avg █████████▇▇▇▄▃▃▃▂▂▂▂▂▂▂▂▂▂▂▃▃▂▃▂▂▂▂▁▁▁▁▁
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/33/logs/test/test_majacc_d_avg █████████▇▇▇▄▃▃▃▂▂▂▂▂▂▂▂▂▂▂▃▃▂▃▂▂▂▂▁▁▁▁▁
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/33/logs/test/test_majacc_d_val █████████▇▇▇▄▃▃▃▂▂▂▂▂▂▂▂▂▂▂▃▃▂▃▂▂▂▂▁▁▁▁▁
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/33/logs/test/test_majacc_val █████████▇▇▇▄▃▃▃▂▂▂▂▂▂▂▂▂▂▂▃▃▂▃▂▂▂▂▁▁▁▁▁
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/33/logs/test/test_minacc_avg ▁▁▁▁▃▂▂▃▄▅▆▄▇███▇▇▇█▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇████
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/33/logs/test/test_minacc_d_avg ▁▁▁▁▃▂▂▃▄▅▆▄▇███▇▇▇█▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇████
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/33/logs/test/test_minacc_d_val ▁▁▁▁▃▂▂▃▄▅▆▄▇███▇▇▇█▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇████
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/33/logs/test/test_minacc_val ▁▁▁▁▃▂▂▃▄▅▆▄▇███▇▇▇█▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇████
wandb:                  resnet18-usc-unsigned/baseline/prune_rate=1.0/33/logs/train/Loss_avg █▅▃▂▂▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:                  resnet18-usc-unsigned/baseline/prune_rate=1.0/33/logs/train/Loss_val █▅▃▃▂▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:                    resnet18-usc-unsigned/baseline/prune_rate=1.0/33/logs/train/l1_avg ▂▂▁▁▁▂▂▃▅▆▇▇███▇▇▇▇▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅
wandb:                    resnet18-usc-unsigned/baseline/prune_rate=1.0/33/logs/train/l1_val ▂▂▁▁▁▂▃▄▆▆▇████████▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/33/logs/train/train_acc_avg ▇███████████▆▄▃▃▂▂▂▁▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▁▁▁
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/33/logs/train/train_acc_val ████████████▄▄▃▂▁▁▁▁▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/33/logs/train/train_corr_avg ▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/33/logs/train/train_corr_val ▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/33/logs/train/train_majacc_avg ▇██████████▇▆▃▂▂▂▂▂▁▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▁▁▁▁
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/33/logs/train/train_majacc_val ███████▇▇▇▇▇▄▃▂▂▁▁▁▁▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/33/logs/train/train_minacc_avg ▂▁▁▁▂▂▃▃▃▃▃▄▅███▇▇▇▇▆▆▆▆▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇█
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/33/logs/train/train_minacc_val ▁▁▁▁▂▁▃▅▅▆▅▆█▇█▇▇▇▇▇▅▅▅▅▅▆▆▆▆▆▆▆▆▆▆▇▇▇▇▇
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/33/logs/train/train_nll_avg ▅▃▃▂▂▂▂▂▁▁▁▁▃▇▇▇████████████████████████
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/33/logs/train/train_nll_val ▃▃▃▂▂▂▂▂▂▂▁▁▇▇▇█████████████████████████
wandb:         resnet18-usc-unsigned/baseline/prune_rate=1.0/33/logs/train/train_penalty_avg █▃▃▃▂▂▂▂▂▂▂▂▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:         resnet18-usc-unsigned/baseline/prune_rate=1.0/33/logs/train/train_penalty_val ▆█▇▅▄▅▃▂▃▂▃▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:           resnet18-usc-unsigned/baseline/prune_rate=1.0/33/logs/train/weight_norm_avg █▅▃▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:           resnet18-usc-unsigned/baseline/prune_rate=1.0/33/logs/train/weight_norm_val █▅▃▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb: 
wandb: Run summary:
wandb:                                                                           global_step 49
wandb:      resnet18-usc-unsigned/baseline/prune_rate=1.0/33/logs/diagnostics/epoch_time_val 0.04883
wandb:      resnet18-usc-unsigned/baseline/prune_rate=1.0/33/logs/diagnostics/train_time_val 0.04844
wandb: resnet18-usc-unsigned/baseline/prune_rate=1.0/33/logs/diagnostics/validation_time_val 0.00037
wandb:                     resnet18-usc-unsigned/baseline/prune_rate=1.0/33/logs/global_step 49
wandb:                   resnet18-usc-unsigned/baseline/prune_rate=1.0/33/logs/test/Loss_avg 0.68884
wandb:                 resnet18-usc-unsigned/baseline/prune_rate=1.0/33/logs/test/Loss_d_avg 0.68884
wandb:                 resnet18-usc-unsigned/baseline/prune_rate=1.0/33/logs/test/Loss_d_val 0.68884
wandb:                   resnet18-usc-unsigned/baseline/prune_rate=1.0/33/logs/test/Loss_val 0.68884
wandb:               resnet18-usc-unsigned/baseline/prune_rate=1.0/33/logs/test/test_acc_avg 0.687
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/33/logs/test/test_acc_d_avg 0.687
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/33/logs/test/test_acc_d_val 0.687
wandb:               resnet18-usc-unsigned/baseline/prune_rate=1.0/33/logs/test/test_acc_val 0.687
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/33/logs/test/test_corr_d_avg -0.4308
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/33/logs/test/test_corr_d_val -0.4308
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/33/logs/test/test_majacc_avg 0.48
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/33/logs/test/test_majacc_d_avg 0.48
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/33/logs/test/test_majacc_d_val 0.48
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/33/logs/test/test_majacc_val 0.48
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/33/logs/test/test_minacc_avg 0.71
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/33/logs/test/test_minacc_d_avg 0.71
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/33/logs/test/test_minacc_d_val 0.71
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/33/logs/test/test_minacc_val 0.71
wandb:                  resnet18-usc-unsigned/baseline/prune_rate=1.0/33/logs/train/Loss_avg 9e-05
wandb:                  resnet18-usc-unsigned/baseline/prune_rate=1.0/33/logs/train/Loss_val 9e-05
wandb:                    resnet18-usc-unsigned/baseline/prune_rate=1.0/33/logs/train/l1_avg 13.33845
wandb:                    resnet18-usc-unsigned/baseline/prune_rate=1.0/33/logs/train/l1_val 13.34161
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/33/logs/train/train_acc_avg 0.5013
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/33/logs/train/train_acc_val 0.5
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/33/logs/train/train_corr_avg 0.0
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/33/logs/train/train_corr_val 0.0
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/33/logs/train/train_majacc_avg 0.46823
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/33/logs/train/train_majacc_val 0.49533
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/33/logs/train/train_minacc_avg 0.68784
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/33/logs/train/train_minacc_val 0.52778
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/33/logs/train/train_nll_avg 0.69287
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/33/logs/train/train_nll_val 0.69309
wandb:         resnet18-usc-unsigned/baseline/prune_rate=1.0/33/logs/train/train_penalty_avg 0.0
wandb:         resnet18-usc-unsigned/baseline/prune_rate=1.0/33/logs/train/train_penalty_val 0.0
wandb:           resnet18-usc-unsigned/baseline/prune_rate=1.0/33/logs/train/weight_norm_avg 0.17115
wandb:           resnet18-usc-unsigned/baseline/prune_rate=1.0/33/logs/train/weight_norm_val 0.17102
wandb: 
wandb: 🚀 View run name_random at: https://wandb.ai/janezdu-uiuc/irm/runs/g9mnb4gu
wandb: ⭐️ View project at: https://wandb.ai/janezdu-uiuc/irm
wandb: Synced 5 W&B file(s), 0 media file(s), 2 artifact file(s) and 1 other file(s)
wandb: Find logs at: ./wandb/run-20240906_150917-g9mnb4gu/logs
wandb: WARNING The new W&B backend becomes opt-out in version 0.18.0; try it out with `wandb.require("core")`! See https://wandb.me/wandb-core for more information.
wandb: Currently logged in as: janezdu (janezdu-uiuc). Use `wandb login --relogin` to force relogin
wandb: wandb version 0.17.9 is available!  To upgrade, please run:
wandb:  $ pip install wandb --upgrade
wandb: Tracking run with wandb version 0.17.7
wandb: Run data is saved locally in /scratch/users/zd16/sparseIRM-resnet-ver/wandb/run-20240906_151214-vggvjbhw
wandb: Run `wandb offline` to turn off syncing.
wandb: Syncing run name_random
wandb: ⭐️ View project at https://wandb.ai/janezdu-uiuc/irm
wandb: 🚀 View run at https://wandb.ai/janezdu-uiuc/irm/runs/vggvjbhw
=> Reading YAML config from configs/smallscale/resnet18/resnet18-usc-unsigned.yaml
Namespace(data='dataset/', optimizer='adam', weight_opt='adam', set='mnistcifar', arch='ResNet18', config='configs/smallscale/resnet18/resnet18-usc-unsigned.yaml', log_dir=None, workers=4, epochs=50, start_epoch=None, batch_size=390, lr=0.006, warmup_length=0, momentum=0.9, weight_decay=0.0, print_freq=10, num_classes=1, resume='', resume_train_weights='', evaluate=False, pretrained=None, pretrained_distill=None, alpha_distill=0.95, T_distill=2, seed=0, multigpu=[0], lr_policy='cosine_lr', lr_adjust=30, lr_gamma=0.1, name='baseline', save_every=-1, prune_rate=1.0, param_prune_rate=0.0, pr_start=1.0, low_data=1, width_mult=1.0, nesterov=False, threetimes=False, random_subnet=False, one_batch=False, conv_type='DenseConv', freeze_weights=False, st=False, mode='fan_in', nonlinearity='relu', bn_type='LearnedBatchNorm', init='kaiming_normal', no_bn_decay=False, scale_fan=False, first_layer_dense=False, last_layer_dense=True, approx=False, zero=False, flip=False, bs=False, gumbel_sample=False, multiply_prob=False, no_multiply=False, multiply_cont=False, multiply_prob_bs=False, indiv=False, label_smoothing=None, first_layer_type=None, trainer='default', score_init_constant=1.0, K=1, update_freq=20, D=0.01, T=1, TA=True, TA2=False, TA_grow=False, center=False, straight_through=False, PLA_factor=0.1, PLA_patience=10, gradient_loss_para=0, abs_loss_para=0, thres=0.9, runs_name='name_random', resume_compare_loss1='', resume_compare_loss2='', init_weights='', trained_mask='', weight_rescaling=False, constrain_by_layer=False, weight_rescaling_data=False, use_running_stats=False, not_clipping=False, rescaling_para=False, lasso_para=0, dont_freeze_weights=False, iterative=True, prob_by_weight=False, rescale_at_fix_subnet=False, train_weights_at_the_same_time=False, sample_from_training_set=False, load_true_para=False, distill=False, finetune=False, stablize=False, prev_best=0, weight_opt_lr=0.0006, n=500, ts=0.28, te=0.6, d=20000, s=80, c=0.75, init_prob=False, thres_before=0.001, wide_ratio=0.001, noise=1, cal_p_q=False, just_finetune=False, snip=False, envs_num=2, l2_regularizer_weight=0.001, data_num=50000, env_type='linear', irm_type='irmv1', hidden_dim=390, penalty_anneal_iters=400, penalty_weight=10000.0, grayscale_model=0, weight_lr_schedule=False, fix_subnet=False, freeze_weight=False, step='ours', prior_sd_coef=0, dim_inv=2, variance_gamma=1.0, dim_spu=10, image_scale=32, cons_ratio='0.999_0.7_0.1', noise_ratio=0.2, step_gamma=0.1, step_round=3, inner_steps=1, use_pgd=True, z=15.0, pgd_anneal_iters=600)
=> Creating model 'ResNet18'
Here!!!!!!!!
==> Conv Type: DenseConv
==> BN Type: LearnedBatchNorm
<class 'torch.nn.modules.conv.Conv2d'>
<class 'torch.nn.modules.batchnorm.BatchNorm2d'>
==> Building first layer with <class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
ResNet(
  (conv1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
  (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (relu): ReLU(inplace=True)
  (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
  (layer1): Sequential(
    (0): BasicBlock(
      (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (1): BasicBlock(
      (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (layer2): Sequential(
    (0): BasicBlock(
      (conv1): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (downsample): Sequential(
        (0): Conv2d(64, 128, kernel_size=(1, 1), stride=(2, 2), bias=False)
        (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (1): BasicBlock(
      (conv1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (layer3): Sequential(
    (0): BasicBlock(
      (conv1): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (downsample): Sequential(
        (0): Conv2d(128, 256, kernel_size=(1, 1), stride=(2, 2), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (1): BasicBlock(
      (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (layer4): Sequential(
    (0): BasicBlock(
      (conv1): Conv2d(256, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (downsample): Sequential(
        (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (1): BasicBlock(
      (conv1): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (avgpool): AdaptiveAvgPool2d(output_size=1)
  (fc): Linear(in_features=512, out_features=1, bias=True)
)
=> Parallelizing on [0] gpus
<DEBUG> gradient to module.conv1.weight
<DEBUG> gradient to module.bn1.weight
<DEBUG> gradient to module.bn1.bias
<DEBUG> gradient to module.layer1.0.conv1.weight
<DEBUG> gradient to module.layer1.0.bn1.weight
<DEBUG> gradient to module.layer1.0.bn1.bias
<DEBUG> gradient to module.layer1.0.conv2.weight
<DEBUG> gradient to module.layer1.0.bn2.weight
<DEBUG> gradient to module.layer1.0.bn2.bias
<DEBUG> gradient to module.layer1.1.conv1.weight
<DEBUG> gradient to module.layer1.1.bn1.weight
<DEBUG> gradient to module.layer1.1.bn1.bias
<DEBUG> gradient to module.layer1.1.conv2.weight
<DEBUG> gradient to module.layer1.1.bn2.weight
<DEBUG> gradient to module.layer1.1.bn2.bias
<DEBUG> gradient to module.layer2.0.conv1.weight
<DEBUG> gradient to module.layer2.0.bn1.weight
<DEBUG> gradient to module.layer2.0.bn1.bias
<DEBUG> gradient to module.layer2.0.conv2.weight
<DEBUG> gradient to module.layer2.0.bn2.weight
<DEBUG> gradient to module.layer2.0.bn2.bias
<DEBUG> gradient to module.layer2.0.downsample.0.weight
<DEBUG> gradient to module.layer2.0.downsample.1.weight
<DEBUG> gradient to module.layer2.0.downsample.1.bias
<DEBUG> gradient to module.layer2.1.conv1.weight
<DEBUG> gradient to module.layer2.1.bn1.weight
<DEBUG> gradient to module.layer2.1.bn1.bias
<DEBUG> gradient to module.layer2.1.conv2.weight
<DEBUG> gradient to module.layer2.1.bn2.weight
<DEBUG> gradient to module.layer2.1.bn2.bias
<DEBUG> gradient to module.layer3.0.conv1.weight
<DEBUG> gradient to module.layer3.0.bn1.weight
<DEBUG> gradient to module.layer3.0.bn1.bias
<DEBUG> gradient to module.layer3.0.conv2.weight
<DEBUG> gradient to module.layer3.0.bn2.weight
<DEBUG> gradient to module.layer3.0.bn2.bias
<DEBUG> gradient to module.layer3.0.downsample.0.weight
<DEBUG> gradient to module.layer3.0.downsample.1.weight
<DEBUG> gradient to module.layer3.0.downsample.1.bias
<DEBUG> gradient to module.layer3.1.conv1.weight
<DEBUG> gradient to module.layer3.1.bn1.weight
<DEBUG> gradient to module.layer3.1.bn1.bias
<DEBUG> gradient to module.layer3.1.conv2.weight
<DEBUG> gradient to module.layer3.1.bn2.weight
<DEBUG> gradient to module.layer3.1.bn2.bias
<DEBUG> gradient to module.layer4.0.conv1.weight
<DEBUG> gradient to module.layer4.0.bn1.weight
<DEBUG> gradient to module.layer4.0.bn1.bias
<DEBUG> gradient to module.layer4.0.conv2.weight
<DEBUG> gradient to module.layer4.0.bn2.weight
<DEBUG> gradient to module.layer4.0.bn2.bias
<DEBUG> gradient to module.layer4.0.downsample.0.weight
<DEBUG> gradient to module.layer4.0.downsample.1.weight
<DEBUG> gradient to module.layer4.0.downsample.1.bias
<DEBUG> gradient to module.layer4.1.conv1.weight
<DEBUG> gradient to module.layer4.1.bn1.weight
<DEBUG> gradient to module.layer4.1.bn1.bias
<DEBUG> gradient to module.layer4.1.conv2.weight
<DEBUG> gradient to module.layer4.1.bn2.weight
<DEBUG> gradient to module.layer4.1.bn2.bias
<DEBUG> gradient to module.fc.weight
<DEBUG> gradient to module.fc.bias
Files already downloaded and verified
Files already downloaded and verified
Adding Noise to Label, len(Y)=12000, Label_noise=1171
Xmp (7877, 3, 32, 32) (6903, 3, 32, 32)
Xcp (6007, 3, 32, 32) (5993, 3, 32, 32)
env=0 2497 2497 3 3
xn 2500 xp 2500
env=1 1750 1750 750 750
xn 2500 xp 2500
env=2 50 50 450 450
xn 500 xp 500
=> Creating model 'EBD'
EBD(
  (embedings): Embedding(2, 1)
)
=> Parallelizing on [0] gpus
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:01<00:38,  1.54s/it] 19%|#9        | 5/26 [00:01<00:05,  3.90it/s] 35%|###4      | 9/26 [00:01<00:02,  7.61it/s] 50%|#####     | 13/26 [00:01<00:01, 11.41it/s] 65%|######5   | 17/26 [00:02<00:00, 15.23it/s] 81%|########  | 21/26 [00:02<00:00, 19.02it/s] 96%|#########6| 25/26 [00:02<00:00, 22.31it/s]100%|##########| 26/26 [00:02<00:00,  9.82it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 0 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 2 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 3 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 4 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 5 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 6 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 7 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 8 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 9 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 10 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 11 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 12 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 13 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 14 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 15 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 16 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 17 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 18 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 19 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 20 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 21 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 22 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 23 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 24 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 25 400
penalty weights 0.0
Epoch: [0][  26/  26]	Loss 9.258 (12.179)	train_nll   0.43 (  0.56)	train_penalty   0.09 (  0.26)	weight_norm   8.83 ( 11.62)	train_acc   0.85 (  0.80)	train_minacc   0.03 (  0.09)	train_majacc   0.99 (  0.92)	train_corr   0.00 (  0.00)	l1 6.0070 (7.0531)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.42it/s] 27%|##6       | 7/26 [00:00<00:00, 35.29it/s]                                               27%|##6       | 7/26 [00:00<00:00, 35.29it/s] 50%|#####     | 13/26 [00:00<00:00, 40.16it/s] 73%|#######3  | 19/26 [00:00<00:00, 46.55it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 46.55it/s] 96%|#########6| 25/26 [00:00<00:00, 47.17it/s]100%|##########| 26/26 [00:00<00:00, 39.27it/s]
Test: [   0/  26]	Loss 0.410 (0.410)	test_acc   0.86 (  0.86)	test_minacc   0.00 (  0.00)	test_majacc   1.00 (  1.00)	Loss_d 0.410 (0.410)	test_acc_d   0.86 (  0.86)	test_minacc_d   0.00 (  0.00)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.99 (  0.99)
Test: [  10/  26]	Loss 0.384 (0.426)	test_acc   0.87 (  0.85)	test_minacc   0.00 (  0.01)	test_majacc   1.00 (  1.00)	Loss_d 0.384 (0.426)	test_acc_d   0.87 (  0.85)	test_minacc_d   0.00 (  0.01)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.99 (  0.99)
Test: [  20/  26]	Loss 0.370 (0.426)	test_acc   0.88 (  0.85)	test_minacc   0.06 (  0.01)	test_majacc   1.00 (  1.00)	Loss_d 0.370 (0.426)	test_acc_d   0.88 (  0.85)	test_minacc_d   0.06 (  0.01)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.98 (  0.99)
Test: [  26/  26]	Loss 0.409 (0.423)	test_acc   0.86 (  0.85)	test_minacc   0.03 (  0.01)	test_majacc   1.00 (  1.00)	Loss_d 0.409 (0.423)	test_acc_d   0.86 (  0.85)	test_minacc_d   0.03 (  0.01)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.98 (  0.98)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00,  2.55it/s]100%|##########| 1/1 [00:00<00:00,  2.55it/s]
Test: [  0/  1]	Loss 2.088 (2.088)	test_acc   0.10 (  0.10)	test_minacc   0.00 (  0.00)	test_majacc   0.99 (  0.99)	Loss_d 2.088 (2.088)	test_acc_d   0.10 (  0.10)	test_minacc_d   0.00 (  0.00)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.98 (  0.98)
Test: [  1/  1]	Loss 2.088 (2.088)	test_acc   0.10 (  0.10)	test_minacc   0.00 (  0.00)	test_majacc   0.99 (  0.99)	Loss_d 2.088 (2.088)	test_acc_d   0.10 (  0.10)	test_minacc_d   0.00 (  0.00)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.98 (  0.98)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/34/checkpoints/model_best.pth
Overall Timing[  0/  1]	epoch_time 0.0771 (0.0771)	validation_time 0.0066 (0.0066)	train_time 0.0661 (0.0661)
record: (train_acc, test_acc) (0.8484000196456909, 0.10300000756978989)
last accs (train_acc, test_acc) (0.8484000196456909, 0.10300000756978989)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.65it/s] 19%|#9        | 5/26 [00:00<00:00, 22.92it/s] 35%|###4      | 9/26 [00:00<00:00, 27.76it/s] 50%|#####     | 13/26 [00:00<00:00, 29.81it/s] 65%|######5   | 17/26 [00:00<00:00, 31.23it/s] 81%|########  | 21/26 [00:00<00:00, 31.94it/s] 96%|#########6| 25/26 [00:00<00:00, 32.19it/s]100%|##########| 26/26 [00:00<00:00, 27.85it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 26 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 27 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 28 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 29 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 30 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 31 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 32 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 33 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 34 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 35 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 36 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 37 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 38 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 39 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 40 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 41 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 42 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 43 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 44 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 45 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 46 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 47 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 48 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 49 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 50 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 51 400
penalty weights 0.0
Epoch: [1][  26/  26]	Loss 4.586 (6.502)	train_nll   0.41 (  0.41)	train_penalty   0.06 (  0.06)	weight_norm   4.18 (  6.09)	train_acc   0.86 (  0.85)	train_minacc   0.06 (  0.03)	train_majacc   0.99 (  0.99)	train_corr   0.00 (  0.00)	l1 5.3033 (5.6126)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.98it/s] 31%|###       | 8/26 [00:00<00:00, 40.59it/s]                                               31%|###       | 8/26 [00:00<00:00, 40.59it/s] 50%|#####     | 13/26 [00:00<00:00, 42.86it/s] 73%|#######3  | 19/26 [00:00<00:00, 48.92it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 48.92it/s] 96%|#########6| 25/26 [00:00<00:00, 49.03it/s]100%|##########| 26/26 [00:00<00:00, 41.48it/s]
Test: [   0/  26]	Loss 0.390 (0.390)	test_acc   0.85 (  0.85)	test_minacc   0.02 (  0.02)	test_majacc   0.99 (  0.99)	Loss_d 0.390 (0.390)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.02 (  0.02)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.96 (  0.96)
Test: [  10/  26]	Loss 0.370 (0.393)	test_acc   0.86 (  0.85)	test_minacc   0.02 (  0.02)	test_majacc   0.99 (  1.00)	Loss_d 0.370 (0.393)	test_acc_d   0.86 (  0.85)	test_minacc_d   0.02 (  0.02)	test_majacc_d   0.99 (  1.00)	test_corr_d   0.96 (  0.96)
Test: [  20/  26]	Loss 0.356 (0.393)	test_acc   0.87 (  0.85)	test_minacc   0.06 (  0.03)	test_majacc   0.99 (  0.99)	Loss_d 0.356 (0.393)	test_acc_d   0.87 (  0.85)	test_minacc_d   0.06 (  0.03)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.96 (  0.96)
Test: [  26/  26]	Loss 0.389 (0.391)	test_acc   0.86 (  0.85)	test_minacc   0.00 (  0.03)	test_majacc   1.00 (  0.99)	Loss_d 0.389 (0.391)	test_acc_d   0.86 (  0.85)	test_minacc_d   0.00 (  0.03)	test_majacc_d   1.00 (  0.99)	test_corr_d   0.96 (  0.96)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 59.52it/s]
Test: [  0/  1]	Loss 1.693 (1.693)	test_acc   0.12 (  0.12)	test_minacc   0.02 (  0.02)	test_majacc   0.98 (  0.98)	Loss_d 1.693 (1.693)	test_acc_d   0.12 (  0.12)	test_minacc_d   0.02 (  0.02)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.93 (  0.93)
Test: [  1/  1]	Loss 1.693 (1.693)	test_acc   0.12 (  0.12)	test_minacc   0.02 (  0.02)	test_majacc   0.98 (  0.98)	Loss_d 1.693 (1.693)	test_acc_d   0.12 (  0.12)	test_minacc_d   0.02 (  0.02)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.93 (  0.93)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/34/checkpoints/model_best.pth
Overall Timing[  1/  1]	epoch_time 0.0364 (0.0568)	validation_time 0.0004 (0.0035)	train_time 0.0360 (0.0510)
record: (train_acc, test_acc) (0.849100027859211, 0.11600000411272049)
last accs (train_acc, test_acc) (0.849100027859211, 0.11600000411272049)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.99it/s] 15%|#5        | 4/26 [00:00<00:01, 17.94it/s] 31%|###       | 8/26 [00:00<00:00, 24.70it/s] 46%|####6     | 12/26 [00:00<00:00, 28.25it/s] 62%|######1   | 16/26 [00:00<00:00, 30.28it/s] 77%|#######6  | 20/26 [00:00<00:00, 31.82it/s] 92%|#########2| 24/26 [00:00<00:00, 32.63it/s]100%|##########| 26/26 [00:00<00:00, 27.05it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 52 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 53 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 54 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 55 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 56 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 57 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 58 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 59 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 60 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 61 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 62 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 63 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 64 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 65 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 66 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 67 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 68 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 69 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 70 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 71 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 72 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 73 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 74 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 75 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 76 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 77 400
penalty weights 0.0
Epoch: [2][  26/  26]	Loss 2.769 (3.522)	train_nll   0.40 (  0.40)	train_penalty   0.05 (  0.05)	weight_norm   2.37 (  3.12)	train_acc   0.85 (  0.85)	train_minacc   0.03 (  0.05)	train_majacc   0.99 (  0.99)	train_corr   0.00 (  0.00)	l1 4.4321 (4.7481)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.99it/s] 27%|##6       | 7/26 [00:00<00:00, 34.35it/s]                                               27%|##6       | 7/26 [00:00<00:00, 34.35it/s] 50%|#####     | 13/26 [00:00<00:00, 40.27it/s] 77%|#######6  | 20/26 [00:00<00:00, 48.45it/s]                                                77%|#######6  | 20/26 [00:00<00:00, 48.45it/s] 96%|#########6| 25/26 [00:00<00:00, 46.83it/s]100%|##########| 26/26 [00:00<00:00, 39.90it/s]
Test: [   0/  26]	Loss 0.377 (0.377)	test_acc   0.86 (  0.86)	test_minacc   0.02 (  0.02)	test_majacc   1.00 (  1.00)	Loss_d 0.377 (0.377)	test_acc_d   0.86 (  0.86)	test_minacc_d   0.02 (  0.02)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.96 (  0.96)
Test: [  10/  26]	Loss 0.339 (0.374)	test_acc   0.87 (  0.85)	test_minacc   0.00 (  0.02)	test_majacc   1.00 (  1.00)	Loss_d 0.339 (0.374)	test_acc_d   0.87 (  0.85)	test_minacc_d   0.00 (  0.02)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.96 (  0.96)
Test: [  20/  26]	Loss 0.327 (0.374)	test_acc   0.87 (  0.85)	test_minacc   0.06 (  0.03)	test_majacc   0.99 (  1.00)	Loss_d 0.327 (0.374)	test_acc_d   0.87 (  0.85)	test_minacc_d   0.06 (  0.03)	test_majacc_d   0.99 (  1.00)	test_corr_d   0.96 (  0.96)
Test: [  26/  26]	Loss 0.361 (0.369)	test_acc   0.86 (  0.85)	test_minacc   0.03 (  0.03)	test_majacc   1.00 (  1.00)	Loss_d 0.361 (0.369)	test_acc_d   0.86 (  0.85)	test_minacc_d   0.03 (  0.03)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.95 (  0.96)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.57it/s]
Test: [  0/  1]	Loss 1.876 (1.876)	test_acc   0.11 (  0.11)	test_minacc   0.01 (  0.01)	test_majacc   0.99 (  0.99)	Loss_d 1.876 (1.876)	test_acc_d   0.11 (  0.11)	test_minacc_d   0.01 (  0.01)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.93 (  0.93)
Test: [  1/  1]	Loss 1.876 (1.876)	test_acc   0.11 (  0.11)	test_minacc   0.01 (  0.01)	test_majacc   0.99 (  0.99)	Loss_d 1.876 (1.876)	test_acc_d   0.11 (  0.11)	test_minacc_d   0.01 (  0.01)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.93 (  0.93)
Overall Timing[  2/  1]	epoch_time 0.0369 (0.0501)	validation_time 0.0004 (0.0025)	train_time 0.0365 (0.0462)
record: (train_acc, test_acc) (0.849100027859211, 0.11600000411272049)
last accs (train_acc, test_acc) (0.8514000241160393, 0.1120000034570694)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 16.98it/s] 23%|##3       | 6/26 [00:00<00:00, 25.46it/s] 38%|###8      | 10/26 [00:00<00:00, 28.22it/s] 54%|#####3    | 14/26 [00:00<00:00, 29.88it/s] 69%|######9   | 18/26 [00:00<00:00, 31.30it/s] 85%|########4 | 22/26 [00:00<00:00, 31.95it/s]100%|##########| 26/26 [00:00<00:00, 32.52it/s]100%|##########| 26/26 [00:00<00:00, 28.41it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 78 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 79 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 80 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 81 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 82 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 83 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 84 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 85 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 86 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 87 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 88 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 89 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 90 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 91 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 92 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 93 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 94 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 95 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 96 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 97 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 98 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 99 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 100 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 101 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 102 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 103 400
penalty weights 0.0
Epoch: [3][  26/  26]	Loss 1.872 (2.266)	train_nll   0.37 (  0.38)	train_penalty   0.04 (  0.04)	weight_norm   1.50 (  1.88)	train_acc   0.86 (  0.85)	train_minacc   0.00 (  0.07)	train_majacc   1.00 (  0.99)	train_corr   0.00 (  0.00)	l1 4.1813 (4.0946)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.52it/s] 27%|##6       | 7/26 [00:00<00:00, 36.08it/s]                                               27%|##6       | 7/26 [00:00<00:00, 36.08it/s] 50%|#####     | 13/26 [00:00<00:00, 42.40it/s] 73%|#######3  | 19/26 [00:00<00:00, 47.24it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 47.24it/s] 96%|#########6| 25/26 [00:00<00:00, 47.90it/s]100%|##########| 26/26 [00:00<00:00, 40.42it/s]
Test: [   0/  26]	Loss 0.380 (0.380)	test_acc   0.85 (  0.85)	test_minacc   0.04 (  0.04)	test_majacc   0.99 (  0.99)	Loss_d 0.380 (0.380)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.04 (  0.04)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.93 (  0.93)
Test: [  10/  26]	Loss 0.347 (0.376)	test_acc   0.87 (  0.85)	test_minacc   0.04 (  0.06)	test_majacc   1.00 (  0.99)	Loss_d 0.347 (0.376)	test_acc_d   0.87 (  0.85)	test_minacc_d   0.04 (  0.06)	test_majacc_d   1.00 (  0.99)	test_corr_d   0.92 (  0.93)
Test: [  20/  26]	Loss 0.327 (0.371)	test_acc   0.87 (  0.85)	test_minacc   0.08 (  0.06)	test_majacc   0.98 (  0.99)	Loss_d 0.327 (0.371)	test_acc_d   0.87 (  0.85)	test_minacc_d   0.08 (  0.06)	test_majacc_d   0.98 (  0.99)	test_corr_d   0.92 (  0.93)
Test: [  26/  26]	Loss 0.349 (0.369)	test_acc   0.86 (  0.85)	test_minacc   0.03 (  0.06)	test_majacc   1.00 (  0.99)	Loss_d 0.349 (0.369)	test_acc_d   0.86 (  0.85)	test_minacc_d   0.03 (  0.06)	test_majacc_d   1.00 (  0.99)	test_corr_d   0.93 (  0.93)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.37it/s]
Test: [  0/  1]	Loss 1.805 (1.805)	test_acc   0.15 (  0.15)	test_minacc   0.05 (  0.05)	test_majacc   0.98 (  0.98)	Loss_d 1.805 (1.805)	test_acc_d   0.15 (  0.15)	test_minacc_d   0.05 (  0.05)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.86 (  0.86)
Test: [  1/  1]	Loss 1.805 (1.805)	test_acc   0.15 (  0.15)	test_minacc   0.05 (  0.05)	test_majacc   0.98 (  0.98)	Loss_d 1.805 (1.805)	test_acc_d   0.15 (  0.15)	test_minacc_d   0.05 (  0.05)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.86 (  0.86)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/34/checkpoints/model_best.pth
Overall Timing[  3/  1]	epoch_time 0.0349 (0.0463)	validation_time 0.0004 (0.0020)	train_time 0.0345 (0.0433)
record: (train_acc, test_acc) (0.8528000263571739, 0.1469999998807907)
last accs (train_acc, test_acc) (0.8528000263571739, 0.1469999998807907)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.94it/s] 19%|#9        | 5/26 [00:00<00:00, 21.92it/s] 35%|###4      | 9/26 [00:00<00:00, 27.05it/s] 50%|#####     | 13/26 [00:00<00:00, 29.97it/s] 65%|######5   | 17/26 [00:00<00:00, 31.81it/s] 81%|########  | 21/26 [00:00<00:00, 33.00it/s] 96%|#########6| 25/26 [00:00<00:00, 33.06it/s]100%|##########| 26/26 [00:00<00:00, 28.29it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 104 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 105 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 106 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 107 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 108 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 109 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 110 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 111 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 112 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 113 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 114 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 115 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 116 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 117 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 118 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 119 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 120 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 121 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 122 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 123 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 124 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 125 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 126 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 127 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 128 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 129 400
penalty weights 0.0
Epoch: [4][  26/  26]	Loss 1.361 (1.587)	train_nll   0.37 (  0.37)	train_penalty   0.03 (  0.04)	weight_norm   0.99 (  1.21)	train_acc   0.86 (  0.85)	train_minacc   0.14 (  0.09)	train_majacc   0.98 (  0.98)	train_corr   0.00 (  0.00)	l1 4.6706 (4.4066)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:00, 26.74it/s] 35%|###4      | 9/26 [00:00<00:00, 37.98it/s]                                               35%|###4      | 9/26 [00:00<00:00, 37.98it/s] 58%|#####7    | 15/26 [00:00<00:00, 46.43it/s]                                                58%|#####7    | 15/26 [00:00<00:00, 46.43it/s] 81%|########  | 21/26 [00:00<00:00, 46.84it/s]100%|##########| 26/26 [00:00<00:00, 41.81it/s]
Test: [   0/  26]	Loss 0.380 (0.380)	test_acc   0.84 (  0.84)	test_minacc   0.12 (  0.12)	test_majacc   0.96 (  0.96)	Loss_d 0.380 (0.380)	test_acc_d   0.84 (  0.84)	test_minacc_d   0.12 (  0.12)	test_majacc_d   0.96 (  0.96)	test_corr_d   0.89 (  0.89)
Test: [  10/  26]	Loss 0.355 (0.378)	test_acc   0.84 (  0.85)	test_minacc   0.15 (  0.18)	test_majacc   0.95 (  0.97)	Loss_d 0.355 (0.378)	test_acc_d   0.84 (  0.85)	test_minacc_d   0.15 (  0.18)	test_majacc_d   0.95 (  0.97)	test_corr_d   0.88 (  0.89)
Test: [  20/  26]	Loss 0.337 (0.374)	test_acc   0.86 (  0.85)	test_minacc   0.20 (  0.18)	test_majacc   0.95 (  0.97)	Loss_d 0.337 (0.374)	test_acc_d   0.86 (  0.85)	test_minacc_d   0.20 (  0.18)	test_majacc_d   0.95 (  0.97)	test_corr_d   0.89 (  0.89)
Test: [  26/  26]	Loss 0.350 (0.372)	test_acc   0.86 (  0.85)	test_minacc   0.17 (  0.18)	test_majacc   0.97 (  0.97)	Loss_d 0.350 (0.372)	test_acc_d   0.86 (  0.85)	test_minacc_d   0.17 (  0.18)	test_majacc_d   0.97 (  0.97)	test_corr_d   0.90 (  0.89)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.79it/s]
Test: [  0/  1]	Loss 1.718 (1.718)	test_acc   0.24 (  0.24)	test_minacc   0.16 (  0.16)	test_majacc   0.96 (  0.96)	Loss_d 1.718 (1.718)	test_acc_d   0.24 (  0.24)	test_minacc_d   0.16 (  0.16)	test_majacc_d   0.96 (  0.96)	test_corr_d   0.77 (  0.77)
Test: [  1/  1]	Loss 1.718 (1.718)	test_acc   0.24 (  0.24)	test_minacc   0.16 (  0.16)	test_majacc   0.96 (  0.96)	Loss_d 1.718 (1.718)	test_acc_d   0.24 (  0.24)	test_minacc_d   0.16 (  0.16)	test_majacc_d   0.96 (  0.96)	test_corr_d   0.77 (  0.77)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/34/checkpoints/model_best.pth
Overall Timing[  4/  1]	epoch_time 0.0373 (0.0445)	validation_time 0.0003 (0.0016)	train_time 0.0369 (0.0420)
record: (train_acc, test_acc) (0.8503000231385232, 0.2370000183582306)
last accs (train_acc, test_acc) (0.8503000231385232, 0.2370000183582306)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.19it/s] 19%|#9        | 5/26 [00:00<00:00, 22.37it/s] 35%|###4      | 9/26 [00:00<00:00, 27.23it/s] 50%|#####     | 13/26 [00:00<00:00, 29.94it/s] 65%|######5   | 17/26 [00:00<00:00, 31.26it/s] 81%|########  | 21/26 [00:00<00:00, 32.46it/s] 96%|#########6| 25/26 [00:00<00:00, 32.74it/s]100%|##########| 26/26 [00:00<00:00, 28.10it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 130 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 131 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 132 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 133 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 134 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 135 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 136 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 137 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 138 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 139 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 140 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 141 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 142 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 143 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 144 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 145 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 146 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 147 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 148 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 149 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 150 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 151 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 152 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 153 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 154 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 155 400
penalty weights 0.0
Epoch: [5][  26/  26]	Loss 1.007 (1.168)	train_nll   0.36 (  0.36)	train_penalty   0.03 (  0.03)	weight_norm   0.65 (  0.80)	train_acc   0.86 (  0.85)	train_minacc   0.06 (  0.12)	train_majacc   0.99 (  0.98)	train_corr   0.00 (  0.00)	l1 5.6332 (5.2180)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 19.06it/s] 27%|##6       | 7/26 [00:00<00:00, 34.24it/s]                                               27%|##6       | 7/26 [00:00<00:00, 34.24it/s] 46%|####6     | 12/26 [00:00<00:00, 39.81it/s] 73%|#######3  | 19/26 [00:00<00:00, 49.27it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 49.27it/s] 92%|#########2| 24/26 [00:00<00:00, 47.97it/s]100%|##########| 26/26 [00:00<00:00, 41.15it/s]
Test: [   0/  26]	Loss 0.327 (0.327)	test_acc   0.86 (  0.86)	test_minacc   0.18 (  0.18)	test_majacc   0.98 (  0.98)	Loss_d 0.327 (0.327)	test_acc_d   0.86 (  0.86)	test_minacc_d   0.18 (  0.18)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.90 (  0.90)
Test: [  10/  26]	Loss 0.316 (0.342)	test_acc   0.87 (  0.85)	test_minacc   0.08 (  0.14)	test_majacc   0.99 (  0.98)	Loss_d 0.316 (0.342)	test_acc_d   0.87 (  0.85)	test_minacc_d   0.08 (  0.14)	test_majacc_d   0.99 (  0.98)	test_corr_d   0.90 (  0.90)
Test: [  20/  26]	Loss 0.294 (0.340)	test_acc   0.88 (  0.85)	test_minacc   0.18 (  0.14)	test_majacc   0.99 (  0.98)	Loss_d 0.294 (0.340)	test_acc_d   0.88 (  0.85)	test_minacc_d   0.18 (  0.14)	test_majacc_d   0.99 (  0.98)	test_corr_d   0.90 (  0.90)
Test: [  26/  26]	Loss 0.341 (0.337)	test_acc   0.86 (  0.85)	test_minacc   0.11 (  0.15)	test_majacc   0.98 (  0.98)	Loss_d 0.341 (0.337)	test_acc_d   0.86 (  0.85)	test_minacc_d   0.11 (  0.15)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.91 (  0.90)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.51it/s]
Test: [  0/  1]	Loss 1.661 (1.661)	test_acc   0.21 (  0.21)	test_minacc   0.12 (  0.12)	test_majacc   0.98 (  0.98)	Loss_d 1.661 (1.661)	test_acc_d   0.21 (  0.21)	test_minacc_d   0.12 (  0.12)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.78 (  0.78)
Test: [  1/  1]	Loss 1.661 (1.661)	test_acc   0.21 (  0.21)	test_minacc   0.12 (  0.12)	test_majacc   0.98 (  0.98)	Loss_d 1.661 (1.661)	test_acc_d   0.21 (  0.21)	test_minacc_d   0.12 (  0.12)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.78 (  0.78)
Overall Timing[  5/  1]	epoch_time 0.0367 (0.0432)	validation_time 0.0004 (0.0014)	train_time 0.0362 (0.0410)
record: (train_acc, test_acc) (0.8503000231385232, 0.2370000183582306)
last accs (train_acc, test_acc) (0.8545000250935555, 0.20800000429153442)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.60it/s] 15%|#5        | 4/26 [00:00<00:01, 19.48it/s] 31%|###       | 8/26 [00:00<00:00, 25.85it/s] 46%|####6     | 12/26 [00:00<00:00, 28.81it/s] 62%|######1   | 16/26 [00:00<00:00, 30.45it/s] 77%|#######6  | 20/26 [00:00<00:00, 31.84it/s] 92%|#########2| 24/26 [00:00<00:00, 32.22it/s]100%|##########| 26/26 [00:00<00:00, 27.64it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 156 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 157 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 158 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 159 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 160 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 161 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 162 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 163 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 164 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 165 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 166 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 167 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 168 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 169 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 170 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 171 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 172 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 173 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 174 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 175 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 176 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 177 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 178 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 179 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 180 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 181 400
penalty weights 0.0
Epoch: [6][  26/  26]	Loss 0.796 (0.891)	train_nll   0.36 (  0.36)	train_penalty   0.04 (  0.03)	weight_norm   0.43 (  0.53)	train_acc   0.84 (  0.85)	train_minacc   0.03 (  0.14)	train_majacc   0.98 (  0.97)	train_corr   0.00 (  0.00)	l1 6.3553 (5.9860)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.61it/s] 27%|##6       | 7/26 [00:00<00:00, 29.44it/s]                                               27%|##6       | 7/26 [00:00<00:00, 29.44it/s] 50%|#####     | 13/26 [00:00<00:00, 37.77it/s] 73%|#######3  | 19/26 [00:00<00:00, 44.76it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 44.76it/s] 96%|#########6| 25/26 [00:00<00:00, 46.00it/s]100%|##########| 26/26 [00:00<00:00, 36.60it/s]
Test: [   0/  26]	Loss 0.352 (0.352)	test_acc   0.86 (  0.86)	test_minacc   0.05 (  0.05)	test_majacc   0.99 (  0.99)	Loss_d 0.352 (0.352)	test_acc_d   0.86 (  0.86)	test_minacc_d   0.05 (  0.05)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.94 (  0.94)
Test: [  10/  26]	Loss 0.327 (0.358)	test_acc   0.87 (  0.85)	test_minacc   0.08 (  0.05)	test_majacc   1.00 (  0.99)	Loss_d 0.327 (0.358)	test_acc_d   0.87 (  0.85)	test_minacc_d   0.08 (  0.05)	test_majacc_d   1.00 (  0.99)	test_corr_d   0.94 (  0.94)
Test: [  20/  26]	Loss 0.317 (0.356)	test_acc   0.88 (  0.85)	test_minacc   0.14 (  0.06)	test_majacc   0.99 (  0.99)	Loss_d 0.317 (0.356)	test_acc_d   0.88 (  0.85)	test_minacc_d   0.14 (  0.06)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.93 (  0.93)
Test: [  26/  26]	Loss 0.345 (0.353)	test_acc   0.86 (  0.85)	test_minacc   0.03 (  0.06)	test_majacc   0.99 (  0.99)	Loss_d 0.345 (0.353)	test_acc_d   0.86 (  0.85)	test_minacc_d   0.03 (  0.06)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.93 (  0.93)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.01it/s]
Test: [  0/  1]	Loss 1.808 (1.808)	test_acc   0.15 (  0.15)	test_minacc   0.06 (  0.06)	test_majacc   0.99 (  0.99)	Loss_d 1.808 (1.808)	test_acc_d   0.15 (  0.15)	test_minacc_d   0.06 (  0.06)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.88 (  0.88)
Test: [  1/  1]	Loss 1.808 (1.808)	test_acc   0.15 (  0.15)	test_minacc   0.06 (  0.06)	test_majacc   0.99 (  0.99)	Loss_d 1.808 (1.808)	test_acc_d   0.15 (  0.15)	test_minacc_d   0.06 (  0.06)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.88 (  0.88)
Overall Timing[  6/  1]	epoch_time 0.0363 (0.0422)	validation_time 0.0004 (0.0013)	train_time 0.0359 (0.0403)
record: (train_acc, test_acc) (0.8503000231385232, 0.2370000183582306)
last accs (train_acc, test_acc) (0.852600024163723, 0.15300001204013824)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.68it/s] 19%|#9        | 5/26 [00:00<00:00, 24.13it/s] 35%|###4      | 9/26 [00:00<00:00, 28.33it/s] 50%|#####     | 13/26 [00:00<00:00, 30.84it/s] 65%|######5   | 17/26 [00:00<00:00, 32.21it/s] 81%|########  | 21/26 [00:00<00:00, 32.96it/s] 96%|#########6| 25/26 [00:00<00:00, 33.43it/s]100%|##########| 26/26 [00:00<00:00, 29.00it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 182 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 183 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 184 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 185 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 186 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 187 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 188 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 189 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 190 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 191 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 192 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 193 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 194 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 195 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 196 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 197 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 198 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 199 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 200 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 201 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 202 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 203 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 204 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 205 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 206 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 207 400
penalty weights 0.0
Epoch: [7][  26/  26]	Loss 0.677 (0.722)	train_nll   0.36 (  0.36)	train_penalty   0.03 (  0.03)	weight_norm   0.31 (  0.36)	train_acc   0.86 (  0.85)	train_minacc   0.06 (  0.14)	train_majacc   1.00 (  0.98)	train_corr   0.00 (  0.00)	l1 7.3957 (6.9131)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.33it/s] 27%|##6       | 7/26 [00:00<00:00, 35.55it/s]                                               27%|##6       | 7/26 [00:00<00:00, 35.55it/s] 50%|#####     | 13/26 [00:00<00:00, 40.14it/s] 77%|#######6  | 20/26 [00:00<00:00, 48.43it/s]                                                77%|#######6  | 20/26 [00:00<00:00, 48.43it/s] 96%|#########6| 25/26 [00:00<00:00, 47.37it/s]100%|##########| 26/26 [00:00<00:00, 39.95it/s]
Test: [   0/  26]	Loss 0.346 (0.346)	test_acc   0.86 (  0.86)	test_minacc   0.07 (  0.07)	test_majacc   0.99 (  0.99)	Loss_d 0.346 (0.346)	test_acc_d   0.86 (  0.86)	test_minacc_d   0.07 (  0.07)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.95 (  0.95)
Test: [  10/  26]	Loss 0.326 (0.354)	test_acc   0.87 (  0.85)	test_minacc   0.04 (  0.05)	test_majacc   1.00 (  0.99)	Loss_d 0.326 (0.354)	test_acc_d   0.87 (  0.85)	test_minacc_d   0.04 (  0.05)	test_majacc_d   1.00 (  0.99)	test_corr_d   0.94 (  0.94)
Test: [  20/  26]	Loss 0.311 (0.353)	test_acc   0.88 (  0.85)	test_minacc   0.10 (  0.05)	test_majacc   0.99 (  0.99)	Loss_d 0.311 (0.353)	test_acc_d   0.88 (  0.85)	test_minacc_d   0.10 (  0.05)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.94 (  0.94)
Test: [  26/  26]	Loss 0.344 (0.350)	test_acc   0.86 (  0.85)	test_minacc   0.06 (  0.05)	test_majacc   1.00 (  0.99)	Loss_d 0.344 (0.350)	test_acc_d   0.86 (  0.85)	test_minacc_d   0.06 (  0.05)	test_majacc_d   1.00 (  0.99)	test_corr_d   0.94 (  0.94)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 64.16it/s]
Test: [  0/  1]	Loss 1.786 (1.786)	test_acc   0.14 (  0.14)	test_minacc   0.04 (  0.04)	test_majacc   0.99 (  0.99)	Loss_d 1.786 (1.786)	test_acc_d   0.14 (  0.14)	test_minacc_d   0.04 (  0.04)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.89 (  0.89)
Test: [  1/  1]	Loss 1.786 (1.786)	test_acc   0.14 (  0.14)	test_minacc   0.04 (  0.04)	test_majacc   0.99 (  0.99)	Loss_d 1.786 (1.786)	test_acc_d   0.14 (  0.14)	test_minacc_d   0.04 (  0.04)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.89 (  0.89)
Overall Timing[  7/  1]	epoch_time 0.0364 (0.0415)	validation_time 0.0003 (0.0012)	train_time 0.0361 (0.0398)
record: (train_acc, test_acc) (0.8503000231385232, 0.2370000183582306)
last accs (train_acc, test_acc) (0.8523000196218491, 0.13700000941753387)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.54it/s] 15%|#5        | 4/26 [00:00<00:01, 17.58it/s] 31%|###       | 8/26 [00:00<00:00, 24.72it/s] 46%|####6     | 12/26 [00:00<00:00, 28.25it/s] 62%|######1   | 16/26 [00:00<00:00, 30.50it/s] 77%|#######6  | 20/26 [00:00<00:00, 31.69it/s] 92%|#########2| 24/26 [00:00<00:00, 32.16it/s]100%|##########| 26/26 [00:00<00:00, 26.92it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 208 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 209 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 210 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 211 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 212 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 213 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 214 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 215 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 216 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 217 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 218 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 219 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 220 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 221 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 222 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 223 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 224 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 225 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 226 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 227 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 228 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 229 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 230 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 231 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 232 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 233 400
penalty weights 0.0
Epoch: [8][  26/  26]	Loss 0.600 (0.626)	train_nll   0.37 (  0.36)	train_penalty   0.05 (  0.03)	weight_norm   0.23 (  0.27)	train_acc   0.86 (  0.85)	train_minacc   0.00 (  0.18)	train_majacc   1.00 (  0.97)	train_corr   0.00 (  0.00)	l1 9.1634 (8.3166)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 19.24it/s] 31%|###       | 8/26 [00:00<00:00, 39.78it/s]                                               31%|###       | 8/26 [00:00<00:00, 39.78it/s] 50%|#####     | 13/26 [00:00<00:00, 44.05it/s] 69%|######9   | 18/26 [00:00<00:00, 46.08it/s]                                                69%|######9   | 18/26 [00:00<00:00, 46.08it/s] 92%|#########2| 24/26 [00:00<00:00, 50.24it/s]100%|##########| 26/26 [00:00<00:00, 42.14it/s]
Test: [   0/  26]	Loss 0.353 (0.353)	test_acc   0.85 (  0.85)	test_minacc   0.00 (  0.00)	test_majacc   0.99 (  0.99)	Loss_d 0.353 (0.353)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.00 (  0.00)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.95 (  0.95)
Test: [  10/  26]	Loss 0.325 (0.359)	test_acc   0.87 (  0.85)	test_minacc   0.00 (  0.03)	test_majacc   1.00 (  1.00)	Loss_d 0.325 (0.359)	test_acc_d   0.87 (  0.85)	test_minacc_d   0.00 (  0.03)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.96 (  0.95)
Test: [  20/  26]	Loss 0.322 (0.359)	test_acc   0.88 (  0.85)	test_minacc   0.10 (  0.04)	test_majacc   0.99 (  1.00)	Loss_d 0.322 (0.359)	test_acc_d   0.88 (  0.85)	test_minacc_d   0.10 (  0.04)	test_majacc_d   0.99 (  1.00)	test_corr_d   0.95 (  0.95)
Test: [  26/  26]	Loss 0.354 (0.355)	test_acc   0.86 (  0.85)	test_minacc   0.00 (  0.04)	test_majacc   1.00 (  1.00)	Loss_d 0.354 (0.355)	test_acc_d   0.86 (  0.85)	test_minacc_d   0.00 (  0.04)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.95 (  0.95)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 56.61it/s]
Test: [  0/  1]	Loss 1.833 (1.833)	test_acc   0.12 (  0.12)	test_minacc   0.02 (  0.02)	test_majacc   0.99 (  0.99)	Loss_d 1.833 (1.833)	test_acc_d   0.12 (  0.12)	test_minacc_d   0.02 (  0.02)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.91 (  0.91)
Test: [  1/  1]	Loss 1.833 (1.833)	test_acc   0.12 (  0.12)	test_minacc   0.02 (  0.02)	test_majacc   0.99 (  0.99)	Loss_d 1.833 (1.833)	test_acc_d   0.12 (  0.12)	test_minacc_d   0.02 (  0.02)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.91 (  0.91)
Overall Timing[  8/  1]	epoch_time 0.0361 (0.0409)	validation_time 0.0005 (0.0011)	train_time 0.0356 (0.0393)
record: (train_acc, test_acc) (0.8503000231385232, 0.2370000183582306)
last accs (train_acc, test_acc) (0.8527000252008438, 0.11600000411272049)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.91it/s] 19%|#9        | 5/26 [00:00<00:00, 22.39it/s] 35%|###4      | 9/26 [00:00<00:00, 27.31it/s] 50%|#####     | 13/26 [00:00<00:00, 30.18it/s] 65%|######5   | 17/26 [00:00<00:00, 31.69it/s] 81%|########  | 21/26 [00:00<00:00, 31.60it/s] 96%|#########6| 25/26 [00:00<00:00, 32.25it/s]100%|##########| 26/26 [00:00<00:00, 27.91it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 234 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 235 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 236 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 237 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 238 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 239 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 240 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 241 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 242 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 243 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 244 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 245 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 246 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 247 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 248 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 249 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 250 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 251 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 252 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 253 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 254 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 255 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 256 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 257 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 258 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 259 400
penalty weights 0.0
Epoch: [9][  26/  26]	Loss 0.535 (0.545)	train_nll   0.37 (  0.35)	train_penalty   0.03 (  0.03)	weight_norm   0.17 (  0.20)	train_acc   0.85 (  0.85)	train_minacc   0.11 (  0.21)	train_majacc   0.97 (  0.97)	train_corr   0.00 (  0.00)	l1 10.7019 (9.9981)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.70it/s] 27%|##6       | 7/26 [00:00<00:00, 36.30it/s]                                               27%|##6       | 7/26 [00:00<00:00, 36.30it/s] 46%|####6     | 12/26 [00:00<00:00, 41.52it/s] 69%|######9   | 18/26 [00:00<00:00, 46.79it/s]                                                69%|######9   | 18/26 [00:00<00:00, 46.79it/s] 92%|#########2| 24/26 [00:00<00:00, 49.00it/s]100%|##########| 26/26 [00:00<00:00, 40.51it/s]
Test: [   0/  26]	Loss 0.351 (0.351)	test_acc   0.86 (  0.86)	test_minacc   0.12 (  0.12)	test_majacc   0.98 (  0.98)	Loss_d 0.351 (0.351)	test_acc_d   0.86 (  0.86)	test_minacc_d   0.12 (  0.12)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.94 (  0.94)
Test: [  10/  26]	Loss 0.314 (0.348)	test_acc   0.87 (  0.86)	test_minacc   0.12 (  0.11)	test_majacc   0.99 (  0.99)	Loss_d 0.314 (0.348)	test_acc_d   0.87 (  0.86)	test_minacc_d   0.12 (  0.11)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.95 (  0.94)
Test: [  20/  26]	Loss 0.315 (0.347)	test_acc   0.88 (  0.86)	test_minacc   0.14 (  0.11)	test_majacc   0.99 (  0.99)	Loss_d 0.315 (0.347)	test_acc_d   0.88 (  0.86)	test_minacc_d   0.14 (  0.11)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.94 (  0.94)
Test: [  26/  26]	Loss 0.346 (0.344)	test_acc   0.85 (  0.86)	test_minacc   0.03 (  0.11)	test_majacc   0.98 (  0.99)	Loss_d 0.346 (0.344)	test_acc_d   0.85 (  0.86)	test_minacc_d   0.03 (  0.11)	test_majacc_d   0.98 (  0.99)	test_corr_d   0.94 (  0.94)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.85it/s]
Test: [  0/  1]	Loss 1.725 (1.725)	test_acc   0.17 (  0.17)	test_minacc   0.08 (  0.08)	test_majacc   0.98 (  0.98)	Loss_d 1.725 (1.725)	test_acc_d   0.17 (  0.17)	test_minacc_d   0.08 (  0.08)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.85 (  0.85)
Test: [  1/  1]	Loss 1.725 (1.725)	test_acc   0.17 (  0.17)	test_minacc   0.08 (  0.08)	test_majacc   0.98 (  0.98)	Loss_d 1.725 (1.725)	test_acc_d   0.17 (  0.17)	test_minacc_d   0.08 (  0.08)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.85 (  0.85)
Overall Timing[  9/  1]	epoch_time 0.0357 (0.0404)	validation_time 0.0003 (0.0010)	train_time 0.0354 (0.0389)
record: (train_acc, test_acc) (0.8503000231385232, 0.2370000183582306)
last accs (train_acc, test_acc) (0.8572000304460525, 0.1730000078678131)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.50it/s] 19%|#9        | 5/26 [00:00<00:00, 23.89it/s] 35%|###4      | 9/26 [00:00<00:00, 28.29it/s] 50%|#####     | 13/26 [00:00<00:00, 30.11it/s] 65%|######5   | 17/26 [00:00<00:00, 31.31it/s] 81%|########  | 21/26 [00:00<00:00, 32.29it/s] 96%|#########6| 25/26 [00:00<00:00, 32.58it/s]100%|##########| 26/26 [00:00<00:00, 28.30it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 260 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 261 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 262 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 263 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 264 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 265 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 266 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 267 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 268 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 269 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 270 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 271 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 272 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 273 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 274 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 275 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 276 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 277 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 278 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 279 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 280 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 281 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 282 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 283 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 284 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 285 400
penalty weights 0.0
Epoch: [10][  26/  26]	Loss 0.475 (0.484)	train_nll   0.34 (  0.34)	train_penalty   0.02 (  0.02)	weight_norm   0.13 (  0.14)	train_acc   0.87 (  0.86)	train_minacc   0.31 (  0.23)	train_majacc   0.96 (  0.97)	train_corr   0.00 (  0.00)	l1 12.5490 (11.5893)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 17.36it/s] 31%|###       | 8/26 [00:00<00:00, 39.12it/s]                                               31%|###       | 8/26 [00:00<00:00, 39.12it/s] 54%|#####3    | 14/26 [00:00<00:00, 45.25it/s] 77%|#######6  | 20/26 [00:00<00:00, 49.53it/s]                                                77%|#######6  | 20/26 [00:00<00:00, 49.53it/s] 96%|#########6| 25/26 [00:00<00:00, 47.65it/s]100%|##########| 26/26 [00:00<00:00, 41.35it/s]
Test: [   0/  26]	Loss 0.349 (0.349)	test_acc   0.84 (  0.84)	test_minacc   0.21 (  0.21)	test_majacc   0.95 (  0.95)	Loss_d 0.349 (0.349)	test_acc_d   0.84 (  0.84)	test_minacc_d   0.21 (  0.21)	test_majacc_d   0.95 (  0.95)	test_corr_d   0.89 (  0.89)
Test: [  10/  26]	Loss 0.306 (0.340)	test_acc   0.87 (  0.85)	test_minacc   0.29 (  0.24)	test_majacc   0.96 (  0.96)	Loss_d 0.306 (0.340)	test_acc_d   0.87 (  0.85)	test_minacc_d   0.29 (  0.24)	test_majacc_d   0.96 (  0.96)	test_corr_d   0.89 (  0.90)
Test: [  20/  26]	Loss 0.304 (0.335)	test_acc   0.88 (  0.86)	test_minacc   0.30 (  0.25)	test_majacc   0.97 (  0.97)	Loss_d 0.304 (0.335)	test_acc_d   0.88 (  0.86)	test_minacc_d   0.30 (  0.25)	test_majacc_d   0.97 (  0.97)	test_corr_d   0.90 (  0.90)
Test: [  26/  26]	Loss 0.320 (0.333)	test_acc   0.88 (  0.86)	test_minacc   0.34 (  0.25)	test_majacc   0.97 (  0.97)	Loss_d 0.320 (0.333)	test_acc_d   0.88 (  0.86)	test_minacc_d   0.34 (  0.25)	test_majacc_d   0.97 (  0.97)	test_corr_d   0.90 (  0.90)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.92it/s]
Test: [  0/  1]	Loss 1.654 (1.654)	test_acc   0.31 (  0.31)	test_minacc   0.23 (  0.23)	test_majacc   0.96 (  0.96)	Loss_d 1.654 (1.654)	test_acc_d   0.31 (  0.31)	test_minacc_d   0.23 (  0.23)	test_majacc_d   0.96 (  0.96)	test_corr_d   0.71 (  0.71)
Test: [  1/  1]	Loss 1.654 (1.654)	test_acc   0.31 (  0.31)	test_minacc   0.23 (  0.23)	test_majacc   0.96 (  0.96)	Loss_d 1.654 (1.654)	test_acc_d   0.31 (  0.31)	test_minacc_d   0.23 (  0.23)	test_majacc_d   0.96 (  0.96)	test_corr_d   0.71 (  0.71)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/34/checkpoints/model_best.pth
Overall Timing[ 10/  1]	epoch_time 0.0369 (0.0401)	validation_time 0.0003 (0.0009)	train_time 0.0366 (0.0387)
record: (train_acc, test_acc) (0.8593000190854072, 0.3060000240802765)
last accs (train_acc, test_acc) (0.8593000190854072, 0.3060000240802765)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.29it/s] 19%|#9        | 5/26 [00:00<00:00, 23.22it/s] 35%|###4      | 9/26 [00:00<00:00, 28.08it/s] 50%|#####     | 13/26 [00:00<00:00, 30.28it/s] 65%|######5   | 17/26 [00:00<00:00, 31.80it/s] 81%|########  | 21/26 [00:00<00:00, 32.73it/s] 96%|#########6| 25/26 [00:00<00:00, 33.37it/s]100%|##########| 26/26 [00:00<00:00, 28.80it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 286 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 287 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 288 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 289 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 290 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 291 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 292 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 293 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 294 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 295 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 296 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 297 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 298 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 299 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 300 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 301 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 302 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 303 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 304 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 305 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 306 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 307 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 308 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 309 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 310 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 311 400
penalty weights 0.0
Epoch: [11][  26/  26]	Loss 0.475 (0.464)	train_nll   0.36 (  0.34)	train_penalty   0.04 (  0.03)	weight_norm   0.11 (  0.12)	train_acc   0.86 (  0.85)	train_minacc   0.23 (  0.23)	train_majacc   0.96 (  0.96)	train_corr   0.00 (  0.00)	l1 14.1398 (13.1956)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.52it/s] 27%|##6       | 7/26 [00:00<00:00, 37.85it/s]                                               27%|##6       | 7/26 [00:00<00:00, 37.85it/s] 50%|#####     | 13/26 [00:00<00:00, 42.41it/s] 73%|#######3  | 19/26 [00:00<00:00, 47.82it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 47.82it/s] 96%|#########6| 25/26 [00:00<00:00, 48.45it/s]100%|##########| 26/26 [00:00<00:00, 40.87it/s]
Test: [   0/  26]	Loss 0.354 (0.354)	test_acc   0.86 (  0.86)	test_minacc   0.30 (  0.30)	test_majacc   0.95 (  0.95)	Loss_d 0.354 (0.354)	test_acc_d   0.86 (  0.86)	test_minacc_d   0.30 (  0.30)	test_majacc_d   0.95 (  0.95)	test_corr_d   0.88 (  0.88)
Test: [  10/  26]	Loss 0.317 (0.351)	test_acc   0.87 (  0.85)	test_minacc   0.35 (  0.27)	test_majacc   0.95 (  0.96)	Loss_d 0.317 (0.351)	test_acc_d   0.87 (  0.85)	test_minacc_d   0.35 (  0.27)	test_majacc_d   0.95 (  0.96)	test_corr_d   0.89 (  0.88)
Test: [  20/  26]	Loss 0.316 (0.348)	test_acc   0.88 (  0.85)	test_minacc   0.32 (  0.29)	test_majacc   0.96 (  0.96)	Loss_d 0.316 (0.348)	test_acc_d   0.88 (  0.85)	test_minacc_d   0.32 (  0.29)	test_majacc_d   0.96 (  0.96)	test_corr_d   0.88 (  0.88)
Test: [  26/  26]	Loss 0.354 (0.345)	test_acc   0.86 (  0.86)	test_minacc   0.31 (  0.29)	test_majacc   0.95 (  0.96)	Loss_d 0.354 (0.345)	test_acc_d   0.86 (  0.86)	test_minacc_d   0.31 (  0.29)	test_majacc_d   0.95 (  0.96)	test_corr_d   0.88 (  0.88)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.23it/s]
Test: [  0/  1]	Loss 1.651 (1.651)	test_acc   0.28 (  0.28)	test_minacc   0.21 (  0.21)	test_majacc   0.95 (  0.95)	Loss_d 1.651 (1.651)	test_acc_d   0.28 (  0.28)	test_minacc_d   0.21 (  0.21)	test_majacc_d   0.95 (  0.95)	test_corr_d   0.69 (  0.69)
Test: [  1/  1]	Loss 1.651 (1.651)	test_acc   0.28 (  0.28)	test_minacc   0.21 (  0.21)	test_majacc   0.95 (  0.95)	Loss_d 1.651 (1.651)	test_acc_d   0.28 (  0.28)	test_minacc_d   0.21 (  0.21)	test_majacc_d   0.95 (  0.95)	test_corr_d   0.69 (  0.69)
Overall Timing[ 11/  1]	epoch_time 0.0369 (0.0398)	validation_time 0.0004 (0.0009)	train_time 0.0365 (0.0385)
record: (train_acc, test_acc) (0.8593000190854072, 0.3060000240802765)
last accs (train_acc, test_acc) (0.8561000226736069, 0.28300002217292786)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.71it/s] 15%|#5        | 4/26 [00:00<00:01, 19.18it/s] 31%|###       | 8/26 [00:00<00:00, 25.62it/s] 46%|####6     | 12/26 [00:00<00:00, 28.80it/s] 62%|######1   | 16/26 [00:00<00:00, 30.59it/s] 77%|#######6  | 20/26 [00:00<00:00, 31.82it/s] 92%|#########2| 24/26 [00:00<00:00, 32.81it/s]100%|##########| 26/26 [00:00<00:00, 27.62it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 312 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 313 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 314 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 315 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 316 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 317 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 318 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 319 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 320 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 321 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 322 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 323 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 324 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 325 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 326 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 327 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 328 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 329 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 330 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 331 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 332 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 333 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 334 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 335 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 336 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 337 400
penalty weights 0.0
Epoch: [12][  26/  26]	Loss 0.453 (0.440)	train_nll   0.36 (  0.34)	train_penalty   0.03 (  0.02)	weight_norm   0.10 (  0.10)	train_acc   0.86 (  0.86)	train_minacc   0.20 (  0.27)	train_majacc   0.97 (  0.96)	train_corr   0.00 (  0.00)	l1 15.2578 (14.6735)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.02it/s] 23%|##3       | 6/26 [00:00<00:00, 31.72it/s]                                               23%|##3       | 6/26 [00:00<00:00, 31.72it/s] 46%|####6     | 12/26 [00:00<00:00, 42.14it/s] 69%|######9   | 18/26 [00:00<00:00, 45.11it/s]                                                69%|######9   | 18/26 [00:00<00:00, 45.11it/s] 92%|#########2| 24/26 [00:00<00:00, 49.44it/s]100%|##########| 26/26 [00:00<00:00, 40.79it/s]
Test: [   0/  26]	Loss 0.346 (0.346)	test_acc   0.86 (  0.86)	test_minacc   0.14 (  0.14)	test_majacc   0.98 (  0.98)	Loss_d 0.346 (0.346)	test_acc_d   0.86 (  0.86)	test_minacc_d   0.14 (  0.14)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.93 (  0.93)
Test: [  10/  26]	Loss 0.302 (0.341)	test_acc   0.87 (  0.86)	test_minacc   0.12 (  0.14)	test_majacc   0.99 (  0.99)	Loss_d 0.302 (0.341)	test_acc_d   0.87 (  0.86)	test_minacc_d   0.12 (  0.14)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.94 (  0.94)
Test: [  20/  26]	Loss 0.300 (0.338)	test_acc   0.88 (  0.86)	test_minacc   0.14 (  0.14)	test_majacc   0.99 (  0.99)	Loss_d 0.300 (0.338)	test_acc_d   0.88 (  0.86)	test_minacc_d   0.14 (  0.14)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.94 (  0.93)
Test: [  26/  26]	Loss 0.344 (0.335)	test_acc   0.87 (  0.86)	test_minacc   0.14 (  0.14)	test_majacc   0.99 (  0.99)	Loss_d 0.344 (0.335)	test_acc_d   0.87 (  0.86)	test_minacc_d   0.14 (  0.14)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.93 (  0.94)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.97it/s]
Test: [  0/  1]	Loss 1.657 (1.657)	test_acc   0.19 (  0.19)	test_minacc   0.10 (  0.10)	test_majacc   0.97 (  0.97)	Loss_d 1.657 (1.657)	test_acc_d   0.19 (  0.19)	test_minacc_d   0.10 (  0.10)	test_majacc_d   0.97 (  0.97)	test_corr_d   0.84 (  0.84)
Test: [  1/  1]	Loss 1.657 (1.657)	test_acc   0.19 (  0.19)	test_minacc   0.10 (  0.10)	test_majacc   0.97 (  0.97)	Loss_d 1.657 (1.657)	test_acc_d   0.19 (  0.19)	test_minacc_d   0.10 (  0.10)	test_majacc_d   0.97 (  0.97)	test_corr_d   0.84 (  0.84)
Overall Timing[ 12/  1]	epoch_time 0.0376 (0.0396)	validation_time 0.0005 (0.0009)	train_time 0.0371 (0.0384)
record: (train_acc, test_acc) (0.8593000190854072, 0.3060000240802765)
last accs (train_acc, test_acc) (0.8596000240445137, 0.18800000846385956)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.20it/s] 19%|#9        | 5/26 [00:00<00:00, 21.91it/s] 31%|###       | 8/26 [00:00<00:00, 23.09it/s] 46%|####6     | 12/26 [00:00<00:00, 27.12it/s] 62%|######1   | 16/26 [00:00<00:00, 29.31it/s] 77%|#######6  | 20/26 [00:00<00:00, 30.91it/s] 92%|#########2| 24/26 [00:00<00:00, 32.14it/s]100%|##########| 26/26 [00:00<00:00, 26.70it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 338 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 339 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 340 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 341 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 342 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 343 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 344 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 345 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 346 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 347 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 348 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 349 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 350 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 351 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 352 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 353 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 354 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 355 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 356 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 357 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 358 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 359 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 360 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 361 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 362 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 363 400
penalty weights 0.0
Epoch: [13][  26/  26]	Loss 0.462 (0.425)	train_nll   0.38 (  0.34)	train_penalty   0.04 (  0.02)	weight_norm   0.08 (  0.09)	train_acc   0.84 (  0.86)	train_minacc   0.20 (  0.28)	train_majacc   0.94 (  0.96)	train_corr   0.00 (  0.00)	l1 16.4372 (15.8501)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.36it/s] 23%|##3       | 6/26 [00:00<00:00, 26.38it/s]                                               23%|##3       | 6/26 [00:00<00:00, 26.38it/s] 46%|####6     | 12/26 [00:00<00:00, 38.21it/s] 69%|######9   | 18/26 [00:00<00:00, 43.31it/s]                                                69%|######9   | 18/26 [00:00<00:00, 43.31it/s] 92%|#########2| 24/26 [00:00<00:00, 46.91it/s]100%|##########| 26/26 [00:00<00:00, 38.02it/s]
Test: [   0/  26]	Loss 0.342 (0.342)	test_acc   0.86 (  0.86)	test_minacc   0.16 (  0.16)	test_majacc   0.98 (  0.98)	Loss_d 0.342 (0.342)	test_acc_d   0.86 (  0.86)	test_minacc_d   0.16 (  0.16)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.93 (  0.93)
Test: [  10/  26]	Loss 0.296 (0.340)	test_acc   0.86 (  0.85)	test_minacc   0.12 (  0.13)	test_majacc   0.98 (  0.98)	Loss_d 0.296 (0.340)	test_acc_d   0.86 (  0.85)	test_minacc_d   0.12 (  0.13)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.94 (  0.93)
Test: [  20/  26]	Loss 0.296 (0.336)	test_acc   0.88 (  0.86)	test_minacc   0.18 (  0.14)	test_majacc   0.99 (  0.98)	Loss_d 0.296 (0.336)	test_acc_d   0.88 (  0.86)	test_minacc_d   0.18 (  0.14)	test_majacc_d   0.99 (  0.98)	test_corr_d   0.94 (  0.93)
Test: [  26/  26]	Loss 0.346 (0.332)	test_acc   0.86 (  0.86)	test_minacc   0.09 (  0.15)	test_majacc   0.98 (  0.98)	Loss_d 0.346 (0.332)	test_acc_d   0.86 (  0.86)	test_minacc_d   0.09 (  0.15)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.93 (  0.93)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 67.16it/s]
Test: [  0/  1]	Loss 1.696 (1.696)	test_acc   0.21 (  0.21)	test_minacc   0.12 (  0.12)	test_majacc   0.98 (  0.98)	Loss_d 1.696 (1.696)	test_acc_d   0.21 (  0.21)	test_minacc_d   0.12 (  0.12)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.82 (  0.82)
Test: [  1/  1]	Loss 1.696 (1.696)	test_acc   0.21 (  0.21)	test_minacc   0.12 (  0.12)	test_majacc   0.98 (  0.98)	Loss_d 1.696 (1.696)	test_acc_d   0.21 (  0.21)	test_minacc_d   0.12 (  0.12)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.82 (  0.82)
Overall Timing[ 13/  1]	epoch_time 0.0376 (0.0395)	validation_time 0.0004 (0.0008)	train_time 0.0372 (0.0383)
record: (train_acc, test_acc) (0.8593000190854072, 0.3060000240802765)
last accs (train_acc, test_acc) (0.8572000308632851, 0.20600001513957977)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.99it/s] 19%|#9        | 5/26 [00:00<00:00, 23.38it/s] 35%|###4      | 9/26 [00:00<00:00, 27.32it/s] 50%|#####     | 13/26 [00:00<00:00, 30.35it/s] 65%|######5   | 17/26 [00:00<00:00, 31.88it/s] 81%|########  | 21/26 [00:00<00:00, 32.19it/s] 96%|#########6| 25/26 [00:00<00:00, 32.42it/s]100%|##########| 26/26 [00:00<00:00, 28.21it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 364 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 365 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 366 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 367 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 368 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 369 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 370 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 371 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 372 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 373 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 374 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 375 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 376 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 377 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 378 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 379 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 380 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 381 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 382 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 383 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 384 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 385 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 386 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 387 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 388 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 389 400
penalty weights 0.0
Epoch: [14][  26/  26]	Loss 0.453 (0.417)	train_nll   0.37 (  0.33)	train_penalty   0.04 (  0.02)	weight_norm   0.08 (  0.08)	train_acc   0.82 (  0.86)	train_minacc   0.17 (  0.28)	train_majacc   0.93 (  0.96)	train_corr   0.00 (  0.00)	l1 17.2738 (16.8126)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.71it/s] 27%|##6       | 7/26 [00:00<00:00, 32.33it/s]                                               27%|##6       | 7/26 [00:00<00:00, 32.33it/s] 50%|#####     | 13/26 [00:00<00:00, 39.55it/s] 73%|#######3  | 19/26 [00:00<00:00, 46.26it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 46.26it/s] 96%|#########6| 25/26 [00:00<00:00, 47.10it/s]100%|##########| 26/26 [00:00<00:00, 38.24it/s]
Test: [   0/  26]	Loss 0.342 (0.342)	test_acc   0.85 (  0.85)	test_minacc   0.27 (  0.27)	test_majacc   0.95 (  0.95)	Loss_d 0.342 (0.342)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.27 (  0.27)	test_majacc_d   0.95 (  0.95)	test_corr_d   0.90 (  0.90)
Test: [  10/  26]	Loss 0.279 (0.336)	test_acc   0.86 (  0.85)	test_minacc   0.25 (  0.26)	test_majacc   0.95 (  0.95)	Loss_d 0.279 (0.336)	test_acc_d   0.86 (  0.85)	test_minacc_d   0.25 (  0.26)	test_majacc_d   0.95 (  0.95)	test_corr_d   0.90 (  0.90)
Test: [  20/  26]	Loss 0.279 (0.333)	test_acc   0.87 (  0.85)	test_minacc   0.26 (  0.27)	test_majacc   0.96 (  0.96)	Loss_d 0.279 (0.333)	test_acc_d   0.87 (  0.85)	test_minacc_d   0.26 (  0.27)	test_majacc_d   0.96 (  0.96)	test_corr_d   0.90 (  0.90)
Test: [  26/  26]	Loss 0.345 (0.328)	test_acc   0.84 (  0.85)	test_minacc   0.23 (  0.28)	test_majacc   0.94 (  0.96)	Loss_d 0.345 (0.328)	test_acc_d   0.84 (  0.85)	test_minacc_d   0.23 (  0.28)	test_majacc_d   0.94 (  0.96)	test_corr_d   0.90 (  0.90)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.35it/s]
Test: [  0/  1]	Loss 1.480 (1.480)	test_acc   0.33 (  0.33)	test_minacc   0.26 (  0.26)	test_majacc   0.94 (  0.94)	Loss_d 1.480 (1.480)	test_acc_d   0.33 (  0.33)	test_minacc_d   0.26 (  0.26)	test_majacc_d   0.94 (  0.94)	test_corr_d   0.68 (  0.68)
Test: [  1/  1]	Loss 1.480 (1.480)	test_acc   0.33 (  0.33)	test_minacc   0.26 (  0.26)	test_majacc   0.94 (  0.94)	Loss_d 1.480 (1.480)	test_acc_d   0.33 (  0.33)	test_minacc_d   0.26 (  0.26)	test_majacc_d   0.94 (  0.94)	test_corr_d   0.68 (  0.68)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/34/checkpoints/model_best.pth
Overall Timing[ 14/  1]	epoch_time 0.0372 (0.0393)	validation_time 0.0003 (0.0008)	train_time 0.0368 (0.0382)
record: (train_acc, test_acc) (0.8539000281095505, 0.32500001788139343)
last accs (train_acc, test_acc) (0.8539000281095505, 0.32500001788139343)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.65it/s] 19%|#9        | 5/26 [00:00<00:00, 22.93it/s] 35%|###4      | 9/26 [00:00<00:00, 28.16it/s] 50%|#####     | 13/26 [00:00<00:00, 31.02it/s] 65%|######5   | 17/26 [00:00<00:00, 32.62it/s] 81%|########  | 21/26 [00:00<00:00, 32.52it/s] 96%|#########6| 25/26 [00:00<00:00, 32.81it/s]100%|##########| 26/26 [00:00<00:00, 28.41it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 390 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 391 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 392 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 393 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 394 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 395 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 396 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 397 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 398 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 399 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 400 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 401 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 402 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 403 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 404 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 405 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 406 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 407 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 408 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 409 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 410 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 411 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 412 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 413 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 414 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 415 400
penalty weights 10000.0
Epoch: [15][  26/  26]	Loss 0.003 (0.166)	train_nll   0.60 (  0.41)	train_penalty   0.00 (  0.01)	weight_norm   0.11 (  0.09)	train_acc   0.67 (  0.80)	train_minacc   0.66 (  0.50)	train_majacc   0.67 (  0.85)	train_corr   0.00 (  0.00)	l1 17.3894 (17.4078)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.30it/s] 27%|##6       | 7/26 [00:00<00:00, 34.95it/s]                                               27%|##6       | 7/26 [00:00<00:00, 34.95it/s] 50%|#####     | 13/26 [00:00<00:00, 43.87it/s] 73%|#######3  | 19/26 [00:00<00:00, 46.16it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 46.16it/s] 96%|#########6| 25/26 [00:00<00:00, 50.30it/s]100%|##########| 26/26 [00:00<00:00, 41.33it/s]
Test: [   0/  26]	Loss 0.552 (0.552)	test_acc   0.70 (  0.70)	test_minacc   0.66 (  0.66)	test_majacc   0.70 (  0.70)	Loss_d 0.552 (0.552)	test_acc_d   0.70 (  0.70)	test_minacc_d   0.66 (  0.66)	test_majacc_d   0.70 (  0.70)	test_corr_d   0.42 (  0.42)
Test: [  10/  26]	Loss 0.555 (0.551)	test_acc   0.67 (  0.70)	test_minacc   0.71 (  0.70)	test_majacc   0.67 (  0.70)	Loss_d 0.555 (0.551)	test_acc_d   0.67 (  0.70)	test_minacc_d   0.71 (  0.70)	test_majacc_d   0.67 (  0.70)	test_corr_d   0.37 (  0.41)
Test: [  20/  26]	Loss 0.567 (0.554)	test_acc   0.68 (  0.70)	test_minacc   0.70 (  0.71)	test_majacc   0.68 (  0.70)	Loss_d 0.567 (0.554)	test_acc_d   0.68 (  0.70)	test_minacc_d   0.70 (  0.71)	test_majacc_d   0.68 (  0.70)	test_corr_d   0.38 (  0.41)
Test: [  26/  26]	Loss 0.587 (0.555)	test_acc   0.68 (  0.70)	test_minacc   0.66 (  0.71)	test_majacc   0.69 (  0.70)	Loss_d 0.587 (0.555)	test_acc_d   0.68 (  0.70)	test_minacc_d   0.66 (  0.71)	test_majacc_d   0.69 (  0.70)	test_corr_d   0.44 (  0.41)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 64.34it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.61 (  0.61)	test_minacc   0.61 (  0.61)	test_majacc   0.67 (  0.67)	Loss_d 0.693 (0.693)	test_acc_d   0.61 (  0.61)	test_minacc_d   0.61 (  0.61)	test_majacc_d   0.67 (  0.67)	test_corr_d  -0.12 ( -0.12)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.61 (  0.61)	test_minacc   0.61 (  0.61)	test_majacc   0.67 (  0.67)	Loss_d 0.693 (0.693)	test_acc_d   0.61 (  0.61)	test_minacc_d   0.61 (  0.61)	test_majacc_d   0.67 (  0.67)	test_corr_d  -0.12 ( -0.12)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/34/checkpoints/model_best.pth
Overall Timing[ 15/  1]	epoch_time 0.0379 (0.0392)	validation_time 0.0003 (0.0008)	train_time 0.0375 (0.0382)
record: (train_acc, test_acc) (0.7013000339865685, 0.6130000352859497)
last accs (train_acc, test_acc) (0.7013000339865685, 0.6130000352859497)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.21it/s] 19%|#9        | 5/26 [00:00<00:00, 23.73it/s] 35%|###4      | 9/26 [00:00<00:00, 28.74it/s] 50%|#####     | 13/26 [00:00<00:00, 30.89it/s] 65%|######5   | 17/26 [00:00<00:00, 32.33it/s] 81%|########  | 21/26 [00:00<00:00, 33.07it/s] 96%|#########6| 25/26 [00:00<00:00, 33.78it/s]100%|##########| 26/26 [00:00<00:00, 28.94it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 416 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 417 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 418 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 419 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 420 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 421 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 422 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 423 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 424 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 425 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 426 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 427 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 428 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 429 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 430 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 431 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 432 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 433 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 434 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 435 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 436 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 437 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 438 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 439 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 440 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 441 400
penalty weights 10000.0
Epoch: [16][  26/  26]	Loss 0.000 (0.001)	train_nll   0.61 (  0.60)	train_penalty   0.00 (  0.00)	weight_norm   0.14 (  0.14)	train_acc   0.67 (  0.66)	train_minacc   0.57 (  0.70)	train_majacc   0.69 (  0.65)	train_corr   0.00 (  0.00)	l1 17.1433 (17.2373)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 18.99it/s] 31%|###       | 8/26 [00:00<00:00, 39.81it/s]                                               31%|###       | 8/26 [00:00<00:00, 39.81it/s] 50%|#####     | 13/26 [00:00<00:00, 42.00it/s] 73%|#######3  | 19/26 [00:00<00:00, 47.69it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 47.69it/s] 96%|#########6| 25/26 [00:00<00:00, 48.48it/s]100%|##########| 26/26 [00:00<00:00, 41.21it/s]
Test: [   0/  26]	Loss 0.630 (0.630)	test_acc   0.65 (  0.65)	test_minacc   0.68 (  0.68)	test_majacc   0.64 (  0.64)	Loss_d 0.630 (0.630)	test_acc_d   0.65 (  0.65)	test_minacc_d   0.68 (  0.68)	test_majacc_d   0.64 (  0.64)	test_corr_d   0.25 (  0.25)
Test: [  10/  26]	Loss 0.611 (0.613)	test_acc   0.65 (  0.66)	test_minacc   0.69 (  0.67)	test_majacc   0.64 (  0.66)	Loss_d 0.611 (0.613)	test_acc_d   0.65 (  0.66)	test_minacc_d   0.69 (  0.67)	test_majacc_d   0.64 (  0.66)	test_corr_d   0.25 (  0.28)
Test: [  20/  26]	Loss 0.625 (0.615)	test_acc   0.63 (  0.65)	test_minacc   0.72 (  0.68)	test_majacc   0.61 (  0.65)	Loss_d 0.625 (0.615)	test_acc_d   0.63 (  0.65)	test_minacc_d   0.72 (  0.68)	test_majacc_d   0.61 (  0.65)	test_corr_d   0.25 (  0.27)
Test: [  26/  26]	Loss 0.614 (0.615)	test_acc   0.67 (  0.65)	test_minacc   0.57 (  0.68)	test_majacc   0.69 (  0.65)	Loss_d 0.614 (0.615)	test_acc_d   0.67 (  0.65)	test_minacc_d   0.57 (  0.68)	test_majacc_d   0.69 (  0.65)	test_corr_d   0.33 (  0.28)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.69it/s]
Test: [  0/  1]	Loss 0.661 (0.661)	test_acc   0.62 (  0.62)	test_minacc   0.62 (  0.62)	test_majacc   0.61 (  0.61)	Loss_d 0.661 (0.661)	test_acc_d   0.62 (  0.62)	test_minacc_d   0.62 (  0.62)	test_majacc_d   0.61 (  0.61)	test_corr_d  -0.20 ( -0.20)
Test: [  1/  1]	Loss 0.661 (0.661)	test_acc   0.62 (  0.62)	test_minacc   0.62 (  0.62)	test_majacc   0.61 (  0.61)	Loss_d 0.661 (0.661)	test_acc_d   0.62 (  0.62)	test_minacc_d   0.62 (  0.62)	test_majacc_d   0.61 (  0.61)	test_corr_d  -0.20 ( -0.20)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/34/checkpoints/model_best.pth
Overall Timing[ 16/  1]	epoch_time 0.0365 (0.0391)	validation_time 0.0004 (0.0007)	train_time 0.0362 (0.0381)
record: (train_acc, test_acc) (0.6545000178813934, 0.6200000047683716)
last accs (train_acc, test_acc) (0.6545000178813934, 0.6200000047683716)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.45it/s] 15%|#5        | 4/26 [00:00<00:01, 18.43it/s] 31%|###       | 8/26 [00:00<00:00, 25.38it/s] 46%|####6     | 12/26 [00:00<00:00, 29.33it/s] 62%|######1   | 16/26 [00:00<00:00, 30.34it/s] 77%|#######6  | 20/26 [00:00<00:00, 31.01it/s] 92%|#########2| 24/26 [00:00<00:00, 32.14it/s]100%|##########| 26/26 [00:00<00:00, 27.25it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 442 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 443 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 444 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 445 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 446 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 447 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 448 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 449 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 450 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 451 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 452 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 453 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 454 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 455 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 456 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 457 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 458 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 459 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 460 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 461 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 462 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 463 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 464 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 465 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 466 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 467 400
penalty weights 10000.0
Epoch: [17][  26/  26]	Loss 0.000 (0.000)	train_nll   0.62 (  0.63)	train_penalty   0.00 (  0.00)	weight_norm   0.15 (  0.15)	train_acc   0.66 (  0.64)	train_minacc   0.57 (  0.68)	train_majacc   0.68 (  0.63)	train_corr   0.00 (  0.00)	l1 17.0860 (17.1200)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.67it/s] 19%|#9        | 5/26 [00:00<00:00, 25.76it/s] 38%|###8      | 10/26 [00:00<00:00, 35.09it/s]                                                38%|###8      | 10/26 [00:00<00:00, 35.09it/s] 62%|######1   | 16/26 [00:00<00:00, 40.89it/s]                                                62%|######1   | 16/26 [00:00<00:00, 40.89it/s] 85%|########4 | 22/26 [00:00<00:00, 46.33it/s]100%|##########| 26/26 [00:00<00:00, 37.54it/s]
Test: [   0/  26]	Loss 0.638 (0.638)	test_acc   0.63 (  0.63)	test_minacc   0.66 (  0.66)	test_majacc   0.63 (  0.63)	Loss_d 0.638 (0.638)	test_acc_d   0.63 (  0.63)	test_minacc_d   0.66 (  0.66)	test_majacc_d   0.63 (  0.63)	test_corr_d   0.22 (  0.22)
Test: [  10/  26]	Loss 0.621 (0.623)	test_acc   0.65 (  0.65)	test_minacc   0.69 (  0.65)	test_majacc   0.64 (  0.65)	Loss_d 0.621 (0.623)	test_acc_d   0.65 (  0.65)	test_minacc_d   0.69 (  0.65)	test_majacc_d   0.64 (  0.65)	test_corr_d   0.23 (  0.26)
Test: [  20/  26]	Loss 0.637 (0.624)	test_acc   0.63 (  0.65)	test_minacc   0.68 (  0.67)	test_majacc   0.62 (  0.64)	Loss_d 0.637 (0.624)	test_acc_d   0.63 (  0.65)	test_minacc_d   0.68 (  0.67)	test_majacc_d   0.62 (  0.64)	test_corr_d   0.22 (  0.25)
Test: [  26/  26]	Loss 0.623 (0.625)	test_acc   0.66 (  0.65)	test_minacc   0.57 (  0.67)	test_majacc   0.67 (  0.64)	Loss_d 0.623 (0.625)	test_acc_d   0.66 (  0.65)	test_minacc_d   0.57 (  0.67)	test_majacc_d   0.67 (  0.64)	test_corr_d   0.30 (  0.25)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.96it/s]
Test: [  0/  1]	Loss 0.662 (0.662)	test_acc   0.61 (  0.61)	test_minacc   0.62 (  0.62)	test_majacc   0.58 (  0.58)	Loss_d 0.662 (0.662)	test_acc_d   0.61 (  0.61)	test_minacc_d   0.62 (  0.62)	test_majacc_d   0.58 (  0.58)	test_corr_d  -0.20 ( -0.20)
Test: [  1/  1]	Loss 0.662 (0.662)	test_acc   0.61 (  0.61)	test_minacc   0.62 (  0.62)	test_majacc   0.58 (  0.58)	Loss_d 0.662 (0.662)	test_acc_d   0.61 (  0.61)	test_minacc_d   0.62 (  0.62)	test_majacc_d   0.58 (  0.58)	test_corr_d  -0.20 ( -0.20)
Overall Timing[ 17/  1]	epoch_time 0.0379 (0.0390)	validation_time 0.0004 (0.0007)	train_time 0.0375 (0.0380)
record: (train_acc, test_acc) (0.6545000178813934, 0.6200000047683716)
last accs (train_acc, test_acc) (0.645700016617775, 0.612000048160553)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.96it/s] 19%|#9        | 5/26 [00:00<00:01, 20.21it/s] 35%|###4      | 9/26 [00:00<00:00, 25.82it/s] 50%|#####     | 13/26 [00:00<00:00, 29.01it/s] 65%|######5   | 17/26 [00:00<00:00, 30.95it/s] 81%|########  | 21/26 [00:00<00:00, 32.33it/s] 96%|#########6| 25/26 [00:00<00:00, 32.99it/s]100%|##########| 26/26 [00:00<00:00, 27.43it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 468 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 469 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 470 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 471 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 472 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 473 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 474 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 475 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 476 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 477 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 478 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 479 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 480 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 481 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 482 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 483 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 484 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 485 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 486 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 487 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 488 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 489 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 490 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 491 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 492 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 493 400
penalty weights 10000.0
Epoch: [18][  26/  26]	Loss 0.000 (0.000)	train_nll   0.62 (  0.63)	train_penalty   0.00 (  0.00)	weight_norm   0.15 (  0.15)	train_acc   0.66 (  0.63)	train_minacc   0.57 (  0.67)	train_majacc   0.67 (  0.63)	train_corr   0.00 (  0.00)	l1 17.0562 (17.0836)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:00, 26.18it/s] 35%|###4      | 9/26 [00:00<00:00, 38.97it/s]                                               35%|###4      | 9/26 [00:00<00:00, 38.97it/s] 58%|#####7    | 15/26 [00:00<00:00, 47.03it/s]                                                58%|#####7    | 15/26 [00:00<00:00, 47.03it/s] 81%|########  | 21/26 [00:00<00:00, 47.79it/s]100%|##########| 26/26 [00:00<00:00, 42.61it/s]
Test: [   0/  26]	Loss 0.637 (0.637)	test_acc   0.64 (  0.64)	test_minacc   0.66 (  0.66)	test_majacc   0.63 (  0.63)	Loss_d 0.637 (0.637)	test_acc_d   0.64 (  0.64)	test_minacc_d   0.66 (  0.66)	test_majacc_d   0.63 (  0.63)	test_corr_d   0.22 (  0.22)
Test: [  10/  26]	Loss 0.623 (0.624)	test_acc   0.66 (  0.65)	test_minacc   0.69 (  0.64)	test_majacc   0.65 (  0.65)	Loss_d 0.623 (0.624)	test_acc_d   0.66 (  0.65)	test_minacc_d   0.69 (  0.64)	test_majacc_d   0.65 (  0.65)	test_corr_d   0.23 (  0.26)
Test: [  20/  26]	Loss 0.639 (0.625)	test_acc   0.63 (  0.65)	test_minacc   0.68 (  0.66)	test_majacc   0.62 (  0.65)	Loss_d 0.639 (0.625)	test_acc_d   0.63 (  0.65)	test_minacc_d   0.68 (  0.66)	test_majacc_d   0.62 (  0.65)	test_corr_d   0.22 (  0.25)
Test: [  26/  26]	Loss 0.625 (0.626)	test_acc   0.66 (  0.65)	test_minacc   0.57 (  0.66)	test_majacc   0.67 (  0.65)	Loss_d 0.625 (0.626)	test_acc_d   0.66 (  0.65)	test_minacc_d   0.57 (  0.66)	test_majacc_d   0.67 (  0.65)	test_corr_d   0.30 (  0.25)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.08it/s]
Test: [  0/  1]	Loss 0.664 (0.664)	test_acc   0.61 (  0.61)	test_minacc   0.61 (  0.61)	test_majacc   0.59 (  0.59)	Loss_d 0.664 (0.664)	test_acc_d   0.61 (  0.61)	test_minacc_d   0.61 (  0.61)	test_majacc_d   0.59 (  0.59)	test_corr_d  -0.18 ( -0.18)
Test: [  1/  1]	Loss 0.664 (0.664)	test_acc   0.61 (  0.61)	test_minacc   0.61 (  0.61)	test_majacc   0.59 (  0.59)	Loss_d 0.664 (0.664)	test_acc_d   0.61 (  0.61)	test_minacc_d   0.61 (  0.61)	test_majacc_d   0.59 (  0.59)	test_corr_d  -0.18 ( -0.18)
Overall Timing[ 18/  1]	epoch_time 0.0364 (0.0389)	validation_time 0.0004 (0.0007)	train_time 0.0360 (0.0379)
record: (train_acc, test_acc) (0.6545000178813934, 0.6200000047683716)
last accs (train_acc, test_acc) (0.6479000188112259, 0.6080000400543213)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.82it/s] 19%|#9        | 5/26 [00:00<00:00, 22.01it/s] 35%|###4      | 9/26 [00:00<00:00, 27.05it/s] 50%|#####     | 13/26 [00:00<00:00, 28.79it/s] 65%|######5   | 17/26 [00:00<00:00, 30.68it/s] 81%|########  | 21/26 [00:00<00:00, 31.94it/s] 96%|#########6| 25/26 [00:00<00:00, 32.73it/s]100%|##########| 26/26 [00:00<00:00, 27.41it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 494 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 495 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 496 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 497 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 498 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 499 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 500 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 501 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 502 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 503 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 504 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 505 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 506 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 507 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 508 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 509 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 510 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 511 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 512 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 513 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 514 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 515 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 516 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 517 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 518 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 519 400
penalty weights 10000.0
Epoch: [19][  26/  26]	Loss 0.000 (0.000)	train_nll   0.63 (  0.64)	train_penalty   0.00 (  0.00)	weight_norm   0.15 (  0.15)	train_acc   0.66 (  0.63)	train_minacc   0.57 (  0.66)	train_majacc   0.68 (  0.63)	train_corr   0.00 (  0.00)	l1 17.0283 (17.0605)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 14.01it/s] 31%|###       | 8/26 [00:00<00:00, 36.49it/s]                                               31%|###       | 8/26 [00:00<00:00, 36.49it/s] 54%|#####3    | 14/26 [00:00<00:00, 41.22it/s] 77%|#######6  | 20/26 [00:00<00:00, 47.64it/s]                                                77%|#######6  | 20/26 [00:00<00:00, 47.64it/s]100%|##########| 26/26 [00:00<00:00, 51.06it/s]100%|##########| 26/26 [00:00<00:00, 40.41it/s]
Test: [   0/  26]	Loss 0.636 (0.636)	test_acc   0.64 (  0.64)	test_minacc   0.66 (  0.66)	test_majacc   0.63 (  0.63)	Loss_d 0.636 (0.636)	test_acc_d   0.64 (  0.64)	test_minacc_d   0.66 (  0.66)	test_majacc_d   0.63 (  0.63)	test_corr_d   0.22 (  0.22)
Test: [  10/  26]	Loss 0.623 (0.624)	test_acc   0.67 (  0.65)	test_minacc   0.73 (  0.64)	test_majacc   0.67 (  0.66)	Loss_d 0.623 (0.624)	test_acc_d   0.67 (  0.65)	test_minacc_d   0.73 (  0.64)	test_majacc_d   0.67 (  0.66)	test_corr_d   0.24 (  0.26)
Test: [  20/  26]	Loss 0.639 (0.625)	test_acc   0.63 (  0.66)	test_minacc   0.68 (  0.66)	test_majacc   0.62 (  0.66)	Loss_d 0.639 (0.625)	test_acc_d   0.63 (  0.66)	test_minacc_d   0.68 (  0.66)	test_majacc_d   0.62 (  0.66)	test_corr_d   0.22 (  0.25)
Test: [  26/  26]	Loss 0.626 (0.625)	test_acc   0.66 (  0.65)	test_minacc   0.57 (  0.66)	test_majacc   0.68 (  0.65)	Loss_d 0.626 (0.625)	test_acc_d   0.66 (  0.65)	test_minacc_d   0.57 (  0.66)	test_majacc_d   0.68 (  0.65)	test_corr_d   0.29 (  0.25)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.90it/s]
Test: [  0/  1]	Loss 0.666 (0.666)	test_acc   0.60 (  0.60)	test_minacc   0.61 (  0.61)	test_majacc   0.59 (  0.59)	Loss_d 0.666 (0.666)	test_acc_d   0.60 (  0.60)	test_minacc_d   0.61 (  0.61)	test_majacc_d   0.59 (  0.59)	test_corr_d  -0.18 ( -0.18)
Test: [  1/  1]	Loss 0.666 (0.666)	test_acc   0.60 (  0.60)	test_minacc   0.61 (  0.61)	test_majacc   0.59 (  0.59)	Loss_d 0.666 (0.666)	test_acc_d   0.60 (  0.60)	test_minacc_d   0.61 (  0.61)	test_majacc_d   0.59 (  0.59)	test_corr_d  -0.18 ( -0.18)
Overall Timing[ 19/  1]	epoch_time 0.0352 (0.0387)	validation_time 0.0003 (0.0007)	train_time 0.0349 (0.0378)
record: (train_acc, test_acc) (0.6545000178813934, 0.6200000047683716)
last accs (train_acc, test_acc) (0.6537000244855881, 0.6040000319480896)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 15.87it/s] 23%|##3       | 6/26 [00:00<00:00, 26.24it/s] 38%|###8      | 10/26 [00:00<00:00, 29.58it/s] 54%|#####3    | 14/26 [00:00<00:00, 31.13it/s] 69%|######9   | 18/26 [00:00<00:00, 32.35it/s] 85%|########4 | 22/26 [00:00<00:00, 32.91it/s]100%|##########| 26/26 [00:00<00:00, 34.03it/s]100%|##########| 26/26 [00:00<00:00, 29.41it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 520 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 521 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 522 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 523 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 524 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 525 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 526 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 527 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 528 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 529 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 530 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 531 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 532 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 533 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 534 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 535 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 536 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 537 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 538 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 539 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 540 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 541 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 542 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 543 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 544 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 545 400
penalty weights 10000.0
Epoch: [20][  26/  26]	Loss 0.000 (0.000)	train_nll   0.63 (  0.64)	train_penalty   0.00 (  0.00)	weight_norm   0.15 (  0.15)	train_acc   0.66 (  0.64)	train_minacc   0.57 (  0.66)	train_majacc   0.67 (  0.63)	train_corr   0.00 (  0.00)	l1 17.0005 (17.0387)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.62it/s] 23%|##3       | 6/26 [00:00<00:00, 31.81it/s]                                               23%|##3       | 6/26 [00:00<00:00, 31.81it/s] 42%|####2     | 11/26 [00:00<00:00, 39.59it/s] 65%|######5   | 17/26 [00:00<00:00, 46.48it/s]                                                65%|######5   | 17/26 [00:00<00:00, 46.48it/s] 85%|########4 | 22/26 [00:00<00:00, 46.08it/s]100%|##########| 26/26 [00:00<00:00, 40.50it/s]
Test: [   0/  26]	Loss 0.639 (0.639)	test_acc   0.64 (  0.64)	test_minacc   0.71 (  0.71)	test_majacc   0.63 (  0.63)	Loss_d 0.639 (0.639)	test_acc_d   0.64 (  0.64)	test_minacc_d   0.71 (  0.71)	test_majacc_d   0.63 (  0.63)	test_corr_d   0.21 (  0.21)
Test: [  10/  26]	Loss 0.625 (0.628)	test_acc   0.67 (  0.66)	test_minacc   0.69 (  0.64)	test_majacc   0.67 (  0.66)	Loss_d 0.625 (0.628)	test_acc_d   0.67 (  0.66)	test_minacc_d   0.69 (  0.64)	test_majacc_d   0.67 (  0.66)	test_corr_d   0.23 (  0.25)
Test: [  20/  26]	Loss 0.642 (0.628)	test_acc   0.63 (  0.66)	test_minacc   0.70 (  0.66)	test_majacc   0.62 (  0.66)	Loss_d 0.642 (0.628)	test_acc_d   0.63 (  0.66)	test_minacc_d   0.70 (  0.66)	test_majacc_d   0.62 (  0.66)	test_corr_d   0.21 (  0.24)
Test: [  26/  26]	Loss 0.632 (0.629)	test_acc   0.66 (  0.66)	test_minacc   0.57 (  0.66)	test_majacc   0.67 (  0.65)	Loss_d 0.632 (0.629)	test_acc_d   0.66 (  0.66)	test_minacc_d   0.57 (  0.66)	test_majacc_d   0.67 (  0.65)	test_corr_d   0.28 (  0.24)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.05it/s]
Test: [  0/  1]	Loss 0.664 (0.664)	test_acc   0.61 (  0.61)	test_minacc   0.61 (  0.61)	test_majacc   0.60 (  0.60)	Loss_d 0.664 (0.664)	test_acc_d   0.61 (  0.61)	test_minacc_d   0.61 (  0.61)	test_majacc_d   0.60 (  0.60)	test_corr_d  -0.19 ( -0.19)
Test: [  1/  1]	Loss 0.664 (0.664)	test_acc   0.61 (  0.61)	test_minacc   0.61 (  0.61)	test_majacc   0.60 (  0.60)	Loss_d 0.664 (0.664)	test_acc_d   0.61 (  0.61)	test_minacc_d   0.61 (  0.61)	test_majacc_d   0.60 (  0.60)	test_corr_d  -0.19 ( -0.19)
Overall Timing[ 20/  1]	epoch_time 0.0367 (0.0386)	validation_time 0.0003 (0.0007)	train_time 0.0364 (0.0377)
record: (train_acc, test_acc) (0.6545000178813934, 0.6200000047683716)
last accs (train_acc, test_acc) (0.6551000216603279, 0.6080000400543213)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.39it/s] 19%|#9        | 5/26 [00:00<00:00, 21.53it/s] 35%|###4      | 9/26 [00:00<00:00, 27.18it/s] 50%|#####     | 13/26 [00:00<00:00, 30.23it/s] 65%|######5   | 17/26 [00:00<00:00, 31.77it/s] 81%|########  | 21/26 [00:00<00:00, 32.23it/s] 96%|#########6| 25/26 [00:00<00:00, 32.80it/s]100%|##########| 26/26 [00:00<00:00, 27.99it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 546 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 547 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 548 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 549 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 550 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 551 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 552 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 553 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 554 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 555 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 556 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 557 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 558 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 559 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 560 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 561 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 562 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 563 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 564 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 565 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 566 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 567 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 568 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 569 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 570 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 571 400
penalty weights 10000.0
Epoch: [21][  26/  26]	Loss 0.000 (0.000)	train_nll   0.64 (  0.64)	train_penalty   0.00 (  0.00)	weight_norm   0.15 (  0.15)	train_acc   0.64 (  0.63)	train_minacc   0.57 (  0.66)	train_majacc   0.65 (  0.63)	train_corr   0.00 (  0.00)	l1 16.9783 (17.0061)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 19.82it/s] 31%|###       | 8/26 [00:00<00:00, 42.81it/s]                                               31%|###       | 8/26 [00:00<00:00, 42.81it/s] 50%|#####     | 13/26 [00:00<00:00, 44.77it/s] 73%|#######3  | 19/26 [00:00<00:00, 48.29it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 48.29it/s] 96%|#########6| 25/26 [00:00<00:00, 49.69it/s]100%|##########| 26/26 [00:00<00:00, 42.52it/s]
Test: [   0/  26]	Loss 0.647 (0.647)	test_acc   0.62 (  0.62)	test_minacc   0.71 (  0.71)	test_majacc   0.61 (  0.61)	Loss_d 0.647 (0.647)	test_acc_d   0.62 (  0.62)	test_minacc_d   0.71 (  0.71)	test_majacc_d   0.61 (  0.61)	test_corr_d   0.18 (  0.18)
Test: [  10/  26]	Loss 0.634 (0.637)	test_acc   0.66 (  0.64)	test_minacc   0.69 (  0.64)	test_majacc   0.65 (  0.65)	Loss_d 0.634 (0.637)	test_acc_d   0.66 (  0.64)	test_minacc_d   0.69 (  0.64)	test_majacc_d   0.65 (  0.65)	test_corr_d   0.21 (  0.22)
Test: [  20/  26]	Loss 0.651 (0.636)	test_acc   0.62 (  0.64)	test_minacc   0.70 (  0.66)	test_majacc   0.60 (  0.64)	Loss_d 0.651 (0.636)	test_acc_d   0.62 (  0.64)	test_minacc_d   0.70 (  0.66)	test_majacc_d   0.60 (  0.64)	test_corr_d   0.18 (  0.22)
Test: [  26/  26]	Loss 0.640 (0.637)	test_acc   0.64 (  0.64)	test_minacc   0.57 (  0.66)	test_majacc   0.65 (  0.64)	Loss_d 0.640 (0.637)	test_acc_d   0.64 (  0.64)	test_minacc_d   0.57 (  0.66)	test_majacc_d   0.65 (  0.64)	test_corr_d   0.25 (  0.22)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.66it/s]
Test: [  0/  1]	Loss 0.667 (0.667)	test_acc   0.60 (  0.60)	test_minacc   0.61 (  0.61)	test_majacc   0.57 (  0.57)	Loss_d 0.667 (0.667)	test_acc_d   0.60 (  0.60)	test_minacc_d   0.61 (  0.61)	test_majacc_d   0.57 (  0.57)	test_corr_d  -0.18 ( -0.18)
Test: [  1/  1]	Loss 0.667 (0.667)	test_acc   0.60 (  0.60)	test_minacc   0.61 (  0.61)	test_majacc   0.57 (  0.57)	Loss_d 0.667 (0.667)	test_acc_d   0.60 (  0.60)	test_minacc_d   0.61 (  0.61)	test_majacc_d   0.57 (  0.57)	test_corr_d  -0.18 ( -0.18)
Overall Timing[ 21/  1]	epoch_time 0.0372 (0.0385)	validation_time 0.0004 (0.0007)	train_time 0.0368 (0.0377)
record: (train_acc, test_acc) (0.6545000178813934, 0.6200000047683716)
last accs (train_acc, test_acc) (0.6410000173449516, 0.6020000576972961)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.91it/s] 19%|#9        | 5/26 [00:00<00:00, 24.22it/s] 35%|###4      | 9/26 [00:00<00:00, 28.54it/s] 50%|#####     | 13/26 [00:00<00:00, 30.83it/s] 65%|######5   | 17/26 [00:00<00:00, 32.17it/s] 81%|########  | 21/26 [00:00<00:00, 33.05it/s] 96%|#########6| 25/26 [00:00<00:00, 33.66it/s]100%|##########| 26/26 [00:00<00:00, 29.14it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 572 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 573 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 574 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 575 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 576 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 577 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 578 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 579 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 580 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 581 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 582 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 583 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 584 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 585 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 586 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 587 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 588 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 589 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 590 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 591 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 592 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 593 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 594 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 595 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 596 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 597 400
penalty weights 10000.0
Epoch: [22][  26/  26]	Loss 0.000 (0.000)	train_nll   0.65 (  0.64)	train_penalty   0.00 (  0.00)	weight_norm   0.15 (  0.15)	train_acc   0.63 (  0.63)	train_minacc   0.60 (  0.66)	train_majacc   0.64 (  0.62)	train_corr   0.00 (  0.00)	l1 16.9611 (16.9723)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.20it/s] 27%|##6       | 7/26 [00:00<00:00, 37.20it/s]                                               27%|##6       | 7/26 [00:00<00:00, 37.20it/s] 50%|#####     | 13/26 [00:00<00:00, 42.93it/s] 73%|#######3  | 19/26 [00:00<00:00, 48.85it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 48.85it/s] 96%|#########6| 25/26 [00:00<00:00, 49.16it/s]100%|##########| 26/26 [00:00<00:00, 41.69it/s]
Test: [   0/  26]	Loss 0.656 (0.656)	test_acc   0.62 (  0.62)	test_minacc   0.71 (  0.71)	test_majacc   0.60 (  0.60)	Loss_d 0.656 (0.656)	test_acc_d   0.62 (  0.62)	test_minacc_d   0.71 (  0.71)	test_majacc_d   0.60 (  0.60)	test_corr_d   0.15 (  0.15)
Test: [  10/  26]	Loss 0.641 (0.648)	test_acc   0.64 (  0.63)	test_minacc   0.65 (  0.64)	test_majacc   0.64 (  0.63)	Loss_d 0.641 (0.648)	test_acc_d   0.64 (  0.63)	test_minacc_d   0.65 (  0.64)	test_majacc_d   0.64 (  0.63)	test_corr_d   0.18 (  0.19)
Test: [  20/  26]	Loss 0.658 (0.646)	test_acc   0.61 (  0.63)	test_minacc   0.66 (  0.66)	test_majacc   0.60 (  0.63)	Loss_d 0.658 (0.646)	test_acc_d   0.61 (  0.63)	test_minacc_d   0.66 (  0.66)	test_majacc_d   0.60 (  0.63)	test_corr_d   0.16 (  0.19)
Test: [  26/  26]	Loss 0.650 (0.647)	test_acc   0.64 (  0.63)	test_minacc   0.60 (  0.66)	test_majacc   0.64 (  0.62)	Loss_d 0.650 (0.647)	test_acc_d   0.64 (  0.63)	test_minacc_d   0.60 (  0.66)	test_majacc_d   0.64 (  0.62)	test_corr_d   0.22 (  0.19)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 64.06it/s]
Test: [  0/  1]	Loss 0.667 (0.667)	test_acc   0.60 (  0.60)	test_minacc   0.60 (  0.60)	test_majacc   0.57 (  0.57)	Loss_d 0.667 (0.667)	test_acc_d   0.60 (  0.60)	test_minacc_d   0.60 (  0.60)	test_majacc_d   0.57 (  0.57)	test_corr_d  -0.18 ( -0.18)
Test: [  1/  1]	Loss 0.667 (0.667)	test_acc   0.60 (  0.60)	test_minacc   0.60 (  0.60)	test_majacc   0.57 (  0.57)	Loss_d 0.667 (0.667)	test_acc_d   0.60 (  0.60)	test_minacc_d   0.60 (  0.60)	test_majacc_d   0.57 (  0.57)	test_corr_d  -0.18 ( -0.18)
Overall Timing[ 22/  1]	epoch_time 0.0356 (0.0384)	validation_time 0.0004 (0.0006)	train_time 0.0352 (0.0376)
record: (train_acc, test_acc) (0.6545000178813934, 0.6200000047683716)
last accs (train_acc, test_acc) (0.6272000121474266, 0.6000000238418579)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.45it/s] 15%|#5        | 4/26 [00:00<00:01, 17.00it/s] 31%|###       | 8/26 [00:00<00:00, 24.24it/s] 46%|####6     | 12/26 [00:00<00:00, 27.70it/s] 62%|######1   | 16/26 [00:00<00:00, 29.78it/s] 77%|#######6  | 20/26 [00:00<00:00, 30.99it/s] 92%|#########2| 24/26 [00:00<00:00, 31.95it/s]100%|##########| 26/26 [00:00<00:00, 26.71it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 598 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 599 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 600 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 601 400
penalty weights 10000.0
args.step pgd_anneal_iters 601 600
dim_v 512
rho, theta 377 tensor(-0.0177, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 602 400
penalty weights 10000.0
args.step pgd_anneal_iters 602 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 603 400
penalty weights 10000.0
args.step pgd_anneal_iters 603 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 604 400
penalty weights 10000.0
args.step pgd_anneal_iters 604 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 605 400
penalty weights 10000.0
args.step pgd_anneal_iters 605 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 606 400
penalty weights 10000.0
args.step pgd_anneal_iters 606 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 607 400
penalty weights 10000.0
args.step pgd_anneal_iters 607 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 608 400
penalty weights 10000.0
args.step pgd_anneal_iters 608 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 609 400
penalty weights 10000.0
args.step pgd_anneal_iters 609 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 610 400
penalty weights 10000.0
args.step pgd_anneal_iters 610 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 611 400
penalty weights 10000.0
args.step pgd_anneal_iters 611 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 612 400
penalty weights 10000.0
args.step pgd_anneal_iters 612 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 613 400
penalty weights 10000.0
args.step pgd_anneal_iters 613 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 614 400
penalty weights 10000.0
args.step pgd_anneal_iters 614 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 615 400
penalty weights 10000.0
args.step pgd_anneal_iters 615 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 616 400
penalty weights 10000.0
args.step pgd_anneal_iters 616 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 617 400
penalty weights 10000.0
args.step pgd_anneal_iters 617 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 618 400
penalty weights 10000.0
args.step pgd_anneal_iters 618 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 619 400
penalty weights 10000.0
args.step pgd_anneal_iters 619 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 620 400
penalty weights 10000.0
args.step pgd_anneal_iters 620 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 621 400
penalty weights 10000.0
args.step pgd_anneal_iters 621 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 622 400
penalty weights 10000.0
args.step pgd_anneal_iters 622 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 623 400
penalty weights 10000.0
args.step pgd_anneal_iters 623 600
dim_v 512
Epoch: [23][  26/  26]	Loss 0.001 (0.007)	train_nll   0.70 (  0.70)	train_penalty   0.00 (  0.01)	weight_norm   0.17 (  0.16)	train_acc   0.49 (  0.53)	train_minacc   0.46 (  0.55)	train_majacc   0.49 (  0.53)	train_corr   0.00 (  0.00)	l1 14.7294 (15.1219)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 19.25it/s] 31%|###       | 8/26 [00:00<00:00, 40.90it/s]                                               31%|###       | 8/26 [00:00<00:00, 40.90it/s] 50%|#####     | 13/26 [00:00<00:00, 42.95it/s] 73%|#######3  | 19/26 [00:00<00:00, 48.68it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 48.68it/s] 96%|#########6| 25/26 [00:00<00:00, 48.51it/s]100%|##########| 26/26 [00:00<00:00, 41.86it/s]
Test: [   0/  26]	Loss 0.701 (0.701)	test_acc   0.49 (  0.49)	test_minacc   0.43 (  0.43)	test_majacc   0.50 (  0.50)	Loss_d 0.701 (0.701)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.43 (  0.43)	test_majacc_d   0.50 (  0.50)	test_corr_d   0.20 (  0.20)
Test: [  10/  26]	Loss 0.675 (0.695)	test_acc   0.57 (  0.51)	test_minacc   0.54 (  0.49)	test_majacc   0.57 (  0.51)	Loss_d 0.675 (0.695)	test_acc_d   0.57 (  0.51)	test_minacc_d   0.54 (  0.49)	test_majacc_d   0.57 (  0.51)	test_corr_d   0.26 (  0.25)
Test: [  20/  26]	Loss 0.695 (0.699)	test_acc   0.51 (  0.50)	test_minacc   0.54 (  0.49)	test_majacc   0.51 (  0.50)	Loss_d 0.695 (0.699)	test_acc_d   0.51 (  0.50)	test_minacc_d   0.54 (  0.49)	test_majacc_d   0.51 (  0.50)	test_corr_d   0.21 (  0.23)
Test: [  26/  26]	Loss 0.703 (0.698)	test_acc   0.49 (  0.50)	test_minacc   0.46 (  0.50)	test_majacc   0.49 (  0.50)	Loss_d 0.703 (0.698)	test_acc_d   0.49 (  0.50)	test_minacc_d   0.46 (  0.50)	test_majacc_d   0.49 (  0.50)	test_corr_d   0.24 (  0.23)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.45it/s]
Test: [  0/  1]	Loss 0.704 (0.704)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.704 (0.704)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.07 ( -0.07)
Test: [  1/  1]	Loss 0.704 (0.704)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.704 (0.704)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.07 ( -0.07)
Overall Timing[ 23/  1]	epoch_time 0.0375 (0.0384)	validation_time 0.0004 (0.0006)	train_time 0.0371 (0.0375)
record: (train_acc, test_acc) (0.6545000178813934, 0.6200000047683716)
last accs (train_acc, test_acc) (0.5000000124871731, 0.5)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.41it/s] 19%|#9        | 5/26 [00:00<00:00, 23.57it/s] 35%|###4      | 9/26 [00:00<00:00, 28.21it/s] 50%|#####     | 13/26 [00:00<00:00, 30.71it/s] 65%|######5   | 17/26 [00:00<00:00, 31.96it/s] 81%|########  | 21/26 [00:00<00:00, 32.58it/s] 96%|#########6| 25/26 [00:00<00:00, 33.77it/s]100%|##########| 26/26 [00:00<00:00, 28.82it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 624 400
penalty weights 10000.0
args.step pgd_anneal_iters 624 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 625 400
penalty weights 10000.0
args.step pgd_anneal_iters 625 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 626 400
penalty weights 10000.0
args.step pgd_anneal_iters 626 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 627 400
penalty weights 10000.0
args.step pgd_anneal_iters 627 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 628 400
penalty weights 10000.0
args.step pgd_anneal_iters 628 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 629 400
penalty weights 10000.0
args.step pgd_anneal_iters 629 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 630 400
penalty weights 10000.0
args.step pgd_anneal_iters 630 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 631 400
penalty weights 10000.0
args.step pgd_anneal_iters 631 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 632 400
penalty weights 10000.0
args.step pgd_anneal_iters 632 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 633 400
penalty weights 10000.0
args.step pgd_anneal_iters 633 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 634 400
penalty weights 10000.0
args.step pgd_anneal_iters 634 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 635 400
penalty weights 10000.0
args.step pgd_anneal_iters 635 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 636 400
penalty weights 10000.0
args.step pgd_anneal_iters 636 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 637 400
penalty weights 10000.0
args.step pgd_anneal_iters 637 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 638 400
penalty weights 10000.0
args.step pgd_anneal_iters 638 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 639 400
penalty weights 10000.0
args.step pgd_anneal_iters 639 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 640 400
penalty weights 10000.0
args.step pgd_anneal_iters 640 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 641 400
penalty weights 10000.0
args.step pgd_anneal_iters 641 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 642 400
penalty weights 10000.0
args.step pgd_anneal_iters 642 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 643 400
penalty weights 10000.0
args.step pgd_anneal_iters 643 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 644 400
penalty weights 10000.0
args.step pgd_anneal_iters 644 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 645 400
penalty weights 10000.0
args.step pgd_anneal_iters 645 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 646 400
penalty weights 10000.0
args.step pgd_anneal_iters 646 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 647 400
penalty weights 10000.0
args.step pgd_anneal_iters 647 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 648 400
penalty weights 10000.0
args.step pgd_anneal_iters 648 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 649 400
penalty weights 10000.0
args.step pgd_anneal_iters 649 600
dim_v 512
Epoch: [24][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.18 (  0.17)	train_acc   0.49 (  0.50)	train_minacc   0.46 (  0.50)	train_majacc   0.49 (  0.50)	train_corr   0.00 (  0.00)	l1 14.3648 (14.5058)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.93it/s] 27%|##6       | 7/26 [00:00<00:00, 34.92it/s]                                               27%|##6       | 7/26 [00:00<00:00, 34.92it/s] 46%|####6     | 12/26 [00:00<00:00, 37.51it/s] 69%|######9   | 18/26 [00:00<00:00, 44.92it/s]                                                69%|######9   | 18/26 [00:00<00:00, 44.92it/s] 92%|#########2| 24/26 [00:00<00:00, 46.18it/s]100%|##########| 26/26 [00:00<00:00, 39.40it/s]
Test: [   0/  26]	Loss 0.688 (0.688)	test_acc   0.49 (  0.49)	test_minacc   0.43 (  0.43)	test_majacc   0.50 (  0.50)	Loss_d 0.688 (0.688)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.43 (  0.43)	test_majacc_d   0.50 (  0.50)	test_corr_d   0.24 (  0.24)
Test: [  10/  26]	Loss 0.671 (0.683)	test_acc   0.57 (  0.51)	test_minacc   0.54 (  0.49)	test_majacc   0.57 (  0.51)	Loss_d 0.671 (0.683)	test_acc_d   0.57 (  0.51)	test_minacc_d   0.54 (  0.49)	test_majacc_d   0.57 (  0.51)	test_corr_d   0.29 (  0.29)
Test: [  20/  26]	Loss 0.685 (0.686)	test_acc   0.51 (  0.50)	test_minacc   0.54 (  0.49)	test_majacc   0.51 (  0.50)	Loss_d 0.685 (0.686)	test_acc_d   0.51 (  0.50)	test_minacc_d   0.54 (  0.49)	test_majacc_d   0.51 (  0.50)	test_corr_d   0.25 (  0.28)
Test: [  26/  26]	Loss 0.689 (0.685)	test_acc   0.49 (  0.50)	test_minacc   0.46 (  0.50)	test_majacc   0.49 (  0.50)	Loss_d 0.689 (0.685)	test_acc_d   0.49 (  0.50)	test_minacc_d   0.46 (  0.50)	test_majacc_d   0.49 (  0.50)	test_corr_d   0.29 (  0.28)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.78it/s]
Test: [  0/  1]	Loss 0.696 (0.696)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.696 (0.696)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.04 ( -0.04)
Test: [  1/  1]	Loss 0.696 (0.696)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.696 (0.696)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.04 ( -0.04)
Overall Timing[ 24/  1]	epoch_time 0.0364 (0.0383)	validation_time 0.0004 (0.0006)	train_time 0.0361 (0.0375)
record: (train_acc, test_acc) (0.6545000178813934, 0.6200000047683716)
last accs (train_acc, test_acc) (0.5000000124871731, 0.5)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.46it/s] 19%|#9        | 5/26 [00:00<00:01, 19.54it/s] 35%|###4      | 9/26 [00:00<00:00, 25.34it/s] 50%|#####     | 13/26 [00:00<00:00, 28.48it/s] 65%|######5   | 17/26 [00:00<00:00, 30.31it/s] 81%|########  | 21/26 [00:00<00:00, 31.80it/s] 96%|#########6| 25/26 [00:00<00:00, 32.85it/s]100%|##########| 26/26 [00:00<00:00, 26.94it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 650 400
penalty weights 10000.0
args.step pgd_anneal_iters 650 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 651 400
penalty weights 10000.0
args.step pgd_anneal_iters 651 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 652 400
penalty weights 10000.0
args.step pgd_anneal_iters 652 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 653 400
penalty weights 10000.0
args.step pgd_anneal_iters 653 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 654 400
penalty weights 10000.0
args.step pgd_anneal_iters 654 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 655 400
penalty weights 10000.0
args.step pgd_anneal_iters 655 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 656 400
penalty weights 10000.0
args.step pgd_anneal_iters 656 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 657 400
penalty weights 10000.0
args.step pgd_anneal_iters 657 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 658 400
penalty weights 10000.0
args.step pgd_anneal_iters 658 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 659 400
penalty weights 10000.0
args.step pgd_anneal_iters 659 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 660 400
penalty weights 10000.0
args.step pgd_anneal_iters 660 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 661 400
penalty weights 10000.0
args.step pgd_anneal_iters 661 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 662 400
penalty weights 10000.0
args.step pgd_anneal_iters 662 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 663 400
penalty weights 10000.0
args.step pgd_anneal_iters 663 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 664 400
penalty weights 10000.0
args.step pgd_anneal_iters 664 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 665 400
penalty weights 10000.0
args.step pgd_anneal_iters 665 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 666 400
penalty weights 10000.0
args.step pgd_anneal_iters 666 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 667 400
penalty weights 10000.0
args.step pgd_anneal_iters 667 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 668 400
penalty weights 10000.0
args.step pgd_anneal_iters 668 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 669 400
penalty weights 10000.0
args.step pgd_anneal_iters 669 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 670 400
penalty weights 10000.0
args.step pgd_anneal_iters 670 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 671 400
penalty weights 10000.0
args.step pgd_anneal_iters 671 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 672 400
penalty weights 10000.0
args.step pgd_anneal_iters 672 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 673 400
penalty weights 10000.0
args.step pgd_anneal_iters 673 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 674 400
penalty weights 10000.0
args.step pgd_anneal_iters 674 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 675 400
penalty weights 10000.0
args.step pgd_anneal_iters 675 600
dim_v 512
Epoch: [25][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.68)	train_penalty   0.00 (  0.00)	weight_norm   0.18 (  0.18)	train_acc   0.49 (  0.50)	train_minacc   0.46 (  0.50)	train_majacc   0.49 (  0.50)	train_corr   0.00 (  0.00)	l1 14.2927 (14.3196)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.16it/s] 27%|##6       | 7/26 [00:00<00:00, 34.25it/s]                                               27%|##6       | 7/26 [00:00<00:00, 34.25it/s] 50%|#####     | 13/26 [00:00<00:00, 39.99it/s] 73%|#######3  | 19/26 [00:00<00:00, 46.64it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 46.64it/s] 96%|#########6| 25/26 [00:00<00:00, 47.45it/s]100%|##########| 26/26 [00:00<00:00, 39.50it/s]
Test: [   0/  26]	Loss 0.687 (0.687)	test_acc   0.49 (  0.49)	test_minacc   0.43 (  0.43)	test_majacc   0.50 (  0.50)	Loss_d 0.687 (0.687)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.43 (  0.43)	test_majacc_d   0.50 (  0.50)	test_corr_d   0.24 (  0.24)
Test: [  10/  26]	Loss 0.672 (0.682)	test_acc   0.57 (  0.51)	test_minacc   0.54 (  0.49)	test_majacc   0.57 (  0.51)	Loss_d 0.672 (0.682)	test_acc_d   0.57 (  0.51)	test_minacc_d   0.54 (  0.49)	test_majacc_d   0.57 (  0.51)	test_corr_d   0.29 (  0.29)
Test: [  20/  26]	Loss 0.684 (0.685)	test_acc   0.51 (  0.50)	test_minacc   0.54 (  0.49)	test_majacc   0.51 (  0.50)	Loss_d 0.684 (0.685)	test_acc_d   0.51 (  0.50)	test_minacc_d   0.54 (  0.49)	test_majacc_d   0.51 (  0.50)	test_corr_d   0.24 (  0.28)
Test: [  26/  26]	Loss 0.688 (0.685)	test_acc   0.49 (  0.50)	test_minacc   0.46 (  0.50)	test_majacc   0.49 (  0.50)	Loss_d 0.688 (0.685)	test_acc_d   0.49 (  0.50)	test_minacc_d   0.46 (  0.50)	test_majacc_d   0.49 (  0.50)	test_corr_d   0.29 (  0.28)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.52it/s]
Test: [  0/  1]	Loss 0.695 (0.695)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.695 (0.695)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.04 ( -0.04)
Test: [  1/  1]	Loss 0.695 (0.695)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.695 (0.695)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.04 ( -0.04)
Overall Timing[ 25/  1]	epoch_time 0.0380 (0.0383)	validation_time 0.0004 (0.0006)	train_time 0.0377 (0.0375)
record: (train_acc, test_acc) (0.6545000178813934, 0.6200000047683716)
last accs (train_acc, test_acc) (0.5000000124871731, 0.5)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.79it/s] 19%|#9        | 5/26 [00:00<00:00, 22.20it/s] 35%|###4      | 9/26 [00:00<00:00, 27.39it/s] 50%|#####     | 13/26 [00:00<00:00, 29.83it/s] 65%|######5   | 17/26 [00:00<00:00, 31.25it/s] 81%|########  | 21/26 [00:00<00:00, 32.62it/s] 96%|#########6| 25/26 [00:00<00:00, 33.40it/s]100%|##########| 26/26 [00:00<00:00, 28.23it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 676 400
penalty weights 10000.0
args.step pgd_anneal_iters 676 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 677 400
penalty weights 10000.0
args.step pgd_anneal_iters 677 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 678 400
penalty weights 10000.0
args.step pgd_anneal_iters 678 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 679 400
penalty weights 10000.0
args.step pgd_anneal_iters 679 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 680 400
penalty weights 10000.0
args.step pgd_anneal_iters 680 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 681 400
penalty weights 10000.0
args.step pgd_anneal_iters 681 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 682 400
penalty weights 10000.0
args.step pgd_anneal_iters 682 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 683 400
penalty weights 10000.0
args.step pgd_anneal_iters 683 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 684 400
penalty weights 10000.0
args.step pgd_anneal_iters 684 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 685 400
penalty weights 10000.0
args.step pgd_anneal_iters 685 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 686 400
penalty weights 10000.0
args.step pgd_anneal_iters 686 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 687 400
penalty weights 10000.0
args.step pgd_anneal_iters 687 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 688 400
penalty weights 10000.0
args.step pgd_anneal_iters 688 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 689 400
penalty weights 10000.0
args.step pgd_anneal_iters 689 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 690 400
penalty weights 10000.0
args.step pgd_anneal_iters 690 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 691 400
penalty weights 10000.0
args.step pgd_anneal_iters 691 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 692 400
penalty weights 10000.0
args.step pgd_anneal_iters 692 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 693 400
penalty weights 10000.0
args.step pgd_anneal_iters 693 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 694 400
penalty weights 10000.0
args.step pgd_anneal_iters 694 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 695 400
penalty weights 10000.0
args.step pgd_anneal_iters 695 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 696 400
penalty weights 10000.0
args.step pgd_anneal_iters 696 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 697 400
penalty weights 10000.0
args.step pgd_anneal_iters 697 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 698 400
penalty weights 10000.0
args.step pgd_anneal_iters 698 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 699 400
penalty weights 10000.0
args.step pgd_anneal_iters 699 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 700 400
penalty weights 10000.0
args.step pgd_anneal_iters 700 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 701 400
penalty weights 10000.0
args.step pgd_anneal_iters 701 600
dim_v 512
Epoch: [26][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.18 (  0.18)	train_acc   0.49 (  0.50)	train_minacc   0.46 (  0.50)	train_majacc   0.49 (  0.50)	train_corr   0.00 (  0.00)	l1 14.2663 (14.2797)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.68it/s] 27%|##6       | 7/26 [00:00<00:00, 38.53it/s]                                               27%|##6       | 7/26 [00:00<00:00, 38.53it/s] 50%|#####     | 13/26 [00:00<00:00, 43.56it/s] 73%|#######3  | 19/26 [00:00<00:00, 49.07it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 49.07it/s] 96%|#########6| 25/26 [00:00<00:00, 48.25it/s]100%|##########| 26/26 [00:00<00:00, 41.07it/s]
Test: [   0/  26]	Loss 0.688 (0.688)	test_acc   0.49 (  0.49)	test_minacc   0.43 (  0.43)	test_majacc   0.50 (  0.50)	Loss_d 0.688 (0.688)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.43 (  0.43)	test_majacc_d   0.50 (  0.50)	test_corr_d   0.23 (  0.23)
Test: [  10/  26]	Loss 0.673 (0.683)	test_acc   0.57 (  0.51)	test_minacc   0.54 (  0.49)	test_majacc   0.57 (  0.51)	Loss_d 0.673 (0.683)	test_acc_d   0.57 (  0.51)	test_minacc_d   0.54 (  0.49)	test_majacc_d   0.57 (  0.51)	test_corr_d   0.28 (  0.28)
Test: [  20/  26]	Loss 0.685 (0.686)	test_acc   0.51 (  0.50)	test_minacc   0.54 (  0.49)	test_majacc   0.51 (  0.50)	Loss_d 0.685 (0.686)	test_acc_d   0.51 (  0.50)	test_minacc_d   0.54 (  0.49)	test_majacc_d   0.51 (  0.50)	test_corr_d   0.23 (  0.27)
Test: [  26/  26]	Loss 0.689 (0.686)	test_acc   0.49 (  0.50)	test_minacc   0.46 (  0.50)	test_majacc   0.49 (  0.50)	Loss_d 0.689 (0.686)	test_acc_d   0.49 (  0.50)	test_minacc_d   0.46 (  0.50)	test_majacc_d   0.49 (  0.50)	test_corr_d   0.28 (  0.27)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 60.09it/s]
Test: [  0/  1]	Loss 0.694 (0.694)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.694 (0.694)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.05 ( -0.05)
Test: [  1/  1]	Loss 0.694 (0.694)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.694 (0.694)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.05 ( -0.05)
Overall Timing[ 26/  1]	epoch_time 0.0356 (0.0382)	validation_time 0.0005 (0.0006)	train_time 0.0351 (0.0374)
record: (train_acc, test_acc) (0.6545000178813934, 0.6200000047683716)
last accs (train_acc, test_acc) (0.5000000124871731, 0.5)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.68it/s] 19%|#9        | 5/26 [00:00<00:00, 22.01it/s] 35%|###4      | 9/26 [00:00<00:00, 27.45it/s] 50%|#####     | 13/26 [00:00<00:00, 30.38it/s] 65%|######5   | 17/26 [00:00<00:00, 32.07it/s] 81%|########  | 21/26 [00:00<00:00, 32.90it/s] 96%|#########6| 25/26 [00:00<00:00, 33.65it/s]100%|##########| 26/26 [00:00<00:00, 28.62it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 702 400
penalty weights 10000.0
args.step pgd_anneal_iters 702 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 703 400
penalty weights 10000.0
args.step pgd_anneal_iters 703 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 704 400
penalty weights 10000.0
args.step pgd_anneal_iters 704 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 705 400
penalty weights 10000.0
args.step pgd_anneal_iters 705 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 706 400
penalty weights 10000.0
args.step pgd_anneal_iters 706 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 707 400
penalty weights 10000.0
args.step pgd_anneal_iters 707 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 708 400
penalty weights 10000.0
args.step pgd_anneal_iters 708 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 709 400
penalty weights 10000.0
args.step pgd_anneal_iters 709 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 710 400
penalty weights 10000.0
args.step pgd_anneal_iters 710 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 711 400
penalty weights 10000.0
args.step pgd_anneal_iters 711 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 712 400
penalty weights 10000.0
args.step pgd_anneal_iters 712 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 713 400
penalty weights 10000.0
args.step pgd_anneal_iters 713 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 714 400
penalty weights 10000.0
args.step pgd_anneal_iters 714 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 715 400
penalty weights 10000.0
args.step pgd_anneal_iters 715 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 716 400
penalty weights 10000.0
args.step pgd_anneal_iters 716 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 717 400
penalty weights 10000.0
args.step pgd_anneal_iters 717 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 718 400
penalty weights 10000.0
args.step pgd_anneal_iters 718 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 719 400
penalty weights 10000.0
args.step pgd_anneal_iters 719 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 720 400
penalty weights 10000.0
args.step pgd_anneal_iters 720 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 721 400
penalty weights 10000.0
args.step pgd_anneal_iters 721 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 722 400
penalty weights 10000.0
args.step pgd_anneal_iters 722 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 723 400
penalty weights 10000.0
args.step pgd_anneal_iters 723 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 724 400
penalty weights 10000.0
args.step pgd_anneal_iters 724 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 725 400
penalty weights 10000.0
args.step pgd_anneal_iters 725 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 726 400
penalty weights 10000.0
args.step pgd_anneal_iters 726 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 727 400
penalty weights 10000.0
args.step pgd_anneal_iters 727 600
dim_v 512
Epoch: [27][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.18 (  0.18)	train_acc   0.49 (  0.50)	train_minacc   0.46 (  0.50)	train_majacc   0.49 (  0.50)	train_corr   0.00 (  0.00)	l1 14.2427 (14.2554)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.77it/s] 27%|##6       | 7/26 [00:00<00:00, 36.99it/s]                                               27%|##6       | 7/26 [00:00<00:00, 36.99it/s] 50%|#####     | 13/26 [00:00<00:00, 42.82it/s] 73%|#######3  | 19/26 [00:00<00:00, 48.80it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 48.80it/s] 96%|#########6| 25/26 [00:00<00:00, 48.60it/s]100%|##########| 26/26 [00:00<00:00, 41.29it/s]
Test: [   0/  26]	Loss 0.689 (0.689)	test_acc   0.49 (  0.49)	test_minacc   0.43 (  0.43)	test_majacc   0.50 (  0.50)	Loss_d 0.689 (0.689)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.43 (  0.43)	test_majacc_d   0.50 (  0.50)	test_corr_d   0.22 (  0.22)
Test: [  10/  26]	Loss 0.674 (0.684)	test_acc   0.57 (  0.51)	test_minacc   0.54 (  0.49)	test_majacc   0.57 (  0.51)	Loss_d 0.674 (0.684)	test_acc_d   0.57 (  0.51)	test_minacc_d   0.54 (  0.49)	test_majacc_d   0.57 (  0.51)	test_corr_d   0.27 (  0.27)
Test: [  20/  26]	Loss 0.686 (0.687)	test_acc   0.51 (  0.50)	test_minacc   0.54 (  0.49)	test_majacc   0.51 (  0.50)	Loss_d 0.686 (0.687)	test_acc_d   0.51 (  0.50)	test_minacc_d   0.54 (  0.49)	test_majacc_d   0.51 (  0.50)	test_corr_d   0.23 (  0.26)
Test: [  26/  26]	Loss 0.689 (0.686)	test_acc   0.49 (  0.50)	test_minacc   0.46 (  0.50)	test_majacc   0.49 (  0.50)	Loss_d 0.689 (0.686)	test_acc_d   0.49 (  0.50)	test_minacc_d   0.46 (  0.50)	test_majacc_d   0.49 (  0.50)	test_corr_d   0.27 (  0.26)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.84it/s]
Test: [  0/  1]	Loss 0.694 (0.694)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.694 (0.694)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.06 ( -0.06)
Test: [  1/  1]	Loss 0.694 (0.694)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.694 (0.694)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.06 ( -0.06)
Overall Timing[ 27/  1]	epoch_time 0.0372 (0.0382)	validation_time 0.0003 (0.0006)	train_time 0.0369 (0.0374)
record: (train_acc, test_acc) (0.6545000178813934, 0.6200000047683716)
last accs (train_acc, test_acc) (0.5000000124871731, 0.5)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.03it/s] 19%|#9        | 5/26 [00:00<00:01, 20.84it/s] 35%|###4      | 9/26 [00:00<00:00, 25.99it/s] 50%|#####     | 13/26 [00:00<00:00, 28.63it/s] 65%|######5   | 17/26 [00:00<00:00, 30.58it/s] 81%|########  | 21/26 [00:00<00:00, 31.44it/s] 96%|#########6| 25/26 [00:00<00:00, 32.27it/s]100%|##########| 26/26 [00:00<00:00, 27.20it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 728 400
penalty weights 10000.0
args.step pgd_anneal_iters 728 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 729 400
penalty weights 10000.0
args.step pgd_anneal_iters 729 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 730 400
penalty weights 10000.0
args.step pgd_anneal_iters 730 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 731 400
penalty weights 10000.0
args.step pgd_anneal_iters 731 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 732 400
penalty weights 10000.0
args.step pgd_anneal_iters 732 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 733 400
penalty weights 10000.0
args.step pgd_anneal_iters 733 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 734 400
penalty weights 10000.0
args.step pgd_anneal_iters 734 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 735 400
penalty weights 10000.0
args.step pgd_anneal_iters 735 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 736 400
penalty weights 10000.0
args.step pgd_anneal_iters 736 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 737 400
penalty weights 10000.0
args.step pgd_anneal_iters 737 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 738 400
penalty weights 10000.0
args.step pgd_anneal_iters 738 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 739 400
penalty weights 10000.0
args.step pgd_anneal_iters 739 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 740 400
penalty weights 10000.0
args.step pgd_anneal_iters 740 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 741 400
penalty weights 10000.0
args.step pgd_anneal_iters 741 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 742 400
penalty weights 10000.0
args.step pgd_anneal_iters 742 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 743 400
penalty weights 10000.0
args.step pgd_anneal_iters 743 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 744 400
penalty weights 10000.0
args.step pgd_anneal_iters 744 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 745 400
penalty weights 10000.0
args.step pgd_anneal_iters 745 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 746 400
penalty weights 10000.0
args.step pgd_anneal_iters 746 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 747 400
penalty weights 10000.0
args.step pgd_anneal_iters 747 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 748 400
penalty weights 10000.0
args.step pgd_anneal_iters 748 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 749 400
penalty weights 10000.0
args.step pgd_anneal_iters 749 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 750 400
penalty weights 10000.0
args.step pgd_anneal_iters 750 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 751 400
penalty weights 10000.0
args.step pgd_anneal_iters 751 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 752 400
penalty weights 10000.0
args.step pgd_anneal_iters 752 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 753 400
penalty weights 10000.0
args.step pgd_anneal_iters 753 600
dim_v 512
Epoch: [28][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.17 (  0.17)	train_acc   0.49 (  0.50)	train_minacc   0.46 (  0.50)	train_majacc   0.49 (  0.50)	train_corr   0.00 (  0.00)	l1 14.2195 (14.2318)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.19it/s] 23%|##3       | 6/26 [00:00<00:00, 30.29it/s]                                               23%|##3       | 6/26 [00:00<00:00, 30.29it/s] 46%|####6     | 12/26 [00:00<00:00, 38.87it/s] 69%|######9   | 18/26 [00:00<00:00, 45.84it/s]                                                69%|######9   | 18/26 [00:00<00:00, 45.84it/s] 92%|#########2| 24/26 [00:00<00:00, 46.44it/s]100%|##########| 26/26 [00:00<00:00, 39.10it/s]
Test: [   0/  26]	Loss 0.689 (0.689)	test_acc   0.49 (  0.49)	test_minacc   0.43 (  0.43)	test_majacc   0.50 (  0.50)	Loss_d 0.689 (0.689)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.43 (  0.43)	test_majacc_d   0.50 (  0.50)	test_corr_d   0.21 (  0.21)
Test: [  10/  26]	Loss 0.675 (0.685)	test_acc   0.57 (  0.51)	test_minacc   0.54 (  0.49)	test_majacc   0.57 (  0.51)	Loss_d 0.675 (0.685)	test_acc_d   0.57 (  0.51)	test_minacc_d   0.54 (  0.49)	test_majacc_d   0.57 (  0.51)	test_corr_d   0.27 (  0.26)
Test: [  20/  26]	Loss 0.686 (0.687)	test_acc   0.51 (  0.50)	test_minacc   0.54 (  0.49)	test_majacc   0.51 (  0.50)	Loss_d 0.686 (0.687)	test_acc_d   0.51 (  0.50)	test_minacc_d   0.54 (  0.49)	test_majacc_d   0.51 (  0.50)	test_corr_d   0.22 (  0.25)
Test: [  26/  26]	Loss 0.690 (0.687)	test_acc   0.49 (  0.50)	test_minacc   0.46 (  0.50)	test_majacc   0.49 (  0.50)	Loss_d 0.690 (0.687)	test_acc_d   0.49 (  0.50)	test_minacc_d   0.46 (  0.50)	test_majacc_d   0.49 (  0.50)	test_corr_d   0.26 (  0.25)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 64.38it/s]
Test: [  0/  1]	Loss 0.694 (0.694)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.694 (0.694)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.06 ( -0.06)
Test: [  1/  1]	Loss 0.694 (0.694)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.694 (0.694)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.06 ( -0.06)
Overall Timing[ 28/  1]	epoch_time 0.0365 (0.0381)	validation_time 0.0004 (0.0006)	train_time 0.0361 (0.0373)
record: (train_acc, test_acc) (0.6545000178813934, 0.6200000047683716)
last accs (train_acc, test_acc) (0.5000000124871731, 0.5)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.96it/s] 19%|#9        | 5/26 [00:00<00:00, 22.15it/s] 35%|###4      | 9/26 [00:00<00:00, 26.57it/s] 50%|#####     | 13/26 [00:00<00:00, 28.65it/s] 65%|######5   | 17/26 [00:00<00:00, 30.46it/s] 81%|########  | 21/26 [00:00<00:00, 31.52it/s] 96%|#########6| 25/26 [00:00<00:00, 32.09it/s]100%|##########| 26/26 [00:00<00:00, 27.38it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 754 400
penalty weights 10000.0
args.step pgd_anneal_iters 754 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 755 400
penalty weights 10000.0
args.step pgd_anneal_iters 755 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 756 400
penalty weights 10000.0
args.step pgd_anneal_iters 756 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 757 400
penalty weights 10000.0
args.step pgd_anneal_iters 757 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 758 400
penalty weights 10000.0
args.step pgd_anneal_iters 758 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 759 400
penalty weights 10000.0
args.step pgd_anneal_iters 759 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 760 400
penalty weights 10000.0
args.step pgd_anneal_iters 760 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 761 400
penalty weights 10000.0
args.step pgd_anneal_iters 761 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 762 400
penalty weights 10000.0
args.step pgd_anneal_iters 762 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 763 400
penalty weights 10000.0
args.step pgd_anneal_iters 763 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 764 400
penalty weights 10000.0
args.step pgd_anneal_iters 764 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 765 400
penalty weights 10000.0
args.step pgd_anneal_iters 765 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 766 400
penalty weights 10000.0
args.step pgd_anneal_iters 766 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 767 400
penalty weights 10000.0
args.step pgd_anneal_iters 767 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 768 400
penalty weights 10000.0
args.step pgd_anneal_iters 768 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 769 400
penalty weights 10000.0
args.step pgd_anneal_iters 769 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 770 400
penalty weights 10000.0
args.step pgd_anneal_iters 770 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 771 400
penalty weights 10000.0
args.step pgd_anneal_iters 771 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 772 400
penalty weights 10000.0
args.step pgd_anneal_iters 772 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 773 400
penalty weights 10000.0
args.step pgd_anneal_iters 773 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 774 400
penalty weights 10000.0
args.step pgd_anneal_iters 774 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 775 400
penalty weights 10000.0
args.step pgd_anneal_iters 775 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 776 400
penalty weights 10000.0
args.step pgd_anneal_iters 776 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 777 400
penalty weights 10000.0
args.step pgd_anneal_iters 777 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 778 400
penalty weights 10000.0
args.step pgd_anneal_iters 778 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 779 400
penalty weights 10000.0
args.step pgd_anneal_iters 779 600
dim_v 512
Epoch: [29][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.17 (  0.17)	train_acc   0.49 (  0.50)	train_minacc   0.46 (  0.50)	train_majacc   0.49 (  0.50)	train_corr   0.00 (  0.00)	l1 14.1973 (14.2089)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:05,  4.89it/s] 27%|##6       | 7/26 [00:00<00:00, 26.87it/s]                                               27%|##6       | 7/26 [00:00<00:00, 26.87it/s] 50%|#####     | 13/26 [00:00<00:00, 34.96it/s] 73%|#######3  | 19/26 [00:00<00:00, 41.93it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 41.93it/s] 96%|#########6| 25/26 [00:00<00:00, 45.04it/s]100%|##########| 26/26 [00:00<00:00, 35.16it/s]
Test: [   0/  26]	Loss 0.689 (0.689)	test_acc   0.49 (  0.49)	test_minacc   0.43 (  0.43)	test_majacc   0.50 (  0.50)	Loss_d 0.689 (0.689)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.43 (  0.43)	test_majacc_d   0.50 (  0.50)	test_corr_d   0.21 (  0.21)
Test: [  10/  26]	Loss 0.676 (0.686)	test_acc   0.57 (  0.51)	test_minacc   0.54 (  0.49)	test_majacc   0.57 (  0.51)	Loss_d 0.676 (0.686)	test_acc_d   0.57 (  0.51)	test_minacc_d   0.54 (  0.49)	test_majacc_d   0.57 (  0.51)	test_corr_d   0.26 (  0.26)
Test: [  20/  26]	Loss 0.687 (0.688)	test_acc   0.51 (  0.50)	test_minacc   0.54 (  0.49)	test_majacc   0.51 (  0.50)	Loss_d 0.687 (0.688)	test_acc_d   0.51 (  0.50)	test_minacc_d   0.54 (  0.49)	test_majacc_d   0.51 (  0.50)	test_corr_d   0.21 (  0.25)
Test: [  26/  26]	Loss 0.690 (0.687)	test_acc   0.49 (  0.50)	test_minacc   0.46 (  0.50)	test_majacc   0.49 (  0.50)	Loss_d 0.690 (0.687)	test_acc_d   0.49 (  0.50)	test_minacc_d   0.46 (  0.50)	test_majacc_d   0.49 (  0.50)	test_corr_d   0.26 (  0.25)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.09it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.07 ( -0.07)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.07 ( -0.07)
Overall Timing[ 29/  1]	epoch_time 0.0370 (0.0381)	validation_time 0.0004 (0.0006)	train_time 0.0366 (0.0373)
record: (train_acc, test_acc) (0.6545000178813934, 0.6200000047683716)
last accs (train_acc, test_acc) (0.5000000124871731, 0.5)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.68it/s] 19%|#9        | 5/26 [00:00<00:00, 24.08it/s] 35%|###4      | 9/26 [00:00<00:00, 28.72it/s] 50%|#####     | 13/26 [00:00<00:00, 29.97it/s] 65%|######5   | 17/26 [00:00<00:00, 31.77it/s] 81%|########  | 21/26 [00:00<00:00, 32.72it/s] 96%|#########6| 25/26 [00:00<00:00, 33.22it/s]100%|##########| 26/26 [00:00<00:00, 28.81it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 780 400
penalty weights 10000.0
args.step pgd_anneal_iters 780 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 781 400
penalty weights 10000.0
args.step pgd_anneal_iters 781 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 782 400
penalty weights 10000.0
args.step pgd_anneal_iters 782 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 783 400
penalty weights 10000.0
args.step pgd_anneal_iters 783 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 784 400
penalty weights 10000.0
args.step pgd_anneal_iters 784 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 785 400
penalty weights 10000.0
args.step pgd_anneal_iters 785 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 786 400
penalty weights 10000.0
args.step pgd_anneal_iters 786 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 787 400
penalty weights 10000.0
args.step pgd_anneal_iters 787 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 788 400
penalty weights 10000.0
args.step pgd_anneal_iters 788 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 789 400
penalty weights 10000.0
args.step pgd_anneal_iters 789 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 790 400
penalty weights 10000.0
args.step pgd_anneal_iters 790 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 791 400
penalty weights 10000.0
args.step pgd_anneal_iters 791 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 792 400
penalty weights 10000.0
args.step pgd_anneal_iters 792 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 793 400
penalty weights 10000.0
args.step pgd_anneal_iters 793 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 794 400
penalty weights 10000.0
args.step pgd_anneal_iters 794 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 795 400
penalty weights 10000.0
args.step pgd_anneal_iters 795 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 796 400
penalty weights 10000.0
args.step pgd_anneal_iters 796 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 797 400
penalty weights 10000.0
args.step pgd_anneal_iters 797 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 798 400
penalty weights 10000.0
args.step pgd_anneal_iters 798 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 799 400
penalty weights 10000.0
args.step pgd_anneal_iters 799 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 800 400
penalty weights 10000.0
args.step pgd_anneal_iters 800 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 801 400
penalty weights 10000.0
args.step pgd_anneal_iters 801 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 802 400
penalty weights 10000.0
args.step pgd_anneal_iters 802 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 803 400
penalty weights 10000.0
args.step pgd_anneal_iters 803 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 804 400
penalty weights 10000.0
args.step pgd_anneal_iters 804 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 805 400
penalty weights 10000.0
args.step pgd_anneal_iters 805 600
dim_v 512
Epoch: [30][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.17 (  0.17)	train_acc   0.49 (  0.50)	train_minacc   0.46 (  0.50)	train_majacc   0.49 (  0.50)	train_corr   0.00 (  0.00)	l1 14.1764 (14.1873)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 18.24it/s] 23%|##3       | 6/26 [00:00<00:00, 29.33it/s]                                               23%|##3       | 6/26 [00:00<00:00, 29.33it/s] 46%|####6     | 12/26 [00:00<00:00, 38.92it/s] 69%|######9   | 18/26 [00:00<00:00, 46.11it/s]                                                69%|######9   | 18/26 [00:00<00:00, 46.11it/s] 92%|#########2| 24/26 [00:00<00:00, 46.56it/s]100%|##########| 26/26 [00:00<00:00, 39.75it/s]
Test: [   0/  26]	Loss 0.690 (0.690)	test_acc   0.49 (  0.49)	test_minacc   0.43 (  0.43)	test_majacc   0.50 (  0.50)	Loss_d 0.690 (0.690)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.43 (  0.43)	test_majacc_d   0.50 (  0.50)	test_corr_d   0.20 (  0.20)
Test: [  10/  26]	Loss 0.677 (0.686)	test_acc   0.57 (  0.51)	test_minacc   0.54 (  0.49)	test_majacc   0.57 (  0.51)	Loss_d 0.677 (0.686)	test_acc_d   0.57 (  0.51)	test_minacc_d   0.54 (  0.49)	test_majacc_d   0.57 (  0.51)	test_corr_d   0.26 (  0.25)
Test: [  20/  26]	Loss 0.687 (0.688)	test_acc   0.51 (  0.50)	test_minacc   0.54 (  0.49)	test_majacc   0.51 (  0.50)	Loss_d 0.687 (0.688)	test_acc_d   0.51 (  0.50)	test_minacc_d   0.54 (  0.49)	test_majacc_d   0.51 (  0.50)	test_corr_d   0.21 (  0.24)
Test: [  26/  26]	Loss 0.690 (0.688)	test_acc   0.49 (  0.50)	test_minacc   0.46 (  0.50)	test_majacc   0.49 (  0.50)	Loss_d 0.690 (0.688)	test_acc_d   0.49 (  0.50)	test_minacc_d   0.46 (  0.50)	test_majacc_d   0.49 (  0.50)	test_corr_d   0.25 (  0.24)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 65.53it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.07 ( -0.07)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.07 ( -0.07)
Overall Timing[ 30/  1]	epoch_time 0.0369 (0.0380)	validation_time 0.0003 (0.0006)	train_time 0.0365 (0.0373)
record: (train_acc, test_acc) (0.6545000178813934, 0.6200000047683716)
last accs (train_acc, test_acc) (0.5000000124871731, 0.5)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.15it/s] 19%|#9        | 5/26 [00:00<00:00, 22.16it/s] 35%|###4      | 9/26 [00:00<00:00, 27.31it/s] 50%|#####     | 13/26 [00:00<00:00, 29.91it/s] 65%|######5   | 17/26 [00:00<00:00, 30.74it/s] 81%|########  | 21/26 [00:00<00:00, 31.52it/s] 96%|#########6| 25/26 [00:00<00:00, 31.71it/s]100%|##########| 26/26 [00:00<00:00, 27.66it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 806 400
penalty weights 10000.0
args.step pgd_anneal_iters 806 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 807 400
penalty weights 10000.0
args.step pgd_anneal_iters 807 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 808 400
penalty weights 10000.0
args.step pgd_anneal_iters 808 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 809 400
penalty weights 10000.0
args.step pgd_anneal_iters 809 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 810 400
penalty weights 10000.0
args.step pgd_anneal_iters 810 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 811 400
penalty weights 10000.0
args.step pgd_anneal_iters 811 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 812 400
penalty weights 10000.0
args.step pgd_anneal_iters 812 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 813 400
penalty weights 10000.0
args.step pgd_anneal_iters 813 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 814 400
penalty weights 10000.0
args.step pgd_anneal_iters 814 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 815 400
penalty weights 10000.0
args.step pgd_anneal_iters 815 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 816 400
penalty weights 10000.0
args.step pgd_anneal_iters 816 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 817 400
penalty weights 10000.0
args.step pgd_anneal_iters 817 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 818 400
penalty weights 10000.0
args.step pgd_anneal_iters 818 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 819 400
penalty weights 10000.0
args.step pgd_anneal_iters 819 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 820 400
penalty weights 10000.0
args.step pgd_anneal_iters 820 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 821 400
penalty weights 10000.0
args.step pgd_anneal_iters 821 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 822 400
penalty weights 10000.0
args.step pgd_anneal_iters 822 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 823 400
penalty weights 10000.0
args.step pgd_anneal_iters 823 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 824 400
penalty weights 10000.0
args.step pgd_anneal_iters 824 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 825 400
penalty weights 10000.0
args.step pgd_anneal_iters 825 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 826 400
penalty weights 10000.0
args.step pgd_anneal_iters 826 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 827 400
penalty weights 10000.0
args.step pgd_anneal_iters 827 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 828 400
penalty weights 10000.0
args.step pgd_anneal_iters 828 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 829 400
penalty weights 10000.0
args.step pgd_anneal_iters 829 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 830 400
penalty weights 10000.0
args.step pgd_anneal_iters 830 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 831 400
penalty weights 10000.0
args.step pgd_anneal_iters 831 600
dim_v 512
Epoch: [31][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.17 (  0.17)	train_acc   0.49 (  0.50)	train_minacc   0.46 (  0.50)	train_majacc   0.49 (  0.50)	train_corr   0.00 (  0.00)	l1 14.1567 (14.1670)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 17.91it/s] 31%|###       | 8/26 [00:00<00:00, 41.35it/s]                                               31%|###       | 8/26 [00:00<00:00, 41.35it/s] 50%|#####     | 13/26 [00:00<00:00, 42.81it/s] 77%|#######6  | 20/26 [00:00<00:00, 51.11it/s]                                                77%|#######6  | 20/26 [00:00<00:00, 51.11it/s]100%|##########| 26/26 [00:00<00:00, 50.07it/s]100%|##########| 26/26 [00:00<00:00, 42.14it/s]
Test: [   0/  26]	Loss 0.690 (0.690)	test_acc   0.49 (  0.49)	test_minacc   0.43 (  0.43)	test_majacc   0.50 (  0.50)	Loss_d 0.690 (0.690)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.43 (  0.43)	test_majacc_d   0.50 (  0.50)	test_corr_d   0.19 (  0.19)
Test: [  10/  26]	Loss 0.678 (0.687)	test_acc   0.57 (  0.51)	test_minacc   0.54 (  0.49)	test_majacc   0.57 (  0.51)	Loss_d 0.678 (0.687)	test_acc_d   0.57 (  0.51)	test_minacc_d   0.54 (  0.49)	test_majacc_d   0.57 (  0.51)	test_corr_d   0.25 (  0.25)
Test: [  20/  26]	Loss 0.688 (0.689)	test_acc   0.51 (  0.50)	test_minacc   0.54 (  0.49)	test_majacc   0.51 (  0.50)	Loss_d 0.688 (0.689)	test_acc_d   0.51 (  0.50)	test_minacc_d   0.54 (  0.49)	test_majacc_d   0.51 (  0.50)	test_corr_d   0.20 (  0.23)
Test: [  26/  26]	Loss 0.691 (0.688)	test_acc   0.49 (  0.50)	test_minacc   0.46 (  0.50)	test_majacc   0.49 (  0.50)	Loss_d 0.691 (0.688)	test_acc_d   0.49 (  0.50)	test_minacc_d   0.46 (  0.50)	test_majacc_d   0.49 (  0.50)	test_corr_d   0.24 (  0.23)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 67.08it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.07 ( -0.07)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.07 ( -0.07)
Overall Timing[ 31/  1]	epoch_time 0.0370 (0.0380)	validation_time 0.0004 (0.0006)	train_time 0.0367 (0.0373)
record: (train_acc, test_acc) (0.6545000178813934, 0.6200000047683716)
last accs (train_acc, test_acc) (0.5000000124871731, 0.5)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:09,  2.65it/s] 19%|#9        | 5/26 [00:00<00:01, 12.01it/s] 35%|###4      | 9/26 [00:00<00:00, 18.83it/s] 50%|#####     | 13/26 [00:00<00:00, 23.74it/s] 65%|######5   | 17/26 [00:00<00:00, 27.32it/s] 81%|########  | 21/26 [00:00<00:00, 29.86it/s] 96%|#########6| 25/26 [00:01<00:00, 31.28it/s]100%|##########| 26/26 [00:01<00:00, 22.49it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 832 400
penalty weights 10000.0
args.step pgd_anneal_iters 832 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 833 400
penalty weights 10000.0
args.step pgd_anneal_iters 833 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 834 400
penalty weights 10000.0
args.step pgd_anneal_iters 834 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 835 400
penalty weights 10000.0
args.step pgd_anneal_iters 835 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 836 400
penalty weights 10000.0
args.step pgd_anneal_iters 836 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 837 400
penalty weights 10000.0
args.step pgd_anneal_iters 837 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 838 400
penalty weights 10000.0
args.step pgd_anneal_iters 838 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 839 400
penalty weights 10000.0
args.step pgd_anneal_iters 839 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 840 400
penalty weights 10000.0
args.step pgd_anneal_iters 840 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 841 400
penalty weights 10000.0
args.step pgd_anneal_iters 841 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 842 400
penalty weights 10000.0
args.step pgd_anneal_iters 842 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 843 400
penalty weights 10000.0
args.step pgd_anneal_iters 843 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 844 400
penalty weights 10000.0
args.step pgd_anneal_iters 844 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 845 400
penalty weights 10000.0
args.step pgd_anneal_iters 845 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 846 400
penalty weights 10000.0
args.step pgd_anneal_iters 846 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 847 400
penalty weights 10000.0
args.step pgd_anneal_iters 847 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 848 400
penalty weights 10000.0
args.step pgd_anneal_iters 848 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 849 400
penalty weights 10000.0
args.step pgd_anneal_iters 849 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 850 400
penalty weights 10000.0
args.step pgd_anneal_iters 850 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 851 400
penalty weights 10000.0
args.step pgd_anneal_iters 851 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 852 400
penalty weights 10000.0
args.step pgd_anneal_iters 852 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 853 400
penalty weights 10000.0
args.step pgd_anneal_iters 853 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 854 400
penalty weights 10000.0
args.step pgd_anneal_iters 854 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 855 400
penalty weights 10000.0
args.step pgd_anneal_iters 855 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 856 400
penalty weights 10000.0
args.step pgd_anneal_iters 856 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 857 400
penalty weights 10000.0
args.step pgd_anneal_iters 857 600
dim_v 512
Epoch: [32][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.17 (  0.17)	train_acc   0.49 (  0.50)	train_minacc   0.46 (  0.50)	train_majacc   0.49 (  0.50)	train_corr   0.00 (  0.00)	l1 14.1382 (14.1479)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.83it/s] 27%|##6       | 7/26 [00:00<00:00, 30.40it/s]                                               27%|##6       | 7/26 [00:00<00:00, 30.40it/s] 50%|#####     | 13/26 [00:00<00:00, 38.10it/s] 73%|#######3  | 19/26 [00:00<00:00, 44.94it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 44.94it/s] 96%|#########6| 25/26 [00:00<00:00, 45.74it/s]100%|##########| 26/26 [00:00<00:00, 37.12it/s]
Test: [   0/  26]	Loss 0.690 (0.690)	test_acc   0.49 (  0.49)	test_minacc   0.43 (  0.43)	test_majacc   0.50 (  0.50)	Loss_d 0.690 (0.690)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.43 (  0.43)	test_majacc_d   0.50 (  0.50)	test_corr_d   0.19 (  0.19)
Test: [  10/  26]	Loss 0.679 (0.687)	test_acc   0.57 (  0.51)	test_minacc   0.54 (  0.49)	test_majacc   0.57 (  0.51)	Loss_d 0.679 (0.687)	test_acc_d   0.57 (  0.51)	test_minacc_d   0.54 (  0.49)	test_majacc_d   0.57 (  0.51)	test_corr_d   0.25 (  0.24)
Test: [  20/  26]	Loss 0.688 (0.689)	test_acc   0.51 (  0.50)	test_minacc   0.54 (  0.49)	test_majacc   0.51 (  0.50)	Loss_d 0.688 (0.689)	test_acc_d   0.51 (  0.50)	test_minacc_d   0.54 (  0.49)	test_majacc_d   0.51 (  0.50)	test_corr_d   0.20 (  0.23)
Test: [  26/  26]	Loss 0.691 (0.689)	test_acc   0.49 (  0.50)	test_minacc   0.46 (  0.50)	test_majacc   0.49 (  0.50)	Loss_d 0.691 (0.689)	test_acc_d   0.49 (  0.50)	test_minacc_d   0.46 (  0.50)	test_majacc_d   0.49 (  0.50)	test_corr_d   0.24 (  0.23)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 64.22it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.08 ( -0.08)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.08 ( -0.08)
Overall Timing[ 32/  1]	epoch_time 0.0382 (0.0380)	validation_time 0.0003 (0.0006)	train_time 0.0379 (0.0373)
record: (train_acc, test_acc) (0.6545000178813934, 0.6200000047683716)
last accs (train_acc, test_acc) (0.5000000124871731, 0.5)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 17.88it/s] 23%|##3       | 6/26 [00:00<00:00, 26.17it/s] 38%|###8      | 10/26 [00:00<00:00, 29.55it/s] 54%|#####3    | 14/26 [00:00<00:00, 31.18it/s] 69%|######9   | 18/26 [00:00<00:00, 32.27it/s] 85%|########4 | 22/26 [00:00<00:00, 32.97it/s]100%|##########| 26/26 [00:00<00:00, 33.07it/s]100%|##########| 26/26 [00:00<00:00, 29.09it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 858 400
penalty weights 10000.0
args.step pgd_anneal_iters 858 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 859 400
penalty weights 10000.0
args.step pgd_anneal_iters 859 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 860 400
penalty weights 10000.0
args.step pgd_anneal_iters 860 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 861 400
penalty weights 10000.0
args.step pgd_anneal_iters 861 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 862 400
penalty weights 10000.0
args.step pgd_anneal_iters 862 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 863 400
penalty weights 10000.0
args.step pgd_anneal_iters 863 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 864 400
penalty weights 10000.0
args.step pgd_anneal_iters 864 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 865 400
penalty weights 10000.0
args.step pgd_anneal_iters 865 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 866 400
penalty weights 10000.0
args.step pgd_anneal_iters 866 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 867 400
penalty weights 10000.0
args.step pgd_anneal_iters 867 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 868 400
penalty weights 10000.0
args.step pgd_anneal_iters 868 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 869 400
penalty weights 10000.0
args.step pgd_anneal_iters 869 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 870 400
penalty weights 10000.0
args.step pgd_anneal_iters 870 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 871 400
penalty weights 10000.0
args.step pgd_anneal_iters 871 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 872 400
penalty weights 10000.0
args.step pgd_anneal_iters 872 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 873 400
penalty weights 10000.0
args.step pgd_anneal_iters 873 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 874 400
penalty weights 10000.0
args.step pgd_anneal_iters 874 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 875 400
penalty weights 10000.0
args.step pgd_anneal_iters 875 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 876 400
penalty weights 10000.0
args.step pgd_anneal_iters 876 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 877 400
penalty weights 10000.0
args.step pgd_anneal_iters 877 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 878 400
penalty weights 10000.0
args.step pgd_anneal_iters 878 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 879 400
penalty weights 10000.0
args.step pgd_anneal_iters 879 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 880 400
penalty weights 10000.0
args.step pgd_anneal_iters 880 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 881 400
penalty weights 10000.0
args.step pgd_anneal_iters 881 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 882 400
penalty weights 10000.0
args.step pgd_anneal_iters 882 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 883 400
penalty weights 10000.0
args.step pgd_anneal_iters 883 600
dim_v 512
Epoch: [33][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.17 (  0.17)	train_acc   0.49 (  0.50)	train_minacc   0.46 (  0.50)	train_majacc   0.49 (  0.50)	train_corr   0.00 (  0.00)	l1 14.1209 (14.1299)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.43it/s] 27%|##6       | 7/26 [00:00<00:00, 33.74it/s]                                               27%|##6       | 7/26 [00:00<00:00, 33.74it/s] 50%|#####     | 13/26 [00:00<00:00, 40.47it/s] 73%|#######3  | 19/26 [00:00<00:00, 47.16it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 47.16it/s] 96%|#########6| 25/26 [00:00<00:00, 47.00it/s]100%|##########| 26/26 [00:00<00:00, 38.73it/s]
Test: [   0/  26]	Loss 0.691 (0.691)	test_acc   0.49 (  0.49)	test_minacc   0.43 (  0.43)	test_majacc   0.50 (  0.50)	Loss_d 0.691 (0.691)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.43 (  0.43)	test_majacc_d   0.50 (  0.50)	test_corr_d   0.18 (  0.18)
Test: [  10/  26]	Loss 0.680 (0.688)	test_acc   0.57 (  0.51)	test_minacc   0.54 (  0.49)	test_majacc   0.57 (  0.51)	Loss_d 0.680 (0.688)	test_acc_d   0.57 (  0.51)	test_minacc_d   0.54 (  0.49)	test_majacc_d   0.57 (  0.51)	test_corr_d   0.24 (  0.23)
Test: [  20/  26]	Loss 0.689 (0.689)	test_acc   0.51 (  0.50)	test_minacc   0.54 (  0.49)	test_majacc   0.51 (  0.50)	Loss_d 0.689 (0.689)	test_acc_d   0.51 (  0.50)	test_minacc_d   0.54 (  0.49)	test_majacc_d   0.51 (  0.50)	test_corr_d   0.19 (  0.22)
Test: [  26/  26]	Loss 0.691 (0.689)	test_acc   0.49 (  0.50)	test_minacc   0.46 (  0.50)	test_majacc   0.49 (  0.50)	Loss_d 0.691 (0.689)	test_acc_d   0.49 (  0.50)	test_minacc_d   0.46 (  0.50)	test_majacc_d   0.49 (  0.50)	test_corr_d   0.23 (  0.22)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 67.05it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.08 ( -0.08)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.08 ( -0.08)
Overall Timing[ 33/  1]	epoch_time 0.0366 (0.0380)	validation_time 0.0004 (0.0006)	train_time 0.0362 (0.0373)
record: (train_acc, test_acc) (0.6545000178813934, 0.6200000047683716)
last accs (train_acc, test_acc) (0.5000000124871731, 0.5)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.41it/s] 19%|#9        | 5/26 [00:00<00:00, 21.21it/s] 35%|###4      | 9/26 [00:00<00:00, 26.49it/s] 50%|#####     | 13/26 [00:00<00:00, 29.21it/s] 65%|######5   | 17/26 [00:00<00:00, 30.90it/s] 81%|########  | 21/26 [00:00<00:00, 32.05it/s] 96%|#########6| 25/26 [00:00<00:00, 32.53it/s]100%|##########| 26/26 [00:00<00:00, 27.64it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 884 400
penalty weights 10000.0
args.step pgd_anneal_iters 884 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 885 400
penalty weights 10000.0
args.step pgd_anneal_iters 885 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 886 400
penalty weights 10000.0
args.step pgd_anneal_iters 886 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 887 400
penalty weights 10000.0
args.step pgd_anneal_iters 887 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 888 400
penalty weights 10000.0
args.step pgd_anneal_iters 888 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 889 400
penalty weights 10000.0
args.step pgd_anneal_iters 889 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 890 400
penalty weights 10000.0
args.step pgd_anneal_iters 890 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 891 400
penalty weights 10000.0
args.step pgd_anneal_iters 891 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 892 400
penalty weights 10000.0
args.step pgd_anneal_iters 892 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 893 400
penalty weights 10000.0
args.step pgd_anneal_iters 893 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 894 400
penalty weights 10000.0
args.step pgd_anneal_iters 894 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 895 400
penalty weights 10000.0
args.step pgd_anneal_iters 895 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 896 400
penalty weights 10000.0
args.step pgd_anneal_iters 896 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 897 400
penalty weights 10000.0
args.step pgd_anneal_iters 897 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 898 400
penalty weights 10000.0
args.step pgd_anneal_iters 898 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 899 400
penalty weights 10000.0
args.step pgd_anneal_iters 899 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 900 400
penalty weights 10000.0
args.step pgd_anneal_iters 900 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 901 400
penalty weights 10000.0
args.step pgd_anneal_iters 901 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 902 400
penalty weights 10000.0
args.step pgd_anneal_iters 902 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 903 400
penalty weights 10000.0
args.step pgd_anneal_iters 903 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 904 400
penalty weights 10000.0
args.step pgd_anneal_iters 904 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 905 400
penalty weights 10000.0
args.step pgd_anneal_iters 905 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 906 400
penalty weights 10000.0
args.step pgd_anneal_iters 906 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 907 400
penalty weights 10000.0
args.step pgd_anneal_iters 907 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 908 400
penalty weights 10000.0
args.step pgd_anneal_iters 908 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 909 400
penalty weights 10000.0
args.step pgd_anneal_iters 909 600
dim_v 512
Epoch: [34][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.17 (  0.17)	train_acc   0.49 (  0.50)	train_minacc   0.46 (  0.50)	train_majacc   0.49 (  0.50)	train_corr   0.00 (  0.00)	l1 14.1046 (14.1130)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.40it/s] 27%|##6       | 7/26 [00:00<00:00, 31.64it/s]                                               27%|##6       | 7/26 [00:00<00:00, 31.64it/s] 50%|#####     | 13/26 [00:00<00:00, 39.19it/s] 73%|#######3  | 19/26 [00:00<00:00, 45.98it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 45.98it/s] 96%|#########6| 25/26 [00:00<00:00, 46.48it/s]100%|##########| 26/26 [00:00<00:00, 37.64it/s]
Test: [   0/  26]	Loss 0.691 (0.691)	test_acc   0.49 (  0.49)	test_minacc   0.43 (  0.43)	test_majacc   0.50 (  0.50)	Loss_d 0.691 (0.691)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.43 (  0.43)	test_majacc_d   0.50 (  0.50)	test_corr_d   0.18 (  0.18)
Test: [  10/  26]	Loss 0.681 (0.688)	test_acc   0.57 (  0.51)	test_minacc   0.54 (  0.49)	test_majacc   0.57 (  0.51)	Loss_d 0.681 (0.688)	test_acc_d   0.57 (  0.51)	test_minacc_d   0.54 (  0.49)	test_majacc_d   0.57 (  0.51)	test_corr_d   0.23 (  0.23)
Test: [  20/  26]	Loss 0.689 (0.690)	test_acc   0.51 (  0.50)	test_minacc   0.54 (  0.49)	test_majacc   0.51 (  0.50)	Loss_d 0.689 (0.690)	test_acc_d   0.51 (  0.50)	test_minacc_d   0.54 (  0.49)	test_majacc_d   0.51 (  0.50)	test_corr_d   0.19 (  0.22)
Test: [  26/  26]	Loss 0.692 (0.689)	test_acc   0.49 (  0.50)	test_minacc   0.46 (  0.50)	test_majacc   0.49 (  0.50)	Loss_d 0.692 (0.689)	test_acc_d   0.49 (  0.50)	test_minacc_d   0.46 (  0.50)	test_majacc_d   0.49 (  0.50)	test_corr_d   0.22 (  0.22)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.77it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.08 ( -0.08)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.08 ( -0.08)
Overall Timing[ 34/  1]	epoch_time 0.0371 (0.0379)	validation_time 0.0004 (0.0005)	train_time 0.0367 (0.0372)
record: (train_acc, test_acc) (0.6545000178813934, 0.6200000047683716)
last accs (train_acc, test_acc) (0.5000000124871731, 0.5)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.51it/s] 19%|#9        | 5/26 [00:00<00:00, 23.57it/s] 35%|###4      | 9/26 [00:00<00:00, 27.68it/s] 50%|#####     | 13/26 [00:00<00:00, 29.58it/s] 65%|######5   | 17/26 [00:00<00:00, 30.93it/s] 81%|########  | 21/26 [00:00<00:00, 31.82it/s] 96%|#########6| 25/26 [00:00<00:00, 32.55it/s]100%|##########| 26/26 [00:00<00:00, 28.15it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 910 400
penalty weights 10000.0
args.step pgd_anneal_iters 910 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 911 400
penalty weights 10000.0
args.step pgd_anneal_iters 911 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 912 400
penalty weights 10000.0
args.step pgd_anneal_iters 912 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 913 400
penalty weights 10000.0
args.step pgd_anneal_iters 913 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 914 400
penalty weights 10000.0
args.step pgd_anneal_iters 914 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 915 400
penalty weights 10000.0
args.step pgd_anneal_iters 915 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 916 400
penalty weights 10000.0
args.step pgd_anneal_iters 916 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 917 400
penalty weights 10000.0
args.step pgd_anneal_iters 917 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 918 400
penalty weights 10000.0
args.step pgd_anneal_iters 918 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 919 400
penalty weights 10000.0
args.step pgd_anneal_iters 919 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 920 400
penalty weights 10000.0
args.step pgd_anneal_iters 920 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 921 400
penalty weights 10000.0
args.step pgd_anneal_iters 921 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 922 400
penalty weights 10000.0
args.step pgd_anneal_iters 922 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 923 400
penalty weights 10000.0
args.step pgd_anneal_iters 923 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 924 400
penalty weights 10000.0
args.step pgd_anneal_iters 924 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 925 400
penalty weights 10000.0
args.step pgd_anneal_iters 925 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 926 400
penalty weights 10000.0
args.step pgd_anneal_iters 926 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 927 400
penalty weights 10000.0
args.step pgd_anneal_iters 927 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 928 400
penalty weights 10000.0
args.step pgd_anneal_iters 928 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 929 400
penalty weights 10000.0
args.step pgd_anneal_iters 929 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 930 400
penalty weights 10000.0
args.step pgd_anneal_iters 930 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 931 400
penalty weights 10000.0
args.step pgd_anneal_iters 931 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 932 400
penalty weights 10000.0
args.step pgd_anneal_iters 932 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 933 400
penalty weights 10000.0
args.step pgd_anneal_iters 933 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 934 400
penalty weights 10000.0
args.step pgd_anneal_iters 934 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 935 400
penalty weights 10000.0
args.step pgd_anneal_iters 935 600
dim_v 512
Epoch: [35][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.17 (  0.17)	train_acc   0.49 (  0.50)	train_minacc   0.46 (  0.50)	train_majacc   0.49 (  0.50)	train_corr   0.00 (  0.00)	l1 14.0893 (14.0972)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.24it/s] 27%|##6       | 7/26 [00:00<00:00, 34.55it/s]                                               27%|##6       | 7/26 [00:00<00:00, 34.55it/s] 50%|#####     | 13/26 [00:00<00:00, 40.45it/s] 73%|#######3  | 19/26 [00:00<00:00, 46.49it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 46.49it/s] 96%|#########6| 25/26 [00:00<00:00, 47.88it/s]100%|##########| 26/26 [00:00<00:00, 39.73it/s]
Test: [   0/  26]	Loss 0.691 (0.691)	test_acc   0.49 (  0.49)	test_minacc   0.43 (  0.43)	test_majacc   0.50 (  0.50)	Loss_d 0.691 (0.691)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.43 (  0.43)	test_majacc_d   0.50 (  0.50)	test_corr_d   0.17 (  0.17)
Test: [  10/  26]	Loss 0.682 (0.689)	test_acc   0.57 (  0.51)	test_minacc   0.54 (  0.49)	test_majacc   0.57 (  0.51)	Loss_d 0.682 (0.689)	test_acc_d   0.57 (  0.51)	test_minacc_d   0.54 (  0.49)	test_majacc_d   0.57 (  0.51)	test_corr_d   0.23 (  0.22)
Test: [  20/  26]	Loss 0.689 (0.690)	test_acc   0.51 (  0.50)	test_minacc   0.54 (  0.49)	test_majacc   0.51 (  0.50)	Loss_d 0.689 (0.690)	test_acc_d   0.51 (  0.50)	test_minacc_d   0.54 (  0.49)	test_majacc_d   0.51 (  0.50)	test_corr_d   0.18 (  0.21)
Test: [  26/  26]	Loss 0.692 (0.690)	test_acc   0.49 (  0.50)	test_minacc   0.46 (  0.50)	test_majacc   0.49 (  0.50)	Loss_d 0.692 (0.690)	test_acc_d   0.49 (  0.50)	test_minacc_d   0.46 (  0.50)	test_majacc_d   0.49 (  0.50)	test_corr_d   0.21 (  0.21)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 65.55it/s]
Test: [  0/  1]	Loss 0.692 (0.692)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.692 (0.692)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.09 ( -0.09)
Test: [  1/  1]	Loss 0.692 (0.692)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.692 (0.692)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.09 ( -0.09)
Overall Timing[ 35/  1]	epoch_time 0.0381 (0.0379)	validation_time 0.0003 (0.0005)	train_time 0.0378 (0.0373)
record: (train_acc, test_acc) (0.6545000178813934, 0.6200000047683716)
last accs (train_acc, test_acc) (0.5000000124871731, 0.5)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.84it/s] 19%|#9        | 5/26 [00:00<00:00, 24.09it/s] 35%|###4      | 9/26 [00:00<00:00, 27.78it/s] 50%|#####     | 13/26 [00:00<00:00, 30.35it/s] 65%|######5   | 17/26 [00:00<00:00, 31.09it/s] 81%|########  | 21/26 [00:00<00:00, 32.30it/s] 96%|#########6| 25/26 [00:00<00:00, 33.00it/s]100%|##########| 26/26 [00:00<00:00, 28.85it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 936 400
penalty weights 10000.0
args.step pgd_anneal_iters 936 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 937 400
penalty weights 10000.0
args.step pgd_anneal_iters 937 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 938 400
penalty weights 10000.0
args.step pgd_anneal_iters 938 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 939 400
penalty weights 10000.0
args.step pgd_anneal_iters 939 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 940 400
penalty weights 10000.0
args.step pgd_anneal_iters 940 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 941 400
penalty weights 10000.0
args.step pgd_anneal_iters 941 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 942 400
penalty weights 10000.0
args.step pgd_anneal_iters 942 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 943 400
penalty weights 10000.0
args.step pgd_anneal_iters 943 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 944 400
penalty weights 10000.0
args.step pgd_anneal_iters 944 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 945 400
penalty weights 10000.0
args.step pgd_anneal_iters 945 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 946 400
penalty weights 10000.0
args.step pgd_anneal_iters 946 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 947 400
penalty weights 10000.0
args.step pgd_anneal_iters 947 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 948 400
penalty weights 10000.0
args.step pgd_anneal_iters 948 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 949 400
penalty weights 10000.0
args.step pgd_anneal_iters 949 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 950 400
penalty weights 10000.0
args.step pgd_anneal_iters 950 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 951 400
penalty weights 10000.0
args.step pgd_anneal_iters 951 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 952 400
penalty weights 10000.0
args.step pgd_anneal_iters 952 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 953 400
penalty weights 10000.0
args.step pgd_anneal_iters 953 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 954 400
penalty weights 10000.0
args.step pgd_anneal_iters 954 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 955 400
penalty weights 10000.0
args.step pgd_anneal_iters 955 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 956 400
penalty weights 10000.0
args.step pgd_anneal_iters 956 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 957 400
penalty weights 10000.0
args.step pgd_anneal_iters 957 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 958 400
penalty weights 10000.0
args.step pgd_anneal_iters 958 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 959 400
penalty weights 10000.0
args.step pgd_anneal_iters 959 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 960 400
penalty weights 10000.0
args.step pgd_anneal_iters 960 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 961 400
penalty weights 10000.0
args.step pgd_anneal_iters 961 600
dim_v 512
Epoch: [36][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.17 (  0.17)	train_acc   0.49 (  0.50)	train_minacc   0.46 (  0.50)	train_majacc   0.49 (  0.50)	train_corr   0.00 (  0.00)	l1 14.0751 (14.0825)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.23it/s] 27%|##6       | 7/26 [00:00<00:00, 33.82it/s]                                               27%|##6       | 7/26 [00:00<00:00, 33.82it/s] 50%|#####     | 13/26 [00:00<00:00, 40.39it/s] 73%|#######3  | 19/26 [00:00<00:00, 46.02it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 46.02it/s] 96%|#########6| 25/26 [00:00<00:00, 46.96it/s]100%|##########| 26/26 [00:00<00:00, 39.36it/s]
Test: [   0/  26]	Loss 0.691 (0.691)	test_acc   0.49 (  0.49)	test_minacc   0.43 (  0.43)	test_majacc   0.50 (  0.50)	Loss_d 0.691 (0.691)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.43 (  0.43)	test_majacc_d   0.50 (  0.50)	test_corr_d   0.17 (  0.17)
Test: [  10/  26]	Loss 0.683 (0.689)	test_acc   0.57 (  0.51)	test_minacc   0.54 (  0.49)	test_majacc   0.57 (  0.51)	Loss_d 0.683 (0.689)	test_acc_d   0.57 (  0.51)	test_minacc_d   0.54 (  0.49)	test_majacc_d   0.57 (  0.51)	test_corr_d   0.22 (  0.21)
Test: [  20/  26]	Loss 0.690 (0.690)	test_acc   0.51 (  0.50)	test_minacc   0.54 (  0.49)	test_majacc   0.51 (  0.50)	Loss_d 0.690 (0.690)	test_acc_d   0.51 (  0.50)	test_minacc_d   0.54 (  0.49)	test_majacc_d   0.51 (  0.50)	test_corr_d   0.18 (  0.20)
Test: [  26/  26]	Loss 0.692 (0.690)	test_acc   0.49 (  0.50)	test_minacc   0.46 (  0.50)	test_majacc   0.49 (  0.50)	Loss_d 0.692 (0.690)	test_acc_d   0.49 (  0.50)	test_minacc_d   0.46 (  0.50)	test_majacc_d   0.49 (  0.50)	test_corr_d   0.20 (  0.20)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 64.22it/s]
Test: [  0/  1]	Loss 0.692 (0.692)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.692 (0.692)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.09 ( -0.09)
Test: [  1/  1]	Loss 0.692 (0.692)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.692 (0.692)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.09 ( -0.09)
Overall Timing[ 36/  1]	epoch_time 0.0365 (0.0379)	validation_time 0.0004 (0.0005)	train_time 0.0361 (0.0372)
record: (train_acc, test_acc) (0.6545000178813934, 0.6200000047683716)
last accs (train_acc, test_acc) (0.5000000124871731, 0.5)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.01it/s] 19%|#9        | 5/26 [00:00<00:00, 22.02it/s] 35%|###4      | 9/26 [00:00<00:00, 27.07it/s] 50%|#####     | 13/26 [00:00<00:00, 29.41it/s] 65%|######5   | 17/26 [00:00<00:00, 30.65it/s] 81%|########  | 21/26 [00:00<00:00, 31.99it/s] 96%|#########6| 25/26 [00:00<00:00, 33.13it/s]100%|##########| 26/26 [00:00<00:00, 28.06it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 962 400
penalty weights 10000.0
args.step pgd_anneal_iters 962 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 963 400
penalty weights 10000.0
args.step pgd_anneal_iters 963 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 964 400
penalty weights 10000.0
args.step pgd_anneal_iters 964 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 965 400
penalty weights 10000.0
args.step pgd_anneal_iters 965 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 966 400
penalty weights 10000.0
args.step pgd_anneal_iters 966 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 967 400
penalty weights 10000.0
args.step pgd_anneal_iters 967 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 968 400
penalty weights 10000.0
args.step pgd_anneal_iters 968 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 969 400
penalty weights 10000.0
args.step pgd_anneal_iters 969 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 970 400
penalty weights 10000.0
args.step pgd_anneal_iters 970 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 971 400
penalty weights 10000.0
args.step pgd_anneal_iters 971 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 972 400
penalty weights 10000.0
args.step pgd_anneal_iters 972 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 973 400
penalty weights 10000.0
args.step pgd_anneal_iters 973 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 974 400
penalty weights 10000.0
args.step pgd_anneal_iters 974 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 975 400
penalty weights 10000.0
args.step pgd_anneal_iters 975 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 976 400
penalty weights 10000.0
args.step pgd_anneal_iters 976 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 977 400
penalty weights 10000.0
args.step pgd_anneal_iters 977 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 978 400
penalty weights 10000.0
args.step pgd_anneal_iters 978 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 979 400
penalty weights 10000.0
args.step pgd_anneal_iters 979 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 980 400
penalty weights 10000.0
args.step pgd_anneal_iters 980 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 981 400
penalty weights 10000.0
args.step pgd_anneal_iters 981 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 982 400
penalty weights 10000.0
args.step pgd_anneal_iters 982 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 983 400
penalty weights 10000.0
args.step pgd_anneal_iters 983 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 984 400
penalty weights 10000.0
args.step pgd_anneal_iters 984 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 985 400
penalty weights 10000.0
args.step pgd_anneal_iters 985 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 986 400
penalty weights 10000.0
args.step pgd_anneal_iters 986 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 987 400
penalty weights 10000.0
args.step pgd_anneal_iters 987 600
dim_v 512
Epoch: [37][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.17 (  0.17)	train_acc   0.49 (  0.50)	train_minacc   0.46 (  0.50)	train_majacc   0.49 (  0.50)	train_corr   0.00 (  0.00)	l1 14.0619 (14.0687)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.77it/s] 27%|##6       | 7/26 [00:00<00:00, 38.55it/s]                                               27%|##6       | 7/26 [00:00<00:00, 38.55it/s] 50%|#####     | 13/26 [00:00<00:00, 44.22it/s] 73%|#######3  | 19/26 [00:00<00:00, 47.39it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 47.39it/s] 96%|#########6| 25/26 [00:00<00:00, 49.87it/s]100%|##########| 26/26 [00:00<00:00, 42.00it/s]
Test: [   0/  26]	Loss 0.692 (0.692)	test_acc   0.49 (  0.49)	test_minacc   0.43 (  0.43)	test_majacc   0.50 (  0.50)	Loss_d 0.692 (0.692)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.43 (  0.43)	test_majacc_d   0.50 (  0.50)	test_corr_d   0.16 (  0.16)
Test: [  10/  26]	Loss 0.683 (0.689)	test_acc   0.57 (  0.51)	test_minacc   0.54 (  0.49)	test_majacc   0.57 (  0.51)	Loss_d 0.683 (0.689)	test_acc_d   0.57 (  0.51)	test_minacc_d   0.54 (  0.49)	test_majacc_d   0.57 (  0.51)	test_corr_d   0.21 (  0.20)
Test: [  20/  26]	Loss 0.690 (0.691)	test_acc   0.51 (  0.50)	test_minacc   0.54 (  0.49)	test_majacc   0.51 (  0.50)	Loss_d 0.690 (0.691)	test_acc_d   0.51 (  0.50)	test_minacc_d   0.54 (  0.49)	test_majacc_d   0.51 (  0.50)	test_corr_d   0.17 (  0.19)
Test: [  26/  26]	Loss 0.692 (0.690)	test_acc   0.49 (  0.50)	test_minacc   0.46 (  0.50)	test_majacc   0.49 (  0.50)	Loss_d 0.692 (0.690)	test_acc_d   0.49 (  0.50)	test_minacc_d   0.46 (  0.50)	test_majacc_d   0.49 (  0.50)	test_corr_d   0.19 (  0.19)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 65.90it/s]
Test: [  0/  1]	Loss 0.692 (0.692)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.692 (0.692)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.09 ( -0.09)
Test: [  1/  1]	Loss 0.692 (0.692)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.692 (0.692)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.09 ( -0.09)
Overall Timing[ 37/  1]	epoch_time 0.0379 (0.0379)	validation_time 0.0003 (0.0005)	train_time 0.0375 (0.0372)
record: (train_acc, test_acc) (0.6545000178813934, 0.6200000047683716)
last accs (train_acc, test_acc) (0.5000000124871731, 0.5)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.96it/s] 19%|#9        | 5/26 [00:00<00:00, 21.13it/s] 35%|###4      | 9/26 [00:00<00:00, 26.55it/s] 50%|#####     | 13/26 [00:00<00:00, 29.22it/s] 65%|######5   | 17/26 [00:00<00:00, 31.01it/s] 81%|########  | 21/26 [00:00<00:00, 32.07it/s] 96%|#########6| 25/26 [00:00<00:00, 32.70it/s]100%|##########| 26/26 [00:00<00:00, 27.61it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 988 400
penalty weights 10000.0
args.step pgd_anneal_iters 988 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 989 400
penalty weights 10000.0
args.step pgd_anneal_iters 989 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 990 400
penalty weights 10000.0
args.step pgd_anneal_iters 990 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 991 400
penalty weights 10000.0
args.step pgd_anneal_iters 991 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 992 400
penalty weights 10000.0
args.step pgd_anneal_iters 992 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 993 400
penalty weights 10000.0
args.step pgd_anneal_iters 993 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 994 400
penalty weights 10000.0
args.step pgd_anneal_iters 994 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 995 400
penalty weights 10000.0
args.step pgd_anneal_iters 995 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 996 400
penalty weights 10000.0
args.step pgd_anneal_iters 996 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 997 400
penalty weights 10000.0
args.step pgd_anneal_iters 997 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 998 400
penalty weights 10000.0
args.step pgd_anneal_iters 998 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 999 400
penalty weights 10000.0
args.step pgd_anneal_iters 999 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1000 400
penalty weights 10000.0
args.step pgd_anneal_iters 1000 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1001 400
penalty weights 10000.0
args.step pgd_anneal_iters 1001 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1002 400
penalty weights 10000.0
args.step pgd_anneal_iters 1002 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1003 400
penalty weights 10000.0
args.step pgd_anneal_iters 1003 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1004 400
penalty weights 10000.0
args.step pgd_anneal_iters 1004 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1005 400
penalty weights 10000.0
args.step pgd_anneal_iters 1005 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1006 400
penalty weights 10000.0
args.step pgd_anneal_iters 1006 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1007 400
penalty weights 10000.0
args.step pgd_anneal_iters 1007 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1008 400
penalty weights 10000.0
args.step pgd_anneal_iters 1008 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1009 400
penalty weights 10000.0
args.step pgd_anneal_iters 1009 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1010 400
penalty weights 10000.0
args.step pgd_anneal_iters 1010 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1011 400
penalty weights 10000.0
args.step pgd_anneal_iters 1011 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1012 400
penalty weights 10000.0
args.step pgd_anneal_iters 1012 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1013 400
penalty weights 10000.0
args.step pgd_anneal_iters 1013 600
dim_v 512
Epoch: [38][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.17 (  0.17)	train_acc   0.49 (  0.50)	train_minacc   0.46 (  0.50)	train_majacc   0.49 (  0.50)	train_corr   0.00 (  0.00)	l1 14.0495 (14.0558)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.81it/s] 27%|##6       | 7/26 [00:00<00:00, 32.11it/s]                                               27%|##6       | 7/26 [00:00<00:00, 32.11it/s] 50%|#####     | 13/26 [00:00<00:00, 40.35it/s] 73%|#######3  | 19/26 [00:00<00:00, 46.60it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 46.60it/s] 96%|#########6| 25/26 [00:00<00:00, 47.17it/s]100%|##########| 26/26 [00:00<00:00, 38.54it/s]
Test: [   0/  26]	Loss 0.692 (0.692)	test_acc   0.49 (  0.49)	test_minacc   0.43 (  0.43)	test_majacc   0.50 (  0.50)	Loss_d 0.692 (0.692)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.43 (  0.43)	test_majacc_d   0.50 (  0.50)	test_corr_d   0.15 (  0.15)
Test: [  10/  26]	Loss 0.684 (0.690)	test_acc   0.57 (  0.51)	test_minacc   0.54 (  0.49)	test_majacc   0.57 (  0.51)	Loss_d 0.684 (0.690)	test_acc_d   0.57 (  0.51)	test_minacc_d   0.54 (  0.49)	test_majacc_d   0.57 (  0.51)	test_corr_d   0.20 (  0.19)
Test: [  20/  26]	Loss 0.690 (0.691)	test_acc   0.51 (  0.50)	test_minacc   0.54 (  0.49)	test_majacc   0.51 (  0.50)	Loss_d 0.690 (0.691)	test_acc_d   0.51 (  0.50)	test_minacc_d   0.54 (  0.49)	test_majacc_d   0.51 (  0.50)	test_corr_d   0.16 (  0.19)
Test: [  26/  26]	Loss 0.693 (0.691)	test_acc   0.49 (  0.50)	test_minacc   0.46 (  0.50)	test_majacc   0.49 (  0.50)	Loss_d 0.693 (0.691)	test_acc_d   0.49 (  0.50)	test_minacc_d   0.46 (  0.50)	test_majacc_d   0.49 (  0.50)	test_corr_d   0.18 (  0.18)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.18it/s]
Test: [  0/  1]	Loss 0.692 (0.692)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.692 (0.692)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.10 ( -0.10)
Test: [  1/  1]	Loss 0.692 (0.692)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.692 (0.692)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.10 ( -0.10)
Overall Timing[ 38/  1]	epoch_time 0.0379 (0.0379)	validation_time 0.0003 (0.0005)	train_time 0.0376 (0.0372)
record: (train_acc, test_acc) (0.6545000178813934, 0.6200000047683716)
last accs (train_acc, test_acc) (0.5000000124871731, 0.5)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.29it/s] 19%|#9        | 5/26 [00:00<00:00, 23.57it/s] 35%|###4      | 9/26 [00:00<00:00, 27.89it/s] 50%|#####     | 13/26 [00:00<00:00, 30.59it/s] 65%|######5   | 17/26 [00:00<00:00, 32.44it/s] 81%|########  | 21/26 [00:00<00:00, 32.77it/s] 96%|#########6| 25/26 [00:00<00:00, 33.01it/s]100%|##########| 26/26 [00:00<00:00, 28.55it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1014 400
penalty weights 10000.0
args.step pgd_anneal_iters 1014 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1015 400
penalty weights 10000.0
args.step pgd_anneal_iters 1015 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1016 400
penalty weights 10000.0
args.step pgd_anneal_iters 1016 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1017 400
penalty weights 10000.0
args.step pgd_anneal_iters 1017 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1018 400
penalty weights 10000.0
args.step pgd_anneal_iters 1018 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1019 400
penalty weights 10000.0
args.step pgd_anneal_iters 1019 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1020 400
penalty weights 10000.0
args.step pgd_anneal_iters 1020 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1021 400
penalty weights 10000.0
args.step pgd_anneal_iters 1021 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1022 400
penalty weights 10000.0
args.step pgd_anneal_iters 1022 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1023 400
penalty weights 10000.0
args.step pgd_anneal_iters 1023 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1024 400
penalty weights 10000.0
args.step pgd_anneal_iters 1024 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1025 400
penalty weights 10000.0
args.step pgd_anneal_iters 1025 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1026 400
penalty weights 10000.0
args.step pgd_anneal_iters 1026 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1027 400
penalty weights 10000.0
args.step pgd_anneal_iters 1027 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1028 400
penalty weights 10000.0
args.step pgd_anneal_iters 1028 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1029 400
penalty weights 10000.0
args.step pgd_anneal_iters 1029 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1030 400
penalty weights 10000.0
args.step pgd_anneal_iters 1030 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1031 400
penalty weights 10000.0
args.step pgd_anneal_iters 1031 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1032 400
penalty weights 10000.0
args.step pgd_anneal_iters 1032 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1033 400
penalty weights 10000.0
args.step pgd_anneal_iters 1033 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1034 400
penalty weights 10000.0
args.step pgd_anneal_iters 1034 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1035 400
penalty weights 10000.0
args.step pgd_anneal_iters 1035 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1036 400
penalty weights 10000.0
args.step pgd_anneal_iters 1036 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1037 400
penalty weights 10000.0
args.step pgd_anneal_iters 1037 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1038 400
penalty weights 10000.0
args.step pgd_anneal_iters 1038 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1039 400
penalty weights 10000.0
args.step pgd_anneal_iters 1039 600
dim_v 512
Epoch: [39][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.17 (  0.17)	train_acc   0.49 (  0.50)	train_minacc   0.46 (  0.50)	train_majacc   0.49 (  0.50)	train_corr   0.00 (  0.00)	l1 14.0379 (14.0438)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s] 15%|#5        | 4/26 [00:00<00:00, 38.30it/s] 35%|###4      | 9/26 [00:00<00:00, 42.10it/s]                                               35%|###4      | 9/26 [00:00<00:00, 42.10it/s] 58%|#####7    | 15/26 [00:00<00:00, 48.61it/s]                                                58%|#####7    | 15/26 [00:00<00:00, 48.61it/s] 81%|########  | 21/26 [00:00<00:00, 48.27it/s]100%|##########| 26/26 [00:00<00:00, 43.84it/s]
Test: [   0/  26]	Loss 0.692 (0.692)	test_acc   0.49 (  0.49)	test_minacc   0.43 (  0.43)	test_majacc   0.50 (  0.50)	Loss_d 0.692 (0.692)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.43 (  0.43)	test_majacc_d   0.50 (  0.50)	test_corr_d   0.14 (  0.14)
Test: [  10/  26]	Loss 0.685 (0.690)	test_acc   0.57 (  0.51)	test_minacc   0.54 (  0.49)	test_majacc   0.57 (  0.51)	Loss_d 0.685 (0.690)	test_acc_d   0.57 (  0.51)	test_minacc_d   0.54 (  0.49)	test_majacc_d   0.57 (  0.51)	test_corr_d   0.19 (  0.18)
Test: [  20/  26]	Loss 0.690 (0.691)	test_acc   0.51 (  0.50)	test_minacc   0.54 (  0.49)	test_majacc   0.51 (  0.50)	Loss_d 0.690 (0.691)	test_acc_d   0.51 (  0.50)	test_minacc_d   0.54 (  0.49)	test_majacc_d   0.51 (  0.50)	test_corr_d   0.15 (  0.17)
Test: [  26/  26]	Loss 0.693 (0.691)	test_acc   0.49 (  0.50)	test_minacc   0.46 (  0.50)	test_majacc   0.49 (  0.50)	Loss_d 0.693 (0.691)	test_acc_d   0.49 (  0.50)	test_minacc_d   0.46 (  0.50)	test_majacc_d   0.49 (  0.50)	test_corr_d   0.16 (  0.17)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.46it/s]
Test: [  0/  1]	Loss 0.692 (0.692)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.692 (0.692)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.11 ( -0.11)
Test: [  1/  1]	Loss 0.692 (0.692)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.692 (0.692)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.11 ( -0.11)
Overall Timing[ 39/  1]	epoch_time 0.0352 (0.0378)	validation_time 0.0005 (0.0005)	train_time 0.0347 (0.0372)
record: (train_acc, test_acc) (0.6545000178813934, 0.6200000047683716)
last accs (train_acc, test_acc) (0.5000000124871731, 0.5)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.38it/s] 19%|#9        | 5/26 [00:00<00:00, 23.57it/s] 35%|###4      | 9/26 [00:00<00:00, 28.36it/s] 50%|#####     | 13/26 [00:00<00:00, 31.07it/s] 65%|######5   | 17/26 [00:00<00:00, 32.75it/s] 81%|########  | 21/26 [00:00<00:00, 33.71it/s] 96%|#########6| 25/26 [00:00<00:00, 33.82it/s]100%|##########| 26/26 [00:00<00:00, 29.24it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1040 400
penalty weights 10000.0
args.step pgd_anneal_iters 1040 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1041 400
penalty weights 10000.0
args.step pgd_anneal_iters 1041 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1042 400
penalty weights 10000.0
args.step pgd_anneal_iters 1042 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1043 400
penalty weights 10000.0
args.step pgd_anneal_iters 1043 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1044 400
penalty weights 10000.0
args.step pgd_anneal_iters 1044 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1045 400
penalty weights 10000.0
args.step pgd_anneal_iters 1045 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1046 400
penalty weights 10000.0
args.step pgd_anneal_iters 1046 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1047 400
penalty weights 10000.0
args.step pgd_anneal_iters 1047 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1048 400
penalty weights 10000.0
args.step pgd_anneal_iters 1048 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1049 400
penalty weights 10000.0
args.step pgd_anneal_iters 1049 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1050 400
penalty weights 10000.0
args.step pgd_anneal_iters 1050 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1051 400
penalty weights 10000.0
args.step pgd_anneal_iters 1051 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1052 400
penalty weights 10000.0
args.step pgd_anneal_iters 1052 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1053 400
penalty weights 10000.0
args.step pgd_anneal_iters 1053 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1054 400
penalty weights 10000.0
args.step pgd_anneal_iters 1054 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1055 400
penalty weights 10000.0
args.step pgd_anneal_iters 1055 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1056 400
penalty weights 10000.0
args.step pgd_anneal_iters 1056 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1057 400
penalty weights 10000.0
args.step pgd_anneal_iters 1057 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1058 400
penalty weights 10000.0
args.step pgd_anneal_iters 1058 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1059 400
penalty weights 10000.0
args.step pgd_anneal_iters 1059 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1060 400
penalty weights 10000.0
args.step pgd_anneal_iters 1060 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1061 400
penalty weights 10000.0
args.step pgd_anneal_iters 1061 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1062 400
penalty weights 10000.0
args.step pgd_anneal_iters 1062 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1063 400
penalty weights 10000.0
args.step pgd_anneal_iters 1063 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1064 400
penalty weights 10000.0
args.step pgd_anneal_iters 1064 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1065 400
penalty weights 10000.0
args.step pgd_anneal_iters 1065 600
dim_v 512
Epoch: [40][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.17 (  0.17)	train_acc   0.49 (  0.50)	train_minacc   0.46 (  0.50)	train_majacc   0.49 (  0.50)	train_corr   0.00 (  0.00)	l1 14.0273 (14.0327)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 19.47it/s] 27%|##6       | 7/26 [00:00<00:00, 36.78it/s]                                               27%|##6       | 7/26 [00:00<00:00, 36.78it/s] 50%|#####     | 13/26 [00:00<00:00, 42.50it/s] 73%|#######3  | 19/26 [00:00<00:00, 47.67it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 47.67it/s] 96%|#########6| 25/26 [00:00<00:00, 48.61it/s]100%|##########| 26/26 [00:00<00:00, 41.34it/s]
Test: [   0/  26]	Loss 0.692 (0.692)	test_acc   0.49 (  0.49)	test_minacc   0.43 (  0.43)	test_majacc   0.50 (  0.50)	Loss_d 0.692 (0.692)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.43 (  0.43)	test_majacc_d   0.50 (  0.50)	test_corr_d   0.13 (  0.13)
Test: [  10/  26]	Loss 0.685 (0.690)	test_acc   0.57 (  0.51)	test_minacc   0.54 (  0.49)	test_majacc   0.57 (  0.51)	Loss_d 0.685 (0.690)	test_acc_d   0.57 (  0.51)	test_minacc_d   0.54 (  0.49)	test_majacc_d   0.57 (  0.51)	test_corr_d   0.18 (  0.17)
Test: [  20/  26]	Loss 0.691 (0.691)	test_acc   0.51 (  0.50)	test_minacc   0.54 (  0.49)	test_majacc   0.51 (  0.50)	Loss_d 0.691 (0.691)	test_acc_d   0.51 (  0.50)	test_minacc_d   0.54 (  0.49)	test_majacc_d   0.51 (  0.50)	test_corr_d   0.14 (  0.16)
Test: [  26/  26]	Loss 0.693 (0.691)	test_acc   0.49 (  0.50)	test_minacc   0.46 (  0.50)	test_majacc   0.49 (  0.50)	Loss_d 0.693 (0.691)	test_acc_d   0.49 (  0.50)	test_minacc_d   0.46 (  0.50)	test_majacc_d   0.49 (  0.50)	test_corr_d   0.14 (  0.16)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.85it/s]
Test: [  0/  1]	Loss 0.692 (0.692)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.692 (0.692)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.11 ( -0.11)
Test: [  1/  1]	Loss 0.692 (0.692)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.692 (0.692)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.11 ( -0.11)
Overall Timing[ 40/  1]	epoch_time 0.0363 (0.0378)	validation_time 0.0003 (0.0005)	train_time 0.0359 (0.0371)
record: (train_acc, test_acc) (0.6545000178813934, 0.6200000047683716)
last accs (train_acc, test_acc) (0.5000000124871731, 0.5)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.61it/s] 15%|#5        | 4/26 [00:00<00:01, 21.28it/s] 31%|###       | 8/26 [00:00<00:00, 26.98it/s] 46%|####6     | 12/26 [00:00<00:00, 29.60it/s] 62%|######1   | 16/26 [00:00<00:00, 31.00it/s] 77%|#######6  | 20/26 [00:00<00:00, 32.20it/s] 92%|#########2| 24/26 [00:00<00:00, 33.10it/s]100%|##########| 26/26 [00:00<00:00, 28.48it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1066 400
penalty weights 10000.0
args.step pgd_anneal_iters 1066 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1067 400
penalty weights 10000.0
args.step pgd_anneal_iters 1067 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1068 400
penalty weights 10000.0
args.step pgd_anneal_iters 1068 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1069 400
penalty weights 10000.0
args.step pgd_anneal_iters 1069 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1070 400
penalty weights 10000.0
args.step pgd_anneal_iters 1070 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1071 400
penalty weights 10000.0
args.step pgd_anneal_iters 1071 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1072 400
penalty weights 10000.0
args.step pgd_anneal_iters 1072 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1073 400
penalty weights 10000.0
args.step pgd_anneal_iters 1073 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1074 400
penalty weights 10000.0
args.step pgd_anneal_iters 1074 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1075 400
penalty weights 10000.0
args.step pgd_anneal_iters 1075 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1076 400
penalty weights 10000.0
args.step pgd_anneal_iters 1076 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1077 400
penalty weights 10000.0
args.step pgd_anneal_iters 1077 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1078 400
penalty weights 10000.0
args.step pgd_anneal_iters 1078 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1079 400
penalty weights 10000.0
args.step pgd_anneal_iters 1079 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1080 400
penalty weights 10000.0
args.step pgd_anneal_iters 1080 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1081 400
penalty weights 10000.0
args.step pgd_anneal_iters 1081 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1082 400
penalty weights 10000.0
args.step pgd_anneal_iters 1082 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1083 400
penalty weights 10000.0
args.step pgd_anneal_iters 1083 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1084 400
penalty weights 10000.0
args.step pgd_anneal_iters 1084 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1085 400
penalty weights 10000.0
args.step pgd_anneal_iters 1085 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1086 400
penalty weights 10000.0
args.step pgd_anneal_iters 1086 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1087 400
penalty weights 10000.0
args.step pgd_anneal_iters 1087 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1088 400
penalty weights 10000.0
args.step pgd_anneal_iters 1088 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1089 400
penalty weights 10000.0
args.step pgd_anneal_iters 1089 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1090 400
penalty weights 10000.0
args.step pgd_anneal_iters 1090 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1091 400
penalty weights 10000.0
args.step pgd_anneal_iters 1091 600
dim_v 512
Epoch: [41][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.17 (  0.17)	train_acc   0.49 (  0.50)	train_minacc   0.46 (  0.50)	train_majacc   0.49 (  0.50)	train_corr   0.00 (  0.00)	l1 14.0173 (14.0224)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.21it/s] 27%|##6       | 7/26 [00:00<00:00, 34.35it/s]                                               27%|##6       | 7/26 [00:00<00:00, 34.35it/s] 46%|####6     | 12/26 [00:00<00:00, 40.51it/s] 65%|######5   | 17/26 [00:00<00:00, 42.32it/s]                                                65%|######5   | 17/26 [00:00<00:00, 42.32it/s] 88%|########8 | 23/26 [00:00<00:00, 46.64it/s]100%|##########| 26/26 [00:00<00:00, 38.43it/s]
Test: [   0/  26]	Loss 0.692 (0.692)	test_acc   0.49 (  0.49)	test_minacc   0.43 (  0.43)	test_majacc   0.50 (  0.50)	Loss_d 0.692 (0.692)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.43 (  0.43)	test_majacc_d   0.50 (  0.50)	test_corr_d   0.12 (  0.12)
Test: [  10/  26]	Loss 0.686 (0.691)	test_acc   0.57 (  0.51)	test_minacc   0.54 (  0.49)	test_majacc   0.57 (  0.51)	Loss_d 0.686 (0.691)	test_acc_d   0.57 (  0.51)	test_minacc_d   0.54 (  0.49)	test_majacc_d   0.57 (  0.51)	test_corr_d   0.17 (  0.16)
Test: [  20/  26]	Loss 0.691 (0.692)	test_acc   0.51 (  0.50)	test_minacc   0.54 (  0.49)	test_majacc   0.51 (  0.50)	Loss_d 0.691 (0.692)	test_acc_d   0.51 (  0.50)	test_minacc_d   0.54 (  0.49)	test_majacc_d   0.51 (  0.50)	test_corr_d   0.13 (  0.15)
Test: [  26/  26]	Loss 0.693 (0.692)	test_acc   0.49 (  0.50)	test_minacc   0.46 (  0.50)	test_majacc   0.49 (  0.50)	Loss_d 0.693 (0.692)	test_acc_d   0.49 (  0.50)	test_minacc_d   0.46 (  0.50)	test_majacc_d   0.49 (  0.50)	test_corr_d   0.12 (  0.15)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.20it/s]
Test: [  0/  1]	Loss 0.692 (0.692)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.692 (0.692)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.12 ( -0.12)
Test: [  1/  1]	Loss 0.692 (0.692)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.692 (0.692)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.12 ( -0.12)
Overall Timing[ 41/  1]	epoch_time 0.0378 (0.0378)	validation_time 0.0004 (0.0005)	train_time 0.0374 (0.0371)
record: (train_acc, test_acc) (0.6545000178813934, 0.6200000047683716)
last accs (train_acc, test_acc) (0.5000000124871731, 0.5)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.96it/s] 19%|#9        | 5/26 [00:00<00:01, 20.83it/s] 35%|###4      | 9/26 [00:00<00:00, 26.29it/s] 50%|#####     | 13/26 [00:00<00:00, 29.19it/s] 65%|######5   | 17/26 [00:00<00:00, 30.66it/s] 81%|########  | 21/26 [00:00<00:00, 31.84it/s] 96%|#########6| 25/26 [00:00<00:00, 32.32it/s]100%|##########| 26/26 [00:00<00:00, 27.33it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1092 400
penalty weights 10000.0
args.step pgd_anneal_iters 1092 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1093 400
penalty weights 10000.0
args.step pgd_anneal_iters 1093 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1094 400
penalty weights 10000.0
args.step pgd_anneal_iters 1094 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1095 400
penalty weights 10000.0
args.step pgd_anneal_iters 1095 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1096 400
penalty weights 10000.0
args.step pgd_anneal_iters 1096 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1097 400
penalty weights 10000.0
args.step pgd_anneal_iters 1097 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1098 400
penalty weights 10000.0
args.step pgd_anneal_iters 1098 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1099 400
penalty weights 10000.0
args.step pgd_anneal_iters 1099 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1100 400
penalty weights 10000.0
args.step pgd_anneal_iters 1100 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1101 400
penalty weights 10000.0
args.step pgd_anneal_iters 1101 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1102 400
penalty weights 10000.0
args.step pgd_anneal_iters 1102 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1103 400
penalty weights 10000.0
args.step pgd_anneal_iters 1103 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1104 400
penalty weights 10000.0
args.step pgd_anneal_iters 1104 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1105 400
penalty weights 10000.0
args.step pgd_anneal_iters 1105 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1106 400
penalty weights 10000.0
args.step pgd_anneal_iters 1106 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1107 400
penalty weights 10000.0
args.step pgd_anneal_iters 1107 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1108 400
penalty weights 10000.0
args.step pgd_anneal_iters 1108 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1109 400
penalty weights 10000.0
args.step pgd_anneal_iters 1109 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1110 400
penalty weights 10000.0
args.step pgd_anneal_iters 1110 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1111 400
penalty weights 10000.0
args.step pgd_anneal_iters 1111 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1112 400
penalty weights 10000.0
args.step pgd_anneal_iters 1112 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1113 400
penalty weights 10000.0
args.step pgd_anneal_iters 1113 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1114 400
penalty weights 10000.0
args.step pgd_anneal_iters 1114 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1115 400
penalty weights 10000.0
args.step pgd_anneal_iters 1115 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1116 400
penalty weights 10000.0
args.step pgd_anneal_iters 1116 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1117 400
penalty weights 10000.0
args.step pgd_anneal_iters 1117 600
dim_v 512
Epoch: [42][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.17 (  0.17)	train_acc   0.49 (  0.50)	train_minacc   0.46 (  0.50)	train_majacc   0.49 (  0.50)	train_corr   0.00 (  0.00)	l1 14.0082 (14.0128)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 19.64it/s] 31%|###       | 8/26 [00:00<00:00, 37.81it/s]                                               31%|###       | 8/26 [00:00<00:00, 37.81it/s] 54%|#####3    | 14/26 [00:00<00:00, 43.87it/s] 77%|#######6  | 20/26 [00:00<00:00, 47.92it/s]                                                77%|#######6  | 20/26 [00:00<00:00, 47.92it/s]100%|##########| 26/26 [00:00<00:00, 50.30it/s]100%|##########| 26/26 [00:00<00:00, 42.01it/s]
Test: [   0/  26]	Loss 0.692 (0.692)	test_acc   0.49 (  0.49)	test_minacc   0.43 (  0.43)	test_majacc   0.50 (  0.50)	Loss_d 0.692 (0.692)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.43 (  0.43)	test_majacc_d   0.50 (  0.50)	test_corr_d   0.11 (  0.11)
Test: [  10/  26]	Loss 0.687 (0.691)	test_acc   0.57 (  0.51)	test_minacc   0.54 (  0.49)	test_majacc   0.57 (  0.51)	Loss_d 0.687 (0.691)	test_acc_d   0.57 (  0.51)	test_minacc_d   0.54 (  0.49)	test_majacc_d   0.57 (  0.51)	test_corr_d   0.16 (  0.14)
Test: [  20/  26]	Loss 0.691 (0.692)	test_acc   0.51 (  0.50)	test_minacc   0.54 (  0.49)	test_majacc   0.51 (  0.50)	Loss_d 0.691 (0.692)	test_acc_d   0.51 (  0.50)	test_minacc_d   0.54 (  0.49)	test_majacc_d   0.51 (  0.50)	test_corr_d   0.11 (  0.13)
Test: [  26/  26]	Loss 0.693 (0.692)	test_acc   0.49 (  0.50)	test_minacc   0.46 (  0.50)	test_majacc   0.49 (  0.50)	Loss_d 0.693 (0.692)	test_acc_d   0.49 (  0.50)	test_minacc_d   0.46 (  0.50)	test_majacc_d   0.49 (  0.50)	test_corr_d   0.10 (  0.13)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 67.06it/s]
Test: [  0/  1]	Loss 0.692 (0.692)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.692 (0.692)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.13 ( -0.13)
Test: [  1/  1]	Loss 0.692 (0.692)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.692 (0.692)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.13 ( -0.13)
Overall Timing[ 42/  1]	epoch_time 0.0370 (0.0378)	validation_time 0.0004 (0.0005)	train_time 0.0366 (0.0371)
record: (train_acc, test_acc) (0.6545000178813934, 0.6200000047683716)
last accs (train_acc, test_acc) (0.5000000124871731, 0.5)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.16it/s] 19%|#9        | 5/26 [00:00<00:00, 22.91it/s] 35%|###4      | 9/26 [00:00<00:00, 28.10it/s] 50%|#####     | 13/26 [00:00<00:00, 30.73it/s] 65%|######5   | 17/26 [00:00<00:00, 32.30it/s] 81%|########  | 21/26 [00:00<00:00, 33.37it/s] 96%|#########6| 25/26 [00:00<00:00, 34.07it/s]100%|##########| 26/26 [00:00<00:00, 28.95it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1118 400
penalty weights 10000.0
args.step pgd_anneal_iters 1118 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1119 400
penalty weights 10000.0
args.step pgd_anneal_iters 1119 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1120 400
penalty weights 10000.0
args.step pgd_anneal_iters 1120 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1121 400
penalty weights 10000.0
args.step pgd_anneal_iters 1121 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1122 400
penalty weights 10000.0
args.step pgd_anneal_iters 1122 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1123 400
penalty weights 10000.0
args.step pgd_anneal_iters 1123 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1124 400
penalty weights 10000.0
args.step pgd_anneal_iters 1124 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1125 400
penalty weights 10000.0
args.step pgd_anneal_iters 1125 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1126 400
penalty weights 10000.0
args.step pgd_anneal_iters 1126 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1127 400
penalty weights 10000.0
args.step pgd_anneal_iters 1127 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1128 400
penalty weights 10000.0
args.step pgd_anneal_iters 1128 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1129 400
penalty weights 10000.0
args.step pgd_anneal_iters 1129 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1130 400
penalty weights 10000.0
args.step pgd_anneal_iters 1130 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1131 400
penalty weights 10000.0
args.step pgd_anneal_iters 1131 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1132 400
penalty weights 10000.0
args.step pgd_anneal_iters 1132 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1133 400
penalty weights 10000.0
args.step pgd_anneal_iters 1133 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1134 400
penalty weights 10000.0
args.step pgd_anneal_iters 1134 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1135 400
penalty weights 10000.0
args.step pgd_anneal_iters 1135 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1136 400
penalty weights 10000.0
args.step pgd_anneal_iters 1136 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1137 400
penalty weights 10000.0
args.step pgd_anneal_iters 1137 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1138 400
penalty weights 10000.0
args.step pgd_anneal_iters 1138 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1139 400
penalty weights 10000.0
args.step pgd_anneal_iters 1139 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1140 400
penalty weights 10000.0
args.step pgd_anneal_iters 1140 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1141 400
penalty weights 10000.0
args.step pgd_anneal_iters 1141 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1142 400
penalty weights 10000.0
args.step pgd_anneal_iters 1142 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1143 400
penalty weights 10000.0
args.step pgd_anneal_iters 1143 600
dim_v 512
Epoch: [43][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.17 (  0.17)	train_acc   0.49 (  0.50)	train_minacc   0.46 (  0.50)	train_majacc   0.49 (  0.50)	train_corr   0.00 (  0.00)	l1 13.9997 (14.0040)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.34it/s] 27%|##6       | 7/26 [00:00<00:00, 30.29it/s]                                               27%|##6       | 7/26 [00:00<00:00, 30.29it/s] 50%|#####     | 13/26 [00:00<00:00, 38.15it/s] 73%|#######3  | 19/26 [00:00<00:00, 44.71it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 44.71it/s] 96%|#########6| 25/26 [00:00<00:00, 45.86it/s]100%|##########| 26/26 [00:00<00:00, 37.29it/s]
Test: [   0/  26]	Loss 0.692 (0.692)	test_acc   0.49 (  0.49)	test_minacc   0.43 (  0.43)	test_majacc   0.50 (  0.50)	Loss_d 0.692 (0.692)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.43 (  0.43)	test_majacc_d   0.50 (  0.50)	test_corr_d   0.09 (  0.09)
Test: [  10/  26]	Loss 0.687 (0.691)	test_acc   0.57 (  0.51)	test_minacc   0.54 (  0.49)	test_majacc   0.57 (  0.51)	Loss_d 0.687 (0.691)	test_acc_d   0.57 (  0.51)	test_minacc_d   0.54 (  0.49)	test_majacc_d   0.57 (  0.51)	test_corr_d   0.14 (  0.12)
Test: [  20/  26]	Loss 0.691 (0.692)	test_acc   0.51 (  0.50)	test_minacc   0.54 (  0.49)	test_majacc   0.51 (  0.50)	Loss_d 0.691 (0.692)	test_acc_d   0.51 (  0.50)	test_minacc_d   0.54 (  0.49)	test_majacc_d   0.51 (  0.50)	test_corr_d   0.10 (  0.12)
Test: [  26/  26]	Loss 0.693 (0.692)	test_acc   0.49 (  0.50)	test_minacc   0.46 (  0.50)	test_majacc   0.49 (  0.50)	Loss_d 0.693 (0.692)	test_acc_d   0.49 (  0.50)	test_minacc_d   0.46 (  0.50)	test_majacc_d   0.49 (  0.50)	test_corr_d   0.07 (  0.11)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 65.32it/s]
Test: [  0/  1]	Loss 0.692 (0.692)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.692 (0.692)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.14 ( -0.14)
Test: [  1/  1]	Loss 0.692 (0.692)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.692 (0.692)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.14 ( -0.14)
Overall Timing[ 43/  1]	epoch_time 0.0369 (0.0378)	validation_time 0.0004 (0.0005)	train_time 0.0366 (0.0371)
record: (train_acc, test_acc) (0.6545000178813934, 0.6200000047683716)
last accs (train_acc, test_acc) (0.5000000124871731, 0.5)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 17.04it/s] 23%|##3       | 6/26 [00:00<00:00, 26.40it/s] 38%|###8      | 10/26 [00:00<00:00, 29.67it/s] 54%|#####3    | 14/26 [00:00<00:00, 31.28it/s] 69%|######9   | 18/26 [00:00<00:00, 32.51it/s] 85%|########4 | 22/26 [00:00<00:00, 33.18it/s]100%|##########| 26/26 [00:00<00:00, 33.34it/s]100%|##########| 26/26 [00:00<00:00, 29.26it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1144 400
penalty weights 10000.0
args.step pgd_anneal_iters 1144 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1145 400
penalty weights 10000.0
args.step pgd_anneal_iters 1145 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1146 400
penalty weights 10000.0
args.step pgd_anneal_iters 1146 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1147 400
penalty weights 10000.0
args.step pgd_anneal_iters 1147 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1148 400
penalty weights 10000.0
args.step pgd_anneal_iters 1148 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1149 400
penalty weights 10000.0
args.step pgd_anneal_iters 1149 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1150 400
penalty weights 10000.0
args.step pgd_anneal_iters 1150 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1151 400
penalty weights 10000.0
args.step pgd_anneal_iters 1151 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1152 400
penalty weights 10000.0
args.step pgd_anneal_iters 1152 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1153 400
penalty weights 10000.0
args.step pgd_anneal_iters 1153 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1154 400
penalty weights 10000.0
args.step pgd_anneal_iters 1154 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1155 400
penalty weights 10000.0
args.step pgd_anneal_iters 1155 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1156 400
penalty weights 10000.0
args.step pgd_anneal_iters 1156 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1157 400
penalty weights 10000.0
args.step pgd_anneal_iters 1157 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1158 400
penalty weights 10000.0
args.step pgd_anneal_iters 1158 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1159 400
penalty weights 10000.0
args.step pgd_anneal_iters 1159 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1160 400
penalty weights 10000.0
args.step pgd_anneal_iters 1160 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1161 400
penalty weights 10000.0
args.step pgd_anneal_iters 1161 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1162 400
penalty weights 10000.0
args.step pgd_anneal_iters 1162 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1163 400
penalty weights 10000.0
args.step pgd_anneal_iters 1163 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1164 400
penalty weights 10000.0
args.step pgd_anneal_iters 1164 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1165 400
penalty weights 10000.0
args.step pgd_anneal_iters 1165 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1166 400
penalty weights 10000.0
args.step pgd_anneal_iters 1166 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1167 400
penalty weights 10000.0
args.step pgd_anneal_iters 1167 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1168 400
penalty weights 10000.0
args.step pgd_anneal_iters 1168 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1169 400
penalty weights 10000.0
args.step pgd_anneal_iters 1169 600
dim_v 512
Epoch: [44][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.17 (  0.17)	train_acc   0.49 (  0.50)	train_minacc   0.46 (  0.50)	train_majacc   0.49 (  0.50)	train_corr   0.00 (  0.00)	l1 13.9919 (13.9958)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.83it/s] 27%|##6       | 7/26 [00:00<00:00, 33.03it/s]                                               27%|##6       | 7/26 [00:00<00:00, 33.03it/s] 50%|#####     | 13/26 [00:00<00:00, 40.52it/s] 73%|#######3  | 19/26 [00:00<00:00, 46.93it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 46.93it/s] 96%|#########6| 25/26 [00:00<00:00, 47.25it/s]100%|##########| 26/26 [00:00<00:00, 39.12it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.49 (  0.49)	test_minacc   0.43 (  0.43)	test_majacc   0.50 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.43 (  0.43)	test_majacc_d   0.50 (  0.50)	test_corr_d   0.08 (  0.08)
Test: [  10/  26]	Loss 0.688 (0.692)	test_acc   0.57 (  0.51)	test_minacc   0.54 (  0.49)	test_majacc   0.57 (  0.51)	Loss_d 0.688 (0.692)	test_acc_d   0.57 (  0.51)	test_minacc_d   0.54 (  0.49)	test_majacc_d   0.57 (  0.51)	test_corr_d   0.12 (  0.10)
Test: [  20/  26]	Loss 0.692 (0.692)	test_acc   0.51 (  0.50)	test_minacc   0.54 (  0.49)	test_majacc   0.51 (  0.50)	Loss_d 0.692 (0.692)	test_acc_d   0.51 (  0.50)	test_minacc_d   0.54 (  0.49)	test_majacc_d   0.51 (  0.50)	test_corr_d   0.08 (  0.10)
Test: [  26/  26]	Loss 0.693 (0.692)	test_acc   0.49 (  0.50)	test_minacc   0.46 (  0.50)	test_majacc   0.49 (  0.50)	Loss_d 0.693 (0.692)	test_acc_d   0.49 (  0.50)	test_minacc_d   0.46 (  0.50)	test_majacc_d   0.49 (  0.50)	test_corr_d   0.04 (  0.09)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.53it/s]
Test: [  0/  1]	Loss 0.692 (0.692)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.692 (0.692)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.16 ( -0.16)
Test: [  1/  1]	Loss 0.692 (0.692)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.692 (0.692)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.16 ( -0.16)
Overall Timing[ 44/  1]	epoch_time 0.0372 (0.0377)	validation_time 0.0004 (0.0005)	train_time 0.0368 (0.0371)
record: (train_acc, test_acc) (0.6545000178813934, 0.6200000047683716)
last accs (train_acc, test_acc) (0.5000000124871731, 0.5)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.73it/s] 19%|#9        | 5/26 [00:00<00:00, 24.46it/s] 35%|###4      | 9/26 [00:00<00:00, 28.95it/s] 50%|#####     | 13/26 [00:00<00:00, 31.36it/s] 65%|######5   | 17/26 [00:00<00:00, 32.63it/s] 81%|########  | 21/26 [00:00<00:00, 33.30it/s] 96%|#########6| 25/26 [00:00<00:00, 33.57it/s]100%|##########| 26/26 [00:00<00:00, 29.34it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1170 400
penalty weights 10000.0
args.step pgd_anneal_iters 1170 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1171 400
penalty weights 10000.0
args.step pgd_anneal_iters 1171 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1172 400
penalty weights 10000.0
args.step pgd_anneal_iters 1172 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1173 400
penalty weights 10000.0
args.step pgd_anneal_iters 1173 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1174 400
penalty weights 10000.0
args.step pgd_anneal_iters 1174 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1175 400
penalty weights 10000.0
args.step pgd_anneal_iters 1175 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1176 400
penalty weights 10000.0
args.step pgd_anneal_iters 1176 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1177 400
penalty weights 10000.0
args.step pgd_anneal_iters 1177 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1178 400
penalty weights 10000.0
args.step pgd_anneal_iters 1178 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1179 400
penalty weights 10000.0
args.step pgd_anneal_iters 1179 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1180 400
penalty weights 10000.0
args.step pgd_anneal_iters 1180 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1181 400
penalty weights 10000.0
args.step pgd_anneal_iters 1181 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1182 400
penalty weights 10000.0
args.step pgd_anneal_iters 1182 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1183 400
penalty weights 10000.0
args.step pgd_anneal_iters 1183 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1184 400
penalty weights 10000.0
args.step pgd_anneal_iters 1184 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1185 400
penalty weights 10000.0
args.step pgd_anneal_iters 1185 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1186 400
penalty weights 10000.0
args.step pgd_anneal_iters 1186 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1187 400
penalty weights 10000.0
args.step pgd_anneal_iters 1187 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1188 400
penalty weights 10000.0
args.step pgd_anneal_iters 1188 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1189 400
penalty weights 10000.0
args.step pgd_anneal_iters 1189 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1190 400
penalty weights 10000.0
args.step pgd_anneal_iters 1190 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1191 400
penalty weights 10000.0
args.step pgd_anneal_iters 1191 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1192 400
penalty weights 10000.0
args.step pgd_anneal_iters 1192 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1193 400
penalty weights 10000.0
args.step pgd_anneal_iters 1193 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1194 400
penalty weights 10000.0
args.step pgd_anneal_iters 1194 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1195 400
penalty weights 10000.0
args.step pgd_anneal_iters 1195 600
dim_v 512
Epoch: [45][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.17 (  0.17)	train_acc   0.49 (  0.50)	train_minacc   0.46 (  0.50)	train_majacc   0.49 (  0.50)	train_corr   0.00 (  0.00)	l1 13.9848 (13.9884)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 18.06it/s] 31%|###       | 8/26 [00:00<00:00, 38.89it/s]                                               31%|###       | 8/26 [00:00<00:00, 38.89it/s] 50%|#####     | 13/26 [00:00<00:00, 39.46it/s] 69%|######9   | 18/26 [00:00<00:00, 42.89it/s]                                                69%|######9   | 18/26 [00:00<00:00, 42.89it/s] 92%|#########2| 24/26 [00:00<00:00, 48.16it/s]100%|##########| 26/26 [00:00<00:00, 39.95it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.49 (  0.49)	test_minacc   0.43 (  0.43)	test_majacc   0.50 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.43 (  0.43)	test_majacc_d   0.50 (  0.50)	test_corr_d   0.06 (  0.06)
Test: [  10/  26]	Loss 0.688 (0.692)	test_acc   0.57 (  0.51)	test_minacc   0.54 (  0.49)	test_majacc   0.57 (  0.51)	Loss_d 0.688 (0.692)	test_acc_d   0.57 (  0.51)	test_minacc_d   0.54 (  0.49)	test_majacc_d   0.57 (  0.51)	test_corr_d   0.11 (  0.08)
Test: [  20/  26]	Loss 0.692 (0.692)	test_acc   0.51 (  0.50)	test_minacc   0.54 (  0.49)	test_majacc   0.51 (  0.50)	Loss_d 0.692 (0.692)	test_acc_d   0.51 (  0.50)	test_minacc_d   0.54 (  0.49)	test_majacc_d   0.51 (  0.50)	test_corr_d   0.06 (  0.08)
Test: [  26/  26]	Loss 0.693 (0.692)	test_acc   0.49 (  0.50)	test_minacc   0.46 (  0.50)	test_majacc   0.49 (  0.50)	Loss_d 0.693 (0.692)	test_acc_d   0.49 (  0.50)	test_minacc_d   0.46 (  0.50)	test_majacc_d   0.49 (  0.50)	test_corr_d   0.01 (  0.07)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 64.60it/s]
Test: [  0/  1]	Loss 0.692 (0.692)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.692 (0.692)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.17 ( -0.17)
Test: [  1/  1]	Loss 0.692 (0.692)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.692 (0.692)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.17 ( -0.17)
Overall Timing[ 45/  1]	epoch_time 0.0363 (0.0377)	validation_time 0.0003 (0.0005)	train_time 0.0359 (0.0371)
record: (train_acc, test_acc) (0.6545000178813934, 0.6200000047683716)
last accs (train_acc, test_acc) (0.5000000124871731, 0.5)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.53it/s] 19%|#9        | 5/26 [00:00<00:01, 20.35it/s] 35%|###4      | 9/26 [00:00<00:00, 25.36it/s] 50%|#####     | 13/26 [00:00<00:00, 27.87it/s] 65%|######5   | 17/26 [00:00<00:00, 30.12it/s] 81%|########  | 21/26 [00:00<00:00, 31.79it/s] 96%|#########6| 25/26 [00:00<00:00, 32.40it/s]100%|##########| 26/26 [00:00<00:00, 27.02it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1196 400
penalty weights 10000.0
args.step pgd_anneal_iters 1196 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1197 400
penalty weights 10000.0
args.step pgd_anneal_iters 1197 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1198 400
penalty weights 10000.0
args.step pgd_anneal_iters 1198 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1199 400
penalty weights 10000.0
args.step pgd_anneal_iters 1199 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1200 400
penalty weights 10000.0
args.step pgd_anneal_iters 1200 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1201 400
penalty weights 10000.0
args.step pgd_anneal_iters 1201 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1202 400
penalty weights 10000.0
args.step pgd_anneal_iters 1202 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1203 400
penalty weights 10000.0
args.step pgd_anneal_iters 1203 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1204 400
penalty weights 10000.0
args.step pgd_anneal_iters 1204 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1205 400
penalty weights 10000.0
args.step pgd_anneal_iters 1205 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1206 400
penalty weights 10000.0
args.step pgd_anneal_iters 1206 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1207 400
penalty weights 10000.0
args.step pgd_anneal_iters 1207 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1208 400
penalty weights 10000.0
args.step pgd_anneal_iters 1208 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1209 400
penalty weights 10000.0
args.step pgd_anneal_iters 1209 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1210 400
penalty weights 10000.0
args.step pgd_anneal_iters 1210 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1211 400
penalty weights 10000.0
args.step pgd_anneal_iters 1211 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1212 400
penalty weights 10000.0
args.step pgd_anneal_iters 1212 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1213 400
penalty weights 10000.0
args.step pgd_anneal_iters 1213 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1214 400
penalty weights 10000.0
args.step pgd_anneal_iters 1214 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1215 400
penalty weights 10000.0
args.step pgd_anneal_iters 1215 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1216 400
penalty weights 10000.0
args.step pgd_anneal_iters 1216 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1217 400
penalty weights 10000.0
args.step pgd_anneal_iters 1217 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1218 400
penalty weights 10000.0
args.step pgd_anneal_iters 1218 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1219 400
penalty weights 10000.0
args.step pgd_anneal_iters 1219 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1220 400
penalty weights 10000.0
args.step pgd_anneal_iters 1220 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1221 400
penalty weights 10000.0
args.step pgd_anneal_iters 1221 600
dim_v 512
Epoch: [46][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.17 (  0.17)	train_acc   0.49 (  0.50)	train_minacc   0.46 (  0.50)	train_majacc   0.49 (  0.50)	train_corr   0.00 (  0.00)	l1 13.9782 (13.9815)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.87it/s] 27%|##6       | 7/26 [00:00<00:00, 37.51it/s]                                               27%|##6       | 7/26 [00:00<00:00, 37.51it/s] 50%|#####     | 13/26 [00:00<00:00, 44.38it/s] 73%|#######3  | 19/26 [00:00<00:00, 49.45it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 49.45it/s] 96%|#########6| 25/26 [00:00<00:00, 48.96it/s]100%|##########| 26/26 [00:00<00:00, 41.11it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.49 (  0.49)	test_minacc   0.43 (  0.43)	test_majacc   0.50 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.43 (  0.43)	test_majacc_d   0.50 (  0.50)	test_corr_d   0.04 (  0.04)
Test: [  10/  26]	Loss 0.689 (0.692)	test_acc   0.57 (  0.51)	test_minacc   0.54 (  0.49)	test_majacc   0.57 (  0.51)	Loss_d 0.689 (0.692)	test_acc_d   0.57 (  0.51)	test_minacc_d   0.54 (  0.49)	test_majacc_d   0.57 (  0.51)	test_corr_d   0.09 (  0.06)
Test: [  20/  26]	Loss 0.692 (0.693)	test_acc   0.51 (  0.50)	test_minacc   0.54 (  0.49)	test_majacc   0.51 (  0.50)	Loss_d 0.692 (0.693)	test_acc_d   0.51 (  0.50)	test_minacc_d   0.54 (  0.49)	test_majacc_d   0.51 (  0.50)	test_corr_d   0.04 (  0.06)
Test: [  26/  26]	Loss 0.693 (0.692)	test_acc   0.49 (  0.50)	test_minacc   0.46 (  0.50)	test_majacc   0.49 (  0.50)	Loss_d 0.693 (0.692)	test_acc_d   0.49 (  0.50)	test_minacc_d   0.46 (  0.50)	test_majacc_d   0.49 (  0.50)	test_corr_d  -0.02 (  0.05)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.74it/s]
Test: [  0/  1]	Loss 0.692 (0.692)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.692 (0.692)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.18 ( -0.18)
Test: [  1/  1]	Loss 0.692 (0.692)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.692 (0.692)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.18 ( -0.18)
Overall Timing[ 46/  1]	epoch_time 0.0386 (0.0377)	validation_time 0.0003 (0.0005)	train_time 0.0382 (0.0371)
record: (train_acc, test_acc) (0.6545000178813934, 0.6200000047683716)
last accs (train_acc, test_acc) (0.5000000124871731, 0.5)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.96it/s] 19%|#9        | 5/26 [00:00<00:01, 19.78it/s] 35%|###4      | 9/26 [00:00<00:00, 25.23it/s] 50%|#####     | 13/26 [00:00<00:00, 28.39it/s] 65%|######5   | 17/26 [00:00<00:00, 30.37it/s] 81%|########  | 21/26 [00:00<00:00, 31.52it/s] 96%|#########6| 25/26 [00:00<00:00, 32.14it/s]100%|##########| 26/26 [00:00<00:00, 26.73it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1222 400
penalty weights 10000.0
args.step pgd_anneal_iters 1222 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1223 400
penalty weights 10000.0
args.step pgd_anneal_iters 1223 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1224 400
penalty weights 10000.0
args.step pgd_anneal_iters 1224 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1225 400
penalty weights 10000.0
args.step pgd_anneal_iters 1225 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1226 400
penalty weights 10000.0
args.step pgd_anneal_iters 1226 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1227 400
penalty weights 10000.0
args.step pgd_anneal_iters 1227 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1228 400
penalty weights 10000.0
args.step pgd_anneal_iters 1228 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1229 400
penalty weights 10000.0
args.step pgd_anneal_iters 1229 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1230 400
penalty weights 10000.0
args.step pgd_anneal_iters 1230 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1231 400
penalty weights 10000.0
args.step pgd_anneal_iters 1231 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1232 400
penalty weights 10000.0
args.step pgd_anneal_iters 1232 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1233 400
penalty weights 10000.0
args.step pgd_anneal_iters 1233 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1234 400
penalty weights 10000.0
args.step pgd_anneal_iters 1234 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1235 400
penalty weights 10000.0
args.step pgd_anneal_iters 1235 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1236 400
penalty weights 10000.0
args.step pgd_anneal_iters 1236 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1237 400
penalty weights 10000.0
args.step pgd_anneal_iters 1237 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1238 400
penalty weights 10000.0
args.step pgd_anneal_iters 1238 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1239 400
penalty weights 10000.0
args.step pgd_anneal_iters 1239 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1240 400
penalty weights 10000.0
args.step pgd_anneal_iters 1240 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1241 400
penalty weights 10000.0
args.step pgd_anneal_iters 1241 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1242 400
penalty weights 10000.0
args.step pgd_anneal_iters 1242 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1243 400
penalty weights 10000.0
args.step pgd_anneal_iters 1243 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1244 400
penalty weights 10000.0
args.step pgd_anneal_iters 1244 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1245 400
penalty weights 10000.0
args.step pgd_anneal_iters 1245 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1246 400
penalty weights 10000.0
args.step pgd_anneal_iters 1246 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1247 400
penalty weights 10000.0
args.step pgd_anneal_iters 1247 600
dim_v 512
Epoch: [47][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.17 (  0.17)	train_acc   0.49 (  0.50)	train_minacc   0.46 (  0.50)	train_majacc   0.49 (  0.50)	train_corr   0.00 (  0.00)	l1 13.9722 (13.9752)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 17.54it/s] 31%|###       | 8/26 [00:00<00:00, 39.75it/s]                                               31%|###       | 8/26 [00:00<00:00, 39.75it/s] 50%|#####     | 13/26 [00:00<00:00, 42.18it/s] 73%|#######3  | 19/26 [00:00<00:00, 47.31it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 47.31it/s] 96%|#########6| 25/26 [00:00<00:00, 48.44it/s]100%|##########| 26/26 [00:00<00:00, 40.75it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.49 (  0.49)	test_minacc   0.43 (  0.43)	test_majacc   0.50 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.43 (  0.43)	test_majacc_d   0.50 (  0.50)	test_corr_d   0.03 (  0.03)
Test: [  10/  26]	Loss 0.689 (0.692)	test_acc   0.57 (  0.51)	test_minacc   0.54 (  0.49)	test_majacc   0.57 (  0.51)	Loss_d 0.689 (0.692)	test_acc_d   0.57 (  0.51)	test_minacc_d   0.54 (  0.49)	test_majacc_d   0.57 (  0.51)	test_corr_d   0.07 (  0.04)
Test: [  20/  26]	Loss 0.692 (0.693)	test_acc   0.51 (  0.50)	test_minacc   0.54 (  0.49)	test_majacc   0.51 (  0.50)	Loss_d 0.692 (0.693)	test_acc_d   0.51 (  0.50)	test_minacc_d   0.54 (  0.49)	test_majacc_d   0.51 (  0.50)	test_corr_d   0.03 (  0.04)
Test: [  26/  26]	Loss 0.694 (0.693)	test_acc   0.49 (  0.50)	test_minacc   0.46 (  0.50)	test_majacc   0.49 (  0.50)	Loss_d 0.694 (0.693)	test_acc_d   0.49 (  0.50)	test_minacc_d   0.46 (  0.50)	test_majacc_d   0.49 (  0.50)	test_corr_d  -0.05 (  0.03)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.57it/s]
Test: [  0/  1]	Loss 0.692 (0.692)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.692 (0.692)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.20 ( -0.20)
Test: [  1/  1]	Loss 0.692 (0.692)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.692 (0.692)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.20 ( -0.20)
Overall Timing[ 47/  1]	epoch_time 0.0360 (0.0377)	validation_time 0.0004 (0.0005)	train_time 0.0356 (0.0371)
record: (train_acc, test_acc) (0.6545000178813934, 0.6200000047683716)
last accs (train_acc, test_acc) (0.5000000124871731, 0.5)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.26it/s] 15%|#5        | 4/26 [00:00<00:01, 17.38it/s] 31%|###       | 8/26 [00:00<00:00, 24.89it/s] 46%|####6     | 12/26 [00:00<00:00, 28.27it/s] 62%|######1   | 16/26 [00:00<00:00, 30.40it/s] 77%|#######6  | 20/26 [00:00<00:00, 31.60it/s] 92%|#########2| 24/26 [00:00<00:00, 32.40it/s]100%|##########| 26/26 [00:00<00:00, 26.93it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1248 400
penalty weights 10000.0
args.step pgd_anneal_iters 1248 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1249 400
penalty weights 10000.0
args.step pgd_anneal_iters 1249 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1250 400
penalty weights 10000.0
args.step pgd_anneal_iters 1250 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1251 400
penalty weights 10000.0
args.step pgd_anneal_iters 1251 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1252 400
penalty weights 10000.0
args.step pgd_anneal_iters 1252 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1253 400
penalty weights 10000.0
args.step pgd_anneal_iters 1253 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1254 400
penalty weights 10000.0
args.step pgd_anneal_iters 1254 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1255 400
penalty weights 10000.0
args.step pgd_anneal_iters 1255 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1256 400
penalty weights 10000.0
args.step pgd_anneal_iters 1256 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1257 400
penalty weights 10000.0
args.step pgd_anneal_iters 1257 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1258 400
penalty weights 10000.0
args.step pgd_anneal_iters 1258 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1259 400
penalty weights 10000.0
args.step pgd_anneal_iters 1259 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1260 400
penalty weights 10000.0
args.step pgd_anneal_iters 1260 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1261 400
penalty weights 10000.0
args.step pgd_anneal_iters 1261 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1262 400
penalty weights 10000.0
args.step pgd_anneal_iters 1262 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1263 400
penalty weights 10000.0
args.step pgd_anneal_iters 1263 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1264 400
penalty weights 10000.0
args.step pgd_anneal_iters 1264 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1265 400
penalty weights 10000.0
args.step pgd_anneal_iters 1265 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1266 400
penalty weights 10000.0
args.step pgd_anneal_iters 1266 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1267 400
penalty weights 10000.0
args.step pgd_anneal_iters 1267 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1268 400
penalty weights 10000.0
args.step pgd_anneal_iters 1268 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1269 400
penalty weights 10000.0
args.step pgd_anneal_iters 1269 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1270 400
penalty weights 10000.0
args.step pgd_anneal_iters 1270 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1271 400
penalty weights 10000.0
args.step pgd_anneal_iters 1271 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1272 400
penalty weights 10000.0
args.step pgd_anneal_iters 1272 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1273 400
penalty weights 10000.0
args.step pgd_anneal_iters 1273 600
dim_v 512
Epoch: [48][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.17 (  0.17)	train_acc   0.49 (  0.50)	train_minacc   0.46 (  0.50)	train_majacc   0.49 (  0.50)	train_corr   0.00 (  0.00)	l1 13.9668 (13.9695)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 18.40it/s] 35%|###4      | 9/26 [00:00<00:00, 39.88it/s]                                               35%|###4      | 9/26 [00:00<00:00, 39.88it/s] 58%|#####7    | 15/26 [00:00<00:00, 47.04it/s]                                                58%|#####7    | 15/26 [00:00<00:00, 47.04it/s] 81%|########  | 21/26 [00:00<00:00, 47.15it/s]100%|##########| 26/26 [00:00<00:00, 41.90it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.49 (  0.49)	test_minacc   0.43 (  0.43)	test_majacc   0.50 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.43 (  0.43)	test_majacc_d   0.50 (  0.50)	test_corr_d   0.01 (  0.01)
Test: [  10/  26]	Loss 0.690 (0.692)	test_acc   0.57 (  0.51)	test_minacc   0.54 (  0.49)	test_majacc   0.57 (  0.51)	Loss_d 0.690 (0.692)	test_acc_d   0.57 (  0.51)	test_minacc_d   0.54 (  0.49)	test_majacc_d   0.57 (  0.51)	test_corr_d   0.06 (  0.02)
Test: [  20/  26]	Loss 0.692 (0.693)	test_acc   0.51 (  0.50)	test_minacc   0.54 (  0.49)	test_majacc   0.51 (  0.50)	Loss_d 0.692 (0.693)	test_acc_d   0.51 (  0.50)	test_minacc_d   0.54 (  0.49)	test_majacc_d   0.51 (  0.50)	test_corr_d   0.01 (  0.02)
Test: [  26/  26]	Loss 0.694 (0.693)	test_acc   0.49 (  0.50)	test_minacc   0.46 (  0.50)	test_majacc   0.49 (  0.50)	Loss_d 0.694 (0.693)	test_acc_d   0.49 (  0.50)	test_minacc_d   0.46 (  0.50)	test_majacc_d   0.49 (  0.50)	test_corr_d  -0.08 (  0.01)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.36it/s]
Test: [  0/  1]	Loss 0.692 (0.692)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.692 (0.692)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.21 ( -0.21)
Test: [  1/  1]	Loss 0.692 (0.692)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.692 (0.692)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.21 ( -0.21)
Overall Timing[ 48/  1]	epoch_time 0.0377 (0.0377)	validation_time 0.0005 (0.0005)	train_time 0.0372 (0.0371)
record: (train_acc, test_acc) (0.6545000178813934, 0.6200000047683716)
last accs (train_acc, test_acc) (0.5000000124871731, 0.5)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 17.60it/s] 23%|##3       | 6/26 [00:00<00:00, 26.53it/s] 38%|###8      | 10/26 [00:00<00:00, 30.01it/s] 54%|#####3    | 14/26 [00:00<00:00, 31.50it/s] 69%|######9   | 18/26 [00:00<00:00, 32.45it/s] 85%|########4 | 22/26 [00:00<00:00, 33.16it/s]100%|##########| 26/26 [00:00<00:00, 33.53it/s]100%|##########| 26/26 [00:00<00:00, 29.44it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1274 400
penalty weights 10000.0
args.step pgd_anneal_iters 1274 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1275 400
penalty weights 10000.0
args.step pgd_anneal_iters 1275 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1276 400
penalty weights 10000.0
args.step pgd_anneal_iters 1276 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1277 400
penalty weights 10000.0
args.step pgd_anneal_iters 1277 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1278 400
penalty weights 10000.0
args.step pgd_anneal_iters 1278 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1279 400
penalty weights 10000.0
args.step pgd_anneal_iters 1279 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1280 400
penalty weights 10000.0
args.step pgd_anneal_iters 1280 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1281 400
penalty weights 10000.0
args.step pgd_anneal_iters 1281 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1282 400
penalty weights 10000.0
args.step pgd_anneal_iters 1282 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1283 400
penalty weights 10000.0
args.step pgd_anneal_iters 1283 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1284 400
penalty weights 10000.0
args.step pgd_anneal_iters 1284 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1285 400
penalty weights 10000.0
args.step pgd_anneal_iters 1285 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1286 400
penalty weights 10000.0
args.step pgd_anneal_iters 1286 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1287 400
penalty weights 10000.0
args.step pgd_anneal_iters 1287 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1288 400
penalty weights 10000.0
args.step pgd_anneal_iters 1288 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1289 400
penalty weights 10000.0
args.step pgd_anneal_iters 1289 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1290 400
penalty weights 10000.0
args.step pgd_anneal_iters 1290 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1291 400
penalty weights 10000.0
args.step pgd_anneal_iters 1291 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1292 400
penalty weights 10000.0
args.step pgd_anneal_iters 1292 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1293 400
penalty weights 10000.0
args.step pgd_anneal_iters 1293 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1294 400
penalty weights 10000.0
args.step pgd_anneal_iters 1294 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1295 400
penalty weights 10000.0
args.step pgd_anneal_iters 1295 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1296 400
penalty weights 10000.0
args.step pgd_anneal_iters 1296 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1297 400
penalty weights 10000.0
args.step pgd_anneal_iters 1297 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1298 400
penalty weights 10000.0
args.step pgd_anneal_iters 1298 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1299 400
penalty weights 10000.0
args.step pgd_anneal_iters 1299 600
dim_v 512
Epoch: [49][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.17 (  0.17)	train_acc   0.49 (  0.50)	train_minacc   0.46 (  0.50)	train_majacc   0.49 (  0.50)	train_corr   0.00 (  0.00)	l1 13.9619 (13.9643)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:00, 23.81it/s] 35%|###4      | 9/26 [00:00<00:00, 40.24it/s]                                               35%|###4      | 9/26 [00:00<00:00, 40.24it/s] 58%|#####7    | 15/26 [00:00<00:00, 43.63it/s]                                                58%|#####7    | 15/26 [00:00<00:00, 43.63it/s] 81%|########  | 21/26 [00:00<00:00, 48.11it/s]100%|##########| 26/26 [00:00<00:00, 41.97it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.49 (  0.49)	test_minacc   0.43 (  0.43)	test_majacc   0.50 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.43 (  0.43)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.00 ( -0.00)
Test: [  10/  26]	Loss 0.690 (0.692)	test_acc   0.57 (  0.51)	test_minacc   0.54 (  0.49)	test_majacc   0.57 (  0.51)	Loss_d 0.690 (0.692)	test_acc_d   0.57 (  0.51)	test_minacc_d   0.54 (  0.49)	test_majacc_d   0.57 (  0.51)	test_corr_d   0.04 (  0.01)
Test: [  20/  26]	Loss 0.692 (0.693)	test_acc   0.51 (  0.50)	test_minacc   0.54 (  0.49)	test_majacc   0.51 (  0.50)	Loss_d 0.692 (0.693)	test_acc_d   0.51 (  0.50)	test_minacc_d   0.54 (  0.49)	test_majacc_d   0.51 (  0.50)	test_corr_d  -0.00 ( -0.00)
Test: [  26/  26]	Loss 0.694 (0.693)	test_acc   0.49 (  0.50)	test_minacc   0.46 (  0.50)	test_majacc   0.49 (  0.50)	Loss_d 0.694 (0.693)	test_acc_d   0.49 (  0.50)	test_minacc_d   0.46 (  0.50)	test_majacc_d   0.49 (  0.50)	test_corr_d  -0.11 ( -0.01)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.85it/s]
Test: [  0/  1]	Loss 0.692 (0.692)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.692 (0.692)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.22 ( -0.22)
Test: [  1/  1]	Loss 0.692 (0.692)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.692 (0.692)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.22 ( -0.22)
Overall Timing[ 49/  1]	epoch_time 0.0374 (0.0377)	validation_time 0.0004 (0.0005)	train_time 0.0370 (0.0371)
record: (train_acc, test_acc) (0.6545000178813934, 0.6200000047683716)
last accs (train_acc, test_acc) (0.5000000124871731, 0.5)
done saving aggregate.csv to ./aggregate.csv
wandb: - 0.096 MB of 0.096 MB uploadedwandb: \ 0.096 MB of 0.096 MB uploadedwandb: | 0.096 MB of 0.096 MB uploadedwandb: / 0.096 MB of 0.096 MB uploadedwandb: - 0.096 MB of 0.096 MB uploadedwandb: \ 0.096 MB of 0.096 MB uploadedwandb: | 0.096 MB of 0.096 MB uploadedwandb: / 0.096 MB of 0.096 MB uploadedwandb: - 0.096 MB of 0.096 MB uploadedwandb: \ 0.096 MB of 0.096 MB uploadedwandb: | 0.096 MB of 0.096 MB uploadedwandb: / 0.118 MB of 0.118 MB uploaded (0.003 MB deduped)wandb: 
wandb: Run history:
wandb:                                                                           global_step ▁▁▁▁▂▂▂▂▂▃▃▃▃▃▃▄▄▄▄▄▅▅▅▅▅▅▆▆▆▆▆▆▇▇▇▇▇███
wandb:      resnet18-usc-unsigned/baseline/prune_rate=1.0/34/logs/diagnostics/epoch_time_val █▁▁▁▁▁▁▁▁▁▁▁▁▁▂▁▁▁▁▁▂▁▁▁▁▁▂▁▂▁▁▂▁▁▁▁▁▂▁▁
wandb:      resnet18-usc-unsigned/baseline/prune_rate=1.0/34/logs/diagnostics/train_time_val █▁▁▁▁▁▁▁▁▁▂▂▂▁▂▁▁▂▁▂▂▁▂▁▁▁▂▁▂▁▂▂▁▂▁▁▁▂▁▂
wandb: resnet18-usc-unsigned/baseline/prune_rate=1.0/34/logs/diagnostics/validation_time_val █▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:                     resnet18-usc-unsigned/baseline/prune_rate=1.0/34/logs/global_step ▁▁▁▁▂▂▂▂▂▃▃▃▃▃▃▄▄▄▄▄▅▅▅▅▅▅▆▆▆▆▆▆▇▇▇▇▇███
wandb:                   resnet18-usc-unsigned/baseline/prune_rate=1.0/34/logs/test/Loss_avg █▆▇▇▆▇▇▇▆▆▆▆▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:                 resnet18-usc-unsigned/baseline/prune_rate=1.0/34/logs/test/Loss_d_avg █▆▇▇▆▇▇▇▆▆▆▆▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:                 resnet18-usc-unsigned/baseline/prune_rate=1.0/34/logs/test/Loss_d_val █▆▇▇▆▇▇▇▆▆▆▆▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:                   resnet18-usc-unsigned/baseline/prune_rate=1.0/34/logs/test/Loss_val █▆▇▇▆▇▇▇▆▆▆▆▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:               resnet18-usc-unsigned/baseline/prune_rate=1.0/34/logs/test/test_acc_avg ▁▁▁▂▂▂▁▁▄▃▂▂███████▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/34/logs/test/test_acc_d_avg ▁▁▁▂▂▂▁▁▄▃▂▂███████▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/34/logs/test/test_acc_d_val ▁▁▁▂▂▂▁▁▄▃▂▂███████▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆
wandb:               resnet18-usc-unsigned/baseline/prune_rate=1.0/34/logs/test/test_acc_val ▁▁▁▂▂▂▁▁▄▃▂▂███████▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/34/logs/test/test_corr_d_avg ███▇▇▇▇█▆▆▇▇▂▁▁▁▁▁▁▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▁▁▁▁▁▁
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/34/logs/test/test_corr_d_val ███▇▇▇▇█▆▆▇▇▂▁▁▁▁▁▁▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▁▁▁▁▁▁
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/34/logs/test/test_majacc_avg █████████▇██▃▃▂▂▂▂▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/34/logs/test/test_majacc_d_avg █████████▇██▃▃▂▂▂▂▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/34/logs/test/test_majacc_d_val █████████▇██▃▃▂▂▂▂▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/34/logs/test/test_majacc_val █████████▇██▃▃▂▂▂▂▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/34/logs/test/test_minacc_avg ▁▁▁▂▂▂▁▁▄▃▂▂███████▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/34/logs/test/test_minacc_d_avg ▁▁▁▂▂▂▁▁▄▃▂▂███████▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/34/logs/test/test_minacc_d_val ▁▁▁▂▂▂▁▁▄▃▂▂███████▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/34/logs/test/test_minacc_val ▁▁▁▂▂▂▁▁▄▃▂▂███████▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇
wandb:                  resnet18-usc-unsigned/baseline/prune_rate=1.0/34/logs/train/Loss_avg █▅▃▂▂▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:                  resnet18-usc-unsigned/baseline/prune_rate=1.0/34/logs/train/Loss_val █▄▃▂▂▂▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:                    resnet18-usc-unsigned/baseline/prune_rate=1.0/34/logs/train/l1_avg ▃▂▁▁▂▂▂▃▅▆▇▇███████▇▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆
wandb:                    resnet18-usc-unsigned/baseline/prune_rate=1.0/34/logs/train/l1_val ▂▂▁▁▂▂▃▄▅▆▇▇███████▇▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/34/logs/train/train_acc_avg ▇███████████▇▄▄▄▄▄▄▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/34/logs/train/train_acc_val ███████████▇▄▄▄▄▄▄▄▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/34/logs/train/train_corr_avg ▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/34/logs/train/train_corr_val ▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/34/logs/train/train_majacc_avg ▇███████████▆▃▃▃▃▃▃▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/34/logs/train/train_majacc_val ████████▇▇█▇▄▄▄▄▃▃▃▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/34/logs/train/train_minacc_avg ▂▁▁▁▂▂▂▃▃▃▄▄▆██████▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/34/logs/train/train_minacc_val ▁▂▁▁▂▁▂▁▄▃▃▃█▇▇▇▇▇▇▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/34/logs/train/train_nll_avg ▅▂▂▂▂▁▂▁▁▁▁▁▂▆▇▇▇▇▇█████████████████████
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/34/logs/train/train_nll_val ▃▂▂▂▁▁▁▂▁▁▁▂▆▆▆▆▇▇▇█████████████████████
wandb:         resnet18-usc-unsigned/baseline/prune_rate=1.0/34/logs/train/train_penalty_avg █▃▂▂▂▂▂▂▂▂▂▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:         resnet18-usc-unsigned/baseline/prune_rate=1.0/34/logs/train/train_penalty_val █▆▅▄▄▄▄▅▃▄▄▄▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:           resnet18-usc-unsigned/baseline/prune_rate=1.0/34/logs/train/weight_norm_avg █▅▃▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:           resnet18-usc-unsigned/baseline/prune_rate=1.0/34/logs/train/weight_norm_val █▄▃▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb: 
wandb: Run summary:
wandb:                                                                           global_step 49
wandb:      resnet18-usc-unsigned/baseline/prune_rate=1.0/34/logs/diagnostics/epoch_time_val 0.03742
wandb:      resnet18-usc-unsigned/baseline/prune_rate=1.0/34/logs/diagnostics/train_time_val 0.03705
wandb: resnet18-usc-unsigned/baseline/prune_rate=1.0/34/logs/diagnostics/validation_time_val 0.00035
wandb:                     resnet18-usc-unsigned/baseline/prune_rate=1.0/34/logs/global_step 49
wandb:                   resnet18-usc-unsigned/baseline/prune_rate=1.0/34/logs/test/Loss_avg 0.69177
wandb:                 resnet18-usc-unsigned/baseline/prune_rate=1.0/34/logs/test/Loss_d_avg 0.69177
wandb:                 resnet18-usc-unsigned/baseline/prune_rate=1.0/34/logs/test/Loss_d_val 0.69177
wandb:                   resnet18-usc-unsigned/baseline/prune_rate=1.0/34/logs/test/Loss_val 0.69177
wandb:               resnet18-usc-unsigned/baseline/prune_rate=1.0/34/logs/test/test_acc_avg 0.5
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/34/logs/test/test_acc_d_avg 0.5
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/34/logs/test/test_acc_d_val 0.5
wandb:               resnet18-usc-unsigned/baseline/prune_rate=1.0/34/logs/test/test_acc_val 0.5
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/34/logs/test/test_corr_d_avg -0.21726
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/34/logs/test/test_corr_d_val -0.21726
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/34/logs/test/test_majacc_avg 0.5
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/34/logs/test/test_majacc_d_avg 0.5
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/34/logs/test/test_majacc_d_val 0.5
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/34/logs/test/test_majacc_val 0.5
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/34/logs/test/test_minacc_avg 0.5
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/34/logs/test/test_minacc_d_avg 0.5
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/34/logs/test/test_minacc_d_val 0.5
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/34/logs/test/test_minacc_val 0.5
wandb:                  resnet18-usc-unsigned/baseline/prune_rate=1.0/34/logs/train/Loss_avg 9e-05
wandb:                  resnet18-usc-unsigned/baseline/prune_rate=1.0/34/logs/train/Loss_val 9e-05
wandb:                    resnet18-usc-unsigned/baseline/prune_rate=1.0/34/logs/train/l1_avg 13.96432
wandb:                    resnet18-usc-unsigned/baseline/prune_rate=1.0/34/logs/train/l1_val 13.96189
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/34/logs/train/train_acc_avg 0.5
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/34/logs/train/train_acc_val 0.488
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/34/logs/train/train_corr_avg 0.0
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/34/logs/train/train_corr_val 0.0
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/34/logs/train/train_majacc_avg 0.49983
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/34/logs/train/train_majacc_val 0.49302
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/34/logs/train/train_minacc_avg 0.50031
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/34/logs/train/train_minacc_val 0.45714
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/34/logs/train/train_nll_avg 0.6927
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/34/logs/train/train_nll_val 0.6936
wandb:         resnet18-usc-unsigned/baseline/prune_rate=1.0/34/logs/train/train_penalty_avg 0.0
wandb:         resnet18-usc-unsigned/baseline/prune_rate=1.0/34/logs/train/train_penalty_val 0.0
wandb:           resnet18-usc-unsigned/baseline/prune_rate=1.0/34/logs/train/weight_norm_avg 0.16924
wandb:           resnet18-usc-unsigned/baseline/prune_rate=1.0/34/logs/train/weight_norm_val 0.16909
wandb: 
wandb: 🚀 View run name_random at: https://wandb.ai/janezdu-uiuc/irm/runs/vggvjbhw
wandb: ⭐️ View project at: https://wandb.ai/janezdu-uiuc/irm
wandb: Synced 5 W&B file(s), 0 media file(s), 2 artifact file(s) and 1 other file(s)
wandb: Find logs at: ./wandb/run-20240906_151214-vggvjbhw/logs
wandb: WARNING The new W&B backend becomes opt-out in version 0.18.0; try it out with `wandb.require("core")`! See https://wandb.me/wandb-core for more information.
wandb: Currently logged in as: janezdu (janezdu-uiuc). Use `wandb login --relogin` to force relogin
wandb: wandb version 0.17.9 is available!  To upgrade, please run:
wandb:  $ pip install wandb --upgrade
wandb: Tracking run with wandb version 0.17.7
wandb: Run data is saved locally in /scratch/users/zd16/sparseIRM-resnet-ver/wandb/run-20240906_151453-i7ypqgbk
wandb: Run `wandb offline` to turn off syncing.
wandb: Syncing run name_random
wandb: ⭐️ View project at https://wandb.ai/janezdu-uiuc/irm
wandb: 🚀 View run at https://wandb.ai/janezdu-uiuc/irm/runs/i7ypqgbk
=> Reading YAML config from configs/smallscale/resnet18/resnet18-usc-unsigned.yaml
Namespace(data='dataset/', optimizer='adam', weight_opt='adam', set='mnistcifar', arch='ResNet18', config='configs/smallscale/resnet18/resnet18-usc-unsigned.yaml', log_dir=None, workers=4, epochs=50, start_epoch=None, batch_size=390, lr=0.006, warmup_length=0, momentum=0.9, weight_decay=0.0, print_freq=10, num_classes=1, resume='', resume_train_weights='', evaluate=False, pretrained=None, pretrained_distill=None, alpha_distill=0.95, T_distill=2, seed=0, multigpu=[0], lr_policy='cosine_lr', lr_adjust=30, lr_gamma=0.1, name='baseline', save_every=-1, prune_rate=1.0, param_prune_rate=0.0, pr_start=1.0, low_data=1, width_mult=1.0, nesterov=False, threetimes=False, random_subnet=False, one_batch=False, conv_type='DenseConv', freeze_weights=False, st=False, mode='fan_in', nonlinearity='relu', bn_type='LearnedBatchNorm', init='kaiming_normal', no_bn_decay=False, scale_fan=False, first_layer_dense=False, last_layer_dense=True, approx=False, zero=False, flip=False, bs=False, gumbel_sample=False, multiply_prob=False, no_multiply=False, multiply_cont=False, multiply_prob_bs=False, indiv=False, label_smoothing=None, first_layer_type=None, trainer='default', score_init_constant=1.0, K=1, update_freq=20, D=0.01, T=1, TA=True, TA2=False, TA_grow=False, center=False, straight_through=False, PLA_factor=0.1, PLA_patience=10, gradient_loss_para=0, abs_loss_para=0, thres=0.9, runs_name='name_random', resume_compare_loss1='', resume_compare_loss2='', init_weights='', trained_mask='', weight_rescaling=False, constrain_by_layer=False, weight_rescaling_data=False, use_running_stats=False, not_clipping=False, rescaling_para=False, lasso_para=0, dont_freeze_weights=False, iterative=True, prob_by_weight=False, rescale_at_fix_subnet=False, train_weights_at_the_same_time=False, sample_from_training_set=False, load_true_para=False, distill=False, finetune=False, stablize=False, prev_best=0, weight_opt_lr=0.0006, n=500, ts=0.28, te=0.6, d=20000, s=80, c=0.75, init_prob=False, thres_before=0.001, wide_ratio=0.001, noise=1, cal_p_q=False, just_finetune=False, snip=False, envs_num=2, l2_regularizer_weight=0.001, data_num=50000, env_type='linear', irm_type='irmv1', hidden_dim=390, penalty_anneal_iters=400, penalty_weight=10000.0, grayscale_model=0, weight_lr_schedule=False, fix_subnet=False, freeze_weight=False, step='ours', prior_sd_coef=0, dim_inv=2, variance_gamma=1.0, dim_spu=10, image_scale=32, cons_ratio='0.999_0.7_0.1', noise_ratio=0.2, step_gamma=0.1, step_round=3, inner_steps=1, use_pgd=True, z=17.0, pgd_anneal_iters=600)
=> Creating model 'ResNet18'
Here!!!!!!!!
==> Conv Type: DenseConv
==> BN Type: LearnedBatchNorm
<class 'torch.nn.modules.conv.Conv2d'>
<class 'torch.nn.modules.batchnorm.BatchNorm2d'>
==> Building first layer with <class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
ResNet(
  (conv1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
  (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (relu): ReLU(inplace=True)
  (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
  (layer1): Sequential(
    (0): BasicBlock(
      (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (1): BasicBlock(
      (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (layer2): Sequential(
    (0): BasicBlock(
      (conv1): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (downsample): Sequential(
        (0): Conv2d(64, 128, kernel_size=(1, 1), stride=(2, 2), bias=False)
        (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (1): BasicBlock(
      (conv1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (layer3): Sequential(
    (0): BasicBlock(
      (conv1): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (downsample): Sequential(
        (0): Conv2d(128, 256, kernel_size=(1, 1), stride=(2, 2), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (1): BasicBlock(
      (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (layer4): Sequential(
    (0): BasicBlock(
      (conv1): Conv2d(256, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (downsample): Sequential(
        (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (1): BasicBlock(
      (conv1): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (avgpool): AdaptiveAvgPool2d(output_size=1)
  (fc): Linear(in_features=512, out_features=1, bias=True)
)
=> Parallelizing on [0] gpus
<DEBUG> gradient to module.conv1.weight
<DEBUG> gradient to module.bn1.weight
<DEBUG> gradient to module.bn1.bias
<DEBUG> gradient to module.layer1.0.conv1.weight
<DEBUG> gradient to module.layer1.0.bn1.weight
<DEBUG> gradient to module.layer1.0.bn1.bias
<DEBUG> gradient to module.layer1.0.conv2.weight
<DEBUG> gradient to module.layer1.0.bn2.weight
<DEBUG> gradient to module.layer1.0.bn2.bias
<DEBUG> gradient to module.layer1.1.conv1.weight
<DEBUG> gradient to module.layer1.1.bn1.weight
<DEBUG> gradient to module.layer1.1.bn1.bias
<DEBUG> gradient to module.layer1.1.conv2.weight
<DEBUG> gradient to module.layer1.1.bn2.weight
<DEBUG> gradient to module.layer1.1.bn2.bias
<DEBUG> gradient to module.layer2.0.conv1.weight
<DEBUG> gradient to module.layer2.0.bn1.weight
<DEBUG> gradient to module.layer2.0.bn1.bias
<DEBUG> gradient to module.layer2.0.conv2.weight
<DEBUG> gradient to module.layer2.0.bn2.weight
<DEBUG> gradient to module.layer2.0.bn2.bias
<DEBUG> gradient to module.layer2.0.downsample.0.weight
<DEBUG> gradient to module.layer2.0.downsample.1.weight
<DEBUG> gradient to module.layer2.0.downsample.1.bias
<DEBUG> gradient to module.layer2.1.conv1.weight
<DEBUG> gradient to module.layer2.1.bn1.weight
<DEBUG> gradient to module.layer2.1.bn1.bias
<DEBUG> gradient to module.layer2.1.conv2.weight
<DEBUG> gradient to module.layer2.1.bn2.weight
<DEBUG> gradient to module.layer2.1.bn2.bias
<DEBUG> gradient to module.layer3.0.conv1.weight
<DEBUG> gradient to module.layer3.0.bn1.weight
<DEBUG> gradient to module.layer3.0.bn1.bias
<DEBUG> gradient to module.layer3.0.conv2.weight
<DEBUG> gradient to module.layer3.0.bn2.weight
<DEBUG> gradient to module.layer3.0.bn2.bias
<DEBUG> gradient to module.layer3.0.downsample.0.weight
<DEBUG> gradient to module.layer3.0.downsample.1.weight
<DEBUG> gradient to module.layer3.0.downsample.1.bias
<DEBUG> gradient to module.layer3.1.conv1.weight
<DEBUG> gradient to module.layer3.1.bn1.weight
<DEBUG> gradient to module.layer3.1.bn1.bias
<DEBUG> gradient to module.layer3.1.conv2.weight
<DEBUG> gradient to module.layer3.1.bn2.weight
<DEBUG> gradient to module.layer3.1.bn2.bias
<DEBUG> gradient to module.layer4.0.conv1.weight
<DEBUG> gradient to module.layer4.0.bn1.weight
<DEBUG> gradient to module.layer4.0.bn1.bias
<DEBUG> gradient to module.layer4.0.conv2.weight
<DEBUG> gradient to module.layer4.0.bn2.weight
<DEBUG> gradient to module.layer4.0.bn2.bias
<DEBUG> gradient to module.layer4.0.downsample.0.weight
<DEBUG> gradient to module.layer4.0.downsample.1.weight
<DEBUG> gradient to module.layer4.0.downsample.1.bias
<DEBUG> gradient to module.layer4.1.conv1.weight
<DEBUG> gradient to module.layer4.1.bn1.weight
<DEBUG> gradient to module.layer4.1.bn1.bias
<DEBUG> gradient to module.layer4.1.conv2.weight
<DEBUG> gradient to module.layer4.1.bn2.weight
<DEBUG> gradient to module.layer4.1.bn2.bias
<DEBUG> gradient to module.fc.weight
<DEBUG> gradient to module.fc.bias
Files already downloaded and verified
Files already downloaded and verified
Adding Noise to Label, len(Y)=12000, Label_noise=1185
Xmp (7877, 3, 32, 32) (6903, 3, 32, 32)
Xcp (6019, 3, 32, 32) (5981, 3, 32, 32)
env=0 2497 2497 3 3
xn 2500 xp 2500
env=1 1750 1750 750 750
xn 2500 xp 2500
env=2 50 50 450 450
xn 500 xp 500
=> Creating model 'EBD'
EBD(
  (embedings): Embedding(2, 1)
)
=> Parallelizing on [0] gpus
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:01<00:41,  1.66s/it] 19%|#9        | 5/26 [00:01<00:05,  3.68it/s] 35%|###4      | 9/26 [00:01<00:02,  7.20it/s] 50%|#####     | 13/26 [00:02<00:01, 11.00it/s] 65%|######5   | 17/26 [00:02<00:00, 14.98it/s] 81%|########  | 21/26 [00:02<00:00, 18.87it/s] 96%|#########6| 25/26 [00:02<00:00, 22.27it/s]100%|##########| 26/26 [00:02<00:00,  9.50it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 0 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 2 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 3 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 4 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 5 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 6 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 7 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 8 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 9 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 10 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 11 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 12 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 13 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 14 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 15 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 16 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 17 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 18 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 19 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 20 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 21 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 22 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 23 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 24 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 25 400
penalty weights 0.0
Epoch: [0][  26/  26]	Loss 9.903 (12.404)	train_nll   0.43 (  0.52)	train_penalty   0.04 (  0.20)	weight_norm   9.47 ( 11.89)	train_acc   0.86 (  0.81)	train_minacc   0.06 (  0.06)	train_majacc   0.99 (  0.94)	train_corr   0.00 (  0.00)	l1 7.3452 (8.4064)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.37it/s] 27%|##6       | 7/26 [00:00<00:00, 35.17it/s]                                               27%|##6       | 7/26 [00:00<00:00, 35.17it/s] 50%|#####     | 13/26 [00:00<00:00, 40.18it/s] 73%|#######3  | 19/26 [00:00<00:00, 46.51it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 46.51it/s] 96%|#########6| 25/26 [00:00<00:00, 47.07it/s]100%|##########| 26/26 [00:00<00:00, 40.54it/s]
Test: [   0/  26]	Loss 0.451 (0.451)	test_acc   0.83 (  0.83)	test_minacc   0.00 (  0.00)	test_majacc   1.00 (  1.00)	Loss_d 0.451 (0.451)	test_acc_d   0.83 (  0.83)	test_minacc_d   0.00 (  0.00)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.98 (  0.98)
Test: [  10/  26]	Loss 0.450 (0.422)	test_acc   0.84 (  0.85)	test_minacc   0.05 (  0.02)	test_majacc   1.00 (  1.00)	Loss_d 0.450 (0.422)	test_acc_d   0.84 (  0.85)	test_minacc_d   0.05 (  0.02)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.97 (  0.97)
Test: [  20/  26]	Loss 0.411 (0.420)	test_acc   0.84 (  0.85)	test_minacc   0.05 (  0.02)	test_majacc   0.99 (  1.00)	Loss_d 0.411 (0.420)	test_acc_d   0.84 (  0.85)	test_minacc_d   0.05 (  0.02)	test_majacc_d   0.99 (  1.00)	test_corr_d   0.96 (  0.97)
Test: [  26/  26]	Loss 0.414 (0.417)	test_acc   0.86 (  0.85)	test_minacc   0.06 (  0.02)	test_majacc   0.99 (  0.99)	Loss_d 0.414 (0.417)	test_acc_d   0.86 (  0.85)	test_minacc_d   0.06 (  0.02)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.96 (  0.97)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00,  2.54it/s]100%|##########| 1/1 [00:00<00:00,  2.53it/s]
Test: [  0/  1]	Loss 1.708 (1.708)	test_acc   0.11 (  0.11)	test_minacc   0.01 (  0.01)	test_majacc   0.99 (  0.99)	Loss_d 1.708 (1.708)	test_acc_d   0.11 (  0.11)	test_minacc_d   0.01 (  0.01)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.96 (  0.96)
Test: [  1/  1]	Loss 1.708 (1.708)	test_acc   0.11 (  0.11)	test_minacc   0.01 (  0.01)	test_majacc   0.99 (  0.99)	Loss_d 1.708 (1.708)	test_acc_d   0.11 (  0.11)	test_minacc_d   0.01 (  0.01)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.96 (  0.96)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/35/checkpoints/model_best.pth
Overall Timing[  0/  1]	epoch_time 0.0737 (0.0737)	validation_time 0.0066 (0.0066)	train_time 0.0653 (0.0653)
record: (train_acc, test_acc) (0.8481000302433968, 0.10900000482797623)
last accs (train_acc, test_acc) (0.8481000302433968, 0.10900000482797623)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.13it/s] 19%|#9        | 5/26 [00:00<00:00, 23.62it/s] 35%|###4      | 9/26 [00:00<00:00, 28.61it/s] 50%|#####     | 13/26 [00:00<00:00, 31.34it/s] 65%|######5   | 17/26 [00:00<00:00, 32.88it/s] 81%|########  | 21/26 [00:00<00:00, 33.85it/s] 96%|#########6| 25/26 [00:00<00:00, 34.01it/s]100%|##########| 26/26 [00:00<00:00, 29.51it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 26 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 27 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 28 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 29 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 30 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 31 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 32 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 33 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 34 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 35 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 36 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 37 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 38 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 39 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 40 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 41 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 42 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 43 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 44 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 45 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 46 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 47 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 48 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 49 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 50 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 51 400
penalty weights 0.0
Epoch: [1][  26/  26]	Loss 5.267 (7.233)	train_nll   0.39 (  0.41)	train_penalty   0.02 (  0.06)	weight_norm   4.88 (  6.82)	train_acc   0.84 (  0.85)	train_minacc   0.06 (  0.02)	train_majacc   0.98 (  0.99)	train_corr   0.00 (  0.00)	l1 6.6217 (7.0244)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:00, 29.15it/s] 35%|###4      | 9/26 [00:00<00:00, 43.53it/s]                                               35%|###4      | 9/26 [00:00<00:00, 43.53it/s] 58%|#####7    | 15/26 [00:00<00:00, 44.08it/s]                                                58%|#####7    | 15/26 [00:00<00:00, 44.08it/s] 81%|########  | 21/26 [00:00<00:00, 48.85it/s]100%|##########| 26/26 [00:00<00:00, 44.03it/s]
Test: [   0/  26]	Loss 0.428 (0.428)	test_acc   0.83 (  0.83)	test_minacc   0.12 (  0.12)	test_majacc   0.98 (  0.98)	Loss_d 0.428 (0.428)	test_acc_d   0.83 (  0.83)	test_minacc_d   0.12 (  0.12)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.90 (  0.90)
Test: [  10/  26]	Loss 0.424 (0.410)	test_acc   0.83 (  0.84)	test_minacc   0.11 (  0.10)	test_majacc   0.97 (  0.97)	Loss_d 0.424 (0.410)	test_acc_d   0.83 (  0.84)	test_minacc_d   0.11 (  0.10)	test_majacc_d   0.97 (  0.97)	test_corr_d   0.90 (  0.91)
Test: [  20/  26]	Loss 0.386 (0.403)	test_acc   0.83 (  0.84)	test_minacc   0.08 (  0.10)	test_majacc   0.97 (  0.97)	Loss_d 0.386 (0.403)	test_acc_d   0.83 (  0.84)	test_minacc_d   0.08 (  0.10)	test_majacc_d   0.97 (  0.97)	test_corr_d   0.90 (  0.91)
Test: [  26/  26]	Loss 0.355 (0.398)	test_acc   0.85 (  0.84)	test_minacc   0.14 (  0.11)	test_majacc   0.97 (  0.97)	Loss_d 0.355 (0.398)	test_acc_d   0.85 (  0.84)	test_minacc_d   0.14 (  0.11)	test_majacc_d   0.97 (  0.97)	test_corr_d   0.90 (  0.91)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 67.32it/s]
Test: [  0/  1]	Loss 1.632 (1.632)	test_acc   0.19 (  0.19)	test_minacc   0.10 (  0.10)	test_majacc   0.96 (  0.96)	Loss_d 1.632 (1.632)	test_acc_d   0.19 (  0.19)	test_minacc_d   0.10 (  0.10)	test_majacc_d   0.96 (  0.96)	test_corr_d   0.82 (  0.82)
Test: [  1/  1]	Loss 1.632 (1.632)	test_acc   0.19 (  0.19)	test_minacc   0.10 (  0.10)	test_majacc   0.96 (  0.96)	Loss_d 1.632 (1.632)	test_acc_d   0.19 (  0.19)	test_minacc_d   0.10 (  0.10)	test_majacc_d   0.96 (  0.96)	test_corr_d   0.82 (  0.82)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/35/checkpoints/model_best.pth
Overall Timing[  1/  1]	epoch_time 0.0359 (0.0548)	validation_time 0.0004 (0.0035)	train_time 0.0355 (0.0504)
record: (train_acc, test_acc) (0.8404000281691552, 0.18800000846385956)
last accs (train_acc, test_acc) (0.8404000281691552, 0.18800000846385956)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.00it/s] 19%|#9        | 5/26 [00:00<00:00, 21.67it/s] 35%|###4      | 9/26 [00:00<00:00, 27.64it/s] 50%|#####     | 13/26 [00:00<00:00, 30.64it/s] 65%|######5   | 17/26 [00:00<00:00, 32.40it/s] 81%|########  | 21/26 [00:00<00:00, 33.29it/s] 96%|#########6| 25/26 [00:00<00:00, 33.99it/s]100%|##########| 26/26 [00:00<00:00, 28.94it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 52 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 53 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 54 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 55 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 56 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 57 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 58 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 59 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 60 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 61 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 62 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 63 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 64 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 65 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 66 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 67 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 68 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 69 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 70 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 71 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 72 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 73 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 74 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 75 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 76 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 77 400
penalty weights 0.0
Epoch: [2][  26/  26]	Loss 3.236 (4.104)	train_nll   0.40 (  0.40)	train_penalty   0.03 (  0.05)	weight_norm   2.84 (  3.70)	train_acc   0.83 (  0.85)	train_minacc   0.17 (  0.05)	train_majacc   0.94 (  0.99)	train_corr   0.00 (  0.00)	l1 5.5209 (6.0410)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 18.20it/s] 31%|###       | 8/26 [00:00<00:00, 40.34it/s]                                               31%|###       | 8/26 [00:00<00:00, 40.34it/s] 50%|#####     | 13/26 [00:00<00:00, 42.25it/s] 73%|#######3  | 19/26 [00:00<00:00, 48.74it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 48.74it/s] 96%|#########6| 25/26 [00:00<00:00, 49.00it/s]100%|##########| 26/26 [00:00<00:00, 42.26it/s]
Test: [   0/  26]	Loss 0.399 (0.399)	test_acc   0.84 (  0.84)	test_minacc   0.06 (  0.06)	test_majacc   1.00 (  1.00)	Loss_d 0.399 (0.399)	test_acc_d   0.84 (  0.84)	test_minacc_d   0.06 (  0.06)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.96 (  0.96)
Test: [  10/  26]	Loss 0.401 (0.385)	test_acc   0.84 (  0.85)	test_minacc   0.03 (  0.02)	test_majacc   1.00 (  1.00)	Loss_d 0.401 (0.385)	test_acc_d   0.84 (  0.85)	test_minacc_d   0.03 (  0.02)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.96 (  0.97)
Test: [  20/  26]	Loss 0.377 (0.378)	test_acc   0.84 (  0.85)	test_minacc   0.03 (  0.02)	test_majacc   0.99 (  0.99)	Loss_d 0.377 (0.378)	test_acc_d   0.84 (  0.85)	test_minacc_d   0.03 (  0.02)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.96 (  0.96)
Test: [  26/  26]	Loss 0.344 (0.374)	test_acc   0.86 (  0.85)	test_minacc   0.08 (  0.03)	test_majacc   1.00 (  0.99)	Loss_d 0.344 (0.374)	test_acc_d   0.86 (  0.85)	test_minacc_d   0.08 (  0.03)	test_majacc_d   1.00 (  0.99)	test_corr_d   0.95 (  0.96)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 67.40it/s]
Test: [  0/  1]	Loss 1.819 (1.819)	test_acc   0.12 (  0.12)	test_minacc   0.02 (  0.02)	test_majacc   1.00 (  1.00)	Loss_d 1.819 (1.819)	test_acc_d   0.12 (  0.12)	test_minacc_d   0.02 (  0.02)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.94 (  0.94)
Test: [  1/  1]	Loss 1.819 (1.819)	test_acc   0.12 (  0.12)	test_minacc   0.02 (  0.02)	test_majacc   1.00 (  1.00)	Loss_d 1.819 (1.819)	test_acc_d   0.12 (  0.12)	test_minacc_d   0.02 (  0.02)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.94 (  0.94)
Overall Timing[  2/  1]	epoch_time 0.0353 (0.0483)	validation_time 0.0003 (0.0024)	train_time 0.0349 (0.0452)
record: (train_acc, test_acc) (0.8404000281691552, 0.18800000846385956)
last accs (train_acc, test_acc) (0.8483000221848488, 0.11500000208616257)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.72it/s] 19%|#9        | 5/26 [00:00<00:00, 22.37it/s] 35%|###4      | 9/26 [00:00<00:00, 28.03it/s] 50%|#####     | 13/26 [00:00<00:00, 30.55it/s] 65%|######5   | 17/26 [00:00<00:00, 32.22it/s] 81%|########  | 21/26 [00:00<00:00, 33.54it/s] 96%|#########6| 25/26 [00:00<00:00, 34.21it/s]100%|##########| 26/26 [00:00<00:00, 29.09it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 78 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 79 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 80 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 81 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 82 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 83 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 84 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 85 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 86 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 87 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 88 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 89 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 90 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 91 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 92 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 93 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 94 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 95 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 96 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 97 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 98 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 99 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 100 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 101 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 102 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 103 400
penalty weights 0.0
Epoch: [3][  26/  26]	Loss 2.160 (2.642)	train_nll   0.36 (  0.38)	train_penalty   0.02 (  0.04)	weight_norm   1.80 (  2.26)	train_acc   0.84 (  0.84)	train_minacc   0.25 (  0.07)	train_majacc   0.94 (  0.98)	train_corr   0.00 (  0.00)	l1 5.0790 (5.1438)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 19.09it/s] 31%|###       | 8/26 [00:00<00:00, 41.13it/s]                                               31%|###       | 8/26 [00:00<00:00, 41.13it/s] 50%|#####     | 13/26 [00:00<00:00, 42.28it/s] 73%|#######3  | 19/26 [00:00<00:00, 48.22it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 48.22it/s] 96%|#########6| 25/26 [00:00<00:00, 47.83it/s]100%|##########| 26/26 [00:00<00:00, 41.61it/s]
Test: [   0/  26]	Loss 0.409 (0.409)	test_acc   0.82 (  0.82)	test_minacc   0.06 (  0.06)	test_majacc   0.98 (  0.98)	Loss_d 0.409 (0.409)	test_acc_d   0.82 (  0.82)	test_minacc_d   0.06 (  0.06)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.92 (  0.92)
Test: [  10/  26]	Loss 0.403 (0.386)	test_acc   0.84 (  0.85)	test_minacc   0.08 (  0.06)	test_majacc   0.99 (  0.99)	Loss_d 0.403 (0.386)	test_acc_d   0.84 (  0.85)	test_minacc_d   0.08 (  0.06)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.92 (  0.92)
Test: [  20/  26]	Loss 0.365 (0.380)	test_acc   0.86 (  0.85)	test_minacc   0.15 (  0.08)	test_majacc   0.99 (  0.98)	Loss_d 0.365 (0.380)	test_acc_d   0.86 (  0.85)	test_minacc_d   0.15 (  0.08)	test_majacc_d   0.99 (  0.98)	test_corr_d   0.92 (  0.92)
Test: [  26/  26]	Loss 0.330 (0.375)	test_acc   0.86 (  0.85)	test_minacc   0.17 (  0.09)	test_majacc   0.98 (  0.98)	Loss_d 0.330 (0.375)	test_acc_d   0.86 (  0.85)	test_minacc_d   0.17 (  0.09)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.90 (  0.92)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 64.90it/s]
Test: [  0/  1]	Loss 1.846 (1.846)	test_acc   0.19 (  0.19)	test_minacc   0.10 (  0.10)	test_majacc   0.98 (  0.98)	Loss_d 1.846 (1.846)	test_acc_d   0.19 (  0.19)	test_minacc_d   0.10 (  0.10)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.84 (  0.84)
Test: [  1/  1]	Loss 1.846 (1.846)	test_acc   0.19 (  0.19)	test_minacc   0.10 (  0.10)	test_majacc   0.98 (  0.98)	Loss_d 1.846 (1.846)	test_acc_d   0.19 (  0.19)	test_minacc_d   0.10 (  0.10)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.84 (  0.84)
Overall Timing[  3/  1]	epoch_time 0.0384 (0.0458)	validation_time 0.0004 (0.0019)	train_time 0.0380 (0.0434)
record: (train_acc, test_acc) (0.8404000281691552, 0.18800000846385956)
last accs (train_acc, test_acc) (0.84960002887249, 0.18800000846385956)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.53it/s] 19%|#9        | 5/26 [00:00<00:00, 22.34it/s] 35%|###4      | 9/26 [00:00<00:00, 27.48it/s] 50%|#####     | 13/26 [00:00<00:00, 30.69it/s] 65%|######5   | 17/26 [00:00<00:00, 32.50it/s] 81%|########  | 21/26 [00:00<00:00, 33.66it/s] 96%|#########6| 25/26 [00:00<00:00, 34.35it/s]100%|##########| 26/26 [00:00<00:00, 28.99it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 104 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 105 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 106 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 107 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 108 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 109 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 110 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 111 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 112 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 113 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 114 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 115 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 116 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 117 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 118 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 119 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 120 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 121 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 122 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 123 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 124 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 125 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 126 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 127 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 128 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 129 400
penalty weights 0.0
Epoch: [4][  26/  26]	Loss 1.523 (1.821)	train_nll   0.36 (  0.37)	train_penalty   0.01 (  0.04)	weight_norm   1.17 (  1.45)	train_acc   0.85 (  0.85)	train_minacc   0.25 (  0.06)	train_majacc   0.95 (  0.99)	train_corr   0.00 (  0.00)	l1 5.4279 (5.0647)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 14.81it/s] 31%|###       | 8/26 [00:00<00:00, 36.27it/s]                                               31%|###       | 8/26 [00:00<00:00, 36.27it/s] 54%|#####3    | 14/26 [00:00<00:00, 41.52it/s] 77%|#######6  | 20/26 [00:00<00:00, 47.62it/s]                                                77%|#######6  | 20/26 [00:00<00:00, 47.62it/s]100%|##########| 26/26 [00:00<00:00, 51.26it/s]100%|##########| 26/26 [00:00<00:00, 40.98it/s]
Test: [   0/  26]	Loss 0.374 (0.374)	test_acc   0.83 (  0.83)	test_minacc   0.00 (  0.00)	test_majacc   1.00 (  1.00)	Loss_d 0.374 (0.374)	test_acc_d   0.83 (  0.83)	test_minacc_d   0.00 (  0.00)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.96 (  0.96)
Test: [  10/  26]	Loss 0.360 (0.355)	test_acc   0.84 (  0.85)	test_minacc   0.02 (  0.01)	test_majacc   1.00 (  1.00)	Loss_d 0.360 (0.355)	test_acc_d   0.84 (  0.85)	test_minacc_d   0.02 (  0.01)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.96 (  0.96)
Test: [  20/  26]	Loss 0.334 (0.347)	test_acc   0.84 (  0.85)	test_minacc   0.00 (  0.01)	test_majacc   1.00 (  1.00)	Loss_d 0.334 (0.347)	test_acc_d   0.84 (  0.85)	test_minacc_d   0.00 (  0.01)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.96 (  0.96)
Test: [  26/  26]	Loss 0.320 (0.343)	test_acc   0.85 (  0.85)	test_minacc   0.00 (  0.01)	test_majacc   1.00 (  1.00)	Loss_d 0.320 (0.343)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.00 (  0.01)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.95 (  0.96)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 67.10it/s]
Test: [  0/  1]	Loss 1.879 (1.879)	test_acc   0.12 (  0.12)	test_minacc   0.02 (  0.02)	test_majacc   1.00 (  1.00)	Loss_d 1.879 (1.879)	test_acc_d   0.12 (  0.12)	test_minacc_d   0.02 (  0.02)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.91 (  0.91)
Test: [  1/  1]	Loss 1.879 (1.879)	test_acc   0.12 (  0.12)	test_minacc   0.02 (  0.02)	test_majacc   1.00 (  1.00)	Loss_d 1.879 (1.879)	test_acc_d   0.12 (  0.12)	test_minacc_d   0.02 (  0.02)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.91 (  0.91)
Overall Timing[  4/  1]	epoch_time 0.0350 (0.0436)	validation_time 0.0004 (0.0016)	train_time 0.0346 (0.0417)
record: (train_acc, test_acc) (0.8404000281691552, 0.18800000846385956)
last accs (train_acc, test_acc) (0.8493000218272209, 0.12200000882148743)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.03it/s] 19%|#9        | 5/26 [00:00<00:00, 21.33it/s] 35%|###4      | 9/26 [00:00<00:00, 26.56it/s] 50%|#####     | 13/26 [00:00<00:00, 30.33it/s] 65%|######5   | 17/26 [00:00<00:00, 31.49it/s] 81%|########  | 21/26 [00:00<00:00, 32.15it/s] 96%|#########6| 25/26 [00:00<00:00, 33.07it/s]100%|##########| 26/26 [00:00<00:00, 27.83it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 130 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 131 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 132 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 133 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 134 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 135 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 136 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 137 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 138 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 139 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 140 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 141 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 142 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 143 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 144 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 145 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 146 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 147 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 148 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 149 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 150 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 151 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 152 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 153 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 154 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 155 400
penalty weights 0.0
Epoch: [5][  26/  26]	Loss 1.157 (1.323)	train_nll   0.38 (  0.37)	train_penalty   0.04 (  0.04)	weight_norm   0.77 (  0.95)	train_acc   0.83 (  0.85)	train_minacc   0.14 (  0.06)	train_majacc   0.94 (  0.98)	train_corr   0.00 (  0.00)	l1 5.9148 (5.5013)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.41it/s] 23%|##3       | 6/26 [00:00<00:00, 32.10it/s]                                               23%|##3       | 6/26 [00:00<00:00, 32.10it/s] 46%|####6     | 12/26 [00:00<00:00, 43.13it/s] 69%|######9   | 18/26 [00:00<00:00, 45.39it/s]                                                69%|######9   | 18/26 [00:00<00:00, 45.39it/s] 92%|#########2| 24/26 [00:00<00:00, 49.05it/s]100%|##########| 26/26 [00:00<00:00, 41.18it/s]
Test: [   0/  26]	Loss 0.400 (0.400)	test_acc   0.84 (  0.84)	test_minacc   0.16 (  0.16)	test_majacc   0.98 (  0.98)	Loss_d 0.400 (0.400)	test_acc_d   0.84 (  0.84)	test_minacc_d   0.16 (  0.16)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.90 (  0.90)
Test: [  10/  26]	Loss 0.379 (0.381)	test_acc   0.83 (  0.84)	test_minacc   0.08 (  0.08)	test_majacc   0.98 (  0.98)	Loss_d 0.379 (0.381)	test_acc_d   0.83 (  0.84)	test_minacc_d   0.08 (  0.08)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.92 (  0.92)
Test: [  20/  26]	Loss 0.349 (0.375)	test_acc   0.87 (  0.84)	test_minacc   0.23 (  0.09)	test_majacc   0.99 (  0.98)	Loss_d 0.349 (0.375)	test_acc_d   0.87 (  0.84)	test_minacc_d   0.23 (  0.09)	test_majacc_d   0.99 (  0.98)	test_corr_d   0.91 (  0.92)
Test: [  26/  26]	Loss 0.340 (0.371)	test_acc   0.85 (  0.85)	test_minacc   0.19 (  0.11)	test_majacc   0.96 (  0.98)	Loss_d 0.340 (0.371)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.19 (  0.11)	test_majacc_d   0.96 (  0.98)	test_corr_d   0.91 (  0.92)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.28it/s]
Test: [  0/  1]	Loss 1.772 (1.772)	test_acc   0.20 (  0.20)	test_minacc   0.12 (  0.12)	test_majacc   0.95 (  0.95)	Loss_d 1.772 (1.772)	test_acc_d   0.20 (  0.20)	test_minacc_d   0.12 (  0.12)	test_majacc_d   0.95 (  0.95)	test_corr_d   0.82 (  0.82)
Test: [  1/  1]	Loss 1.772 (1.772)	test_acc   0.20 (  0.20)	test_minacc   0.12 (  0.12)	test_majacc   0.95 (  0.95)	Loss_d 1.772 (1.772)	test_acc_d   0.20 (  0.20)	test_minacc_d   0.12 (  0.12)	test_majacc_d   0.95 (  0.95)	test_corr_d   0.82 (  0.82)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/35/checkpoints/model_best.pth
Overall Timing[  5/  1]	epoch_time 0.0353 (0.0423)	validation_time 0.0003 (0.0014)	train_time 0.0350 (0.0405)
record: (train_acc, test_acc) (0.8464000254869462, 0.1990000158548355)
last accs (train_acc, test_acc) (0.8464000254869462, 0.1990000158548355)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.02it/s] 19%|#9        | 5/26 [00:00<00:00, 23.05it/s] 35%|###4      | 9/26 [00:00<00:00, 27.89it/s] 50%|#####     | 13/26 [00:00<00:00, 30.41it/s] 65%|######5   | 17/26 [00:00<00:00, 31.89it/s] 81%|########  | 21/26 [00:00<00:00, 32.57it/s] 96%|#########6| 25/26 [00:00<00:00, 32.89it/s]100%|##########| 26/26 [00:00<00:00, 28.90it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 156 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 157 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 158 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 159 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 160 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 161 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 162 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 163 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 164 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 165 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 166 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 167 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 168 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 169 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 170 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 171 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 172 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 173 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 174 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 175 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 176 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 177 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 178 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 179 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 180 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 181 400
penalty weights 0.0
Epoch: [6][  26/  26]	Loss 0.845 (0.999)	train_nll   0.33 (  0.36)	train_penalty   0.01 (  0.03)	weight_norm   0.52 (  0.64)	train_acc   0.84 (  0.85)	train_minacc   0.03 (  0.08)	train_majacc   0.98 (  0.99)	train_corr   0.00 (  0.00)	l1 6.9358 (6.3263)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.13it/s] 27%|##6       | 7/26 [00:00<00:00, 33.83it/s]                                               27%|##6       | 7/26 [00:00<00:00, 33.83it/s] 50%|#####     | 13/26 [00:00<00:00, 39.92it/s] 73%|#######3  | 19/26 [00:00<00:00, 45.10it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 45.10it/s] 96%|#########6| 25/26 [00:00<00:00, 47.02it/s]100%|##########| 26/26 [00:00<00:00, 40.06it/s]
Test: [   0/  26]	Loss 0.398 (0.398)	test_acc   0.82 (  0.82)	test_minacc   0.06 (  0.06)	test_majacc   0.98 (  0.98)	Loss_d 0.398 (0.398)	test_acc_d   0.82 (  0.82)	test_minacc_d   0.06 (  0.06)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.89 (  0.89)
Test: [  10/  26]	Loss 0.376 (0.384)	test_acc   0.84 (  0.84)	test_minacc   0.03 (  0.04)	test_majacc   1.00 (  0.99)	Loss_d 0.376 (0.384)	test_acc_d   0.84 (  0.84)	test_minacc_d   0.03 (  0.04)	test_majacc_d   1.00 (  0.99)	test_corr_d   0.90 (  0.90)
Test: [  20/  26]	Loss 0.339 (0.377)	test_acc   0.84 (  0.85)	test_minacc   0.00 (  0.05)	test_majacc   1.00 (  0.99)	Loss_d 0.339 (0.377)	test_acc_d   0.84 (  0.85)	test_minacc_d   0.00 (  0.05)	test_majacc_d   1.00 (  0.99)	test_corr_d   0.91 (  0.90)
Test: [  26/  26]	Loss 0.333 (0.374)	test_acc   0.86 (  0.85)	test_minacc   0.06 (  0.06)	test_majacc   1.00 (  0.99)	Loss_d 0.333 (0.374)	test_acc_d   0.86 (  0.85)	test_minacc_d   0.06 (  0.06)	test_majacc_d   1.00 (  0.99)	test_corr_d   0.90 (  0.90)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.69it/s]
Test: [  0/  1]	Loss 1.720 (1.720)	test_acc   0.14 (  0.14)	test_minacc   0.05 (  0.05)	test_majacc   0.99 (  0.99)	Loss_d 1.720 (1.720)	test_acc_d   0.14 (  0.14)	test_minacc_d   0.05 (  0.05)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.83 (  0.83)
Test: [  1/  1]	Loss 1.720 (1.720)	test_acc   0.14 (  0.14)	test_minacc   0.05 (  0.05)	test_majacc   0.99 (  0.99)	Loss_d 1.720 (1.720)	test_acc_d   0.14 (  0.14)	test_minacc_d   0.05 (  0.05)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.83 (  0.83)
Overall Timing[  6/  1]	epoch_time 0.0353 (0.0413)	validation_time 0.0004 (0.0013)	train_time 0.0349 (0.0397)
record: (train_acc, test_acc) (0.8464000254869462, 0.1990000158548355)
last accs (train_acc, test_acc) (0.8485000231266022, 0.14100000262260437)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.45it/s] 19%|#9        | 5/26 [00:00<00:01, 18.69it/s] 35%|###4      | 9/26 [00:00<00:00, 25.42it/s] 50%|#####     | 13/26 [00:00<00:00, 28.95it/s] 65%|######5   | 17/26 [00:00<00:00, 30.45it/s] 81%|########  | 21/26 [00:00<00:00, 32.22it/s] 96%|#########6| 25/26 [00:00<00:00, 33.60it/s]100%|##########| 26/26 [00:00<00:00, 27.38it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 182 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 183 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 184 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 185 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 186 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 187 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 188 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 189 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 190 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 191 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 192 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 193 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 194 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 195 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 196 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 197 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 198 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 199 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 200 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 201 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 202 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 203 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 204 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 205 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 206 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 207 400
penalty weights 0.0
Epoch: [7][  26/  26]	Loss 0.720 (0.784)	train_nll   0.35 (  0.36)	train_penalty   0.01 (  0.03)	weight_norm   0.37 (  0.43)	train_acc   0.84 (  0.85)	train_minacc   0.25 (  0.11)	train_majacc   0.94 (  0.98)	train_corr   0.00 (  0.00)	l1 8.3926 (7.6309)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.50it/s] 23%|##3       | 6/26 [00:00<00:00, 32.27it/s]                                               23%|##3       | 6/26 [00:00<00:00, 32.27it/s] 42%|####2     | 11/26 [00:00<00:00, 39.93it/s] 65%|######5   | 17/26 [00:00<00:00, 44.70it/s]                                                65%|######5   | 17/26 [00:00<00:00, 44.70it/s] 88%|########8 | 23/26 [00:00<00:00, 48.09it/s]100%|##########| 26/26 [00:00<00:00, 40.45it/s]
Test: [   0/  26]	Loss 0.378 (0.378)	test_acc   0.84 (  0.84)	test_minacc   0.22 (  0.22)	test_majacc   0.97 (  0.97)	Loss_d 0.378 (0.378)	test_acc_d   0.84 (  0.84)	test_minacc_d   0.22 (  0.22)	test_majacc_d   0.97 (  0.97)	test_corr_d   0.91 (  0.91)
Test: [  10/  26]	Loss 0.363 (0.347)	test_acc   0.84 (  0.86)	test_minacc   0.11 (  0.15)	test_majacc   0.98 (  0.98)	Loss_d 0.363 (0.347)	test_acc_d   0.84 (  0.86)	test_minacc_d   0.11 (  0.15)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.93 (  0.92)
Test: [  20/  26]	Loss 0.331 (0.344)	test_acc   0.87 (  0.86)	test_minacc   0.28 (  0.15)	test_majacc   0.98 (  0.98)	Loss_d 0.331 (0.344)	test_acc_d   0.87 (  0.86)	test_minacc_d   0.28 (  0.15)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.92 (  0.92)
Test: [  26/  26]	Loss 0.303 (0.340)	test_acc   0.84 (  0.86)	test_minacc   0.14 (  0.15)	test_majacc   0.96 (  0.98)	Loss_d 0.303 (0.340)	test_acc_d   0.84 (  0.86)	test_minacc_d   0.14 (  0.15)	test_majacc_d   0.96 (  0.98)	test_corr_d   0.91 (  0.92)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.74it/s]
Test: [  0/  1]	Loss 1.764 (1.764)	test_acc   0.21 (  0.21)	test_minacc   0.12 (  0.12)	test_majacc   0.99 (  0.99)	Loss_d 1.764 (1.764)	test_acc_d   0.21 (  0.21)	test_minacc_d   0.12 (  0.12)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.82 (  0.82)
Test: [  1/  1]	Loss 1.764 (1.764)	test_acc   0.21 (  0.21)	test_minacc   0.12 (  0.12)	test_majacc   0.99 (  0.99)	Loss_d 1.764 (1.764)	test_acc_d   0.21 (  0.21)	test_minacc_d   0.12 (  0.12)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.82 (  0.82)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/35/checkpoints/model_best.pth
Overall Timing[  7/  1]	epoch_time 0.0365 (0.0407)	validation_time 0.0004 (0.0012)	train_time 0.0360 (0.0393)
record: (train_acc, test_acc) (0.8564000198245049, 0.21000000834465027)
last accs (train_acc, test_acc) (0.8564000198245049, 0.21000000834465027)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.95it/s] 15%|#5        | 4/26 [00:00<00:01, 18.29it/s] 31%|###       | 8/26 [00:00<00:00, 25.38it/s] 46%|####6     | 12/26 [00:00<00:00, 28.72it/s] 62%|######1   | 16/26 [00:00<00:00, 30.77it/s] 77%|#######6  | 20/26 [00:00<00:00, 31.98it/s] 92%|#########2| 24/26 [00:00<00:00, 32.59it/s]100%|##########| 26/26 [00:00<00:00, 27.71it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 208 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 209 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 210 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 211 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 212 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 213 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 214 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 215 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 216 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 217 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 218 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 219 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 220 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 221 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 222 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 223 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 224 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 225 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 226 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 227 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 228 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 229 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 230 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 231 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 232 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 233 400
penalty weights 0.0
Epoch: [8][  26/  26]	Loss 0.602 (0.660)	train_nll   0.34 (  0.36)	train_penalty   0.01 (  0.03)	weight_norm   0.26 (  0.30)	train_acc   0.82 (  0.85)	train_minacc   0.19 (  0.13)	train_majacc   0.93 (  0.98)	train_corr   0.00 (  0.00)	l1 9.6929 (9.0147)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.98it/s] 27%|##6       | 7/26 [00:00<00:00, 36.69it/s]                                               27%|##6       | 7/26 [00:00<00:00, 36.69it/s] 50%|#####     | 13/26 [00:00<00:00, 42.32it/s] 73%|#######3  | 19/26 [00:00<00:00, 48.32it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 48.32it/s] 96%|#########6| 25/26 [00:00<00:00, 48.24it/s]100%|##########| 26/26 [00:00<00:00, 41.75it/s]
Test: [   0/  26]	Loss 0.371 (0.371)	test_acc   0.84 (  0.84)	test_minacc   0.21 (  0.21)	test_majacc   0.97 (  0.97)	Loss_d 0.371 (0.371)	test_acc_d   0.84 (  0.84)	test_minacc_d   0.21 (  0.21)	test_majacc_d   0.97 (  0.97)	test_corr_d   0.88 (  0.88)
Test: [  10/  26]	Loss 0.363 (0.357)	test_acc   0.84 (  0.85)	test_minacc   0.16 (  0.16)	test_majacc   0.98 (  0.97)	Loss_d 0.363 (0.357)	test_acc_d   0.84 (  0.85)	test_minacc_d   0.16 (  0.16)	test_majacc_d   0.98 (  0.97)	test_corr_d   0.89 (  0.89)
Test: [  20/  26]	Loss 0.321 (0.350)	test_acc   0.88 (  0.85)	test_minacc   0.31 (  0.18)	test_majacc   0.99 (  0.97)	Loss_d 0.321 (0.350)	test_acc_d   0.88 (  0.85)	test_minacc_d   0.31 (  0.18)	test_majacc_d   0.99 (  0.97)	test_corr_d   0.89 (  0.89)
Test: [  26/  26]	Loss 0.305 (0.347)	test_acc   0.82 (  0.85)	test_minacc   0.17 (  0.19)	test_majacc   0.93 (  0.97)	Loss_d 0.305 (0.347)	test_acc_d   0.82 (  0.85)	test_minacc_d   0.17 (  0.19)	test_majacc_d   0.93 (  0.97)	test_corr_d   0.87 (  0.89)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.86it/s]
Test: [  0/  1]	Loss 1.587 (1.587)	test_acc   0.27 (  0.27)	test_minacc   0.19 (  0.19)	test_majacc   0.95 (  0.95)	Loss_d 1.587 (1.587)	test_acc_d   0.27 (  0.27)	test_minacc_d   0.19 (  0.19)	test_majacc_d   0.95 (  0.95)	test_corr_d   0.73 (  0.73)
Test: [  1/  1]	Loss 1.587 (1.587)	test_acc   0.27 (  0.27)	test_minacc   0.19 (  0.19)	test_majacc   0.95 (  0.95)	Loss_d 1.587 (1.587)	test_acc_d   0.27 (  0.27)	test_minacc_d   0.19 (  0.19)	test_majacc_d   0.95 (  0.95)	test_corr_d   0.73 (  0.73)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/35/checkpoints/model_best.pth
Overall Timing[  8/  1]	epoch_time 0.0370 (0.0403)	validation_time 0.0003 (0.0011)	train_time 0.0366 (0.0390)
record: (train_acc, test_acc) (0.8526000263094902, 0.26600000262260437)
last accs (train_acc, test_acc) (0.8526000263094902, 0.26600000262260437)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.74it/s] 19%|#9        | 5/26 [00:00<00:00, 21.36it/s] 35%|###4      | 9/26 [00:00<00:00, 27.16it/s] 50%|#####     | 13/26 [00:00<00:00, 30.60it/s] 65%|######5   | 17/26 [00:00<00:00, 32.56it/s] 81%|########  | 21/26 [00:00<00:00, 33.90it/s] 96%|#########6| 25/26 [00:00<00:00, 34.92it/s]100%|##########| 26/26 [00:00<00:00, 29.33it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 234 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 235 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 236 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 237 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 238 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 239 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 240 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 241 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 242 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 243 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 244 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 245 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 246 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 247 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 248 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 249 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 250 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 251 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 252 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 253 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 254 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 255 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 256 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 257 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 258 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 259 400
penalty weights 0.0
Epoch: [9][  26/  26]	Loss 0.542 (0.576)	train_nll   0.35 (  0.35)	train_penalty   0.01 (  0.03)	weight_norm   0.19 (  0.23)	train_acc   0.84 (  0.85)	train_minacc   0.28 (  0.12)	train_majacc   0.94 (  0.98)	train_corr   0.00 (  0.00)	l1 11.4827 (10.5039)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.42it/s] 27%|##6       | 7/26 [00:00<00:00, 27.94it/s]                                               27%|##6       | 7/26 [00:00<00:00, 27.94it/s] 50%|#####     | 13/26 [00:00<00:00, 38.57it/s] 73%|#######3  | 19/26 [00:00<00:00, 43.05it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 43.05it/s] 96%|#########6| 25/26 [00:00<00:00, 47.33it/s]100%|##########| 26/26 [00:00<00:00, 37.94it/s]
Test: [   0/  26]	Loss 0.374 (0.374)	test_acc   0.84 (  0.84)	test_minacc   0.12 (  0.12)	test_majacc   0.99 (  0.99)	Loss_d 0.374 (0.374)	test_acc_d   0.84 (  0.84)	test_minacc_d   0.12 (  0.12)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.93 (  0.93)
Test: [  10/  26]	Loss 0.361 (0.352)	test_acc   0.84 (  0.85)	test_minacc   0.06 (  0.06)	test_majacc   0.99 (  0.99)	Loss_d 0.361 (0.352)	test_acc_d   0.84 (  0.85)	test_minacc_d   0.06 (  0.06)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.95 (  0.95)
Test: [  20/  26]	Loss 0.315 (0.346)	test_acc   0.87 (  0.85)	test_minacc   0.25 (  0.07)	test_majacc   0.99 (  0.99)	Loss_d 0.315 (0.346)	test_acc_d   0.87 (  0.85)	test_minacc_d   0.25 (  0.07)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.93 (  0.94)
Test: [  26/  26]	Loss 0.311 (0.343)	test_acc   0.85 (  0.85)	test_minacc   0.08 (  0.08)	test_majacc   0.98 (  0.99)	Loss_d 0.311 (0.343)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.08 (  0.08)	test_majacc_d   0.98 (  0.99)	test_corr_d   0.94 (  0.94)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.97it/s]
Test: [  0/  1]	Loss 1.861 (1.861)	test_acc   0.17 (  0.17)	test_minacc   0.08 (  0.08)	test_majacc   0.99 (  0.99)	Loss_d 1.861 (1.861)	test_acc_d   0.17 (  0.17)	test_minacc_d   0.08 (  0.08)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.85 (  0.85)
Test: [  1/  1]	Loss 1.861 (1.861)	test_acc   0.17 (  0.17)	test_minacc   0.08 (  0.08)	test_majacc   0.99 (  0.99)	Loss_d 1.861 (1.861)	test_acc_d   0.17 (  0.17)	test_minacc_d   0.08 (  0.08)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.85 (  0.85)
Overall Timing[  9/  1]	epoch_time 0.0361 (0.0398)	validation_time 0.0004 (0.0010)	train_time 0.0357 (0.0386)
record: (train_acc, test_acc) (0.8526000263094902, 0.26600000262260437)
last accs (train_acc, test_acc) (0.8532000227570534, 0.16900001466274261)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:05,  4.97it/s] 19%|#9        | 5/26 [00:00<00:01, 17.59it/s] 35%|###4      | 9/26 [00:00<00:00, 23.68it/s] 50%|#####     | 13/26 [00:00<00:00, 28.04it/s] 65%|######5   | 17/26 [00:00<00:00, 29.75it/s] 81%|########  | 21/26 [00:00<00:00, 31.34it/s] 96%|#########6| 25/26 [00:00<00:00, 32.29it/s]100%|##########| 26/26 [00:00<00:00, 26.32it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 260 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 261 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 262 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 263 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 264 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 265 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 266 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 267 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 268 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 269 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 270 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 271 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 272 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 273 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 274 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 275 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 276 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 277 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 278 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 279 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 280 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 281 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 282 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 283 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 284 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 285 400
penalty weights 0.0
Epoch: [10][  26/  26]	Loss 0.498 (0.511)	train_nll   0.34 (  0.34)	train_penalty   0.01 (  0.02)	weight_norm   0.15 (  0.17)	train_acc   0.81 (  0.85)	train_minacc   0.25 (  0.16)	train_majacc   0.90 (  0.97)	train_corr   0.00 (  0.00)	l1 13.1360 (12.1802)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 13.86it/s] 31%|###       | 8/26 [00:00<00:00, 35.68it/s]                                               31%|###       | 8/26 [00:00<00:00, 35.68it/s] 54%|#####3    | 14/26 [00:00<00:00, 41.79it/s] 77%|#######6  | 20/26 [00:00<00:00, 47.17it/s]                                                77%|#######6  | 20/26 [00:00<00:00, 47.17it/s]100%|##########| 26/26 [00:00<00:00, 41.07it/s]
Test: [   0/  26]	Loss 0.356 (0.356)	test_acc   0.85 (  0.85)	test_minacc   0.18 (  0.18)	test_majacc   0.99 (  0.99)	Loss_d 0.356 (0.356)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.18 (  0.18)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.90 (  0.90)
Test: [  10/  26]	Loss 0.359 (0.345)	test_acc   0.85 (  0.85)	test_minacc   0.11 (  0.12)	test_majacc   0.99 (  0.99)	Loss_d 0.359 (0.345)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.11 (  0.12)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.91 (  0.91)
Test: [  20/  26]	Loss 0.312 (0.338)	test_acc   0.87 (  0.85)	test_minacc   0.21 (  0.13)	test_majacc   0.99 (  0.98)	Loss_d 0.312 (0.338)	test_acc_d   0.87 (  0.85)	test_minacc_d   0.21 (  0.13)	test_majacc_d   0.99 (  0.98)	test_corr_d   0.91 (  0.91)
Test: [  26/  26]	Loss 0.301 (0.335)	test_acc   0.84 (  0.85)	test_minacc   0.14 (  0.13)	test_majacc   0.96 (  0.98)	Loss_d 0.301 (0.335)	test_acc_d   0.84 (  0.85)	test_minacc_d   0.14 (  0.13)	test_majacc_d   0.96 (  0.98)	test_corr_d   0.90 (  0.91)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.08it/s]
Test: [  0/  1]	Loss 1.714 (1.714)	test_acc   0.21 (  0.21)	test_minacc   0.12 (  0.12)	test_majacc   0.96 (  0.96)	Loss_d 1.714 (1.714)	test_acc_d   0.21 (  0.21)	test_minacc_d   0.12 (  0.12)	test_majacc_d   0.96 (  0.96)	test_corr_d   0.80 (  0.80)
Test: [  1/  1]	Loss 1.714 (1.714)	test_acc   0.21 (  0.21)	test_minacc   0.12 (  0.12)	test_majacc   0.96 (  0.96)	Loss_d 1.714 (1.714)	test_acc_d   0.21 (  0.21)	test_minacc_d   0.12 (  0.12)	test_majacc_d   0.96 (  0.96)	test_corr_d   0.80 (  0.80)
Overall Timing[ 10/  1]	epoch_time 0.0360 (0.0395)	validation_time 0.0004 (0.0009)	train_time 0.0356 (0.0384)
record: (train_acc, test_acc) (0.8526000263094902, 0.26600000262260437)
last accs (train_acc, test_acc) (0.8547000266909599, 0.2070000171661377)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.53it/s] 19%|#9        | 5/26 [00:00<00:00, 24.01it/s] 35%|###4      | 9/26 [00:00<00:00, 27.99it/s] 50%|#####     | 13/26 [00:00<00:00, 30.07it/s] 65%|######5   | 17/26 [00:00<00:00, 31.60it/s] 81%|########  | 21/26 [00:00<00:00, 32.32it/s] 96%|#########6| 25/26 [00:00<00:00, 32.74it/s]100%|##########| 26/26 [00:00<00:00, 28.68it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 286 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 287 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 288 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 289 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 290 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 291 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 292 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 293 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 294 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 295 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 296 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 297 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 298 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 299 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 300 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 301 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 302 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 303 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 304 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 305 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 306 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 307 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 308 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 309 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 310 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 311 400
penalty weights 0.0
Epoch: [11][  26/  26]	Loss 0.469 (0.484)	train_nll   0.34 (  0.34)	train_penalty   0.02 (  0.02)	weight_norm   0.13 (  0.14)	train_acc   0.83 (  0.85)	train_minacc   0.14 (  0.16)	train_majacc   0.94 (  0.97)	train_corr   0.00 (  0.00)	l1 14.5773 (13.8859)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 18.02it/s] 31%|###       | 8/26 [00:00<00:00, 39.11it/s]                                               31%|###       | 8/26 [00:00<00:00, 39.11it/s] 50%|#####     | 13/26 [00:00<00:00, 40.25it/s] 73%|#######3  | 19/26 [00:00<00:00, 46.96it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 46.96it/s] 96%|#########6| 25/26 [00:00<00:00, 47.35it/s]100%|##########| 26/26 [00:00<00:00, 40.67it/s]
Test: [   0/  26]	Loss 0.348 (0.348)	test_acc   0.85 (  0.85)	test_minacc   0.28 (  0.28)	test_majacc   0.97 (  0.97)	Loss_d 0.348 (0.348)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.28 (  0.28)	test_majacc_d   0.97 (  0.97)	test_corr_d   0.90 (  0.90)
Test: [  10/  26]	Loss 0.356 (0.341)	test_acc   0.84 (  0.85)	test_minacc   0.16 (  0.16)	test_majacc   0.98 (  0.97)	Loss_d 0.356 (0.341)	test_acc_d   0.84 (  0.85)	test_minacc_d   0.16 (  0.16)	test_majacc_d   0.98 (  0.97)	test_corr_d   0.92 (  0.92)
Test: [  20/  26]	Loss 0.318 (0.335)	test_acc   0.87 (  0.85)	test_minacc   0.28 (  0.17)	test_majacc   0.98 (  0.97)	Loss_d 0.318 (0.335)	test_acc_d   0.87 (  0.85)	test_minacc_d   0.28 (  0.17)	test_majacc_d   0.98 (  0.97)	test_corr_d   0.90 (  0.92)
Test: [  26/  26]	Loss 0.305 (0.331)	test_acc   0.85 (  0.85)	test_minacc   0.28 (  0.18)	test_majacc   0.95 (  0.97)	Loss_d 0.305 (0.331)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.28 (  0.18)	test_majacc_d   0.95 (  0.97)	test_corr_d   0.90 (  0.91)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.23it/s]
Test: [  0/  1]	Loss 1.733 (1.733)	test_acc   0.24 (  0.24)	test_minacc   0.16 (  0.16)	test_majacc   0.99 (  0.99)	Loss_d 1.733 (1.733)	test_acc_d   0.24 (  0.24)	test_minacc_d   0.16 (  0.16)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.79 (  0.79)
Test: [  1/  1]	Loss 1.733 (1.733)	test_acc   0.24 (  0.24)	test_minacc   0.16 (  0.16)	test_majacc   0.99 (  0.99)	Loss_d 1.733 (1.733)	test_acc_d   0.24 (  0.24)	test_minacc_d   0.16 (  0.16)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.79 (  0.79)
Overall Timing[ 11/  1]	epoch_time 0.0355 (0.0392)	validation_time 0.0003 (0.0009)	train_time 0.0351 (0.0381)
record: (train_acc, test_acc) (0.8526000263094902, 0.26600000262260437)
last accs (train_acc, test_acc) (0.854600024998188, 0.242000013589859)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.91it/s] 19%|#9        | 5/26 [00:00<00:01, 19.36it/s] 35%|###4      | 9/26 [00:00<00:00, 25.20it/s] 50%|#####     | 13/26 [00:00<00:00, 28.36it/s] 65%|######5   | 17/26 [00:00<00:00, 30.20it/s] 81%|########  | 21/26 [00:00<00:00, 31.79it/s] 96%|#########6| 25/26 [00:00<00:00, 33.29it/s]100%|##########| 26/26 [00:00<00:00, 27.29it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 312 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 313 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 314 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 315 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 316 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 317 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 318 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 319 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 320 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 321 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 322 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 323 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 324 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 325 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 326 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 327 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 328 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 329 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 330 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 331 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 332 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 333 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 334 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 335 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 336 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 337 400
penalty weights 0.0
Epoch: [12][  26/  26]	Loss 0.451 (0.464)	train_nll   0.33 (  0.34)	train_penalty   0.01 (  0.03)	weight_norm   0.12 (  0.12)	train_acc   0.83 (  0.85)	train_minacc   0.31 (  0.22)	train_majacc   0.92 (  0.97)	train_corr   0.00 (  0.00)	l1 15.9542 (15.4110)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.57it/s] 27%|##6       | 7/26 [00:00<00:00, 33.32it/s]                                               27%|##6       | 7/26 [00:00<00:00, 33.32it/s] 50%|#####     | 13/26 [00:00<00:00, 39.71it/s] 73%|#######3  | 19/26 [00:00<00:00, 45.88it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 45.88it/s] 96%|#########6| 25/26 [00:00<00:00, 45.44it/s]100%|##########| 26/26 [00:00<00:00, 39.04it/s]
Test: [   0/  26]	Loss 0.349 (0.349)	test_acc   0.86 (  0.86)	test_minacc   0.22 (  0.22)	test_majacc   0.99 (  0.99)	Loss_d 0.349 (0.349)	test_acc_d   0.86 (  0.86)	test_minacc_d   0.22 (  0.22)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.91 (  0.91)
Test: [  10/  26]	Loss 0.357 (0.342)	test_acc   0.84 (  0.85)	test_minacc   0.14 (  0.14)	test_majacc   0.98 (  0.98)	Loss_d 0.357 (0.342)	test_acc_d   0.84 (  0.85)	test_minacc_d   0.14 (  0.14)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.92 (  0.92)
Test: [  20/  26]	Loss 0.319 (0.338)	test_acc   0.88 (  0.85)	test_minacc   0.33 (  0.16)	test_majacc   0.98 (  0.98)	Loss_d 0.319 (0.338)	test_acc_d   0.88 (  0.85)	test_minacc_d   0.33 (  0.16)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.91 (  0.91)
Test: [  26/  26]	Loss 0.311 (0.335)	test_acc   0.84 (  0.85)	test_minacc   0.17 (  0.17)	test_majacc   0.95 (  0.98)	Loss_d 0.311 (0.335)	test_acc_d   0.84 (  0.85)	test_minacc_d   0.17 (  0.17)	test_majacc_d   0.95 (  0.98)	test_corr_d   0.89 (  0.91)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 67.35it/s]
Test: [  0/  1]	Loss 1.627 (1.627)	test_acc   0.23 (  0.23)	test_minacc   0.14 (  0.14)	test_majacc   0.98 (  0.98)	Loss_d 1.627 (1.627)	test_acc_d   0.23 (  0.23)	test_minacc_d   0.14 (  0.14)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.78 (  0.78)
Test: [  1/  1]	Loss 1.627 (1.627)	test_acc   0.23 (  0.23)	test_minacc   0.14 (  0.14)	test_majacc   0.98 (  0.98)	Loss_d 1.627 (1.627)	test_acc_d   0.23 (  0.23)	test_minacc_d   0.14 (  0.14)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.78 (  0.78)
Overall Timing[ 12/  1]	epoch_time 0.0365 (0.0390)	validation_time 0.0004 (0.0009)	train_time 0.0361 (0.0379)
record: (train_acc, test_acc) (0.8526000263094902, 0.26600000262260437)
last accs (train_acc, test_acc) (0.854900026679039, 0.22800001502037048)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.87it/s] 19%|#9        | 5/26 [00:00<00:00, 21.74it/s] 35%|###4      | 9/26 [00:00<00:00, 27.55it/s] 50%|#####     | 13/26 [00:00<00:00, 30.63it/s] 65%|######5   | 17/26 [00:00<00:00, 32.19it/s] 81%|########  | 21/26 [00:00<00:00, 33.36it/s] 96%|#########6| 25/26 [00:00<00:00, 33.75it/s]100%|##########| 26/26 [00:00<00:00, 28.86it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 338 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 339 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 340 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 341 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 342 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 343 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 344 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 345 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 346 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 347 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 348 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 349 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 350 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 351 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 352 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 353 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 354 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 355 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 356 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 357 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 358 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 359 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 360 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 361 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 362 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 363 400
penalty weights 0.0
Epoch: [13][  26/  26]	Loss 0.465 (0.448)	train_nll   0.37 (  0.34)	train_penalty   0.02 (  0.02)	weight_norm   0.10 (  0.11)	train_acc   0.82 (  0.85)	train_minacc   0.25 (  0.21)	train_majacc   0.91 (  0.96)	train_corr   0.00 (  0.00)	l1 17.0475 (16.6162)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 18.85it/s] 31%|###       | 8/26 [00:00<00:00, 39.65it/s]                                               31%|###       | 8/26 [00:00<00:00, 39.65it/s] 50%|#####     | 13/26 [00:00<00:00, 41.48it/s] 73%|#######3  | 19/26 [00:00<00:00, 47.48it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 47.48it/s] 96%|#########6| 25/26 [00:00<00:00, 48.08it/s]100%|##########| 26/26 [00:00<00:00, 41.38it/s]
Test: [   0/  26]	Loss 0.337 (0.337)	test_acc   0.87 (  0.87)	test_minacc   0.39 (  0.39)	test_majacc   0.97 (  0.97)	Loss_d 0.337 (0.337)	test_acc_d   0.87 (  0.87)	test_minacc_d   0.39 (  0.39)	test_majacc_d   0.97 (  0.97)	test_corr_d   0.87 (  0.87)
Test: [  10/  26]	Loss 0.337 (0.331)	test_acc   0.85 (  0.86)	test_minacc   0.22 (  0.22)	test_majacc   0.98 (  0.97)	Loss_d 0.337 (0.331)	test_acc_d   0.85 (  0.86)	test_minacc_d   0.22 (  0.22)	test_majacc_d   0.98 (  0.97)	test_corr_d   0.92 (  0.91)
Test: [  20/  26]	Loss 0.312 (0.329)	test_acc   0.87 (  0.86)	test_minacc   0.33 (  0.23)	test_majacc   0.97 (  0.97)	Loss_d 0.312 (0.329)	test_acc_d   0.87 (  0.86)	test_minacc_d   0.33 (  0.23)	test_majacc_d   0.97 (  0.97)	test_corr_d   0.89 (  0.91)
Test: [  26/  26]	Loss 0.324 (0.325)	test_acc   0.85 (  0.86)	test_minacc   0.28 (  0.25)	test_majacc   0.95 (  0.97)	Loss_d 0.324 (0.325)	test_acc_d   0.85 (  0.86)	test_minacc_d   0.28 (  0.25)	test_majacc_d   0.95 (  0.97)	test_corr_d   0.89 (  0.91)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.98it/s]
Test: [  0/  1]	Loss 1.618 (1.618)	test_acc   0.25 (  0.25)	test_minacc   0.17 (  0.17)	test_majacc   0.97 (  0.97)	Loss_d 1.618 (1.618)	test_acc_d   0.25 (  0.25)	test_minacc_d   0.17 (  0.17)	test_majacc_d   0.97 (  0.97)	test_corr_d   0.78 (  0.78)
Test: [  1/  1]	Loss 1.618 (1.618)	test_acc   0.25 (  0.25)	test_minacc   0.17 (  0.17)	test_majacc   0.97 (  0.97)	Loss_d 1.618 (1.618)	test_acc_d   0.25 (  0.25)	test_minacc_d   0.17 (  0.17)	test_majacc_d   0.97 (  0.97)	test_corr_d   0.78 (  0.78)
Overall Timing[ 13/  1]	epoch_time 0.0362 (0.0388)	validation_time 0.0004 (0.0008)	train_time 0.0358 (0.0378)
record: (train_acc, test_acc) (0.8526000263094902, 0.26600000262260437)
last accs (train_acc, test_acc) (0.8602000200152398, 0.2540000081062317)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.43it/s] 19%|#9        | 5/26 [00:00<00:00, 22.79it/s] 35%|###4      | 9/26 [00:00<00:00, 27.21it/s] 50%|#####     | 13/26 [00:00<00:00, 29.83it/s] 65%|######5   | 17/26 [00:00<00:00, 31.55it/s] 81%|########  | 21/26 [00:00<00:00, 32.57it/s] 96%|#########6| 25/26 [00:00<00:00, 32.78it/s]100%|##########| 26/26 [00:00<00:00, 28.43it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 364 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 365 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 366 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 367 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 368 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 369 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 370 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 371 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 372 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 373 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 374 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 375 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 376 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 377 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 378 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 379 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 380 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 381 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 382 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 383 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 384 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 385 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 386 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 387 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 388 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 389 400
penalty weights 0.0
Epoch: [14][  26/  26]	Loss 0.444 (0.434)	train_nll   0.35 (  0.34)	train_penalty   0.01 (  0.02)	weight_norm   0.09 (  0.09)	train_acc   0.81 (  0.85)	train_minacc   0.31 (  0.24)	train_majacc   0.89 (  0.96)	train_corr   0.00 (  0.00)	l1 18.0449 (17.6237)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.34it/s] 27%|##6       | 7/26 [00:00<00:00, 33.99it/s]                                               27%|##6       | 7/26 [00:00<00:00, 33.99it/s] 50%|#####     | 13/26 [00:00<00:00, 40.03it/s] 73%|#######3  | 19/26 [00:00<00:00, 46.98it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 46.98it/s] 96%|#########6| 25/26 [00:00<00:00, 47.36it/s]100%|##########| 26/26 [00:00<00:00, 39.92it/s]
Test: [   0/  26]	Loss 0.355 (0.355)	test_acc   0.85 (  0.85)	test_minacc   0.28 (  0.28)	test_majacc   0.97 (  0.97)	Loss_d 0.355 (0.355)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.28 (  0.28)	test_majacc_d   0.97 (  0.97)	test_corr_d   0.90 (  0.90)
Test: [  10/  26]	Loss 0.327 (0.332)	test_acc   0.84 (  0.85)	test_minacc   0.12 (  0.17)	test_majacc   0.98 (  0.98)	Loss_d 0.327 (0.332)	test_acc_d   0.84 (  0.85)	test_minacc_d   0.12 (  0.17)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.93 (  0.93)
Test: [  20/  26]	Loss 0.304 (0.329)	test_acc   0.89 (  0.86)	test_minacc   0.38 (  0.19)	test_majacc   0.98 (  0.98)	Loss_d 0.304 (0.329)	test_acc_d   0.89 (  0.86)	test_minacc_d   0.38 (  0.19)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.90 (  0.92)
Test: [  26/  26]	Loss 0.316 (0.325)	test_acc   0.85 (  0.86)	test_minacc   0.22 (  0.20)	test_majacc   0.96 (  0.98)	Loss_d 0.316 (0.325)	test_acc_d   0.85 (  0.86)	test_minacc_d   0.22 (  0.20)	test_majacc_d   0.96 (  0.98)	test_corr_d   0.90 (  0.92)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.32it/s]
Test: [  0/  1]	Loss 1.583 (1.583)	test_acc   0.28 (  0.28)	test_minacc   0.20 (  0.20)	test_majacc   0.96 (  0.96)	Loss_d 1.583 (1.583)	test_acc_d   0.28 (  0.28)	test_minacc_d   0.20 (  0.20)	test_majacc_d   0.96 (  0.96)	test_corr_d   0.75 (  0.75)
Test: [  1/  1]	Loss 1.583 (1.583)	test_acc   0.28 (  0.28)	test_minacc   0.20 (  0.20)	test_majacc   0.96 (  0.96)	Loss_d 1.583 (1.583)	test_acc_d   0.28 (  0.28)	test_minacc_d   0.20 (  0.20)	test_majacc_d   0.96 (  0.96)	test_corr_d   0.75 (  0.75)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/35/checkpoints/model_best.pth
Overall Timing[ 14/  1]	epoch_time 0.0372 (0.0387)	validation_time 0.0004 (0.0008)	train_time 0.0368 (0.0377)
record: (train_acc, test_acc) (0.8593000258803367, 0.2760000228881836)
last accs (train_acc, test_acc) (0.8593000258803367, 0.2760000228881836)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.41it/s] 19%|#9        | 5/26 [00:00<00:00, 22.48it/s] 35%|###4      | 9/26 [00:00<00:00, 27.55it/s] 50%|#####     | 13/26 [00:00<00:00, 30.41it/s] 65%|######5   | 17/26 [00:00<00:00, 31.94it/s] 81%|########  | 21/26 [00:00<00:00, 32.63it/s] 96%|#########6| 25/26 [00:00<00:00, 33.22it/s]100%|##########| 26/26 [00:00<00:00, 28.73it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 390 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 391 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 392 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 393 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 394 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 395 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 396 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 397 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 398 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 399 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 400 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 401 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 402 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 403 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 404 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 405 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 406 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 407 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 408 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 409 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 410 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 411 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 412 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 413 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 414 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 415 400
penalty weights 10000.0
Epoch: [15][  26/  26]	Loss 0.000 (0.170)	train_nll   0.59 (  0.44)	train_penalty   0.00 (  0.01)	weight_norm   0.13 (  0.10)	train_acc   0.68 (  0.79)	train_minacc   0.69 (  0.48)	train_majacc   0.68 (  0.84)	train_corr   0.00 (  0.00)	l1 17.8827 (18.2667)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.62it/s] 27%|##6       | 7/26 [00:00<00:00, 33.97it/s]                                               27%|##6       | 7/26 [00:00<00:00, 33.97it/s] 50%|#####     | 13/26 [00:00<00:00, 41.42it/s] 73%|#######3  | 19/26 [00:00<00:00, 47.31it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 47.31it/s] 96%|#########6| 25/26 [00:00<00:00, 47.78it/s]100%|##########| 26/26 [00:00<00:00, 40.17it/s]
Test: [   0/  26]	Loss 0.558 (0.558)	test_acc   0.71 (  0.71)	test_minacc   0.76 (  0.76)	test_majacc   0.70 (  0.70)	Loss_d 0.558 (0.558)	test_acc_d   0.71 (  0.71)	test_minacc_d   0.76 (  0.76)	test_majacc_d   0.70 (  0.70)	test_corr_d   0.34 (  0.34)
Test: [  10/  26]	Loss 0.596 (0.574)	test_acc   0.68 (  0.71)	test_minacc   0.75 (  0.73)	test_majacc   0.66 (  0.71)	Loss_d 0.596 (0.574)	test_acc_d   0.68 (  0.71)	test_minacc_d   0.75 (  0.73)	test_majacc_d   0.66 (  0.71)	test_corr_d   0.24 (  0.33)
Test: [  20/  26]	Loss 0.592 (0.580)	test_acc   0.69 (  0.70)	test_minacc   0.67 (  0.73)	test_majacc   0.69 (  0.69)	Loss_d 0.592 (0.580)	test_acc_d   0.69 (  0.70)	test_minacc_d   0.67 (  0.73)	test_majacc_d   0.69 (  0.69)	test_corr_d   0.32 (  0.32)
Test: [  26/  26]	Loss 0.585 (0.582)	test_acc   0.68 (  0.70)	test_minacc   0.69 (  0.73)	test_majacc   0.68 (  0.69)	Loss_d 0.585 (0.582)	test_acc_d   0.68 (  0.70)	test_minacc_d   0.69 (  0.73)	test_majacc_d   0.68 (  0.69)	test_corr_d   0.31 (  0.31)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 64.63it/s]
Test: [  0/  1]	Loss 0.615 (0.615)	test_acc   0.68 (  0.68)	test_minacc   0.67 (  0.67)	test_majacc   0.74 (  0.74)	Loss_d 0.615 (0.615)	test_acc_d   0.68 (  0.68)	test_minacc_d   0.67 (  0.67)	test_majacc_d   0.74 (  0.74)	test_corr_d  -0.28 ( -0.28)
Test: [  1/  1]	Loss 0.615 (0.615)	test_acc   0.68 (  0.68)	test_minacc   0.67 (  0.67)	test_majacc   0.74 (  0.74)	Loss_d 0.615 (0.615)	test_acc_d   0.68 (  0.68)	test_minacc_d   0.67 (  0.67)	test_majacc_d   0.74 (  0.74)	test_corr_d  -0.28 ( -0.28)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/35/checkpoints/model_best.pth
Overall Timing[ 15/  1]	epoch_time 0.0372 (0.0386)	validation_time 0.0003 (0.0008)	train_time 0.0368 (0.0377)
record: (train_acc, test_acc) (0.6969000319242478, 0.6780000329017639)
last accs (train_acc, test_acc) (0.6969000319242478, 0.6780000329017639)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.94it/s] 19%|#9        | 5/26 [00:00<00:00, 21.95it/s] 35%|###4      | 9/26 [00:00<00:00, 26.28it/s] 50%|#####     | 13/26 [00:00<00:00, 29.09it/s] 65%|######5   | 17/26 [00:00<00:00, 30.86it/s] 81%|########  | 21/26 [00:00<00:00, 32.10it/s] 96%|#########6| 25/26 [00:00<00:00, 32.81it/s]100%|##########| 26/26 [00:00<00:00, 28.00it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 416 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 417 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 418 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 419 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 420 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 421 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 422 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 423 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 424 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 425 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 426 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 427 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 428 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 429 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 430 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 431 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 432 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 433 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 434 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 435 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 436 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 437 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 438 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 439 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 440 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 441 400
penalty weights 10000.0
Epoch: [16][  26/  26]	Loss 0.000 (0.001)	train_nll   0.65 (  0.62)	train_penalty   0.00 (  0.00)	weight_norm   0.16 (  0.15)	train_acc   0.63 (  0.66)	train_minacc   0.67 (  0.67)	train_majacc   0.62 (  0.66)	train_corr   0.00 (  0.00)	l1 17.6190 (17.7009)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:01, 18.14it/s] 35%|###4      | 9/26 [00:00<00:00, 36.47it/s]                                               35%|###4      | 9/26 [00:00<00:00, 36.47it/s] 58%|#####7    | 15/26 [00:00<00:00, 41.78it/s]                                                58%|#####7    | 15/26 [00:00<00:00, 41.78it/s] 81%|########  | 21/26 [00:00<00:00, 47.59it/s]100%|##########| 26/26 [00:00<00:00, 40.43it/s]
Test: [   0/  26]	Loss 0.633 (0.633)	test_acc   0.64 (  0.64)	test_minacc   0.58 (  0.58)	test_majacc   0.65 (  0.65)	Loss_d 0.633 (0.633)	test_acc_d   0.64 (  0.64)	test_minacc_d   0.58 (  0.58)	test_majacc_d   0.65 (  0.65)	test_corr_d   0.29 (  0.29)
Test: [  10/  26]	Loss 0.663 (0.643)	test_acc   0.60 (  0.63)	test_minacc   0.58 (  0.62)	test_majacc   0.61 (  0.64)	Loss_d 0.663 (0.643)	test_acc_d   0.60 (  0.63)	test_minacc_d   0.58 (  0.62)	test_majacc_d   0.61 (  0.64)	test_corr_d   0.17 (  0.23)
Test: [  20/  26]	Loss 0.636 (0.641)	test_acc   0.64 (  0.63)	test_minacc   0.59 (  0.62)	test_majacc   0.65 (  0.63)	Loss_d 0.636 (0.641)	test_acc_d   0.64 (  0.63)	test_minacc_d   0.59 (  0.62)	test_majacc_d   0.65 (  0.63)	test_corr_d   0.24 (  0.23)
Test: [  26/  26]	Loss 0.646 (0.641)	test_acc   0.63 (  0.63)	test_minacc   0.67 (  0.63)	test_majacc   0.62 (  0.63)	Loss_d 0.646 (0.641)	test_acc_d   0.63 (  0.63)	test_minacc_d   0.67 (  0.63)	test_majacc_d   0.62 (  0.63)	test_corr_d   0.19 (  0.23)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 67.46it/s]
Test: [  0/  1]	Loss 0.666 (0.666)	test_acc   0.62 (  0.62)	test_minacc   0.62 (  0.62)	test_majacc   0.65 (  0.65)	Loss_d 0.666 (0.666)	test_acc_d   0.62 (  0.62)	test_minacc_d   0.62 (  0.62)	test_majacc_d   0.65 (  0.65)	test_corr_d  -0.17 ( -0.17)
Test: [  1/  1]	Loss 0.666 (0.666)	test_acc   0.62 (  0.62)	test_minacc   0.62 (  0.62)	test_majacc   0.65 (  0.65)	Loss_d 0.666 (0.666)	test_acc_d   0.62 (  0.62)	test_minacc_d   0.62 (  0.62)	test_majacc_d   0.65 (  0.65)	test_corr_d  -0.17 ( -0.17)
Overall Timing[ 16/  1]	epoch_time 0.0353 (0.0384)	validation_time 0.0003 (0.0007)	train_time 0.0350 (0.0375)
record: (train_acc, test_acc) (0.6969000319242478, 0.6780000329017639)
last accs (train_acc, test_acc) (0.6325000032782555, 0.6230000257492065)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.49it/s] 19%|#9        | 5/26 [00:00<00:01, 18.59it/s] 35%|###4      | 9/26 [00:00<00:00, 25.13it/s] 50%|#####     | 13/26 [00:00<00:00, 28.87it/s] 65%|######5   | 17/26 [00:00<00:00, 31.09it/s] 81%|########  | 21/26 [00:00<00:00, 32.46it/s] 96%|#########6| 25/26 [00:00<00:00, 33.27it/s]100%|##########| 26/26 [00:00<00:00, 27.22it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 442 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 443 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 444 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 445 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 446 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 447 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 448 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 449 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 450 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 451 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 452 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 453 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 454 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 455 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 456 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 457 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 458 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 459 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 460 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 461 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 462 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 463 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 464 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 465 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 466 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 467 400
penalty weights 10000.0
Epoch: [17][  26/  26]	Loss 0.000 (0.000)	train_nll   0.66 (  0.65)	train_penalty   0.00 (  0.00)	weight_norm   0.16 (  0.16)	train_acc   0.61 (  0.62)	train_minacc   0.64 (  0.61)	train_majacc   0.61 (  0.62)	train_corr   0.00 (  0.00)	l1 17.5794 (17.5939)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 18.76it/s] 31%|###       | 8/26 [00:00<00:00, 40.11it/s]                                               31%|###       | 8/26 [00:00<00:00, 40.11it/s] 50%|#####     | 13/26 [00:00<00:00, 43.70it/s] 69%|######9   | 18/26 [00:00<00:00, 45.53it/s]                                                69%|######9   | 18/26 [00:00<00:00, 45.53it/s] 92%|#########2| 24/26 [00:00<00:00, 49.18it/s]100%|##########| 26/26 [00:00<00:00, 42.45it/s]
Test: [   0/  26]	Loss 0.653 (0.653)	test_acc   0.62 (  0.62)	test_minacc   0.54 (  0.54)	test_majacc   0.63 (  0.63)	Loss_d 0.653 (0.653)	test_acc_d   0.62 (  0.62)	test_minacc_d   0.54 (  0.54)	test_majacc_d   0.63 (  0.63)	test_corr_d   0.26 (  0.26)
Test: [  10/  26]	Loss 0.673 (0.658)	test_acc   0.59 (  0.61)	test_minacc   0.55 (  0.59)	test_majacc   0.60 (  0.61)	Loss_d 0.673 (0.658)	test_acc_d   0.59 (  0.61)	test_minacc_d   0.55 (  0.59)	test_majacc_d   0.60 (  0.61)	test_corr_d   0.14 (  0.20)
Test: [  20/  26]	Loss 0.649 (0.655)	test_acc   0.61 (  0.61)	test_minacc   0.49 (  0.59)	test_majacc   0.63 (  0.62)	Loss_d 0.649 (0.655)	test_acc_d   0.61 (  0.61)	test_minacc_d   0.49 (  0.59)	test_majacc_d   0.63 (  0.62)	test_corr_d   0.21 (  0.20)
Test: [  26/  26]	Loss 0.660 (0.655)	test_acc   0.62 (  0.61)	test_minacc   0.64 (  0.60)	test_majacc   0.61 (  0.62)	Loss_d 0.660 (0.655)	test_acc_d   0.62 (  0.61)	test_minacc_d   0.64 (  0.60)	test_majacc_d   0.61 (  0.62)	test_corr_d   0.16 (  0.20)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.27it/s]
Test: [  0/  1]	Loss 0.673 (0.673)	test_acc   0.60 (  0.60)	test_minacc   0.59 (  0.59)	test_majacc   0.65 (  0.65)	Loss_d 0.673 (0.673)	test_acc_d   0.60 (  0.60)	test_minacc_d   0.59 (  0.59)	test_majacc_d   0.65 (  0.65)	test_corr_d  -0.14 ( -0.14)
Test: [  1/  1]	Loss 0.673 (0.673)	test_acc   0.60 (  0.60)	test_minacc   0.59 (  0.59)	test_majacc   0.65 (  0.65)	Loss_d 0.673 (0.673)	test_acc_d   0.60 (  0.60)	test_minacc_d   0.59 (  0.59)	test_majacc_d   0.65 (  0.65)	test_corr_d  -0.14 ( -0.14)
Overall Timing[ 17/  1]	epoch_time 0.0352 (0.0382)	validation_time 0.0004 (0.0007)	train_time 0.0347 (0.0374)
record: (train_acc, test_acc) (0.6969000319242478, 0.6780000329017639)
last accs (train_acc, test_acc) (0.6148000098466874, 0.5980000495910645)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.82it/s] 19%|#9        | 5/26 [00:00<00:01, 20.04it/s] 35%|###4      | 9/26 [00:00<00:00, 25.67it/s] 50%|#####     | 13/26 [00:00<00:00, 29.20it/s] 65%|######5   | 17/26 [00:00<00:00, 31.61it/s] 81%|########  | 21/26 [00:00<00:00, 33.04it/s] 96%|#########6| 25/26 [00:00<00:00, 33.59it/s]100%|##########| 26/26 [00:00<00:00, 27.84it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 468 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 469 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 470 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 471 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 472 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 473 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 474 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 475 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 476 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 477 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 478 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 479 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 480 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 481 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 482 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 483 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 484 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 485 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 486 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 487 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 488 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 489 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 490 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 491 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 492 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 493 400
penalty weights 10000.0
Epoch: [18][  26/  26]	Loss 0.000 (0.000)	train_nll   0.67 (  0.66)	train_penalty   0.00 (  0.00)	weight_norm   0.16 (  0.16)	train_acc   0.61 (  0.60)	train_minacc   0.64 (  0.60)	train_majacc   0.61 (  0.60)	train_corr   0.00 (  0.00)	l1 17.5690 (17.5733)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:05,  4.92it/s] 23%|##3       | 6/26 [00:00<00:00, 22.76it/s]                                               23%|##3       | 6/26 [00:00<00:00, 22.76it/s] 42%|####2     | 11/26 [00:00<00:00, 30.68it/s] 65%|######5   | 17/26 [00:00<00:00, 40.01it/s]                                                65%|######5   | 17/26 [00:00<00:00, 40.01it/s] 88%|########8 | 23/26 [00:00<00:00, 42.80it/s]100%|##########| 26/26 [00:00<00:00, 33.64it/s]
Test: [   0/  26]	Loss 0.663 (0.663)	test_acc   0.60 (  0.60)	test_minacc   0.52 (  0.52)	test_majacc   0.61 (  0.61)	Loss_d 0.663 (0.663)	test_acc_d   0.60 (  0.60)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.61 (  0.61)	test_corr_d   0.23 (  0.23)
Test: [  10/  26]	Loss 0.677 (0.666)	test_acc   0.58 (  0.60)	test_minacc   0.58 (  0.59)	test_majacc   0.58 (  0.60)	Loss_d 0.677 (0.666)	test_acc_d   0.58 (  0.60)	test_minacc_d   0.58 (  0.59)	test_majacc_d   0.58 (  0.60)	test_corr_d   0.12 (  0.17)
Test: [  20/  26]	Loss 0.657 (0.663)	test_acc   0.59 (  0.60)	test_minacc   0.49 (  0.59)	test_majacc   0.61 (  0.60)	Loss_d 0.657 (0.663)	test_acc_d   0.59 (  0.60)	test_minacc_d   0.49 (  0.59)	test_majacc_d   0.61 (  0.60)	test_corr_d   0.19 (  0.17)
Test: [  26/  26]	Loss 0.666 (0.663)	test_acc   0.61 (  0.60)	test_minacc   0.64 (  0.60)	test_majacc   0.61 (  0.60)	Loss_d 0.666 (0.663)	test_acc_d   0.61 (  0.60)	test_minacc_d   0.64 (  0.60)	test_majacc_d   0.61 (  0.60)	test_corr_d   0.14 (  0.17)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.83it/s]
Test: [  0/  1]	Loss 0.675 (0.675)	test_acc   0.59 (  0.59)	test_minacc   0.58 (  0.58)	test_majacc   0.62 (  0.62)	Loss_d 0.675 (0.675)	test_acc_d   0.59 (  0.59)	test_minacc_d   0.58 (  0.58)	test_majacc_d   0.62 (  0.62)	test_corr_d  -0.14 ( -0.14)
Test: [  1/  1]	Loss 0.675 (0.675)	test_acc   0.59 (  0.59)	test_minacc   0.58 (  0.58)	test_majacc   0.62 (  0.62)	Loss_d 0.675 (0.675)	test_acc_d   0.59 (  0.59)	test_minacc_d   0.58 (  0.58)	test_majacc_d   0.62 (  0.62)	test_corr_d  -0.14 ( -0.14)
Overall Timing[ 18/  1]	epoch_time 0.0366 (0.0381)	validation_time 0.0004 (0.0007)	train_time 0.0362 (0.0373)
record: (train_acc, test_acc) (0.6969000319242478, 0.6780000329017639)
last accs (train_acc, test_acc) (0.5997000058889389, 0.5870000123977661)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.44it/s] 19%|#9        | 5/26 [00:00<00:00, 22.85it/s] 35%|###4      | 9/26 [00:00<00:00, 28.90it/s] 50%|#####     | 13/26 [00:00<00:00, 31.56it/s] 65%|######5   | 17/26 [00:00<00:00, 32.37it/s] 81%|########  | 21/26 [00:00<00:00, 33.31it/s] 96%|#########6| 25/26 [00:00<00:00, 34.19it/s]100%|##########| 26/26 [00:00<00:00, 29.62it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 494 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 495 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 496 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 497 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 498 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 499 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 500 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 501 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 502 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 503 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 504 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 505 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 506 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 507 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 508 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 509 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 510 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 511 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 512 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 513 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 514 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 515 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 516 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 517 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 518 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 519 400
penalty weights 10000.0
Epoch: [19][  26/  26]	Loss 0.000 (0.000)	train_nll   0.67 (  0.67)	train_penalty   0.00 (  0.00)	weight_norm   0.16 (  0.16)	train_acc   0.59 (  0.59)	train_minacc   0.64 (  0.60)	train_majacc   0.58 (  0.59)	train_corr   0.00 (  0.00)	l1 17.5633 (17.5656)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.90it/s] 27%|##6       | 7/26 [00:00<00:00, 33.27it/s]                                               27%|##6       | 7/26 [00:00<00:00, 33.27it/s] 50%|#####     | 13/26 [00:00<00:00, 41.78it/s] 73%|#######3  | 19/26 [00:00<00:00, 46.46it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 46.46it/s] 96%|#########6| 25/26 [00:00<00:00, 48.98it/s]100%|##########| 26/26 [00:00<00:00, 40.21it/s]
Test: [   0/  26]	Loss 0.669 (0.669)	test_acc   0.59 (  0.59)	test_minacc   0.54 (  0.54)	test_majacc   0.61 (  0.61)	Loss_d 0.669 (0.669)	test_acc_d   0.59 (  0.59)	test_minacc_d   0.54 (  0.54)	test_majacc_d   0.61 (  0.61)	test_corr_d   0.21 (  0.21)
Test: [  10/  26]	Loss 0.679 (0.670)	test_acc   0.57 (  0.59)	test_minacc   0.58 (  0.59)	test_majacc   0.57 (  0.59)	Loss_d 0.679 (0.670)	test_acc_d   0.57 (  0.59)	test_minacc_d   0.58 (  0.59)	test_majacc_d   0.57 (  0.59)	test_corr_d   0.11 (  0.15)
Test: [  20/  26]	Loss 0.662 (0.668)	test_acc   0.58 (  0.59)	test_minacc   0.49 (  0.59)	test_majacc   0.60 (  0.59)	Loss_d 0.662 (0.668)	test_acc_d   0.58 (  0.59)	test_minacc_d   0.49 (  0.59)	test_majacc_d   0.60 (  0.59)	test_corr_d   0.17 (  0.15)
Test: [  26/  26]	Loss 0.669 (0.668)	test_acc   0.60 (  0.59)	test_minacc   0.64 (  0.60)	test_majacc   0.59 (  0.59)	Loss_d 0.669 (0.668)	test_acc_d   0.60 (  0.59)	test_minacc_d   0.64 (  0.60)	test_majacc_d   0.59 (  0.59)	test_corr_d   0.12 (  0.15)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.14it/s]
Test: [  0/  1]	Loss 0.675 (0.675)	test_acc   0.59 (  0.59)	test_minacc   0.59 (  0.59)	test_majacc   0.61 (  0.61)	Loss_d 0.675 (0.675)	test_acc_d   0.59 (  0.59)	test_minacc_d   0.59 (  0.59)	test_majacc_d   0.61 (  0.61)	test_corr_d  -0.14 ( -0.14)
Test: [  1/  1]	Loss 0.675 (0.675)	test_acc   0.59 (  0.59)	test_minacc   0.59 (  0.59)	test_majacc   0.61 (  0.61)	Loss_d 0.675 (0.675)	test_acc_d   0.59 (  0.59)	test_minacc_d   0.59 (  0.59)	test_majacc_d   0.61 (  0.61)	test_corr_d  -0.14 ( -0.14)
Overall Timing[ 19/  1]	epoch_time 0.0351 (0.0380)	validation_time 0.0006 (0.0007)	train_time 0.0345 (0.0372)
record: (train_acc, test_acc) (0.6969000319242478, 0.6780000329017639)
last accs (train_acc, test_acc) (0.5924000080227851, 0.5879999995231628)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:05,  4.82it/s] 19%|#9        | 5/26 [00:00<00:01, 17.41it/s] 35%|###4      | 9/26 [00:00<00:00, 24.08it/s] 50%|#####     | 13/26 [00:00<00:00, 28.15it/s] 65%|######5   | 17/26 [00:00<00:00, 30.38it/s] 81%|########  | 21/26 [00:00<00:00, 31.15it/s] 96%|#########6| 25/26 [00:00<00:00, 32.32it/s]100%|##########| 26/26 [00:00<00:00, 26.23it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 520 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 521 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 522 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 523 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 524 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 525 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 526 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 527 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 528 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 529 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 530 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 531 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 532 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 533 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 534 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 535 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 536 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 537 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 538 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 539 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 540 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 541 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 542 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 543 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 544 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 545 400
penalty weights 10000.0
Epoch: [20][  26/  26]	Loss 0.000 (0.000)	train_nll   0.67 (  0.67)	train_penalty   0.00 (  0.00)	weight_norm   0.16 (  0.16)	train_acc   0.58 (  0.58)	train_minacc   0.61 (  0.60)	train_majacc   0.57 (  0.58)	train_corr   0.00 (  0.00)	l1 17.5598 (17.5611)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.18it/s] 27%|##6       | 7/26 [00:00<00:00, 35.22it/s]                                               27%|##6       | 7/26 [00:00<00:00, 35.22it/s] 50%|#####     | 13/26 [00:00<00:00, 40.65it/s] 73%|#######3  | 19/26 [00:00<00:00, 46.60it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 46.60it/s] 96%|#########6| 25/26 [00:00<00:00, 47.05it/s]100%|##########| 26/26 [00:00<00:00, 40.35it/s]
Test: [   0/  26]	Loss 0.673 (0.673)	test_acc   0.59 (  0.59)	test_minacc   0.55 (  0.55)	test_majacc   0.59 (  0.59)	Loss_d 0.673 (0.673)	test_acc_d   0.59 (  0.59)	test_minacc_d   0.55 (  0.55)	test_majacc_d   0.59 (  0.59)	test_corr_d   0.19 (  0.19)
Test: [  10/  26]	Loss 0.680 (0.673)	test_acc   0.56 (  0.58)	test_minacc   0.58 (  0.59)	test_majacc   0.55 (  0.58)	Loss_d 0.680 (0.673)	test_acc_d   0.56 (  0.58)	test_minacc_d   0.58 (  0.59)	test_majacc_d   0.55 (  0.58)	test_corr_d   0.10 (  0.13)
Test: [  20/  26]	Loss 0.666 (0.671)	test_acc   0.56 (  0.58)	test_minacc   0.48 (  0.59)	test_majacc   0.57 (  0.58)	Loss_d 0.666 (0.671)	test_acc_d   0.56 (  0.58)	test_minacc_d   0.48 (  0.59)	test_majacc_d   0.57 (  0.58)	test_corr_d   0.15 (  0.14)
Test: [  26/  26]	Loss 0.672 (0.671)	test_acc   0.59 (  0.58)	test_minacc   0.61 (  0.60)	test_majacc   0.58 (  0.58)	Loss_d 0.672 (0.671)	test_acc_d   0.59 (  0.58)	test_minacc_d   0.61 (  0.60)	test_majacc_d   0.58 (  0.58)	test_corr_d   0.11 (  0.14)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 65.04it/s]
Test: [  0/  1]	Loss 0.675 (0.675)	test_acc   0.59 (  0.59)	test_minacc   0.59 (  0.59)	test_majacc   0.57 (  0.57)	Loss_d 0.675 (0.675)	test_acc_d   0.59 (  0.59)	test_minacc_d   0.59 (  0.59)	test_majacc_d   0.57 (  0.57)	test_corr_d  -0.14 ( -0.14)
Test: [  1/  1]	Loss 0.675 (0.675)	test_acc   0.59 (  0.59)	test_minacc   0.59 (  0.59)	test_majacc   0.57 (  0.57)	Loss_d 0.675 (0.675)	test_acc_d   0.59 (  0.59)	test_minacc_d   0.59 (  0.59)	test_majacc_d   0.57 (  0.57)	test_corr_d  -0.14 ( -0.14)
Overall Timing[ 20/  1]	epoch_time 0.0374 (0.0379)	validation_time 0.0003 (0.0007)	train_time 0.0370 (0.0372)
record: (train_acc, test_acc) (0.6969000319242478, 0.6780000329017639)
last accs (train_acc, test_acc) (0.5841000032424927, 0.5860000252723694)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.31it/s] 19%|#9        | 5/26 [00:00<00:00, 21.25it/s] 35%|###4      | 9/26 [00:00<00:00, 26.00it/s] 50%|#####     | 13/26 [00:00<00:00, 29.28it/s] 65%|######5   | 17/26 [00:00<00:00, 31.53it/s] 81%|########  | 21/26 [00:00<00:00, 32.99it/s] 96%|#########6| 25/26 [00:00<00:00, 33.60it/s]100%|##########| 26/26 [00:00<00:00, 28.23it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 546 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 547 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 548 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 549 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 550 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 551 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 552 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 553 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 554 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 555 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 556 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 557 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 558 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 559 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 560 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 561 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 562 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 563 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 564 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 565 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 566 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 567 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 568 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 569 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 570 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 571 400
penalty weights 10000.0
Epoch: [21][  26/  26]	Loss 0.000 (0.000)	train_nll   0.67 (  0.67)	train_penalty   0.00 (  0.00)	weight_norm   0.16 (  0.16)	train_acc   0.57 (  0.58)	train_minacc   0.61 (  0.60)	train_majacc   0.56 (  0.57)	train_corr   0.00 (  0.00)	l1 17.5574 (17.5582)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.68it/s] 27%|##6       | 7/26 [00:00<00:00, 30.88it/s]                                               27%|##6       | 7/26 [00:00<00:00, 30.88it/s] 50%|#####     | 13/26 [00:00<00:00, 39.77it/s] 69%|######9   | 18/26 [00:00<00:00, 42.80it/s]                                                69%|######9   | 18/26 [00:00<00:00, 42.80it/s] 92%|#########2| 24/26 [00:00<00:00, 47.90it/s]100%|##########| 26/26 [00:00<00:00, 38.75it/s]
Test: [   0/  26]	Loss 0.676 (0.676)	test_acc   0.56 (  0.56)	test_minacc   0.52 (  0.52)	test_majacc   0.57 (  0.57)	Loss_d 0.676 (0.676)	test_acc_d   0.56 (  0.56)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.57 (  0.57)	test_corr_d   0.17 (  0.17)
Test: [  10/  26]	Loss 0.681 (0.676)	test_acc   0.56 (  0.58)	test_minacc   0.59 (  0.59)	test_majacc   0.55 (  0.57)	Loss_d 0.681 (0.676)	test_acc_d   0.56 (  0.58)	test_minacc_d   0.59 (  0.59)	test_majacc_d   0.55 (  0.57)	test_corr_d   0.09 (  0.12)
Test: [  20/  26]	Loss 0.669 (0.673)	test_acc   0.56 (  0.58)	test_minacc   0.48 (  0.59)	test_majacc   0.58 (  0.57)	Loss_d 0.669 (0.673)	test_acc_d   0.56 (  0.58)	test_minacc_d   0.48 (  0.59)	test_majacc_d   0.58 (  0.57)	test_corr_d   0.14 (  0.13)
Test: [  26/  26]	Loss 0.674 (0.673)	test_acc   0.58 (  0.58)	test_minacc   0.61 (  0.60)	test_majacc   0.57 (  0.58)	Loss_d 0.674 (0.673)	test_acc_d   0.58 (  0.58)	test_minacc_d   0.61 (  0.60)	test_majacc_d   0.57 (  0.58)	test_corr_d   0.10 (  0.12)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 49.67it/s]
Test: [  0/  1]	Loss 0.675 (0.675)	test_acc   0.59 (  0.59)	test_minacc   0.59 (  0.59)	test_majacc   0.56 (  0.56)	Loss_d 0.675 (0.675)	test_acc_d   0.59 (  0.59)	test_minacc_d   0.59 (  0.59)	test_majacc_d   0.56 (  0.56)	test_corr_d  -0.14 ( -0.14)
Test: [  1/  1]	Loss 0.675 (0.675)	test_acc   0.59 (  0.59)	test_minacc   0.59 (  0.59)	test_majacc   0.56 (  0.56)	Loss_d 0.675 (0.675)	test_acc_d   0.59 (  0.59)	test_minacc_d   0.59 (  0.59)	test_majacc_d   0.56 (  0.56)	test_corr_d  -0.14 ( -0.14)
Overall Timing[ 21/  1]	epoch_time 0.0351 (0.0378)	validation_time 0.0005 (0.0007)	train_time 0.0346 (0.0370)
record: (train_acc, test_acc) (0.6969000319242478, 0.6780000329017639)
last accs (train_acc, test_acc) (0.5792000113725663, 0.5860000252723694)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.86it/s] 19%|#9        | 5/26 [00:00<00:00, 21.01it/s] 35%|###4      | 9/26 [00:00<00:00, 26.21it/s] 50%|#####     | 13/26 [00:00<00:00, 29.58it/s] 65%|######5   | 17/26 [00:00<00:00, 31.63it/s] 81%|########  | 21/26 [00:00<00:00, 33.15it/s] 96%|#########6| 25/26 [00:00<00:00, 33.79it/s]100%|##########| 26/26 [00:00<00:00, 28.39it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 572 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 573 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 574 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 575 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 576 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 577 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 578 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 579 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 580 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 581 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 582 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 583 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 584 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 585 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 586 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 587 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 588 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 589 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 590 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 591 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 592 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 593 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 594 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 595 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 596 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 597 400
penalty weights 10000.0
Epoch: [22][  26/  26]	Loss 0.000 (0.000)	train_nll   0.68 (  0.67)	train_penalty   0.00 (  0.00)	weight_norm   0.16 (  0.16)	train_acc   0.57 (  0.57)	train_minacc   0.61 (  0.60)	train_majacc   0.57 (  0.57)	train_corr   0.00 (  0.00)	l1 17.5561 (17.5566)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.71it/s] 27%|##6       | 7/26 [00:00<00:00, 32.71it/s]                                               27%|##6       | 7/26 [00:00<00:00, 32.71it/s] 46%|####6     | 12/26 [00:00<00:00, 39.46it/s] 65%|######5   | 17/26 [00:00<00:00, 40.93it/s]                                                65%|######5   | 17/26 [00:00<00:00, 40.93it/s] 88%|########8 | 23/26 [00:00<00:00, 46.08it/s]100%|##########| 26/26 [00:00<00:00, 38.02it/s]
Test: [   0/  26]	Loss 0.678 (0.678)	test_acc   0.55 (  0.55)	test_minacc   0.51 (  0.51)	test_majacc   0.56 (  0.56)	Loss_d 0.678 (0.678)	test_acc_d   0.55 (  0.55)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.56 (  0.56)	test_corr_d   0.17 (  0.17)
Test: [  10/  26]	Loss 0.681 (0.678)	test_acc   0.54 (  0.57)	test_minacc   0.59 (  0.59)	test_majacc   0.53 (  0.56)	Loss_d 0.681 (0.678)	test_acc_d   0.54 (  0.57)	test_minacc_d   0.59 (  0.59)	test_majacc_d   0.53 (  0.56)	test_corr_d   0.09 (  0.11)
Test: [  20/  26]	Loss 0.672 (0.675)	test_acc   0.56 (  0.57)	test_minacc   0.49 (  0.59)	test_majacc   0.57 (  0.57)	Loss_d 0.672 (0.675)	test_acc_d   0.56 (  0.57)	test_minacc_d   0.49 (  0.59)	test_majacc_d   0.57 (  0.57)	test_corr_d   0.13 (  0.12)
Test: [  26/  26]	Loss 0.675 (0.675)	test_acc   0.59 (  0.57)	test_minacc   0.64 (  0.60)	test_majacc   0.58 (  0.57)	Loss_d 0.675 (0.675)	test_acc_d   0.59 (  0.57)	test_minacc_d   0.64 (  0.60)	test_majacc_d   0.58 (  0.57)	test_corr_d   0.10 (  0.12)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 67.15it/s]
Test: [  0/  1]	Loss 0.675 (0.675)	test_acc   0.58 (  0.58)	test_minacc   0.58 (  0.58)	test_majacc   0.54 (  0.54)	Loss_d 0.675 (0.675)	test_acc_d   0.58 (  0.58)	test_minacc_d   0.58 (  0.58)	test_majacc_d   0.54 (  0.54)	test_corr_d  -0.14 ( -0.14)
Test: [  1/  1]	Loss 0.675 (0.675)	test_acc   0.58 (  0.58)	test_minacc   0.58 (  0.58)	test_majacc   0.54 (  0.54)	Loss_d 0.675 (0.675)	test_acc_d   0.58 (  0.58)	test_minacc_d   0.58 (  0.58)	test_majacc_d   0.54 (  0.54)	test_corr_d  -0.14 ( -0.14)
Overall Timing[ 22/  1]	epoch_time 0.0364 (0.0377)	validation_time 0.0004 (0.0007)	train_time 0.0360 (0.0370)
record: (train_acc, test_acc) (0.6969000319242478, 0.6780000329017639)
last accs (train_acc, test_acc) (0.573100006222725, 0.578000009059906)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.70it/s] 15%|#5        | 4/26 [00:00<00:01, 18.45it/s] 31%|###       | 8/26 [00:00<00:00, 23.10it/s] 42%|####2     | 11/26 [00:00<00:00, 20.35it/s] 54%|#####3    | 14/26 [00:00<00:00, 19.28it/s] 62%|######1   | 16/26 [00:00<00:00, 18.76it/s] 69%|######9   | 18/26 [00:00<00:00, 18.27it/s] 77%|#######6  | 20/26 [00:01<00:00, 17.88it/s] 85%|########4 | 22/26 [00:01<00:00, 17.63it/s] 92%|#########2| 24/26 [00:01<00:00, 17.45it/s]100%|##########| 26/26 [00:01<00:00, 17.43it/s]100%|##########| 26/26 [00:01<00:00, 17.59it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 598 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 599 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 600 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 601 400
penalty weights 10000.0
args.step pgd_anneal_iters 601 600
dim_v 512
rho, theta 373 tensor(-0.0246, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 602 400
penalty weights 10000.0
args.step pgd_anneal_iters 602 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 603 400
penalty weights 10000.0
args.step pgd_anneal_iters 603 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 604 400
penalty weights 10000.0
args.step pgd_anneal_iters 604 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 605 400
penalty weights 10000.0
args.step pgd_anneal_iters 605 600
dim_v 512
rho, theta 436 tensor(-0.0010, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 606 400
penalty weights 10000.0
args.step pgd_anneal_iters 606 600
dim_v 512
rho, theta 486 tensor(-0.0003, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 607 400
penalty weights 10000.0
args.step pgd_anneal_iters 607 600
dim_v 512
rho, theta 491 tensor(-0.0003, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 608 400
penalty weights 10000.0
args.step pgd_anneal_iters 608 600
dim_v 512
rho, theta 502 tensor(-0.0002, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 609 400
penalty weights 10000.0
args.step pgd_anneal_iters 609 600
dim_v 512
rho, theta 504 tensor(-0.0002, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 610 400
penalty weights 10000.0
args.step pgd_anneal_iters 610 600
dim_v 512
rho, theta 504 tensor(-0.0002, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 611 400
penalty weights 10000.0
args.step pgd_anneal_iters 611 600
dim_v 512
rho, theta 507 tensor(-0.0002, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 612 400
penalty weights 10000.0
args.step pgd_anneal_iters 612 600
dim_v 512
rho, theta 507 tensor(-0.0001, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 613 400
penalty weights 10000.0
args.step pgd_anneal_iters 613 600
dim_v 512
rho, theta 509 tensor(-0.0001, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 614 400
penalty weights 10000.0
args.step pgd_anneal_iters 614 600
dim_v 512
rho, theta 509 tensor(-0.0001, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 615 400
penalty weights 10000.0
args.step pgd_anneal_iters 615 600
dim_v 512
rho, theta 510 tensor(-0.0001, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 616 400
penalty weights 10000.0
args.step pgd_anneal_iters 616 600
dim_v 512
rho, theta 510 tensor(-9.2023e-05, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 617 400
penalty weights 10000.0
args.step pgd_anneal_iters 617 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 618 400
penalty weights 10000.0
args.step pgd_anneal_iters 618 600
dim_v 512
rho, theta 507 tensor(-0.0002, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 619 400
penalty weights 10000.0
args.step pgd_anneal_iters 619 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 620 400
penalty weights 10000.0
args.step pgd_anneal_iters 620 600
dim_v 512
rho, theta 509 tensor(-0.0001, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 621 400
penalty weights 10000.0
args.step pgd_anneal_iters 621 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 622 400
penalty weights 10000.0
args.step pgd_anneal_iters 622 600
dim_v 512
rho, theta 510 tensor(-0.0001, device='cuda:0')
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 623 400
penalty weights 10000.0
args.step pgd_anneal_iters 623 600
dim_v 512
retunring when rho == dim_v - 1
Epoch: [23][  26/  26]	Loss 0.000 (0.004)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.19 (  0.17)	train_acc   0.62 (  0.58)	train_minacc   0.53 (  0.53)	train_majacc   0.63 (  0.59)	train_corr   0.00 (  0.00)	l1 17.0217 (17.0835)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.12it/s] 27%|##6       | 7/26 [00:00<00:00, 31.29it/s]                                               27%|##6       | 7/26 [00:00<00:00, 31.29it/s] 46%|####6     | 12/26 [00:00<00:00, 37.13it/s] 69%|######9   | 18/26 [00:00<00:00, 43.46it/s]                                                69%|######9   | 18/26 [00:00<00:00, 43.46it/s] 92%|#########2| 24/26 [00:00<00:00, 46.39it/s]100%|##########| 26/26 [00:00<00:00, 37.98it/s]
Test: [   0/  26]	Loss 0.692 (0.692)	test_acc   0.53 (  0.53)	test_minacc   0.48 (  0.48)	test_majacc   0.54 (  0.54)	Loss_d 0.692 (0.692)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.48 (  0.48)	test_majacc_d   0.54 (  0.54)	test_corr_d   0.26 (  0.26)
Test: [  10/  26]	Loss 0.691 (0.692)	test_acc   0.57 (  0.54)	test_minacc   0.55 (  0.48)	test_majacc   0.58 (  0.55)	Loss_d 0.691 (0.692)	test_acc_d   0.57 (  0.54)	test_minacc_d   0.55 (  0.48)	test_majacc_d   0.58 (  0.55)	test_corr_d   0.20 (  0.20)
Test: [  20/  26]	Loss 0.692 (0.692)	test_acc   0.53 (  0.54)	test_minacc   0.36 (  0.50)	test_majacc   0.56 (  0.55)	Loss_d 0.692 (0.692)	test_acc_d   0.53 (  0.54)	test_minacc_d   0.36 (  0.50)	test_majacc_d   0.56 (  0.55)	test_corr_d   0.21 (  0.21)
Test: [  26/  26]	Loss 0.691 (0.692)	test_acc   0.60 (  0.54)	test_minacc   0.53 (  0.50)	test_majacc   0.62 (  0.55)	Loss_d 0.691 (0.692)	test_acc_d   0.60 (  0.54)	test_minacc_d   0.53 (  0.50)	test_majacc_d   0.62 (  0.55)	test_corr_d   0.24 (  0.20)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.32it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.49 (  0.49)	test_minacc   0.49 (  0.49)	test_majacc   0.53 (  0.53)	Loss_d 0.693 (0.693)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.49 (  0.49)	test_majacc_d   0.53 (  0.53)	test_corr_d   0.00 (  0.00)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.49 (  0.49)	test_minacc   0.49 (  0.49)	test_majacc   0.53 (  0.53)	Loss_d 0.693 (0.693)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.49 (  0.49)	test_majacc_d   0.53 (  0.53)	test_corr_d   0.00 (  0.00)
Overall Timing[ 23/  1]	epoch_time 0.0460 (0.0381)	validation_time 0.0006 (0.0007)	train_time 0.0453 (0.0373)
record: (train_acc, test_acc) (0.6969000319242478, 0.6780000329017639)
last accs (train_acc, test_acc) (0.53900001257658, 0.492000013589859)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:06,  4.12it/s] 12%|#1        | 3/26 [00:00<00:02,  8.68it/s] 19%|#9        | 5/26 [00:00<00:01, 11.43it/s] 27%|##6       | 7/26 [00:00<00:01, 13.33it/s] 35%|###4      | 9/26 [00:00<00:01, 14.66it/s] 42%|####2     | 11/26 [00:00<00:00, 15.42it/s] 50%|#####     | 13/26 [00:00<00:00, 15.79it/s] 58%|#####7    | 15/26 [00:01<00:00, 16.23it/s] 65%|######5   | 17/26 [00:01<00:00, 16.48it/s] 73%|#######3  | 19/26 [00:01<00:00, 16.89it/s] 81%|########  | 21/26 [00:01<00:00, 16.91it/s] 88%|########8 | 23/26 [00:01<00:00, 17.03it/s] 96%|#########6| 25/26 [00:01<00:00, 17.10it/s]100%|##########| 26/26 [00:01<00:00, 14.62it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 624 400
penalty weights 10000.0
args.step pgd_anneal_iters 624 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 625 400
penalty weights 10000.0
args.step pgd_anneal_iters 625 600
dim_v 512
rho, theta 509 tensor(-0.0001, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 626 400
penalty weights 10000.0
args.step pgd_anneal_iters 626 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 627 400
penalty weights 10000.0
args.step pgd_anneal_iters 627 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 628 400
penalty weights 10000.0
args.step pgd_anneal_iters 628 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 629 400
penalty weights 10000.0
args.step pgd_anneal_iters 629 600
dim_v 512
rho, theta 509 tensor(-0.0001, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 630 400
penalty weights 10000.0
args.step pgd_anneal_iters 630 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 631 400
penalty weights 10000.0
args.step pgd_anneal_iters 631 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 632 400
penalty weights 10000.0
args.step pgd_anneal_iters 632 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 633 400
penalty weights 10000.0
args.step pgd_anneal_iters 633 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 634 400
penalty weights 10000.0
args.step pgd_anneal_iters 634 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 635 400
penalty weights 10000.0
args.step pgd_anneal_iters 635 600
dim_v 512
rho, theta 510 tensor(-0.0001, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 636 400
penalty weights 10000.0
args.step pgd_anneal_iters 636 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 637 400
penalty weights 10000.0
args.step pgd_anneal_iters 637 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 638 400
penalty weights 10000.0
args.step pgd_anneal_iters 638 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 639 400
penalty weights 10000.0
args.step pgd_anneal_iters 639 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 640 400
penalty weights 10000.0
args.step pgd_anneal_iters 640 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 641 400
penalty weights 10000.0
args.step pgd_anneal_iters 641 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 642 400
penalty weights 10000.0
args.step pgd_anneal_iters 642 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 643 400
penalty weights 10000.0
args.step pgd_anneal_iters 643 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 644 400
penalty weights 10000.0
args.step pgd_anneal_iters 644 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 645 400
penalty weights 10000.0
args.step pgd_anneal_iters 645 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 646 400
penalty weights 10000.0
args.step pgd_anneal_iters 646 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 647 400
penalty weights 10000.0
args.step pgd_anneal_iters 647 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 648 400
penalty weights 10000.0
args.step pgd_anneal_iters 648 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 649 400
penalty weights 10000.0
args.step pgd_anneal_iters 649 600
dim_v 512
retunring when rho == dim_v - 1
Epoch: [24][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.20 (  0.19)	train_acc   0.55 (  0.51)	train_minacc   0.53 (  0.50)	train_majacc   0.56 (  0.51)	train_corr   0.00 (  0.00)	l1 17.0111 (17.0181)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.40it/s] 27%|##6       | 7/26 [00:00<00:00, 32.65it/s]                                               27%|##6       | 7/26 [00:00<00:00, 32.65it/s] 50%|#####     | 13/26 [00:00<00:00, 39.55it/s] 73%|#######3  | 19/26 [00:00<00:00, 46.00it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 46.00it/s] 96%|#########6| 25/26 [00:00<00:00, 46.89it/s]100%|##########| 26/26 [00:00<00:00, 39.08it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.51 (  0.51)	test_minacc   0.52 (  0.52)	test_majacc   0.51 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.51 (  0.51)	test_corr_d   0.14 (  0.14)
Test: [  10/  26]	Loss 0.692 (0.693)	test_acc   0.52 (  0.50)	test_minacc   0.55 (  0.49)	test_majacc   0.52 (  0.51)	Loss_d 0.692 (0.693)	test_acc_d   0.52 (  0.50)	test_minacc_d   0.55 (  0.49)	test_majacc_d   0.52 (  0.51)	test_corr_d   0.09 (  0.08)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.50 (  0.50)	test_minacc   0.36 (  0.50)	test_majacc   0.53 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.36 (  0.50)	test_majacc_d   0.53 (  0.51)	test_corr_d   0.10 (  0.08)
Test: [  26/  26]	Loss 0.692 (0.693)	test_acc   0.55 (  0.50)	test_minacc   0.53 (  0.50)	test_majacc   0.56 (  0.50)	Loss_d 0.692 (0.693)	test_acc_d   0.55 (  0.50)	test_minacc_d   0.53 (  0.50)	test_majacc_d   0.56 (  0.50)	test_corr_d   0.14 (  0.07)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 65.92it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.20 ( -0.20)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.20 ( -0.20)
Overall Timing[ 24/  1]	epoch_time 0.0496 (0.0385)	validation_time 0.0004 (0.0006)	train_time 0.0492 (0.0378)
record: (train_acc, test_acc) (0.6969000319242478, 0.6780000329017639)
last accs (train_acc, test_acc) (0.5037000114619732, 0.5)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.67it/s] 12%|#1        | 3/26 [00:00<00:01, 12.68it/s] 19%|#9        | 5/26 [00:00<00:01, 14.79it/s] 27%|##6       | 7/26 [00:00<00:01, 15.65it/s] 35%|###4      | 9/26 [00:00<00:01, 15.73it/s] 42%|####2     | 11/26 [00:00<00:00, 15.97it/s] 50%|#####     | 13/26 [00:00<00:00, 16.09it/s] 58%|#####7    | 15/26 [00:00<00:00, 16.35it/s] 65%|######5   | 17/26 [00:01<00:00, 16.57it/s] 73%|#######3  | 19/26 [00:01<00:00, 16.76it/s] 81%|########  | 21/26 [00:01<00:00, 17.04it/s] 88%|########8 | 23/26 [00:01<00:00, 17.23it/s]100%|##########| 26/26 [00:01<00:00, 16.62it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 650 400
penalty weights 10000.0
args.step pgd_anneal_iters 650 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 651 400
penalty weights 10000.0
args.step pgd_anneal_iters 651 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 652 400
penalty weights 10000.0
args.step pgd_anneal_iters 652 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 653 400
penalty weights 10000.0
args.step pgd_anneal_iters 653 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 654 400
penalty weights 10000.0
args.step pgd_anneal_iters 654 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 655 400
penalty weights 10000.0
args.step pgd_anneal_iters 655 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 656 400
penalty weights 10000.0
args.step pgd_anneal_iters 656 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 657 400
penalty weights 10000.0
args.step pgd_anneal_iters 657 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 658 400
penalty weights 10000.0
args.step pgd_anneal_iters 658 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 659 400
penalty weights 10000.0
args.step pgd_anneal_iters 659 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 660 400
penalty weights 10000.0
args.step pgd_anneal_iters 660 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 661 400
penalty weights 10000.0
args.step pgd_anneal_iters 661 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 662 400
penalty weights 10000.0
args.step pgd_anneal_iters 662 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 663 400
penalty weights 10000.0
args.step pgd_anneal_iters 663 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 664 400
penalty weights 10000.0
args.step pgd_anneal_iters 664 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 665 400
penalty weights 10000.0
args.step pgd_anneal_iters 665 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 666 400
penalty weights 10000.0
args.step pgd_anneal_iters 666 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 667 400
penalty weights 10000.0
args.step pgd_anneal_iters 667 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 668 400
penalty weights 10000.0
args.step pgd_anneal_iters 668 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 669 400
penalty weights 10000.0
args.step pgd_anneal_iters 669 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 670 400
penalty weights 10000.0
args.step pgd_anneal_iters 670 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 671 400
penalty weights 10000.0
args.step pgd_anneal_iters 671 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 672 400
penalty weights 10000.0
args.step pgd_anneal_iters 672 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 673 400
penalty weights 10000.0
args.step pgd_anneal_iters 673 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 674 400
penalty weights 10000.0
args.step pgd_anneal_iters 674 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 675 400
penalty weights 10000.0
args.step pgd_anneal_iters 675 600
dim_v 512
Epoch: [25][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.20 (  0.20)	train_acc   0.56 (  0.50)	train_minacc   0.56 (  0.50)	train_majacc   0.56 (  0.50)	train_corr   0.00 (  0.00)	l1 16.9988 (17.0048)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 19.21it/s] 31%|###       | 8/26 [00:00<00:00, 41.60it/s]                                               31%|###       | 8/26 [00:00<00:00, 41.60it/s] 50%|#####     | 13/26 [00:00<00:00, 42.61it/s] 73%|#######3  | 19/26 [00:00<00:00, 48.69it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 48.69it/s] 96%|#########6| 25/26 [00:00<00:00, 48.63it/s]100%|##########| 26/26 [00:00<00:00, 42.28it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.51 (  0.51)	test_minacc   0.52 (  0.52)	test_majacc   0.51 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.51 (  0.51)	test_corr_d   0.10 (  0.10)
Test: [  10/  26]	Loss 0.692 (0.693)	test_acc   0.52 (  0.50)	test_minacc   0.55 (  0.49)	test_majacc   0.52 (  0.51)	Loss_d 0.692 (0.693)	test_acc_d   0.52 (  0.50)	test_minacc_d   0.55 (  0.49)	test_majacc_d   0.52 (  0.51)	test_corr_d   0.06 (  0.05)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.50 (  0.50)	test_minacc   0.36 (  0.50)	test_majacc   0.53 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.36 (  0.50)	test_majacc_d   0.53 (  0.51)	test_corr_d   0.07 (  0.05)
Test: [  26/  26]	Loss 0.692 (0.693)	test_acc   0.56 (  0.50)	test_minacc   0.56 (  0.50)	test_majacc   0.56 (  0.50)	Loss_d 0.692 (0.693)	test_acc_d   0.56 (  0.50)	test_minacc_d   0.56 (  0.50)	test_majacc_d   0.56 (  0.50)	test_corr_d   0.12 (  0.04)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.37it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.22 ( -0.22)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.22 ( -0.22)
Overall Timing[ 25/  1]	epoch_time 0.0465 (0.0389)	validation_time 0.0003 (0.0006)	train_time 0.0462 (0.0381)
record: (train_acc, test_acc) (0.6969000319242478, 0.6780000329017639)
last accs (train_acc, test_acc) (0.5036000116765499, 0.5)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.26it/s] 19%|#9        | 5/26 [00:00<00:00, 21.48it/s] 35%|###4      | 9/26 [00:00<00:00, 25.98it/s] 50%|#####     | 13/26 [00:00<00:00, 29.23it/s] 65%|######5   | 17/26 [00:00<00:00, 30.94it/s] 81%|########  | 21/26 [00:00<00:00, 32.41it/s] 96%|#########6| 25/26 [00:00<00:00, 33.30it/s]100%|##########| 26/26 [00:00<00:00, 28.11it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 676 400
penalty weights 10000.0
args.step pgd_anneal_iters 676 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 677 400
penalty weights 10000.0
args.step pgd_anneal_iters 677 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 678 400
penalty weights 10000.0
args.step pgd_anneal_iters 678 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 679 400
penalty weights 10000.0
args.step pgd_anneal_iters 679 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 680 400
penalty weights 10000.0
args.step pgd_anneal_iters 680 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 681 400
penalty weights 10000.0
args.step pgd_anneal_iters 681 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 682 400
penalty weights 10000.0
args.step pgd_anneal_iters 682 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 683 400
penalty weights 10000.0
args.step pgd_anneal_iters 683 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 684 400
penalty weights 10000.0
args.step pgd_anneal_iters 684 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 685 400
penalty weights 10000.0
args.step pgd_anneal_iters 685 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 686 400
penalty weights 10000.0
args.step pgd_anneal_iters 686 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 687 400
penalty weights 10000.0
args.step pgd_anneal_iters 687 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 688 400
penalty weights 10000.0
args.step pgd_anneal_iters 688 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 689 400
penalty weights 10000.0
args.step pgd_anneal_iters 689 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 690 400
penalty weights 10000.0
args.step pgd_anneal_iters 690 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 691 400
penalty weights 10000.0
args.step pgd_anneal_iters 691 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 692 400
penalty weights 10000.0
args.step pgd_anneal_iters 692 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 693 400
penalty weights 10000.0
args.step pgd_anneal_iters 693 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 694 400
penalty weights 10000.0
args.step pgd_anneal_iters 694 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 695 400
penalty weights 10000.0
args.step pgd_anneal_iters 695 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 696 400
penalty weights 10000.0
args.step pgd_anneal_iters 696 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 697 400
penalty weights 10000.0
args.step pgd_anneal_iters 697 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 698 400
penalty weights 10000.0
args.step pgd_anneal_iters 698 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 699 400
penalty weights 10000.0
args.step pgd_anneal_iters 699 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 700 400
penalty weights 10000.0
args.step pgd_anneal_iters 700 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 701 400
penalty weights 10000.0
args.step pgd_anneal_iters 701 600
dim_v 512
Epoch: [26][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.20 (  0.20)	train_acc   0.55 (  0.50)	train_minacc   0.53 (  0.50)	train_majacc   0.56 (  0.50)	train_corr   0.00 (  0.00)	l1 16.9881 (16.9934)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 18.80it/s] 31%|###       | 8/26 [00:00<00:00, 41.61it/s]                                               31%|###       | 8/26 [00:00<00:00, 41.61it/s] 50%|#####     | 13/26 [00:00<00:00, 43.60it/s] 73%|#######3  | 19/26 [00:00<00:00, 48.33it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 48.33it/s] 96%|#########6| 25/26 [00:00<00:00, 49.45it/s]100%|##########| 26/26 [00:00<00:00, 42.88it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.51 (  0.51)	test_minacc   0.52 (  0.52)	test_majacc   0.51 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.51 (  0.51)	test_corr_d   0.08 (  0.08)
Test: [  10/  26]	Loss 0.692 (0.693)	test_acc   0.52 (  0.50)	test_minacc   0.55 (  0.49)	test_majacc   0.52 (  0.51)	Loss_d 0.692 (0.693)	test_acc_d   0.52 (  0.50)	test_minacc_d   0.55 (  0.49)	test_majacc_d   0.52 (  0.51)	test_corr_d   0.05 (  0.03)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.50 (  0.50)	test_minacc   0.36 (  0.50)	test_majacc   0.53 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.36 (  0.50)	test_majacc_d   0.53 (  0.51)	test_corr_d   0.06 (  0.03)
Test: [  26/  26]	Loss 0.692 (0.693)	test_acc   0.55 (  0.50)	test_minacc   0.53 (  0.50)	test_majacc   0.56 (  0.51)	Loss_d 0.692 (0.693)	test_acc_d   0.55 (  0.50)	test_minacc_d   0.53 (  0.50)	test_majacc_d   0.56 (  0.51)	test_corr_d   0.12 (  0.03)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 67.33it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.16 ( -0.16)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.16 ( -0.16)
Overall Timing[ 26/  1]	epoch_time 0.0368 (0.0388)	validation_time 0.0004 (0.0006)	train_time 0.0364 (0.0381)
record: (train_acc, test_acc) (0.6969000319242478, 0.6780000329017639)
last accs (train_acc, test_acc) (0.5038000126183033, 0.5)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:06,  4.01it/s] 19%|#9        | 5/26 [00:00<00:01, 15.97it/s] 35%|###4      | 9/26 [00:00<00:00, 22.45it/s] 50%|#####     | 13/26 [00:00<00:00, 26.75it/s] 65%|######5   | 17/26 [00:00<00:00, 28.49it/s] 81%|########  | 21/26 [00:00<00:00, 30.95it/s] 96%|#########6| 25/26 [00:00<00:00, 32.23it/s]100%|##########| 26/26 [00:01<00:00, 25.26it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 702 400
penalty weights 10000.0
args.step pgd_anneal_iters 702 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 703 400
penalty weights 10000.0
args.step pgd_anneal_iters 703 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 704 400
penalty weights 10000.0
args.step pgd_anneal_iters 704 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 705 400
penalty weights 10000.0
args.step pgd_anneal_iters 705 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 706 400
penalty weights 10000.0
args.step pgd_anneal_iters 706 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 707 400
penalty weights 10000.0
args.step pgd_anneal_iters 707 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 708 400
penalty weights 10000.0
args.step pgd_anneal_iters 708 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 709 400
penalty weights 10000.0
args.step pgd_anneal_iters 709 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 710 400
penalty weights 10000.0
args.step pgd_anneal_iters 710 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 711 400
penalty weights 10000.0
args.step pgd_anneal_iters 711 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 712 400
penalty weights 10000.0
args.step pgd_anneal_iters 712 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 713 400
penalty weights 10000.0
args.step pgd_anneal_iters 713 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 714 400
penalty weights 10000.0
args.step pgd_anneal_iters 714 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 715 400
penalty weights 10000.0
args.step pgd_anneal_iters 715 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 716 400
penalty weights 10000.0
args.step pgd_anneal_iters 716 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 717 400
penalty weights 10000.0
args.step pgd_anneal_iters 717 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 718 400
penalty weights 10000.0
args.step pgd_anneal_iters 718 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 719 400
penalty weights 10000.0
args.step pgd_anneal_iters 719 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 720 400
penalty weights 10000.0
args.step pgd_anneal_iters 720 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 721 400
penalty weights 10000.0
args.step pgd_anneal_iters 721 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 722 400
penalty weights 10000.0
args.step pgd_anneal_iters 722 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 723 400
penalty weights 10000.0
args.step pgd_anneal_iters 723 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 724 400
penalty weights 10000.0
args.step pgd_anneal_iters 724 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 725 400
penalty weights 10000.0
args.step pgd_anneal_iters 725 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 726 400
penalty weights 10000.0
args.step pgd_anneal_iters 726 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 727 400
penalty weights 10000.0
args.step pgd_anneal_iters 727 600
dim_v 512
Epoch: [27][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.20 (  0.20)	train_acc   0.55 (  0.50)	train_minacc   0.53 (  0.50)	train_majacc   0.56 (  0.51)	train_corr   0.00 (  0.00)	l1 16.9801 (16.9836)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.43it/s] 27%|##6       | 7/26 [00:00<00:00, 35.49it/s]                                               27%|##6       | 7/26 [00:00<00:00, 35.49it/s] 50%|#####     | 13/26 [00:00<00:00, 40.68it/s] 73%|#######3  | 19/26 [00:00<00:00, 47.34it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 47.34it/s] 96%|#########6| 25/26 [00:00<00:00, 46.98it/s]100%|##########| 26/26 [00:00<00:00, 39.88it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.51 (  0.51)	test_minacc   0.52 (  0.52)	test_majacc   0.51 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.51 (  0.51)	test_corr_d   0.06 (  0.06)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.52 (  0.50)	test_minacc   0.55 (  0.49)	test_majacc   0.52 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.50)	test_minacc_d   0.55 (  0.49)	test_majacc_d   0.52 (  0.51)	test_corr_d   0.05 (  0.02)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.50 (  0.51)	test_minacc   0.36 (  0.50)	test_majacc   0.53 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.51)	test_minacc_d   0.36 (  0.50)	test_majacc_d   0.53 (  0.51)	test_corr_d   0.05 (  0.02)
Test: [  26/  26]	Loss 0.692 (0.693)	test_acc   0.55 (  0.51)	test_minacc   0.53 (  0.50)	test_majacc   0.56 (  0.51)	Loss_d 0.692 (0.693)	test_acc_d   0.55 (  0.51)	test_minacc_d   0.53 (  0.50)	test_majacc_d   0.56 (  0.51)	test_corr_d   0.12 (  0.02)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.86it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.10 ( -0.10)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.10 ( -0.10)
Overall Timing[ 27/  1]	epoch_time 0.0359 (0.0387)	validation_time 0.0003 (0.0006)	train_time 0.0355 (0.0380)
record: (train_acc, test_acc) (0.6969000319242478, 0.6780000329017639)
last accs (train_acc, test_acc) (0.5052000136971474, 0.5)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.13it/s] 19%|#9        | 5/26 [00:00<00:00, 23.50it/s] 35%|###4      | 9/26 [00:00<00:00, 28.17it/s] 50%|#####     | 13/26 [00:00<00:00, 30.84it/s] 65%|######5   | 17/26 [00:00<00:00, 32.64it/s] 81%|########  | 21/26 [00:00<00:00, 33.77it/s] 96%|#########6| 25/26 [00:00<00:00, 34.19it/s]100%|##########| 26/26 [00:00<00:00, 29.38it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 728 400
penalty weights 10000.0
args.step pgd_anneal_iters 728 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 729 400
penalty weights 10000.0
args.step pgd_anneal_iters 729 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 730 400
penalty weights 10000.0
args.step pgd_anneal_iters 730 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 731 400
penalty weights 10000.0
args.step pgd_anneal_iters 731 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 732 400
penalty weights 10000.0
args.step pgd_anneal_iters 732 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 733 400
penalty weights 10000.0
args.step pgd_anneal_iters 733 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 734 400
penalty weights 10000.0
args.step pgd_anneal_iters 734 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 735 400
penalty weights 10000.0
args.step pgd_anneal_iters 735 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 736 400
penalty weights 10000.0
args.step pgd_anneal_iters 736 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 737 400
penalty weights 10000.0
args.step pgd_anneal_iters 737 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 738 400
penalty weights 10000.0
args.step pgd_anneal_iters 738 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 739 400
penalty weights 10000.0
args.step pgd_anneal_iters 739 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 740 400
penalty weights 10000.0
args.step pgd_anneal_iters 740 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 741 400
penalty weights 10000.0
args.step pgd_anneal_iters 741 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 742 400
penalty weights 10000.0
args.step pgd_anneal_iters 742 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 743 400
penalty weights 10000.0
args.step pgd_anneal_iters 743 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 744 400
penalty weights 10000.0
args.step pgd_anneal_iters 744 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 745 400
penalty weights 10000.0
args.step pgd_anneal_iters 745 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 746 400
penalty weights 10000.0
args.step pgd_anneal_iters 746 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 747 400
penalty weights 10000.0
args.step pgd_anneal_iters 747 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 748 400
penalty weights 10000.0
args.step pgd_anneal_iters 748 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 749 400
penalty weights 10000.0
args.step pgd_anneal_iters 749 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 750 400
penalty weights 10000.0
args.step pgd_anneal_iters 750 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 751 400
penalty weights 10000.0
args.step pgd_anneal_iters 751 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 752 400
penalty weights 10000.0
args.step pgd_anneal_iters 752 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 753 400
penalty weights 10000.0
args.step pgd_anneal_iters 753 600
dim_v 512
Epoch: [28][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.20 (  0.20)	train_acc   0.55 (  0.51)	train_minacc   0.53 (  0.50)	train_majacc   0.56 (  0.51)	train_corr   0.00 (  0.00)	l1 16.9835 (16.9810)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 17.95it/s] 35%|###4      | 9/26 [00:00<00:00, 40.56it/s]                                               35%|###4      | 9/26 [00:00<00:00, 40.56it/s] 58%|#####7    | 15/26 [00:00<00:00, 47.45it/s]                                                58%|#####7    | 15/26 [00:00<00:00, 47.45it/s] 81%|########  | 21/26 [00:00<00:00, 48.61it/s]100%|##########| 26/26 [00:00<00:00, 42.74it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.52 (  0.52)	test_minacc   0.52 (  0.52)	test_majacc   0.51 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.51 (  0.51)	test_corr_d   0.04 (  0.04)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.53 (  0.51)	test_minacc   0.56 (  0.49)	test_majacc   0.52 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.53 (  0.51)	test_minacc_d   0.56 (  0.49)	test_majacc_d   0.52 (  0.51)	test_corr_d   0.04 (  0.01)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.50 (  0.51)	test_minacc   0.36 (  0.50)	test_majacc   0.53 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.51)	test_minacc_d   0.36 (  0.50)	test_majacc_d   0.53 (  0.51)	test_corr_d   0.04 (  0.01)
Test: [  26/  26]	Loss 0.692 (0.693)	test_acc   0.55 (  0.51)	test_minacc   0.53 (  0.50)	test_majacc   0.56 (  0.51)	Loss_d 0.692 (0.693)	test_acc_d   0.55 (  0.51)	test_minacc_d   0.53 (  0.50)	test_majacc_d   0.56 (  0.51)	test_corr_d   0.12 (  0.01)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.63it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.03 ( -0.03)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.03 ( -0.03)
Overall Timing[ 28/  1]	epoch_time 0.0356 (0.0386)	validation_time 0.0003 (0.0006)	train_time 0.0353 (0.0379)
record: (train_acc, test_acc) (0.6969000319242478, 0.6780000329017639)
last accs (train_acc, test_acc) (0.5062000147998333, 0.5)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.12it/s] 15%|#5        | 4/26 [00:00<00:01, 18.00it/s] 31%|###       | 8/26 [00:00<00:00, 25.40it/s] 46%|####6     | 12/26 [00:00<00:00, 29.42it/s] 62%|######1   | 16/26 [00:00<00:00, 31.59it/s] 77%|#######6  | 20/26 [00:00<00:00, 33.27it/s] 92%|#########2| 24/26 [00:00<00:00, 34.25it/s]100%|##########| 26/26 [00:00<00:00, 28.34it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 754 400
penalty weights 10000.0
args.step pgd_anneal_iters 754 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 755 400
penalty weights 10000.0
args.step pgd_anneal_iters 755 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 756 400
penalty weights 10000.0
args.step pgd_anneal_iters 756 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 757 400
penalty weights 10000.0
args.step pgd_anneal_iters 757 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 758 400
penalty weights 10000.0
args.step pgd_anneal_iters 758 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 759 400
penalty weights 10000.0
args.step pgd_anneal_iters 759 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 760 400
penalty weights 10000.0
args.step pgd_anneal_iters 760 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 761 400
penalty weights 10000.0
args.step pgd_anneal_iters 761 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 762 400
penalty weights 10000.0
args.step pgd_anneal_iters 762 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 763 400
penalty weights 10000.0
args.step pgd_anneal_iters 763 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 764 400
penalty weights 10000.0
args.step pgd_anneal_iters 764 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 765 400
penalty weights 10000.0
args.step pgd_anneal_iters 765 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 766 400
penalty weights 10000.0
args.step pgd_anneal_iters 766 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 767 400
penalty weights 10000.0
args.step pgd_anneal_iters 767 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 768 400
penalty weights 10000.0
args.step pgd_anneal_iters 768 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 769 400
penalty weights 10000.0
args.step pgd_anneal_iters 769 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 770 400
penalty weights 10000.0
args.step pgd_anneal_iters 770 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 771 400
penalty weights 10000.0
args.step pgd_anneal_iters 771 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 772 400
penalty weights 10000.0
args.step pgd_anneal_iters 772 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 773 400
penalty weights 10000.0
args.step pgd_anneal_iters 773 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 774 400
penalty weights 10000.0
args.step pgd_anneal_iters 774 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 775 400
penalty weights 10000.0
args.step pgd_anneal_iters 775 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 776 400
penalty weights 10000.0
args.step pgd_anneal_iters 776 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 777 400
penalty weights 10000.0
args.step pgd_anneal_iters 777 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 778 400
penalty weights 10000.0
args.step pgd_anneal_iters 778 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 779 400
penalty weights 10000.0
args.step pgd_anneal_iters 779 600
dim_v 512
Epoch: [29][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.19 (  0.20)	train_acc   0.55 (  0.51)	train_minacc   0.53 (  0.50)	train_majacc   0.56 (  0.51)	train_corr   0.00 (  0.00)	l1 16.9906 (16.9869)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.66it/s] 27%|##6       | 7/26 [00:00<00:00, 29.93it/s]                                               27%|##6       | 7/26 [00:00<00:00, 29.93it/s] 50%|#####     | 13/26 [00:00<00:00, 38.19it/s] 73%|#######3  | 19/26 [00:00<00:00, 44.47it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 44.47it/s] 96%|#########6| 25/26 [00:00<00:00, 45.92it/s]100%|##########| 26/26 [00:00<00:00, 37.22it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.52 (  0.52)	test_minacc   0.52 (  0.52)	test_majacc   0.51 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.51 (  0.51)	test_corr_d   0.03 (  0.03)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.53 (  0.51)	test_minacc   0.56 (  0.49)	test_majacc   0.52 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.53 (  0.51)	test_minacc_d   0.56 (  0.49)	test_majacc_d   0.52 (  0.51)	test_corr_d   0.04 (  0.01)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.50 (  0.51)	test_minacc   0.36 (  0.50)	test_majacc   0.53 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.51)	test_minacc_d   0.36 (  0.50)	test_majacc_d   0.53 (  0.51)	test_corr_d   0.04 (  0.01)
Test: [  26/  26]	Loss 0.692 (0.693)	test_acc   0.55 (  0.51)	test_minacc   0.53 (  0.50)	test_majacc   0.56 (  0.51)	Loss_d 0.692 (0.693)	test_acc_d   0.55 (  0.51)	test_minacc_d   0.53 (  0.50)	test_majacc_d   0.56 (  0.51)	test_corr_d   0.12 (  0.01)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.04it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d   0.03 (  0.03)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d   0.03 (  0.03)
Overall Timing[ 29/  1]	epoch_time 0.0364 (0.0385)	validation_time 0.0004 (0.0006)	train_time 0.0360 (0.0378)
record: (train_acc, test_acc) (0.6969000319242478, 0.6780000329017639)
last accs (train_acc, test_acc) (0.5072000124156475, 0.5)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.79it/s] 19%|#9        | 5/26 [00:00<00:00, 22.87it/s] 35%|###4      | 9/26 [00:00<00:00, 28.49it/s] 46%|####6     | 12/26 [00:00<00:00, 28.66it/s] 62%|######1   | 16/26 [00:00<00:00, 31.39it/s] 77%|#######6  | 20/26 [00:00<00:00, 32.67it/s] 92%|#########2| 24/26 [00:00<00:00, 33.76it/s]100%|##########| 26/26 [00:00<00:00, 28.71it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 780 400
penalty weights 10000.0
args.step pgd_anneal_iters 780 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 781 400
penalty weights 10000.0
args.step pgd_anneal_iters 781 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 782 400
penalty weights 10000.0
args.step pgd_anneal_iters 782 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 783 400
penalty weights 10000.0
args.step pgd_anneal_iters 783 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 784 400
penalty weights 10000.0
args.step pgd_anneal_iters 784 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 785 400
penalty weights 10000.0
args.step pgd_anneal_iters 785 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 786 400
penalty weights 10000.0
args.step pgd_anneal_iters 786 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 787 400
penalty weights 10000.0
args.step pgd_anneal_iters 787 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 788 400
penalty weights 10000.0
args.step pgd_anneal_iters 788 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 789 400
penalty weights 10000.0
args.step pgd_anneal_iters 789 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 790 400
penalty weights 10000.0
args.step pgd_anneal_iters 790 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 791 400
penalty weights 10000.0
args.step pgd_anneal_iters 791 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 792 400
penalty weights 10000.0
args.step pgd_anneal_iters 792 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 793 400
penalty weights 10000.0
args.step pgd_anneal_iters 793 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 794 400
penalty weights 10000.0
args.step pgd_anneal_iters 794 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 795 400
penalty weights 10000.0
args.step pgd_anneal_iters 795 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 796 400
penalty weights 10000.0
args.step pgd_anneal_iters 796 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 797 400
penalty weights 10000.0
args.step pgd_anneal_iters 797 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 798 400
penalty weights 10000.0
args.step pgd_anneal_iters 798 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 799 400
penalty weights 10000.0
args.step pgd_anneal_iters 799 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 800 400
penalty weights 10000.0
args.step pgd_anneal_iters 800 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 801 400
penalty weights 10000.0
args.step pgd_anneal_iters 801 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 802 400
penalty weights 10000.0
args.step pgd_anneal_iters 802 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 803 400
penalty weights 10000.0
args.step pgd_anneal_iters 803 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 804 400
penalty weights 10000.0
args.step pgd_anneal_iters 804 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 805 400
penalty weights 10000.0
args.step pgd_anneal_iters 805 600
dim_v 512
Epoch: [30][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.19 (  0.19)	train_acc   0.56 (  0.51)	train_minacc   0.53 (  0.50)	train_majacc   0.56 (  0.51)	train_corr   0.00 (  0.00)	l1 16.9987 (16.9946)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.32it/s] 23%|##3       | 6/26 [00:00<00:00, 28.64it/s]                                               23%|##3       | 6/26 [00:00<00:00, 28.64it/s] 46%|####6     | 12/26 [00:00<00:00, 41.02it/s] 65%|######5   | 17/26 [00:00<00:00, 42.70it/s]                                                65%|######5   | 17/26 [00:00<00:00, 42.70it/s] 88%|########8 | 23/26 [00:00<00:00, 47.67it/s]100%|##########| 26/26 [00:00<00:00, 38.73it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.52 (  0.52)	test_minacc   0.52 (  0.52)	test_majacc   0.51 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.51 (  0.51)	test_corr_d   0.03 (  0.03)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.53 (  0.51)	test_minacc   0.56 (  0.49)	test_majacc   0.52 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.53 (  0.51)	test_minacc_d   0.56 (  0.49)	test_majacc_d   0.52 (  0.51)	test_corr_d   0.05 (  0.01)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.51 (  0.51)	test_minacc   0.36 (  0.50)	test_majacc   0.53 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.36 (  0.50)	test_majacc_d   0.53 (  0.51)	test_corr_d   0.05 (  0.01)
Test: [  26/  26]	Loss 0.692 (0.693)	test_acc   0.56 (  0.51)	test_minacc   0.53 (  0.50)	test_majacc   0.56 (  0.51)	Loss_d 0.692 (0.693)	test_acc_d   0.56 (  0.51)	test_minacc_d   0.53 (  0.50)	test_majacc_d   0.56 (  0.51)	test_corr_d   0.12 (  0.01)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.37it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d   0.07 (  0.07)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d   0.07 (  0.07)
Overall Timing[ 30/  1]	epoch_time 0.0361 (0.0384)	validation_time 0.0004 (0.0006)	train_time 0.0357 (0.0378)
record: (train_acc, test_acc) (0.6969000319242478, 0.6780000329017639)
last accs (train_acc, test_acc) (0.5082000137269497, 0.5)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.34it/s] 19%|#9        | 5/26 [00:00<00:01, 18.76it/s] 27%|##6       | 7/26 [00:00<00:01, 18.08it/s] 35%|###4      | 9/26 [00:00<00:00, 17.91it/s] 42%|####2     | 11/26 [00:00<00:00, 17.71it/s] 50%|#####     | 13/26 [00:00<00:00, 17.67it/s] 58%|#####7    | 15/26 [00:00<00:00, 17.34it/s] 65%|######5   | 17/26 [00:00<00:00, 17.40it/s] 73%|#######3  | 19/26 [00:01<00:00, 17.40it/s] 81%|########  | 21/26 [00:01<00:00, 17.50it/s] 88%|########8 | 23/26 [00:01<00:00, 17.48it/s] 96%|#########6| 25/26 [00:01<00:00, 17.57it/s]100%|##########| 26/26 [00:01<00:00, 16.79it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 806 400
penalty weights 10000.0
args.step pgd_anneal_iters 806 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 807 400
penalty weights 10000.0
args.step pgd_anneal_iters 807 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 808 400
penalty weights 10000.0
args.step pgd_anneal_iters 808 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 809 400
penalty weights 10000.0
args.step pgd_anneal_iters 809 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 810 400
penalty weights 10000.0
args.step pgd_anneal_iters 810 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 811 400
penalty weights 10000.0
args.step pgd_anneal_iters 811 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 812 400
penalty weights 10000.0
args.step pgd_anneal_iters 812 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 813 400
penalty weights 10000.0
args.step pgd_anneal_iters 813 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 814 400
penalty weights 10000.0
args.step pgd_anneal_iters 814 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 815 400
penalty weights 10000.0
args.step pgd_anneal_iters 815 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 816 400
penalty weights 10000.0
args.step pgd_anneal_iters 816 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 817 400
penalty weights 10000.0
args.step pgd_anneal_iters 817 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 818 400
penalty weights 10000.0
args.step pgd_anneal_iters 818 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 819 400
penalty weights 10000.0
args.step pgd_anneal_iters 819 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 820 400
penalty weights 10000.0
args.step pgd_anneal_iters 820 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 821 400
penalty weights 10000.0
args.step pgd_anneal_iters 821 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 822 400
penalty weights 10000.0
args.step pgd_anneal_iters 822 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 823 400
penalty weights 10000.0
args.step pgd_anneal_iters 823 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 824 400
penalty weights 10000.0
args.step pgd_anneal_iters 824 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 825 400
penalty weights 10000.0
args.step pgd_anneal_iters 825 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 826 400
penalty weights 10000.0
args.step pgd_anneal_iters 826 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 827 400
penalty weights 10000.0
args.step pgd_anneal_iters 827 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 828 400
penalty weights 10000.0
args.step pgd_anneal_iters 828 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 829 400
penalty weights 10000.0
args.step pgd_anneal_iters 829 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 830 400
penalty weights 10000.0
args.step pgd_anneal_iters 830 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 831 400
penalty weights 10000.0
args.step pgd_anneal_iters 831 600
dim_v 512
retunring when rho == dim_v - 1
Epoch: [31][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.19 (  0.19)	train_acc   0.56 (  0.51)	train_minacc   0.53 (  0.50)	train_majacc   0.57 (  0.51)	train_corr   0.00 (  0.00)	l1 17.0063 (17.0025)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 19.68it/s] 31%|###       | 8/26 [00:00<00:00, 41.15it/s]                                               31%|###       | 8/26 [00:00<00:00, 41.15it/s] 50%|#####     | 13/26 [00:00<00:00, 42.47it/s] 73%|#######3  | 19/26 [00:00<00:00, 48.08it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 48.08it/s] 96%|#########6| 25/26 [00:00<00:00, 48.44it/s]100%|##########| 26/26 [00:00<00:00, 42.22it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.52 (  0.52)	test_minacc   0.52 (  0.52)	test_majacc   0.51 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.51 (  0.51)	test_corr_d   0.03 (  0.03)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.53 (  0.51)	test_minacc   0.55 (  0.49)	test_majacc   0.53 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.53 (  0.51)	test_minacc_d   0.55 (  0.49)	test_majacc_d   0.53 (  0.51)	test_corr_d   0.05 (  0.01)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.51 (  0.51)	test_minacc   0.36 (  0.50)	test_majacc   0.54 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.36 (  0.50)	test_majacc_d   0.54 (  0.51)	test_corr_d   0.05 (  0.01)
Test: [  26/  26]	Loss 0.692 (0.693)	test_acc   0.56 (  0.51)	test_minacc   0.53 (  0.50)	test_majacc   0.57 (  0.51)	Loss_d 0.692 (0.693)	test_acc_d   0.56 (  0.51)	test_minacc_d   0.53 (  0.50)	test_majacc_d   0.57 (  0.51)	test_corr_d   0.13 (  0.01)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.88it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d   0.12 (  0.12)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d   0.12 (  0.12)
Overall Timing[ 31/  1]	epoch_time 0.0460 (0.0387)	validation_time 0.0003 (0.0006)	train_time 0.0456 (0.0380)
record: (train_acc, test_acc) (0.6969000319242478, 0.6780000329017639)
last accs (train_acc, test_acc) (0.5095000112056732, 0.4970000088214874)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.90it/s] 12%|#1        | 3/26 [00:00<00:01, 12.18it/s] 19%|#9        | 5/26 [00:00<00:01, 14.27it/s] 27%|##6       | 7/26 [00:00<00:01, 15.24it/s] 35%|###4      | 9/26 [00:00<00:01, 15.96it/s] 42%|####2     | 11/26 [00:00<00:00, 16.36it/s] 50%|#####     | 13/26 [00:00<00:00, 16.67it/s] 58%|#####7    | 15/26 [00:00<00:00, 16.50it/s] 65%|######5   | 17/26 [00:01<00:00, 16.69it/s] 73%|#######3  | 19/26 [00:01<00:00, 16.59it/s] 81%|########  | 21/26 [00:01<00:00, 16.57it/s] 88%|########8 | 23/26 [00:01<00:00, 16.69it/s] 96%|#########6| 25/26 [00:01<00:00, 16.60it/s]100%|##########| 26/26 [00:01<00:00, 15.38it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 832 400
penalty weights 10000.0
args.step pgd_anneal_iters 832 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 833 400
penalty weights 10000.0
args.step pgd_anneal_iters 833 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 834 400
penalty weights 10000.0
args.step pgd_anneal_iters 834 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 835 400
penalty weights 10000.0
args.step pgd_anneal_iters 835 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 836 400
penalty weights 10000.0
args.step pgd_anneal_iters 836 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 837 400
penalty weights 10000.0
args.step pgd_anneal_iters 837 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 838 400
penalty weights 10000.0
args.step pgd_anneal_iters 838 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 839 400
penalty weights 10000.0
args.step pgd_anneal_iters 839 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 840 400
penalty weights 10000.0
args.step pgd_anneal_iters 840 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 841 400
penalty weights 10000.0
args.step pgd_anneal_iters 841 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 842 400
penalty weights 10000.0
args.step pgd_anneal_iters 842 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 843 400
penalty weights 10000.0
args.step pgd_anneal_iters 843 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 844 400
penalty weights 10000.0
args.step pgd_anneal_iters 844 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 845 400
penalty weights 10000.0
args.step pgd_anneal_iters 845 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 846 400
penalty weights 10000.0
args.step pgd_anneal_iters 846 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 847 400
penalty weights 10000.0
args.step pgd_anneal_iters 847 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 848 400
penalty weights 10000.0
args.step pgd_anneal_iters 848 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 849 400
penalty weights 10000.0
args.step pgd_anneal_iters 849 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 850 400
penalty weights 10000.0
args.step pgd_anneal_iters 850 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 851 400
penalty weights 10000.0
args.step pgd_anneal_iters 851 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 852 400
penalty weights 10000.0
args.step pgd_anneal_iters 852 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 853 400
penalty weights 10000.0
args.step pgd_anneal_iters 853 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 854 400
penalty weights 10000.0
args.step pgd_anneal_iters 854 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 855 400
penalty weights 10000.0
args.step pgd_anneal_iters 855 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 856 400
penalty weights 10000.0
args.step pgd_anneal_iters 856 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 857 400
penalty weights 10000.0
args.step pgd_anneal_iters 857 600
dim_v 512
retunring when rho == dim_v - 1
Epoch: [32][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.19 (  0.19)	train_acc   0.56 (  0.51)	train_minacc   0.53 (  0.50)	train_majacc   0.57 (  0.51)	train_corr   0.00 (  0.00)	l1 17.0133 (17.0098)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 18.65it/s] 27%|##6       | 7/26 [00:00<00:00, 34.66it/s]                                               27%|##6       | 7/26 [00:00<00:00, 34.66it/s] 46%|####6     | 12/26 [00:00<00:00, 40.55it/s] 65%|######5   | 17/26 [00:00<00:00, 43.75it/s]                                                65%|######5   | 17/26 [00:00<00:00, 43.75it/s] 88%|########8 | 23/26 [00:00<00:00, 49.21it/s]100%|##########| 26/26 [00:00<00:00, 40.11it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.52 (  0.52)	test_minacc   0.52 (  0.52)	test_majacc   0.51 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.51 (  0.51)	test_corr_d   0.03 (  0.03)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.53 (  0.51)	test_minacc   0.55 (  0.49)	test_majacc   0.53 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.53 (  0.51)	test_minacc_d   0.55 (  0.49)	test_majacc_d   0.53 (  0.51)	test_corr_d   0.06 (  0.02)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.51 (  0.51)	test_minacc   0.36 (  0.50)	test_majacc   0.54 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.36 (  0.50)	test_majacc_d   0.54 (  0.51)	test_corr_d   0.05 (  0.02)
Test: [  26/  26]	Loss 0.692 (0.693)	test_acc   0.56 (  0.51)	test_minacc   0.53 (  0.50)	test_majacc   0.57 (  0.51)	Loss_d 0.692 (0.693)	test_acc_d   0.56 (  0.51)	test_minacc_d   0.53 (  0.50)	test_majacc_d   0.57 (  0.51)	test_corr_d   0.13 (  0.01)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 65.93it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.51 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.51 (  0.51)	test_corr_d   0.15 (  0.15)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.51 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.51 (  0.51)	test_corr_d   0.15 (  0.15)
Overall Timing[ 32/  1]	epoch_time 0.0497 (0.0390)	validation_time 0.0004 (0.0006)	train_time 0.0493 (0.0383)
record: (train_acc, test_acc) (0.6969000319242478, 0.6780000329017639)
last accs (train_acc, test_acc) (0.5105000090301037, 0.49800002574920654)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.87it/s] 12%|#1        | 3/26 [00:00<00:01, 11.53it/s] 19%|#9        | 5/26 [00:00<00:01, 13.69it/s] 27%|##6       | 7/26 [00:00<00:01, 14.94it/s] 35%|###4      | 9/26 [00:00<00:01, 15.75it/s] 42%|####2     | 11/26 [00:00<00:00, 16.15it/s] 50%|#####     | 13/26 [00:00<00:00, 16.51it/s] 58%|#####7    | 15/26 [00:00<00:00, 16.64it/s] 65%|######5   | 17/26 [00:01<00:00, 16.84it/s] 73%|#######3  | 19/26 [00:01<00:00, 16.92it/s] 81%|########  | 21/26 [00:01<00:00, 16.98it/s] 88%|########8 | 23/26 [00:01<00:00, 17.11it/s] 96%|#########6| 25/26 [00:01<00:00, 17.13it/s]100%|##########| 26/26 [00:01<00:00, 15.54it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 858 400
penalty weights 10000.0
args.step pgd_anneal_iters 858 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 859 400
penalty weights 10000.0
args.step pgd_anneal_iters 859 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 860 400
penalty weights 10000.0
args.step pgd_anneal_iters 860 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 861 400
penalty weights 10000.0
args.step pgd_anneal_iters 861 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 862 400
penalty weights 10000.0
args.step pgd_anneal_iters 862 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 863 400
penalty weights 10000.0
args.step pgd_anneal_iters 863 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 864 400
penalty weights 10000.0
args.step pgd_anneal_iters 864 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 865 400
penalty weights 10000.0
args.step pgd_anneal_iters 865 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 866 400
penalty weights 10000.0
args.step pgd_anneal_iters 866 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 867 400
penalty weights 10000.0
args.step pgd_anneal_iters 867 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 868 400
penalty weights 10000.0
args.step pgd_anneal_iters 868 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 869 400
penalty weights 10000.0
args.step pgd_anneal_iters 869 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 870 400
penalty weights 10000.0
args.step pgd_anneal_iters 870 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 871 400
penalty weights 10000.0
args.step pgd_anneal_iters 871 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 872 400
penalty weights 10000.0
args.step pgd_anneal_iters 872 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 873 400
penalty weights 10000.0
args.step pgd_anneal_iters 873 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 874 400
penalty weights 10000.0
args.step pgd_anneal_iters 874 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 875 400
penalty weights 10000.0
args.step pgd_anneal_iters 875 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 876 400
penalty weights 10000.0
args.step pgd_anneal_iters 876 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 877 400
penalty weights 10000.0
args.step pgd_anneal_iters 877 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 878 400
penalty weights 10000.0
args.step pgd_anneal_iters 878 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 879 400
penalty weights 10000.0
args.step pgd_anneal_iters 879 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 880 400
penalty weights 10000.0
args.step pgd_anneal_iters 880 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 881 400
penalty weights 10000.0
args.step pgd_anneal_iters 881 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 882 400
penalty weights 10000.0
args.step pgd_anneal_iters 882 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 883 400
penalty weights 10000.0
args.step pgd_anneal_iters 883 600
dim_v 512
retunring when rho == dim_v - 1
Epoch: [33][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.19 (  0.19)	train_acc   0.57 (  0.51)	train_minacc   0.53 (  0.50)	train_majacc   0.57 (  0.51)	train_corr   0.00 (  0.00)	l1 17.0197 (17.0165)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.53it/s] 27%|##6       | 7/26 [00:00<00:00, 32.60it/s]                                               27%|##6       | 7/26 [00:00<00:00, 32.60it/s] 46%|####6     | 12/26 [00:00<00:00, 39.33it/s] 65%|######5   | 17/26 [00:00<00:00, 42.30it/s]                                                65%|######5   | 17/26 [00:00<00:00, 42.30it/s] 88%|########8 | 23/26 [00:00<00:00, 47.19it/s]100%|##########| 26/26 [00:00<00:00, 38.80it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.51 (  0.51)	test_minacc   0.51 (  0.51)	test_majacc   0.51 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.51 (  0.51)	test_corr_d   0.03 (  0.03)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.54 (  0.51)	test_minacc   0.55 (  0.49)	test_majacc   0.54 (  0.52)	Loss_d 0.693 (0.693)	test_acc_d   0.54 (  0.51)	test_minacc_d   0.55 (  0.49)	test_majacc_d   0.54 (  0.52)	test_corr_d   0.06 (  0.02)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.51 (  0.51)	test_minacc   0.36 (  0.50)	test_majacc   0.54 (  0.52)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.36 (  0.50)	test_majacc_d   0.54 (  0.52)	test_corr_d   0.05 (  0.02)
Test: [  26/  26]	Loss 0.692 (0.693)	test_acc   0.57 (  0.51)	test_minacc   0.53 (  0.50)	test_majacc   0.57 (  0.52)	Loss_d 0.692 (0.693)	test_acc_d   0.57 (  0.51)	test_minacc_d   0.53 (  0.50)	test_majacc_d   0.57 (  0.52)	test_corr_d   0.14 (  0.02)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.03it/s]
Test: [  0/  1]	Loss 0.694 (0.694)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.51 (  0.51)	Loss_d 0.694 (0.694)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.51 (  0.51)	test_corr_d   0.18 (  0.18)
Test: [  1/  1]	Loss 0.694 (0.694)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.51 (  0.51)	Loss_d 0.694 (0.694)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.51 (  0.51)	test_corr_d   0.18 (  0.18)
Overall Timing[ 33/  1]	epoch_time 0.0495 (0.0393)	validation_time 0.0004 (0.0006)	train_time 0.0491 (0.0387)
record: (train_acc, test_acc) (0.6969000319242478, 0.6780000329017639)
last accs (train_acc, test_acc) (0.5121000103056431, 0.49800002574920654)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.06it/s] 12%|#1        | 3/26 [00:00<00:02, 10.23it/s] 19%|#9        | 5/26 [00:00<00:01, 12.53it/s] 27%|##6       | 7/26 [00:00<00:01, 14.05it/s] 35%|###4      | 9/26 [00:00<00:01, 15.11it/s] 42%|####2     | 11/26 [00:00<00:00, 15.74it/s] 50%|#####     | 13/26 [00:00<00:00, 16.15it/s] 58%|#####7    | 15/26 [00:01<00:00, 16.48it/s] 65%|######5   | 17/26 [00:01<00:00, 16.54it/s] 73%|#######3  | 19/26 [00:01<00:00, 16.68it/s] 81%|########  | 21/26 [00:01<00:00, 16.50it/s] 88%|########8 | 23/26 [00:01<00:00, 16.71it/s] 96%|#########6| 25/26 [00:01<00:00, 16.91it/s]100%|##########| 26/26 [00:01<00:00, 14.88it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 884 400
penalty weights 10000.0
args.step pgd_anneal_iters 884 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 885 400
penalty weights 10000.0
args.step pgd_anneal_iters 885 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 886 400
penalty weights 10000.0
args.step pgd_anneal_iters 886 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 887 400
penalty weights 10000.0
args.step pgd_anneal_iters 887 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 888 400
penalty weights 10000.0
args.step pgd_anneal_iters 888 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 889 400
penalty weights 10000.0
args.step pgd_anneal_iters 889 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 890 400
penalty weights 10000.0
args.step pgd_anneal_iters 890 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 891 400
penalty weights 10000.0
args.step pgd_anneal_iters 891 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 892 400
penalty weights 10000.0
args.step pgd_anneal_iters 892 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 893 400
penalty weights 10000.0
args.step pgd_anneal_iters 893 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 894 400
penalty weights 10000.0
args.step pgd_anneal_iters 894 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 895 400
penalty weights 10000.0
args.step pgd_anneal_iters 895 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 896 400
penalty weights 10000.0
args.step pgd_anneal_iters 896 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 897 400
penalty weights 10000.0
args.step pgd_anneal_iters 897 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 898 400
penalty weights 10000.0
args.step pgd_anneal_iters 898 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 899 400
penalty weights 10000.0
args.step pgd_anneal_iters 899 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 900 400
penalty weights 10000.0
args.step pgd_anneal_iters 900 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 901 400
penalty weights 10000.0
args.step pgd_anneal_iters 901 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 902 400
penalty weights 10000.0
args.step pgd_anneal_iters 902 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 903 400
penalty weights 10000.0
args.step pgd_anneal_iters 903 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 904 400
penalty weights 10000.0
args.step pgd_anneal_iters 904 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 905 400
penalty weights 10000.0
args.step pgd_anneal_iters 905 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 906 400
penalty weights 10000.0
args.step pgd_anneal_iters 906 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 907 400
penalty weights 10000.0
args.step pgd_anneal_iters 907 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 908 400
penalty weights 10000.0
args.step pgd_anneal_iters 908 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 909 400
penalty weights 10000.0
args.step pgd_anneal_iters 909 600
dim_v 512
retunring when rho == dim_v - 1
Epoch: [34][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.19 (  0.19)	train_acc   0.58 (  0.51)	train_minacc   0.53 (  0.50)	train_majacc   0.58 (  0.52)	train_corr   0.00 (  0.00)	l1 17.0255 (17.0226)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 19.65it/s] 27%|##6       | 7/26 [00:00<00:00, 33.46it/s]                                               27%|##6       | 7/26 [00:00<00:00, 33.46it/s] 50%|#####     | 13/26 [00:00<00:00, 43.23it/s] 69%|######9   | 18/26 [00:00<00:00, 45.04it/s]                                                69%|######9   | 18/26 [00:00<00:00, 45.04it/s] 88%|########8 | 23/26 [00:00<00:00, 45.87it/s]100%|##########| 26/26 [00:00<00:00, 41.52it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.52 (  0.52)	test_minacc   0.51 (  0.51)	test_majacc   0.52 (  0.52)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.52 (  0.52)	test_corr_d   0.03 (  0.03)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.55 (  0.52)	test_minacc   0.55 (  0.49)	test_majacc   0.55 (  0.52)	Loss_d 0.693 (0.693)	test_acc_d   0.55 (  0.52)	test_minacc_d   0.55 (  0.49)	test_majacc_d   0.55 (  0.52)	test_corr_d   0.07 (  0.02)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.51 (  0.52)	test_minacc   0.36 (  0.50)	test_majacc   0.54 (  0.52)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.52)	test_minacc_d   0.36 (  0.50)	test_majacc_d   0.54 (  0.52)	test_corr_d   0.06 (  0.02)
Test: [  26/  26]	Loss 0.692 (0.693)	test_acc   0.58 (  0.52)	test_minacc   0.53 (  0.50)	test_majacc   0.58 (  0.52)	Loss_d 0.692 (0.693)	test_acc_d   0.58 (  0.52)	test_minacc_d   0.53 (  0.50)	test_majacc_d   0.58 (  0.52)	test_corr_d   0.14 (  0.02)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.92it/s]
Test: [  0/  1]	Loss 0.694 (0.694)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.51 (  0.51)	Loss_d 0.694 (0.694)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.51 (  0.51)	test_corr_d   0.20 (  0.20)
Test: [  1/  1]	Loss 0.694 (0.694)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.51 (  0.51)	Loss_d 0.694 (0.694)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.51 (  0.51)	test_corr_d   0.20 (  0.20)
Overall Timing[ 34/  1]	epoch_time 0.0496 (0.0396)	validation_time 0.0004 (0.0006)	train_time 0.0492 (0.0390)
record: (train_acc, test_acc) (0.6969000319242478, 0.6780000329017639)
last accs (train_acc, test_acc) (0.5151000105440616, 0.4970000088214874)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.33it/s] 12%|#1        | 3/26 [00:00<00:01, 12.09it/s] 19%|#9        | 5/26 [00:00<00:01, 14.43it/s] 27%|##6       | 7/26 [00:00<00:01, 15.64it/s] 35%|###4      | 9/26 [00:00<00:01, 16.36it/s] 42%|####2     | 11/26 [00:00<00:00, 16.54it/s] 50%|#####     | 13/26 [00:00<00:00, 16.73it/s] 58%|#####7    | 15/26 [00:00<00:00, 16.81it/s] 65%|######5   | 17/26 [00:01<00:00, 16.96it/s] 73%|#######3  | 19/26 [00:01<00:00, 17.09it/s] 81%|########  | 21/26 [00:01<00:00, 17.18it/s] 88%|########8 | 23/26 [00:01<00:00, 17.17it/s] 96%|#########6| 25/26 [00:01<00:00, 17.28it/s]100%|##########| 26/26 [00:01<00:00, 15.83it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 910 400
penalty weights 10000.0
args.step pgd_anneal_iters 910 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 911 400
penalty weights 10000.0
args.step pgd_anneal_iters 911 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 912 400
penalty weights 10000.0
args.step pgd_anneal_iters 912 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 913 400
penalty weights 10000.0
args.step pgd_anneal_iters 913 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 914 400
penalty weights 10000.0
args.step pgd_anneal_iters 914 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 915 400
penalty weights 10000.0
args.step pgd_anneal_iters 915 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 916 400
penalty weights 10000.0
args.step pgd_anneal_iters 916 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 917 400
penalty weights 10000.0
args.step pgd_anneal_iters 917 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 918 400
penalty weights 10000.0
args.step pgd_anneal_iters 918 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 919 400
penalty weights 10000.0
args.step pgd_anneal_iters 919 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 920 400
penalty weights 10000.0
args.step pgd_anneal_iters 920 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 921 400
penalty weights 10000.0
args.step pgd_anneal_iters 921 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 922 400
penalty weights 10000.0
args.step pgd_anneal_iters 922 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 923 400
penalty weights 10000.0
args.step pgd_anneal_iters 923 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 924 400
penalty weights 10000.0
args.step pgd_anneal_iters 924 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 925 400
penalty weights 10000.0
args.step pgd_anneal_iters 925 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 926 400
penalty weights 10000.0
args.step pgd_anneal_iters 926 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 927 400
penalty weights 10000.0
args.step pgd_anneal_iters 927 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 928 400
penalty weights 10000.0
args.step pgd_anneal_iters 928 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 929 400
penalty weights 10000.0
args.step pgd_anneal_iters 929 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 930 400
penalty weights 10000.0
args.step pgd_anneal_iters 930 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 931 400
penalty weights 10000.0
args.step pgd_anneal_iters 931 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 932 400
penalty weights 10000.0
args.step pgd_anneal_iters 932 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 933 400
penalty weights 10000.0
args.step pgd_anneal_iters 933 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 934 400
penalty weights 10000.0
args.step pgd_anneal_iters 934 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 935 400
penalty weights 10000.0
args.step pgd_anneal_iters 935 600
dim_v 512
retunring when rho == dim_v - 1
Epoch: [35][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.19 (  0.19)	train_acc   0.57 (  0.52)	train_minacc   0.53 (  0.50)	train_majacc   0.58 (  0.52)	train_corr   0.00 (  0.00)	l1 17.0308 (17.0281)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.40it/s] 27%|##6       | 7/26 [00:00<00:00, 35.05it/s]                                               27%|##6       | 7/26 [00:00<00:00, 35.05it/s] 50%|#####     | 13/26 [00:00<00:00, 40.84it/s] 73%|#######3  | 19/26 [00:00<00:00, 47.37it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 47.37it/s] 96%|#########6| 25/26 [00:00<00:00, 47.62it/s]100%|##########| 26/26 [00:00<00:00, 40.32it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.52 (  0.52)	test_minacc   0.51 (  0.51)	test_majacc   0.52 (  0.52)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.52 (  0.52)	test_corr_d   0.03 (  0.03)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.55 (  0.52)	test_minacc   0.55 (  0.49)	test_majacc   0.55 (  0.52)	Loss_d 0.693 (0.693)	test_acc_d   0.55 (  0.52)	test_minacc_d   0.55 (  0.49)	test_majacc_d   0.55 (  0.52)	test_corr_d   0.07 (  0.03)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.52 (  0.52)	test_minacc   0.36 (  0.50)	test_majacc   0.54 (  0.52)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.36 (  0.50)	test_majacc_d   0.54 (  0.52)	test_corr_d   0.06 (  0.03)
Test: [  26/  26]	Loss 0.692 (0.693)	test_acc   0.57 (  0.52)	test_minacc   0.53 (  0.50)	test_majacc   0.58 (  0.52)	Loss_d 0.692 (0.693)	test_acc_d   0.57 (  0.52)	test_minacc_d   0.53 (  0.50)	test_majacc_d   0.58 (  0.52)	test_corr_d   0.15 (  0.03)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 67.39it/s]
Test: [  0/  1]	Loss 0.694 (0.694)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.51 (  0.51)	Loss_d 0.694 (0.694)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.51 (  0.51)	test_corr_d   0.22 (  0.22)
Test: [  1/  1]	Loss 0.694 (0.694)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.51 (  0.51)	Loss_d 0.694 (0.694)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.51 (  0.51)	test_corr_d   0.22 (  0.22)
Overall Timing[ 35/  1]	epoch_time 0.0483 (0.0398)	validation_time 0.0003 (0.0006)	train_time 0.0479 (0.0392)
record: (train_acc, test_acc) (0.6969000319242478, 0.6780000329017639)
last accs (train_acc, test_acc) (0.5180000078380108, 0.4970000088214874)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.35it/s] 12%|#1        | 3/26 [00:00<00:01, 13.40it/s] 19%|#9        | 5/26 [00:00<00:01, 15.09it/s] 27%|##6       | 7/26 [00:00<00:01, 16.09it/s] 35%|###4      | 9/26 [00:00<00:01, 16.61it/s] 42%|####2     | 11/26 [00:00<00:00, 16.89it/s] 50%|#####     | 13/26 [00:00<00:00, 16.97it/s] 58%|#####7    | 15/26 [00:00<00:00, 17.14it/s] 65%|######5   | 17/26 [00:01<00:00, 17.21it/s] 73%|#######3  | 19/26 [00:01<00:00, 17.14it/s] 81%|########  | 21/26 [00:01<00:00, 17.18it/s] 88%|########8 | 23/26 [00:01<00:00, 17.32it/s] 96%|#########6| 25/26 [00:01<00:00, 17.39it/s]100%|##########| 26/26 [00:01<00:00, 16.18it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 936 400
penalty weights 10000.0
args.step pgd_anneal_iters 936 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 937 400
penalty weights 10000.0
args.step pgd_anneal_iters 937 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 938 400
penalty weights 10000.0
args.step pgd_anneal_iters 938 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 939 400
penalty weights 10000.0
args.step pgd_anneal_iters 939 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 940 400
penalty weights 10000.0
args.step pgd_anneal_iters 940 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 941 400
penalty weights 10000.0
args.step pgd_anneal_iters 941 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 942 400
penalty weights 10000.0
args.step pgd_anneal_iters 942 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 943 400
penalty weights 10000.0
args.step pgd_anneal_iters 943 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 944 400
penalty weights 10000.0
args.step pgd_anneal_iters 944 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 945 400
penalty weights 10000.0
args.step pgd_anneal_iters 945 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 946 400
penalty weights 10000.0
args.step pgd_anneal_iters 946 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 947 400
penalty weights 10000.0
args.step pgd_anneal_iters 947 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 948 400
penalty weights 10000.0
args.step pgd_anneal_iters 948 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 949 400
penalty weights 10000.0
args.step pgd_anneal_iters 949 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 950 400
penalty weights 10000.0
args.step pgd_anneal_iters 950 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 951 400
penalty weights 10000.0
args.step pgd_anneal_iters 951 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 952 400
penalty weights 10000.0
args.step pgd_anneal_iters 952 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 953 400
penalty weights 10000.0
args.step pgd_anneal_iters 953 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 954 400
penalty weights 10000.0
args.step pgd_anneal_iters 954 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 955 400
penalty weights 10000.0
args.step pgd_anneal_iters 955 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 956 400
penalty weights 10000.0
args.step pgd_anneal_iters 956 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 957 400
penalty weights 10000.0
args.step pgd_anneal_iters 957 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 958 400
penalty weights 10000.0
args.step pgd_anneal_iters 958 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 959 400
penalty weights 10000.0
args.step pgd_anneal_iters 959 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 960 400
penalty weights 10000.0
args.step pgd_anneal_iters 960 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 961 400
penalty weights 10000.0
args.step pgd_anneal_iters 961 600
dim_v 512
retunring when rho == dim_v - 1
Epoch: [36][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.19 (  0.19)	train_acc   0.58 (  0.52)	train_minacc   0.53 (  0.50)	train_majacc   0.58 (  0.52)	train_corr   0.00 (  0.00)	l1 17.0356 (17.0332)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 18.15it/s] 31%|###       | 8/26 [00:00<00:00, 40.42it/s]                                               31%|###       | 8/26 [00:00<00:00, 40.42it/s] 50%|#####     | 13/26 [00:00<00:00, 42.25it/s] 73%|#######3  | 19/26 [00:00<00:00, 47.89it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 47.89it/s] 96%|#########6| 25/26 [00:00<00:00, 48.44it/s]100%|##########| 26/26 [00:00<00:00, 41.71it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.52 (  0.52)	test_minacc   0.51 (  0.51)	test_majacc   0.52 (  0.52)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.52 (  0.52)	test_corr_d   0.04 (  0.04)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.55 (  0.52)	test_minacc   0.55 (  0.49)	test_majacc   0.55 (  0.53)	Loss_d 0.693 (0.693)	test_acc_d   0.55 (  0.52)	test_minacc_d   0.55 (  0.49)	test_majacc_d   0.55 (  0.53)	test_corr_d   0.08 (  0.03)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.52 (  0.52)	test_minacc   0.36 (  0.50)	test_majacc   0.54 (  0.52)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.36 (  0.50)	test_majacc_d   0.54 (  0.52)	test_corr_d   0.07 (  0.03)
Test: [  26/  26]	Loss 0.692 (0.693)	test_acc   0.58 (  0.52)	test_minacc   0.53 (  0.50)	test_majacc   0.58 (  0.52)	Loss_d 0.692 (0.693)	test_acc_d   0.58 (  0.52)	test_minacc_d   0.53 (  0.50)	test_majacc_d   0.58 (  0.52)	test_corr_d   0.15 (  0.03)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 64.49it/s]
Test: [  0/  1]	Loss 0.694 (0.694)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.51 (  0.51)	Loss_d 0.694 (0.694)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.51 (  0.51)	test_corr_d   0.23 (  0.23)
Test: [  1/  1]	Loss 0.694 (0.694)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.51 (  0.51)	Loss_d 0.694 (0.694)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.51 (  0.51)	test_corr_d   0.23 (  0.23)
Overall Timing[ 36/  1]	epoch_time 0.0489 (0.0401)	validation_time 0.0004 (0.0006)	train_time 0.0485 (0.0395)
record: (train_acc, test_acc) (0.6969000319242478, 0.6780000329017639)
last accs (train_acc, test_acc) (0.5200000114142894, 0.4970000088214874)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:05,  4.66it/s] 12%|#1        | 3/26 [00:00<00:02,  9.77it/s] 19%|#9        | 5/26 [00:00<00:01, 12.62it/s] 27%|##6       | 7/26 [00:00<00:01, 14.01it/s] 35%|###4      | 9/26 [00:00<00:01, 14.99it/s] 42%|####2     | 11/26 [00:00<00:00, 15.51it/s] 50%|#####     | 13/26 [00:00<00:00, 15.76it/s] 58%|#####7    | 15/26 [00:01<00:00, 16.07it/s] 65%|######5   | 17/26 [00:01<00:00, 16.43it/s] 73%|#######3  | 19/26 [00:01<00:00, 16.56it/s] 81%|########  | 21/26 [00:01<00:00, 16.63it/s] 88%|########8 | 23/26 [00:01<00:00, 16.78it/s] 96%|#########6| 25/26 [00:01<00:00, 16.93it/s]100%|##########| 26/26 [00:01<00:00, 14.81it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 962 400
penalty weights 10000.0
args.step pgd_anneal_iters 962 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 963 400
penalty weights 10000.0
args.step pgd_anneal_iters 963 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 964 400
penalty weights 10000.0
args.step pgd_anneal_iters 964 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 965 400
penalty weights 10000.0
args.step pgd_anneal_iters 965 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 966 400
penalty weights 10000.0
args.step pgd_anneal_iters 966 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 967 400
penalty weights 10000.0
args.step pgd_anneal_iters 967 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 968 400
penalty weights 10000.0
args.step pgd_anneal_iters 968 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 969 400
penalty weights 10000.0
args.step pgd_anneal_iters 969 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 970 400
penalty weights 10000.0
args.step pgd_anneal_iters 970 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 971 400
penalty weights 10000.0
args.step pgd_anneal_iters 971 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 972 400
penalty weights 10000.0
args.step pgd_anneal_iters 972 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 973 400
penalty weights 10000.0
args.step pgd_anneal_iters 973 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 974 400
penalty weights 10000.0
args.step pgd_anneal_iters 974 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 975 400
penalty weights 10000.0
args.step pgd_anneal_iters 975 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 976 400
penalty weights 10000.0
args.step pgd_anneal_iters 976 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 977 400
penalty weights 10000.0
args.step pgd_anneal_iters 977 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 978 400
penalty weights 10000.0
args.step pgd_anneal_iters 978 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 979 400
penalty weights 10000.0
args.step pgd_anneal_iters 979 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 980 400
penalty weights 10000.0
args.step pgd_anneal_iters 980 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 981 400
penalty weights 10000.0
args.step pgd_anneal_iters 981 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 982 400
penalty weights 10000.0
args.step pgd_anneal_iters 982 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 983 400
penalty weights 10000.0
args.step pgd_anneal_iters 983 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 984 400
penalty weights 10000.0
args.step pgd_anneal_iters 984 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 985 400
penalty weights 10000.0
args.step pgd_anneal_iters 985 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 986 400
penalty weights 10000.0
args.step pgd_anneal_iters 986 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 987 400
penalty weights 10000.0
args.step pgd_anneal_iters 987 600
dim_v 512
retunring when rho == dim_v - 1
Epoch: [37][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.19 (  0.19)	train_acc   0.58 (  0.52)	train_minacc   0.53 (  0.50)	train_majacc   0.59 (  0.53)	train_corr   0.00 (  0.00)	l1 17.0401 (17.0378)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.94it/s] 27%|##6       | 7/26 [00:00<00:00, 39.17it/s]                                               27%|##6       | 7/26 [00:00<00:00, 39.17it/s] 46%|####6     | 12/26 [00:00<00:00, 43.21it/s] 69%|######9   | 18/26 [00:00<00:00, 46.32it/s]                                                69%|######9   | 18/26 [00:00<00:00, 46.32it/s] 92%|#########2| 24/26 [00:00<00:00, 50.57it/s]100%|##########| 26/26 [00:00<00:00, 42.30it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.52 (  0.52)	test_minacc   0.51 (  0.51)	test_majacc   0.52 (  0.52)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.52 (  0.52)	test_corr_d   0.04 (  0.04)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.55 (  0.53)	test_minacc   0.55 (  0.49)	test_majacc   0.56 (  0.53)	Loss_d 0.693 (0.693)	test_acc_d   0.55 (  0.53)	test_minacc_d   0.55 (  0.49)	test_majacc_d   0.56 (  0.53)	test_corr_d   0.09 (  0.04)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.52 (  0.52)	test_minacc   0.36 (  0.50)	test_majacc   0.55 (  0.53)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.36 (  0.50)	test_majacc_d   0.55 (  0.53)	test_corr_d   0.07 (  0.04)
Test: [  26/  26]	Loss 0.692 (0.693)	test_acc   0.58 (  0.52)	test_minacc   0.53 (  0.50)	test_majacc   0.59 (  0.53)	Loss_d 0.692 (0.693)	test_acc_d   0.58 (  0.52)	test_minacc_d   0.53 (  0.50)	test_majacc_d   0.59 (  0.53)	test_corr_d   0.16 (  0.04)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 67.23it/s]
Test: [  0/  1]	Loss 0.694 (0.694)	test_acc   0.50 (  0.50)	test_minacc   0.49 (  0.49)	test_majacc   0.52 (  0.52)	Loss_d 0.694 (0.694)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.49 (  0.49)	test_majacc_d   0.52 (  0.52)	test_corr_d   0.25 (  0.25)
Test: [  1/  1]	Loss 0.694 (0.694)	test_acc   0.50 (  0.50)	test_minacc   0.49 (  0.49)	test_majacc   0.52 (  0.52)	Loss_d 0.694 (0.694)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.49 (  0.49)	test_majacc_d   0.52 (  0.52)	test_corr_d   0.25 (  0.25)
Overall Timing[ 37/  1]	epoch_time 0.0481 (0.0403)	validation_time 0.0004 (0.0005)	train_time 0.0477 (0.0397)
record: (train_acc, test_acc) (0.6969000319242478, 0.6780000329017639)
last accs (train_acc, test_acc) (0.5232000149190426, 0.4970000088214874)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.90it/s] 12%|#1        | 3/26 [00:00<00:01, 12.00it/s] 19%|#9        | 5/26 [00:00<00:01, 14.08it/s] 27%|##6       | 7/26 [00:00<00:01, 15.06it/s] 35%|###4      | 9/26 [00:00<00:01, 15.91it/s] 42%|####2     | 11/26 [00:00<00:00, 16.41it/s] 50%|#####     | 13/26 [00:00<00:00, 16.83it/s] 58%|#####7    | 15/26 [00:00<00:00, 17.06it/s] 65%|######5   | 17/26 [00:01<00:00, 17.24it/s] 73%|#######3  | 19/26 [00:01<00:00, 17.39it/s] 81%|########  | 21/26 [00:01<00:00, 17.21it/s] 88%|########8 | 23/26 [00:01<00:00, 17.17it/s] 96%|#########6| 25/26 [00:01<00:00, 17.13it/s]100%|##########| 26/26 [00:01<00:00, 15.70it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 988 400
penalty weights 10000.0
args.step pgd_anneal_iters 988 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 989 400
penalty weights 10000.0
args.step pgd_anneal_iters 989 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 990 400
penalty weights 10000.0
args.step pgd_anneal_iters 990 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 991 400
penalty weights 10000.0
args.step pgd_anneal_iters 991 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 992 400
penalty weights 10000.0
args.step pgd_anneal_iters 992 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 993 400
penalty weights 10000.0
args.step pgd_anneal_iters 993 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 994 400
penalty weights 10000.0
args.step pgd_anneal_iters 994 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 995 400
penalty weights 10000.0
args.step pgd_anneal_iters 995 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 996 400
penalty weights 10000.0
args.step pgd_anneal_iters 996 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 997 400
penalty weights 10000.0
args.step pgd_anneal_iters 997 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 998 400
penalty weights 10000.0
args.step pgd_anneal_iters 998 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 999 400
penalty weights 10000.0
args.step pgd_anneal_iters 999 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1000 400
penalty weights 10000.0
args.step pgd_anneal_iters 1000 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1001 400
penalty weights 10000.0
args.step pgd_anneal_iters 1001 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1002 400
penalty weights 10000.0
args.step pgd_anneal_iters 1002 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1003 400
penalty weights 10000.0
args.step pgd_anneal_iters 1003 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1004 400
penalty weights 10000.0
args.step pgd_anneal_iters 1004 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1005 400
penalty weights 10000.0
args.step pgd_anneal_iters 1005 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1006 400
penalty weights 10000.0
args.step pgd_anneal_iters 1006 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1007 400
penalty weights 10000.0
args.step pgd_anneal_iters 1007 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1008 400
penalty weights 10000.0
args.step pgd_anneal_iters 1008 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1009 400
penalty weights 10000.0
args.step pgd_anneal_iters 1009 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1010 400
penalty weights 10000.0
args.step pgd_anneal_iters 1010 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1011 400
penalty weights 10000.0
args.step pgd_anneal_iters 1011 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1012 400
penalty weights 10000.0
args.step pgd_anneal_iters 1012 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1013 400
penalty weights 10000.0
args.step pgd_anneal_iters 1013 600
dim_v 512
retunring when rho == dim_v - 1
Epoch: [38][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.19 (  0.19)	train_acc   0.59 (  0.52)	train_minacc   0.53 (  0.50)	train_majacc   0.60 (  0.53)	train_corr   0.00 (  0.00)	l1 17.0441 (17.0421)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.54it/s] 27%|##6       | 7/26 [00:00<00:00, 29.11it/s]                                               27%|##6       | 7/26 [00:00<00:00, 29.11it/s] 50%|#####     | 13/26 [00:00<00:00, 37.28it/s] 73%|#######3  | 19/26 [00:00<00:00, 44.49it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 44.49it/s] 96%|#########6| 25/26 [00:00<00:00, 46.12it/s]100%|##########| 26/26 [00:00<00:00, 36.80it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.52 (  0.52)	test_minacc   0.51 (  0.51)	test_majacc   0.52 (  0.52)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.52 (  0.52)	test_corr_d   0.04 (  0.04)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.56 (  0.53)	test_minacc   0.55 (  0.49)	test_majacc   0.56 (  0.54)	Loss_d 0.693 (0.693)	test_acc_d   0.56 (  0.53)	test_minacc_d   0.55 (  0.49)	test_majacc_d   0.56 (  0.54)	test_corr_d   0.09 (  0.04)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.52 (  0.53)	test_minacc   0.36 (  0.50)	test_majacc   0.55 (  0.53)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.53)	test_minacc_d   0.36 (  0.50)	test_majacc_d   0.55 (  0.53)	test_corr_d   0.07 (  0.04)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.59 (  0.53)	test_minacc   0.53 (  0.50)	test_majacc   0.60 (  0.53)	Loss_d 0.693 (0.693)	test_acc_d   0.59 (  0.53)	test_minacc_d   0.53 (  0.50)	test_majacc_d   0.60 (  0.53)	test_corr_d   0.16 (  0.04)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 67.34it/s]
Test: [  0/  1]	Loss 0.694 (0.694)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.52 (  0.52)	Loss_d 0.694 (0.694)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.52 (  0.52)	test_corr_d   0.26 (  0.26)
Test: [  1/  1]	Loss 0.694 (0.694)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.52 (  0.52)	Loss_d 0.694 (0.694)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.52 (  0.52)	test_corr_d   0.26 (  0.26)
Overall Timing[ 38/  1]	epoch_time 0.0483 (0.0405)	validation_time 0.0003 (0.0005)	train_time 0.0479 (0.0399)
record: (train_acc, test_acc) (0.6969000319242478, 0.6780000329017639)
last accs (train_acc, test_acc) (0.5257000067234039, 0.49800002574920654)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.31it/s] 12%|#1        | 3/26 [00:00<00:02, 10.25it/s] 19%|#9        | 5/26 [00:00<00:01, 12.78it/s] 27%|##6       | 7/26 [00:00<00:01, 14.39it/s] 35%|###4      | 9/26 [00:00<00:01, 15.42it/s] 42%|####2     | 11/26 [00:00<00:00, 16.03it/s] 50%|#####     | 13/26 [00:00<00:00, 16.41it/s] 58%|#####7    | 15/26 [00:01<00:00, 16.64it/s] 65%|######5   | 17/26 [00:01<00:00, 16.89it/s] 73%|#######3  | 19/26 [00:01<00:00, 17.14it/s] 81%|########  | 21/26 [00:01<00:00, 17.26it/s] 88%|########8 | 23/26 [00:01<00:00, 17.38it/s] 96%|#########6| 25/26 [00:01<00:00, 17.41it/s]100%|##########| 26/26 [00:01<00:00, 15.42it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1014 400
penalty weights 10000.0
args.step pgd_anneal_iters 1014 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1015 400
penalty weights 10000.0
args.step pgd_anneal_iters 1015 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1016 400
penalty weights 10000.0
args.step pgd_anneal_iters 1016 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1017 400
penalty weights 10000.0
args.step pgd_anneal_iters 1017 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1018 400
penalty weights 10000.0
args.step pgd_anneal_iters 1018 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1019 400
penalty weights 10000.0
args.step pgd_anneal_iters 1019 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1020 400
penalty weights 10000.0
args.step pgd_anneal_iters 1020 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1021 400
penalty weights 10000.0
args.step pgd_anneal_iters 1021 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1022 400
penalty weights 10000.0
args.step pgd_anneal_iters 1022 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1023 400
penalty weights 10000.0
args.step pgd_anneal_iters 1023 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1024 400
penalty weights 10000.0
args.step pgd_anneal_iters 1024 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1025 400
penalty weights 10000.0
args.step pgd_anneal_iters 1025 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1026 400
penalty weights 10000.0
args.step pgd_anneal_iters 1026 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1027 400
penalty weights 10000.0
args.step pgd_anneal_iters 1027 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1028 400
penalty weights 10000.0
args.step pgd_anneal_iters 1028 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1029 400
penalty weights 10000.0
args.step pgd_anneal_iters 1029 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1030 400
penalty weights 10000.0
args.step pgd_anneal_iters 1030 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1031 400
penalty weights 10000.0
args.step pgd_anneal_iters 1031 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1032 400
penalty weights 10000.0
args.step pgd_anneal_iters 1032 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1033 400
penalty weights 10000.0
args.step pgd_anneal_iters 1033 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1034 400
penalty weights 10000.0
args.step pgd_anneal_iters 1034 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1035 400
penalty weights 10000.0
args.step pgd_anneal_iters 1035 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1036 400
penalty weights 10000.0
args.step pgd_anneal_iters 1036 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1037 400
penalty weights 10000.0
args.step pgd_anneal_iters 1037 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1038 400
penalty weights 10000.0
args.step pgd_anneal_iters 1038 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1039 400
penalty weights 10000.0
args.step pgd_anneal_iters 1039 600
dim_v 512
retunring when rho == dim_v - 1
Epoch: [39][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.19 (  0.19)	train_acc   0.59 (  0.53)	train_minacc   0.53 (  0.50)	train_majacc   0.60 (  0.53)	train_corr   0.00 (  0.00)	l1 17.0477 (17.0459)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.79it/s] 27%|##6       | 7/26 [00:00<00:00, 34.42it/s]                                               27%|##6       | 7/26 [00:00<00:00, 34.42it/s] 50%|#####     | 13/26 [00:00<00:00, 41.54it/s] 73%|#######3  | 19/26 [00:00<00:00, 47.08it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 47.08it/s] 96%|#########6| 25/26 [00:00<00:00, 47.58it/s]100%|##########| 26/26 [00:00<00:00, 40.11it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.52 (  0.52)	test_minacc   0.51 (  0.51)	test_majacc   0.53 (  0.53)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.53 (  0.53)	test_corr_d   0.05 (  0.05)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.56 (  0.53)	test_minacc   0.55 (  0.49)	test_majacc   0.56 (  0.54)	Loss_d 0.693 (0.693)	test_acc_d   0.56 (  0.53)	test_minacc_d   0.55 (  0.49)	test_majacc_d   0.56 (  0.54)	test_corr_d   0.09 (  0.04)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.53 (  0.53)	test_minacc   0.36 (  0.50)	test_majacc   0.56 (  0.54)	Loss_d 0.693 (0.693)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.36 (  0.50)	test_majacc_d   0.56 (  0.54)	test_corr_d   0.08 (  0.05)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.59 (  0.53)	test_minacc   0.53 (  0.50)	test_majacc   0.60 (  0.53)	Loss_d 0.693 (0.693)	test_acc_d   0.59 (  0.53)	test_minacc_d   0.53 (  0.50)	test_majacc_d   0.60 (  0.53)	test_corr_d   0.17 (  0.05)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.58it/s]
Test: [  0/  1]	Loss 0.694 (0.694)	test_acc   0.50 (  0.50)	test_minacc   0.49 (  0.49)	test_majacc   0.52 (  0.52)	Loss_d 0.694 (0.694)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.49 (  0.49)	test_majacc_d   0.52 (  0.52)	test_corr_d   0.27 (  0.27)
Test: [  1/  1]	Loss 0.694 (0.694)	test_acc   0.50 (  0.50)	test_minacc   0.49 (  0.49)	test_majacc   0.52 (  0.52)	Loss_d 0.694 (0.694)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.49 (  0.49)	test_majacc_d   0.52 (  0.52)	test_corr_d   0.27 (  0.27)
Overall Timing[ 39/  1]	epoch_time 0.0489 (0.0407)	validation_time 0.0004 (0.0005)	train_time 0.0485 (0.0401)
record: (train_acc, test_acc) (0.6969000319242478, 0.6780000329017639)
last accs (train_acc, test_acc) (0.5288000146746635, 0.4970000088214874)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  6.05it/s] 12%|#1        | 3/26 [00:00<00:01, 11.51it/s] 19%|#9        | 5/26 [00:00<00:01, 14.03it/s] 27%|##6       | 7/26 [00:00<00:01, 15.40it/s] 35%|###4      | 9/26 [00:00<00:01, 16.21it/s] 42%|####2     | 11/26 [00:00<00:00, 16.61it/s] 50%|#####     | 13/26 [00:00<00:00, 17.04it/s] 58%|#####7    | 15/26 [00:00<00:00, 17.24it/s] 65%|######5   | 17/26 [00:01<00:00, 17.47it/s] 73%|#######3  | 19/26 [00:01<00:00, 17.55it/s] 81%|########  | 21/26 [00:01<00:00, 17.46it/s] 88%|########8 | 23/26 [00:01<00:00, 17.42it/s] 96%|#########6| 25/26 [00:01<00:00, 17.41it/s]100%|##########| 26/26 [00:01<00:00, 15.85it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1040 400
penalty weights 10000.0
args.step pgd_anneal_iters 1040 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1041 400
penalty weights 10000.0
args.step pgd_anneal_iters 1041 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1042 400
penalty weights 10000.0
args.step pgd_anneal_iters 1042 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1043 400
penalty weights 10000.0
args.step pgd_anneal_iters 1043 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1044 400
penalty weights 10000.0
args.step pgd_anneal_iters 1044 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1045 400
penalty weights 10000.0
args.step pgd_anneal_iters 1045 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1046 400
penalty weights 10000.0
args.step pgd_anneal_iters 1046 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1047 400
penalty weights 10000.0
args.step pgd_anneal_iters 1047 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1048 400
penalty weights 10000.0
args.step pgd_anneal_iters 1048 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1049 400
penalty weights 10000.0
args.step pgd_anneal_iters 1049 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1050 400
penalty weights 10000.0
args.step pgd_anneal_iters 1050 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1051 400
penalty weights 10000.0
args.step pgd_anneal_iters 1051 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1052 400
penalty weights 10000.0
args.step pgd_anneal_iters 1052 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1053 400
penalty weights 10000.0
args.step pgd_anneal_iters 1053 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1054 400
penalty weights 10000.0
args.step pgd_anneal_iters 1054 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1055 400
penalty weights 10000.0
args.step pgd_anneal_iters 1055 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1056 400
penalty weights 10000.0
args.step pgd_anneal_iters 1056 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1057 400
penalty weights 10000.0
args.step pgd_anneal_iters 1057 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1058 400
penalty weights 10000.0
args.step pgd_anneal_iters 1058 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1059 400
penalty weights 10000.0
args.step pgd_anneal_iters 1059 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1060 400
penalty weights 10000.0
args.step pgd_anneal_iters 1060 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1061 400
penalty weights 10000.0
args.step pgd_anneal_iters 1061 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1062 400
penalty weights 10000.0
args.step pgd_anneal_iters 1062 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1063 400
penalty weights 10000.0
args.step pgd_anneal_iters 1063 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1064 400
penalty weights 10000.0
args.step pgd_anneal_iters 1064 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1065 400
penalty weights 10000.0
args.step pgd_anneal_iters 1065 600
dim_v 512
retunring when rho == dim_v - 1
Epoch: [40][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.19 (  0.19)	train_acc   0.59 (  0.53)	train_minacc   0.53 (  0.50)	train_majacc   0.60 (  0.54)	train_corr   0.00 (  0.00)	l1 17.0511 (17.0494)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:00, 26.83it/s] 35%|###4      | 9/26 [00:00<00:00, 40.77it/s]                                               35%|###4      | 9/26 [00:00<00:00, 40.77it/s] 58%|#####7    | 15/26 [00:00<00:00, 46.69it/s]                                                58%|#####7    | 15/26 [00:00<00:00, 46.69it/s] 81%|########  | 21/26 [00:00<00:00, 48.45it/s]100%|##########| 26/26 [00:00<00:00, 43.01it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.53 (  0.53)	test_minacc   0.51 (  0.51)	test_majacc   0.53 (  0.53)	Loss_d 0.693 (0.693)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.53 (  0.53)	test_corr_d   0.05 (  0.05)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.57 (  0.53)	test_minacc   0.55 (  0.49)	test_majacc   0.57 (  0.54)	Loss_d 0.693 (0.693)	test_acc_d   0.57 (  0.53)	test_minacc_d   0.55 (  0.49)	test_majacc_d   0.57 (  0.54)	test_corr_d   0.10 (  0.05)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.53 (  0.53)	test_minacc   0.36 (  0.50)	test_majacc   0.56 (  0.54)	Loss_d 0.693 (0.693)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.36 (  0.50)	test_majacc_d   0.56 (  0.54)	test_corr_d   0.08 (  0.05)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.59 (  0.53)	test_minacc   0.53 (  0.50)	test_majacc   0.60 (  0.54)	Loss_d 0.693 (0.693)	test_acc_d   0.59 (  0.53)	test_minacc_d   0.53 (  0.50)	test_majacc_d   0.60 (  0.54)	test_corr_d   0.17 (  0.05)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 64.04it/s]
Test: [  0/  1]	Loss 0.694 (0.694)	test_acc   0.50 (  0.50)	test_minacc   0.49 (  0.49)	test_majacc   0.52 (  0.52)	Loss_d 0.694 (0.694)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.49 (  0.49)	test_majacc_d   0.52 (  0.52)	test_corr_d   0.28 (  0.28)
Test: [  1/  1]	Loss 0.694 (0.694)	test_acc   0.50 (  0.50)	test_minacc   0.49 (  0.49)	test_majacc   0.52 (  0.52)	Loss_d 0.694 (0.694)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.49 (  0.49)	test_majacc_d   0.52 (  0.52)	test_corr_d   0.28 (  0.28)
Overall Timing[ 40/  1]	epoch_time 0.0475 (0.0409)	validation_time 0.0004 (0.0005)	train_time 0.0471 (0.0403)
record: (train_acc, test_acc) (0.6969000319242478, 0.6780000329017639)
last accs (train_acc, test_acc) (0.5319000156521797, 0.4960000216960907)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.58it/s] 12%|#1        | 3/26 [00:00<00:01, 12.64it/s] 19%|#9        | 5/26 [00:00<00:01, 14.66it/s] 27%|##6       | 7/26 [00:00<00:01, 15.77it/s] 35%|###4      | 9/26 [00:00<00:01, 16.39it/s] 42%|####2     | 11/26 [00:00<00:00, 16.71it/s] 50%|#####     | 13/26 [00:00<00:00, 17.07it/s] 58%|#####7    | 15/26 [00:00<00:00, 17.31it/s] 65%|######5   | 17/26 [00:01<00:00, 17.52it/s] 73%|#######3  | 19/26 [00:01<00:00, 17.65it/s] 81%|########  | 21/26 [00:01<00:00, 17.71it/s] 88%|########8 | 23/26 [00:01<00:00, 17.84it/s] 96%|#########6| 25/26 [00:01<00:00, 17.84it/s]100%|##########| 26/26 [00:01<00:00, 16.26it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1066 400
penalty weights 10000.0
args.step pgd_anneal_iters 1066 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1067 400
penalty weights 10000.0
args.step pgd_anneal_iters 1067 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1068 400
penalty weights 10000.0
args.step pgd_anneal_iters 1068 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1069 400
penalty weights 10000.0
args.step pgd_anneal_iters 1069 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1070 400
penalty weights 10000.0
args.step pgd_anneal_iters 1070 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1071 400
penalty weights 10000.0
args.step pgd_anneal_iters 1071 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1072 400
penalty weights 10000.0
args.step pgd_anneal_iters 1072 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1073 400
penalty weights 10000.0
args.step pgd_anneal_iters 1073 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1074 400
penalty weights 10000.0
args.step pgd_anneal_iters 1074 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1075 400
penalty weights 10000.0
args.step pgd_anneal_iters 1075 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1076 400
penalty weights 10000.0
args.step pgd_anneal_iters 1076 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1077 400
penalty weights 10000.0
args.step pgd_anneal_iters 1077 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1078 400
penalty weights 10000.0
args.step pgd_anneal_iters 1078 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1079 400
penalty weights 10000.0
args.step pgd_anneal_iters 1079 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1080 400
penalty weights 10000.0
args.step pgd_anneal_iters 1080 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1081 400
penalty weights 10000.0
args.step pgd_anneal_iters 1081 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1082 400
penalty weights 10000.0
args.step pgd_anneal_iters 1082 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1083 400
penalty weights 10000.0
args.step pgd_anneal_iters 1083 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1084 400
penalty weights 10000.0
args.step pgd_anneal_iters 1084 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1085 400
penalty weights 10000.0
args.step pgd_anneal_iters 1085 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1086 400
penalty weights 10000.0
args.step pgd_anneal_iters 1086 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1087 400
penalty weights 10000.0
args.step pgd_anneal_iters 1087 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1088 400
penalty weights 10000.0
args.step pgd_anneal_iters 1088 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1089 400
penalty weights 10000.0
args.step pgd_anneal_iters 1089 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1090 400
penalty weights 10000.0
args.step pgd_anneal_iters 1090 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1091 400
penalty weights 10000.0
args.step pgd_anneal_iters 1091 600
dim_v 512
retunring when rho == dim_v - 1
Epoch: [41][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.19 (  0.19)	train_acc   0.60 (  0.53)	train_minacc   0.53 (  0.50)	train_majacc   0.61 (  0.54)	train_corr   0.00 (  0.00)	l1 17.0541 (17.0525)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  6.06it/s] 27%|##6       | 7/26 [00:00<00:00, 31.01it/s]                                               27%|##6       | 7/26 [00:00<00:00, 31.01it/s] 50%|#####     | 13/26 [00:00<00:00, 38.67it/s] 73%|#######3  | 19/26 [00:00<00:00, 45.42it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 45.42it/s] 96%|#########6| 25/26 [00:00<00:00, 46.38it/s]100%|##########| 26/26 [00:00<00:00, 37.66it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.53 (  0.53)	test_minacc   0.51 (  0.51)	test_majacc   0.53 (  0.53)	Loss_d 0.693 (0.693)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.53 (  0.53)	test_corr_d   0.05 (  0.05)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.57 (  0.54)	test_minacc   0.56 (  0.49)	test_majacc   0.57 (  0.54)	Loss_d 0.693 (0.693)	test_acc_d   0.57 (  0.54)	test_minacc_d   0.56 (  0.49)	test_majacc_d   0.57 (  0.54)	test_corr_d   0.10 (  0.05)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.52 (  0.54)	test_minacc   0.36 (  0.50)	test_majacc   0.55 (  0.54)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.54)	test_minacc_d   0.36 (  0.50)	test_majacc_d   0.55 (  0.54)	test_corr_d   0.09 (  0.05)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.60 (  0.53)	test_minacc   0.53 (  0.50)	test_majacc   0.61 (  0.54)	Loss_d 0.693 (0.693)	test_acc_d   0.60 (  0.53)	test_minacc_d   0.53 (  0.50)	test_majacc_d   0.61 (  0.54)	test_corr_d   0.17 (  0.05)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 67.35it/s]
Test: [  0/  1]	Loss 0.694 (0.694)	test_acc   0.49 (  0.49)	test_minacc   0.49 (  0.49)	test_majacc   0.51 (  0.51)	Loss_d 0.694 (0.694)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.49 (  0.49)	test_majacc_d   0.51 (  0.51)	test_corr_d   0.28 (  0.28)
Test: [  1/  1]	Loss 0.694 (0.694)	test_acc   0.49 (  0.49)	test_minacc   0.49 (  0.49)	test_majacc   0.51 (  0.51)	Loss_d 0.694 (0.694)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.49 (  0.49)	test_majacc_d   0.51 (  0.51)	test_corr_d   0.28 (  0.28)
Overall Timing[ 41/  1]	epoch_time 0.0501 (0.0411)	validation_time 0.0004 (0.0005)	train_time 0.0498 (0.0405)
record: (train_acc, test_acc) (0.6969000319242478, 0.6780000329017639)
last accs (train_acc, test_acc) (0.5345000161230564, 0.49400001764297485)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:05,  4.41it/s] 12%|#1        | 3/26 [00:00<00:02,  9.58it/s] 19%|#9        | 5/26 [00:00<00:01, 12.45it/s] 27%|##6       | 7/26 [00:00<00:01, 14.18it/s] 35%|###4      | 9/26 [00:00<00:01, 15.20it/s] 42%|####2     | 11/26 [00:00<00:00, 15.92it/s] 50%|#####     | 13/26 [00:00<00:00, 16.09it/s] 58%|#####7    | 15/26 [00:01<00:00, 16.66it/s] 65%|######5   | 17/26 [00:01<00:00, 16.94it/s] 73%|#######3  | 19/26 [00:01<00:00, 17.27it/s] 81%|########  | 21/26 [00:01<00:00, 17.32it/s] 88%|########8 | 23/26 [00:01<00:00, 17.44it/s] 96%|#########6| 25/26 [00:01<00:00, 17.56it/s]100%|##########| 26/26 [00:01<00:00, 15.22it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1092 400
penalty weights 10000.0
args.step pgd_anneal_iters 1092 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1093 400
penalty weights 10000.0
args.step pgd_anneal_iters 1093 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1094 400
penalty weights 10000.0
args.step pgd_anneal_iters 1094 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1095 400
penalty weights 10000.0
args.step pgd_anneal_iters 1095 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1096 400
penalty weights 10000.0
args.step pgd_anneal_iters 1096 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1097 400
penalty weights 10000.0
args.step pgd_anneal_iters 1097 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1098 400
penalty weights 10000.0
args.step pgd_anneal_iters 1098 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1099 400
penalty weights 10000.0
args.step pgd_anneal_iters 1099 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1100 400
penalty weights 10000.0
args.step pgd_anneal_iters 1100 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1101 400
penalty weights 10000.0
args.step pgd_anneal_iters 1101 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1102 400
penalty weights 10000.0
args.step pgd_anneal_iters 1102 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1103 400
penalty weights 10000.0
args.step pgd_anneal_iters 1103 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1104 400
penalty weights 10000.0
args.step pgd_anneal_iters 1104 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1105 400
penalty weights 10000.0
args.step pgd_anneal_iters 1105 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1106 400
penalty weights 10000.0
args.step pgd_anneal_iters 1106 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1107 400
penalty weights 10000.0
args.step pgd_anneal_iters 1107 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1108 400
penalty weights 10000.0
args.step pgd_anneal_iters 1108 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1109 400
penalty weights 10000.0
args.step pgd_anneal_iters 1109 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1110 400
penalty weights 10000.0
args.step pgd_anneal_iters 1110 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1111 400
penalty weights 10000.0
args.step pgd_anneal_iters 1111 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1112 400
penalty weights 10000.0
args.step pgd_anneal_iters 1112 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1113 400
penalty weights 10000.0
args.step pgd_anneal_iters 1113 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1114 400
penalty weights 10000.0
args.step pgd_anneal_iters 1114 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1115 400
penalty weights 10000.0
args.step pgd_anneal_iters 1115 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1116 400
penalty weights 10000.0
args.step pgd_anneal_iters 1116 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1117 400
penalty weights 10000.0
args.step pgd_anneal_iters 1117 600
dim_v 512
retunring when rho == dim_v - 1
Epoch: [42][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.19 (  0.19)	train_acc   0.60 (  0.54)	train_minacc   0.53 (  0.50)	train_majacc   0.62 (  0.54)	train_corr   0.00 (  0.00)	l1 17.0567 (17.0554)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:00, 26.67it/s] 35%|###4      | 9/26 [00:00<00:00, 41.75it/s]                                               35%|###4      | 9/26 [00:00<00:00, 41.75it/s] 58%|#####7    | 15/26 [00:00<00:00, 47.10it/s]                                                58%|#####7    | 15/26 [00:00<00:00, 47.10it/s] 81%|########  | 21/26 [00:00<00:00, 48.70it/s]100%|##########| 26/26 [00:00<00:00, 43.57it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.53 (  0.53)	test_minacc   0.51 (  0.51)	test_majacc   0.54 (  0.54)	Loss_d 0.693 (0.693)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.54 (  0.54)	test_corr_d   0.05 (  0.05)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.57 (  0.54)	test_minacc   0.55 (  0.49)	test_majacc   0.58 (  0.55)	Loss_d 0.693 (0.693)	test_acc_d   0.57 (  0.54)	test_minacc_d   0.55 (  0.49)	test_majacc_d   0.58 (  0.55)	test_corr_d   0.11 (  0.05)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.53 (  0.54)	test_minacc   0.36 (  0.50)	test_majacc   0.56 (  0.55)	Loss_d 0.693 (0.693)	test_acc_d   0.53 (  0.54)	test_minacc_d   0.36 (  0.50)	test_majacc_d   0.56 (  0.55)	test_corr_d   0.09 (  0.06)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.60 (  0.54)	test_minacc   0.53 (  0.50)	test_majacc   0.62 (  0.54)	Loss_d 0.693 (0.693)	test_acc_d   0.60 (  0.54)	test_minacc_d   0.53 (  0.50)	test_majacc_d   0.62 (  0.54)	test_corr_d   0.18 (  0.06)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.99it/s]
Test: [  0/  1]	Loss 0.694 (0.694)	test_acc   0.49 (  0.49)	test_minacc   0.49 (  0.49)	test_majacc   0.51 (  0.51)	Loss_d 0.694 (0.694)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.49 (  0.49)	test_majacc_d   0.51 (  0.51)	test_corr_d   0.29 (  0.29)
Test: [  1/  1]	Loss 0.694 (0.694)	test_acc   0.49 (  0.49)	test_minacc   0.49 (  0.49)	test_majacc   0.51 (  0.51)	Loss_d 0.694 (0.694)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.49 (  0.49)	test_majacc_d   0.51 (  0.51)	test_corr_d   0.29 (  0.29)
Overall Timing[ 42/  1]	epoch_time 0.0486 (0.0413)	validation_time 0.0003 (0.0005)	train_time 0.0482 (0.0407)
record: (train_acc, test_acc) (0.6969000319242478, 0.6780000329017639)
last accs (train_acc, test_acc) (0.5376000138223171, 0.49400001764297485)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.26it/s] 12%|#1        | 3/26 [00:00<00:01, 12.14it/s] 19%|#9        | 5/26 [00:00<00:01, 14.33it/s] 27%|##6       | 7/26 [00:00<00:01, 15.42it/s] 35%|###4      | 9/26 [00:00<00:01, 16.10it/s] 42%|####2     | 11/26 [00:00<00:00, 16.19it/s] 50%|#####     | 13/26 [00:00<00:00, 16.39it/s] 58%|#####7    | 15/26 [00:00<00:00, 16.50it/s] 65%|######5   | 17/26 [00:01<00:00, 16.68it/s] 73%|#######3  | 19/26 [00:01<00:00, 16.76it/s] 81%|########  | 21/26 [00:01<00:00, 16.74it/s] 88%|########8 | 23/26 [00:01<00:00, 16.75it/s] 96%|#########6| 25/26 [00:01<00:00, 16.80it/s]100%|##########| 26/26 [00:01<00:00, 15.48it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1118 400
penalty weights 10000.0
args.step pgd_anneal_iters 1118 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1119 400
penalty weights 10000.0
args.step pgd_anneal_iters 1119 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1120 400
penalty weights 10000.0
args.step pgd_anneal_iters 1120 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1121 400
penalty weights 10000.0
args.step pgd_anneal_iters 1121 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1122 400
penalty weights 10000.0
args.step pgd_anneal_iters 1122 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1123 400
penalty weights 10000.0
args.step pgd_anneal_iters 1123 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1124 400
penalty weights 10000.0
args.step pgd_anneal_iters 1124 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1125 400
penalty weights 10000.0
args.step pgd_anneal_iters 1125 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1126 400
penalty weights 10000.0
args.step pgd_anneal_iters 1126 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1127 400
penalty weights 10000.0
args.step pgd_anneal_iters 1127 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1128 400
penalty weights 10000.0
args.step pgd_anneal_iters 1128 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1129 400
penalty weights 10000.0
args.step pgd_anneal_iters 1129 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1130 400
penalty weights 10000.0
args.step pgd_anneal_iters 1130 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1131 400
penalty weights 10000.0
args.step pgd_anneal_iters 1131 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1132 400
penalty weights 10000.0
args.step pgd_anneal_iters 1132 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1133 400
penalty weights 10000.0
args.step pgd_anneal_iters 1133 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1134 400
penalty weights 10000.0
args.step pgd_anneal_iters 1134 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1135 400
penalty weights 10000.0
args.step pgd_anneal_iters 1135 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1136 400
penalty weights 10000.0
args.step pgd_anneal_iters 1136 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1137 400
penalty weights 10000.0
args.step pgd_anneal_iters 1137 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1138 400
penalty weights 10000.0
args.step pgd_anneal_iters 1138 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1139 400
penalty weights 10000.0
args.step pgd_anneal_iters 1139 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1140 400
penalty weights 10000.0
args.step pgd_anneal_iters 1140 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1141 400
penalty weights 10000.0
args.step pgd_anneal_iters 1141 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1142 400
penalty weights 10000.0
args.step pgd_anneal_iters 1142 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1143 400
penalty weights 10000.0
args.step pgd_anneal_iters 1143 600
dim_v 512
retunring when rho == dim_v - 1
Epoch: [43][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.19 (  0.19)	train_acc   0.60 (  0.54)	train_minacc   0.53 (  0.50)	train_majacc   0.62 (  0.55)	train_corr   0.00 (  0.00)	l1 17.0592 (17.0580)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 17.44it/s] 35%|###4      | 9/26 [00:00<00:00, 39.31it/s]                                               35%|###4      | 9/26 [00:00<00:00, 39.31it/s] 58%|#####7    | 15/26 [00:00<00:00, 46.55it/s]                                                58%|#####7    | 15/26 [00:00<00:00, 46.55it/s] 81%|########  | 21/26 [00:00<00:00, 48.06it/s]100%|##########| 26/26 [00:00<00:00, 42.58it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.54 (  0.54)	test_minacc   0.51 (  0.51)	test_majacc   0.54 (  0.54)	Loss_d 0.693 (0.693)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.54 (  0.54)	test_corr_d   0.06 (  0.06)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.57 (  0.54)	test_minacc   0.55 (  0.48)	test_majacc   0.58 (  0.55)	Loss_d 0.693 (0.693)	test_acc_d   0.57 (  0.54)	test_minacc_d   0.55 (  0.48)	test_majacc_d   0.58 (  0.55)	test_corr_d   0.11 (  0.06)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.53 (  0.54)	test_minacc   0.36 (  0.50)	test_majacc   0.57 (  0.55)	Loss_d 0.693 (0.693)	test_acc_d   0.53 (  0.54)	test_minacc_d   0.36 (  0.50)	test_majacc_d   0.57 (  0.55)	test_corr_d   0.09 (  0.06)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.60 (  0.54)	test_minacc   0.53 (  0.50)	test_majacc   0.62 (  0.55)	Loss_d 0.693 (0.693)	test_acc_d   0.60 (  0.54)	test_minacc_d   0.53 (  0.50)	test_majacc_d   0.62 (  0.55)	test_corr_d   0.18 (  0.06)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 64.99it/s]
Test: [  0/  1]	Loss 0.694 (0.694)	test_acc   0.49 (  0.49)	test_minacc   0.49 (  0.49)	test_majacc   0.50 (  0.50)	Loss_d 0.694 (0.694)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.49 (  0.49)	test_majacc_d   0.50 (  0.50)	test_corr_d   0.29 (  0.29)
Test: [  1/  1]	Loss 0.694 (0.694)	test_acc   0.49 (  0.49)	test_minacc   0.49 (  0.49)	test_majacc   0.50 (  0.50)	Loss_d 0.694 (0.694)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.49 (  0.49)	test_majacc_d   0.50 (  0.50)	test_corr_d   0.29 (  0.29)
Overall Timing[ 43/  1]	epoch_time 0.0485 (0.0414)	validation_time 0.0004 (0.0005)	train_time 0.0481 (0.0408)
record: (train_acc, test_acc) (0.6969000319242478, 0.6780000329017639)
last accs (train_acc, test_acc) (0.5404000113308429, 0.49000000953674316)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.19it/s] 12%|#1        | 3/26 [00:00<00:01, 11.99it/s] 19%|#9        | 5/26 [00:00<00:01, 13.85it/s] 27%|##6       | 7/26 [00:00<00:01, 15.14it/s] 35%|###4      | 9/26 [00:00<00:01, 15.87it/s] 42%|####2     | 11/26 [00:00<00:00, 16.33it/s] 50%|#####     | 13/26 [00:00<00:00, 16.63it/s] 58%|#####7    | 15/26 [00:00<00:00, 16.85it/s] 65%|######5   | 17/26 [00:01<00:00, 17.03it/s] 73%|#######3  | 19/26 [00:01<00:00, 17.15it/s] 81%|########  | 21/26 [00:01<00:00, 17.02it/s] 88%|########8 | 23/26 [00:01<00:00, 16.96it/s] 96%|#########6| 25/26 [00:01<00:00, 16.79it/s]100%|##########| 26/26 [00:01<00:00, 15.58it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1144 400
penalty weights 10000.0
args.step pgd_anneal_iters 1144 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1145 400
penalty weights 10000.0
args.step pgd_anneal_iters 1145 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1146 400
penalty weights 10000.0
args.step pgd_anneal_iters 1146 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1147 400
penalty weights 10000.0
args.step pgd_anneal_iters 1147 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1148 400
penalty weights 10000.0
args.step pgd_anneal_iters 1148 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1149 400
penalty weights 10000.0
args.step pgd_anneal_iters 1149 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1150 400
penalty weights 10000.0
args.step pgd_anneal_iters 1150 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1151 400
penalty weights 10000.0
args.step pgd_anneal_iters 1151 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1152 400
penalty weights 10000.0
args.step pgd_anneal_iters 1152 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1153 400
penalty weights 10000.0
args.step pgd_anneal_iters 1153 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1154 400
penalty weights 10000.0
args.step pgd_anneal_iters 1154 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1155 400
penalty weights 10000.0
args.step pgd_anneal_iters 1155 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1156 400
penalty weights 10000.0
args.step pgd_anneal_iters 1156 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1157 400
penalty weights 10000.0
args.step pgd_anneal_iters 1157 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1158 400
penalty weights 10000.0
args.step pgd_anneal_iters 1158 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1159 400
penalty weights 10000.0
args.step pgd_anneal_iters 1159 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1160 400
penalty weights 10000.0
args.step pgd_anneal_iters 1160 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1161 400
penalty weights 10000.0
args.step pgd_anneal_iters 1161 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1162 400
penalty weights 10000.0
args.step pgd_anneal_iters 1162 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1163 400
penalty weights 10000.0
args.step pgd_anneal_iters 1163 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1164 400
penalty weights 10000.0
args.step pgd_anneal_iters 1164 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1165 400
penalty weights 10000.0
args.step pgd_anneal_iters 1165 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1166 400
penalty weights 10000.0
args.step pgd_anneal_iters 1166 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1167 400
penalty weights 10000.0
args.step pgd_anneal_iters 1167 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1168 400
penalty weights 10000.0
args.step pgd_anneal_iters 1168 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1169 400
penalty weights 10000.0
args.step pgd_anneal_iters 1169 600
dim_v 512
retunring when rho == dim_v - 1
Epoch: [44][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.19 (  0.19)	train_acc   0.61 (  0.54)	train_minacc   0.53 (  0.50)	train_majacc   0.62 (  0.55)	train_corr   0.00 (  0.00)	l1 17.0613 (17.0602)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.18it/s] 27%|##6       | 7/26 [00:00<00:00, 27.32it/s]                                               27%|##6       | 7/26 [00:00<00:00, 27.32it/s] 50%|#####     | 13/26 [00:00<00:00, 36.60it/s] 73%|#######3  | 19/26 [00:00<00:00, 44.09it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 44.09it/s] 96%|#########6| 25/26 [00:00<00:00, 44.99it/s]100%|##########| 26/26 [00:00<00:00, 36.09it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.54 (  0.54)	test_minacc   0.51 (  0.51)	test_majacc   0.54 (  0.54)	Loss_d 0.693 (0.693)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.54 (  0.54)	test_corr_d   0.06 (  0.06)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.57 (  0.54)	test_minacc   0.55 (  0.49)	test_majacc   0.57 (  0.55)	Loss_d 0.693 (0.693)	test_acc_d   0.57 (  0.54)	test_minacc_d   0.55 (  0.49)	test_majacc_d   0.57 (  0.55)	test_corr_d   0.11 (  0.06)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.53 (  0.55)	test_minacc   0.36 (  0.50)	test_majacc   0.56 (  0.55)	Loss_d 0.693 (0.693)	test_acc_d   0.53 (  0.55)	test_minacc_d   0.36 (  0.50)	test_majacc_d   0.56 (  0.55)	test_corr_d   0.09 (  0.06)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.61 (  0.54)	test_minacc   0.53 (  0.50)	test_majacc   0.62 (  0.55)	Loss_d 0.693 (0.693)	test_acc_d   0.61 (  0.54)	test_minacc_d   0.53 (  0.50)	test_majacc_d   0.62 (  0.55)	test_corr_d   0.18 (  0.06)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.89it/s]
Test: [  0/  1]	Loss 0.694 (0.694)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.47 (  0.47)	Loss_d 0.694 (0.694)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.47 (  0.47)	test_corr_d   0.30 (  0.30)
Test: [  1/  1]	Loss 0.694 (0.694)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.47 (  0.47)	Loss_d 0.694 (0.694)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.47 (  0.47)	test_corr_d   0.30 (  0.30)
Overall Timing[ 44/  1]	epoch_time 0.0492 (0.0416)	validation_time 0.0004 (0.0005)	train_time 0.0488 (0.0410)
record: (train_acc, test_acc) (0.6969000319242478, 0.6780000329017639)
last accs (train_acc, test_acc) (0.5436000159978867, 0.4970000088214874)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.54it/s] 12%|#1        | 3/26 [00:00<00:01, 11.81it/s] 19%|#9        | 5/26 [00:00<00:01, 14.03it/s] 27%|##6       | 7/26 [00:00<00:01, 14.98it/s] 35%|###4      | 9/26 [00:00<00:01, 15.49it/s] 42%|####2     | 11/26 [00:00<00:00, 15.97it/s] 50%|#####     | 13/26 [00:00<00:00, 16.43it/s] 58%|#####7    | 15/26 [00:00<00:00, 16.14it/s] 65%|######5   | 17/26 [00:01<00:00, 16.53it/s] 73%|#######3  | 19/26 [00:01<00:00, 16.72it/s] 81%|########  | 21/26 [00:01<00:00, 16.64it/s] 88%|########8 | 23/26 [00:01<00:00, 16.61it/s] 96%|#########6| 25/26 [00:01<00:00, 16.79it/s]100%|##########| 26/26 [00:01<00:00, 15.21it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1170 400
penalty weights 10000.0
args.step pgd_anneal_iters 1170 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1171 400
penalty weights 10000.0
args.step pgd_anneal_iters 1171 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1172 400
penalty weights 10000.0
args.step pgd_anneal_iters 1172 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1173 400
penalty weights 10000.0
args.step pgd_anneal_iters 1173 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1174 400
penalty weights 10000.0
args.step pgd_anneal_iters 1174 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1175 400
penalty weights 10000.0
args.step pgd_anneal_iters 1175 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1176 400
penalty weights 10000.0
args.step pgd_anneal_iters 1176 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1177 400
penalty weights 10000.0
args.step pgd_anneal_iters 1177 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1178 400
penalty weights 10000.0
args.step pgd_anneal_iters 1178 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1179 400
penalty weights 10000.0
args.step pgd_anneal_iters 1179 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1180 400
penalty weights 10000.0
args.step pgd_anneal_iters 1180 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1181 400
penalty weights 10000.0
args.step pgd_anneal_iters 1181 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1182 400
penalty weights 10000.0
args.step pgd_anneal_iters 1182 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1183 400
penalty weights 10000.0
args.step pgd_anneal_iters 1183 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1184 400
penalty weights 10000.0
args.step pgd_anneal_iters 1184 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1185 400
penalty weights 10000.0
args.step pgd_anneal_iters 1185 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1186 400
penalty weights 10000.0
args.step pgd_anneal_iters 1186 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1187 400
penalty weights 10000.0
args.step pgd_anneal_iters 1187 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1188 400
penalty weights 10000.0
args.step pgd_anneal_iters 1188 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1189 400
penalty weights 10000.0
args.step pgd_anneal_iters 1189 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1190 400
penalty weights 10000.0
args.step pgd_anneal_iters 1190 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1191 400
penalty weights 10000.0
args.step pgd_anneal_iters 1191 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1192 400
penalty weights 10000.0
args.step pgd_anneal_iters 1192 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1193 400
penalty weights 10000.0
args.step pgd_anneal_iters 1193 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1194 400
penalty weights 10000.0
args.step pgd_anneal_iters 1194 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1195 400
penalty weights 10000.0
args.step pgd_anneal_iters 1195 600
dim_v 512
retunring when rho == dim_v - 1
Epoch: [45][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.19 (  0.19)	train_acc   0.60 (  0.54)	train_minacc   0.53 (  0.50)	train_majacc   0.62 (  0.55)	train_corr   0.00 (  0.00)	l1 17.0633 (17.0623)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 18.60it/s] 27%|##6       | 7/26 [00:00<00:00, 36.45it/s]                                               27%|##6       | 7/26 [00:00<00:00, 36.45it/s] 50%|#####     | 13/26 [00:00<00:00, 42.66it/s] 73%|#######3  | 19/26 [00:00<00:00, 47.56it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 47.56it/s] 96%|#########6| 25/26 [00:00<00:00, 48.29it/s]100%|##########| 26/26 [00:00<00:00, 41.30it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.54 (  0.54)	test_minacc   0.49 (  0.49)	test_majacc   0.54 (  0.54)	Loss_d 0.693 (0.693)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.49 (  0.49)	test_majacc_d   0.54 (  0.54)	test_corr_d   0.06 (  0.06)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.57 (  0.54)	test_minacc   0.55 (  0.49)	test_majacc   0.58 (  0.55)	Loss_d 0.693 (0.693)	test_acc_d   0.57 (  0.54)	test_minacc_d   0.55 (  0.49)	test_majacc_d   0.58 (  0.55)	test_corr_d   0.11 (  0.06)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.52 (  0.54)	test_minacc   0.36 (  0.50)	test_majacc   0.55 (  0.55)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.54)	test_minacc_d   0.36 (  0.50)	test_majacc_d   0.55 (  0.55)	test_corr_d   0.09 (  0.06)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.60 (  0.54)	test_minacc   0.53 (  0.50)	test_majacc   0.62 (  0.55)	Loss_d 0.693 (0.693)	test_acc_d   0.60 (  0.54)	test_minacc_d   0.53 (  0.50)	test_majacc_d   0.62 (  0.55)	test_corr_d   0.18 (  0.07)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.53it/s]
Test: [  0/  1]	Loss 0.694 (0.694)	test_acc   0.49 (  0.49)	test_minacc   0.50 (  0.50)	test_majacc   0.42 (  0.42)	Loss_d 0.694 (0.694)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.42 (  0.42)	test_corr_d   0.30 (  0.30)
Test: [  1/  1]	Loss 0.694 (0.694)	test_acc   0.49 (  0.49)	test_minacc   0.50 (  0.50)	test_majacc   0.42 (  0.42)	Loss_d 0.694 (0.694)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.42 (  0.42)	test_corr_d   0.30 (  0.30)
Overall Timing[ 45/  1]	epoch_time 0.0502 (0.0418)	validation_time 0.0006 (0.0005)	train_time 0.0496 (0.0412)
record: (train_acc, test_acc) (0.6969000319242478, 0.6780000329017639)
last accs (train_acc, test_acc) (0.5426000053882599, 0.4910000264644623)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.81it/s] 12%|#1        | 3/26 [00:00<00:01, 11.95it/s] 19%|#9        | 5/26 [00:00<00:01, 14.06it/s] 27%|##6       | 7/26 [00:00<00:01, 15.22it/s] 35%|###4      | 9/26 [00:00<00:01, 15.72it/s] 42%|####2     | 11/26 [00:00<00:00, 15.75it/s] 50%|#####     | 13/26 [00:00<00:00, 16.07it/s] 58%|#####7    | 15/26 [00:00<00:00, 16.38it/s] 65%|######5   | 17/26 [00:01<00:00, 16.50it/s] 73%|#######3  | 19/26 [00:01<00:00, 16.73it/s] 81%|########  | 21/26 [00:01<00:00, 16.90it/s] 88%|########8 | 23/26 [00:01<00:00, 16.99it/s] 96%|#########6| 25/26 [00:01<00:00, 17.05it/s]100%|##########| 26/26 [00:01<00:00, 15.46it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1196 400
penalty weights 10000.0
args.step pgd_anneal_iters 1196 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1197 400
penalty weights 10000.0
args.step pgd_anneal_iters 1197 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1198 400
penalty weights 10000.0
args.step pgd_anneal_iters 1198 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1199 400
penalty weights 10000.0
args.step pgd_anneal_iters 1199 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1200 400
penalty weights 10000.0
args.step pgd_anneal_iters 1200 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1201 400
penalty weights 10000.0
args.step pgd_anneal_iters 1201 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1202 400
penalty weights 10000.0
args.step pgd_anneal_iters 1202 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1203 400
penalty weights 10000.0
args.step pgd_anneal_iters 1203 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1204 400
penalty weights 10000.0
args.step pgd_anneal_iters 1204 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1205 400
penalty weights 10000.0
args.step pgd_anneal_iters 1205 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1206 400
penalty weights 10000.0
args.step pgd_anneal_iters 1206 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1207 400
penalty weights 10000.0
args.step pgd_anneal_iters 1207 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1208 400
penalty weights 10000.0
args.step pgd_anneal_iters 1208 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1209 400
penalty weights 10000.0
args.step pgd_anneal_iters 1209 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1210 400
penalty weights 10000.0
args.step pgd_anneal_iters 1210 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1211 400
penalty weights 10000.0
args.step pgd_anneal_iters 1211 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1212 400
penalty weights 10000.0
args.step pgd_anneal_iters 1212 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1213 400
penalty weights 10000.0
args.step pgd_anneal_iters 1213 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1214 400
penalty weights 10000.0
args.step pgd_anneal_iters 1214 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1215 400
penalty weights 10000.0
args.step pgd_anneal_iters 1215 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1216 400
penalty weights 10000.0
args.step pgd_anneal_iters 1216 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1217 400
penalty weights 10000.0
args.step pgd_anneal_iters 1217 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1218 400
penalty weights 10000.0
args.step pgd_anneal_iters 1218 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1219 400
penalty weights 10000.0
args.step pgd_anneal_iters 1219 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1220 400
penalty weights 10000.0
args.step pgd_anneal_iters 1220 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1221 400
penalty weights 10000.0
args.step pgd_anneal_iters 1221 600
dim_v 512
retunring when rho == dim_v - 1
Epoch: [46][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.19 (  0.19)	train_acc   0.61 (  0.54)	train_minacc   0.53 (  0.50)	train_majacc   0.62 (  0.55)	train_corr   0.00 (  0.00)	l1 17.0650 (17.0641)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.04it/s] 27%|##6       | 7/26 [00:00<00:00, 34.43it/s]                                               27%|##6       | 7/26 [00:00<00:00, 34.43it/s] 50%|#####     | 13/26 [00:00<00:00, 40.17it/s] 73%|#######3  | 19/26 [00:00<00:00, 46.57it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 46.57it/s] 96%|#########6| 25/26 [00:00<00:00, 47.27it/s]100%|##########| 26/26 [00:00<00:00, 39.37it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.54 (  0.54)	test_minacc   0.48 (  0.48)	test_majacc   0.55 (  0.55)	Loss_d 0.693 (0.693)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.48 (  0.48)	test_majacc_d   0.55 (  0.55)	test_corr_d   0.06 (  0.06)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.57 (  0.53)	test_minacc   0.56 (  0.50)	test_majacc   0.57 (  0.54)	Loss_d 0.693 (0.693)	test_acc_d   0.57 (  0.53)	test_minacc_d   0.56 (  0.50)	test_majacc_d   0.57 (  0.54)	test_corr_d   0.12 (  0.06)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.51 (  0.54)	test_minacc   0.36 (  0.50)	test_majacc   0.53 (  0.54)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.54)	test_minacc_d   0.36 (  0.50)	test_majacc_d   0.53 (  0.54)	test_corr_d   0.10 (  0.07)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.61 (  0.53)	test_minacc   0.53 (  0.50)	test_majacc   0.62 (  0.54)	Loss_d 0.693 (0.693)	test_acc_d   0.61 (  0.53)	test_minacc_d   0.53 (  0.50)	test_majacc_d   0.62 (  0.54)	test_corr_d   0.18 (  0.07)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 64.67it/s]
Test: [  0/  1]	Loss 0.694 (0.694)	test_acc   0.48 (  0.48)	test_minacc   0.49 (  0.49)	test_majacc   0.42 (  0.42)	Loss_d 0.694 (0.694)	test_acc_d   0.48 (  0.48)	test_minacc_d   0.49 (  0.49)	test_majacc_d   0.42 (  0.42)	test_corr_d   0.30 (  0.30)
Test: [  1/  1]	Loss 0.694 (0.694)	test_acc   0.48 (  0.48)	test_minacc   0.49 (  0.49)	test_majacc   0.42 (  0.42)	Loss_d 0.694 (0.694)	test_acc_d   0.48 (  0.48)	test_minacc_d   0.49 (  0.49)	test_majacc_d   0.42 (  0.42)	test_corr_d   0.30 (  0.30)
Overall Timing[ 46/  1]	epoch_time 0.0493 (0.0420)	validation_time 0.0003 (0.0005)	train_time 0.0490 (0.0414)
record: (train_acc, test_acc) (0.6969000319242478, 0.6780000329017639)
last accs (train_acc, test_acc) (0.5342000177204609, 0.4830000102519989)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.07it/s] 12%|#1        | 3/26 [00:00<00:02, 10.24it/s] 19%|#9        | 5/26 [00:00<00:01, 12.75it/s] 27%|##6       | 7/26 [00:00<00:01, 14.30it/s] 35%|###4      | 9/26 [00:00<00:01, 15.25it/s] 42%|####2     | 11/26 [00:00<00:00, 15.76it/s] 50%|#####     | 13/26 [00:00<00:00, 16.09it/s] 58%|#####7    | 15/26 [00:01<00:00, 16.32it/s] 65%|######5   | 17/26 [00:01<00:00, 16.61it/s] 73%|#######3  | 19/26 [00:01<00:00, 16.94it/s] 81%|########  | 21/26 [00:01<00:00, 16.91it/s] 88%|########8 | 23/26 [00:01<00:00, 17.07it/s] 96%|#########6| 25/26 [00:01<00:00, 17.31it/s]100%|##########| 26/26 [00:01<00:00, 15.08it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1222 400
penalty weights 10000.0
args.step pgd_anneal_iters 1222 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1223 400
penalty weights 10000.0
args.step pgd_anneal_iters 1223 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1224 400
penalty weights 10000.0
args.step pgd_anneal_iters 1224 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1225 400
penalty weights 10000.0
args.step pgd_anneal_iters 1225 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1226 400
penalty weights 10000.0
args.step pgd_anneal_iters 1226 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1227 400
penalty weights 10000.0
args.step pgd_anneal_iters 1227 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1228 400
penalty weights 10000.0
args.step pgd_anneal_iters 1228 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1229 400
penalty weights 10000.0
args.step pgd_anneal_iters 1229 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1230 400
penalty weights 10000.0
args.step pgd_anneal_iters 1230 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1231 400
penalty weights 10000.0
args.step pgd_anneal_iters 1231 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1232 400
penalty weights 10000.0
args.step pgd_anneal_iters 1232 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1233 400
penalty weights 10000.0
args.step pgd_anneal_iters 1233 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1234 400
penalty weights 10000.0
args.step pgd_anneal_iters 1234 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1235 400
penalty weights 10000.0
args.step pgd_anneal_iters 1235 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1236 400
penalty weights 10000.0
args.step pgd_anneal_iters 1236 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1237 400
penalty weights 10000.0
args.step pgd_anneal_iters 1237 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1238 400
penalty weights 10000.0
args.step pgd_anneal_iters 1238 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1239 400
penalty weights 10000.0
args.step pgd_anneal_iters 1239 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1240 400
penalty weights 10000.0
args.step pgd_anneal_iters 1240 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1241 400
penalty weights 10000.0
args.step pgd_anneal_iters 1241 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1242 400
penalty weights 10000.0
args.step pgd_anneal_iters 1242 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1243 400
penalty weights 10000.0
args.step pgd_anneal_iters 1243 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1244 400
penalty weights 10000.0
args.step pgd_anneal_iters 1244 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1245 400
penalty weights 10000.0
args.step pgd_anneal_iters 1245 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1246 400
penalty weights 10000.0
args.step pgd_anneal_iters 1246 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1247 400
penalty weights 10000.0
args.step pgd_anneal_iters 1247 600
dim_v 512
retunring when rho == dim_v - 1
Epoch: [47][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.19 (  0.19)	train_acc   0.61 (  0.53)	train_minacc   0.53 (  0.50)	train_majacc   0.62 (  0.53)	train_corr   0.00 (  0.00)	l1 17.0665 (17.0657)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.93it/s] 27%|##6       | 7/26 [00:00<00:00, 36.67it/s]                                               27%|##6       | 7/26 [00:00<00:00, 36.67it/s] 50%|#####     | 13/26 [00:00<00:00, 42.82it/s] 73%|#######3  | 19/26 [00:00<00:00, 47.96it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 47.96it/s] 96%|#########6| 25/26 [00:00<00:00, 46.68it/s]100%|##########| 26/26 [00:00<00:00, 40.19it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.52 (  0.52)	test_minacc   0.48 (  0.48)	test_majacc   0.53 (  0.53)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.48 (  0.48)	test_majacc_d   0.53 (  0.53)	test_corr_d   0.06 (  0.06)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.54 (  0.52)	test_minacc   0.55 (  0.49)	test_majacc   0.54 (  0.52)	Loss_d 0.693 (0.693)	test_acc_d   0.54 (  0.52)	test_minacc_d   0.55 (  0.49)	test_majacc_d   0.54 (  0.52)	test_corr_d   0.12 (  0.06)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.49 (  0.52)	test_minacc   0.33 (  0.50)	test_majacc   0.52 (  0.52)	Loss_d 0.693 (0.693)	test_acc_d   0.49 (  0.52)	test_minacc_d   0.33 (  0.50)	test_majacc_d   0.52 (  0.52)	test_corr_d   0.10 (  0.07)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.61 (  0.52)	test_minacc   0.53 (  0.49)	test_majacc   0.62 (  0.52)	Loss_d 0.693 (0.693)	test_acc_d   0.61 (  0.52)	test_minacc_d   0.53 (  0.49)	test_majacc_d   0.62 (  0.52)	test_corr_d   0.19 (  0.07)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.27it/s]
Test: [  0/  1]	Loss 0.694 (0.694)	test_acc   0.46 (  0.46)	test_minacc   0.46 (  0.46)	test_majacc   0.44 (  0.44)	Loss_d 0.694 (0.694)	test_acc_d   0.46 (  0.46)	test_minacc_d   0.46 (  0.46)	test_majacc_d   0.44 (  0.44)	test_corr_d   0.31 (  0.31)
Test: [  1/  1]	Loss 0.694 (0.694)	test_acc   0.46 (  0.46)	test_minacc   0.46 (  0.46)	test_majacc   0.44 (  0.44)	Loss_d 0.694 (0.694)	test_acc_d   0.46 (  0.46)	test_minacc_d   0.46 (  0.46)	test_majacc_d   0.44 (  0.44)	test_corr_d   0.31 (  0.31)
Overall Timing[ 47/  1]	epoch_time 0.0486 (0.0421)	validation_time 0.0004 (0.0005)	train_time 0.0482 (0.0415)
record: (train_acc, test_acc) (0.6969000319242478, 0.6780000329017639)
last accs (train_acc, test_acc) (0.5161000083386899, 0.4620000123977661)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.46it/s] 12%|#1        | 3/26 [00:00<00:01, 12.35it/s] 19%|#9        | 5/26 [00:00<00:01, 14.53it/s] 27%|##6       | 7/26 [00:00<00:01, 15.52it/s] 35%|###4      | 9/26 [00:00<00:01, 16.25it/s] 42%|####2     | 11/26 [00:00<00:00, 16.60it/s] 50%|#####     | 13/26 [00:00<00:00, 16.95it/s] 58%|#####7    | 15/26 [00:00<00:00, 17.03it/s] 65%|######5   | 17/26 [00:01<00:00, 17.21it/s] 73%|#######3  | 19/26 [00:01<00:00, 17.16it/s] 81%|########  | 21/26 [00:01<00:00, 17.29it/s] 88%|########8 | 23/26 [00:01<00:00, 17.39it/s] 96%|#########6| 25/26 [00:01<00:00, 17.42it/s]100%|##########| 26/26 [00:01<00:00, 16.01it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1248 400
penalty weights 10000.0
args.step pgd_anneal_iters 1248 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1249 400
penalty weights 10000.0
args.step pgd_anneal_iters 1249 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1250 400
penalty weights 10000.0
args.step pgd_anneal_iters 1250 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1251 400
penalty weights 10000.0
args.step pgd_anneal_iters 1251 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1252 400
penalty weights 10000.0
args.step pgd_anneal_iters 1252 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1253 400
penalty weights 10000.0
args.step pgd_anneal_iters 1253 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1254 400
penalty weights 10000.0
args.step pgd_anneal_iters 1254 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1255 400
penalty weights 10000.0
args.step pgd_anneal_iters 1255 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1256 400
penalty weights 10000.0
args.step pgd_anneal_iters 1256 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1257 400
penalty weights 10000.0
args.step pgd_anneal_iters 1257 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1258 400
penalty weights 10000.0
args.step pgd_anneal_iters 1258 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1259 400
penalty weights 10000.0
args.step pgd_anneal_iters 1259 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1260 400
penalty weights 10000.0
args.step pgd_anneal_iters 1260 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1261 400
penalty weights 10000.0
args.step pgd_anneal_iters 1261 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1262 400
penalty weights 10000.0
args.step pgd_anneal_iters 1262 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1263 400
penalty weights 10000.0
args.step pgd_anneal_iters 1263 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1264 400
penalty weights 10000.0
args.step pgd_anneal_iters 1264 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1265 400
penalty weights 10000.0
args.step pgd_anneal_iters 1265 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1266 400
penalty weights 10000.0
args.step pgd_anneal_iters 1266 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1267 400
penalty weights 10000.0
args.step pgd_anneal_iters 1267 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1268 400
penalty weights 10000.0
args.step pgd_anneal_iters 1268 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1269 400
penalty weights 10000.0
args.step pgd_anneal_iters 1269 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1270 400
penalty weights 10000.0
args.step pgd_anneal_iters 1270 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1271 400
penalty weights 10000.0
args.step pgd_anneal_iters 1271 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1272 400
penalty weights 10000.0
args.step pgd_anneal_iters 1272 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1273 400
penalty weights 10000.0
args.step pgd_anneal_iters 1273 600
dim_v 512
retunring when rho == dim_v - 1
Epoch: [48][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.19 (  0.19)	train_acc   0.59 (  0.50)	train_minacc   0.50 (  0.49)	train_majacc   0.60 (  0.51)	train_corr   0.00 (  0.00)	l1 17.0678 (17.0671)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  6.04it/s] 27%|##6       | 7/26 [00:00<00:00, 29.12it/s]                                               27%|##6       | 7/26 [00:00<00:00, 29.12it/s] 50%|#####     | 13/26 [00:00<00:00, 36.31it/s] 73%|#######3  | 19/26 [00:00<00:00, 43.78it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 43.78it/s] 96%|#########6| 25/26 [00:00<00:00, 45.33it/s]100%|##########| 26/26 [00:00<00:00, 36.95it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.48 (  0.48)	test_minacc   0.42 (  0.42)	test_majacc   0.50 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.48 (  0.48)	test_minacc_d   0.42 (  0.42)	test_majacc_d   0.50 (  0.50)	test_corr_d   0.07 (  0.07)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.53 (  0.49)	test_minacc   0.52 (  0.47)	test_majacc   0.53 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.53 (  0.49)	test_minacc_d   0.52 (  0.47)	test_majacc_d   0.53 (  0.50)	test_corr_d   0.12 (  0.07)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.45 (  0.49)	test_minacc   0.33 (  0.49)	test_majacc   0.48 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.45 (  0.49)	test_minacc_d   0.33 (  0.49)	test_majacc_d   0.48 (  0.50)	test_corr_d   0.10 (  0.07)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.58 (  0.49)	test_minacc   0.50 (  0.48)	test_majacc   0.60 (  0.49)	Loss_d 0.693 (0.693)	test_acc_d   0.58 (  0.49)	test_minacc_d   0.50 (  0.48)	test_majacc_d   0.60 (  0.49)	test_corr_d   0.19 (  0.07)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 64.35it/s]
Test: [  0/  1]	Loss 0.694 (0.694)	test_acc   0.45 (  0.45)	test_minacc   0.45 (  0.45)	test_majacc   0.44 (  0.44)	Loss_d 0.694 (0.694)	test_acc_d   0.45 (  0.45)	test_minacc_d   0.45 (  0.45)	test_majacc_d   0.44 (  0.44)	test_corr_d   0.31 (  0.31)
Test: [  1/  1]	Loss 0.694 (0.694)	test_acc   0.45 (  0.45)	test_minacc   0.45 (  0.45)	test_majacc   0.44 (  0.44)	Loss_d 0.694 (0.694)	test_acc_d   0.45 (  0.45)	test_minacc_d   0.45 (  0.45)	test_majacc_d   0.44 (  0.44)	test_corr_d   0.31 (  0.31)
Overall Timing[ 48/  1]	epoch_time 0.0483 (0.0422)	validation_time 0.0006 (0.0005)	train_time 0.0477 (0.0416)
record: (train_acc, test_acc) (0.6969000319242478, 0.6780000329017639)
last accs (train_acc, test_acc) (0.4910000077486038, 0.4480000138282776)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.80it/s] 12%|#1        | 3/26 [00:00<00:02, 11.00it/s] 19%|#9        | 5/26 [00:00<00:01, 13.13it/s] 27%|##6       | 7/26 [00:00<00:01, 14.57it/s] 35%|###4      | 9/26 [00:00<00:01, 15.42it/s] 42%|####2     | 11/26 [00:00<00:00, 15.84it/s] 50%|#####     | 13/26 [00:00<00:00, 16.26it/s] 58%|#####7    | 15/26 [00:01<00:00, 16.67it/s] 65%|######5   | 17/26 [00:01<00:00, 16.80it/s] 73%|#######3  | 19/26 [00:01<00:00, 16.90it/s] 81%|########  | 21/26 [00:01<00:00, 16.99it/s] 88%|########8 | 23/26 [00:01<00:00, 17.13it/s] 96%|#########6| 25/26 [00:01<00:00, 17.27it/s]100%|##########| 26/26 [00:01<00:00, 15.36it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1274 400
penalty weights 10000.0
args.step pgd_anneal_iters 1274 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1275 400
penalty weights 10000.0
args.step pgd_anneal_iters 1275 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1276 400
penalty weights 10000.0
args.step pgd_anneal_iters 1276 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1277 400
penalty weights 10000.0
args.step pgd_anneal_iters 1277 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1278 400
penalty weights 10000.0
args.step pgd_anneal_iters 1278 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1279 400
penalty weights 10000.0
args.step pgd_anneal_iters 1279 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1280 400
penalty weights 10000.0
args.step pgd_anneal_iters 1280 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1281 400
penalty weights 10000.0
args.step pgd_anneal_iters 1281 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1282 400
penalty weights 10000.0
args.step pgd_anneal_iters 1282 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1283 400
penalty weights 10000.0
args.step pgd_anneal_iters 1283 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1284 400
penalty weights 10000.0
args.step pgd_anneal_iters 1284 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1285 400
penalty weights 10000.0
args.step pgd_anneal_iters 1285 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1286 400
penalty weights 10000.0
args.step pgd_anneal_iters 1286 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1287 400
penalty weights 10000.0
args.step pgd_anneal_iters 1287 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1288 400
penalty weights 10000.0
args.step pgd_anneal_iters 1288 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1289 400
penalty weights 10000.0
args.step pgd_anneal_iters 1289 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1290 400
penalty weights 10000.0
args.step pgd_anneal_iters 1290 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1291 400
penalty weights 10000.0
args.step pgd_anneal_iters 1291 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1292 400
penalty weights 10000.0
args.step pgd_anneal_iters 1292 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1293 400
penalty weights 10000.0
args.step pgd_anneal_iters 1293 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1294 400
penalty weights 10000.0
args.step pgd_anneal_iters 1294 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1295 400
penalty weights 10000.0
args.step pgd_anneal_iters 1295 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1296 400
penalty weights 10000.0
args.step pgd_anneal_iters 1296 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1297 400
penalty weights 10000.0
args.step pgd_anneal_iters 1297 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1298 400
penalty weights 10000.0
args.step pgd_anneal_iters 1298 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1299 400
penalty weights 10000.0
args.step pgd_anneal_iters 1299 600
dim_v 512
retunring when rho == dim_v - 1
Epoch: [49][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.19 (  0.19)	train_acc   0.55 (  0.48)	train_minacc   0.47 (  0.48)	train_majacc   0.57 (  0.48)	train_corr   0.00 (  0.00)	l1 17.0689 (17.0684)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.63it/s] 27%|##6       | 7/26 [00:00<00:00, 31.62it/s]                                               27%|##6       | 7/26 [00:00<00:00, 31.62it/s] 46%|####6     | 12/26 [00:00<00:00, 38.87it/s] 69%|######9   | 18/26 [00:00<00:00, 41.78it/s]                                                69%|######9   | 18/26 [00:00<00:00, 41.78it/s] 92%|#########2| 24/26 [00:00<00:00, 47.43it/s]100%|##########| 26/26 [00:00<00:00, 38.66it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.46 (  0.46)	test_minacc   0.42 (  0.42)	test_majacc   0.47 (  0.47)	Loss_d 0.693 (0.693)	test_acc_d   0.46 (  0.46)	test_minacc_d   0.42 (  0.42)	test_majacc_d   0.47 (  0.47)	test_corr_d   0.07 (  0.07)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.53 (  0.47)	test_minacc   0.53 (  0.46)	test_majacc   0.53 (  0.48)	Loss_d 0.693 (0.693)	test_acc_d   0.53 (  0.47)	test_minacc_d   0.53 (  0.46)	test_majacc_d   0.53 (  0.48)	test_corr_d   0.12 (  0.07)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.44 (  0.47)	test_minacc   0.34 (  0.48)	test_majacc   0.45 (  0.47)	Loss_d 0.693 (0.693)	test_acc_d   0.44 (  0.47)	test_minacc_d   0.34 (  0.48)	test_majacc_d   0.45 (  0.47)	test_corr_d   0.10 (  0.07)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.54 (  0.47)	test_minacc   0.44 (  0.47)	test_majacc   0.56 (  0.47)	Loss_d 0.693 (0.693)	test_acc_d   0.54 (  0.47)	test_minacc_d   0.44 (  0.47)	test_majacc_d   0.56 (  0.47)	test_corr_d   0.19 (  0.07)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 64.68it/s]
Test: [  0/  1]	Loss 0.694 (0.694)	test_acc   0.43 (  0.43)	test_minacc   0.43 (  0.43)	test_majacc   0.44 (  0.44)	Loss_d 0.694 (0.694)	test_acc_d   0.43 (  0.43)	test_minacc_d   0.43 (  0.43)	test_majacc_d   0.44 (  0.44)	test_corr_d   0.31 (  0.31)
Test: [  1/  1]	Loss 0.694 (0.694)	test_acc   0.43 (  0.43)	test_minacc   0.43 (  0.43)	test_majacc   0.44 (  0.44)	Loss_d 0.694 (0.694)	test_acc_d   0.43 (  0.43)	test_minacc_d   0.43 (  0.43)	test_majacc_d   0.44 (  0.44)	test_corr_d   0.31 (  0.31)
Overall Timing[ 49/  1]	epoch_time 0.0502 (0.0424)	validation_time 0.0003 (0.0005)	train_time 0.0498 (0.0418)
record: (train_acc, test_acc) (0.6969000319242478, 0.6780000329017639)
last accs (train_acc, test_acc) (0.47080000603199007, 0.4320000112056732)
done saving aggregate.csv to ./aggregate.csv
wandb: - 0.162 MB of 0.162 MB uploadedwandb: \ 0.162 MB of 0.162 MB uploadedwandb: | 0.162 MB of 0.162 MB uploadedwandb: / 0.184 MB of 0.190 MB uploaded (0.003 MB deduped)wandb: - 0.510 MB of 0.510 MB uploaded (0.003 MB deduped)wandb: 
wandb: Run history:
wandb:                                                                           global_step ▁▁▁▁▂▂▂▂▂▃▃▃▃▃▃▄▄▄▄▄▅▅▅▅▅▅▆▆▆▆▆▆▇▇▇▇▇███
wandb:      resnet18-usc-unsigned/baseline/prune_rate=1.0/35/logs/diagnostics/epoch_time_val █▁▁▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▃▃▁▁▁▁▃▄▄▃▄▃▃▃▄▃▃▄▄▃▄
wandb:      resnet18-usc-unsigned/baseline/prune_rate=1.0/35/logs/diagnostics/train_time_val █▁▁▂▁▁▁▁▁▁▁▁▁▁▁▁▂▁▁▃▄▁▁▁▁▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄
wandb: resnet18-usc-unsigned/baseline/prune_rate=1.0/35/logs/diagnostics/validation_time_val █▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:                     resnet18-usc-unsigned/baseline/prune_rate=1.0/35/logs/global_step ▁▁▁▁▂▂▂▂▂▃▃▃▃▃▃▄▄▄▄▄▅▅▅▅▅▅▆▆▆▆▆▆▇▇▇▇▇███
wandb:                   resnet18-usc-unsigned/baseline/prune_rate=1.0/35/logs/test/Loss_avg ▇▇███▇█▇▇▇▇▇▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:                 resnet18-usc-unsigned/baseline/prune_rate=1.0/35/logs/test/Loss_d_avg ▇▇███▇█▇▇▇▇▇▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:                 resnet18-usc-unsigned/baseline/prune_rate=1.0/35/logs/test/Loss_d_val ▇▇███▇█▇▇▇▇▇▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:                   resnet18-usc-unsigned/baseline/prune_rate=1.0/35/logs/test/Loss_val ▇▇███▇█▇▇▇▇▇▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:               resnet18-usc-unsigned/baseline/prune_rate=1.0/35/logs/test/test_acc_avg ▁▂▁▂▂▁▂▃▂▃▂▃█▇▇▇▇▇▇▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▅▅
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/35/logs/test/test_acc_d_avg ▁▂▁▂▂▁▂▃▂▃▂▃█▇▇▇▇▇▇▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▅▅
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/35/logs/test/test_acc_d_val ▁▂▁▂▂▁▂▃▂▃▂▃█▇▇▇▇▇▇▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▅▅
wandb:               resnet18-usc-unsigned/baseline/prune_rate=1.0/35/logs/test/test_acc_val ▁▂▁▂▂▁▂▃▂▃▂▃█▇▇▇▇▇▇▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▅▅
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/35/logs/test/test_corr_d_avg █▇█▇▇▇▇▇▇▇▇▇▁▂▂▂▂▂▂▃▁▂▂▂▃▃▃▄▄▄▄▄▄▄▄▄▄▄▄▄
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/35/logs/test/test_corr_d_val █▇█▇▇▇▇▇▇▇▇▇▁▂▂▂▂▂▂▃▁▂▂▂▃▃▃▄▄▄▄▄▄▄▄▄▄▄▄▄
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/35/logs/test/test_majacc_avg ████▇██▇████▅▄▄▃▃▃▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▁▁▁▁
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/35/logs/test/test_majacc_d_avg ████▇██▇████▅▄▄▃▃▃▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▁▁▁▁
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/35/logs/test/test_majacc_d_val ████▇██▇████▅▄▄▃▃▃▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▁▁▁▁
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/35/logs/test/test_majacc_val ████▇██▇████▅▄▄▃▃▃▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▁▁▁▁
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/35/logs/test/test_minacc_avg ▁▂▁▂▂▁▂▃▂▃▂▃█▇▇▇▇▇▇▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▅
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/35/logs/test/test_minacc_d_avg ▁▂▁▂▂▁▂▃▂▃▂▃█▇▇▇▇▇▇▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▅
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/35/logs/test/test_minacc_d_val ▁▂▁▂▂▁▂▃▂▃▂▃█▇▇▇▇▇▇▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▅
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/35/logs/test/test_minacc_val ▁▂▁▂▂▁▂▃▂▃▂▃█▇▇▇▇▇▇▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▅
wandb:                  resnet18-usc-unsigned/baseline/prune_rate=1.0/35/logs/train/Loss_avg █▅▃▂▂▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:                  resnet18-usc-unsigned/baseline/prune_rate=1.0/35/logs/train/Loss_val █▅▃▃▂▂▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:                    resnet18-usc-unsigned/baseline/prune_rate=1.0/35/logs/train/l1_avg ▃▂▁▁▁▂▂▃▅▆▆▇███████▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇
wandb:                    resnet18-usc-unsigned/baseline/prune_rate=1.0/35/logs/train/l1_val ▂▂▁▁▁▂▃▄▅▆▇█████████████████████████████
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/35/logs/train/train_acc_avg ▇███████████▇▄▄▃▃▃▃▃▁▁▁▁▁▂▂▂▂▂▂▂▂▂▂▂▂▂▂▁
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/35/logs/train/train_acc_val ██▇█▇██▇▇▇▇▇▄▃▂▂▂▁▁▂▁▁▁▁▁▁▁▁▁▂▂▂▂▂▂▂▂▂▂▁
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/35/logs/train/train_corr_avg ▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/35/logs/train/train_corr_val ▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/35/logs/train/train_majacc_avg ▇███████████▆▃▃▃▂▂▂▂▁▁▁▁▁▁▁▁▂▂▂▂▂▂▂▂▂▂▂▁
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/35/logs/train/train_majacc_val ██▇▇▇█▇▇▇▇▇▇▃▂▂▂▁▁▁▂▁▁▁▁▁▁▁▁▁▁▂▂▂▂▂▂▂▂▂▁
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/35/logs/train/train_minacc_avg ▁▁▁▁▁▂▂▂▂▂▃▃▆█▇▇▇▇▇▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/35/logs/train/train_minacc_val ▁▁▂▃▂▁▃▃▃▂▄▃██▇▇▇▇▇▆▇▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/35/logs/train/train_nll_avg ▅▂▂▂▂▁▁▁▁▁▁▁▃▇▇▇████████████████████████
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/35/logs/train/train_nll_val ▃▂▂▂▂▁▁▁▁▁▁▂▆▇▇▇████████████████████████
wandb:         resnet18-usc-unsigned/baseline/prune_rate=1.0/35/logs/train/train_penalty_avg █▃▃▂▂▂▂▂▂▂▂▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:         resnet18-usc-unsigned/baseline/prune_rate=1.0/35/logs/train/train_penalty_val █▄▇▄▇▄▄▃▂▄▃▄▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:           resnet18-usc-unsigned/baseline/prune_rate=1.0/35/logs/train/weight_norm_avg █▅▃▂▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:           resnet18-usc-unsigned/baseline/prune_rate=1.0/35/logs/train/weight_norm_val █▅▃▂▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb: 
wandb: Run summary:
wandb:                                                                           global_step 49
wandb:      resnet18-usc-unsigned/baseline/prune_rate=1.0/35/logs/diagnostics/epoch_time_val 0.05016
wandb:      resnet18-usc-unsigned/baseline/prune_rate=1.0/35/logs/diagnostics/train_time_val 0.04981
wandb: resnet18-usc-unsigned/baseline/prune_rate=1.0/35/logs/diagnostics/validation_time_val 0.00032
wandb:                     resnet18-usc-unsigned/baseline/prune_rate=1.0/35/logs/global_step 49
wandb:                   resnet18-usc-unsigned/baseline/prune_rate=1.0/35/logs/test/Loss_avg 0.69381
wandb:                 resnet18-usc-unsigned/baseline/prune_rate=1.0/35/logs/test/Loss_d_avg 0.69381
wandb:                 resnet18-usc-unsigned/baseline/prune_rate=1.0/35/logs/test/Loss_d_val 0.69381
wandb:                   resnet18-usc-unsigned/baseline/prune_rate=1.0/35/logs/test/Loss_val 0.69381
wandb:               resnet18-usc-unsigned/baseline/prune_rate=1.0/35/logs/test/test_acc_avg 0.432
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/35/logs/test/test_acc_d_avg 0.432
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/35/logs/test/test_acc_d_val 0.432
wandb:               resnet18-usc-unsigned/baseline/prune_rate=1.0/35/logs/test/test_acc_val 0.432
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/35/logs/test/test_corr_d_avg 0.30638
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/35/logs/test/test_corr_d_val 0.30638
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/35/logs/test/test_majacc_avg 0.44
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/35/logs/test/test_majacc_d_avg 0.44
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/35/logs/test/test_majacc_d_val 0.44
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/35/logs/test/test_majacc_val 0.44
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/35/logs/test/test_minacc_avg 0.43111
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/35/logs/test/test_minacc_d_avg 0.43111
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/35/logs/test/test_minacc_d_val 0.43111
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/35/logs/test/test_minacc_val 0.43111
wandb:                  resnet18-usc-unsigned/baseline/prune_rate=1.0/35/logs/train/Loss_avg 9e-05
wandb:                  resnet18-usc-unsigned/baseline/prune_rate=1.0/35/logs/train/Loss_val 9e-05
wandb:                    resnet18-usc-unsigned/baseline/prune_rate=1.0/35/logs/train/l1_avg 17.06836
wandb:                    resnet18-usc-unsigned/baseline/prune_rate=1.0/35/logs/train/l1_val 17.06895
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/35/logs/train/train_acc_avg 0.4811
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/35/logs/train/train_acc_val 0.552
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/35/logs/train/train_corr_avg 0.0
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/35/logs/train/train_corr_val 0.0
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/35/logs/train/train_majacc_avg 0.48237
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/35/logs/train/train_majacc_val 0.56542
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/35/logs/train/train_minacc_avg 0.47718
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/35/logs/train/train_minacc_val 0.47222
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/35/logs/train/train_nll_avg 0.69317
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/35/logs/train/train_nll_val 0.69272
wandb:         resnet18-usc-unsigned/baseline/prune_rate=1.0/35/logs/train/train_penalty_avg 0.0
wandb:         resnet18-usc-unsigned/baseline/prune_rate=1.0/35/logs/train/train_penalty_val 0.0
wandb:           resnet18-usc-unsigned/baseline/prune_rate=1.0/35/logs/train/weight_norm_avg 0.1881
wandb:           resnet18-usc-unsigned/baseline/prune_rate=1.0/35/logs/train/weight_norm_val 0.18791
wandb: 
wandb: 🚀 View run name_random at: https://wandb.ai/janezdu-uiuc/irm/runs/i7ypqgbk
wandb: ⭐️ View project at: https://wandb.ai/janezdu-uiuc/irm
wandb: Synced 5 W&B file(s), 0 media file(s), 2 artifact file(s) and 1 other file(s)
wandb: Find logs at: ./wandb/run-20240906_151453-i7ypqgbk/logs
wandb: WARNING The new W&B backend becomes opt-out in version 0.18.0; try it out with `wandb.require("core")`! See https://wandb.me/wandb-core for more information.
wandb: Currently logged in as: janezdu (janezdu-uiuc). Use `wandb login --relogin` to force relogin
wandb: wandb version 0.17.9 is available!  To upgrade, please run:
wandb:  $ pip install wandb --upgrade
wandb: Tracking run with wandb version 0.17.7
wandb: Run data is saved locally in /scratch/users/zd16/sparseIRM-resnet-ver/wandb/run-20240906_151737-5jak5c9i
wandb: Run `wandb offline` to turn off syncing.
wandb: Syncing run name_random
wandb: ⭐️ View project at https://wandb.ai/janezdu-uiuc/irm
wandb: 🚀 View run at https://wandb.ai/janezdu-uiuc/irm/runs/5jak5c9i
=> Reading YAML config from configs/smallscale/resnet18/resnet18-usc-unsigned.yaml
Namespace(data='dataset/', optimizer='adam', weight_opt='adam', set='mnistcifar', arch='ResNet18', config='configs/smallscale/resnet18/resnet18-usc-unsigned.yaml', log_dir=None, workers=4, epochs=50, start_epoch=None, batch_size=390, lr=0.006, warmup_length=0, momentum=0.9, weight_decay=0.0, print_freq=10, num_classes=1, resume='', resume_train_weights='', evaluate=False, pretrained=None, pretrained_distill=None, alpha_distill=0.95, T_distill=2, seed=0, multigpu=[0], lr_policy='cosine_lr', lr_adjust=30, lr_gamma=0.1, name='baseline', save_every=-1, prune_rate=1.0, param_prune_rate=0.0, pr_start=1.0, low_data=1, width_mult=1.0, nesterov=False, threetimes=False, random_subnet=False, one_batch=False, conv_type='DenseConv', freeze_weights=False, st=False, mode='fan_in', nonlinearity='relu', bn_type='LearnedBatchNorm', init='kaiming_normal', no_bn_decay=False, scale_fan=False, first_layer_dense=False, last_layer_dense=True, approx=False, zero=False, flip=False, bs=False, gumbel_sample=False, multiply_prob=False, no_multiply=False, multiply_cont=False, multiply_prob_bs=False, indiv=False, label_smoothing=None, first_layer_type=None, trainer='default', score_init_constant=1.0, K=1, update_freq=20, D=0.01, T=1, TA=True, TA2=False, TA_grow=False, center=False, straight_through=False, PLA_factor=0.1, PLA_patience=10, gradient_loss_para=0, abs_loss_para=0, thres=0.9, runs_name='name_random', resume_compare_loss1='', resume_compare_loss2='', init_weights='', trained_mask='', weight_rescaling=False, constrain_by_layer=False, weight_rescaling_data=False, use_running_stats=False, not_clipping=False, rescaling_para=False, lasso_para=0, dont_freeze_weights=False, iterative=True, prob_by_weight=False, rescale_at_fix_subnet=False, train_weights_at_the_same_time=False, sample_from_training_set=False, load_true_para=False, distill=False, finetune=False, stablize=False, prev_best=0, weight_opt_lr=0.0006, n=500, ts=0.28, te=0.6, d=20000, s=80, c=0.75, init_prob=False, thres_before=0.001, wide_ratio=0.001, noise=1, cal_p_q=False, just_finetune=False, snip=False, envs_num=2, l2_regularizer_weight=0.001, data_num=50000, env_type='linear', irm_type='irmv1', hidden_dim=390, penalty_anneal_iters=400, penalty_weight=10000.0, grayscale_model=0, weight_lr_schedule=False, fix_subnet=False, freeze_weight=False, step='ours', prior_sd_coef=0, dim_inv=2, variance_gamma=1.0, dim_spu=10, image_scale=32, cons_ratio='0.999_0.7_0.1', noise_ratio=0.2, step_gamma=0.1, step_round=3, inner_steps=1, use_pgd=True, z=19.0, pgd_anneal_iters=600)
=> Creating model 'ResNet18'
Here!!!!!!!!
==> Conv Type: DenseConv
==> BN Type: LearnedBatchNorm
<class 'torch.nn.modules.conv.Conv2d'>
<class 'torch.nn.modules.batchnorm.BatchNorm2d'>
==> Building first layer with <class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
ResNet(
  (conv1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
  (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (relu): ReLU(inplace=True)
  (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
  (layer1): Sequential(
    (0): BasicBlock(
      (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (1): BasicBlock(
      (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (layer2): Sequential(
    (0): BasicBlock(
      (conv1): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (downsample): Sequential(
        (0): Conv2d(64, 128, kernel_size=(1, 1), stride=(2, 2), bias=False)
        (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (1): BasicBlock(
      (conv1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (layer3): Sequential(
    (0): BasicBlock(
      (conv1): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (downsample): Sequential(
        (0): Conv2d(128, 256, kernel_size=(1, 1), stride=(2, 2), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (1): BasicBlock(
      (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (layer4): Sequential(
    (0): BasicBlock(
      (conv1): Conv2d(256, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (downsample): Sequential(
        (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (1): BasicBlock(
      (conv1): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (avgpool): AdaptiveAvgPool2d(output_size=1)
  (fc): Linear(in_features=512, out_features=1, bias=True)
)
=> Parallelizing on [0] gpus
<DEBUG> gradient to module.conv1.weight
<DEBUG> gradient to module.bn1.weight
<DEBUG> gradient to module.bn1.bias
<DEBUG> gradient to module.layer1.0.conv1.weight
<DEBUG> gradient to module.layer1.0.bn1.weight
<DEBUG> gradient to module.layer1.0.bn1.bias
<DEBUG> gradient to module.layer1.0.conv2.weight
<DEBUG> gradient to module.layer1.0.bn2.weight
<DEBUG> gradient to module.layer1.0.bn2.bias
<DEBUG> gradient to module.layer1.1.conv1.weight
<DEBUG> gradient to module.layer1.1.bn1.weight
<DEBUG> gradient to module.layer1.1.bn1.bias
<DEBUG> gradient to module.layer1.1.conv2.weight
<DEBUG> gradient to module.layer1.1.bn2.weight
<DEBUG> gradient to module.layer1.1.bn2.bias
<DEBUG> gradient to module.layer2.0.conv1.weight
<DEBUG> gradient to module.layer2.0.bn1.weight
<DEBUG> gradient to module.layer2.0.bn1.bias
<DEBUG> gradient to module.layer2.0.conv2.weight
<DEBUG> gradient to module.layer2.0.bn2.weight
<DEBUG> gradient to module.layer2.0.bn2.bias
<DEBUG> gradient to module.layer2.0.downsample.0.weight
<DEBUG> gradient to module.layer2.0.downsample.1.weight
<DEBUG> gradient to module.layer2.0.downsample.1.bias
<DEBUG> gradient to module.layer2.1.conv1.weight
<DEBUG> gradient to module.layer2.1.bn1.weight
<DEBUG> gradient to module.layer2.1.bn1.bias
<DEBUG> gradient to module.layer2.1.conv2.weight
<DEBUG> gradient to module.layer2.1.bn2.weight
<DEBUG> gradient to module.layer2.1.bn2.bias
<DEBUG> gradient to module.layer3.0.conv1.weight
<DEBUG> gradient to module.layer3.0.bn1.weight
<DEBUG> gradient to module.layer3.0.bn1.bias
<DEBUG> gradient to module.layer3.0.conv2.weight
<DEBUG> gradient to module.layer3.0.bn2.weight
<DEBUG> gradient to module.layer3.0.bn2.bias
<DEBUG> gradient to module.layer3.0.downsample.0.weight
<DEBUG> gradient to module.layer3.0.downsample.1.weight
<DEBUG> gradient to module.layer3.0.downsample.1.bias
<DEBUG> gradient to module.layer3.1.conv1.weight
<DEBUG> gradient to module.layer3.1.bn1.weight
<DEBUG> gradient to module.layer3.1.bn1.bias
<DEBUG> gradient to module.layer3.1.conv2.weight
<DEBUG> gradient to module.layer3.1.bn2.weight
<DEBUG> gradient to module.layer3.1.bn2.bias
<DEBUG> gradient to module.layer4.0.conv1.weight
<DEBUG> gradient to module.layer4.0.bn1.weight
<DEBUG> gradient to module.layer4.0.bn1.bias
<DEBUG> gradient to module.layer4.0.conv2.weight
<DEBUG> gradient to module.layer4.0.bn2.weight
<DEBUG> gradient to module.layer4.0.bn2.bias
<DEBUG> gradient to module.layer4.0.downsample.0.weight
<DEBUG> gradient to module.layer4.0.downsample.1.weight
<DEBUG> gradient to module.layer4.0.downsample.1.bias
<DEBUG> gradient to module.layer4.1.conv1.weight
<DEBUG> gradient to module.layer4.1.bn1.weight
<DEBUG> gradient to module.layer4.1.bn1.bias
<DEBUG> gradient to module.layer4.1.conv2.weight
<DEBUG> gradient to module.layer4.1.bn2.weight
<DEBUG> gradient to module.layer4.1.bn2.bias
<DEBUG> gradient to module.fc.weight
<DEBUG> gradient to module.fc.bias
Files already downloaded and verified
Files already downloaded and verified
Adding Noise to Label, len(Y)=12000, Label_noise=1192
Xmp (7877, 3, 32, 32) (6903, 3, 32, 32)
Xcp (6048, 3, 32, 32) (5952, 3, 32, 32)
env=0 2497 2497 3 3
xn 2500 xp 2500
env=1 1750 1750 750 750
xn 2500 xp 2500
env=2 50 50 450 450
xn 500 xp 500
=> Creating model 'EBD'
EBD(
  (embedings): Embedding(2, 1)
)
=> Parallelizing on [0] gpus
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:01<00:38,  1.55s/it] 19%|#9        | 5/26 [00:01<00:05,  3.90it/s] 35%|###4      | 9/26 [00:01<00:02,  7.60it/s] 50%|#####     | 13/26 [00:01<00:01, 11.58it/s] 65%|######5   | 17/26 [00:02<00:00, 15.78it/s] 81%|########  | 21/26 [00:02<00:00, 19.77it/s] 96%|#########6| 25/26 [00:02<00:00, 23.08it/s]100%|##########| 26/26 [00:02<00:00,  9.94it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 0 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 2 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 3 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 4 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 5 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 6 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 7 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 8 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 9 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 10 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 11 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 12 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 13 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 14 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 15 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 16 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 17 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 18 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 19 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 20 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 21 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 22 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 23 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 24 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 25 400
penalty weights 0.0
Epoch: [0][  26/  26]	Loss 9.451 (12.286)	train_nll   0.42 (  0.59)	train_penalty   0.07 (  0.29)	weight_norm   9.03 ( 11.70)	train_acc   0.84 (  0.78)	train_minacc   0.03 (  0.14)	train_majacc   1.00 (  0.89)	train_corr   0.00 (  0.00)	l1 7.4378 (7.6267)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 17.46it/s] 27%|##6       | 7/26 [00:00<00:00, 34.99it/s]                                               27%|##6       | 7/26 [00:00<00:00, 34.99it/s] 50%|#####     | 13/26 [00:00<00:00, 43.02it/s] 69%|######9   | 18/26 [00:00<00:00, 45.46it/s]                                                69%|######9   | 18/26 [00:00<00:00, 45.46it/s] 92%|#########2| 24/26 [00:00<00:00, 48.16it/s]100%|##########| 26/26 [00:00<00:00, 40.67it/s]
Test: [   0/  26]	Loss 0.514 (0.514)	test_acc   0.78 (  0.78)	test_minacc   0.00 (  0.00)	test_majacc   0.98 (  0.98)	Loss_d 0.514 (0.514)	test_acc_d   0.78 (  0.78)	test_minacc_d   0.00 (  0.00)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.96 (  0.96)
Test: [  10/  26]	Loss 0.392 (0.412)	test_acc   0.86 (  0.84)	test_minacc   0.04 (  0.02)	test_majacc   1.00 (  0.99)	Loss_d 0.392 (0.412)	test_acc_d   0.86 (  0.84)	test_minacc_d   0.04 (  0.02)	test_majacc_d   1.00 (  0.99)	test_corr_d   0.97 (  0.97)
Test: [  20/  26]	Loss 0.434 (0.411)	test_acc   0.84 (  0.85)	test_minacc   0.04 (  0.02)	test_majacc   1.00 (  0.99)	Loss_d 0.434 (0.411)	test_acc_d   0.84 (  0.85)	test_minacc_d   0.04 (  0.02)	test_majacc_d   1.00 (  0.99)	test_corr_d   0.97 (  0.97)
Test: [  26/  26]	Loss 0.418 (0.410)	test_acc   0.84 (  0.85)	test_minacc   0.03 (  0.02)	test_majacc   1.00 (  0.99)	Loss_d 0.418 (0.410)	test_acc_d   0.84 (  0.85)	test_minacc_d   0.03 (  0.02)	test_majacc_d   1.00 (  0.99)	test_corr_d   0.98 (  0.97)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00,  2.55it/s]100%|##########| 1/1 [00:00<00:00,  2.55it/s]
Test: [  0/  1]	Loss 1.746 (1.746)	test_acc   0.12 (  0.12)	test_minacc   0.02 (  0.02)	test_majacc   1.00 (  1.00)	Loss_d 1.746 (1.746)	test_acc_d   0.12 (  0.12)	test_minacc_d   0.02 (  0.02)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.94 (  0.94)
Test: [  1/  1]	Loss 1.746 (1.746)	test_acc   0.12 (  0.12)	test_minacc   0.02 (  0.02)	test_majacc   1.00 (  1.00)	Loss_d 1.746 (1.746)	test_acc_d   0.12 (  0.12)	test_minacc_d   0.02 (  0.02)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.94 (  0.94)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/36/checkpoints/model_best.pth
Overall Timing[  0/  1]	epoch_time 0.0748 (0.0748)	validation_time 0.0067 (0.0067)	train_time 0.0653 (0.0653)
record: (train_acc, test_acc) (0.8458000237345695, 0.11900000274181366)
last accs (train_acc, test_acc) (0.8458000237345695, 0.11900000274181366)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.88it/s] 19%|#9        | 5/26 [00:00<00:00, 21.29it/s] 35%|###4      | 9/26 [00:00<00:00, 26.57it/s] 50%|#####     | 13/26 [00:00<00:00, 28.95it/s] 65%|######5   | 17/26 [00:00<00:00, 30.94it/s] 81%|########  | 21/26 [00:00<00:00, 32.25it/s] 96%|#########6| 25/26 [00:00<00:00, 33.17it/s]100%|##########| 26/26 [00:00<00:00, 27.85it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 26 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 27 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 28 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 29 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 30 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 31 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 32 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 33 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 34 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 35 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 36 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 37 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 38 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 39 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 40 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 41 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 42 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 43 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 44 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 45 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 46 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 47 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 48 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 49 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 50 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 51 400
penalty weights 0.0
Epoch: [1][  26/  26]	Loss 4.831 (6.721)	train_nll   0.43 (  0.41)	train_penalty   0.06 (  0.05)	weight_norm   4.40 (  6.31)	train_acc   0.83 (  0.85)	train_minacc   0.00 (  0.03)	train_majacc   0.99 (  0.99)	train_corr   0.00 (  0.00)	l1 7.2894 (7.4300)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.58it/s] 27%|##6       | 7/26 [00:00<00:00, 35.76it/s]                                               27%|##6       | 7/26 [00:00<00:00, 35.76it/s] 50%|#####     | 13/26 [00:00<00:00, 41.93it/s] 73%|#######3  | 19/26 [00:00<00:00, 47.77it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 47.77it/s] 96%|#########6| 25/26 [00:00<00:00, 47.58it/s]100%|##########| 26/26 [00:00<00:00, 39.99it/s]
Test: [   0/  26]	Loss 0.494 (0.494)	test_acc   0.80 (  0.80)	test_minacc   0.00 (  0.00)	test_majacc   1.00 (  1.00)	Loss_d 0.494 (0.494)	test_acc_d   0.80 (  0.80)	test_minacc_d   0.00 (  0.00)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.99 (  0.99)
Test: [  10/  26]	Loss 0.395 (0.410)	test_acc   0.85 (  0.85)	test_minacc   0.00 (  0.00)	test_majacc   1.00 (  1.00)	Loss_d 0.395 (0.410)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.00 (  0.00)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.99 (  0.99)
Test: [  20/  26]	Loss 0.430 (0.408)	test_acc   0.83 (  0.85)	test_minacc   0.01 (  0.00)	test_majacc   1.00 (  1.00)	Loss_d 0.430 (0.408)	test_acc_d   0.83 (  0.85)	test_minacc_d   0.01 (  0.00)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.98 (  0.99)
Test: [  26/  26]	Loss 0.415 (0.407)	test_acc   0.84 (  0.85)	test_minacc   0.03 (  0.00)	test_majacc   1.00 (  1.00)	Loss_d 0.415 (0.407)	test_acc_d   0.84 (  0.85)	test_minacc_d   0.03 (  0.00)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.98 (  0.99)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 67.04it/s]
Test: [  0/  1]	Loss 1.612 (1.612)	test_acc   0.11 (  0.11)	test_minacc   0.01 (  0.01)	test_majacc   1.00 (  1.00)	Loss_d 1.612 (1.612)	test_acc_d   0.11 (  0.11)	test_minacc_d   0.01 (  0.01)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.98 (  0.98)
Test: [  1/  1]	Loss 1.612 (1.612)	test_acc   0.11 (  0.11)	test_minacc   0.01 (  0.01)	test_majacc   1.00 (  1.00)	Loss_d 1.612 (1.612)	test_acc_d   0.11 (  0.11)	test_minacc_d   0.01 (  0.01)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.98 (  0.98)
Overall Timing[  1/  1]	epoch_time 0.0365 (0.0556)	validation_time 0.0004 (0.0035)	train_time 0.0361 (0.0507)
record: (train_acc, test_acc) (0.8458000237345695, 0.11900000274181366)
last accs (train_acc, test_acc) (0.8482000282406807, 0.10500000417232513)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.15it/s] 19%|#9        | 5/26 [00:00<00:00, 22.27it/s] 35%|###4      | 9/26 [00:00<00:00, 27.40it/s] 46%|####6     | 12/26 [00:00<00:00, 27.94it/s] 62%|######1   | 16/26 [00:00<00:00, 30.36it/s] 77%|#######6  | 20/26 [00:00<00:00, 32.07it/s] 92%|#########2| 24/26 [00:00<00:00, 32.80it/s]100%|##########| 26/26 [00:00<00:00, 27.63it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 52 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 53 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 54 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 55 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 56 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 57 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 58 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 59 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 60 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 61 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 62 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 63 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 64 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 65 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 66 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 67 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 68 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 69 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 70 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 71 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 72 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 73 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 74 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 75 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 76 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 77 400
penalty weights 0.0
Epoch: [2][  26/  26]	Loss 2.951 (3.720)	train_nll   0.41 (  0.40)	train_penalty   0.06 (  0.05)	weight_norm   2.54 (  3.32)	train_acc   0.84 (  0.85)	train_minacc   0.00 (  0.06)	train_majacc   1.00 (  0.99)	train_corr   0.00 (  0.00)	l1 6.2424 (6.7249)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 19.74it/s] 31%|###       | 8/26 [00:00<00:00, 43.29it/s]                                               31%|###       | 8/26 [00:00<00:00, 43.29it/s] 50%|#####     | 13/26 [00:00<00:00, 43.47it/s] 69%|######9   | 18/26 [00:00<00:00, 45.78it/s]                                                69%|######9   | 18/26 [00:00<00:00, 45.78it/s] 92%|#########2| 24/26 [00:00<00:00, 48.97it/s]100%|##########| 26/26 [00:00<00:00, 42.16it/s]
Test: [   0/  26]	Loss 0.497 (0.497)	test_acc   0.79 (  0.79)	test_minacc   0.00 (  0.00)	test_majacc   1.00 (  1.00)	Loss_d 0.497 (0.497)	test_acc_d   0.79 (  0.79)	test_minacc_d   0.00 (  0.00)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.97 (  0.97)
Test: [  10/  26]	Loss 0.380 (0.401)	test_acc   0.85 (  0.85)	test_minacc   0.00 (  0.00)	test_majacc   1.00 (  1.00)	Loss_d 0.380 (0.401)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.00 (  0.00)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.98 (  0.98)
Test: [  20/  26]	Loss 0.431 (0.399)	test_acc   0.83 (  0.85)	test_minacc   0.01 (  0.00)	test_majacc   0.99 (  1.00)	Loss_d 0.431 (0.399)	test_acc_d   0.83 (  0.85)	test_minacc_d   0.01 (  0.00)	test_majacc_d   0.99 (  1.00)	test_corr_d   0.97 (  0.98)
Test: [  26/  26]	Loss 0.406 (0.397)	test_acc   0.84 (  0.85)	test_minacc   0.00 (  0.00)	test_majacc   1.00 (  1.00)	Loss_d 0.406 (0.397)	test_acc_d   0.84 (  0.85)	test_minacc_d   0.00 (  0.00)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.98 (  0.98)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 64.56it/s]
Test: [  0/  1]	Loss 1.648 (1.648)	test_acc   0.11 (  0.11)	test_minacc   0.01 (  0.01)	test_majacc   1.00 (  1.00)	Loss_d 1.648 (1.648)	test_acc_d   0.11 (  0.11)	test_minacc_d   0.01 (  0.01)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.96 (  0.96)
Test: [  1/  1]	Loss 1.648 (1.648)	test_acc   0.11 (  0.11)	test_minacc   0.01 (  0.01)	test_majacc   1.00 (  1.00)	Loss_d 1.648 (1.648)	test_acc_d   0.11 (  0.11)	test_minacc_d   0.01 (  0.01)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.96 (  0.96)
Overall Timing[  2/  1]	epoch_time 0.0377 (0.0497)	validation_time 0.0004 (0.0025)	train_time 0.0372 (0.0462)
record: (train_acc, test_acc) (0.8458000237345695, 0.11900000274181366)
last accs (train_acc, test_acc) (0.8482000282406807, 0.10500000417232513)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.57it/s] 19%|#9        | 5/26 [00:00<00:01, 20.49it/s] 35%|###4      | 9/26 [00:00<00:00, 26.48it/s] 50%|#####     | 13/26 [00:00<00:00, 29.80it/s] 65%|######5   | 17/26 [00:00<00:00, 31.34it/s] 81%|########  | 21/26 [00:00<00:00, 32.27it/s] 96%|#########6| 25/26 [00:00<00:00, 32.81it/s]100%|##########| 26/26 [00:00<00:00, 27.39it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 78 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 79 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 80 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 81 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 82 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 83 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 84 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 85 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 86 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 87 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 88 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 89 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 90 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 91 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 92 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 93 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 94 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 95 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 96 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 97 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 98 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 99 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 100 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 101 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 102 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 103 400
penalty weights 0.0
Epoch: [3][  26/  26]	Loss 1.992 (2.395)	train_nll   0.40 (  0.39)	train_penalty   0.06 (  0.05)	weight_norm   1.59 (  2.01)	train_acc   0.84 (  0.85)	train_minacc   0.00 (  0.07)	train_majacc   1.00 (  0.99)	train_corr   0.00 (  0.00)	l1 5.4013 (5.6846)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.75it/s] 23%|##3       | 6/26 [00:00<00:00, 30.10it/s]                                               23%|##3       | 6/26 [00:00<00:00, 30.10it/s] 46%|####6     | 12/26 [00:00<00:00, 38.31it/s] 69%|######9   | 18/26 [00:00<00:00, 45.86it/s]                                                69%|######9   | 18/26 [00:00<00:00, 45.86it/s] 92%|#########2| 24/26 [00:00<00:00, 46.23it/s]100%|##########| 26/26 [00:00<00:00, 38.86it/s]
Test: [   0/  26]	Loss 0.479 (0.479)	test_acc   0.80 (  0.80)	test_minacc   0.03 (  0.03)	test_majacc   0.99 (  0.99)	Loss_d 0.479 (0.479)	test_acc_d   0.80 (  0.80)	test_minacc_d   0.03 (  0.03)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.96 (  0.96)
Test: [  10/  26]	Loss 0.367 (0.383)	test_acc   0.85 (  0.85)	test_minacc   0.05 (  0.03)	test_majacc   0.98 (  0.99)	Loss_d 0.367 (0.383)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.05 (  0.03)	test_majacc_d   0.98 (  0.99)	test_corr_d   0.95 (  0.96)
Test: [  20/  26]	Loss 0.402 (0.376)	test_acc   0.83 (  0.85)	test_minacc   0.03 (  0.03)	test_majacc   0.99 (  0.99)	Loss_d 0.402 (0.376)	test_acc_d   0.83 (  0.85)	test_minacc_d   0.03 (  0.03)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.96 (  0.96)
Test: [  26/  26]	Loss 0.378 (0.374)	test_acc   0.84 (  0.85)	test_minacc   0.03 (  0.03)	test_majacc   1.00 (  0.99)	Loss_d 0.378 (0.374)	test_acc_d   0.84 (  0.85)	test_minacc_d   0.03 (  0.03)	test_majacc_d   1.00 (  0.99)	test_corr_d   0.96 (  0.96)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.04it/s]
Test: [  0/  1]	Loss 1.628 (1.628)	test_acc   0.14 (  0.14)	test_minacc   0.05 (  0.05)	test_majacc   1.00 (  1.00)	Loss_d 1.628 (1.628)	test_acc_d   0.14 (  0.14)	test_minacc_d   0.05 (  0.05)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.91 (  0.91)
Test: [  1/  1]	Loss 1.628 (1.628)	test_acc   0.14 (  0.14)	test_minacc   0.05 (  0.05)	test_majacc   1.00 (  1.00)	Loss_d 1.628 (1.628)	test_acc_d   0.14 (  0.14)	test_minacc_d   0.05 (  0.05)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.91 (  0.91)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/36/checkpoints/model_best.pth
Overall Timing[  3/  1]	epoch_time 0.0362 (0.0463)	validation_time 0.0003 (0.0020)	train_time 0.0358 (0.0436)
record: (train_acc, test_acc) (0.8498000327944756, 0.14100000262260437)
last accs (train_acc, test_acc) (0.8498000327944756, 0.14100000262260437)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 17.21it/s] 23%|##3       | 6/26 [00:00<00:00, 27.77it/s] 38%|###8      | 10/26 [00:00<00:00, 31.33it/s] 54%|#####3    | 14/26 [00:00<00:00, 33.28it/s] 69%|######9   | 18/26 [00:00<00:00, 34.34it/s] 85%|########4 | 22/26 [00:00<00:00, 35.27it/s]100%|##########| 26/26 [00:00<00:00, 35.34it/s]100%|##########| 26/26 [00:00<00:00, 30.73it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 104 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 105 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 106 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 107 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 108 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 109 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 110 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 111 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 112 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 113 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 114 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 115 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 116 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 117 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 118 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 119 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 120 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 121 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 122 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 123 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 124 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 125 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 126 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 127 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 128 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 129 400
penalty weights 0.0
Epoch: [4][  26/  26]	Loss 1.430 (1.661)	train_nll   0.39 (  0.37)	train_penalty   0.05 (  0.04)	weight_norm   1.04 (  1.29)	train_acc   0.84 (  0.85)	train_minacc   0.00 (  0.08)	train_majacc   1.00 (  0.98)	train_corr   0.00 (  0.00)	l1 5.7017 (5.5895)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.67it/s] 23%|##3       | 6/26 [00:00<00:00, 33.05it/s]                                               23%|##3       | 6/26 [00:00<00:00, 33.05it/s] 46%|####6     | 12/26 [00:00<00:00, 43.65it/s] 65%|######5   | 17/26 [00:00<00:00, 43.85it/s]                                                65%|######5   | 17/26 [00:00<00:00, 43.85it/s] 88%|########8 | 23/26 [00:00<00:00, 48.60it/s]100%|##########| 26/26 [00:00<00:00, 39.32it/s]
Test: [   0/  26]	Loss 0.458 (0.458)	test_acc   0.80 (  0.80)	test_minacc   0.01 (  0.01)	test_majacc   1.00 (  1.00)	Loss_d 0.458 (0.458)	test_acc_d   0.80 (  0.80)	test_minacc_d   0.01 (  0.01)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.96 (  0.96)
Test: [  10/  26]	Loss 0.355 (0.373)	test_acc   0.85 (  0.85)	test_minacc   0.00 (  0.02)	test_majacc   1.00 (  1.00)	Loss_d 0.355 (0.373)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.00 (  0.02)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.96 (  0.96)
Test: [  20/  26]	Loss 0.400 (0.370)	test_acc   0.83 (  0.85)	test_minacc   0.01 (  0.02)	test_majacc   0.99 (  1.00)	Loss_d 0.400 (0.370)	test_acc_d   0.83 (  0.85)	test_minacc_d   0.01 (  0.02)	test_majacc_d   0.99 (  1.00)	test_corr_d   0.96 (  0.96)
Test: [  26/  26]	Loss 0.369 (0.369)	test_acc   0.84 (  0.85)	test_minacc   0.03 (  0.02)	test_majacc   1.00 (  1.00)	Loss_d 0.369 (0.369)	test_acc_d   0.84 (  0.85)	test_minacc_d   0.03 (  0.02)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.96 (  0.96)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.09it/s]
Test: [  0/  1]	Loss 1.603 (1.603)	test_acc   0.13 (  0.13)	test_minacc   0.03 (  0.03)	test_majacc   1.00 (  1.00)	Loss_d 1.603 (1.603)	test_acc_d   0.13 (  0.13)	test_minacc_d   0.03 (  0.03)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.91 (  0.91)
Test: [  1/  1]	Loss 1.603 (1.603)	test_acc   0.13 (  0.13)	test_minacc   0.03 (  0.03)	test_majacc   1.00 (  1.00)	Loss_d 1.603 (1.603)	test_acc_d   0.13 (  0.13)	test_minacc_d   0.03 (  0.03)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.91 (  0.91)
Overall Timing[  4/  1]	epoch_time 0.0368 (0.0444)	validation_time 0.0004 (0.0016)	train_time 0.0364 (0.0422)
record: (train_acc, test_acc) (0.8498000327944756, 0.14100000262260437)
last accs (train_acc, test_acc) (0.8506000248193741, 0.12700000405311584)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.62it/s] 15%|#5        | 4/26 [00:00<00:01, 21.04it/s] 31%|###       | 8/26 [00:00<00:00, 27.20it/s] 46%|####6     | 12/26 [00:00<00:00, 30.28it/s] 62%|######1   | 16/26 [00:00<00:00, 32.11it/s] 77%|#######6  | 20/26 [00:00<00:00, 33.09it/s] 92%|#########2| 24/26 [00:00<00:00, 33.58it/s]100%|##########| 26/26 [00:00<00:00, 28.63it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 130 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 131 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 132 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 133 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 134 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 135 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 136 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 137 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 138 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 139 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 140 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 141 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 142 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 143 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 144 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 145 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 146 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 147 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 148 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 149 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 150 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 151 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 152 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 153 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 154 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 155 400
penalty weights 0.0
Epoch: [5][  26/  26]	Loss 1.049 (1.210)	train_nll   0.36 (  0.36)	train_penalty   0.03 (  0.03)	weight_norm   0.69 (  0.85)	train_acc   0.84 (  0.85)	train_minacc   0.00 (  0.14)	train_majacc   1.00 (  0.98)	train_corr   0.00 (  0.00)	l1 6.4875 (6.1898)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.46it/s] 27%|##6       | 7/26 [00:00<00:00, 36.38it/s]                                               27%|##6       | 7/26 [00:00<00:00, 36.38it/s] 50%|#####     | 13/26 [00:00<00:00, 40.89it/s] 73%|#######3  | 19/26 [00:00<00:00, 47.04it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 47.04it/s] 96%|#########6| 25/26 [00:00<00:00, 47.34it/s]100%|##########| 26/26 [00:00<00:00, 39.80it/s]
Test: [   0/  26]	Loss 0.440 (0.440)	test_acc   0.82 (  0.82)	test_minacc   0.28 (  0.28)	test_majacc   0.95 (  0.95)	Loss_d 0.440 (0.440)	test_acc_d   0.82 (  0.82)	test_minacc_d   0.28 (  0.28)	test_majacc_d   0.95 (  0.95)	test_corr_d   0.85 (  0.85)
Test: [  10/  26]	Loss 0.350 (0.362)	test_acc   0.85 (  0.85)	test_minacc   0.33 (  0.31)	test_majacc   0.94 (  0.95)	Loss_d 0.350 (0.362)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.33 (  0.31)	test_majacc_d   0.94 (  0.95)	test_corr_d   0.85 (  0.85)
Test: [  20/  26]	Loss 0.389 (0.358)	test_acc   0.84 (  0.85)	test_minacc   0.39 (  0.32)	test_majacc   0.94 (  0.95)	Loss_d 0.389 (0.358)	test_acc_d   0.84 (  0.85)	test_minacc_d   0.39 (  0.32)	test_majacc_d   0.94 (  0.95)	test_corr_d   0.83 (  0.85)
Test: [  26/  26]	Loss 0.331 (0.357)	test_acc   0.85 (  0.86)	test_minacc   0.28 (  0.32)	test_majacc   0.96 (  0.95)	Loss_d 0.331 (0.357)	test_acc_d   0.85 (  0.86)	test_minacc_d   0.28 (  0.32)	test_majacc_d   0.96 (  0.95)	test_corr_d   0.87 (  0.85)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 65.72it/s]
Test: [  0/  1]	Loss 1.248 (1.248)	test_acc   0.40 (  0.40)	test_minacc   0.34 (  0.34)	test_majacc   0.94 (  0.94)	Loss_d 1.248 (1.248)	test_acc_d   0.40 (  0.40)	test_minacc_d   0.34 (  0.34)	test_majacc_d   0.94 (  0.94)	test_corr_d   0.52 (  0.52)
Test: [  1/  1]	Loss 1.248 (1.248)	test_acc   0.40 (  0.40)	test_minacc   0.34 (  0.34)	test_majacc   0.94 (  0.94)	Loss_d 1.248 (1.248)	test_acc_d   0.40 (  0.40)	test_minacc_d   0.34 (  0.34)	test_majacc_d   0.94 (  0.94)	test_corr_d   0.52 (  0.52)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/36/checkpoints/model_best.pth
Overall Timing[  5/  1]	epoch_time 0.0361 (0.0430)	validation_time 0.0004 (0.0014)	train_time 0.0356 (0.0411)
record: (train_acc, test_acc) (0.8557000200748444, 0.39900001883506775)
last accs (train_acc, test_acc) (0.8557000200748444, 0.39900001883506775)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.27it/s] 19%|#9        | 5/26 [00:00<00:00, 22.97it/s] 35%|###4      | 9/26 [00:00<00:00, 27.93it/s] 50%|#####     | 13/26 [00:00<00:00, 29.89it/s] 65%|######5   | 17/26 [00:00<00:00, 31.56it/s] 81%|########  | 21/26 [00:00<00:00, 32.46it/s] 96%|#########6| 25/26 [00:00<00:00, 33.00it/s]100%|##########| 26/26 [00:00<00:00, 28.35it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 156 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 157 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 158 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 159 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 160 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 161 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 162 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 163 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 164 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 165 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 166 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 167 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 168 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 169 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 170 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 171 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 172 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 173 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 174 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 175 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 176 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 177 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 178 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 179 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 180 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 181 400
penalty weights 0.0
Epoch: [6][  26/  26]	Loss 0.824 (0.929)	train_nll   0.35 (  0.36)	train_penalty   0.03 (  0.03)	weight_norm   0.47 (  0.57)	train_acc   0.84 (  0.85)	train_minacc   0.05 (  0.14)	train_majacc   1.00 (  0.97)	train_corr   0.00 (  0.00)	l1 7.3700 (7.0130)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.30it/s] 27%|##6       | 7/26 [00:00<00:00, 37.95it/s]                                               27%|##6       | 7/26 [00:00<00:00, 37.95it/s] 50%|#####     | 13/26 [00:00<00:00, 43.59it/s] 73%|#######3  | 19/26 [00:00<00:00, 49.31it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 49.31it/s] 96%|#########6| 25/26 [00:00<00:00, 48.68it/s]100%|##########| 26/26 [00:00<00:00, 40.94it/s]
Test: [   0/  26]	Loss 0.423 (0.423)	test_acc   0.81 (  0.81)	test_minacc   0.11 (  0.11)	test_majacc   0.99 (  0.99)	Loss_d 0.423 (0.423)	test_acc_d   0.81 (  0.81)	test_minacc_d   0.11 (  0.11)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.91 (  0.91)
Test: [  10/  26]	Loss 0.327 (0.334)	test_acc   0.85 (  0.85)	test_minacc   0.11 (  0.14)	test_majacc   0.98 (  0.98)	Loss_d 0.327 (0.334)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.11 (  0.14)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.90 (  0.90)
Test: [  20/  26]	Loss 0.350 (0.329)	test_acc   0.84 (  0.86)	test_minacc   0.15 (  0.15)	test_majacc   0.98 (  0.98)	Loss_d 0.350 (0.329)	test_acc_d   0.84 (  0.86)	test_minacc_d   0.15 (  0.15)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.90 (  0.90)
Test: [  26/  26]	Loss 0.318 (0.327)	test_acc   0.84 (  0.86)	test_minacc   0.05 (  0.14)	test_majacc   0.99 (  0.98)	Loss_d 0.318 (0.327)	test_acc_d   0.84 (  0.86)	test_minacc_d   0.05 (  0.14)	test_majacc_d   0.99 (  0.98)	test_corr_d   0.91 (  0.90)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 67.12it/s]
Test: [  0/  1]	Loss 1.506 (1.506)	test_acc   0.25 (  0.25)	test_minacc   0.17 (  0.17)	test_majacc   0.99 (  0.99)	Loss_d 1.506 (1.506)	test_acc_d   0.25 (  0.25)	test_minacc_d   0.17 (  0.17)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.68 (  0.68)
Test: [  1/  1]	Loss 1.506 (1.506)	test_acc   0.25 (  0.25)	test_minacc   0.17 (  0.17)	test_majacc   0.99 (  0.99)	Loss_d 1.506 (1.506)	test_acc_d   0.25 (  0.25)	test_minacc_d   0.17 (  0.17)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.68 (  0.68)
Overall Timing[  6/  1]	epoch_time 0.0357 (0.0420)	validation_time 0.0004 (0.0013)	train_time 0.0353 (0.0402)
record: (train_acc, test_acc) (0.8557000200748444, 0.39900001883506775)
last accs (train_acc, test_acc) (0.8575000251531602, 0.24800001084804535)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.54it/s] 19%|#9        | 5/26 [00:00<00:00, 23.95it/s] 35%|###4      | 9/26 [00:00<00:00, 28.94it/s] 50%|#####     | 13/26 [00:00<00:00, 31.29it/s] 65%|######5   | 17/26 [00:00<00:00, 31.26it/s] 81%|########  | 21/26 [00:00<00:00, 32.62it/s] 96%|#########6| 25/26 [00:00<00:00, 33.36it/s]100%|##########| 26/26 [00:00<00:00, 28.91it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 182 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 183 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 184 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 185 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 186 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 187 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 188 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 189 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 190 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 191 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 192 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 193 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 194 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 195 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 196 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 197 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 198 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 199 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 200 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 201 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 202 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 203 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 204 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 205 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 206 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 207 400
penalty weights 0.0
Epoch: [7][  26/  26]	Loss 0.689 (0.723)	train_nll   0.38 (  0.35)	train_penalty   0.05 (  0.03)	weight_norm   0.31 (  0.38)	train_acc   0.84 (  0.85)	train_minacc   0.00 (  0.21)	train_majacc   1.00 (  0.97)	train_corr   0.00 (  0.00)	l1 9.5154 (8.5152)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.95it/s] 27%|##6       | 7/26 [00:00<00:00, 28.36it/s]                                               27%|##6       | 7/26 [00:00<00:00, 28.36it/s] 50%|#####     | 13/26 [00:00<00:00, 37.41it/s] 73%|#######3  | 19/26 [00:00<00:00, 44.54it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 44.54it/s] 96%|#########6| 25/26 [00:00<00:00, 45.96it/s]100%|##########| 26/26 [00:00<00:00, 36.59it/s]
Test: [   0/  26]	Loss 0.423 (0.423)	test_acc   0.80 (  0.80)	test_minacc   0.01 (  0.01)	test_majacc   1.00 (  1.00)	Loss_d 0.423 (0.423)	test_acc_d   0.80 (  0.80)	test_minacc_d   0.01 (  0.01)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.94 (  0.94)
Test: [  10/  26]	Loss 0.316 (0.343)	test_acc   0.85 (  0.85)	test_minacc   0.02 (  0.04)	test_majacc   1.00 (  1.00)	Loss_d 0.316 (0.343)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.02 (  0.04)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.94 (  0.94)
Test: [  20/  26]	Loss 0.365 (0.339)	test_acc   0.83 (  0.85)	test_minacc   0.03 (  0.04)	test_majacc   1.00 (  1.00)	Loss_d 0.365 (0.339)	test_acc_d   0.83 (  0.85)	test_minacc_d   0.03 (  0.04)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.94 (  0.94)
Test: [  26/  26]	Loss 0.334 (0.337)	test_acc   0.85 (  0.85)	test_minacc   0.05 (  0.04)	test_majacc   1.00 (  1.00)	Loss_d 0.334 (0.337)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.05 (  0.04)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.94 (  0.94)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 58.29it/s]
Test: [  0/  1]	Loss 1.522 (1.522)	test_acc   0.18 (  0.18)	test_minacc   0.09 (  0.09)	test_majacc   1.00 (  1.00)	Loss_d 1.522 (1.522)	test_acc_d   0.18 (  0.18)	test_minacc_d   0.09 (  0.09)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.82 (  0.82)
Test: [  1/  1]	Loss 1.522 (1.522)	test_acc   0.18 (  0.18)	test_minacc   0.09 (  0.09)	test_majacc   1.00 (  1.00)	Loss_d 1.522 (1.522)	test_acc_d   0.18 (  0.18)	test_minacc_d   0.09 (  0.09)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.82 (  0.82)
Overall Timing[  7/  1]	epoch_time 0.0366 (0.0413)	validation_time 0.0004 (0.0012)	train_time 0.0363 (0.0398)
record: (train_acc, test_acc) (0.8557000200748444, 0.39900001883506775)
last accs (train_acc, test_acc) (0.8528000214099885, 0.18200001120567322)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.79it/s] 19%|#9        | 5/26 [00:00<00:01, 19.48it/s] 35%|###4      | 9/26 [00:00<00:00, 25.65it/s] 50%|#####     | 13/26 [00:00<00:00, 28.93it/s] 65%|######5   | 17/26 [00:00<00:00, 31.55it/s] 81%|########  | 21/26 [00:00<00:00, 32.99it/s] 96%|#########6| 25/26 [00:00<00:00, 33.47it/s]100%|##########| 26/26 [00:00<00:00, 27.37it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 208 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 209 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 210 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 211 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 212 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 213 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 214 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 215 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 216 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 217 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 218 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 219 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 220 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 221 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 222 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 223 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 224 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 225 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 226 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 227 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 228 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 229 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 230 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 231 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 232 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 233 400
penalty weights 0.0
Epoch: [8][  26/  26]	Loss 0.585 (0.612)	train_nll   0.36 (  0.34)	train_penalty   0.03 (  0.03)	weight_norm   0.22 (  0.27)	train_acc   0.84 (  0.85)	train_minacc   0.03 (  0.22)	train_majacc   1.00 (  0.97)	train_corr   0.00 (  0.00)	l1 11.2594 (10.6482)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.29it/s] 27%|##6       | 7/26 [00:00<00:00, 36.15it/s]                                               27%|##6       | 7/26 [00:00<00:00, 36.15it/s] 50%|#####     | 13/26 [00:00<00:00, 41.97it/s] 73%|#######3  | 19/26 [00:00<00:00, 47.43it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 47.43it/s] 96%|#########6| 25/26 [00:00<00:00, 47.06it/s]100%|##########| 26/26 [00:00<00:00, 39.64it/s]
Test: [   0/  26]	Loss 0.425 (0.425)	test_acc   0.80 (  0.80)	test_minacc   0.03 (  0.03)	test_majacc   1.00 (  1.00)	Loss_d 0.425 (0.425)	test_acc_d   0.80 (  0.80)	test_minacc_d   0.03 (  0.03)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.95 (  0.95)
Test: [  10/  26]	Loss 0.324 (0.341)	test_acc   0.85 (  0.85)	test_minacc   0.04 (  0.05)	test_majacc   0.99 (  0.99)	Loss_d 0.324 (0.341)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.04 (  0.05)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.95 (  0.95)
Test: [  20/  26]	Loss 0.351 (0.336)	test_acc   0.84 (  0.85)	test_minacc   0.09 (  0.06)	test_majacc   1.00 (  1.00)	Loss_d 0.351 (0.336)	test_acc_d   0.84 (  0.85)	test_minacc_d   0.09 (  0.06)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.94 (  0.95)
Test: [  26/  26]	Loss 0.335 (0.333)	test_acc   0.84 (  0.85)	test_minacc   0.03 (  0.06)	test_majacc   1.00 (  1.00)	Loss_d 0.335 (0.333)	test_acc_d   0.84 (  0.85)	test_minacc_d   0.03 (  0.06)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.95 (  0.95)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.54it/s]
Test: [  0/  1]	Loss 1.587 (1.587)	test_acc   0.17 (  0.17)	test_minacc   0.08 (  0.08)	test_majacc   0.99 (  0.99)	Loss_d 1.587 (1.587)	test_acc_d   0.17 (  0.17)	test_minacc_d   0.08 (  0.08)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.86 (  0.86)
Test: [  1/  1]	Loss 1.587 (1.587)	test_acc   0.17 (  0.17)	test_minacc   0.08 (  0.08)	test_majacc   0.99 (  0.99)	Loss_d 1.587 (1.587)	test_acc_d   0.17 (  0.17)	test_minacc_d   0.08 (  0.08)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.86 (  0.86)
Overall Timing[  8/  1]	epoch_time 0.0356 (0.0407)	validation_time 0.0005 (0.0011)	train_time 0.0351 (0.0392)
record: (train_acc, test_acc) (0.8557000200748444, 0.39900001883506775)
last accs (train_acc, test_acc) (0.8547000234127045, 0.1680000126361847)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:05,  4.89it/s] 19%|#9        | 5/26 [00:00<00:01, 17.53it/s] 35%|###4      | 9/26 [00:00<00:00, 23.84it/s] 50%|#####     | 13/26 [00:00<00:00, 27.72it/s] 65%|######5   | 17/26 [00:00<00:00, 29.98it/s] 81%|########  | 21/26 [00:00<00:00, 31.14it/s] 96%|#########6| 25/26 [00:00<00:00, 32.18it/s]100%|##########| 26/26 [00:01<00:00, 25.78it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 234 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 235 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 236 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 237 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 238 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 239 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 240 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 241 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 242 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 243 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 244 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 245 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 246 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 247 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 248 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 249 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 250 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 251 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 252 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 253 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 254 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 255 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 256 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 257 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 258 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 259 400
penalty weights 0.0
Epoch: [9][  26/  26]	Loss 0.523 (0.527)	train_nll   0.36 (  0.33)	train_penalty   0.05 (  0.02)	weight_norm   0.16 (  0.20)	train_acc   0.84 (  0.85)	train_minacc   0.03 (  0.21)	train_majacc   1.00 (  0.97)	train_corr   0.00 (  0.00)	l1 13.6077 (12.5277)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 18.46it/s] 31%|###       | 8/26 [00:00<00:00, 40.92it/s]                                               31%|###       | 8/26 [00:00<00:00, 40.92it/s] 50%|#####     | 13/26 [00:00<00:00, 42.20it/s] 73%|#######3  | 19/26 [00:00<00:00, 46.63it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 46.63it/s] 96%|#########6| 25/26 [00:00<00:00, 48.69it/s]100%|##########| 26/26 [00:00<00:00, 41.35it/s]
Test: [   0/  26]	Loss 0.412 (0.412)	test_acc   0.82 (  0.82)	test_minacc   0.22 (  0.22)	test_majacc   0.98 (  0.98)	Loss_d 0.412 (0.412)	test_acc_d   0.82 (  0.82)	test_minacc_d   0.22 (  0.22)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.87 (  0.87)
Test: [  10/  26]	Loss 0.324 (0.340)	test_acc   0.86 (  0.86)	test_minacc   0.23 (  0.24)	test_majacc   0.96 (  0.96)	Loss_d 0.324 (0.340)	test_acc_d   0.86 (  0.86)	test_minacc_d   0.23 (  0.24)	test_majacc_d   0.96 (  0.96)	test_corr_d   0.87 (  0.87)
Test: [  20/  26]	Loss 0.345 (0.332)	test_acc   0.85 (  0.86)	test_minacc   0.30 (  0.26)	test_majacc   0.97 (  0.97)	Loss_d 0.345 (0.332)	test_acc_d   0.85 (  0.86)	test_minacc_d   0.30 (  0.26)	test_majacc_d   0.97 (  0.97)	test_corr_d   0.86 (  0.87)
Test: [  26/  26]	Loss 0.313 (0.332)	test_acc   0.86 (  0.86)	test_minacc   0.30 (  0.27)	test_majacc   0.97 (  0.97)	Loss_d 0.313 (0.332)	test_acc_d   0.86 (  0.86)	test_minacc_d   0.30 (  0.27)	test_majacc_d   0.97 (  0.97)	test_corr_d   0.87 (  0.86)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.82it/s]
Test: [  0/  1]	Loss 1.283 (1.283)	test_acc   0.34 (  0.34)	test_minacc   0.27 (  0.27)	test_majacc   0.93 (  0.93)	Loss_d 1.283 (1.283)	test_acc_d   0.34 (  0.34)	test_minacc_d   0.27 (  0.27)	test_majacc_d   0.93 (  0.93)	test_corr_d   0.56 (  0.56)
Test: [  1/  1]	Loss 1.283 (1.283)	test_acc   0.34 (  0.34)	test_minacc   0.27 (  0.27)	test_majacc   0.93 (  0.93)	Loss_d 1.283 (1.283)	test_acc_d   0.34 (  0.34)	test_minacc_d   0.27 (  0.27)	test_majacc_d   0.93 (  0.93)	test_corr_d   0.56 (  0.56)
Overall Timing[  9/  1]	epoch_time 0.0375 (0.0403)	validation_time 0.0003 (0.0010)	train_time 0.0371 (0.0390)
record: (train_acc, test_acc) (0.8557000200748444, 0.39900001883506775)
last accs (train_acc, test_acc) (0.8597000261545181, 0.3370000123977661)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.49it/s] 19%|#9        | 5/26 [00:00<00:00, 21.69it/s] 35%|###4      | 9/26 [00:00<00:00, 26.54it/s] 50%|#####     | 13/26 [00:00<00:00, 29.74it/s] 65%|######5   | 17/26 [00:00<00:00, 31.57it/s] 81%|########  | 21/26 [00:00<00:00, 32.64it/s] 96%|#########6| 25/26 [00:00<00:00, 33.18it/s]100%|##########| 26/26 [00:00<00:00, 27.78it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 260 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 261 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 262 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 263 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 264 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 265 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 266 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 267 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 268 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 269 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 270 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 271 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 272 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 273 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 274 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 275 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 276 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 277 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 278 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 279 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 280 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 281 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 282 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 283 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 284 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 285 400
penalty weights 0.0
Epoch: [10][  26/  26]	Loss 0.482 (0.497)	train_nll   0.34 (  0.33)	train_penalty   0.03 (  0.02)	weight_norm   0.14 (  0.16)	train_acc   0.84 (  0.86)	train_minacc   0.05 (  0.28)	train_majacc   1.00 (  0.96)	train_corr   0.00 (  0.00)	l1 15.4322 (14.5940)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.60it/s] 19%|#9        | 5/26 [00:00<00:00, 26.13it/s]                                               19%|#9        | 5/26 [00:00<00:00, 26.13it/s] 42%|####2     | 11/26 [00:00<00:00, 40.49it/s] 62%|######1   | 16/26 [00:00<00:00, 42.59it/s]                                                62%|######1   | 16/26 [00:00<00:00, 42.59it/s] 85%|########4 | 22/26 [00:00<00:00, 47.29it/s]100%|##########| 26/26 [00:00<00:00, 39.11it/s]
Test: [   0/  26]	Loss 0.399 (0.399)	test_acc   0.82 (  0.82)	test_minacc   0.11 (  0.11)	test_majacc   0.99 (  0.99)	Loss_d 0.399 (0.399)	test_acc_d   0.82 (  0.82)	test_minacc_d   0.11 (  0.11)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.92 (  0.92)
Test: [  10/  26]	Loss 0.314 (0.324)	test_acc   0.85 (  0.85)	test_minacc   0.11 (  0.13)	test_majacc   0.98 (  0.98)	Loss_d 0.314 (0.324)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.11 (  0.13)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.92 (  0.92)
Test: [  20/  26]	Loss 0.330 (0.317)	test_acc   0.85 (  0.86)	test_minacc   0.16 (  0.15)	test_majacc   0.99 (  0.99)	Loss_d 0.330 (0.317)	test_acc_d   0.85 (  0.86)	test_minacc_d   0.16 (  0.15)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.92 (  0.92)
Test: [  26/  26]	Loss 0.292 (0.315)	test_acc   0.86 (  0.86)	test_minacc   0.20 (  0.16)	test_majacc   0.99 (  0.99)	Loss_d 0.292 (0.315)	test_acc_d   0.86 (  0.86)	test_minacc_d   0.20 (  0.16)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.92 (  0.92)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.30it/s]
Test: [  0/  1]	Loss 1.492 (1.492)	test_acc   0.24 (  0.24)	test_minacc   0.16 (  0.16)	test_majacc   0.97 (  0.97)	Loss_d 1.492 (1.492)	test_acc_d   0.24 (  0.24)	test_minacc_d   0.16 (  0.16)	test_majacc_d   0.97 (  0.97)	test_corr_d   0.71 (  0.71)
Test: [  1/  1]	Loss 1.492 (1.492)	test_acc   0.24 (  0.24)	test_minacc   0.16 (  0.16)	test_majacc   0.97 (  0.97)	Loss_d 1.492 (1.492)	test_acc_d   0.24 (  0.24)	test_minacc_d   0.16 (  0.16)	test_majacc_d   0.97 (  0.97)	test_corr_d   0.71 (  0.71)
Overall Timing[ 10/  1]	epoch_time 0.0366 (0.0400)	validation_time 0.0004 (0.0010)	train_time 0.0361 (0.0388)
record: (train_acc, test_acc) (0.8557000200748444, 0.39900001883506775)
last accs (train_acc, test_acc) (0.8607000214457512, 0.2410000115633011)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 15.79it/s] 23%|##3       | 6/26 [00:00<00:00, 26.42it/s] 38%|###8      | 10/26 [00:00<00:00, 29.77it/s] 54%|#####3    | 14/26 [00:00<00:00, 31.57it/s] 69%|######9   | 18/26 [00:00<00:00, 32.73it/s] 85%|########4 | 22/26 [00:00<00:00, 33.47it/s]100%|##########| 26/26 [00:00<00:00, 34.07it/s]100%|##########| 26/26 [00:00<00:00, 29.39it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 286 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 287 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 288 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 289 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 290 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 291 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 292 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 293 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 294 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 295 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 296 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 297 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 298 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 299 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 300 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 301 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 302 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 303 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 304 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 305 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 306 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 307 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 308 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 309 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 310 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 311 400
penalty weights 0.0
Epoch: [11][  26/  26]	Loss 0.493 (0.465)	train_nll   0.37 (  0.33)	train_penalty   0.05 (  0.02)	weight_norm   0.12 (  0.13)	train_acc   0.84 (  0.86)	train_minacc   0.00 (  0.29)	train_majacc   1.00 (  0.96)	train_corr   0.00 (  0.00)	l1 17.1300 (16.4051)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.87it/s] 27%|##6       | 7/26 [00:00<00:00, 33.20it/s]                                               27%|##6       | 7/26 [00:00<00:00, 33.20it/s] 50%|#####     | 13/26 [00:00<00:00, 39.86it/s] 73%|#######3  | 19/26 [00:00<00:00, 46.27it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 46.27it/s] 92%|#########2| 24/26 [00:00<00:00, 46.08it/s]100%|##########| 26/26 [00:00<00:00, 38.87it/s]
Test: [   0/  26]	Loss 0.428 (0.428)	test_acc   0.80 (  0.80)	test_minacc   0.01 (  0.01)	test_majacc   1.00 (  1.00)	Loss_d 0.428 (0.428)	test_acc_d   0.80 (  0.80)	test_minacc_d   0.01 (  0.01)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.97 (  0.97)
Test: [  10/  26]	Loss 0.327 (0.344)	test_acc   0.86 (  0.85)	test_minacc   0.04 (  0.03)	test_majacc   1.00 (  0.99)	Loss_d 0.327 (0.344)	test_acc_d   0.86 (  0.85)	test_minacc_d   0.04 (  0.03)	test_majacc_d   1.00 (  0.99)	test_corr_d   0.97 (  0.96)
Test: [  20/  26]	Loss 0.361 (0.339)	test_acc   0.83 (  0.85)	test_minacc   0.04 (  0.03)	test_majacc   0.99 (  1.00)	Loss_d 0.361 (0.339)	test_acc_d   0.83 (  0.85)	test_minacc_d   0.04 (  0.03)	test_majacc_d   0.99 (  1.00)	test_corr_d   0.96 (  0.96)
Test: [  26/  26]	Loss 0.332 (0.336)	test_acc   0.85 (  0.85)	test_minacc   0.05 (  0.04)	test_majacc   1.00 (  1.00)	Loss_d 0.332 (0.336)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.05 (  0.04)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.97 (  0.96)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 64.34it/s]
Test: [  0/  1]	Loss 1.645 (1.645)	test_acc   0.14 (  0.14)	test_minacc   0.05 (  0.05)	test_majacc   0.99 (  0.99)	Loss_d 1.645 (1.645)	test_acc_d   0.14 (  0.14)	test_minacc_d   0.05 (  0.05)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.90 (  0.90)
Test: [  1/  1]	Loss 1.645 (1.645)	test_acc   0.14 (  0.14)	test_minacc   0.05 (  0.05)	test_majacc   0.99 (  0.99)	Loss_d 1.645 (1.645)	test_acc_d   0.14 (  0.14)	test_minacc_d   0.05 (  0.05)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.90 (  0.90)
Overall Timing[ 11/  1]	epoch_time 0.0371 (0.0398)	validation_time 0.0004 (0.0009)	train_time 0.0367 (0.0386)
record: (train_acc, test_acc) (0.8557000200748444, 0.39900001883506775)
last accs (train_acc, test_acc) (0.8514000214934349, 0.14100000262260437)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:05,  4.85it/s] 19%|#9        | 5/26 [00:00<00:01, 17.53it/s] 35%|###4      | 9/26 [00:00<00:00, 23.78it/s] 50%|#####     | 13/26 [00:00<00:00, 27.82it/s] 65%|######5   | 17/26 [00:00<00:00, 29.83it/s] 81%|########  | 21/26 [00:00<00:00, 31.97it/s] 96%|#########6| 25/26 [00:00<00:00, 33.19it/s]100%|##########| 26/26 [00:00<00:00, 26.18it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 312 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 313 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 314 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 315 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 316 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 317 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 318 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 319 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 320 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 321 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 322 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 323 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 324 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 325 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 326 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 327 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 328 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 329 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 330 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 331 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 332 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 333 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 334 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 335 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 336 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 337 400
penalty weights 0.0
Epoch: [12][  26/  26]	Loss 0.465 (0.441)	train_nll   0.36 (  0.32)	train_penalty   0.05 (  0.02)	weight_norm   0.11 (  0.12)	train_acc   0.84 (  0.86)	train_minacc   0.00 (  0.32)	train_majacc   1.00 (  0.96)	train_corr   0.00 (  0.00)	l1 18.9327 (18.1159)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.96it/s] 27%|##6       | 7/26 [00:00<00:00, 36.63it/s]                                               27%|##6       | 7/26 [00:00<00:00, 36.63it/s] 50%|#####     | 13/26 [00:00<00:00, 40.81it/s] 73%|#######3  | 19/26 [00:00<00:00, 46.91it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 46.91it/s] 96%|#########6| 25/26 [00:00<00:00, 47.12it/s]100%|##########| 26/26 [00:00<00:00, 39.65it/s]
Test: [   0/  26]	Loss 0.418 (0.418)	test_acc   0.81 (  0.81)	test_minacc   0.09 (  0.09)	test_majacc   0.99 (  0.99)	Loss_d 0.418 (0.418)	test_acc_d   0.81 (  0.81)	test_minacc_d   0.09 (  0.09)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.94 (  0.94)
Test: [  10/  26]	Loss 0.291 (0.323)	test_acc   0.85 (  0.85)	test_minacc   0.07 (  0.11)	test_majacc   0.99 (  0.99)	Loss_d 0.291 (0.323)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.07 (  0.11)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.93 (  0.94)
Test: [  20/  26]	Loss 0.338 (0.316)	test_acc   0.85 (  0.86)	test_minacc   0.18 (  0.12)	test_majacc   0.99 (  0.99)	Loss_d 0.338 (0.316)	test_acc_d   0.85 (  0.86)	test_minacc_d   0.18 (  0.12)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.93 (  0.93)
Test: [  26/  26]	Loss 0.304 (0.312)	test_acc   0.85 (  0.86)	test_minacc   0.12 (  0.13)	test_majacc   0.99 (  0.99)	Loss_d 0.304 (0.312)	test_acc_d   0.85 (  0.86)	test_minacc_d   0.12 (  0.13)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.94 (  0.93)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.53it/s]
Test: [  0/  1]	Loss 1.598 (1.598)	test_acc   0.19 (  0.19)	test_minacc   0.11 (  0.11)	test_majacc   0.98 (  0.98)	Loss_d 1.598 (1.598)	test_acc_d   0.19 (  0.19)	test_minacc_d   0.11 (  0.11)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.81 (  0.81)
Test: [  1/  1]	Loss 1.598 (1.598)	test_acc   0.19 (  0.19)	test_minacc   0.11 (  0.11)	test_majacc   0.98 (  0.98)	Loss_d 1.598 (1.598)	test_acc_d   0.19 (  0.19)	test_minacc_d   0.11 (  0.11)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.81 (  0.81)
Overall Timing[ 12/  1]	epoch_time 0.0377 (0.0396)	validation_time 0.0003 (0.0009)	train_time 0.0374 (0.0385)
record: (train_acc, test_acc) (0.8557000200748444, 0.39900001883506775)
last accs (train_acc, test_acc) (0.8589000235795975, 0.19300000369548798)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.43it/s] 19%|#9        | 5/26 [00:00<00:00, 23.69it/s] 35%|###4      | 9/26 [00:00<00:00, 28.96it/s] 50%|#####     | 13/26 [00:00<00:00, 31.43it/s] 65%|######5   | 17/26 [00:00<00:00, 32.50it/s] 81%|########  | 21/26 [00:00<00:00, 33.36it/s] 96%|#########6| 25/26 [00:00<00:00, 33.66it/s]100%|##########| 26/26 [00:00<00:00, 28.90it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 338 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 339 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 340 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 341 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 342 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 343 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 344 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 345 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 346 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 347 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 348 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 349 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 350 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 351 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 352 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 353 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 354 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 355 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 356 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 357 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 358 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 359 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 360 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 361 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 362 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 363 400
penalty weights 0.0
Epoch: [13][  26/  26]	Loss 0.422 (0.427)	train_nll   0.32 (  0.32)	train_penalty   0.02 (  0.02)	weight_norm   0.11 (  0.11)	train_acc   0.84 (  0.86)	train_minacc   0.15 (  0.35)	train_majacc   0.98 (  0.95)	train_corr   0.00 (  0.00)	l1 20.1833 (19.5821)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.71it/s] 27%|##6       | 7/26 [00:00<00:00, 35.37it/s]                                               27%|##6       | 7/26 [00:00<00:00, 35.37it/s] 50%|#####     | 13/26 [00:00<00:00, 40.42it/s] 73%|#######3  | 19/26 [00:00<00:00, 46.38it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 46.38it/s] 96%|#########6| 25/26 [00:00<00:00, 46.75it/s]100%|##########| 26/26 [00:00<00:00, 38.90it/s]
Test: [   0/  26]	Loss 0.393 (0.393)	test_acc   0.82 (  0.82)	test_minacc   0.14 (  0.14)	test_majacc   0.99 (  0.99)	Loss_d 0.393 (0.393)	test_acc_d   0.82 (  0.82)	test_minacc_d   0.14 (  0.14)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.93 (  0.93)
Test: [  10/  26]	Loss 0.301 (0.316)	test_acc   0.86 (  0.86)	test_minacc   0.12 (  0.13)	test_majacc   0.98 (  0.99)	Loss_d 0.301 (0.316)	test_acc_d   0.86 (  0.86)	test_minacc_d   0.12 (  0.13)	test_majacc_d   0.98 (  0.99)	test_corr_d   0.93 (  0.93)
Test: [  20/  26]	Loss 0.321 (0.307)	test_acc   0.85 (  0.86)	test_minacc   0.16 (  0.15)	test_majacc   0.99 (  0.99)	Loss_d 0.321 (0.307)	test_acc_d   0.85 (  0.86)	test_minacc_d   0.16 (  0.15)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.92 (  0.93)
Test: [  26/  26]	Loss 0.280 (0.304)	test_acc   0.86 (  0.86)	test_minacc   0.15 (  0.15)	test_majacc   0.99 (  0.99)	Loss_d 0.280 (0.304)	test_acc_d   0.86 (  0.86)	test_minacc_d   0.15 (  0.15)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.93 (  0.93)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.60it/s]
Test: [  0/  1]	Loss 1.553 (1.553)	test_acc   0.20 (  0.20)	test_minacc   0.12 (  0.12)	test_majacc   0.98 (  0.98)	Loss_d 1.553 (1.553)	test_acc_d   0.20 (  0.20)	test_minacc_d   0.12 (  0.12)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.79 (  0.79)
Test: [  1/  1]	Loss 1.553 (1.553)	test_acc   0.20 (  0.20)	test_minacc   0.12 (  0.12)	test_majacc   0.98 (  0.98)	Loss_d 1.553 (1.553)	test_acc_d   0.20 (  0.20)	test_minacc_d   0.12 (  0.12)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.79 (  0.79)
Overall Timing[ 13/  1]	epoch_time 0.0363 (0.0394)	validation_time 0.0004 (0.0008)	train_time 0.0359 (0.0383)
record: (train_acc, test_acc) (0.8557000200748444, 0.39900001883506775)
last accs (train_acc, test_acc) (0.8624000259041786, 0.20200000703334808)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.66it/s] 19%|#9        | 5/26 [00:00<00:01, 20.63it/s] 35%|###4      | 9/26 [00:00<00:00, 26.44it/s] 50%|#####     | 13/26 [00:00<00:00, 29.39it/s] 65%|######5   | 17/26 [00:00<00:00, 31.39it/s] 81%|########  | 21/26 [00:00<00:00, 32.24it/s] 96%|#########6| 25/26 [00:00<00:00, 32.67it/s]100%|##########| 26/26 [00:00<00:00, 27.44it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 364 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 365 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 366 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 367 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 368 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 369 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 370 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 371 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 372 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 373 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 374 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 375 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 376 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 377 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 378 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 379 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 380 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 381 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 382 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 383 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 384 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 385 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 386 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 387 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 388 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 389 400
penalty weights 0.0
Epoch: [14][  26/  26]	Loss 0.403 (0.417)	train_nll   0.30 (  0.31)	train_penalty   0.02 (  0.02)	weight_norm   0.10 (  0.10)	train_acc   0.85 (  0.86)	train_minacc   0.10 (  0.35)	train_majacc   1.00 (  0.95)	train_corr   0.00 (  0.00)	l1 21.2579 (20.7833)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.85it/s] 31%|###       | 8/26 [00:00<00:00, 33.58it/s]                                               31%|###       | 8/26 [00:00<00:00, 33.58it/s] 50%|#####     | 13/26 [00:00<00:00, 37.31it/s] 73%|#######3  | 19/26 [00:00<00:00, 44.13it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 44.13it/s] 96%|#########6| 25/26 [00:00<00:00, 44.73it/s]100%|##########| 26/26 [00:00<00:00, 36.03it/s]
Test: [   0/  26]	Loss 0.410 (0.410)	test_acc   0.81 (  0.81)	test_minacc   0.10 (  0.10)	test_majacc   0.99 (  0.99)	Loss_d 0.410 (0.410)	test_acc_d   0.81 (  0.81)	test_minacc_d   0.10 (  0.10)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.93 (  0.93)
Test: [  10/  26]	Loss 0.294 (0.315)	test_acc   0.85 (  0.85)	test_minacc   0.05 (  0.12)	test_majacc   0.99 (  0.99)	Loss_d 0.294 (0.315)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.05 (  0.12)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.93 (  0.93)
Test: [  20/  26]	Loss 0.329 (0.306)	test_acc   0.86 (  0.86)	test_minacc   0.18 (  0.15)	test_majacc   1.00 (  0.99)	Loss_d 0.329 (0.306)	test_acc_d   0.86 (  0.86)	test_minacc_d   0.18 (  0.15)	test_majacc_d   1.00 (  0.99)	test_corr_d   0.92 (  0.93)
Test: [  26/  26]	Loss 0.279 (0.303)	test_acc   0.86 (  0.86)	test_minacc   0.17 (  0.15)	test_majacc   0.99 (  0.99)	Loss_d 0.279 (0.303)	test_acc_d   0.86 (  0.86)	test_minacc_d   0.17 (  0.15)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.93 (  0.93)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.88it/s]
Test: [  0/  1]	Loss 1.533 (1.533)	test_acc   0.22 (  0.22)	test_minacc   0.13 (  0.13)	test_majacc   0.98 (  0.98)	Loss_d 1.533 (1.533)	test_acc_d   0.22 (  0.22)	test_minacc_d   0.13 (  0.13)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.77 (  0.77)
Test: [  1/  1]	Loss 1.533 (1.533)	test_acc   0.22 (  0.22)	test_minacc   0.13 (  0.13)	test_majacc   0.98 (  0.98)	Loss_d 1.533 (1.533)	test_acc_d   0.22 (  0.22)	test_minacc_d   0.13 (  0.13)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.77 (  0.77)
Overall Timing[ 14/  1]	epoch_time 0.0374 (0.0392)	validation_time 0.0003 (0.0008)	train_time 0.0370 (0.0382)
record: (train_acc, test_acc) (0.8557000200748444, 0.39900001883506775)
last accs (train_acc, test_acc) (0.8620000211596489, 0.21800000965595245)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.84it/s] 19%|#9        | 5/26 [00:00<00:00, 22.22it/s] 35%|###4      | 9/26 [00:00<00:00, 27.51it/s] 50%|#####     | 13/26 [00:00<00:00, 30.09it/s] 65%|######5   | 17/26 [00:00<00:00, 32.01it/s] 81%|########  | 21/26 [00:00<00:00, 33.29it/s] 96%|#########6| 25/26 [00:00<00:00, 33.90it/s]100%|##########| 26/26 [00:00<00:00, 28.51it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 390 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 391 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 392 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 393 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 394 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 395 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 396 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 397 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 398 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 399 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 400 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 401 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 402 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 403 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 404 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 405 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 406 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 407 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 408 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 409 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 410 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 411 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 412 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 413 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 414 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 415 400
penalty weights 10000.0
Epoch: [15][  26/  26]	Loss 0.004 (0.165)	train_nll   0.52 (  0.41)	train_penalty   0.00 (  0.01)	weight_norm   0.12 (  0.11)	train_acc   0.76 (  0.81)	train_minacc   0.85 (  0.57)	train_majacc   0.75 (  0.85)	train_corr   0.00 (  0.00)	l1 21.5705 (21.5961)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.12it/s] 27%|##6       | 7/26 [00:00<00:00, 34.04it/s]                                               27%|##6       | 7/26 [00:00<00:00, 34.04it/s] 50%|#####     | 13/26 [00:00<00:00, 42.28it/s] 73%|#######3  | 19/26 [00:00<00:00, 45.26it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 45.26it/s] 96%|#########6| 25/26 [00:00<00:00, 48.79it/s]100%|##########| 26/26 [00:00<00:00, 39.87it/s]
Test: [   0/  26]	Loss 0.562 (0.562)	test_acc   0.71 (  0.71)	test_minacc   0.67 (  0.67)	test_majacc   0.72 (  0.72)	Loss_d 0.562 (0.562)	test_acc_d   0.71 (  0.71)	test_minacc_d   0.67 (  0.67)	test_majacc_d   0.72 (  0.72)	test_corr_d   0.35 (  0.35)
Test: [  10/  26]	Loss 0.552 (0.553)	test_acc   0.74 (  0.72)	test_minacc   0.81 (  0.75)	test_majacc   0.73 (  0.72)	Loss_d 0.552 (0.553)	test_acc_d   0.74 (  0.72)	test_minacc_d   0.81 (  0.75)	test_majacc_d   0.73 (  0.72)	test_corr_d   0.33 (  0.35)
Test: [  20/  26]	Loss 0.551 (0.556)	test_acc   0.73 (  0.72)	test_minacc   0.70 (  0.74)	test_majacc   0.74 (  0.72)	Loss_d 0.551 (0.556)	test_acc_d   0.73 (  0.72)	test_minacc_d   0.70 (  0.74)	test_majacc_d   0.74 (  0.72)	test_corr_d   0.37 (  0.34)
Test: [  26/  26]	Loss 0.547 (0.557)	test_acc   0.74 (  0.72)	test_minacc   0.80 (  0.74)	test_majacc   0.73 (  0.72)	Loss_d 0.547 (0.557)	test_acc_d   0.74 (  0.72)	test_minacc_d   0.80 (  0.74)	test_majacc_d   0.73 (  0.72)	test_corr_d   0.30 (  0.34)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.37it/s]
Test: [  0/  1]	Loss 0.638 (0.638)	test_acc   0.67 (  0.67)	test_minacc   0.66 (  0.66)	test_majacc   0.71 (  0.71)	Loss_d 0.638 (0.638)	test_acc_d   0.67 (  0.67)	test_minacc_d   0.66 (  0.66)	test_majacc_d   0.71 (  0.71)	test_corr_d  -0.28 ( -0.28)
Test: [  1/  1]	Loss 0.638 (0.638)	test_acc   0.67 (  0.67)	test_minacc   0.66 (  0.66)	test_majacc   0.71 (  0.71)	Loss_d 0.638 (0.638)	test_acc_d   0.67 (  0.67)	test_minacc_d   0.66 (  0.66)	test_majacc_d   0.71 (  0.71)	test_corr_d  -0.28 ( -0.28)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/36/checkpoints/model_best.pth
Overall Timing[ 15/  1]	epoch_time 0.0365 (0.0391)	validation_time 0.0004 (0.0008)	train_time 0.0360 (0.0381)
record: (train_acc, test_acc) (0.7215000303983689, 0.6650000214576721)
last accs (train_acc, test_acc) (0.7215000303983689, 0.6650000214576721)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.38it/s] 19%|#9        | 5/26 [00:00<00:01, 20.84it/s] 35%|###4      | 9/26 [00:00<00:00, 27.00it/s] 50%|#####     | 13/26 [00:00<00:00, 30.24it/s] 65%|######5   | 17/26 [00:00<00:00, 32.13it/s] 81%|########  | 21/26 [00:00<00:00, 33.30it/s] 96%|#########6| 25/26 [00:00<00:00, 33.99it/s]100%|##########| 26/26 [00:00<00:00, 28.01it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 416 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 417 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 418 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 419 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 420 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 421 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 422 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 423 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 424 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 425 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 426 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 427 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 428 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 429 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 430 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 431 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 432 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 433 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 434 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 435 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 436 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 437 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 438 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 439 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 440 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 441 400
penalty weights 10000.0
Epoch: [16][  26/  26]	Loss 0.000 (0.001)	train_nll   0.66 (  0.62)	train_penalty   0.00 (  0.00)	weight_norm   0.14 (  0.14)	train_acc   0.62 (  0.66)	train_minacc   0.78 (  0.72)	train_majacc   0.60 (  0.65)	train_corr   0.00 (  0.00)	l1 21.2930 (21.4193)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.41it/s] 27%|##6       | 7/26 [00:00<00:00, 34.08it/s]                                               27%|##6       | 7/26 [00:00<00:00, 34.08it/s] 50%|#####     | 13/26 [00:00<00:00, 40.62it/s] 73%|#######3  | 19/26 [00:00<00:00, 46.78it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 46.78it/s] 96%|#########6| 25/26 [00:00<00:00, 46.89it/s]100%|##########| 26/26 [00:00<00:00, 38.94it/s]
Test: [   0/  26]	Loss 0.639 (0.639)	test_acc   0.66 (  0.66)	test_minacc   0.61 (  0.61)	test_majacc   0.68 (  0.68)	Loss_d 0.639 (0.639)	test_acc_d   0.66 (  0.66)	test_minacc_d   0.61 (  0.61)	test_majacc_d   0.68 (  0.68)	test_corr_d   0.28 (  0.28)
Test: [  10/  26]	Loss 0.658 (0.643)	test_acc   0.63 (  0.66)	test_minacc   0.70 (  0.69)	test_majacc   0.62 (  0.66)	Loss_d 0.658 (0.643)	test_acc_d   0.63 (  0.66)	test_minacc_d   0.70 (  0.69)	test_majacc_d   0.62 (  0.66)	test_corr_d   0.17 (  0.21)
Test: [  20/  26]	Loss 0.641 (0.645)	test_acc   0.66 (  0.66)	test_minacc   0.69 (  0.71)	test_majacc   0.65 (  0.65)	Loss_d 0.641 (0.645)	test_acc_d   0.66 (  0.66)	test_minacc_d   0.69 (  0.71)	test_majacc_d   0.65 (  0.65)	test_corr_d   0.26 (  0.20)
Test: [  26/  26]	Loss 0.658 (0.646)	test_acc   0.62 (  0.66)	test_minacc   0.73 (  0.71)	test_majacc   0.60 (  0.65)	Loss_d 0.658 (0.646)	test_acc_d   0.62 (  0.66)	test_minacc_d   0.73 (  0.71)	test_majacc_d   0.60 (  0.65)	test_corr_d   0.13 (  0.20)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 65.03it/s]
Test: [  0/  1]	Loss 0.661 (0.661)	test_acc   0.66 (  0.66)	test_minacc   0.66 (  0.66)	test_majacc   0.64 (  0.64)	Loss_d 0.661 (0.661)	test_acc_d   0.66 (  0.66)	test_minacc_d   0.66 (  0.66)	test_majacc_d   0.64 (  0.64)	test_corr_d  -0.23 ( -0.23)
Test: [  1/  1]	Loss 0.661 (0.661)	test_acc   0.66 (  0.66)	test_minacc   0.66 (  0.66)	test_majacc   0.64 (  0.64)	Loss_d 0.661 (0.661)	test_acc_d   0.66 (  0.66)	test_minacc_d   0.66 (  0.66)	test_majacc_d   0.64 (  0.64)	test_corr_d  -0.23 ( -0.23)
Overall Timing[ 16/  1]	epoch_time 0.0369 (0.0389)	validation_time 0.0004 (0.0008)	train_time 0.0365 (0.0380)
record: (train_acc, test_acc) (0.7215000303983689, 0.6650000214576721)
last accs (train_acc, test_acc) (0.6575000200867653, 0.6600000262260437)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.00it/s] 19%|#9        | 5/26 [00:00<00:01, 20.73it/s] 35%|###4      | 9/26 [00:00<00:00, 26.47it/s] 50%|#####     | 13/26 [00:00<00:00, 29.44it/s] 65%|######5   | 17/26 [00:00<00:00, 30.52it/s] 81%|########  | 21/26 [00:00<00:00, 31.96it/s] 96%|#########6| 25/26 [00:00<00:00, 32.86it/s]100%|##########| 26/26 [00:00<00:00, 27.17it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 442 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 443 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 444 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 445 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 446 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 447 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 448 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 449 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 450 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 451 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 452 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 453 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 454 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 455 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 456 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 457 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 458 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 459 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 460 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 461 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 462 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 463 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 464 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 465 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 466 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 467 400
penalty weights 10000.0
Epoch: [17][  26/  26]	Loss 0.000 (0.000)	train_nll   0.67 (  0.66)	train_penalty   0.00 (  0.00)	weight_norm   0.15 (  0.14)	train_acc   0.51 (  0.53)	train_minacc   0.50 (  0.53)	train_majacc   0.51 (  0.53)	train_corr   0.00 (  0.00)	l1 21.2294 (21.2587)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.17it/s] 27%|##6       | 7/26 [00:00<00:00, 35.77it/s]                                               27%|##6       | 7/26 [00:00<00:00, 35.77it/s] 50%|#####     | 13/26 [00:00<00:00, 41.16it/s] 73%|#######3  | 19/26 [00:00<00:00, 46.44it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 46.44it/s] 96%|#########6| 25/26 [00:00<00:00, 47.30it/s]100%|##########| 26/26 [00:00<00:00, 39.41it/s]
Test: [   0/  26]	Loss 0.664 (0.664)	test_acc   0.50 (  0.50)	test_minacc   0.47 (  0.47)	test_majacc   0.51 (  0.51)	Loss_d 0.664 (0.664)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.47 (  0.47)	test_majacc_d   0.51 (  0.51)	test_corr_d   0.25 (  0.25)
Test: [  10/  26]	Loss 0.671 (0.664)	test_acc   0.48 (  0.50)	test_minacc   0.46 (  0.51)	test_majacc   0.49 (  0.50)	Loss_d 0.671 (0.664)	test_acc_d   0.48 (  0.50)	test_minacc_d   0.46 (  0.51)	test_majacc_d   0.49 (  0.50)	test_corr_d   0.14 (  0.16)
Test: [  20/  26]	Loss 0.666 (0.665)	test_acc   0.48 (  0.50)	test_minacc   0.48 (  0.50)	test_majacc   0.48 (  0.50)	Loss_d 0.666 (0.665)	test_acc_d   0.48 (  0.50)	test_minacc_d   0.48 (  0.50)	test_majacc_d   0.48 (  0.50)	test_corr_d   0.21 (  0.16)
Test: [  26/  26]	Loss 0.675 (0.666)	test_acc   0.51 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.51 (  0.50)	Loss_d 0.675 (0.666)	test_acc_d   0.51 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.51 (  0.50)	test_corr_d   0.12 (  0.16)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 60.56it/s]
Test: [  0/  1]	Loss 0.677 (0.677)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.677 (0.677)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.18 ( -0.18)
Test: [  1/  1]	Loss 0.677 (0.677)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.677 (0.677)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.18 ( -0.18)
Overall Timing[ 17/  1]	epoch_time 0.0368 (0.0388)	validation_time 0.0004 (0.0007)	train_time 0.0363 (0.0379)
record: (train_acc, test_acc) (0.7215000303983689, 0.6650000214576721)
last accs (train_acc, test_acc) (0.49980000856518747, 0.5010000467300415)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.02it/s] 19%|#9        | 5/26 [00:00<00:00, 21.01it/s] 35%|###4      | 9/26 [00:00<00:00, 26.97it/s] 50%|#####     | 13/26 [00:00<00:00, 29.78it/s] 65%|######5   | 17/26 [00:00<00:00, 31.63it/s] 81%|########  | 21/26 [00:00<00:00, 32.47it/s] 96%|#########6| 25/26 [00:00<00:00, 33.61it/s]100%|##########| 26/26 [00:00<00:00, 28.01it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 468 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 469 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 470 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 471 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 472 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 473 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 474 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 475 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 476 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 477 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 478 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 479 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 480 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 481 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 482 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 483 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 484 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 485 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 486 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 487 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 488 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 489 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 490 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 491 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 492 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 493 400
penalty weights 10000.0
Epoch: [18][  26/  26]	Loss 0.000 (0.000)	train_nll   0.68 (  0.67)	train_penalty   0.00 (  0.00)	weight_norm   0.15 (  0.15)	train_acc   0.51 (  0.50)	train_minacc   0.50 (  0.50)	train_majacc   0.51 (  0.50)	train_corr   0.00 (  0.00)	l1 21.2117 (21.2248)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.67it/s] 27%|##6       | 7/26 [00:00<00:00, 37.46it/s]                                               27%|##6       | 7/26 [00:00<00:00, 37.46it/s] 50%|#####     | 13/26 [00:00<00:00, 42.03it/s] 73%|#######3  | 19/26 [00:00<00:00, 48.22it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 48.22it/s] 96%|#########6| 25/26 [00:00<00:00, 48.19it/s]100%|##########| 26/26 [00:00<00:00, 40.57it/s]
Test: [   0/  26]	Loss 0.671 (0.671)	test_acc   0.50 (  0.50)	test_minacc   0.47 (  0.47)	test_majacc   0.51 (  0.51)	Loss_d 0.671 (0.671)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.47 (  0.47)	test_majacc_d   0.51 (  0.51)	test_corr_d   0.22 (  0.22)
Test: [  10/  26]	Loss 0.674 (0.671)	test_acc   0.48 (  0.50)	test_minacc   0.47 (  0.51)	test_majacc   0.49 (  0.50)	Loss_d 0.674 (0.671)	test_acc_d   0.48 (  0.50)	test_minacc_d   0.47 (  0.51)	test_majacc_d   0.49 (  0.50)	test_corr_d   0.13 (  0.14)
Test: [  20/  26]	Loss 0.672 (0.671)	test_acc   0.48 (  0.50)	test_minacc   0.48 (  0.50)	test_majacc   0.48 (  0.50)	Loss_d 0.672 (0.671)	test_acc_d   0.48 (  0.50)	test_minacc_d   0.48 (  0.50)	test_majacc_d   0.48 (  0.50)	test_corr_d   0.17 (  0.14)
Test: [  26/  26]	Loss 0.679 (0.672)	test_acc   0.51 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.51 (  0.50)	Loss_d 0.679 (0.672)	test_acc_d   0.51 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.51 (  0.50)	test_corr_d   0.10 (  0.14)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 67.25it/s]
Test: [  0/  1]	Loss 0.681 (0.681)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.49 (  0.49)	Loss_d 0.681 (0.681)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.49 (  0.49)	test_corr_d  -0.15 ( -0.15)
Test: [  1/  1]	Loss 0.681 (0.681)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.49 (  0.49)	Loss_d 0.681 (0.681)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.49 (  0.49)	test_corr_d  -0.15 ( -0.15)
Overall Timing[ 18/  1]	epoch_time 0.0362 (0.0387)	validation_time 0.0003 (0.0007)	train_time 0.0359 (0.0378)
record: (train_acc, test_acc) (0.7215000303983689, 0.6650000214576721)
last accs (train_acc, test_acc) (0.5002000097036362, 0.49500003457069397)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.30it/s] 19%|#9        | 5/26 [00:00<00:01, 20.79it/s] 35%|###4      | 9/26 [00:00<00:00, 26.50it/s] 50%|#####     | 13/26 [00:00<00:00, 29.54it/s] 65%|######5   | 17/26 [00:00<00:00, 31.54it/s] 81%|########  | 21/26 [00:00<00:00, 32.51it/s] 96%|#########6| 25/26 [00:00<00:00, 32.77it/s]100%|##########| 26/26 [00:00<00:00, 27.54it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 494 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 495 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 496 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 497 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 498 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 499 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 500 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 501 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 502 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 503 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 504 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 505 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 506 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 507 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 508 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 509 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 510 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 511 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 512 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 513 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 514 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 515 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 516 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 517 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 518 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 519 400
penalty weights 10000.0
Epoch: [19][  26/  26]	Loss 0.000 (0.000)	train_nll   0.68 (  0.68)	train_penalty   0.00 (  0.00)	weight_norm   0.15 (  0.15)	train_acc   0.51 (  0.50)	train_minacc   0.50 (  0.50)	train_majacc   0.51 (  0.50)	train_corr   0.00 (  0.00)	l1 21.2056 (21.2118)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 18.11it/s] 31%|###       | 8/26 [00:00<00:00, 39.65it/s]                                               31%|###       | 8/26 [00:00<00:00, 39.65it/s] 50%|#####     | 13/26 [00:00<00:00, 40.93it/s] 73%|#######3  | 19/26 [00:00<00:00, 47.20it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 47.20it/s] 96%|#########6| 25/26 [00:00<00:00, 47.33it/s]100%|##########| 26/26 [00:00<00:00, 40.33it/s]
Test: [   0/  26]	Loss 0.674 (0.674)	test_acc   0.51 (  0.51)	test_minacc   0.46 (  0.46)	test_majacc   0.52 (  0.52)	Loss_d 0.674 (0.674)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.46 (  0.46)	test_majacc_d   0.52 (  0.52)	test_corr_d   0.22 (  0.22)
Test: [  10/  26]	Loss 0.678 (0.675)	test_acc   0.51 (  0.51)	test_minacc   0.33 (  0.49)	test_majacc   0.53 (  0.51)	Loss_d 0.678 (0.675)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.33 (  0.49)	test_majacc_d   0.53 (  0.51)	test_corr_d   0.13 (  0.13)
Test: [  20/  26]	Loss 0.675 (0.675)	test_acc   0.47 (  0.51)	test_minacc   0.45 (  0.47)	test_majacc   0.48 (  0.52)	Loss_d 0.675 (0.675)	test_acc_d   0.47 (  0.51)	test_minacc_d   0.45 (  0.47)	test_majacc_d   0.48 (  0.52)	test_corr_d   0.16 (  0.13)
Test: [  26/  26]	Loss 0.683 (0.675)	test_acc   0.50 (  0.51)	test_minacc   0.50 (  0.47)	test_majacc   0.50 (  0.52)	Loss_d 0.683 (0.675)	test_acc_d   0.50 (  0.51)	test_minacc_d   0.50 (  0.47)	test_majacc_d   0.50 (  0.52)	test_corr_d   0.09 (  0.13)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 67.05it/s]
Test: [  0/  1]	Loss 0.686 (0.686)	test_acc   0.49 (  0.49)	test_minacc   0.49 (  0.49)	test_majacc   0.47 (  0.47)	Loss_d 0.686 (0.686)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.49 (  0.49)	test_majacc_d   0.47 (  0.47)	test_corr_d  -0.11 ( -0.11)
Test: [  1/  1]	Loss 0.686 (0.686)	test_acc   0.49 (  0.49)	test_minacc   0.49 (  0.49)	test_majacc   0.47 (  0.47)	Loss_d 0.686 (0.686)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.49 (  0.49)	test_majacc_d   0.47 (  0.47)	test_corr_d  -0.11 ( -0.11)
Overall Timing[ 19/  1]	epoch_time 0.0370 (0.0386)	validation_time 0.0004 (0.0007)	train_time 0.0366 (0.0377)
record: (train_acc, test_acc) (0.7215000303983689, 0.6650000214576721)
last accs (train_acc, test_acc) (0.5116000134646893, 0.48900002241134644)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 16.10it/s] 23%|##3       | 6/26 [00:00<00:00, 24.84it/s] 38%|###8      | 10/26 [00:00<00:00, 28.61it/s] 54%|#####3    | 14/26 [00:00<00:00, 30.32it/s] 69%|######9   | 18/26 [00:00<00:00, 32.16it/s] 85%|########4 | 22/26 [00:00<00:00, 32.71it/s]100%|##########| 26/26 [00:00<00:00, 33.87it/s]100%|##########| 26/26 [00:00<00:00, 29.13it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 520 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 521 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 522 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 523 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 524 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 525 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 526 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 527 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 528 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 529 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 530 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 531 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 532 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 533 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 534 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 535 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 536 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 537 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 538 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 539 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 540 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 541 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 542 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 543 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 544 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 545 400
penalty weights 10000.0
Epoch: [20][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.68)	train_penalty   0.00 (  0.00)	weight_norm   0.15 (  0.15)	train_acc   0.49 (  0.49)	train_minacc   0.47 (  0.47)	train_majacc   0.49 (  0.50)	train_corr   0.00 (  0.00)	l1 21.2004 (21.2033)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.06it/s] 27%|##6       | 7/26 [00:00<00:00, 36.68it/s]                                               27%|##6       | 7/26 [00:00<00:00, 36.68it/s] 46%|####6     | 12/26 [00:00<00:00, 42.20it/s] 65%|######5   | 17/26 [00:00<00:00, 43.33it/s]                                                65%|######5   | 17/26 [00:00<00:00, 43.33it/s] 88%|########8 | 23/26 [00:00<00:00, 48.54it/s]100%|##########| 26/26 [00:00<00:00, 39.74it/s]
Test: [   0/  26]	Loss 0.678 (0.678)	test_acc   0.49 (  0.49)	test_minacc   0.46 (  0.46)	test_majacc   0.50 (  0.50)	Loss_d 0.678 (0.678)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.46 (  0.46)	test_majacc_d   0.50 (  0.50)	test_corr_d   0.19 (  0.19)
Test: [  10/  26]	Loss 0.681 (0.680)	test_acc   0.45 (  0.48)	test_minacc   0.35 (  0.47)	test_majacc   0.47 (  0.48)	Loss_d 0.681 (0.680)	test_acc_d   0.45 (  0.48)	test_minacc_d   0.35 (  0.47)	test_majacc_d   0.47 (  0.48)	test_corr_d   0.10 (  0.10)
Test: [  20/  26]	Loss 0.680 (0.680)	test_acc   0.46 (  0.48)	test_minacc   0.46 (  0.46)	test_majacc   0.46 (  0.48)	Loss_d 0.680 (0.680)	test_acc_d   0.46 (  0.48)	test_minacc_d   0.46 (  0.46)	test_majacc_d   0.46 (  0.48)	test_corr_d   0.11 (  0.10)
Test: [  26/  26]	Loss 0.686 (0.680)	test_acc   0.47 (  0.48)	test_minacc   0.45 (  0.45)	test_majacc   0.48 (  0.48)	Loss_d 0.686 (0.680)	test_acc_d   0.47 (  0.48)	test_minacc_d   0.45 (  0.45)	test_majacc_d   0.48 (  0.48)	test_corr_d   0.06 (  0.10)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.40it/s]
Test: [  0/  1]	Loss 0.687 (0.687)	test_acc   0.48 (  0.48)	test_minacc   0.48 (  0.48)	test_majacc   0.50 (  0.50)	Loss_d 0.687 (0.687)	test_acc_d   0.48 (  0.48)	test_minacc_d   0.48 (  0.48)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.10 ( -0.10)
Test: [  1/  1]	Loss 0.687 (0.687)	test_acc   0.48 (  0.48)	test_minacc   0.48 (  0.48)	test_majacc   0.50 (  0.50)	Loss_d 0.687 (0.687)	test_acc_d   0.48 (  0.48)	test_minacc_d   0.48 (  0.48)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.10 ( -0.10)
Overall Timing[ 20/  1]	epoch_time 0.0376 (0.0385)	validation_time 0.0003 (0.0007)	train_time 0.0372 (0.0377)
record: (train_acc, test_acc) (0.7215000303983689, 0.6650000214576721)
last accs (train_acc, test_acc) (0.47850001135468484, 0.48000001907348633)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.73it/s] 19%|#9        | 5/26 [00:00<00:00, 22.21it/s] 35%|###4      | 9/26 [00:00<00:00, 27.85it/s] 50%|#####     | 13/26 [00:00<00:00, 30.95it/s] 65%|######5   | 17/26 [00:00<00:00, 33.01it/s] 81%|########  | 21/26 [00:00<00:00, 34.25it/s] 96%|#########6| 25/26 [00:00<00:00, 34.54it/s]100%|##########| 26/26 [00:00<00:00, 29.06it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 546 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 547 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 548 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 549 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 550 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 551 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 552 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 553 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 554 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 555 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 556 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 557 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 558 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 559 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 560 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 561 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 562 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 563 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 564 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 565 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 566 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 567 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 568 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 569 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 570 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 571 400
penalty weights 10000.0
Epoch: [21][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.68)	train_penalty   0.00 (  0.00)	weight_norm   0.15 (  0.15)	train_acc   0.50 (  0.48)	train_minacc   0.38 (  0.43)	train_majacc   0.52 (  0.49)	train_corr   0.00 (  0.00)	l1 21.1965 (21.1979)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 17.36it/s] 27%|##6       | 7/26 [00:00<00:00, 34.80it/s]                                               27%|##6       | 7/26 [00:00<00:00, 34.80it/s] 46%|####6     | 12/26 [00:00<00:00, 38.78it/s] 69%|######9   | 18/26 [00:00<00:00, 45.92it/s]                                                69%|######9   | 18/26 [00:00<00:00, 45.92it/s] 92%|#########2| 24/26 [00:00<00:00, 46.05it/s]100%|##########| 26/26 [00:00<00:00, 39.56it/s]
Test: [   0/  26]	Loss 0.680 (0.680)	test_acc   0.51 (  0.51)	test_minacc   0.34 (  0.34)	test_majacc   0.55 (  0.55)	Loss_d 0.680 (0.680)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.34 (  0.34)	test_majacc_d   0.55 (  0.55)	test_corr_d   0.19 (  0.19)
Test: [  10/  26]	Loss 0.684 (0.683)	test_acc   0.46 (  0.48)	test_minacc   0.40 (  0.42)	test_majacc   0.47 (  0.49)	Loss_d 0.684 (0.683)	test_acc_d   0.46 (  0.48)	test_minacc_d   0.40 (  0.42)	test_majacc_d   0.47 (  0.49)	test_corr_d   0.09 (  0.09)
Test: [  20/  26]	Loss 0.682 (0.682)	test_acc   0.47 (  0.48)	test_minacc   0.40 (  0.41)	test_majacc   0.49 (  0.49)	Loss_d 0.682 (0.682)	test_acc_d   0.47 (  0.48)	test_minacc_d   0.40 (  0.41)	test_majacc_d   0.49 (  0.49)	test_corr_d   0.11 (  0.09)
Test: [  26/  26]	Loss 0.688 (0.682)	test_acc   0.50 (  0.48)	test_minacc   0.38 (  0.41)	test_majacc   0.52 (  0.50)	Loss_d 0.688 (0.682)	test_acc_d   0.50 (  0.48)	test_minacc_d   0.38 (  0.41)	test_majacc_d   0.52 (  0.50)	test_corr_d   0.05 (  0.10)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.71it/s]
Test: [  0/  1]	Loss 0.690 (0.690)	test_acc   0.45 (  0.45)	test_minacc   0.44 (  0.44)	test_majacc   0.52 (  0.52)	Loss_d 0.690 (0.690)	test_acc_d   0.45 (  0.45)	test_minacc_d   0.44 (  0.44)	test_majacc_d   0.52 (  0.52)	test_corr_d  -0.07 ( -0.07)
Test: [  1/  1]	Loss 0.690 (0.690)	test_acc   0.45 (  0.45)	test_minacc   0.44 (  0.44)	test_majacc   0.52 (  0.52)	Loss_d 0.690 (0.690)	test_acc_d   0.45 (  0.45)	test_minacc_d   0.44 (  0.44)	test_majacc_d   0.52 (  0.52)	test_corr_d  -0.07 ( -0.07)
Overall Timing[ 21/  1]	epoch_time 0.0370 (0.0385)	validation_time 0.0004 (0.0007)	train_time 0.0366 (0.0377)
record: (train_acc, test_acc) (0.7215000303983689, 0.6650000214576721)
last accs (train_acc, test_acc) (0.4826000062227249, 0.4480000138282776)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.02it/s] 19%|#9        | 5/26 [00:00<00:00, 23.21it/s] 35%|###4      | 9/26 [00:00<00:00, 28.97it/s] 50%|#####     | 13/26 [00:00<00:00, 31.79it/s] 65%|######5   | 17/26 [00:00<00:00, 33.24it/s] 81%|########  | 21/26 [00:00<00:00, 34.22it/s] 96%|#########6| 25/26 [00:00<00:00, 34.29it/s]100%|##########| 26/26 [00:00<00:00, 29.22it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 572 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 573 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 574 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 575 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 576 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 577 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 578 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 579 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 580 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 581 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 582 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 583 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 584 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 585 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 586 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 587 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 588 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 589 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 590 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 591 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 592 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 593 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 594 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 595 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 596 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 597 400
penalty weights 10000.0
Epoch: [22][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.68)	train_penalty   0.00 (  0.00)	weight_norm   0.15 (  0.15)	train_acc   0.46 (  0.48)	train_minacc   0.40 (  0.42)	train_majacc   0.48 (  0.49)	train_corr   0.00 (  0.00)	l1 21.1943 (21.1950)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.50it/s] 27%|##6       | 7/26 [00:00<00:00, 35.36it/s]                                               27%|##6       | 7/26 [00:00<00:00, 35.36it/s] 50%|#####     | 13/26 [00:00<00:00, 40.46it/s] 73%|#######3  | 19/26 [00:00<00:00, 46.50it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 46.50it/s] 96%|#########6| 25/26 [00:00<00:00, 47.39it/s]100%|##########| 26/26 [00:00<00:00, 39.36it/s]
Test: [   0/  26]	Loss 0.681 (0.681)	test_acc   0.46 (  0.46)	test_minacc   0.33 (  0.33)	test_majacc   0.50 (  0.50)	Loss_d 0.681 (0.681)	test_acc_d   0.46 (  0.46)	test_minacc_d   0.33 (  0.33)	test_majacc_d   0.50 (  0.50)	test_corr_d   0.18 (  0.18)
Test: [  10/  26]	Loss 0.686 (0.685)	test_acc   0.43 (  0.45)	test_minacc   0.39 (  0.42)	test_majacc   0.44 (  0.46)	Loss_d 0.686 (0.685)	test_acc_d   0.43 (  0.45)	test_minacc_d   0.39 (  0.42)	test_majacc_d   0.44 (  0.46)	test_corr_d   0.08 (  0.08)
Test: [  20/  26]	Loss 0.684 (0.684)	test_acc   0.46 (  0.46)	test_minacc   0.42 (  0.42)	test_majacc   0.46 (  0.47)	Loss_d 0.684 (0.684)	test_acc_d   0.46 (  0.46)	test_minacc_d   0.42 (  0.42)	test_majacc_d   0.46 (  0.47)	test_corr_d   0.09 (  0.08)
Test: [  26/  26]	Loss 0.688 (0.684)	test_acc   0.47 (  0.46)	test_minacc   0.43 (  0.42)	test_majacc   0.48 (  0.47)	Loss_d 0.688 (0.684)	test_acc_d   0.47 (  0.46)	test_minacc_d   0.43 (  0.42)	test_majacc_d   0.48 (  0.47)	test_corr_d   0.04 (  0.08)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 67.08it/s]
Test: [  0/  1]	Loss 0.691 (0.691)	test_acc   0.43 (  0.43)	test_minacc   0.43 (  0.43)	test_majacc   0.48 (  0.48)	Loss_d 0.691 (0.691)	test_acc_d   0.43 (  0.43)	test_minacc_d   0.43 (  0.43)	test_majacc_d   0.48 (  0.48)	test_corr_d  -0.06 ( -0.06)
Test: [  1/  1]	Loss 0.691 (0.691)	test_acc   0.43 (  0.43)	test_minacc   0.43 (  0.43)	test_majacc   0.48 (  0.48)	Loss_d 0.691 (0.691)	test_acc_d   0.43 (  0.43)	test_minacc_d   0.43 (  0.43)	test_majacc_d   0.48 (  0.48)	test_corr_d  -0.06 ( -0.06)
Overall Timing[ 22/  1]	epoch_time 0.0366 (0.0384)	validation_time 0.0004 (0.0007)	train_time 0.0362 (0.0376)
record: (train_acc, test_acc) (0.7215000303983689, 0.6650000214576721)
last accs (train_acc, test_acc) (0.46370000642538073, 0.43400001525878906)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.37it/s] 15%|#5        | 4/26 [00:00<00:01, 18.55it/s] 31%|###       | 8/26 [00:00<00:00, 25.97it/s] 46%|####6     | 12/26 [00:00<00:00, 29.34it/s] 62%|######1   | 16/26 [00:00<00:00, 31.32it/s] 77%|#######6  | 20/26 [00:00<00:00, 32.64it/s] 92%|#########2| 24/26 [00:00<00:00, 33.42it/s]100%|##########| 26/26 [00:00<00:00, 27.85it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 598 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 599 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 600 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 601 400
penalty weights 10000.0
args.step pgd_anneal_iters 601 600
dim_v 512
rho, theta 357 tensor(-0.0216, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 602 400
penalty weights 10000.0
args.step pgd_anneal_iters 602 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 603 400
penalty weights 10000.0
args.step pgd_anneal_iters 603 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 604 400
penalty weights 10000.0
args.step pgd_anneal_iters 604 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 605 400
penalty weights 10000.0
args.step pgd_anneal_iters 605 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 606 400
penalty weights 10000.0
args.step pgd_anneal_iters 606 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 607 400
penalty weights 10000.0
args.step pgd_anneal_iters 607 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 608 400
penalty weights 10000.0
args.step pgd_anneal_iters 608 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 609 400
penalty weights 10000.0
args.step pgd_anneal_iters 609 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 610 400
penalty weights 10000.0
args.step pgd_anneal_iters 610 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 611 400
penalty weights 10000.0
args.step pgd_anneal_iters 611 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 612 400
penalty weights 10000.0
args.step pgd_anneal_iters 612 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 613 400
penalty weights 10000.0
args.step pgd_anneal_iters 613 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 614 400
penalty weights 10000.0
args.step pgd_anneal_iters 614 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 615 400
penalty weights 10000.0
args.step pgd_anneal_iters 615 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 616 400
penalty weights 10000.0
args.step pgd_anneal_iters 616 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 617 400
penalty weights 10000.0
args.step pgd_anneal_iters 617 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 618 400
penalty weights 10000.0
args.step pgd_anneal_iters 618 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 619 400
penalty weights 10000.0
args.step pgd_anneal_iters 619 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 620 400
penalty weights 10000.0
args.step pgd_anneal_iters 620 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 621 400
penalty weights 10000.0
args.step pgd_anneal_iters 621 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 622 400
penalty weights 10000.0
args.step pgd_anneal_iters 622 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 623 400
penalty weights 10000.0
args.step pgd_anneal_iters 623 600
dim_v 512
Epoch: [23][  26/  26]	Loss 0.000 (0.016)	train_nll   0.69 (  0.71)	train_penalty   0.00 (  0.02)	weight_norm   0.35 (  0.23)	train_acc   0.50 (  0.51)	train_minacc   0.50 (  0.50)	train_majacc   0.50 (  0.51)	train_corr   0.00 (  0.00)	l1 17.4005 (18.4553)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.89it/s] 27%|##6       | 7/26 [00:00<00:00, 31.86it/s]                                               27%|##6       | 7/26 [00:00<00:00, 31.86it/s] 50%|#####     | 13/26 [00:00<00:00, 38.16it/s] 73%|#######3  | 19/26 [00:00<00:00, 44.99it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 44.99it/s] 96%|#########6| 25/26 [00:00<00:00, 46.31it/s]100%|##########| 26/26 [00:00<00:00, 37.91it/s]
Test: [   0/  26]	Loss 0.680 (0.680)	test_acc   0.52 (  0.52)	test_minacc   0.52 (  0.52)	test_majacc   0.51 (  0.51)	Loss_d 0.680 (0.680)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.51 (  0.51)	test_corr_d   0.70 (  0.70)
Test: [  10/  26]	Loss 0.669 (0.677)	test_acc   0.53 (  0.51)	test_minacc   0.53 (  0.48)	test_majacc   0.53 (  0.52)	Loss_d 0.669 (0.677)	test_acc_d   0.53 (  0.51)	test_minacc_d   0.53 (  0.48)	test_majacc_d   0.53 (  0.52)	test_corr_d   0.71 (  0.70)
Test: [  20/  26]	Loss 0.667 (0.677)	test_acc   0.55 (  0.52)	test_minacc   0.51 (  0.49)	test_majacc   0.55 (  0.52)	Loss_d 0.667 (0.677)	test_acc_d   0.55 (  0.52)	test_minacc_d   0.51 (  0.49)	test_majacc_d   0.55 (  0.52)	test_corr_d   0.68 (  0.70)
Test: [  26/  26]	Loss 0.678 (0.675)	test_acc   0.50 (  0.52)	test_minacc   0.47 (  0.49)	test_majacc   0.51 (  0.52)	Loss_d 0.678 (0.675)	test_acc_d   0.50 (  0.52)	test_minacc_d   0.47 (  0.49)	test_majacc_d   0.51 (  0.52)	test_corr_d   0.69 (  0.69)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.28it/s]
Test: [  0/  1]	Loss 0.753 (0.753)	test_acc   0.48 (  0.48)	test_minacc   0.48 (  0.48)	test_majacc   0.51 (  0.51)	Loss_d 0.753 (0.753)	test_acc_d   0.48 (  0.48)	test_minacc_d   0.48 (  0.48)	test_majacc_d   0.51 (  0.51)	test_corr_d   0.67 (  0.67)
Test: [  1/  1]	Loss 0.753 (0.753)	test_acc   0.48 (  0.48)	test_minacc   0.48 (  0.48)	test_majacc   0.51 (  0.51)	Loss_d 0.753 (0.753)	test_acc_d   0.48 (  0.48)	test_minacc_d   0.48 (  0.48)	test_majacc_d   0.51 (  0.51)	test_corr_d   0.67 (  0.67)
Overall Timing[ 23/  1]	epoch_time 0.0369 (0.0383)	validation_time 0.0007 (0.0007)	train_time 0.0362 (0.0375)
record: (train_acc, test_acc) (0.7215000303983689, 0.6650000214576721)
last accs (train_acc, test_acc) (0.5188000095486641, 0.4820000231266022)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 15.51it/s] 23%|##3       | 6/26 [00:00<00:00, 26.06it/s] 38%|###8      | 10/26 [00:00<00:00, 30.38it/s] 54%|#####3    | 14/26 [00:00<00:00, 32.22it/s] 69%|######9   | 18/26 [00:00<00:00, 32.53it/s] 85%|########4 | 22/26 [00:00<00:00, 33.49it/s]100%|##########| 26/26 [00:00<00:00, 34.37it/s]100%|##########| 26/26 [00:00<00:00, 29.61it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 624 400
penalty weights 10000.0
args.step pgd_anneal_iters 624 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 625 400
penalty weights 10000.0
args.step pgd_anneal_iters 625 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 626 400
penalty weights 10000.0
args.step pgd_anneal_iters 626 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 627 400
penalty weights 10000.0
args.step pgd_anneal_iters 627 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 628 400
penalty weights 10000.0
args.step pgd_anneal_iters 628 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 629 400
penalty weights 10000.0
args.step pgd_anneal_iters 629 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 630 400
penalty weights 10000.0
args.step pgd_anneal_iters 630 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 631 400
penalty weights 10000.0
args.step pgd_anneal_iters 631 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 632 400
penalty weights 10000.0
args.step pgd_anneal_iters 632 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 633 400
penalty weights 10000.0
args.step pgd_anneal_iters 633 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 634 400
penalty weights 10000.0
args.step pgd_anneal_iters 634 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 635 400
penalty weights 10000.0
args.step pgd_anneal_iters 635 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 636 400
penalty weights 10000.0
args.step pgd_anneal_iters 636 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 637 400
penalty weights 10000.0
args.step pgd_anneal_iters 637 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 638 400
penalty weights 10000.0
args.step pgd_anneal_iters 638 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 639 400
penalty weights 10000.0
args.step pgd_anneal_iters 639 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 640 400
penalty weights 10000.0
args.step pgd_anneal_iters 640 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 641 400
penalty weights 10000.0
args.step pgd_anneal_iters 641 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 642 400
penalty weights 10000.0
args.step pgd_anneal_iters 642 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 643 400
penalty weights 10000.0
args.step pgd_anneal_iters 643 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 644 400
penalty weights 10000.0
args.step pgd_anneal_iters 644 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 645 400
penalty weights 10000.0
args.step pgd_anneal_iters 645 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 646 400
penalty weights 10000.0
args.step pgd_anneal_iters 646 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 647 400
penalty weights 10000.0
args.step pgd_anneal_iters 647 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 648 400
penalty weights 10000.0
args.step pgd_anneal_iters 648 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 649 400
penalty weights 10000.0
args.step pgd_anneal_iters 649 600
dim_v 512
Epoch: [24][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.68)	train_penalty   0.00 (  0.00)	weight_norm   0.40 (  0.39)	train_acc   0.51 (  0.53)	train_minacc   0.50 (  0.50)	train_majacc   0.51 (  0.53)	train_corr   0.00 (  0.00)	l1 17.0057 (17.1343)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 17.19it/s] 27%|##6       | 7/26 [00:00<00:00, 34.96it/s]                                               27%|##6       | 7/26 [00:00<00:00, 34.96it/s] 50%|#####     | 13/26 [00:00<00:00, 43.42it/s] 69%|######9   | 18/26 [00:00<00:00, 44.19it/s]                                                69%|######9   | 18/26 [00:00<00:00, 44.19it/s] 92%|#########2| 24/26 [00:00<00:00, 49.13it/s]100%|##########| 26/26 [00:00<00:00, 41.02it/s]
Test: [   0/  26]	Loss 0.690 (0.690)	test_acc   0.52 (  0.52)	test_minacc   0.54 (  0.54)	test_majacc   0.52 (  0.52)	Loss_d 0.690 (0.690)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.54 (  0.54)	test_majacc_d   0.52 (  0.52)	test_corr_d   0.14 (  0.14)
Test: [  10/  26]	Loss 0.687 (0.692)	test_acc   0.52 (  0.52)	test_minacc   0.56 (  0.51)	test_majacc   0.52 (  0.52)	Loss_d 0.687 (0.692)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.56 (  0.51)	test_majacc_d   0.52 (  0.52)	test_corr_d   0.09 (  0.13)
Test: [  20/  26]	Loss 0.685 (0.692)	test_acc   0.55 (  0.52)	test_minacc   0.54 (  0.52)	test_majacc   0.56 (  0.52)	Loss_d 0.685 (0.692)	test_acc_d   0.55 (  0.52)	test_minacc_d   0.54 (  0.52)	test_majacc_d   0.56 (  0.52)	test_corr_d   0.14 (  0.13)
Test: [  26/  26]	Loss 0.691 (0.691)	test_acc   0.51 (  0.53)	test_minacc   0.50 (  0.52)	test_majacc   0.51 (  0.53)	Loss_d 0.691 (0.691)	test_acc_d   0.51 (  0.53)	test_minacc_d   0.50 (  0.52)	test_majacc_d   0.51 (  0.53)	test_corr_d   0.13 (  0.13)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.05it/s]
Test: [  0/  1]	Loss 0.696 (0.696)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.52 (  0.52)	Loss_d 0.696 (0.696)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.52 (  0.52)	test_corr_d  -0.11 ( -0.11)
Test: [  1/  1]	Loss 0.696 (0.696)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.52 (  0.52)	Loss_d 0.696 (0.696)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.52 (  0.52)	test_corr_d  -0.11 ( -0.11)
Overall Timing[ 24/  1]	epoch_time 0.0352 (0.0382)	validation_time 0.0003 (0.0006)	train_time 0.0349 (0.0374)
record: (train_acc, test_acc) (0.7215000303983689, 0.6650000214576721)
last accs (train_acc, test_acc) (0.5255000116825104, 0.5049999952316284)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.86it/s] 19%|#9        | 5/26 [00:00<00:00, 21.59it/s] 35%|###4      | 9/26 [00:00<00:00, 27.25it/s] 50%|#####     | 13/26 [00:00<00:00, 29.47it/s] 65%|######5   | 17/26 [00:00<00:00, 31.85it/s] 81%|########  | 21/26 [00:00<00:00, 33.32it/s] 96%|#########6| 25/26 [00:00<00:00, 34.28it/s]100%|##########| 26/26 [00:00<00:00, 28.24it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 650 400
penalty weights 10000.0
args.step pgd_anneal_iters 650 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 651 400
penalty weights 10000.0
args.step pgd_anneal_iters 651 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 652 400
penalty weights 10000.0
args.step pgd_anneal_iters 652 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 653 400
penalty weights 10000.0
args.step pgd_anneal_iters 653 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 654 400
penalty weights 10000.0
args.step pgd_anneal_iters 654 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 655 400
penalty weights 10000.0
args.step pgd_anneal_iters 655 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 656 400
penalty weights 10000.0
args.step pgd_anneal_iters 656 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 657 400
penalty weights 10000.0
args.step pgd_anneal_iters 657 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 658 400
penalty weights 10000.0
args.step pgd_anneal_iters 658 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 659 400
penalty weights 10000.0
args.step pgd_anneal_iters 659 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 660 400
penalty weights 10000.0
args.step pgd_anneal_iters 660 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 661 400
penalty weights 10000.0
args.step pgd_anneal_iters 661 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 662 400
penalty weights 10000.0
args.step pgd_anneal_iters 662 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 663 400
penalty weights 10000.0
args.step pgd_anneal_iters 663 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 664 400
penalty weights 10000.0
args.step pgd_anneal_iters 664 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 665 400
penalty weights 10000.0
args.step pgd_anneal_iters 665 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 666 400
penalty weights 10000.0
args.step pgd_anneal_iters 666 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 667 400
penalty weights 10000.0
args.step pgd_anneal_iters 667 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 668 400
penalty weights 10000.0
args.step pgd_anneal_iters 668 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 669 400
penalty weights 10000.0
args.step pgd_anneal_iters 669 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 670 400
penalty weights 10000.0
args.step pgd_anneal_iters 670 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 671 400
penalty weights 10000.0
args.step pgd_anneal_iters 671 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 672 400
penalty weights 10000.0
args.step pgd_anneal_iters 672 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 673 400
penalty weights 10000.0
args.step pgd_anneal_iters 673 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 674 400
penalty weights 10000.0
args.step pgd_anneal_iters 674 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 675 400
penalty weights 10000.0
args.step pgd_anneal_iters 675 600
dim_v 512
Epoch: [25][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.68)	train_penalty   0.00 (  0.00)	weight_norm   0.41 (  0.41)	train_acc   0.50 (  0.53)	train_minacc   0.50 (  0.51)	train_majacc   0.50 (  0.53)	train_corr   0.00 (  0.00)	l1 16.9355 (16.9604)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.35it/s] 27%|##6       | 7/26 [00:00<00:00, 35.05it/s]                                               27%|##6       | 7/26 [00:00<00:00, 35.05it/s] 46%|####6     | 12/26 [00:00<00:00, 39.54it/s] 69%|######9   | 18/26 [00:00<00:00, 44.97it/s]                                                69%|######9   | 18/26 [00:00<00:00, 44.97it/s] 92%|#########2| 24/26 [00:00<00:00, 47.80it/s]100%|##########| 26/26 [00:00<00:00, 39.10it/s]
Test: [   0/  26]	Loss 0.688 (0.688)	test_acc   0.52 (  0.52)	test_minacc   0.54 (  0.54)	test_majacc   0.51 (  0.51)	Loss_d 0.688 (0.688)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.54 (  0.54)	test_majacc_d   0.51 (  0.51)	test_corr_d   0.19 (  0.19)
Test: [  10/  26]	Loss 0.685 (0.689)	test_acc   0.52 (  0.52)	test_minacc   0.53 (  0.51)	test_majacc   0.52 (  0.52)	Loss_d 0.685 (0.689)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.53 (  0.51)	test_majacc_d   0.52 (  0.52)	test_corr_d   0.16 (  0.19)
Test: [  20/  26]	Loss 0.683 (0.689)	test_acc   0.55 (  0.52)	test_minacc   0.54 (  0.52)	test_majacc   0.56 (  0.52)	Loss_d 0.683 (0.689)	test_acc_d   0.55 (  0.52)	test_minacc_d   0.54 (  0.52)	test_majacc_d   0.56 (  0.52)	test_corr_d   0.20 (  0.19)
Test: [  26/  26]	Loss 0.688 (0.688)	test_acc   0.50 (  0.52)	test_minacc   0.50 (  0.52)	test_majacc   0.50 (  0.52)	Loss_d 0.688 (0.688)	test_acc_d   0.50 (  0.52)	test_minacc_d   0.50 (  0.52)	test_majacc_d   0.50 (  0.52)	test_corr_d   0.20 (  0.19)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.93it/s]
Test: [  0/  1]	Loss 0.696 (0.696)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.53 (  0.53)	Loss_d 0.696 (0.696)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.53 (  0.53)	test_corr_d  -0.07 ( -0.07)
Test: [  1/  1]	Loss 0.696 (0.696)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.53 (  0.53)	Loss_d 0.696 (0.696)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.53 (  0.53)	test_corr_d  -0.07 ( -0.07)
Overall Timing[ 25/  1]	epoch_time 0.0364 (0.0381)	validation_time 0.0004 (0.0006)	train_time 0.0360 (0.0374)
record: (train_acc, test_acc) (0.7215000303983689, 0.6650000214576721)
last accs (train_acc, test_acc) (0.5224000174701214, 0.5049999952316284)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.30it/s] 15%|#5        | 4/26 [00:00<00:01, 19.99it/s] 31%|###       | 8/26 [00:00<00:00, 25.98it/s] 46%|####6     | 12/26 [00:00<00:00, 29.10it/s] 62%|######1   | 16/26 [00:00<00:00, 30.74it/s] 77%|#######6  | 20/26 [00:00<00:00, 31.70it/s] 92%|#########2| 24/26 [00:00<00:00, 32.64it/s]100%|##########| 26/26 [00:00<00:00, 27.80it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 676 400
penalty weights 10000.0
args.step pgd_anneal_iters 676 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 677 400
penalty weights 10000.0
args.step pgd_anneal_iters 677 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 678 400
penalty weights 10000.0
args.step pgd_anneal_iters 678 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 679 400
penalty weights 10000.0
args.step pgd_anneal_iters 679 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 680 400
penalty weights 10000.0
args.step pgd_anneal_iters 680 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 681 400
penalty weights 10000.0
args.step pgd_anneal_iters 681 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 682 400
penalty weights 10000.0
args.step pgd_anneal_iters 682 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 683 400
penalty weights 10000.0
args.step pgd_anneal_iters 683 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 684 400
penalty weights 10000.0
args.step pgd_anneal_iters 684 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 685 400
penalty weights 10000.0
args.step pgd_anneal_iters 685 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 686 400
penalty weights 10000.0
args.step pgd_anneal_iters 686 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 687 400
penalty weights 10000.0
args.step pgd_anneal_iters 687 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 688 400
penalty weights 10000.0
args.step pgd_anneal_iters 688 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 689 400
penalty weights 10000.0
args.step pgd_anneal_iters 689 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 690 400
penalty weights 10000.0
args.step pgd_anneal_iters 690 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 691 400
penalty weights 10000.0
args.step pgd_anneal_iters 691 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 692 400
penalty weights 10000.0
args.step pgd_anneal_iters 692 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 693 400
penalty weights 10000.0
args.step pgd_anneal_iters 693 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 694 400
penalty weights 10000.0
args.step pgd_anneal_iters 694 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 695 400
penalty weights 10000.0
args.step pgd_anneal_iters 695 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 696 400
penalty weights 10000.0
args.step pgd_anneal_iters 696 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 697 400
penalty weights 10000.0
args.step pgd_anneal_iters 697 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 698 400
penalty weights 10000.0
args.step pgd_anneal_iters 698 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 699 400
penalty weights 10000.0
args.step pgd_anneal_iters 699 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 700 400
penalty weights 10000.0
args.step pgd_anneal_iters 700 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 701 400
penalty weights 10000.0
args.step pgd_anneal_iters 701 600
dim_v 512
Epoch: [26][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.41 (  0.41)	train_acc   0.52 (  0.53)	train_minacc   0.50 (  0.52)	train_majacc   0.52 (  0.53)	train_corr   0.00 (  0.00)	l1 16.9165 (16.9243)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.72it/s] 31%|###       | 8/26 [00:00<00:00, 34.58it/s]                                               31%|###       | 8/26 [00:00<00:00, 34.58it/s] 50%|#####     | 13/26 [00:00<00:00, 39.77it/s] 77%|#######6  | 20/26 [00:00<00:00, 46.64it/s]                                                77%|#######6  | 20/26 [00:00<00:00, 46.64it/s] 96%|#########6| 25/26 [00:00<00:00, 47.33it/s]100%|##########| 26/26 [00:00<00:00, 38.77it/s]
Test: [   0/  26]	Loss 0.688 (0.688)	test_acc   0.52 (  0.52)	test_minacc   0.54 (  0.54)	test_majacc   0.51 (  0.51)	Loss_d 0.688 (0.688)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.54 (  0.54)	test_majacc_d   0.51 (  0.51)	test_corr_d   0.17 (  0.17)
Test: [  10/  26]	Loss 0.685 (0.689)	test_acc   0.52 (  0.52)	test_minacc   0.53 (  0.51)	test_majacc   0.51 (  0.52)	Loss_d 0.685 (0.689)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.53 (  0.51)	test_majacc_d   0.51 (  0.52)	test_corr_d   0.14 (  0.17)
Test: [  20/  26]	Loss 0.684 (0.688)	test_acc   0.56 (  0.52)	test_minacc   0.54 (  0.52)	test_majacc   0.56 (  0.52)	Loss_d 0.684 (0.688)	test_acc_d   0.56 (  0.52)	test_minacc_d   0.54 (  0.52)	test_majacc_d   0.56 (  0.52)	test_corr_d   0.18 (  0.18)
Test: [  26/  26]	Loss 0.687 (0.688)	test_acc   0.52 (  0.52)	test_minacc   0.50 (  0.52)	test_majacc   0.52 (  0.52)	Loss_d 0.687 (0.688)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.50 (  0.52)	test_majacc_d   0.52 (  0.52)	test_corr_d   0.19 (  0.17)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 67.20it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.51 (  0.51)	test_minacc   0.50 (  0.50)	test_majacc   0.53 (  0.53)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.53 (  0.53)	test_corr_d  -0.09 ( -0.09)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.51 (  0.51)	test_minacc   0.50 (  0.50)	test_majacc   0.53 (  0.53)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.53 (  0.53)	test_corr_d  -0.09 ( -0.09)
Overall Timing[ 26/  1]	epoch_time 0.0465 (0.0385)	validation_time 0.0004 (0.0006)	train_time 0.0461 (0.0377)
record: (train_acc, test_acc) (0.7215000303983689, 0.6650000214576721)
last accs (train_acc, test_acc) (0.523700015693903, 0.5060000419616699)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.89it/s] 19%|#9        | 5/26 [00:00<00:01, 20.70it/s] 35%|###4      | 9/26 [00:00<00:00, 26.90it/s] 50%|#####     | 13/26 [00:00<00:00, 29.67it/s] 65%|######5   | 17/26 [00:00<00:00, 32.09it/s] 81%|########  | 21/26 [00:00<00:00, 33.54it/s] 96%|#########6| 25/26 [00:00<00:00, 34.08it/s]100%|##########| 26/26 [00:00<00:00, 28.23it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 702 400
penalty weights 10000.0
args.step pgd_anneal_iters 702 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 703 400
penalty weights 10000.0
args.step pgd_anneal_iters 703 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 704 400
penalty weights 10000.0
args.step pgd_anneal_iters 704 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 705 400
penalty weights 10000.0
args.step pgd_anneal_iters 705 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 706 400
penalty weights 10000.0
args.step pgd_anneal_iters 706 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 707 400
penalty weights 10000.0
args.step pgd_anneal_iters 707 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 708 400
penalty weights 10000.0
args.step pgd_anneal_iters 708 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 709 400
penalty weights 10000.0
args.step pgd_anneal_iters 709 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 710 400
penalty weights 10000.0
args.step pgd_anneal_iters 710 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 711 400
penalty weights 10000.0
args.step pgd_anneal_iters 711 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 712 400
penalty weights 10000.0
args.step pgd_anneal_iters 712 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 713 400
penalty weights 10000.0
args.step pgd_anneal_iters 713 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 714 400
penalty weights 10000.0
args.step pgd_anneal_iters 714 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 715 400
penalty weights 10000.0
args.step pgd_anneal_iters 715 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 716 400
penalty weights 10000.0
args.step pgd_anneal_iters 716 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 717 400
penalty weights 10000.0
args.step pgd_anneal_iters 717 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 718 400
penalty weights 10000.0
args.step pgd_anneal_iters 718 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 719 400
penalty weights 10000.0
args.step pgd_anneal_iters 719 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 720 400
penalty weights 10000.0
args.step pgd_anneal_iters 720 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 721 400
penalty weights 10000.0
args.step pgd_anneal_iters 721 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 722 400
penalty weights 10000.0
args.step pgd_anneal_iters 722 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 723 400
penalty weights 10000.0
args.step pgd_anneal_iters 723 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 724 400
penalty weights 10000.0
args.step pgd_anneal_iters 724 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 725 400
penalty weights 10000.0
args.step pgd_anneal_iters 725 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 726 400
penalty weights 10000.0
args.step pgd_anneal_iters 726 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 727 400
penalty weights 10000.0
args.step pgd_anneal_iters 727 600
dim_v 512
Epoch: [27][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.41 (  0.41)	train_acc   0.51 (  0.52)	train_minacc   0.50 (  0.52)	train_majacc   0.51 (  0.52)	train_corr   0.00 (  0.00)	l1 16.9073 (16.9115)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.49it/s] 23%|##3       | 6/26 [00:00<00:00, 31.11it/s]                                               23%|##3       | 6/26 [00:00<00:00, 31.11it/s] 42%|####2     | 11/26 [00:00<00:00, 38.80it/s] 65%|######5   | 17/26 [00:00<00:00, 43.16it/s]                                                65%|######5   | 17/26 [00:00<00:00, 43.16it/s] 88%|########8 | 23/26 [00:00<00:00, 47.75it/s]100%|##########| 26/26 [00:00<00:00, 38.29it/s]
Test: [   0/  26]	Loss 0.688 (0.688)	test_acc   0.52 (  0.52)	test_minacc   0.56 (  0.56)	test_majacc   0.50 (  0.50)	Loss_d 0.688 (0.688)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.56 (  0.56)	test_majacc_d   0.50 (  0.50)	test_corr_d   0.15 (  0.15)
Test: [  10/  26]	Loss 0.686 (0.689)	test_acc   0.52 (  0.52)	test_minacc   0.54 (  0.51)	test_majacc   0.51 (  0.52)	Loss_d 0.686 (0.689)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.54 (  0.51)	test_majacc_d   0.51 (  0.52)	test_corr_d   0.12 (  0.15)
Test: [  20/  26]	Loss 0.685 (0.689)	test_acc   0.56 (  0.52)	test_minacc   0.54 (  0.52)	test_majacc   0.56 (  0.52)	Loss_d 0.685 (0.689)	test_acc_d   0.56 (  0.52)	test_minacc_d   0.54 (  0.52)	test_majacc_d   0.56 (  0.52)	test_corr_d   0.16 (  0.16)
Test: [  26/  26]	Loss 0.688 (0.688)	test_acc   0.51 (  0.52)	test_minacc   0.50 (  0.53)	test_majacc   0.51 (  0.52)	Loss_d 0.688 (0.688)	test_acc_d   0.51 (  0.52)	test_minacc_d   0.50 (  0.53)	test_majacc_d   0.51 (  0.52)	test_corr_d   0.17 (  0.15)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 67.30it/s]
Test: [  0/  1]	Loss 0.692 (0.692)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.52 (  0.52)	Loss_d 0.692 (0.692)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.52 (  0.52)	test_corr_d  -0.12 ( -0.12)
Test: [  1/  1]	Loss 0.692 (0.692)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.52 (  0.52)	Loss_d 0.692 (0.692)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.52 (  0.52)	test_corr_d  -0.12 ( -0.12)
Overall Timing[ 27/  1]	epoch_time 0.0374 (0.0384)	validation_time 0.0004 (0.0006)	train_time 0.0370 (0.0377)
record: (train_acc, test_acc) (0.7215000303983689, 0.6650000214576721)
last accs (train_acc, test_acc) (0.5238000166416168, 0.5049999952316284)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.29it/s] 19%|#9        | 5/26 [00:00<00:00, 22.20it/s] 35%|###4      | 9/26 [00:00<00:00, 27.32it/s] 50%|#####     | 13/26 [00:00<00:00, 28.73it/s] 65%|######5   | 17/26 [00:00<00:00, 30.50it/s] 81%|########  | 21/26 [00:00<00:00, 32.48it/s] 96%|#########6| 25/26 [00:00<00:00, 32.65it/s]100%|##########| 26/26 [00:00<00:00, 27.65it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 728 400
penalty weights 10000.0
args.step pgd_anneal_iters 728 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 729 400
penalty weights 10000.0
args.step pgd_anneal_iters 729 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 730 400
penalty weights 10000.0
args.step pgd_anneal_iters 730 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 731 400
penalty weights 10000.0
args.step pgd_anneal_iters 731 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 732 400
penalty weights 10000.0
args.step pgd_anneal_iters 732 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 733 400
penalty weights 10000.0
args.step pgd_anneal_iters 733 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 734 400
penalty weights 10000.0
args.step pgd_anneal_iters 734 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 735 400
penalty weights 10000.0
args.step pgd_anneal_iters 735 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 736 400
penalty weights 10000.0
args.step pgd_anneal_iters 736 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 737 400
penalty weights 10000.0
args.step pgd_anneal_iters 737 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 738 400
penalty weights 10000.0
args.step pgd_anneal_iters 738 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 739 400
penalty weights 10000.0
args.step pgd_anneal_iters 739 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 740 400
penalty weights 10000.0
args.step pgd_anneal_iters 740 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 741 400
penalty weights 10000.0
args.step pgd_anneal_iters 741 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 742 400
penalty weights 10000.0
args.step pgd_anneal_iters 742 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 743 400
penalty weights 10000.0
args.step pgd_anneal_iters 743 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 744 400
penalty weights 10000.0
args.step pgd_anneal_iters 744 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 745 400
penalty weights 10000.0
args.step pgd_anneal_iters 745 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 746 400
penalty weights 10000.0
args.step pgd_anneal_iters 746 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 747 400
penalty weights 10000.0
args.step pgd_anneal_iters 747 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 748 400
penalty weights 10000.0
args.step pgd_anneal_iters 748 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 749 400
penalty weights 10000.0
args.step pgd_anneal_iters 749 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 750 400
penalty weights 10000.0
args.step pgd_anneal_iters 750 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 751 400
penalty weights 10000.0
args.step pgd_anneal_iters 751 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 752 400
penalty weights 10000.0
args.step pgd_anneal_iters 752 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 753 400
penalty weights 10000.0
args.step pgd_anneal_iters 753 600
dim_v 512
Epoch: [28][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.41 (  0.41)	train_acc   0.50 (  0.52)	train_minacc   0.50 (  0.53)	train_majacc   0.50 (  0.52)	train_corr   0.00 (  0.00)	l1 16.9013 (16.9041)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.59it/s] 27%|##6       | 7/26 [00:00<00:00, 35.20it/s]                                               27%|##6       | 7/26 [00:00<00:00, 35.20it/s] 50%|#####     | 13/26 [00:00<00:00, 40.51it/s] 73%|#######3  | 19/26 [00:00<00:00, 46.42it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 46.42it/s] 96%|#########6| 25/26 [00:00<00:00, 47.72it/s]100%|##########| 26/26 [00:00<00:00, 39.40it/s]
Test: [   0/  26]	Loss 0.689 (0.689)	test_acc   0.51 (  0.51)	test_minacc   0.54 (  0.54)	test_majacc   0.50 (  0.50)	Loss_d 0.689 (0.689)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.54 (  0.54)	test_majacc_d   0.50 (  0.50)	test_corr_d   0.12 (  0.12)
Test: [  10/  26]	Loss 0.687 (0.690)	test_acc   0.52 (  0.52)	test_minacc   0.54 (  0.51)	test_majacc   0.51 (  0.52)	Loss_d 0.687 (0.690)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.54 (  0.51)	test_majacc_d   0.51 (  0.52)	test_corr_d   0.09 (  0.12)
Test: [  20/  26]	Loss 0.686 (0.690)	test_acc   0.55 (  0.52)	test_minacc   0.54 (  0.52)	test_majacc   0.55 (  0.52)	Loss_d 0.686 (0.690)	test_acc_d   0.55 (  0.52)	test_minacc_d   0.54 (  0.52)	test_majacc_d   0.55 (  0.52)	test_corr_d   0.13 (  0.13)
Test: [  26/  26]	Loss 0.689 (0.689)	test_acc   0.50 (  0.52)	test_minacc   0.50 (  0.52)	test_majacc   0.50 (  0.52)	Loss_d 0.689 (0.689)	test_acc_d   0.50 (  0.52)	test_minacc_d   0.50 (  0.52)	test_majacc_d   0.50 (  0.52)	test_corr_d   0.15 (  0.13)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.01it/s]
Test: [  0/  1]	Loss 0.691 (0.691)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.52 (  0.52)	Loss_d 0.691 (0.691)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.52 (  0.52)	test_corr_d  -0.14 ( -0.14)
Test: [  1/  1]	Loss 0.691 (0.691)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.52 (  0.52)	Loss_d 0.691 (0.691)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.52 (  0.52)	test_corr_d  -0.14 ( -0.14)
Overall Timing[ 28/  1]	epoch_time 0.0365 (0.0383)	validation_time 0.0003 (0.0006)	train_time 0.0362 (0.0376)
record: (train_acc, test_acc) (0.7215000303983689, 0.6650000214576721)
last accs (train_acc, test_acc) (0.5197000164687634, 0.5040000081062317)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.08it/s] 19%|#9        | 5/26 [00:00<00:00, 23.49it/s] 35%|###4      | 9/26 [00:00<00:00, 28.77it/s] 50%|#####     | 13/26 [00:00<00:00, 30.41it/s] 65%|######5   | 17/26 [00:00<00:00, 31.36it/s] 81%|########  | 21/26 [00:00<00:00, 32.14it/s] 96%|#########6| 25/26 [00:00<00:00, 33.15it/s]100%|##########| 26/26 [00:00<00:00, 27.78it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 754 400
penalty weights 10000.0
args.step pgd_anneal_iters 754 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 755 400
penalty weights 10000.0
args.step pgd_anneal_iters 755 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 756 400
penalty weights 10000.0
args.step pgd_anneal_iters 756 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 757 400
penalty weights 10000.0
args.step pgd_anneal_iters 757 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 758 400
penalty weights 10000.0
args.step pgd_anneal_iters 758 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 759 400
penalty weights 10000.0
args.step pgd_anneal_iters 759 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 760 400
penalty weights 10000.0
args.step pgd_anneal_iters 760 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 761 400
penalty weights 10000.0
args.step pgd_anneal_iters 761 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 762 400
penalty weights 10000.0
args.step pgd_anneal_iters 762 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 763 400
penalty weights 10000.0
args.step pgd_anneal_iters 763 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 764 400
penalty weights 10000.0
args.step pgd_anneal_iters 764 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 765 400
penalty weights 10000.0
args.step pgd_anneal_iters 765 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 766 400
penalty weights 10000.0
args.step pgd_anneal_iters 766 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 767 400
penalty weights 10000.0
args.step pgd_anneal_iters 767 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 768 400
penalty weights 10000.0
args.step pgd_anneal_iters 768 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 769 400
penalty weights 10000.0
args.step pgd_anneal_iters 769 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 770 400
penalty weights 10000.0
args.step pgd_anneal_iters 770 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 771 400
penalty weights 10000.0
args.step pgd_anneal_iters 771 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 772 400
penalty weights 10000.0
args.step pgd_anneal_iters 772 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 773 400
penalty weights 10000.0
args.step pgd_anneal_iters 773 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 774 400
penalty weights 10000.0
args.step pgd_anneal_iters 774 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 775 400
penalty weights 10000.0
args.step pgd_anneal_iters 775 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 776 400
penalty weights 10000.0
args.step pgd_anneal_iters 776 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 777 400
penalty weights 10000.0
args.step pgd_anneal_iters 777 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 778 400
penalty weights 10000.0
args.step pgd_anneal_iters 778 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 779 400
penalty weights 10000.0
args.step pgd_anneal_iters 779 600
dim_v 512
Epoch: [29][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.40 (  0.41)	train_acc   0.50 (  0.52)	train_minacc   0.50 (  0.52)	train_majacc   0.50 (  0.52)	train_corr   0.00 (  0.00)	l1 16.8970 (16.8990)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:00, 28.58it/s] 35%|###4      | 9/26 [00:00<00:00, 39.39it/s]                                               35%|###4      | 9/26 [00:00<00:00, 39.39it/s] 58%|#####7    | 15/26 [00:00<00:00, 46.25it/s]                                                58%|#####7    | 15/26 [00:00<00:00, 46.25it/s] 81%|########  | 21/26 [00:00<00:00, 46.94it/s]100%|##########| 26/26 [00:00<00:00, 42.34it/s]
Test: [   0/  26]	Loss 0.690 (0.690)	test_acc   0.50 (  0.50)	test_minacc   0.54 (  0.54)	test_majacc   0.49 (  0.49)	Loss_d 0.690 (0.690)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.54 (  0.54)	test_majacc_d   0.49 (  0.49)	test_corr_d   0.10 (  0.10)
Test: [  10/  26]	Loss 0.688 (0.691)	test_acc   0.52 (  0.51)	test_minacc   0.54 (  0.51)	test_majacc   0.51 (  0.51)	Loss_d 0.688 (0.691)	test_acc_d   0.52 (  0.51)	test_minacc_d   0.54 (  0.51)	test_majacc_d   0.51 (  0.51)	test_corr_d   0.07 (  0.11)
Test: [  20/  26]	Loss 0.687 (0.691)	test_acc   0.55 (  0.51)	test_minacc   0.54 (  0.52)	test_majacc   0.55 (  0.51)	Loss_d 0.687 (0.691)	test_acc_d   0.55 (  0.51)	test_minacc_d   0.54 (  0.52)	test_majacc_d   0.55 (  0.51)	test_corr_d   0.11 (  0.11)
Test: [  26/  26]	Loss 0.690 (0.690)	test_acc   0.50 (  0.52)	test_minacc   0.50 (  0.52)	test_majacc   0.50 (  0.52)	Loss_d 0.690 (0.690)	test_acc_d   0.50 (  0.52)	test_minacc_d   0.50 (  0.52)	test_majacc_d   0.50 (  0.52)	test_corr_d   0.13 (  0.11)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.77it/s]
Test: [  0/  1]	Loss 0.690 (0.690)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.52 (  0.52)	Loss_d 0.690 (0.690)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.52 (  0.52)	test_corr_d  -0.16 ( -0.16)
Test: [  1/  1]	Loss 0.690 (0.690)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.52 (  0.52)	Loss_d 0.690 (0.690)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.52 (  0.52)	test_corr_d  -0.16 ( -0.16)
Overall Timing[ 29/  1]	epoch_time 0.0365 (0.0383)	validation_time 0.0004 (0.0006)	train_time 0.0360 (0.0376)
record: (train_acc, test_acc) (0.7215000303983689, 0.6650000214576721)
last accs (train_acc, test_acc) (0.5166000152826309, 0.5049999952316284)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.87it/s] 19%|#9        | 5/26 [00:00<00:00, 23.60it/s] 35%|###4      | 9/26 [00:00<00:00, 28.71it/s] 50%|#####     | 13/26 [00:00<00:00, 31.57it/s] 65%|######5   | 17/26 [00:00<00:00, 32.69it/s] 81%|########  | 21/26 [00:00<00:00, 33.69it/s] 96%|#########6| 25/26 [00:00<00:00, 34.03it/s]100%|##########| 26/26 [00:00<00:00, 29.30it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 780 400
penalty weights 10000.0
args.step pgd_anneal_iters 780 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 781 400
penalty weights 10000.0
args.step pgd_anneal_iters 781 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 782 400
penalty weights 10000.0
args.step pgd_anneal_iters 782 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 783 400
penalty weights 10000.0
args.step pgd_anneal_iters 783 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 784 400
penalty weights 10000.0
args.step pgd_anneal_iters 784 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 785 400
penalty weights 10000.0
args.step pgd_anneal_iters 785 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 786 400
penalty weights 10000.0
args.step pgd_anneal_iters 786 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 787 400
penalty weights 10000.0
args.step pgd_anneal_iters 787 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 788 400
penalty weights 10000.0
args.step pgd_anneal_iters 788 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 789 400
penalty weights 10000.0
args.step pgd_anneal_iters 789 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 790 400
penalty weights 10000.0
args.step pgd_anneal_iters 790 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 791 400
penalty weights 10000.0
args.step pgd_anneal_iters 791 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 792 400
penalty weights 10000.0
args.step pgd_anneal_iters 792 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 793 400
penalty weights 10000.0
args.step pgd_anneal_iters 793 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 794 400
penalty weights 10000.0
args.step pgd_anneal_iters 794 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 795 400
penalty weights 10000.0
args.step pgd_anneal_iters 795 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 796 400
penalty weights 10000.0
args.step pgd_anneal_iters 796 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 797 400
penalty weights 10000.0
args.step pgd_anneal_iters 797 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 798 400
penalty weights 10000.0
args.step pgd_anneal_iters 798 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 799 400
penalty weights 10000.0
args.step pgd_anneal_iters 799 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 800 400
penalty weights 10000.0
args.step pgd_anneal_iters 800 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 801 400
penalty weights 10000.0
args.step pgd_anneal_iters 801 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 802 400
penalty weights 10000.0
args.step pgd_anneal_iters 802 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 803 400
penalty weights 10000.0
args.step pgd_anneal_iters 803 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 804 400
penalty weights 10000.0
args.step pgd_anneal_iters 804 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 805 400
penalty weights 10000.0
args.step pgd_anneal_iters 805 600
dim_v 512
Epoch: [30][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.40 (  0.40)	train_acc   0.50 (  0.52)	train_minacc   0.53 (  0.52)	train_majacc   0.50 (  0.52)	train_corr   0.00 (  0.00)	l1 16.8941 (16.8954)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:00, 27.22it/s] 35%|###4      | 9/26 [00:00<00:00, 43.54it/s]                                               35%|###4      | 9/26 [00:00<00:00, 43.54it/s] 58%|#####7    | 15/26 [00:00<00:00, 44.82it/s]                                                58%|#####7    | 15/26 [00:00<00:00, 44.82it/s] 81%|########  | 21/26 [00:00<00:00, 49.00it/s]100%|##########| 26/26 [00:00<00:00, 42.37it/s]
Test: [   0/  26]	Loss 0.690 (0.690)	test_acc   0.50 (  0.50)	test_minacc   0.54 (  0.54)	test_majacc   0.49 (  0.49)	Loss_d 0.690 (0.690)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.54 (  0.54)	test_majacc_d   0.49 (  0.49)	test_corr_d   0.08 (  0.08)
Test: [  10/  26]	Loss 0.689 (0.691)	test_acc   0.52 (  0.51)	test_minacc   0.54 (  0.51)	test_majacc   0.51 (  0.51)	Loss_d 0.689 (0.691)	test_acc_d   0.52 (  0.51)	test_minacc_d   0.54 (  0.51)	test_majacc_d   0.51 (  0.51)	test_corr_d   0.06 (  0.09)
Test: [  20/  26]	Loss 0.688 (0.691)	test_acc   0.54 (  0.51)	test_minacc   0.54 (  0.52)	test_majacc   0.54 (  0.51)	Loss_d 0.688 (0.691)	test_acc_d   0.54 (  0.51)	test_minacc_d   0.54 (  0.52)	test_majacc_d   0.54 (  0.51)	test_corr_d   0.10 (  0.10)
Test: [  26/  26]	Loss 0.690 (0.691)	test_acc   0.50 (  0.52)	test_minacc   0.53 (  0.52)	test_majacc   0.50 (  0.51)	Loss_d 0.690 (0.691)	test_acc_d   0.50 (  0.52)	test_minacc_d   0.53 (  0.52)	test_majacc_d   0.50 (  0.51)	test_corr_d   0.12 (  0.09)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.46it/s]
Test: [  0/  1]	Loss 0.690 (0.690)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.51 (  0.51)	Loss_d 0.690 (0.690)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.51 (  0.51)	test_corr_d  -0.17 ( -0.17)
Test: [  1/  1]	Loss 0.690 (0.690)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.51 (  0.51)	Loss_d 0.690 (0.690)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.51 (  0.51)	test_corr_d  -0.17 ( -0.17)
Overall Timing[ 30/  1]	epoch_time 0.0360 (0.0382)	validation_time 0.0004 (0.0006)	train_time 0.0356 (0.0375)
record: (train_acc, test_acc) (0.7215000303983689, 0.6650000214576721)
last accs (train_acc, test_acc) (0.5158000132143498, 0.5020000338554382)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.02it/s] 19%|#9        | 5/26 [00:00<00:00, 22.35it/s] 35%|###4      | 9/26 [00:00<00:00, 27.05it/s] 50%|#####     | 13/26 [00:00<00:00, 29.39it/s] 65%|######5   | 17/26 [00:00<00:00, 30.62it/s] 81%|########  | 21/26 [00:00<00:00, 32.31it/s] 96%|#########6| 25/26 [00:00<00:00, 32.79it/s]100%|##########| 26/26 [00:00<00:00, 27.78it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 806 400
penalty weights 10000.0
args.step pgd_anneal_iters 806 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 807 400
penalty weights 10000.0
args.step pgd_anneal_iters 807 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 808 400
penalty weights 10000.0
args.step pgd_anneal_iters 808 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 809 400
penalty weights 10000.0
args.step pgd_anneal_iters 809 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 810 400
penalty weights 10000.0
args.step pgd_anneal_iters 810 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 811 400
penalty weights 10000.0
args.step pgd_anneal_iters 811 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 812 400
penalty weights 10000.0
args.step pgd_anneal_iters 812 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 813 400
penalty weights 10000.0
args.step pgd_anneal_iters 813 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 814 400
penalty weights 10000.0
args.step pgd_anneal_iters 814 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 815 400
penalty weights 10000.0
args.step pgd_anneal_iters 815 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 816 400
penalty weights 10000.0
args.step pgd_anneal_iters 816 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 817 400
penalty weights 10000.0
args.step pgd_anneal_iters 817 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 818 400
penalty weights 10000.0
args.step pgd_anneal_iters 818 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 819 400
penalty weights 10000.0
args.step pgd_anneal_iters 819 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 820 400
penalty weights 10000.0
args.step pgd_anneal_iters 820 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 821 400
penalty weights 10000.0
args.step pgd_anneal_iters 821 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 822 400
penalty weights 10000.0
args.step pgd_anneal_iters 822 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 823 400
penalty weights 10000.0
args.step pgd_anneal_iters 823 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 824 400
penalty weights 10000.0
args.step pgd_anneal_iters 824 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 825 400
penalty weights 10000.0
args.step pgd_anneal_iters 825 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 826 400
penalty weights 10000.0
args.step pgd_anneal_iters 826 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 827 400
penalty weights 10000.0
args.step pgd_anneal_iters 827 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 828 400
penalty weights 10000.0
args.step pgd_anneal_iters 828 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 829 400
penalty weights 10000.0
args.step pgd_anneal_iters 829 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 830 400
penalty weights 10000.0
args.step pgd_anneal_iters 830 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 831 400
penalty weights 10000.0
args.step pgd_anneal_iters 831 600
dim_v 512
Epoch: [31][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.40 (  0.40)	train_acc   0.50 (  0.51)	train_minacc   0.53 (  0.52)	train_majacc   0.50 (  0.51)	train_corr   0.00 (  0.00)	l1 16.8922 (16.8931)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.62it/s] 27%|##6       | 7/26 [00:00<00:00, 35.29it/s]                                               27%|##6       | 7/26 [00:00<00:00, 35.29it/s] 46%|####6     | 12/26 [00:00<00:00, 38.19it/s] 69%|######9   | 18/26 [00:00<00:00, 45.20it/s]                                                69%|######9   | 18/26 [00:00<00:00, 45.20it/s] 92%|#########2| 24/26 [00:00<00:00, 46.29it/s]100%|##########| 26/26 [00:00<00:00, 39.06it/s]
Test: [   0/  26]	Loss 0.691 (0.691)	test_acc   0.50 (  0.50)	test_minacc   0.54 (  0.54)	test_majacc   0.49 (  0.49)	Loss_d 0.691 (0.691)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.54 (  0.54)	test_majacc_d   0.49 (  0.49)	test_corr_d   0.06 (  0.06)
Test: [  10/  26]	Loss 0.689 (0.691)	test_acc   0.52 (  0.51)	test_minacc   0.53 (  0.51)	test_majacc   0.51 (  0.51)	Loss_d 0.689 (0.691)	test_acc_d   0.52 (  0.51)	test_minacc_d   0.53 (  0.51)	test_majacc_d   0.51 (  0.51)	test_corr_d   0.04 (  0.07)
Test: [  20/  26]	Loss 0.689 (0.691)	test_acc   0.54 (  0.51)	test_minacc   0.54 (  0.52)	test_majacc   0.54 (  0.51)	Loss_d 0.689 (0.691)	test_acc_d   0.54 (  0.51)	test_minacc_d   0.54 (  0.52)	test_majacc_d   0.54 (  0.51)	test_corr_d   0.08 (  0.08)
Test: [  26/  26]	Loss 0.690 (0.691)	test_acc   0.50 (  0.51)	test_minacc   0.53 (  0.52)	test_majacc   0.50 (  0.51)	Loss_d 0.690 (0.691)	test_acc_d   0.50 (  0.51)	test_minacc_d   0.53 (  0.52)	test_majacc_d   0.50 (  0.51)	test_corr_d   0.10 (  0.08)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.92it/s]
Test: [  0/  1]	Loss 0.690 (0.690)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.51 (  0.51)	Loss_d 0.690 (0.690)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.51 (  0.51)	test_corr_d  -0.18 ( -0.18)
Test: [  1/  1]	Loss 0.690 (0.690)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.51 (  0.51)	Loss_d 0.690 (0.690)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.51 (  0.51)	test_corr_d  -0.18 ( -0.18)
Overall Timing[ 31/  1]	epoch_time 0.0370 (0.0382)	validation_time 0.0006 (0.0006)	train_time 0.0364 (0.0375)
record: (train_acc, test_acc) (0.7215000303983689, 0.6650000214576721)
last accs (train_acc, test_acc) (0.5133000110387802, 0.5010000467300415)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.92it/s] 19%|#9        | 5/26 [00:00<00:00, 22.79it/s] 35%|###4      | 9/26 [00:00<00:00, 27.49it/s] 50%|#####     | 13/26 [00:00<00:00, 30.60it/s] 65%|######5   | 17/26 [00:00<00:00, 31.89it/s] 81%|########  | 21/26 [00:00<00:00, 32.87it/s] 96%|#########6| 25/26 [00:00<00:00, 33.45it/s]100%|##########| 26/26 [00:00<00:00, 28.54it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 832 400
penalty weights 10000.0
args.step pgd_anneal_iters 832 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 833 400
penalty weights 10000.0
args.step pgd_anneal_iters 833 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 834 400
penalty weights 10000.0
args.step pgd_anneal_iters 834 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 835 400
penalty weights 10000.0
args.step pgd_anneal_iters 835 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 836 400
penalty weights 10000.0
args.step pgd_anneal_iters 836 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 837 400
penalty weights 10000.0
args.step pgd_anneal_iters 837 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 838 400
penalty weights 10000.0
args.step pgd_anneal_iters 838 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 839 400
penalty weights 10000.0
args.step pgd_anneal_iters 839 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 840 400
penalty weights 10000.0
args.step pgd_anneal_iters 840 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 841 400
penalty weights 10000.0
args.step pgd_anneal_iters 841 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 842 400
penalty weights 10000.0
args.step pgd_anneal_iters 842 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 843 400
penalty weights 10000.0
args.step pgd_anneal_iters 843 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 844 400
penalty weights 10000.0
args.step pgd_anneal_iters 844 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 845 400
penalty weights 10000.0
args.step pgd_anneal_iters 845 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 846 400
penalty weights 10000.0
args.step pgd_anneal_iters 846 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 847 400
penalty weights 10000.0
args.step pgd_anneal_iters 847 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 848 400
penalty weights 10000.0
args.step pgd_anneal_iters 848 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 849 400
penalty weights 10000.0
args.step pgd_anneal_iters 849 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 850 400
penalty weights 10000.0
args.step pgd_anneal_iters 850 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 851 400
penalty weights 10000.0
args.step pgd_anneal_iters 851 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 852 400
penalty weights 10000.0
args.step pgd_anneal_iters 852 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 853 400
penalty weights 10000.0
args.step pgd_anneal_iters 853 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 854 400
penalty weights 10000.0
args.step pgd_anneal_iters 854 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 855 400
penalty weights 10000.0
args.step pgd_anneal_iters 855 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 856 400
penalty weights 10000.0
args.step pgd_anneal_iters 856 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 857 400
penalty weights 10000.0
args.step pgd_anneal_iters 857 600
dim_v 512
Epoch: [32][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.40 (  0.40)	train_acc   0.50 (  0.51)	train_minacc   0.53 (  0.52)	train_majacc   0.50 (  0.51)	train_corr   0.00 (  0.00)	l1 16.8912 (16.8916)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.66it/s] 23%|##3       | 6/26 [00:00<00:00, 32.72it/s]                                               23%|##3       | 6/26 [00:00<00:00, 32.72it/s] 42%|####2     | 11/26 [00:00<00:00, 39.44it/s] 62%|######1   | 16/26 [00:00<00:00, 41.28it/s]                                                62%|######1   | 16/26 [00:00<00:00, 41.28it/s] 85%|########4 | 22/26 [00:00<00:00, 47.05it/s]100%|##########| 26/26 [00:00<00:00, 38.66it/s]
Test: [   0/  26]	Loss 0.691 (0.691)	test_acc   0.50 (  0.50)	test_minacc   0.54 (  0.54)	test_majacc   0.49 (  0.49)	Loss_d 0.691 (0.691)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.54 (  0.54)	test_majacc_d   0.49 (  0.49)	test_corr_d   0.04 (  0.04)
Test: [  10/  26]	Loss 0.690 (0.692)	test_acc   0.52 (  0.51)	test_minacc   0.53 (  0.51)	test_majacc   0.51 (  0.51)	Loss_d 0.690 (0.692)	test_acc_d   0.52 (  0.51)	test_minacc_d   0.53 (  0.51)	test_majacc_d   0.51 (  0.51)	test_corr_d   0.03 (  0.06)
Test: [  20/  26]	Loss 0.689 (0.692)	test_acc   0.54 (  0.51)	test_minacc   0.54 (  0.52)	test_majacc   0.54 (  0.51)	Loss_d 0.689 (0.692)	test_acc_d   0.54 (  0.51)	test_minacc_d   0.54 (  0.52)	test_majacc_d   0.54 (  0.51)	test_corr_d   0.06 (  0.06)
Test: [  26/  26]	Loss 0.691 (0.691)	test_acc   0.50 (  0.51)	test_minacc   0.53 (  0.52)	test_majacc   0.50 (  0.51)	Loss_d 0.691 (0.691)	test_acc_d   0.50 (  0.51)	test_minacc_d   0.53 (  0.52)	test_majacc_d   0.50 (  0.51)	test_corr_d   0.08 (  0.06)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.70it/s]
Test: [  0/  1]	Loss 0.690 (0.690)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.690 (0.690)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.19 ( -0.19)
Test: [  1/  1]	Loss 0.690 (0.690)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.690 (0.690)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.19 ( -0.19)
Overall Timing[ 32/  1]	epoch_time 0.0379 (0.0382)	validation_time 0.0003 (0.0006)	train_time 0.0375 (0.0375)
record: (train_acc, test_acc) (0.7215000303983689, 0.6650000214576721)
last accs (train_acc, test_acc) (0.5112000088393688, 0.5020000338554382)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.63it/s] 19%|#9        | 5/26 [00:00<00:01, 19.44it/s] 35%|###4      | 9/26 [00:00<00:00, 26.03it/s] 50%|#####     | 13/26 [00:00<00:00, 29.58it/s] 65%|######5   | 17/26 [00:00<00:00, 31.23it/s] 81%|########  | 21/26 [00:00<00:00, 31.88it/s] 96%|#########6| 25/26 [00:00<00:00, 32.42it/s]100%|##########| 26/26 [00:00<00:00, 27.01it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 858 400
penalty weights 10000.0
args.step pgd_anneal_iters 858 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 859 400
penalty weights 10000.0
args.step pgd_anneal_iters 859 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 860 400
penalty weights 10000.0
args.step pgd_anneal_iters 860 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 861 400
penalty weights 10000.0
args.step pgd_anneal_iters 861 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 862 400
penalty weights 10000.0
args.step pgd_anneal_iters 862 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 863 400
penalty weights 10000.0
args.step pgd_anneal_iters 863 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 864 400
penalty weights 10000.0
args.step pgd_anneal_iters 864 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 865 400
penalty weights 10000.0
args.step pgd_anneal_iters 865 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 866 400
penalty weights 10000.0
args.step pgd_anneal_iters 866 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 867 400
penalty weights 10000.0
args.step pgd_anneal_iters 867 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 868 400
penalty weights 10000.0
args.step pgd_anneal_iters 868 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 869 400
penalty weights 10000.0
args.step pgd_anneal_iters 869 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 870 400
penalty weights 10000.0
args.step pgd_anneal_iters 870 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 871 400
penalty weights 10000.0
args.step pgd_anneal_iters 871 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 872 400
penalty weights 10000.0
args.step pgd_anneal_iters 872 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 873 400
penalty weights 10000.0
args.step pgd_anneal_iters 873 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 874 400
penalty weights 10000.0
args.step pgd_anneal_iters 874 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 875 400
penalty weights 10000.0
args.step pgd_anneal_iters 875 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 876 400
penalty weights 10000.0
args.step pgd_anneal_iters 876 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 877 400
penalty weights 10000.0
args.step pgd_anneal_iters 877 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 878 400
penalty weights 10000.0
args.step pgd_anneal_iters 878 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 879 400
penalty weights 10000.0
args.step pgd_anneal_iters 879 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 880 400
penalty weights 10000.0
args.step pgd_anneal_iters 880 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 881 400
penalty weights 10000.0
args.step pgd_anneal_iters 881 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 882 400
penalty weights 10000.0
args.step pgd_anneal_iters 882 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 883 400
penalty weights 10000.0
args.step pgd_anneal_iters 883 600
dim_v 512
Epoch: [33][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.40 (  0.40)	train_acc   0.50 (  0.51)	train_minacc   0.53 (  0.52)	train_majacc   0.50 (  0.51)	train_corr   0.00 (  0.00)	l1 16.8910 (16.8910)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 18.57it/s] 31%|###       | 8/26 [00:00<00:00, 40.66it/s]                                               31%|###       | 8/26 [00:00<00:00, 40.66it/s] 50%|#####     | 13/26 [00:00<00:00, 41.47it/s] 73%|#######3  | 19/26 [00:00<00:00, 46.79it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 46.79it/s] 96%|#########6| 25/26 [00:00<00:00, 47.53it/s]100%|##########| 26/26 [00:00<00:00, 39.86it/s]
Test: [   0/  26]	Loss 0.691 (0.691)	test_acc   0.50 (  0.50)	test_minacc   0.53 (  0.53)	test_majacc   0.49 (  0.49)	Loss_d 0.691 (0.691)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.49 (  0.49)	test_corr_d   0.03 (  0.03)
Test: [  10/  26]	Loss 0.690 (0.692)	test_acc   0.52 (  0.50)	test_minacc   0.53 (  0.50)	test_majacc   0.52 (  0.50)	Loss_d 0.690 (0.692)	test_acc_d   0.52 (  0.50)	test_minacc_d   0.53 (  0.50)	test_majacc_d   0.52 (  0.50)	test_corr_d   0.01 (  0.04)
Test: [  20/  26]	Loss 0.690 (0.692)	test_acc   0.54 (  0.50)	test_minacc   0.54 (  0.51)	test_majacc   0.54 (  0.50)	Loss_d 0.690 (0.692)	test_acc_d   0.54 (  0.50)	test_minacc_d   0.54 (  0.51)	test_majacc_d   0.54 (  0.50)	test_corr_d   0.05 (  0.05)
Test: [  26/  26]	Loss 0.691 (0.692)	test_acc   0.50 (  0.51)	test_minacc   0.53 (  0.52)	test_majacc   0.50 (  0.51)	Loss_d 0.691 (0.692)	test_acc_d   0.50 (  0.51)	test_minacc_d   0.53 (  0.52)	test_majacc_d   0.50 (  0.51)	test_corr_d   0.07 (  0.04)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.97it/s]
Test: [  0/  1]	Loss 0.690 (0.690)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.690 (0.690)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.20 ( -0.20)
Test: [  1/  1]	Loss 0.690 (0.690)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.690 (0.690)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.20 ( -0.20)
Overall Timing[ 33/  1]	epoch_time 0.0377 (0.0382)	validation_time 0.0004 (0.0006)	train_time 0.0373 (0.0375)
record: (train_acc, test_acc) (0.7215000303983689, 0.6650000214576721)
last accs (train_acc, test_acc) (0.5084000146090984, 0.5010000467300415)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.27it/s] 19%|#9        | 5/26 [00:00<00:00, 21.37it/s] 35%|###4      | 9/26 [00:00<00:00, 27.63it/s] 50%|#####     | 13/26 [00:00<00:00, 30.61it/s] 65%|######5   | 17/26 [00:00<00:00, 32.37it/s] 81%|########  | 21/26 [00:00<00:00, 33.46it/s] 96%|#########6| 25/26 [00:00<00:00, 33.65it/s]100%|##########| 26/26 [00:00<00:00, 28.46it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 884 400
penalty weights 10000.0
args.step pgd_anneal_iters 884 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 885 400
penalty weights 10000.0
args.step pgd_anneal_iters 885 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 886 400
penalty weights 10000.0
args.step pgd_anneal_iters 886 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 887 400
penalty weights 10000.0
args.step pgd_anneal_iters 887 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 888 400
penalty weights 10000.0
args.step pgd_anneal_iters 888 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 889 400
penalty weights 10000.0
args.step pgd_anneal_iters 889 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 890 400
penalty weights 10000.0
args.step pgd_anneal_iters 890 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 891 400
penalty weights 10000.0
args.step pgd_anneal_iters 891 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 892 400
penalty weights 10000.0
args.step pgd_anneal_iters 892 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 893 400
penalty weights 10000.0
args.step pgd_anneal_iters 893 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 894 400
penalty weights 10000.0
args.step pgd_anneal_iters 894 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 895 400
penalty weights 10000.0
args.step pgd_anneal_iters 895 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 896 400
penalty weights 10000.0
args.step pgd_anneal_iters 896 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 897 400
penalty weights 10000.0
args.step pgd_anneal_iters 897 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 898 400
penalty weights 10000.0
args.step pgd_anneal_iters 898 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 899 400
penalty weights 10000.0
args.step pgd_anneal_iters 899 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 900 400
penalty weights 10000.0
args.step pgd_anneal_iters 900 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 901 400
penalty weights 10000.0
args.step pgd_anneal_iters 901 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 902 400
penalty weights 10000.0
args.step pgd_anneal_iters 902 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 903 400
penalty weights 10000.0
args.step pgd_anneal_iters 903 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 904 400
penalty weights 10000.0
args.step pgd_anneal_iters 904 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 905 400
penalty weights 10000.0
args.step pgd_anneal_iters 905 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 906 400
penalty weights 10000.0
args.step pgd_anneal_iters 906 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 907 400
penalty weights 10000.0
args.step pgd_anneal_iters 907 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 908 400
penalty weights 10000.0
args.step pgd_anneal_iters 908 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 909 400
penalty weights 10000.0
args.step pgd_anneal_iters 909 600
dim_v 512
Epoch: [34][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.40 (  0.40)	train_acc   0.49 (  0.51)	train_minacc   0.53 (  0.51)	train_majacc   0.49 (  0.51)	train_corr   0.00 (  0.00)	l1 16.8914 (16.8911)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.00it/s] 27%|##6       | 7/26 [00:00<00:00, 35.99it/s]                                               27%|##6       | 7/26 [00:00<00:00, 35.99it/s] 50%|#####     | 13/26 [00:00<00:00, 40.92it/s] 73%|#######3  | 19/26 [00:00<00:00, 46.79it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 46.79it/s] 96%|#########6| 25/26 [00:00<00:00, 47.07it/s]100%|##########| 26/26 [00:00<00:00, 39.27it/s]
Test: [   0/  26]	Loss 0.692 (0.692)	test_acc   0.50 (  0.50)	test_minacc   0.53 (  0.53)	test_majacc   0.49 (  0.49)	Loss_d 0.692 (0.692)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.49 (  0.49)	test_corr_d   0.01 (  0.01)
Test: [  10/  26]	Loss 0.691 (0.692)	test_acc   0.52 (  0.50)	test_minacc   0.53 (  0.50)	test_majacc   0.52 (  0.50)	Loss_d 0.691 (0.692)	test_acc_d   0.52 (  0.50)	test_minacc_d   0.53 (  0.50)	test_majacc_d   0.52 (  0.50)	test_corr_d  -0.00 (  0.03)
Test: [  20/  26]	Loss 0.690 (0.692)	test_acc   0.54 (  0.50)	test_minacc   0.54 (  0.51)	test_majacc   0.54 (  0.50)	Loss_d 0.690 (0.692)	test_acc_d   0.54 (  0.50)	test_minacc_d   0.54 (  0.51)	test_majacc_d   0.54 (  0.50)	test_corr_d   0.04 (  0.03)
Test: [  26/  26]	Loss 0.692 (0.692)	test_acc   0.49 (  0.51)	test_minacc   0.53 (  0.51)	test_majacc   0.49 (  0.51)	Loss_d 0.692 (0.692)	test_acc_d   0.49 (  0.51)	test_minacc_d   0.53 (  0.51)	test_majacc_d   0.49 (  0.51)	test_corr_d   0.05 (  0.03)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.48it/s]
Test: [  0/  1]	Loss 0.690 (0.690)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.690 (0.690)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.20 ( -0.20)
Test: [  1/  1]	Loss 0.690 (0.690)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.690 (0.690)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.20 ( -0.20)
Overall Timing[ 34/  1]	epoch_time 0.0384 (0.0382)	validation_time 0.0004 (0.0006)	train_time 0.0380 (0.0375)
record: (train_acc, test_acc) (0.7215000303983689, 0.6650000214576721)
last accs (train_acc, test_acc) (0.5066000173687935, 0.49800002574920654)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.54it/s] 19%|#9        | 5/26 [00:00<00:00, 21.60it/s] 35%|###4      | 9/26 [00:00<00:00, 27.61it/s] 50%|#####     | 13/26 [00:00<00:00, 30.96it/s] 65%|######5   | 17/26 [00:00<00:00, 32.16it/s] 81%|########  | 21/26 [00:00<00:00, 33.57it/s] 96%|#########6| 25/26 [00:00<00:00, 34.41it/s]100%|##########| 26/26 [00:00<00:00, 28.84it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 910 400
penalty weights 10000.0
args.step pgd_anneal_iters 910 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 911 400
penalty weights 10000.0
args.step pgd_anneal_iters 911 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 912 400
penalty weights 10000.0
args.step pgd_anneal_iters 912 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 913 400
penalty weights 10000.0
args.step pgd_anneal_iters 913 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 914 400
penalty weights 10000.0
args.step pgd_anneal_iters 914 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 915 400
penalty weights 10000.0
args.step pgd_anneal_iters 915 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 916 400
penalty weights 10000.0
args.step pgd_anneal_iters 916 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 917 400
penalty weights 10000.0
args.step pgd_anneal_iters 917 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 918 400
penalty weights 10000.0
args.step pgd_anneal_iters 918 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 919 400
penalty weights 10000.0
args.step pgd_anneal_iters 919 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 920 400
penalty weights 10000.0
args.step pgd_anneal_iters 920 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 921 400
penalty weights 10000.0
args.step pgd_anneal_iters 921 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 922 400
penalty weights 10000.0
args.step pgd_anneal_iters 922 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 923 400
penalty weights 10000.0
args.step pgd_anneal_iters 923 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 924 400
penalty weights 10000.0
args.step pgd_anneal_iters 924 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 925 400
penalty weights 10000.0
args.step pgd_anneal_iters 925 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 926 400
penalty weights 10000.0
args.step pgd_anneal_iters 926 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 927 400
penalty weights 10000.0
args.step pgd_anneal_iters 927 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 928 400
penalty weights 10000.0
args.step pgd_anneal_iters 928 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 929 400
penalty weights 10000.0
args.step pgd_anneal_iters 929 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 930 400
penalty weights 10000.0
args.step pgd_anneal_iters 930 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 931 400
penalty weights 10000.0
args.step pgd_anneal_iters 931 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 932 400
penalty weights 10000.0
args.step pgd_anneal_iters 932 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 933 400
penalty weights 10000.0
args.step pgd_anneal_iters 933 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 934 400
penalty weights 10000.0
args.step pgd_anneal_iters 934 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 935 400
penalty weights 10000.0
args.step pgd_anneal_iters 935 600
dim_v 512
Epoch: [35][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.40 (  0.40)	train_acc   0.49 (  0.51)	train_minacc   0.53 (  0.51)	train_majacc   0.49 (  0.51)	train_corr   0.00 (  0.00)	l1 16.8922 (16.8918)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.46it/s] 27%|##6       | 7/26 [00:00<00:00, 32.96it/s]                                               27%|##6       | 7/26 [00:00<00:00, 32.96it/s] 50%|#####     | 13/26 [00:00<00:00, 38.97it/s] 73%|#######3  | 19/26 [00:00<00:00, 45.66it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 45.66it/s] 96%|#########6| 25/26 [00:00<00:00, 46.91it/s]100%|##########| 26/26 [00:00<00:00, 38.16it/s]
Test: [   0/  26]	Loss 0.692 (0.692)	test_acc   0.50 (  0.50)	test_minacc   0.53 (  0.53)	test_majacc   0.49 (  0.49)	Loss_d 0.692 (0.692)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.49 (  0.49)	test_corr_d  -0.00 ( -0.00)
Test: [  10/  26]	Loss 0.691 (0.692)	test_acc   0.52 (  0.50)	test_minacc   0.53 (  0.50)	test_majacc   0.52 (  0.50)	Loss_d 0.691 (0.692)	test_acc_d   0.52 (  0.50)	test_minacc_d   0.53 (  0.50)	test_majacc_d   0.52 (  0.50)	test_corr_d  -0.02 (  0.01)
Test: [  20/  26]	Loss 0.691 (0.692)	test_acc   0.54 (  0.50)	test_minacc   0.54 (  0.51)	test_majacc   0.54 (  0.50)	Loss_d 0.691 (0.692)	test_acc_d   0.54 (  0.50)	test_minacc_d   0.54 (  0.51)	test_majacc_d   0.54 (  0.50)	test_corr_d   0.03 (  0.02)
Test: [  26/  26]	Loss 0.692 (0.692)	test_acc   0.49 (  0.51)	test_minacc   0.53 (  0.51)	test_majacc   0.49 (  0.50)	Loss_d 0.692 (0.692)	test_acc_d   0.49 (  0.51)	test_minacc_d   0.53 (  0.51)	test_majacc_d   0.49 (  0.50)	test_corr_d   0.04 (  0.01)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 64.47it/s]
Test: [  0/  1]	Loss 0.691 (0.691)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.691 (0.691)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.20 ( -0.20)
Test: [  1/  1]	Loss 0.691 (0.691)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.691 (0.691)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.20 ( -0.20)
Overall Timing[ 35/  1]	epoch_time 0.0381 (0.0382)	validation_time 0.0004 (0.0006)	train_time 0.0376 (0.0375)
record: (train_acc, test_acc) (0.7215000303983689, 0.6650000214576721)
last accs (train_acc, test_acc) (0.5061000150740147, 0.4960000216960907)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.11it/s] 19%|#9        | 5/26 [00:00<00:00, 21.40it/s] 35%|###4      | 9/26 [00:00<00:00, 27.15it/s] 50%|#####     | 13/26 [00:00<00:00, 30.23it/s] 65%|######5   | 17/26 [00:00<00:00, 32.01it/s] 81%|########  | 21/26 [00:00<00:00, 32.95it/s] 96%|#########6| 25/26 [00:00<00:00, 33.45it/s]100%|##########| 26/26 [00:00<00:00, 28.02it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 936 400
penalty weights 10000.0
args.step pgd_anneal_iters 936 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 937 400
penalty weights 10000.0
args.step pgd_anneal_iters 937 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 938 400
penalty weights 10000.0
args.step pgd_anneal_iters 938 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 939 400
penalty weights 10000.0
args.step pgd_anneal_iters 939 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 940 400
penalty weights 10000.0
args.step pgd_anneal_iters 940 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 941 400
penalty weights 10000.0
args.step pgd_anneal_iters 941 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 942 400
penalty weights 10000.0
args.step pgd_anneal_iters 942 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 943 400
penalty weights 10000.0
args.step pgd_anneal_iters 943 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 944 400
penalty weights 10000.0
args.step pgd_anneal_iters 944 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 945 400
penalty weights 10000.0
args.step pgd_anneal_iters 945 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 946 400
penalty weights 10000.0
args.step pgd_anneal_iters 946 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 947 400
penalty weights 10000.0
args.step pgd_anneal_iters 947 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 948 400
penalty weights 10000.0
args.step pgd_anneal_iters 948 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 949 400
penalty weights 10000.0
args.step pgd_anneal_iters 949 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 950 400
penalty weights 10000.0
args.step pgd_anneal_iters 950 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 951 400
penalty weights 10000.0
args.step pgd_anneal_iters 951 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 952 400
penalty weights 10000.0
args.step pgd_anneal_iters 952 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 953 400
penalty weights 10000.0
args.step pgd_anneal_iters 953 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 954 400
penalty weights 10000.0
args.step pgd_anneal_iters 954 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 955 400
penalty weights 10000.0
args.step pgd_anneal_iters 955 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 956 400
penalty weights 10000.0
args.step pgd_anneal_iters 956 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 957 400
penalty weights 10000.0
args.step pgd_anneal_iters 957 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 958 400
penalty weights 10000.0
args.step pgd_anneal_iters 958 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 959 400
penalty weights 10000.0
args.step pgd_anneal_iters 959 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 960 400
penalty weights 10000.0
args.step pgd_anneal_iters 960 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 961 400
penalty weights 10000.0
args.step pgd_anneal_iters 961 600
dim_v 512
Epoch: [36][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.40 (  0.40)	train_acc   0.49 (  0.51)	train_minacc   0.53 (  0.51)	train_majacc   0.49 (  0.51)	train_corr   0.00 (  0.00)	l1 16.8934 (16.8928)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.92it/s] 27%|##6       | 7/26 [00:00<00:00, 38.75it/s]                                               27%|##6       | 7/26 [00:00<00:00, 38.75it/s] 50%|#####     | 13/26 [00:00<00:00, 44.27it/s] 73%|#######3  | 19/26 [00:00<00:00, 49.90it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 49.90it/s] 96%|#########6| 25/26 [00:00<00:00, 49.38it/s]100%|##########| 26/26 [00:00<00:00, 41.74it/s]
Test: [   0/  26]	Loss 0.692 (0.692)	test_acc   0.49 (  0.49)	test_minacc   0.53 (  0.53)	test_majacc   0.48 (  0.48)	Loss_d 0.692 (0.692)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.48 (  0.48)	test_corr_d  -0.02 ( -0.02)
Test: [  10/  26]	Loss 0.691 (0.693)	test_acc   0.52 (  0.50)	test_minacc   0.53 (  0.50)	test_majacc   0.52 (  0.50)	Loss_d 0.691 (0.693)	test_acc_d   0.52 (  0.50)	test_minacc_d   0.53 (  0.50)	test_majacc_d   0.52 (  0.50)	test_corr_d  -0.03 ( -0.00)
Test: [  20/  26]	Loss 0.691 (0.693)	test_acc   0.54 (  0.50)	test_minacc   0.54 (  0.51)	test_majacc   0.54 (  0.50)	Loss_d 0.691 (0.693)	test_acc_d   0.54 (  0.50)	test_minacc_d   0.54 (  0.51)	test_majacc_d   0.54 (  0.50)	test_corr_d   0.02 ( -0.00)
Test: [  26/  26]	Loss 0.692 (0.692)	test_acc   0.49 (  0.51)	test_minacc   0.53 (  0.51)	test_majacc   0.49 (  0.50)	Loss_d 0.692 (0.692)	test_acc_d   0.49 (  0.51)	test_minacc_d   0.53 (  0.51)	test_majacc_d   0.49 (  0.50)	test_corr_d   0.02 ( -0.00)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.17it/s]
Test: [  0/  1]	Loss 0.691 (0.691)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.691 (0.691)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.19 ( -0.19)
Test: [  1/  1]	Loss 0.691 (0.691)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.691 (0.691)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.19 ( -0.19)
Overall Timing[ 36/  1]	epoch_time 0.0381 (0.0382)	validation_time 0.0003 (0.0006)	train_time 0.0377 (0.0375)
record: (train_acc, test_acc) (0.7215000303983689, 0.6650000214576721)
last accs (train_acc, test_acc) (0.5055000127851963, 0.4970000088214874)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.53it/s] 15%|#5        | 4/26 [00:00<00:01, 17.14it/s] 31%|###       | 8/26 [00:00<00:00, 24.83it/s] 46%|####6     | 12/26 [00:00<00:00, 29.21it/s] 62%|######1   | 16/26 [00:00<00:00, 31.86it/s] 77%|#######6  | 20/26 [00:00<00:00, 33.51it/s] 92%|#########2| 24/26 [00:00<00:00, 34.60it/s]100%|##########| 26/26 [00:00<00:00, 28.43it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 962 400
penalty weights 10000.0
args.step pgd_anneal_iters 962 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 963 400
penalty weights 10000.0
args.step pgd_anneal_iters 963 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 964 400
penalty weights 10000.0
args.step pgd_anneal_iters 964 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 965 400
penalty weights 10000.0
args.step pgd_anneal_iters 965 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 966 400
penalty weights 10000.0
args.step pgd_anneal_iters 966 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 967 400
penalty weights 10000.0
args.step pgd_anneal_iters 967 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 968 400
penalty weights 10000.0
args.step pgd_anneal_iters 968 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 969 400
penalty weights 10000.0
args.step pgd_anneal_iters 969 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 970 400
penalty weights 10000.0
args.step pgd_anneal_iters 970 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 971 400
penalty weights 10000.0
args.step pgd_anneal_iters 971 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 972 400
penalty weights 10000.0
args.step pgd_anneal_iters 972 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 973 400
penalty weights 10000.0
args.step pgd_anneal_iters 973 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 974 400
penalty weights 10000.0
args.step pgd_anneal_iters 974 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 975 400
penalty weights 10000.0
args.step pgd_anneal_iters 975 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 976 400
penalty weights 10000.0
args.step pgd_anneal_iters 976 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 977 400
penalty weights 10000.0
args.step pgd_anneal_iters 977 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 978 400
penalty weights 10000.0
args.step pgd_anneal_iters 978 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 979 400
penalty weights 10000.0
args.step pgd_anneal_iters 979 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 980 400
penalty weights 10000.0
args.step pgd_anneal_iters 980 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 981 400
penalty weights 10000.0
args.step pgd_anneal_iters 981 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 982 400
penalty weights 10000.0
args.step pgd_anneal_iters 982 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 983 400
penalty weights 10000.0
args.step pgd_anneal_iters 983 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 984 400
penalty weights 10000.0
args.step pgd_anneal_iters 984 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 985 400
penalty weights 10000.0
args.step pgd_anneal_iters 985 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 986 400
penalty weights 10000.0
args.step pgd_anneal_iters 986 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 987 400
penalty weights 10000.0
args.step pgd_anneal_iters 987 600
dim_v 512
Epoch: [37][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.40 (  0.40)	train_acc   0.49 (  0.51)	train_minacc   0.53 (  0.51)	train_majacc   0.49 (  0.50)	train_corr   0.00 (  0.00)	l1 16.8948 (16.8940)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.75it/s] 27%|##6       | 7/26 [00:00<00:00, 36.13it/s]                                               27%|##6       | 7/26 [00:00<00:00, 36.13it/s] 46%|####6     | 12/26 [00:00<00:00, 42.16it/s] 65%|######5   | 17/26 [00:00<00:00, 42.68it/s]                                                65%|######5   | 17/26 [00:00<00:00, 42.68it/s] 88%|########8 | 23/26 [00:00<00:00, 48.09it/s]100%|##########| 26/26 [00:00<00:00, 39.29it/s]
Test: [   0/  26]	Loss 0.692 (0.692)	test_acc   0.49 (  0.49)	test_minacc   0.53 (  0.53)	test_majacc   0.48 (  0.48)	Loss_d 0.692 (0.692)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.48 (  0.48)	test_corr_d  -0.03 ( -0.03)
Test: [  10/  26]	Loss 0.692 (0.693)	test_acc   0.52 (  0.50)	test_minacc   0.53 (  0.50)	test_majacc   0.52 (  0.50)	Loss_d 0.692 (0.693)	test_acc_d   0.52 (  0.50)	test_minacc_d   0.53 (  0.50)	test_majacc_d   0.52 (  0.50)	test_corr_d  -0.05 ( -0.01)
Test: [  20/  26]	Loss 0.691 (0.693)	test_acc   0.53 (  0.50)	test_minacc   0.54 (  0.51)	test_majacc   0.53 (  0.50)	Loss_d 0.691 (0.693)	test_acc_d   0.53 (  0.50)	test_minacc_d   0.54 (  0.51)	test_majacc_d   0.53 (  0.50)	test_corr_d   0.01 ( -0.01)
Test: [  26/  26]	Loss 0.692 (0.693)	test_acc   0.49 (  0.50)	test_minacc   0.53 (  0.51)	test_majacc   0.49 (  0.50)	Loss_d 0.692 (0.693)	test_acc_d   0.49 (  0.50)	test_minacc_d   0.53 (  0.51)	test_majacc_d   0.49 (  0.50)	test_corr_d   0.01 ( -0.01)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 64.14it/s]
Test: [  0/  1]	Loss 0.691 (0.691)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.691 (0.691)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.19 ( -0.19)
Test: [  1/  1]	Loss 0.691 (0.691)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.691 (0.691)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.19 ( -0.19)
Overall Timing[ 37/  1]	epoch_time 0.0359 (0.0381)	validation_time 0.0003 (0.0006)	train_time 0.0355 (0.0374)
record: (train_acc, test_acc) (0.7215000303983689, 0.6650000214576721)
last accs (train_acc, test_acc) (0.5046000116765499, 0.4960000216960907)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.75it/s] 19%|#9        | 5/26 [00:00<00:00, 22.10it/s] 35%|###4      | 9/26 [00:00<00:00, 27.70it/s] 50%|#####     | 13/26 [00:00<00:00, 30.88it/s] 65%|######5   | 17/26 [00:00<00:00, 32.18it/s] 81%|########  | 21/26 [00:00<00:00, 33.35it/s] 96%|#########6| 25/26 [00:00<00:00, 34.31it/s]100%|##########| 26/26 [00:00<00:00, 28.75it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 988 400
penalty weights 10000.0
args.step pgd_anneal_iters 988 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 989 400
penalty weights 10000.0
args.step pgd_anneal_iters 989 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 990 400
penalty weights 10000.0
args.step pgd_anneal_iters 990 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 991 400
penalty weights 10000.0
args.step pgd_anneal_iters 991 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 992 400
penalty weights 10000.0
args.step pgd_anneal_iters 992 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 993 400
penalty weights 10000.0
args.step pgd_anneal_iters 993 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 994 400
penalty weights 10000.0
args.step pgd_anneal_iters 994 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 995 400
penalty weights 10000.0
args.step pgd_anneal_iters 995 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 996 400
penalty weights 10000.0
args.step pgd_anneal_iters 996 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 997 400
penalty weights 10000.0
args.step pgd_anneal_iters 997 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 998 400
penalty weights 10000.0
args.step pgd_anneal_iters 998 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 999 400
penalty weights 10000.0
args.step pgd_anneal_iters 999 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1000 400
penalty weights 10000.0
args.step pgd_anneal_iters 1000 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1001 400
penalty weights 10000.0
args.step pgd_anneal_iters 1001 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1002 400
penalty weights 10000.0
args.step pgd_anneal_iters 1002 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1003 400
penalty weights 10000.0
args.step pgd_anneal_iters 1003 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1004 400
penalty weights 10000.0
args.step pgd_anneal_iters 1004 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1005 400
penalty weights 10000.0
args.step pgd_anneal_iters 1005 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1006 400
penalty weights 10000.0
args.step pgd_anneal_iters 1006 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1007 400
penalty weights 10000.0
args.step pgd_anneal_iters 1007 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1008 400
penalty weights 10000.0
args.step pgd_anneal_iters 1008 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1009 400
penalty weights 10000.0
args.step pgd_anneal_iters 1009 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1010 400
penalty weights 10000.0
args.step pgd_anneal_iters 1010 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1011 400
penalty weights 10000.0
args.step pgd_anneal_iters 1011 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1012 400
penalty weights 10000.0
args.step pgd_anneal_iters 1012 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1013 400
penalty weights 10000.0
args.step pgd_anneal_iters 1013 600
dim_v 512
Epoch: [38][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.40 (  0.40)	train_acc   0.49 (  0.51)	train_minacc   0.53 (  0.51)	train_majacc   0.49 (  0.50)	train_corr   0.00 (  0.00)	l1 16.8963 (16.8955)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.67it/s] 23%|##3       | 6/26 [00:00<00:00, 29.59it/s]                                               23%|##3       | 6/26 [00:00<00:00, 29.59it/s] 42%|####2     | 11/26 [00:00<00:00, 36.51it/s] 65%|######5   | 17/26 [00:00<00:00, 44.92it/s]                                                65%|######5   | 17/26 [00:00<00:00, 44.92it/s] 88%|########8 | 23/26 [00:00<00:00, 46.42it/s]100%|##########| 26/26 [00:00<00:00, 38.92it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.49 (  0.49)	test_minacc   0.53 (  0.53)	test_majacc   0.48 (  0.48)	Loss_d 0.693 (0.693)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.48 (  0.48)	test_corr_d  -0.04 ( -0.04)
Test: [  10/  26]	Loss 0.692 (0.693)	test_acc   0.52 (  0.50)	test_minacc   0.54 (  0.50)	test_majacc   0.52 (  0.50)	Loss_d 0.692 (0.693)	test_acc_d   0.52 (  0.50)	test_minacc_d   0.54 (  0.50)	test_majacc_d   0.52 (  0.50)	test_corr_d  -0.06 ( -0.02)
Test: [  20/  26]	Loss 0.692 (0.693)	test_acc   0.53 (  0.50)	test_minacc   0.52 (  0.51)	test_majacc   0.53 (  0.50)	Loss_d 0.692 (0.693)	test_acc_d   0.53 (  0.50)	test_minacc_d   0.52 (  0.51)	test_majacc_d   0.53 (  0.50)	test_corr_d   0.01 ( -0.02)
Test: [  26/  26]	Loss 0.692 (0.693)	test_acc   0.49 (  0.50)	test_minacc   0.53 (  0.51)	test_majacc   0.49 (  0.50)	Loss_d 0.692 (0.693)	test_acc_d   0.49 (  0.50)	test_minacc_d   0.53 (  0.51)	test_majacc_d   0.49 (  0.50)	test_corr_d   0.00 ( -0.02)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 64.42it/s]
Test: [  0/  1]	Loss 0.691 (0.691)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.691 (0.691)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.18 ( -0.18)
Test: [  1/  1]	Loss 0.691 (0.691)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.691 (0.691)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.18 ( -0.18)
Overall Timing[ 38/  1]	epoch_time 0.0368 (0.0381)	validation_time 0.0004 (0.0006)	train_time 0.0364 (0.0374)
record: (train_acc, test_acc) (0.7215000303983689, 0.6650000214576721)
last accs (train_acc, test_acc) (0.5049000081717968, 0.4960000216960907)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.07it/s] 19%|#9        | 5/26 [00:00<00:00, 21.33it/s] 35%|###4      | 9/26 [00:00<00:00, 26.43it/s] 50%|#####     | 13/26 [00:00<00:00, 29.54it/s] 65%|######5   | 17/26 [00:00<00:00, 30.89it/s] 81%|########  | 21/26 [00:00<00:00, 32.26it/s] 96%|#########6| 25/26 [00:00<00:00, 32.75it/s]100%|##########| 26/26 [00:00<00:00, 27.61it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1014 400
penalty weights 10000.0
args.step pgd_anneal_iters 1014 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1015 400
penalty weights 10000.0
args.step pgd_anneal_iters 1015 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1016 400
penalty weights 10000.0
args.step pgd_anneal_iters 1016 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1017 400
penalty weights 10000.0
args.step pgd_anneal_iters 1017 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1018 400
penalty weights 10000.0
args.step pgd_anneal_iters 1018 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1019 400
penalty weights 10000.0
args.step pgd_anneal_iters 1019 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1020 400
penalty weights 10000.0
args.step pgd_anneal_iters 1020 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1021 400
penalty weights 10000.0
args.step pgd_anneal_iters 1021 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1022 400
penalty weights 10000.0
args.step pgd_anneal_iters 1022 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1023 400
penalty weights 10000.0
args.step pgd_anneal_iters 1023 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1024 400
penalty weights 10000.0
args.step pgd_anneal_iters 1024 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1025 400
penalty weights 10000.0
args.step pgd_anneal_iters 1025 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1026 400
penalty weights 10000.0
args.step pgd_anneal_iters 1026 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1027 400
penalty weights 10000.0
args.step pgd_anneal_iters 1027 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1028 400
penalty weights 10000.0
args.step pgd_anneal_iters 1028 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1029 400
penalty weights 10000.0
args.step pgd_anneal_iters 1029 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1030 400
penalty weights 10000.0
args.step pgd_anneal_iters 1030 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1031 400
penalty weights 10000.0
args.step pgd_anneal_iters 1031 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1032 400
penalty weights 10000.0
args.step pgd_anneal_iters 1032 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1033 400
penalty weights 10000.0
args.step pgd_anneal_iters 1033 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1034 400
penalty weights 10000.0
args.step pgd_anneal_iters 1034 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1035 400
penalty weights 10000.0
args.step pgd_anneal_iters 1035 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1036 400
penalty weights 10000.0
args.step pgd_anneal_iters 1036 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1037 400
penalty weights 10000.0
args.step pgd_anneal_iters 1037 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1038 400
penalty weights 10000.0
args.step pgd_anneal_iters 1038 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1039 400
penalty weights 10000.0
args.step pgd_anneal_iters 1039 600
dim_v 512
Epoch: [39][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.40 (  0.40)	train_acc   0.49 (  0.50)	train_minacc   0.53 (  0.51)	train_majacc   0.49 (  0.50)	train_corr   0.00 (  0.00)	l1 16.8978 (16.8970)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:00, 26.45it/s] 27%|##6       | 7/26 [00:00<00:00, 31.95it/s]                                               27%|##6       | 7/26 [00:00<00:00, 31.95it/s] 46%|####6     | 12/26 [00:00<00:00, 36.88it/s] 69%|######9   | 18/26 [00:00<00:00, 44.71it/s]                                                69%|######9   | 18/26 [00:00<00:00, 44.71it/s] 92%|#########2| 24/26 [00:00<00:00, 46.20it/s]100%|##########| 26/26 [00:00<00:00, 39.09it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.49 (  0.49)	test_minacc   0.53 (  0.53)	test_majacc   0.48 (  0.48)	Loss_d 0.693 (0.693)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.48 (  0.48)	test_corr_d  -0.04 ( -0.04)
Test: [  10/  26]	Loss 0.692 (0.693)	test_acc   0.52 (  0.50)	test_minacc   0.54 (  0.50)	test_majacc   0.51 (  0.50)	Loss_d 0.692 (0.693)	test_acc_d   0.52 (  0.50)	test_minacc_d   0.54 (  0.50)	test_majacc_d   0.51 (  0.50)	test_corr_d  -0.06 ( -0.03)
Test: [  20/  26]	Loss 0.692 (0.693)	test_acc   0.53 (  0.50)	test_minacc   0.52 (  0.51)	test_majacc   0.53 (  0.50)	Loss_d 0.692 (0.693)	test_acc_d   0.53 (  0.50)	test_minacc_d   0.52 (  0.51)	test_majacc_d   0.53 (  0.50)	test_corr_d   0.00 ( -0.03)
Test: [  26/  26]	Loss 0.692 (0.693)	test_acc   0.49 (  0.50)	test_minacc   0.53 (  0.51)	test_majacc   0.49 (  0.50)	Loss_d 0.692 (0.693)	test_acc_d   0.49 (  0.50)	test_minacc_d   0.53 (  0.51)	test_majacc_d   0.49 (  0.50)	test_corr_d  -0.01 ( -0.03)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 65.36it/s]
Test: [  0/  1]	Loss 0.691 (0.691)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.51 (  0.51)	Loss_d 0.691 (0.691)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.51 (  0.51)	test_corr_d  -0.16 ( -0.16)
Test: [  1/  1]	Loss 0.691 (0.691)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.51 (  0.51)	Loss_d 0.691 (0.691)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.51 (  0.51)	test_corr_d  -0.16 ( -0.16)
Overall Timing[ 39/  1]	epoch_time 0.0379 (0.0381)	validation_time 0.0004 (0.0006)	train_time 0.0375 (0.0374)
record: (train_acc, test_acc) (0.7215000303983689, 0.6650000214576721)
last accs (train_acc, test_acc) (0.5032000140845776, 0.49800002574920654)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.62it/s] 19%|#9        | 5/26 [00:00<00:00, 22.11it/s] 35%|###4      | 9/26 [00:00<00:00, 27.13it/s] 50%|#####     | 13/26 [00:00<00:00, 29.98it/s] 65%|######5   | 17/26 [00:00<00:00, 31.73it/s] 81%|########  | 21/26 [00:00<00:00, 32.55it/s] 96%|#########6| 25/26 [00:00<00:00, 33.68it/s]100%|##########| 26/26 [00:00<00:00, 28.43it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1040 400
penalty weights 10000.0
args.step pgd_anneal_iters 1040 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1041 400
penalty weights 10000.0
args.step pgd_anneal_iters 1041 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1042 400
penalty weights 10000.0
args.step pgd_anneal_iters 1042 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1043 400
penalty weights 10000.0
args.step pgd_anneal_iters 1043 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1044 400
penalty weights 10000.0
args.step pgd_anneal_iters 1044 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1045 400
penalty weights 10000.0
args.step pgd_anneal_iters 1045 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1046 400
penalty weights 10000.0
args.step pgd_anneal_iters 1046 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1047 400
penalty weights 10000.0
args.step pgd_anneal_iters 1047 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1048 400
penalty weights 10000.0
args.step pgd_anneal_iters 1048 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1049 400
penalty weights 10000.0
args.step pgd_anneal_iters 1049 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1050 400
penalty weights 10000.0
args.step pgd_anneal_iters 1050 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1051 400
penalty weights 10000.0
args.step pgd_anneal_iters 1051 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1052 400
penalty weights 10000.0
args.step pgd_anneal_iters 1052 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1053 400
penalty weights 10000.0
args.step pgd_anneal_iters 1053 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1054 400
penalty weights 10000.0
args.step pgd_anneal_iters 1054 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1055 400
penalty weights 10000.0
args.step pgd_anneal_iters 1055 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1056 400
penalty weights 10000.0
args.step pgd_anneal_iters 1056 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1057 400
penalty weights 10000.0
args.step pgd_anneal_iters 1057 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1058 400
penalty weights 10000.0
args.step pgd_anneal_iters 1058 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1059 400
penalty weights 10000.0
args.step pgd_anneal_iters 1059 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1060 400
penalty weights 10000.0
args.step pgd_anneal_iters 1060 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1061 400
penalty weights 10000.0
args.step pgd_anneal_iters 1061 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1062 400
penalty weights 10000.0
args.step pgd_anneal_iters 1062 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1063 400
penalty weights 10000.0
args.step pgd_anneal_iters 1063 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1064 400
penalty weights 10000.0
args.step pgd_anneal_iters 1064 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1065 400
penalty weights 10000.0
args.step pgd_anneal_iters 1065 600
dim_v 512
Epoch: [40][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.40 (  0.40)	train_acc   0.49 (  0.50)	train_minacc   0.53 (  0.51)	train_majacc   0.49 (  0.50)	train_corr   0.00 (  0.00)	l1 16.8994 (16.8986)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 19.74it/s] 31%|###       | 8/26 [00:00<00:00, 41.18it/s]                                               31%|###       | 8/26 [00:00<00:00, 41.18it/s] 54%|#####3    | 14/26 [00:00<00:00, 46.00it/s] 77%|#######6  | 20/26 [00:00<00:00, 49.85it/s]                                                77%|#######6  | 20/26 [00:00<00:00, 49.85it/s]100%|##########| 26/26 [00:00<00:00, 53.21it/s]100%|##########| 26/26 [00:00<00:00, 43.37it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.49 (  0.49)	test_minacc   0.56 (  0.56)	test_majacc   0.48 (  0.48)	Loss_d 0.693 (0.693)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.56 (  0.56)	test_majacc_d   0.48 (  0.48)	test_corr_d  -0.05 ( -0.05)
Test: [  10/  26]	Loss 0.692 (0.693)	test_acc   0.52 (  0.50)	test_minacc   0.54 (  0.51)	test_majacc   0.51 (  0.50)	Loss_d 0.692 (0.693)	test_acc_d   0.52 (  0.50)	test_minacc_d   0.54 (  0.51)	test_majacc_d   0.51 (  0.50)	test_corr_d  -0.07 ( -0.03)
Test: [  20/  26]	Loss 0.692 (0.693)	test_acc   0.53 (  0.50)	test_minacc   0.54 (  0.52)	test_majacc   0.53 (  0.50)	Loss_d 0.692 (0.693)	test_acc_d   0.53 (  0.50)	test_minacc_d   0.54 (  0.52)	test_majacc_d   0.53 (  0.50)	test_corr_d   0.00 ( -0.03)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.49 (  0.50)	test_minacc   0.53 (  0.52)	test_majacc   0.49 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.49 (  0.50)	test_minacc_d   0.53 (  0.52)	test_majacc_d   0.49 (  0.50)	test_corr_d  -0.01 ( -0.03)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 49.11it/s]
Test: [  0/  1]	Loss 0.692 (0.692)	test_acc   0.51 (  0.51)	test_minacc   0.51 (  0.51)	test_majacc   0.52 (  0.52)	Loss_d 0.692 (0.692)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.52 (  0.52)	test_corr_d  -0.14 ( -0.14)
Test: [  1/  1]	Loss 0.692 (0.692)	test_acc   0.51 (  0.51)	test_minacc   0.51 (  0.51)	test_majacc   0.52 (  0.52)	Loss_d 0.692 (0.692)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.52 (  0.52)	test_corr_d  -0.14 ( -0.14)
Overall Timing[ 40/  1]	epoch_time 0.0361 (0.0380)	validation_time 0.0004 (0.0005)	train_time 0.0357 (0.0374)
record: (train_acc, test_acc) (0.7215000303983689, 0.6650000214576721)
last accs (train_acc, test_acc) (0.5032000175714493, 0.5070000290870667)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.17it/s] 19%|#9        | 5/26 [00:00<00:00, 23.57it/s] 35%|###4      | 9/26 [00:00<00:00, 28.59it/s] 50%|#####     | 13/26 [00:00<00:00, 30.86it/s] 65%|######5   | 17/26 [00:00<00:00, 32.30it/s] 81%|########  | 21/26 [00:00<00:00, 32.91it/s] 96%|#########6| 25/26 [00:00<00:00, 33.16it/s]100%|##########| 26/26 [00:00<00:00, 28.86it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1066 400
penalty weights 10000.0
args.step pgd_anneal_iters 1066 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1067 400
penalty weights 10000.0
args.step pgd_anneal_iters 1067 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1068 400
penalty weights 10000.0
args.step pgd_anneal_iters 1068 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1069 400
penalty weights 10000.0
args.step pgd_anneal_iters 1069 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1070 400
penalty weights 10000.0
args.step pgd_anneal_iters 1070 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1071 400
penalty weights 10000.0
args.step pgd_anneal_iters 1071 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1072 400
penalty weights 10000.0
args.step pgd_anneal_iters 1072 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1073 400
penalty weights 10000.0
args.step pgd_anneal_iters 1073 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1074 400
penalty weights 10000.0
args.step pgd_anneal_iters 1074 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1075 400
penalty weights 10000.0
args.step pgd_anneal_iters 1075 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1076 400
penalty weights 10000.0
args.step pgd_anneal_iters 1076 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1077 400
penalty weights 10000.0
args.step pgd_anneal_iters 1077 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1078 400
penalty weights 10000.0
args.step pgd_anneal_iters 1078 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1079 400
penalty weights 10000.0
args.step pgd_anneal_iters 1079 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1080 400
penalty weights 10000.0
args.step pgd_anneal_iters 1080 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1081 400
penalty weights 10000.0
args.step pgd_anneal_iters 1081 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1082 400
penalty weights 10000.0
args.step pgd_anneal_iters 1082 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1083 400
penalty weights 10000.0
args.step pgd_anneal_iters 1083 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1084 400
penalty weights 10000.0
args.step pgd_anneal_iters 1084 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1085 400
penalty weights 10000.0
args.step pgd_anneal_iters 1085 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1086 400
penalty weights 10000.0
args.step pgd_anneal_iters 1086 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1087 400
penalty weights 10000.0
args.step pgd_anneal_iters 1087 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1088 400
penalty weights 10000.0
args.step pgd_anneal_iters 1088 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1089 400
penalty weights 10000.0
args.step pgd_anneal_iters 1089 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1090 400
penalty weights 10000.0
args.step pgd_anneal_iters 1090 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1091 400
penalty weights 10000.0
args.step pgd_anneal_iters 1091 600
dim_v 512
Epoch: [41][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.40 (  0.40)	train_acc   0.49 (  0.50)	train_minacc   0.50 (  0.52)	train_majacc   0.49 (  0.50)	train_corr   0.00 (  0.00)	l1 16.9009 (16.9001)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.93it/s] 19%|#9        | 5/26 [00:00<00:00, 24.29it/s]                                               19%|#9        | 5/26 [00:00<00:00, 24.29it/s] 42%|####2     | 11/26 [00:00<00:00, 36.16it/s] 65%|######5   | 17/26 [00:00<00:00, 44.51it/s]                                                65%|######5   | 17/26 [00:00<00:00, 44.51it/s] 88%|########8 | 23/26 [00:00<00:00, 46.01it/s]100%|##########| 26/26 [00:00<00:00, 38.41it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.49 (  0.49)	test_minacc   0.56 (  0.56)	test_majacc   0.47 (  0.47)	Loss_d 0.693 (0.693)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.56 (  0.56)	test_majacc_d   0.47 (  0.47)	test_corr_d  -0.04 ( -0.04)
Test: [  10/  26]	Loss 0.692 (0.693)	test_acc   0.52 (  0.50)	test_minacc   0.56 (  0.52)	test_majacc   0.51 (  0.50)	Loss_d 0.692 (0.693)	test_acc_d   0.52 (  0.50)	test_minacc_d   0.56 (  0.52)	test_majacc_d   0.51 (  0.50)	test_corr_d  -0.07 ( -0.03)
Test: [  20/  26]	Loss 0.692 (0.693)	test_acc   0.52 (  0.50)	test_minacc   0.54 (  0.52)	test_majacc   0.52 (  0.50)	Loss_d 0.692 (0.693)	test_acc_d   0.52 (  0.50)	test_minacc_d   0.54 (  0.52)	test_majacc_d   0.52 (  0.50)	test_corr_d   0.01 ( -0.03)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.49 (  0.50)	test_minacc   0.50 (  0.52)	test_majacc   0.49 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.49 (  0.50)	test_minacc_d   0.50 (  0.52)	test_majacc_d   0.49 (  0.50)	test_corr_d  -0.01 ( -0.03)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.91it/s]
Test: [  0/  1]	Loss 0.692 (0.692)	test_acc   0.51 (  0.51)	test_minacc   0.51 (  0.51)	test_majacc   0.53 (  0.53)	Loss_d 0.692 (0.692)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.53 (  0.53)	test_corr_d  -0.12 ( -0.12)
Test: [  1/  1]	Loss 0.692 (0.692)	test_acc   0.51 (  0.51)	test_minacc   0.51 (  0.51)	test_majacc   0.53 (  0.53)	Loss_d 0.692 (0.692)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.53 (  0.53)	test_corr_d  -0.12 ( -0.12)
Overall Timing[ 41/  1]	epoch_time 0.0361 (0.0380)	validation_time 0.0003 (0.0005)	train_time 0.0357 (0.0373)
record: (train_acc, test_acc) (0.7215000303983689, 0.6650000214576721)
last accs (train_acc, test_acc) (0.5018000123798847, 0.5080000162124634)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.47it/s] 19%|#9        | 5/26 [00:00<00:00, 22.80it/s] 35%|###4      | 9/26 [00:00<00:00, 28.03it/s] 50%|#####     | 13/26 [00:00<00:00, 31.22it/s] 65%|######5   | 17/26 [00:00<00:00, 32.99it/s] 81%|########  | 21/26 [00:00<00:00, 34.20it/s] 96%|#########6| 25/26 [00:00<00:00, 34.32it/s]100%|##########| 26/26 [00:00<00:00, 29.03it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1092 400
penalty weights 10000.0
args.step pgd_anneal_iters 1092 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1093 400
penalty weights 10000.0
args.step pgd_anneal_iters 1093 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1094 400
penalty weights 10000.0
args.step pgd_anneal_iters 1094 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1095 400
penalty weights 10000.0
args.step pgd_anneal_iters 1095 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1096 400
penalty weights 10000.0
args.step pgd_anneal_iters 1096 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1097 400
penalty weights 10000.0
args.step pgd_anneal_iters 1097 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1098 400
penalty weights 10000.0
args.step pgd_anneal_iters 1098 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1099 400
penalty weights 10000.0
args.step pgd_anneal_iters 1099 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1100 400
penalty weights 10000.0
args.step pgd_anneal_iters 1100 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1101 400
penalty weights 10000.0
args.step pgd_anneal_iters 1101 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1102 400
penalty weights 10000.0
args.step pgd_anneal_iters 1102 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1103 400
penalty weights 10000.0
args.step pgd_anneal_iters 1103 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1104 400
penalty weights 10000.0
args.step pgd_anneal_iters 1104 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1105 400
penalty weights 10000.0
args.step pgd_anneal_iters 1105 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1106 400
penalty weights 10000.0
args.step pgd_anneal_iters 1106 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1107 400
penalty weights 10000.0
args.step pgd_anneal_iters 1107 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1108 400
penalty weights 10000.0
args.step pgd_anneal_iters 1108 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1109 400
penalty weights 10000.0
args.step pgd_anneal_iters 1109 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1110 400
penalty weights 10000.0
args.step pgd_anneal_iters 1110 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1111 400
penalty weights 10000.0
args.step pgd_anneal_iters 1111 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1112 400
penalty weights 10000.0
args.step pgd_anneal_iters 1112 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1113 400
penalty weights 10000.0
args.step pgd_anneal_iters 1113 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1114 400
penalty weights 10000.0
args.step pgd_anneal_iters 1114 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1115 400
penalty weights 10000.0
args.step pgd_anneal_iters 1115 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1116 400
penalty weights 10000.0
args.step pgd_anneal_iters 1116 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1117 400
penalty weights 10000.0
args.step pgd_anneal_iters 1117 600
dim_v 512
Epoch: [42][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.39 (  0.40)	train_acc   0.50 (  0.50)	train_minacc   0.53 (  0.52)	train_majacc   0.49 (  0.50)	train_corr   0.00 (  0.00)	l1 16.9023 (16.9016)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.03it/s] 31%|###       | 8/26 [00:00<00:00, 39.95it/s]                                               31%|###       | 8/26 [00:00<00:00, 39.95it/s] 50%|#####     | 13/26 [00:00<00:00, 41.40it/s] 77%|#######6  | 20/26 [00:00<00:00, 49.27it/s]                                                77%|#######6  | 20/26 [00:00<00:00, 49.27it/s]100%|##########| 26/26 [00:00<00:00, 49.72it/s]100%|##########| 26/26 [00:00<00:00, 40.51it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.50 (  0.50)	test_minacc   0.57 (  0.57)	test_majacc   0.49 (  0.49)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.57 (  0.57)	test_majacc_d   0.49 (  0.49)	test_corr_d  -0.04 ( -0.04)
Test: [  10/  26]	Loss 0.692 (0.693)	test_acc   0.52 (  0.50)	test_minacc   0.58 (  0.52)	test_majacc   0.51 (  0.50)	Loss_d 0.692 (0.693)	test_acc_d   0.52 (  0.50)	test_minacc_d   0.58 (  0.52)	test_majacc_d   0.51 (  0.50)	test_corr_d  -0.07 ( -0.03)
Test: [  20/  26]	Loss 0.692 (0.693)	test_acc   0.52 (  0.50)	test_minacc   0.55 (  0.52)	test_majacc   0.52 (  0.49)	Loss_d 0.692 (0.693)	test_acc_d   0.52 (  0.50)	test_minacc_d   0.55 (  0.52)	test_majacc_d   0.52 (  0.49)	test_corr_d   0.01 ( -0.03)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.50 (  0.50)	test_minacc   0.53 (  0.53)	test_majacc   0.49 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.49 (  0.50)	test_corr_d  -0.01 ( -0.03)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 65.26it/s]
Test: [  0/  1]	Loss 0.692 (0.692)	test_acc   0.51 (  0.51)	test_minacc   0.50 (  0.50)	test_majacc   0.54 (  0.54)	Loss_d 0.692 (0.692)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.54 (  0.54)	test_corr_d  -0.10 ( -0.10)
Test: [  1/  1]	Loss 0.692 (0.692)	test_acc   0.51 (  0.51)	test_minacc   0.50 (  0.50)	test_majacc   0.54 (  0.54)	Loss_d 0.692 (0.692)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.54 (  0.54)	test_corr_d  -0.10 ( -0.10)
Overall Timing[ 42/  1]	epoch_time 0.0356 (0.0379)	validation_time 0.0006 (0.0005)	train_time 0.0350 (0.0373)
record: (train_acc, test_acc) (0.7215000303983689, 0.6650000214576721)
last accs (train_acc, test_acc) (0.5016000132262707, 0.5070000290870667)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.63it/s] 19%|#9        | 5/26 [00:00<00:00, 24.65it/s] 35%|###4      | 9/26 [00:00<00:00, 29.14it/s] 50%|#####     | 13/26 [00:00<00:00, 31.12it/s] 65%|######5   | 17/26 [00:00<00:00, 32.55it/s] 81%|########  | 21/26 [00:00<00:00, 33.50it/s] 96%|#########6| 25/26 [00:00<00:00, 34.03it/s]100%|##########| 26/26 [00:00<00:00, 29.26it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1118 400
penalty weights 10000.0
args.step pgd_anneal_iters 1118 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1119 400
penalty weights 10000.0
args.step pgd_anneal_iters 1119 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1120 400
penalty weights 10000.0
args.step pgd_anneal_iters 1120 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1121 400
penalty weights 10000.0
args.step pgd_anneal_iters 1121 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1122 400
penalty weights 10000.0
args.step pgd_anneal_iters 1122 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1123 400
penalty weights 10000.0
args.step pgd_anneal_iters 1123 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1124 400
penalty weights 10000.0
args.step pgd_anneal_iters 1124 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1125 400
penalty weights 10000.0
args.step pgd_anneal_iters 1125 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1126 400
penalty weights 10000.0
args.step pgd_anneal_iters 1126 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1127 400
penalty weights 10000.0
args.step pgd_anneal_iters 1127 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1128 400
penalty weights 10000.0
args.step pgd_anneal_iters 1128 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1129 400
penalty weights 10000.0
args.step pgd_anneal_iters 1129 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1130 400
penalty weights 10000.0
args.step pgd_anneal_iters 1130 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1131 400
penalty weights 10000.0
args.step pgd_anneal_iters 1131 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1132 400
penalty weights 10000.0
args.step pgd_anneal_iters 1132 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1133 400
penalty weights 10000.0
args.step pgd_anneal_iters 1133 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1134 400
penalty weights 10000.0
args.step pgd_anneal_iters 1134 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1135 400
penalty weights 10000.0
args.step pgd_anneal_iters 1135 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1136 400
penalty weights 10000.0
args.step pgd_anneal_iters 1136 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1137 400
penalty weights 10000.0
args.step pgd_anneal_iters 1137 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1138 400
penalty weights 10000.0
args.step pgd_anneal_iters 1138 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1139 400
penalty weights 10000.0
args.step pgd_anneal_iters 1139 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1140 400
penalty weights 10000.0
args.step pgd_anneal_iters 1140 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1141 400
penalty weights 10000.0
args.step pgd_anneal_iters 1141 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1142 400
penalty weights 10000.0
args.step pgd_anneal_iters 1142 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1143 400
penalty weights 10000.0
args.step pgd_anneal_iters 1143 600
dim_v 512
Epoch: [43][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.39 (  0.39)	train_acc   0.50 (  0.50)	train_minacc   0.53 (  0.53)	train_majacc   0.49 (  0.50)	train_corr   0.00 (  0.00)	l1 16.9035 (16.9029)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.86it/s] 27%|##6       | 7/26 [00:00<00:00, 31.39it/s]                                               27%|##6       | 7/26 [00:00<00:00, 31.39it/s] 50%|#####     | 13/26 [00:00<00:00, 37.69it/s] 73%|#######3  | 19/26 [00:00<00:00, 44.81it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 44.81it/s] 96%|#########6| 25/26 [00:00<00:00, 45.71it/s]100%|##########| 26/26 [00:00<00:00, 37.40it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.51 (  0.51)	test_minacc   0.58 (  0.58)	test_majacc   0.49 (  0.49)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.58 (  0.58)	test_majacc_d   0.49 (  0.49)	test_corr_d  -0.03 ( -0.03)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.51 (  0.50)	test_minacc   0.61 (  0.53)	test_majacc   0.49 (  0.49)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.50)	test_minacc_d   0.61 (  0.53)	test_majacc_d   0.49 (  0.49)	test_corr_d  -0.06 ( -0.02)
Test: [  20/  26]	Loss 0.692 (0.693)	test_acc   0.52 (  0.49)	test_minacc   0.54 (  0.53)	test_majacc   0.52 (  0.49)	Loss_d 0.692 (0.693)	test_acc_d   0.52 (  0.49)	test_minacc_d   0.54 (  0.53)	test_majacc_d   0.52 (  0.49)	test_corr_d   0.02 ( -0.03)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.49 (  0.50)	test_minacc   0.53 (  0.53)	test_majacc   0.49 (  0.49)	Loss_d 0.693 (0.693)	test_acc_d   0.49 (  0.50)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.49 (  0.49)	test_corr_d  -0.00 ( -0.03)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.95it/s]
Test: [  0/  1]	Loss 0.692 (0.692)	test_acc   0.52 (  0.52)	test_minacc   0.51 (  0.51)	test_majacc   0.55 (  0.55)	Loss_d 0.692 (0.692)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.55 (  0.55)	test_corr_d  -0.08 ( -0.08)
Test: [  1/  1]	Loss 0.692 (0.692)	test_acc   0.52 (  0.52)	test_minacc   0.51 (  0.51)	test_majacc   0.55 (  0.55)	Loss_d 0.692 (0.692)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.55 (  0.55)	test_corr_d  -0.08 ( -0.08)
Overall Timing[ 43/  1]	epoch_time 0.0362 (0.0379)	validation_time 0.0004 (0.0005)	train_time 0.0358 (0.0372)
record: (train_acc, test_acc) (0.7215000303983689, 0.6650000214576721)
last accs (train_acc, test_acc) (0.4985000097155571, 0.51500004529953)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 16.98it/s] 23%|##3       | 6/26 [00:00<00:00, 25.61it/s] 38%|###8      | 10/26 [00:00<00:00, 28.77it/s] 54%|#####3    | 14/26 [00:00<00:00, 30.83it/s] 69%|######9   | 18/26 [00:00<00:00, 31.41it/s] 85%|########4 | 22/26 [00:00<00:00, 32.54it/s]100%|##########| 26/26 [00:00<00:00, 33.16it/s]100%|##########| 26/26 [00:00<00:00, 28.50it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1144 400
penalty weights 10000.0
args.step pgd_anneal_iters 1144 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1145 400
penalty weights 10000.0
args.step pgd_anneal_iters 1145 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1146 400
penalty weights 10000.0
args.step pgd_anneal_iters 1146 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1147 400
penalty weights 10000.0
args.step pgd_anneal_iters 1147 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1148 400
penalty weights 10000.0
args.step pgd_anneal_iters 1148 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1149 400
penalty weights 10000.0
args.step pgd_anneal_iters 1149 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1150 400
penalty weights 10000.0
args.step pgd_anneal_iters 1150 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1151 400
penalty weights 10000.0
args.step pgd_anneal_iters 1151 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1152 400
penalty weights 10000.0
args.step pgd_anneal_iters 1152 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1153 400
penalty weights 10000.0
args.step pgd_anneal_iters 1153 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1154 400
penalty weights 10000.0
args.step pgd_anneal_iters 1154 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1155 400
penalty weights 10000.0
args.step pgd_anneal_iters 1155 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1156 400
penalty weights 10000.0
args.step pgd_anneal_iters 1156 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1157 400
penalty weights 10000.0
args.step pgd_anneal_iters 1157 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1158 400
penalty weights 10000.0
args.step pgd_anneal_iters 1158 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1159 400
penalty weights 10000.0
args.step pgd_anneal_iters 1159 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1160 400
penalty weights 10000.0
args.step pgd_anneal_iters 1160 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1161 400
penalty weights 10000.0
args.step pgd_anneal_iters 1161 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1162 400
penalty weights 10000.0
args.step pgd_anneal_iters 1162 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1163 400
penalty weights 10000.0
args.step pgd_anneal_iters 1163 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1164 400
penalty weights 10000.0
args.step pgd_anneal_iters 1164 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1165 400
penalty weights 10000.0
args.step pgd_anneal_iters 1165 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1166 400
penalty weights 10000.0
args.step pgd_anneal_iters 1166 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1167 400
penalty weights 10000.0
args.step pgd_anneal_iters 1167 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1168 400
penalty weights 10000.0
args.step pgd_anneal_iters 1168 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1169 400
penalty weights 10000.0
args.step pgd_anneal_iters 1169 600
dim_v 512
Epoch: [44][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.39 (  0.39)	train_acc   0.50 (  0.50)	train_minacc   0.53 (  0.54)	train_majacc   0.50 (  0.49)	train_corr   0.00 (  0.00)	l1 16.9046 (16.9041)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.23it/s] 19%|#9        | 5/26 [00:00<00:00, 25.25it/s]                                               19%|#9        | 5/26 [00:00<00:00, 25.25it/s] 42%|####2     | 11/26 [00:00<00:00, 40.16it/s] 62%|######1   | 16/26 [00:00<00:00, 42.52it/s]                                                62%|######1   | 16/26 [00:00<00:00, 42.52it/s] 85%|########4 | 22/26 [00:00<00:00, 48.08it/s]100%|##########| 26/26 [00:00<00:00, 38.76it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.50 (  0.50)	test_minacc   0.58 (  0.58)	test_majacc   0.48 (  0.48)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.58 (  0.58)	test_majacc_d   0.48 (  0.48)	test_corr_d  -0.03 ( -0.03)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.51 (  0.49)	test_minacc   0.61 (  0.53)	test_majacc   0.50 (  0.49)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.49)	test_minacc_d   0.61 (  0.53)	test_majacc_d   0.50 (  0.49)	test_corr_d  -0.06 ( -0.02)
Test: [  20/  26]	Loss 0.692 (0.693)	test_acc   0.53 (  0.49)	test_minacc   0.54 (  0.53)	test_majacc   0.53 (  0.49)	Loss_d 0.692 (0.693)	test_acc_d   0.53 (  0.49)	test_minacc_d   0.54 (  0.53)	test_majacc_d   0.53 (  0.49)	test_corr_d   0.02 ( -0.03)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.50 (  0.50)	test_minacc   0.53 (  0.54)	test_majacc   0.50 (  0.49)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.53 (  0.54)	test_majacc_d   0.50 (  0.49)	test_corr_d   0.00 ( -0.03)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 64.65it/s]
Test: [  0/  1]	Loss 0.692 (0.692)	test_acc   0.52 (  0.52)	test_minacc   0.52 (  0.52)	test_majacc   0.58 (  0.58)	Loss_d 0.692 (0.692)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.58 (  0.58)	test_corr_d  -0.06 ( -0.06)
Test: [  1/  1]	Loss 0.692 (0.692)	test_acc   0.52 (  0.52)	test_minacc   0.52 (  0.52)	test_majacc   0.58 (  0.58)	Loss_d 0.692 (0.692)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.58 (  0.58)	test_corr_d  -0.06 ( -0.06)
Overall Timing[ 44/  1]	epoch_time 0.0369 (0.0378)	validation_time 0.0003 (0.0005)	train_time 0.0365 (0.0372)
record: (train_acc, test_acc) (0.7215000303983689, 0.6650000214576721)
last accs (train_acc, test_acc) (0.496800006210804, 0.5220000147819519)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.13it/s] 19%|#9        | 5/26 [00:00<00:00, 21.45it/s] 35%|###4      | 9/26 [00:00<00:00, 27.06it/s] 50%|#####     | 13/26 [00:00<00:00, 29.80it/s] 65%|######5   | 17/26 [00:00<00:00, 31.64it/s] 81%|########  | 21/26 [00:00<00:00, 32.80it/s] 96%|#########6| 25/26 [00:00<00:00, 33.35it/s]100%|##########| 26/26 [00:00<00:00, 28.05it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1170 400
penalty weights 10000.0
args.step pgd_anneal_iters 1170 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1171 400
penalty weights 10000.0
args.step pgd_anneal_iters 1171 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1172 400
penalty weights 10000.0
args.step pgd_anneal_iters 1172 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1173 400
penalty weights 10000.0
args.step pgd_anneal_iters 1173 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1174 400
penalty weights 10000.0
args.step pgd_anneal_iters 1174 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1175 400
penalty weights 10000.0
args.step pgd_anneal_iters 1175 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1176 400
penalty weights 10000.0
args.step pgd_anneal_iters 1176 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1177 400
penalty weights 10000.0
args.step pgd_anneal_iters 1177 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1178 400
penalty weights 10000.0
args.step pgd_anneal_iters 1178 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1179 400
penalty weights 10000.0
args.step pgd_anneal_iters 1179 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1180 400
penalty weights 10000.0
args.step pgd_anneal_iters 1180 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1181 400
penalty weights 10000.0
args.step pgd_anneal_iters 1181 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1182 400
penalty weights 10000.0
args.step pgd_anneal_iters 1182 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1183 400
penalty weights 10000.0
args.step pgd_anneal_iters 1183 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1184 400
penalty weights 10000.0
args.step pgd_anneal_iters 1184 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1185 400
penalty weights 10000.0
args.step pgd_anneal_iters 1185 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1186 400
penalty weights 10000.0
args.step pgd_anneal_iters 1186 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1187 400
penalty weights 10000.0
args.step pgd_anneal_iters 1187 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1188 400
penalty weights 10000.0
args.step pgd_anneal_iters 1188 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1189 400
penalty weights 10000.0
args.step pgd_anneal_iters 1189 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1190 400
penalty weights 10000.0
args.step pgd_anneal_iters 1190 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1191 400
penalty weights 10000.0
args.step pgd_anneal_iters 1191 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1192 400
penalty weights 10000.0
args.step pgd_anneal_iters 1192 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1193 400
penalty weights 10000.0
args.step pgd_anneal_iters 1193 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1194 400
penalty weights 10000.0
args.step pgd_anneal_iters 1194 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1195 400
penalty weights 10000.0
args.step pgd_anneal_iters 1195 600
dim_v 512
Epoch: [45][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.39 (  0.39)	train_acc   0.52 (  0.50)	train_minacc   0.55 (  0.54)	train_majacc   0.51 (  0.49)	train_corr   0.00 (  0.00)	l1 16.9056 (16.9051)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.83it/s] 27%|##6       | 7/26 [00:00<00:00, 34.80it/s]                                               27%|##6       | 7/26 [00:00<00:00, 34.80it/s] 50%|#####     | 13/26 [00:00<00:00, 40.38it/s] 73%|#######3  | 19/26 [00:00<00:00, 46.90it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 46.90it/s] 96%|#########6| 25/26 [00:00<00:00, 47.45it/s]100%|##########| 26/26 [00:00<00:00, 39.50it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.51 (  0.51)	test_minacc   0.58 (  0.58)	test_majacc   0.49 (  0.49)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.58 (  0.58)	test_majacc_d   0.49 (  0.49)	test_corr_d  -0.02 ( -0.02)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.52 (  0.49)	test_minacc   0.63 (  0.53)	test_majacc   0.50 (  0.49)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.49)	test_minacc_d   0.63 (  0.53)	test_majacc_d   0.50 (  0.49)	test_corr_d  -0.05 ( -0.01)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.54 (  0.49)	test_minacc   0.55 (  0.54)	test_majacc   0.54 (  0.49)	Loss_d 0.693 (0.693)	test_acc_d   0.54 (  0.49)	test_minacc_d   0.55 (  0.54)	test_majacc_d   0.54 (  0.49)	test_corr_d   0.02 ( -0.02)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.51 (  0.50)	test_minacc   0.57 (  0.55)	test_majacc   0.50 (  0.49)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.50)	test_minacc_d   0.57 (  0.55)	test_majacc_d   0.50 (  0.49)	test_corr_d   0.01 ( -0.02)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.92it/s]
Test: [  0/  1]	Loss 0.692 (0.692)	test_acc   0.52 (  0.52)	test_minacc   0.51 (  0.51)	test_majacc   0.60 (  0.60)	Loss_d 0.692 (0.692)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.60 (  0.60)	test_corr_d  -0.04 ( -0.04)
Test: [  1/  1]	Loss 0.692 (0.692)	test_acc   0.52 (  0.52)	test_minacc   0.51 (  0.51)	test_majacc   0.60 (  0.60)	Loss_d 0.692 (0.692)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.60 (  0.60)	test_corr_d  -0.04 ( -0.04)
Overall Timing[ 45/  1]	epoch_time 0.0368 (0.0378)	validation_time 0.0006 (0.0005)	train_time 0.0362 (0.0372)
record: (train_acc, test_acc) (0.7215000303983689, 0.6650000214576721)
last accs (train_acc, test_acc) (0.49910000881552696, 0.5230000019073486)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.74it/s] 19%|#9        | 5/26 [00:00<00:01, 20.07it/s] 35%|###4      | 9/26 [00:00<00:00, 24.76it/s] 50%|#####     | 13/26 [00:00<00:00, 27.95it/s] 65%|######5   | 17/26 [00:00<00:00, 30.30it/s] 81%|########  | 21/26 [00:00<00:00, 31.82it/s] 96%|#########6| 25/26 [00:00<00:00, 32.61it/s]100%|##########| 26/26 [00:00<00:00, 26.95it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1196 400
penalty weights 10000.0
args.step pgd_anneal_iters 1196 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1197 400
penalty weights 10000.0
args.step pgd_anneal_iters 1197 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1198 400
penalty weights 10000.0
args.step pgd_anneal_iters 1198 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1199 400
penalty weights 10000.0
args.step pgd_anneal_iters 1199 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1200 400
penalty weights 10000.0
args.step pgd_anneal_iters 1200 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1201 400
penalty weights 10000.0
args.step pgd_anneal_iters 1201 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1202 400
penalty weights 10000.0
args.step pgd_anneal_iters 1202 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1203 400
penalty weights 10000.0
args.step pgd_anneal_iters 1203 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1204 400
penalty weights 10000.0
args.step pgd_anneal_iters 1204 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1205 400
penalty weights 10000.0
args.step pgd_anneal_iters 1205 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1206 400
penalty weights 10000.0
args.step pgd_anneal_iters 1206 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1207 400
penalty weights 10000.0
args.step pgd_anneal_iters 1207 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1208 400
penalty weights 10000.0
args.step pgd_anneal_iters 1208 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1209 400
penalty weights 10000.0
args.step pgd_anneal_iters 1209 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1210 400
penalty weights 10000.0
args.step pgd_anneal_iters 1210 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1211 400
penalty weights 10000.0
args.step pgd_anneal_iters 1211 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1212 400
penalty weights 10000.0
args.step pgd_anneal_iters 1212 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1213 400
penalty weights 10000.0
args.step pgd_anneal_iters 1213 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1214 400
penalty weights 10000.0
args.step pgd_anneal_iters 1214 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1215 400
penalty weights 10000.0
args.step pgd_anneal_iters 1215 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1216 400
penalty weights 10000.0
args.step pgd_anneal_iters 1216 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1217 400
penalty weights 10000.0
args.step pgd_anneal_iters 1217 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1218 400
penalty weights 10000.0
args.step pgd_anneal_iters 1218 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1219 400
penalty weights 10000.0
args.step pgd_anneal_iters 1219 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1220 400
penalty weights 10000.0
args.step pgd_anneal_iters 1220 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1221 400
penalty weights 10000.0
args.step pgd_anneal_iters 1221 600
dim_v 512
Epoch: [46][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.39 (  0.39)	train_acc   0.52 (  0.50)	train_minacc   0.62 (  0.55)	train_majacc   0.50 (  0.49)	train_corr   0.00 (  0.00)	l1 16.9064 (16.9060)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 18.85it/s] 31%|###       | 8/26 [00:00<00:00, 39.68it/s]                                               31%|###       | 8/26 [00:00<00:00, 39.68it/s] 50%|#####     | 13/26 [00:00<00:00, 41.25it/s] 73%|#######3  | 19/26 [00:00<00:00, 47.62it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 47.62it/s] 96%|#########6| 25/26 [00:00<00:00, 47.09it/s]100%|##########| 26/26 [00:00<00:00, 40.38it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.49 (  0.49)	test_minacc   0.58 (  0.58)	test_majacc   0.47 (  0.47)	Loss_d 0.693 (0.693)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.58 (  0.58)	test_majacc_d   0.47 (  0.47)	test_corr_d  -0.02 ( -0.02)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.52 (  0.49)	test_minacc   0.61 (  0.53)	test_majacc   0.50 (  0.48)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.49)	test_minacc_d   0.61 (  0.53)	test_majacc_d   0.50 (  0.48)	test_corr_d  -0.05 ( -0.01)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.54 (  0.49)	test_minacc   0.55 (  0.54)	test_majacc   0.54 (  0.48)	Loss_d 0.693 (0.693)	test_acc_d   0.54 (  0.49)	test_minacc_d   0.55 (  0.54)	test_majacc_d   0.54 (  0.48)	test_corr_d   0.03 ( -0.01)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.51 (  0.50)	test_minacc   0.62 (  0.55)	test_majacc   0.49 (  0.48)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.50)	test_minacc_d   0.62 (  0.55)	test_majacc_d   0.49 (  0.48)	test_corr_d   0.02 ( -0.02)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.44it/s]
Test: [  0/  1]	Loss 0.692 (0.692)	test_acc   0.52 (  0.52)	test_minacc   0.51 (  0.51)	test_majacc   0.60 (  0.60)	Loss_d 0.692 (0.692)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.60 (  0.60)	test_corr_d  -0.02 ( -0.02)
Test: [  1/  1]	Loss 0.692 (0.692)	test_acc   0.52 (  0.52)	test_minacc   0.51 (  0.51)	test_majacc   0.60 (  0.60)	Loss_d 0.692 (0.692)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.60 (  0.60)	test_corr_d  -0.02 ( -0.02)
Overall Timing[ 46/  1]	epoch_time 0.0351 (0.0378)	validation_time 0.0003 (0.0005)	train_time 0.0347 (0.0372)
record: (train_acc, test_acc) (0.7215000303983689, 0.6650000214576721)
last accs (train_acc, test_acc) (0.49530000883340836, 0.5180000066757202)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.00it/s] 19%|#9        | 5/26 [00:00<00:00, 22.10it/s] 35%|###4      | 9/26 [00:00<00:00, 27.19it/s] 50%|#####     | 13/26 [00:00<00:00, 29.90it/s] 65%|######5   | 17/26 [00:00<00:00, 31.73it/s] 81%|########  | 21/26 [00:00<00:00, 32.85it/s] 96%|#########6| 25/26 [00:00<00:00, 33.34it/s]100%|##########| 26/26 [00:00<00:00, 28.26it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1222 400
penalty weights 10000.0
args.step pgd_anneal_iters 1222 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1223 400
penalty weights 10000.0
args.step pgd_anneal_iters 1223 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1224 400
penalty weights 10000.0
args.step pgd_anneal_iters 1224 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1225 400
penalty weights 10000.0
args.step pgd_anneal_iters 1225 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1226 400
penalty weights 10000.0
args.step pgd_anneal_iters 1226 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1227 400
penalty weights 10000.0
args.step pgd_anneal_iters 1227 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1228 400
penalty weights 10000.0
args.step pgd_anneal_iters 1228 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1229 400
penalty weights 10000.0
args.step pgd_anneal_iters 1229 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1230 400
penalty weights 10000.0
args.step pgd_anneal_iters 1230 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1231 400
penalty weights 10000.0
args.step pgd_anneal_iters 1231 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1232 400
penalty weights 10000.0
args.step pgd_anneal_iters 1232 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1233 400
penalty weights 10000.0
args.step pgd_anneal_iters 1233 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1234 400
penalty weights 10000.0
args.step pgd_anneal_iters 1234 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1235 400
penalty weights 10000.0
args.step pgd_anneal_iters 1235 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1236 400
penalty weights 10000.0
args.step pgd_anneal_iters 1236 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1237 400
penalty weights 10000.0
args.step pgd_anneal_iters 1237 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1238 400
penalty weights 10000.0
args.step pgd_anneal_iters 1238 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1239 400
penalty weights 10000.0
args.step pgd_anneal_iters 1239 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1240 400
penalty weights 10000.0
args.step pgd_anneal_iters 1240 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1241 400
penalty weights 10000.0
args.step pgd_anneal_iters 1241 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1242 400
penalty weights 10000.0
args.step pgd_anneal_iters 1242 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1243 400
penalty weights 10000.0
args.step pgd_anneal_iters 1243 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1244 400
penalty weights 10000.0
args.step pgd_anneal_iters 1244 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1245 400
penalty weights 10000.0
args.step pgd_anneal_iters 1245 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1246 400
penalty weights 10000.0
args.step pgd_anneal_iters 1246 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1247 400
penalty weights 10000.0
args.step pgd_anneal_iters 1247 600
dim_v 512
Epoch: [47][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.39 (  0.39)	train_acc   0.52 (  0.49)	train_minacc   0.62 (  0.55)	train_majacc   0.50 (  0.48)	train_corr   0.00 (  0.00)	l1 16.9071 (16.9068)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.79it/s] 15%|#5        | 4/26 [00:00<00:01, 18.91it/s]                                               15%|#5        | 4/26 [00:00<00:01, 18.91it/s] 42%|####2     | 11/26 [00:00<00:00, 37.83it/s] 62%|######1   | 16/26 [00:00<00:00, 41.06it/s]                                                62%|######1   | 16/26 [00:00<00:00, 41.06it/s] 85%|########4 | 22/26 [00:00<00:00, 47.10it/s]100%|##########| 26/26 [00:00<00:00, 37.57it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.48 (  0.48)	test_minacc   0.59 (  0.59)	test_majacc   0.46 (  0.46)	Loss_d 0.693 (0.693)	test_acc_d   0.48 (  0.48)	test_minacc_d   0.59 (  0.59)	test_majacc_d   0.46 (  0.46)	test_corr_d  -0.01 ( -0.01)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.50 (  0.49)	test_minacc   0.58 (  0.54)	test_majacc   0.49 (  0.48)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.49)	test_minacc_d   0.58 (  0.54)	test_majacc_d   0.49 (  0.48)	test_corr_d  -0.04 ( -0.00)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.54 (  0.49)	test_minacc   0.51 (  0.55)	test_majacc   0.55 (  0.48)	Loss_d 0.693 (0.693)	test_acc_d   0.54 (  0.49)	test_minacc_d   0.51 (  0.55)	test_majacc_d   0.55 (  0.48)	test_corr_d   0.03 ( -0.01)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.52 (  0.50)	test_minacc   0.62 (  0.56)	test_majacc   0.50 (  0.49)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.50)	test_minacc_d   0.62 (  0.56)	test_majacc_d   0.50 (  0.49)	test_corr_d   0.02 ( -0.01)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.35it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.51 (  0.51)	test_minacc   0.51 (  0.51)	test_majacc   0.59 (  0.59)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.59 (  0.59)	test_corr_d  -0.01 ( -0.01)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.51 (  0.51)	test_minacc   0.51 (  0.51)	test_majacc   0.59 (  0.59)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.59 (  0.59)	test_corr_d  -0.01 ( -0.01)
Overall Timing[ 47/  1]	epoch_time 0.0371 (0.0378)	validation_time 0.0003 (0.0005)	train_time 0.0368 (0.0371)
record: (train_acc, test_acc) (0.7215000303983689, 0.6650000214576721)
last accs (train_acc, test_acc) (0.4960000068843365, 0.5139999985694885)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.15it/s] 19%|#9        | 5/26 [00:00<00:01, 17.94it/s] 35%|###4      | 9/26 [00:00<00:00, 24.31it/s] 50%|#####     | 13/26 [00:00<00:00, 27.92it/s] 65%|######5   | 17/26 [00:00<00:00, 30.64it/s] 81%|########  | 21/26 [00:00<00:00, 32.02it/s] 96%|#########6| 25/26 [00:00<00:00, 32.99it/s]100%|##########| 26/26 [00:00<00:00, 26.40it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1248 400
penalty weights 10000.0
args.step pgd_anneal_iters 1248 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1249 400
penalty weights 10000.0
args.step pgd_anneal_iters 1249 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1250 400
penalty weights 10000.0
args.step pgd_anneal_iters 1250 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1251 400
penalty weights 10000.0
args.step pgd_anneal_iters 1251 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1252 400
penalty weights 10000.0
args.step pgd_anneal_iters 1252 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1253 400
penalty weights 10000.0
args.step pgd_anneal_iters 1253 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1254 400
penalty weights 10000.0
args.step pgd_anneal_iters 1254 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1255 400
penalty weights 10000.0
args.step pgd_anneal_iters 1255 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1256 400
penalty weights 10000.0
args.step pgd_anneal_iters 1256 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1257 400
penalty weights 10000.0
args.step pgd_anneal_iters 1257 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1258 400
penalty weights 10000.0
args.step pgd_anneal_iters 1258 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1259 400
penalty weights 10000.0
args.step pgd_anneal_iters 1259 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1260 400
penalty weights 10000.0
args.step pgd_anneal_iters 1260 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1261 400
penalty weights 10000.0
args.step pgd_anneal_iters 1261 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1262 400
penalty weights 10000.0
args.step pgd_anneal_iters 1262 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1263 400
penalty weights 10000.0
args.step pgd_anneal_iters 1263 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1264 400
penalty weights 10000.0
args.step pgd_anneal_iters 1264 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1265 400
penalty weights 10000.0
args.step pgd_anneal_iters 1265 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1266 400
penalty weights 10000.0
args.step pgd_anneal_iters 1266 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1267 400
penalty weights 10000.0
args.step pgd_anneal_iters 1267 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1268 400
penalty weights 10000.0
args.step pgd_anneal_iters 1268 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1269 400
penalty weights 10000.0
args.step pgd_anneal_iters 1269 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1270 400
penalty weights 10000.0
args.step pgd_anneal_iters 1270 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1271 400
penalty weights 10000.0
args.step pgd_anneal_iters 1271 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1272 400
penalty weights 10000.0
args.step pgd_anneal_iters 1272 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1273 400
penalty weights 10000.0
args.step pgd_anneal_iters 1273 600
dim_v 512
Epoch: [48][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.39 (  0.39)	train_acc   0.50 (  0.49)	train_minacc   0.57 (  0.56)	train_majacc   0.48 (  0.48)	train_corr   0.00 (  0.00)	l1 16.9077 (16.9074)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.20it/s] 27%|##6       | 7/26 [00:00<00:00, 32.85it/s]                                               27%|##6       | 7/26 [00:00<00:00, 32.85it/s] 50%|#####     | 13/26 [00:00<00:00, 39.15it/s] 73%|#######3  | 19/26 [00:00<00:00, 45.83it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 45.83it/s] 96%|#########6| 25/26 [00:00<00:00, 46.56it/s]100%|##########| 26/26 [00:00<00:00, 38.26it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.49 (  0.49)	test_minacc   0.59 (  0.59)	test_majacc   0.47 (  0.47)	Loss_d 0.693 (0.693)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.59 (  0.59)	test_majacc_d   0.47 (  0.47)	test_corr_d  -0.01 ( -0.01)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.50 (  0.49)	test_minacc   0.58 (  0.54)	test_majacc   0.48 (  0.48)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.49)	test_minacc_d   0.58 (  0.54)	test_majacc_d   0.48 (  0.48)	test_corr_d  -0.04 (  0.00)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.54 (  0.49)	test_minacc   0.51 (  0.55)	test_majacc   0.54 (  0.48)	Loss_d 0.693 (0.693)	test_acc_d   0.54 (  0.49)	test_minacc_d   0.51 (  0.55)	test_majacc_d   0.54 (  0.48)	test_corr_d   0.03 ( -0.00)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.50 (  0.50)	test_minacc   0.57 (  0.56)	test_majacc   0.48 (  0.49)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.57 (  0.56)	test_majacc_d   0.48 (  0.49)	test_corr_d   0.03 ( -0.01)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 65.62it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.52 (  0.52)	test_minacc   0.51 (  0.51)	test_majacc   0.59 (  0.59)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.59 (  0.59)	test_corr_d  -0.00 ( -0.00)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.52 (  0.52)	test_minacc   0.51 (  0.51)	test_majacc   0.59 (  0.59)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.59 (  0.59)	test_corr_d  -0.00 ( -0.00)
Overall Timing[ 48/  1]	epoch_time 0.0377 (0.0378)	validation_time 0.0004 (0.0005)	train_time 0.0372 (0.0371)
record: (train_acc, test_acc) (0.7215000303983689, 0.6650000214576721)
last accs (train_acc, test_acc) (0.49700001350045203, 0.5160000324249268)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.87it/s] 19%|#9        | 5/26 [00:00<00:00, 24.85it/s] 35%|###4      | 9/26 [00:00<00:00, 29.94it/s] 50%|#####     | 13/26 [00:00<00:00, 31.93it/s] 65%|######5   | 17/26 [00:00<00:00, 32.93it/s] 81%|########  | 21/26 [00:00<00:00, 33.50it/s] 96%|#########6| 25/26 [00:00<00:00, 33.82it/s]100%|##########| 26/26 [00:00<00:00, 29.44it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1274 400
penalty weights 10000.0
args.step pgd_anneal_iters 1274 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1275 400
penalty weights 10000.0
args.step pgd_anneal_iters 1275 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1276 400
penalty weights 10000.0
args.step pgd_anneal_iters 1276 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1277 400
penalty weights 10000.0
args.step pgd_anneal_iters 1277 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1278 400
penalty weights 10000.0
args.step pgd_anneal_iters 1278 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1279 400
penalty weights 10000.0
args.step pgd_anneal_iters 1279 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1280 400
penalty weights 10000.0
args.step pgd_anneal_iters 1280 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1281 400
penalty weights 10000.0
args.step pgd_anneal_iters 1281 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1282 400
penalty weights 10000.0
args.step pgd_anneal_iters 1282 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1283 400
penalty weights 10000.0
args.step pgd_anneal_iters 1283 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1284 400
penalty weights 10000.0
args.step pgd_anneal_iters 1284 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1285 400
penalty weights 10000.0
args.step pgd_anneal_iters 1285 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1286 400
penalty weights 10000.0
args.step pgd_anneal_iters 1286 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1287 400
penalty weights 10000.0
args.step pgd_anneal_iters 1287 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1288 400
penalty weights 10000.0
args.step pgd_anneal_iters 1288 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1289 400
penalty weights 10000.0
args.step pgd_anneal_iters 1289 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1290 400
penalty weights 10000.0
args.step pgd_anneal_iters 1290 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1291 400
penalty weights 10000.0
args.step pgd_anneal_iters 1291 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1292 400
penalty weights 10000.0
args.step pgd_anneal_iters 1292 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1293 400
penalty weights 10000.0
args.step pgd_anneal_iters 1293 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1294 400
penalty weights 10000.0
args.step pgd_anneal_iters 1294 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1295 400
penalty weights 10000.0
args.step pgd_anneal_iters 1295 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1296 400
penalty weights 10000.0
args.step pgd_anneal_iters 1296 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1297 400
penalty weights 10000.0
args.step pgd_anneal_iters 1297 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1298 400
penalty weights 10000.0
args.step pgd_anneal_iters 1298 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1299 400
penalty weights 10000.0
args.step pgd_anneal_iters 1299 600
dim_v 512
Epoch: [49][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.39 (  0.39)	train_acc   0.50 (  0.49)	train_minacc   0.57 (  0.56)	train_majacc   0.48 (  0.48)	train_corr   0.00 (  0.00)	l1 16.9081 (16.9079)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 16.14it/s] 31%|###       | 8/26 [00:00<00:00, 38.00it/s]                                               31%|###       | 8/26 [00:00<00:00, 38.00it/s] 50%|#####     | 13/26 [00:00<00:00, 40.88it/s] 73%|#######3  | 19/26 [00:00<00:00, 47.61it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 47.61it/s] 96%|#########6| 25/26 [00:00<00:00, 46.69it/s]100%|##########| 26/26 [00:00<00:00, 39.82it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.48 (  0.48)	test_minacc   0.59 (  0.59)	test_majacc   0.45 (  0.45)	Loss_d 0.693 (0.693)	test_acc_d   0.48 (  0.48)	test_minacc_d   0.59 (  0.59)	test_majacc_d   0.45 (  0.45)	test_corr_d  -0.00 ( -0.00)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.49 (  0.49)	test_minacc   0.58 (  0.54)	test_majacc   0.48 (  0.48)	Loss_d 0.693 (0.693)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.58 (  0.54)	test_majacc_d   0.48 (  0.48)	test_corr_d  -0.04 (  0.00)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.54 (  0.49)	test_minacc   0.55 (  0.55)	test_majacc   0.54 (  0.49)	Loss_d 0.693 (0.693)	test_acc_d   0.54 (  0.49)	test_minacc_d   0.55 (  0.55)	test_majacc_d   0.54 (  0.49)	test_corr_d   0.03 ( -0.00)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.50 (  0.50)	test_minacc   0.57 (  0.56)	test_majacc   0.48 (  0.49)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.57 (  0.56)	test_majacc_d   0.48 (  0.49)	test_corr_d   0.03 ( -0.00)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 67.01it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.53 (  0.53)	test_minacc   0.52 (  0.52)	test_majacc   0.61 (  0.61)	Loss_d 0.693 (0.693)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.61 (  0.61)	test_corr_d   0.00 (  0.00)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.53 (  0.53)	test_minacc   0.52 (  0.52)	test_majacc   0.61 (  0.61)	Loss_d 0.693 (0.693)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.61 (  0.61)	test_corr_d   0.00 (  0.00)
Overall Timing[ 49/  1]	epoch_time 0.0361 (0.0377)	validation_time 0.0004 (0.0005)	train_time 0.0357 (0.0371)
record: (train_acc, test_acc) (0.7215000303983689, 0.6650000214576721)
last accs (train_acc, test_acc) (0.49820000761747363, 0.5250000357627869)
done saving aggregate.csv to ./aggregate.csv
wandb: - 0.097 MB of 0.097 MB uploadedwandb: \ 0.097 MB of 0.097 MB uploadedwandb: | 0.097 MB of 0.097 MB uploadedwandb: / 0.097 MB of 0.097 MB uploadedwandb: - 0.097 MB of 0.097 MB uploadedwandb: \ 0.119 MB of 0.127 MB uploaded (0.003 MB deduped)wandb: | 0.492 MB of 0.492 MB uploaded (0.003 MB deduped)wandb: 
wandb: Run history:
wandb:                                                                           global_step ▁▁▁▁▂▂▂▂▂▃▃▃▃▃▃▄▄▄▄▄▅▅▅▅▅▅▆▆▆▆▆▆▇▇▇▇▇███
wandb:      resnet18-usc-unsigned/baseline/prune_rate=1.0/36/logs/diagnostics/epoch_time_val █▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▃▁▁▁▁▁▁▂▂▁▁▁▁▁▁▁▁▁▁
wandb:      resnet18-usc-unsigned/baseline/prune_rate=1.0/36/logs/diagnostics/train_time_val █▁▂▁▁▁▁▁▁▁▂▁▁▁▁▁▂▁▁▁▁▄▂▁▁▁▂▂▂▂▁▁▁▁▁▁▁▁▁▁
wandb: resnet18-usc-unsigned/baseline/prune_rate=1.0/36/logs/diagnostics/validation_time_val █▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:                     resnet18-usc-unsigned/baseline/prune_rate=1.0/36/logs/global_step ▁▁▁▁▂▂▂▂▂▃▃▃▃▃▃▄▄▄▄▄▅▅▅▅▅▅▆▆▆▆▆▆▇▇▇▇▇███
wandb:                   resnet18-usc-unsigned/baseline/prune_rate=1.0/36/logs/test/Loss_avg █▇▇▇▅▆▇▇▆▇▇▇▁▁▁▁▁▁▁▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:                 resnet18-usc-unsigned/baseline/prune_rate=1.0/36/logs/test/Loss_d_avg █▇▇▇▅▆▇▇▆▇▇▇▁▁▁▁▁▁▁▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:                 resnet18-usc-unsigned/baseline/prune_rate=1.0/36/logs/test/Loss_d_val █▇▇▇▅▆▇▇▆▇▇▇▁▁▁▁▁▁▁▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:                   resnet18-usc-unsigned/baseline/prune_rate=1.0/36/logs/test/Loss_val █▇▇▇▅▆▇▇▆▇▇▇▁▁▁▁▁▁▁▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:               resnet18-usc-unsigned/baseline/prune_rate=1.0/36/logs/test/test_acc_avg ▁▁▁▁▅▃▂▂▃▁▂▂██▆▆▆▅▅▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/36/logs/test/test_acc_d_avg ▁▁▁▁▅▃▂▂▃▁▂▂██▆▆▆▅▅▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/36/logs/test/test_acc_d_val ▁▁▁▁▅▃▂▂▃▁▂▂██▆▆▆▅▅▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆
wandb:               resnet18-usc-unsigned/baseline/prune_rate=1.0/36/logs/test/test_acc_val ▁▁▁▁▅▃▂▂▃▁▂▂██▆▆▆▅▅▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/36/logs/test/test_corr_d_avg ████▅▆▇▇▇█▇▇▁▁▂▂▂▂▂▆▂▂▂▂▂▂▁▁▁▁▂▂▂▂▂▂▂▂▂▃
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/36/logs/test/test_corr_d_val ████▅▆▇▇▇█▇▇▁▁▂▂▂▂▂▆▂▂▂▂▂▂▁▁▁▁▂▂▂▂▂▂▂▂▂▃
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/36/logs/test/test_majacc_avg ████▇███████▄▃▁▁▁▂▁▁▂▂▂▂▁▁▁▁▁▁▁▁▂▂▂▂▃▃▂▃
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/36/logs/test/test_majacc_d_avg ████▇███████▄▃▁▁▁▂▁▁▂▂▂▂▁▁▁▁▁▁▁▁▂▂▂▂▃▃▂▃
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/36/logs/test/test_majacc_d_val ████▇███████▄▃▁▁▁▂▁▁▂▂▂▂▁▁▁▁▁▁▁▁▂▂▂▂▃▃▂▃
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/36/logs/test/test_majacc_val ████▇███████▄▃▁▁▁▂▁▁▂▂▂▂▁▁▁▁▁▁▁▁▂▂▂▂▃▃▂▃
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/36/logs/test/test_minacc_avg ▁▁▁▁▅▃▂▂▃▁▂▂██▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/36/logs/test/test_minacc_d_avg ▁▁▁▁▅▃▂▂▃▁▂▂██▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/36/logs/test/test_minacc_d_val ▁▁▁▁▅▃▂▂▃▁▂▂██▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/36/logs/test/test_minacc_val ▁▁▁▁▅▃▂▂▃▁▂▂██▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆
wandb:                  resnet18-usc-unsigned/baseline/prune_rate=1.0/36/logs/train/Loss_avg █▅▃▂▂▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:                  resnet18-usc-unsigned/baseline/prune_rate=1.0/36/logs/train/Loss_val █▅▃▂▂▂▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:                    resnet18-usc-unsigned/baseline/prune_rate=1.0/36/logs/train/l1_avg ▂▂▁▁▁▂▂▃▅▆▆▇███████▇▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆
wandb:                    resnet18-usc-unsigned/baseline/prune_rate=1.0/36/logs/train/l1_val ▂▂▁▁▁▂▃▄▅▆▇▇███████▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/36/logs/train/train_acc_avg ▆███████████▇▄▂▁▁▁▁▁▂▂▂▂▂▂▂▂▂▁▁▁▁▁▁▁▁▁▁▁
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/36/logs/train/train_acc_val ████████████▇▄▂▂▁▂▁▂▂▂▂▂▂▂▂▂▂▂▂▂▂▁▂▂▂▂▂▂
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/36/logs/train/train_corr_avg ▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/36/logs/train/train_corr_val ▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/36/logs/train/train_majacc_avg ▇██████████▇▆▃▂▁▁▁▁▁▂▂▂▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/36/logs/train/train_majacc_val ████████████▅▃▁▁▁▂▁▁▁▂▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/36/logs/train/train_minacc_avg ▂▁▁▁▂▂▃▃▃▄▄▄▆█▆▆▅▅▅▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/36/logs/train/train_minacc_val ▁▁▁▁▁▁▁▁▁▁▁▂█▇▅▅▅▄▄▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▆▆▆▆
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/36/logs/train/train_nll_avg ▆▃▂▂▂▂▂▂▁▁▁▁▃▇▇▇████████████████████████
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/36/logs/train/train_nll_val ▃▃▃▃▂▂▂▂▁▂▂▁▅▇██████████████████████████
wandb:         resnet18-usc-unsigned/baseline/prune_rate=1.0/36/logs/train/train_penalty_avg █▂▂▂▂▂▂▂▂▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:         resnet18-usc-unsigned/baseline/prune_rate=1.0/36/logs/train/train_penalty_val █▇▇▇▄▄▆▄▄▆▆▃▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:           resnet18-usc-unsigned/baseline/prune_rate=1.0/36/logs/train/weight_norm_avg █▅▃▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:           resnet18-usc-unsigned/baseline/prune_rate=1.0/36/logs/train/weight_norm_val █▄▃▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb: 
wandb: Run summary:
wandb:                                                                           global_step 49
wandb:      resnet18-usc-unsigned/baseline/prune_rate=1.0/36/logs/diagnostics/epoch_time_val 0.0361
wandb:      resnet18-usc-unsigned/baseline/prune_rate=1.0/36/logs/diagnostics/train_time_val 0.03569
wandb: resnet18-usc-unsigned/baseline/prune_rate=1.0/36/logs/diagnostics/validation_time_val 0.00039
wandb:                     resnet18-usc-unsigned/baseline/prune_rate=1.0/36/logs/global_step 49
wandb:                   resnet18-usc-unsigned/baseline/prune_rate=1.0/36/logs/test/Loss_avg 0.69266
wandb:                 resnet18-usc-unsigned/baseline/prune_rate=1.0/36/logs/test/Loss_d_avg 0.69266
wandb:                 resnet18-usc-unsigned/baseline/prune_rate=1.0/36/logs/test/Loss_d_val 0.69266
wandb:                   resnet18-usc-unsigned/baseline/prune_rate=1.0/36/logs/test/Loss_val 0.69266
wandb:               resnet18-usc-unsigned/baseline/prune_rate=1.0/36/logs/test/test_acc_avg 0.525
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/36/logs/test/test_acc_d_avg 0.525
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/36/logs/test/test_acc_d_val 0.525
wandb:               resnet18-usc-unsigned/baseline/prune_rate=1.0/36/logs/test/test_acc_val 0.525
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/36/logs/test/test_corr_d_avg 0.0035
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/36/logs/test/test_corr_d_val 0.0035
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/36/logs/test/test_majacc_avg 0.61
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/36/logs/test/test_majacc_d_avg 0.61
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/36/logs/test/test_majacc_d_val 0.61
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/36/logs/test/test_majacc_val 0.61
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/36/logs/test/test_minacc_avg 0.51556
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/36/logs/test/test_minacc_d_avg 0.51556
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/36/logs/test/test_minacc_d_val 0.51556
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/36/logs/test/test_minacc_val 0.51556
wandb:                  resnet18-usc-unsigned/baseline/prune_rate=1.0/36/logs/train/Loss_avg 0.00011
wandb:                  resnet18-usc-unsigned/baseline/prune_rate=1.0/36/logs/train/Loss_val 0.00011
wandb:                    resnet18-usc-unsigned/baseline/prune_rate=1.0/36/logs/train/l1_avg 16.90789
wandb:                    resnet18-usc-unsigned/baseline/prune_rate=1.0/36/logs/train/l1_val 16.90811
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/36/logs/train/train_acc_avg 0.4928
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/36/logs/train/train_acc_val 0.496
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/36/logs/train/train_corr_avg 0.0
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/36/logs/train/train_corr_val 0.0
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/36/logs/train/train_majacc_avg 0.48064
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/36/logs/train/train_majacc_val 0.48095
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/36/logs/train/train_minacc_avg 0.56236
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/36/logs/train/train_minacc_val 0.575
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/36/logs/train/train_nll_avg 0.69305
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/36/logs/train/train_nll_val 0.6926
wandb:         resnet18-usc-unsigned/baseline/prune_rate=1.0/36/logs/train/train_penalty_avg 0.0
wandb:         resnet18-usc-unsigned/baseline/prune_rate=1.0/36/logs/train/train_penalty_val 0.0
wandb:           resnet18-usc-unsigned/baseline/prune_rate=1.0/36/logs/train/weight_norm_avg 0.38916
wandb:           resnet18-usc-unsigned/baseline/prune_rate=1.0/36/logs/train/weight_norm_val 0.38871
wandb: 
wandb: 🚀 View run name_random at: https://wandb.ai/janezdu-uiuc/irm/runs/5jak5c9i
wandb: ⭐️ View project at: https://wandb.ai/janezdu-uiuc/irm
wandb: Synced 5 W&B file(s), 0 media file(s), 2 artifact file(s) and 1 other file(s)
wandb: Find logs at: ./wandb/run-20240906_151737-5jak5c9i/logs
wandb: WARNING The new W&B backend becomes opt-out in version 0.18.0; try it out with `wandb.require("core")`! See https://wandb.me/wandb-core for more information.
wandb: Currently logged in as: janezdu (janezdu-uiuc). Use `wandb login --relogin` to force relogin
wandb: wandb version 0.17.9 is available!  To upgrade, please run:
wandb:  $ pip install wandb --upgrade
wandb: Tracking run with wandb version 0.17.7
wandb: Run data is saved locally in /scratch/users/zd16/sparseIRM-resnet-ver/wandb/run-20240906_152013-7txqwdfs
wandb: Run `wandb offline` to turn off syncing.
wandb: Syncing run name_random
wandb: ⭐️ View project at https://wandb.ai/janezdu-uiuc/irm
wandb: 🚀 View run at https://wandb.ai/janezdu-uiuc/irm/runs/7txqwdfs
=> Reading YAML config from configs/smallscale/resnet18/resnet18-usc-unsigned.yaml
Namespace(data='dataset/', optimizer='adam', weight_opt='adam', set='mnistcifar', arch='ResNet18', config='configs/smallscale/resnet18/resnet18-usc-unsigned.yaml', log_dir=None, workers=4, epochs=50, start_epoch=None, batch_size=390, lr=0.006, warmup_length=0, momentum=0.9, weight_decay=0.0, print_freq=10, num_classes=1, resume='', resume_train_weights='', evaluate=False, pretrained=None, pretrained_distill=None, alpha_distill=0.95, T_distill=2, seed=0, multigpu=[0], lr_policy='cosine_lr', lr_adjust=30, lr_gamma=0.1, name='baseline', save_every=-1, prune_rate=1.0, param_prune_rate=0.0, pr_start=1.0, low_data=1, width_mult=1.0, nesterov=False, threetimes=False, random_subnet=False, one_batch=False, conv_type='DenseConv', freeze_weights=False, st=False, mode='fan_in', nonlinearity='relu', bn_type='LearnedBatchNorm', init='kaiming_normal', no_bn_decay=False, scale_fan=False, first_layer_dense=False, last_layer_dense=True, approx=False, zero=False, flip=False, bs=False, gumbel_sample=False, multiply_prob=False, no_multiply=False, multiply_cont=False, multiply_prob_bs=False, indiv=False, label_smoothing=None, first_layer_type=None, trainer='default', score_init_constant=1.0, K=1, update_freq=20, D=0.01, T=1, TA=True, TA2=False, TA_grow=False, center=False, straight_through=False, PLA_factor=0.1, PLA_patience=10, gradient_loss_para=0, abs_loss_para=0, thres=0.9, runs_name='name_random', resume_compare_loss1='', resume_compare_loss2='', init_weights='', trained_mask='', weight_rescaling=False, constrain_by_layer=False, weight_rescaling_data=False, use_running_stats=False, not_clipping=False, rescaling_para=False, lasso_para=0, dont_freeze_weights=False, iterative=True, prob_by_weight=False, rescale_at_fix_subnet=False, train_weights_at_the_same_time=False, sample_from_training_set=False, load_true_para=False, distill=False, finetune=False, stablize=False, prev_best=0, weight_opt_lr=0.0006, n=500, ts=0.28, te=0.6, d=20000, s=80, c=0.75, init_prob=False, thres_before=0.001, wide_ratio=0.001, noise=1, cal_p_q=False, just_finetune=False, snip=False, envs_num=2, l2_regularizer_weight=0.001, data_num=50000, env_type='linear', irm_type='irmv1', hidden_dim=390, penalty_anneal_iters=400, penalty_weight=10000.0, grayscale_model=0, weight_lr_schedule=False, fix_subnet=False, freeze_weight=False, step='ours', prior_sd_coef=0, dim_inv=2, variance_gamma=1.0, dim_spu=10, image_scale=32, cons_ratio='0.999_0.7_0.1', noise_ratio=0.2, step_gamma=0.1, step_round=3, inner_steps=1, use_pgd=True, z=21.0, pgd_anneal_iters=600)
=> Creating model 'ResNet18'
Here!!!!!!!!
==> Conv Type: DenseConv
==> BN Type: LearnedBatchNorm
<class 'torch.nn.modules.conv.Conv2d'>
<class 'torch.nn.modules.batchnorm.BatchNorm2d'>
==> Building first layer with <class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
ResNet(
  (conv1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
  (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (relu): ReLU(inplace=True)
  (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
  (layer1): Sequential(
    (0): BasicBlock(
      (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (1): BasicBlock(
      (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (layer2): Sequential(
    (0): BasicBlock(
      (conv1): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (downsample): Sequential(
        (0): Conv2d(64, 128, kernel_size=(1, 1), stride=(2, 2), bias=False)
        (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (1): BasicBlock(
      (conv1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (layer3): Sequential(
    (0): BasicBlock(
      (conv1): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (downsample): Sequential(
        (0): Conv2d(128, 256, kernel_size=(1, 1), stride=(2, 2), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (1): BasicBlock(
      (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (layer4): Sequential(
    (0): BasicBlock(
      (conv1): Conv2d(256, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (downsample): Sequential(
        (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (1): BasicBlock(
      (conv1): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (avgpool): AdaptiveAvgPool2d(output_size=1)
  (fc): Linear(in_features=512, out_features=1, bias=True)
)
=> Parallelizing on [0] gpus
<DEBUG> gradient to module.conv1.weight
<DEBUG> gradient to module.bn1.weight
<DEBUG> gradient to module.bn1.bias
<DEBUG> gradient to module.layer1.0.conv1.weight
<DEBUG> gradient to module.layer1.0.bn1.weight
<DEBUG> gradient to module.layer1.0.bn1.bias
<DEBUG> gradient to module.layer1.0.conv2.weight
<DEBUG> gradient to module.layer1.0.bn2.weight
<DEBUG> gradient to module.layer1.0.bn2.bias
<DEBUG> gradient to module.layer1.1.conv1.weight
<DEBUG> gradient to module.layer1.1.bn1.weight
<DEBUG> gradient to module.layer1.1.bn1.bias
<DEBUG> gradient to module.layer1.1.conv2.weight
<DEBUG> gradient to module.layer1.1.bn2.weight
<DEBUG> gradient to module.layer1.1.bn2.bias
<DEBUG> gradient to module.layer2.0.conv1.weight
<DEBUG> gradient to module.layer2.0.bn1.weight
<DEBUG> gradient to module.layer2.0.bn1.bias
<DEBUG> gradient to module.layer2.0.conv2.weight
<DEBUG> gradient to module.layer2.0.bn2.weight
<DEBUG> gradient to module.layer2.0.bn2.bias
<DEBUG> gradient to module.layer2.0.downsample.0.weight
<DEBUG> gradient to module.layer2.0.downsample.1.weight
<DEBUG> gradient to module.layer2.0.downsample.1.bias
<DEBUG> gradient to module.layer2.1.conv1.weight
<DEBUG> gradient to module.layer2.1.bn1.weight
<DEBUG> gradient to module.layer2.1.bn1.bias
<DEBUG> gradient to module.layer2.1.conv2.weight
<DEBUG> gradient to module.layer2.1.bn2.weight
<DEBUG> gradient to module.layer2.1.bn2.bias
<DEBUG> gradient to module.layer3.0.conv1.weight
<DEBUG> gradient to module.layer3.0.bn1.weight
<DEBUG> gradient to module.layer3.0.bn1.bias
<DEBUG> gradient to module.layer3.0.conv2.weight
<DEBUG> gradient to module.layer3.0.bn2.weight
<DEBUG> gradient to module.layer3.0.bn2.bias
<DEBUG> gradient to module.layer3.0.downsample.0.weight
<DEBUG> gradient to module.layer3.0.downsample.1.weight
<DEBUG> gradient to module.layer3.0.downsample.1.bias
<DEBUG> gradient to module.layer3.1.conv1.weight
<DEBUG> gradient to module.layer3.1.bn1.weight
<DEBUG> gradient to module.layer3.1.bn1.bias
<DEBUG> gradient to module.layer3.1.conv2.weight
<DEBUG> gradient to module.layer3.1.bn2.weight
<DEBUG> gradient to module.layer3.1.bn2.bias
<DEBUG> gradient to module.layer4.0.conv1.weight
<DEBUG> gradient to module.layer4.0.bn1.weight
<DEBUG> gradient to module.layer4.0.bn1.bias
<DEBUG> gradient to module.layer4.0.conv2.weight
<DEBUG> gradient to module.layer4.0.bn2.weight
<DEBUG> gradient to module.layer4.0.bn2.bias
<DEBUG> gradient to module.layer4.0.downsample.0.weight
<DEBUG> gradient to module.layer4.0.downsample.1.weight
<DEBUG> gradient to module.layer4.0.downsample.1.bias
<DEBUG> gradient to module.layer4.1.conv1.weight
<DEBUG> gradient to module.layer4.1.bn1.weight
<DEBUG> gradient to module.layer4.1.bn1.bias
<DEBUG> gradient to module.layer4.1.conv2.weight
<DEBUG> gradient to module.layer4.1.bn2.weight
<DEBUG> gradient to module.layer4.1.bn2.bias
<DEBUG> gradient to module.fc.weight
<DEBUG> gradient to module.fc.bias
Files already downloaded and verified
Files already downloaded and verified
Adding Noise to Label, len(Y)=12000, Label_noise=1140
Xmp (7877, 3, 32, 32) (6903, 3, 32, 32)
Xcp (5968, 3, 32, 32) (6032, 3, 32, 32)
env=0 2497 2497 3 3
xn 2500 xp 2500
env=1 1750 1750 750 750
xn 2500 xp 2500
env=2 50 50 450 450
xn 500 xp 500
=> Creating model 'EBD'
EBD(
  (embedings): Embedding(2, 1)
)
=> Parallelizing on [0] gpus
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:01<00:44,  1.80s/it] 19%|#9        | 5/26 [00:01<00:06,  3.42it/s] 35%|###4      | 9/26 [00:02<00:02,  6.80it/s] 50%|#####     | 13/26 [00:02<00:01, 10.54it/s] 65%|######5   | 17/26 [00:02<00:00, 14.52it/s] 81%|########  | 21/26 [00:02<00:00, 18.46it/s] 96%|#########6| 25/26 [00:02<00:00, 22.09it/s]100%|##########| 26/26 [00:02<00:00,  9.13it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 0 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 2 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 3 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 4 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 5 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 6 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 7 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 8 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 9 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 10 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 11 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 12 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 13 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 14 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 15 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 16 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 17 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 18 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 19 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 20 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 21 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 22 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 23 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 24 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 25 400
penalty weights 0.0
Epoch: [0][  26/  26]	Loss 9.155 (12.114)	train_nll   0.42 (  0.54)	train_penalty   0.08 (  0.27)	weight_norm   8.74 ( 11.58)	train_acc   0.83 (  0.81)	train_minacc   0.02 (  0.06)	train_majacc   1.00 (  0.95)	train_corr   0.00 (  0.00)	l1 7.9546 (9.2471)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.79it/s] 23%|##3       | 6/26 [00:00<00:00, 30.01it/s]                                               23%|##3       | 6/26 [00:00<00:00, 30.01it/s] 46%|####6     | 12/26 [00:00<00:00, 41.12it/s] 65%|######5   | 17/26 [00:00<00:00, 42.73it/s]                                                65%|######5   | 17/26 [00:00<00:00, 42.73it/s] 88%|########8 | 23/26 [00:00<00:00, 47.54it/s]100%|##########| 26/26 [00:00<00:00, 38.53it/s]
Test: [   0/  26]	Loss 0.412 (0.412)	test_acc   0.85 (  0.85)	test_minacc   0.00 (  0.00)	test_majacc   0.99 (  0.99)	Loss_d 0.412 (0.412)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.00 (  0.00)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.96 (  0.96)
Test: [  10/  26]	Loss 0.398 (0.408)	test_acc   0.85 (  0.85)	test_minacc   0.02 (  0.01)	test_majacc   1.00 (  1.00)	Loss_d 0.398 (0.408)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.02 (  0.01)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.97 (  0.96)
Test: [  20/  26]	Loss 0.373 (0.407)	test_acc   0.88 (  0.85)	test_minacc   0.04 (  0.01)	test_majacc   1.00 (  1.00)	Loss_d 0.373 (0.407)	test_acc_d   0.88 (  0.85)	test_minacc_d   0.04 (  0.01)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.96 (  0.96)
Test: [  26/  26]	Loss 0.404 (0.403)	test_acc   0.83 (  0.85)	test_minacc   0.02 (  0.01)	test_majacc   1.00 (  1.00)	Loss_d 0.404 (0.403)	test_acc_d   0.83 (  0.85)	test_minacc_d   0.02 (  0.01)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.96 (  0.96)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00,  2.55it/s]100%|##########| 1/1 [00:00<00:00,  2.55it/s]
Test: [  0/  1]	Loss 1.720 (1.720)	test_acc   0.11 (  0.11)	test_minacc   0.01 (  0.01)	test_majacc   0.99 (  0.99)	Loss_d 1.720 (1.720)	test_acc_d   0.11 (  0.11)	test_minacc_d   0.01 (  0.01)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.95 (  0.95)
Test: [  1/  1]	Loss 1.720 (1.720)	test_acc   0.11 (  0.11)	test_minacc   0.01 (  0.01)	test_majacc   0.99 (  0.99)	Loss_d 1.720 (1.720)	test_acc_d   0.11 (  0.11)	test_minacc_d   0.01 (  0.01)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.95 (  0.95)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/37/checkpoints/model_best.pth
Overall Timing[  0/  1]	epoch_time 0.0773 (0.0773)	validation_time 0.0066 (0.0066)	train_time 0.0676 (0.0676)
record: (train_acc, test_acc) (0.8482000254988671, 0.10500000417232513)
last accs (train_acc, test_acc) (0.8482000254988671, 0.10500000417232513)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.10it/s] 19%|#9        | 5/26 [00:00<00:01, 17.56it/s] 35%|###4      | 9/26 [00:00<00:00, 23.49it/s] 50%|#####     | 13/26 [00:00<00:00, 27.39it/s] 65%|######5   | 17/26 [00:00<00:00, 29.60it/s] 81%|########  | 21/26 [00:00<00:00, 31.32it/s] 96%|#########6| 25/26 [00:00<00:00, 32.31it/s]100%|##########| 26/26 [00:01<00:00, 25.80it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 26 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 27 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 28 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 29 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 30 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 31 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 32 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 33 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 34 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 35 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 36 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 37 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 38 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 39 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 40 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 41 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 42 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 43 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 44 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 45 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 46 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 47 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 48 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 49 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 50 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 51 400
penalty weights 0.0
Epoch: [1][  26/  26]	Loss 4.572 (6.439)	train_nll   0.42 (  0.41)	train_penalty   0.06 (  0.05)	weight_norm   4.16 (  6.03)	train_acc   0.83 (  0.85)	train_minacc   0.02 (  0.02)	train_majacc   1.00 (  0.99)	train_corr   0.00 (  0.00)	l1 7.0323 (7.4683)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.62it/s] 27%|##6       | 7/26 [00:00<00:00, 36.06it/s]                                               27%|##6       | 7/26 [00:00<00:00, 36.06it/s] 50%|#####     | 13/26 [00:00<00:00, 41.20it/s] 73%|#######3  | 19/26 [00:00<00:00, 47.71it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 47.71it/s] 96%|#########6| 25/26 [00:00<00:00, 47.83it/s]100%|##########| 26/26 [00:00<00:00, 40.15it/s]
Test: [   0/  26]	Loss 0.415 (0.415)	test_acc   0.85 (  0.85)	test_minacc   0.00 (  0.00)	test_majacc   0.99 (  0.99)	Loss_d 0.415 (0.415)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.00 (  0.00)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.94 (  0.94)
Test: [  10/  26]	Loss 0.384 (0.401)	test_acc   0.86 (  0.85)	test_minacc   0.03 (  0.02)	test_majacc   1.00 (  1.00)	Loss_d 0.384 (0.401)	test_acc_d   0.86 (  0.85)	test_minacc_d   0.03 (  0.02)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.94 (  0.94)
Test: [  20/  26]	Loss 0.379 (0.402)	test_acc   0.88 (  0.85)	test_minacc   0.04 (  0.02)	test_majacc   1.00 (  1.00)	Loss_d 0.379 (0.402)	test_acc_d   0.88 (  0.85)	test_minacc_d   0.04 (  0.02)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.95 (  0.94)
Test: [  26/  26]	Loss 0.389 (0.398)	test_acc   0.84 (  0.85)	test_minacc   0.07 (  0.02)	test_majacc   1.00 (  1.00)	Loss_d 0.389 (0.398)	test_acc_d   0.84 (  0.85)	test_minacc_d   0.07 (  0.02)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.94 (  0.94)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.81it/s]
Test: [  0/  1]	Loss 1.679 (1.679)	test_acc   0.11 (  0.11)	test_minacc   0.01 (  0.01)	test_majacc   0.99 (  0.99)	Loss_d 1.679 (1.679)	test_acc_d   0.11 (  0.11)	test_minacc_d   0.01 (  0.01)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.93 (  0.93)
Test: [  1/  1]	Loss 1.679 (1.679)	test_acc   0.11 (  0.11)	test_minacc   0.01 (  0.01)	test_majacc   0.99 (  0.99)	Loss_d 1.679 (1.679)	test_acc_d   0.11 (  0.11)	test_minacc_d   0.01 (  0.01)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.93 (  0.93)
Overall Timing[  1/  1]	epoch_time 0.0384 (0.0578)	validation_time 0.0005 (0.0036)	train_time 0.0379 (0.0527)
record: (train_acc, test_acc) (0.8482000254988671, 0.10500000417232513)
last accs (train_acc, test_acc) (0.8489000223875046, 0.10500000417232513)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.24it/s] 19%|#9        | 5/26 [00:00<00:01, 18.29it/s] 35%|###4      | 9/26 [00:00<00:00, 24.40it/s] 50%|#####     | 13/26 [00:00<00:00, 28.18it/s] 65%|######5   | 17/26 [00:00<00:00, 29.93it/s] 81%|########  | 21/26 [00:00<00:00, 31.12it/s] 96%|#########6| 25/26 [00:00<00:00, 31.91it/s]100%|##########| 26/26 [00:00<00:00, 26.17it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 52 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 53 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 54 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 55 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 56 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 57 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 58 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 59 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 60 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 61 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 62 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 63 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 64 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 65 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 66 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 67 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 68 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 69 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 70 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 71 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 72 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 73 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 74 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 75 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 76 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 77 400
penalty weights 0.0
Epoch: [2][  26/  26]	Loss 2.755 (3.527)	train_nll   0.37 (  0.40)	train_penalty   0.04 (  0.05)	weight_norm   2.39 (  3.13)	train_acc   0.84 (  0.84)	train_minacc   0.16 (  0.04)	train_majacc   0.99 (  0.98)	train_corr   0.00 (  0.00)	l1 6.0928 (6.5240)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.43it/s] 27%|##6       | 7/26 [00:00<00:00, 34.22it/s]                                               27%|##6       | 7/26 [00:00<00:00, 34.22it/s] 50%|#####     | 13/26 [00:00<00:00, 40.15it/s] 73%|#######3  | 19/26 [00:00<00:00, 46.87it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 46.87it/s] 96%|#########6| 25/26 [00:00<00:00, 46.97it/s]100%|##########| 26/26 [00:00<00:00, 38.61it/s]
Test: [   0/  26]	Loss 0.395 (0.395)	test_acc   0.80 (  0.80)	test_minacc   0.27 (  0.27)	test_majacc   0.89 (  0.89)	Loss_d 0.395 (0.395)	test_acc_d   0.80 (  0.80)	test_minacc_d   0.27 (  0.27)	test_majacc_d   0.89 (  0.89)	test_corr_d   0.80 (  0.80)
Test: [  10/  26]	Loss 0.373 (0.398)	test_acc   0.85 (  0.82)	test_minacc   0.45 (  0.35)	test_majacc   0.92 (  0.91)	Loss_d 0.373 (0.398)	test_acc_d   0.85 (  0.82)	test_minacc_d   0.45 (  0.35)	test_majacc_d   0.92 (  0.91)	test_corr_d   0.82 (  0.81)
Test: [  20/  26]	Loss 0.402 (0.402)	test_acc   0.82 (  0.82)	test_minacc   0.29 (  0.35)	test_majacc   0.89 (  0.91)	Loss_d 0.402 (0.402)	test_acc_d   0.82 (  0.82)	test_minacc_d   0.29 (  0.35)	test_majacc_d   0.89 (  0.91)	test_corr_d   0.82 (  0.81)
Test: [  26/  26]	Loss 0.334 (0.394)	test_acc   0.87 (  0.83)	test_minacc   0.53 (  0.37)	test_majacc   0.94 (  0.91)	Loss_d 0.334 (0.394)	test_acc_d   0.87 (  0.83)	test_minacc_d   0.53 (  0.37)	test_majacc_d   0.94 (  0.91)	test_corr_d   0.82 (  0.81)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.37it/s]
Test: [  0/  1]	Loss 1.565 (1.565)	test_acc   0.36 (  0.36)	test_minacc   0.30 (  0.30)	test_majacc   0.92 (  0.92)	Loss_d 1.565 (1.565)	test_acc_d   0.36 (  0.36)	test_minacc_d   0.30 (  0.30)	test_majacc_d   0.92 (  0.92)	test_corr_d   0.58 (  0.58)
Test: [  1/  1]	Loss 1.565 (1.565)	test_acc   0.36 (  0.36)	test_minacc   0.30 (  0.30)	test_majacc   0.92 (  0.92)	Loss_d 1.565 (1.565)	test_acc_d   0.36 (  0.36)	test_minacc_d   0.30 (  0.30)	test_majacc_d   0.92 (  0.92)	test_corr_d   0.58 (  0.58)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/37/checkpoints/model_best.pth
Overall Timing[  2/  1]	epoch_time 0.0379 (0.0512)	validation_time 0.0004 (0.0025)	train_time 0.0375 (0.0476)
record: (train_acc, test_acc) (0.8254000274538994, 0.3580000102519989)
last accs (train_acc, test_acc) (0.8254000274538994, 0.3580000102519989)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.47it/s] 19%|#9        | 5/26 [00:00<00:00, 21.18it/s] 35%|###4      | 9/26 [00:00<00:00, 26.93it/s] 50%|#####     | 13/26 [00:00<00:00, 30.04it/s] 65%|######5   | 17/26 [00:00<00:00, 31.70it/s] 81%|########  | 21/26 [00:00<00:00, 32.84it/s] 96%|#########6| 25/26 [00:00<00:00, 33.39it/s]100%|##########| 26/26 [00:00<00:00, 28.09it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 78 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 79 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 80 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 81 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 82 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 83 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 84 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 85 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 86 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 87 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 88 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 89 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 90 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 91 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 92 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 93 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 94 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 95 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 96 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 97 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 98 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 99 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 100 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 101 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 102 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 103 400
penalty weights 0.0
Epoch: [3][  26/  26]	Loss 1.873 (2.283)	train_nll   0.37 (  0.38)	train_penalty   0.04 (  0.04)	weight_norm   1.50 (  1.90)	train_acc   0.82 (  0.84)	train_minacc   0.05 (  0.04)	train_majacc   0.99 (  0.99)	train_corr   0.00 (  0.00)	l1 5.8457 (5.8867)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.81it/s] 27%|##6       | 7/26 [00:00<00:00, 29.47it/s]                                               27%|##6       | 7/26 [00:00<00:00, 29.47it/s] 50%|#####     | 13/26 [00:00<00:00, 36.96it/s] 73%|#######3  | 19/26 [00:00<00:00, 43.56it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 43.56it/s] 96%|#########6| 25/26 [00:00<00:00, 45.87it/s]100%|##########| 26/26 [00:00<00:00, 36.65it/s]
Test: [   0/  26]	Loss 0.337 (0.337)	test_acc   0.87 (  0.87)	test_minacc   0.32 (  0.32)	test_majacc   0.96 (  0.96)	Loss_d 0.337 (0.337)	test_acc_d   0.87 (  0.87)	test_minacc_d   0.32 (  0.32)	test_majacc_d   0.96 (  0.96)	test_corr_d   0.90 (  0.90)
Test: [  10/  26]	Loss 0.342 (0.383)	test_acc   0.86 (  0.83)	test_minacc   0.29 (  0.24)	test_majacc   0.96 (  0.94)	Loss_d 0.342 (0.383)	test_acc_d   0.86 (  0.83)	test_minacc_d   0.29 (  0.24)	test_majacc_d   0.96 (  0.94)	test_corr_d   0.90 (  0.89)
Test: [  20/  26]	Loss 0.362 (0.384)	test_acc   0.83 (  0.83)	test_minacc   0.19 (  0.23)	test_majacc   0.92 (  0.94)	Loss_d 0.362 (0.384)	test_acc_d   0.83 (  0.83)	test_minacc_d   0.19 (  0.23)	test_majacc_d   0.92 (  0.94)	test_corr_d   0.90 (  0.89)
Test: [  26/  26]	Loss 0.359 (0.376)	test_acc   0.83 (  0.83)	test_minacc   0.21 (  0.24)	test_majacc   0.96 (  0.94)	Loss_d 0.359 (0.376)	test_acc_d   0.83 (  0.83)	test_minacc_d   0.21 (  0.24)	test_majacc_d   0.96 (  0.94)	test_corr_d   0.90 (  0.89)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 67.02it/s]
Test: [  0/  1]	Loss 1.680 (1.680)	test_acc   0.26 (  0.26)	test_minacc   0.18 (  0.18)	test_majacc   0.96 (  0.96)	Loss_d 1.680 (1.680)	test_acc_d   0.26 (  0.26)	test_minacc_d   0.18 (  0.18)	test_majacc_d   0.96 (  0.96)	test_corr_d   0.78 (  0.78)
Test: [  1/  1]	Loss 1.680 (1.680)	test_acc   0.26 (  0.26)	test_minacc   0.18 (  0.18)	test_majacc   0.96 (  0.96)	Loss_d 1.680 (1.680)	test_acc_d   0.26 (  0.26)	test_minacc_d   0.18 (  0.18)	test_majacc_d   0.96 (  0.96)	test_corr_d   0.78 (  0.78)
Overall Timing[  3/  1]	epoch_time 0.0383 (0.0480)	validation_time 0.0004 (0.0020)	train_time 0.0379 (0.0452)
record: (train_acc, test_acc) (0.8254000274538994, 0.3580000102519989)
last accs (train_acc, test_acc) (0.8345000229477882, 0.2600000202655792)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.80it/s] 19%|#9        | 5/26 [00:00<00:00, 22.72it/s] 35%|###4      | 9/26 [00:00<00:00, 27.96it/s] 50%|#####     | 13/26 [00:00<00:00, 31.18it/s] 65%|######5   | 17/26 [00:00<00:00, 33.02it/s] 81%|########  | 21/26 [00:00<00:00, 34.12it/s] 96%|#########6| 25/26 [00:00<00:00, 34.04it/s]100%|##########| 26/26 [00:00<00:00, 29.10it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 104 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 105 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 106 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 107 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 108 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 109 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 110 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 111 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 112 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 113 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 114 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 115 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 116 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 117 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 118 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 119 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 120 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 121 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 122 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 123 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 124 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 125 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 126 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 127 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 128 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 129 400
penalty weights 0.0
Epoch: [4][  26/  26]	Loss 1.320 (1.591)	train_nll   0.33 (  0.37)	train_penalty   0.02 (  0.04)	weight_norm   0.99 (  1.22)	train_acc   0.82 (  0.85)	train_minacc   0.02 (  0.11)	train_majacc   0.99 (  0.98)	train_corr   0.00 (  0.00)	l1 5.8045 (5.7582)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 19.88it/s] 31%|###       | 8/26 [00:00<00:00, 42.00it/s]                                               31%|###       | 8/26 [00:00<00:00, 42.00it/s] 50%|#####     | 13/26 [00:00<00:00, 45.54it/s] 69%|######9   | 18/26 [00:00<00:00, 46.02it/s]                                                69%|######9   | 18/26 [00:00<00:00, 46.02it/s] 92%|#########2| 24/26 [00:00<00:00, 50.27it/s]100%|##########| 26/26 [00:00<00:00, 42.59it/s]
Test: [   0/  26]	Loss 0.372 (0.372)	test_acc   0.86 (  0.86)	test_minacc   0.27 (  0.27)	test_majacc   0.96 (  0.96)	Loss_d 0.372 (0.372)	test_acc_d   0.86 (  0.86)	test_minacc_d   0.27 (  0.27)	test_majacc_d   0.96 (  0.96)	test_corr_d   0.84 (  0.84)
Test: [  10/  26]	Loss 0.364 (0.375)	test_acc   0.86 (  0.85)	test_minacc   0.19 (  0.19)	test_majacc   0.98 (  0.97)	Loss_d 0.364 (0.375)	test_acc_d   0.86 (  0.85)	test_minacc_d   0.19 (  0.19)	test_majacc_d   0.98 (  0.97)	test_corr_d   0.86 (  0.85)
Test: [  20/  26]	Loss 0.351 (0.374)	test_acc   0.86 (  0.85)	test_minacc   0.12 (  0.20)	test_majacc   0.96 (  0.96)	Loss_d 0.351 (0.374)	test_acc_d   0.86 (  0.85)	test_minacc_d   0.12 (  0.20)	test_majacc_d   0.96 (  0.96)	test_corr_d   0.86 (  0.85)
Test: [  26/  26]	Loss 0.356 (0.374)	test_acc   0.83 (  0.85)	test_minacc   0.16 (  0.20)	test_majacc   0.97 (  0.96)	Loss_d 0.356 (0.374)	test_acc_d   0.83 (  0.85)	test_minacc_d   0.16 (  0.20)	test_majacc_d   0.97 (  0.96)	test_corr_d   0.87 (  0.85)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 53.79it/s]
Test: [  0/  1]	Loss 1.503 (1.503)	test_acc   0.27 (  0.27)	test_minacc   0.19 (  0.19)	test_majacc   0.97 (  0.97)	Loss_d 1.503 (1.503)	test_acc_d   0.27 (  0.27)	test_minacc_d   0.19 (  0.19)	test_majacc_d   0.97 (  0.97)	test_corr_d   0.63 (  0.63)
Test: [  1/  1]	Loss 1.503 (1.503)	test_acc   0.27 (  0.27)	test_minacc   0.19 (  0.19)	test_majacc   0.97 (  0.97)	Loss_d 1.503 (1.503)	test_acc_d   0.27 (  0.27)	test_minacc_d   0.19 (  0.19)	test_majacc_d   0.97 (  0.97)	test_corr_d   0.63 (  0.63)
Overall Timing[  4/  1]	epoch_time 0.0360 (0.0456)	validation_time 0.0007 (0.0017)	train_time 0.0354 (0.0432)
record: (train_acc, test_acc) (0.8254000274538994, 0.3580000102519989)
last accs (train_acc, test_acc) (0.8483000220060348, 0.2680000066757202)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.63it/s] 19%|#9        | 5/26 [00:00<00:01, 20.40it/s] 35%|###4      | 9/26 [00:00<00:00, 26.15it/s] 50%|#####     | 13/26 [00:00<00:00, 29.43it/s] 65%|######5   | 17/26 [00:00<00:00, 31.20it/s] 81%|########  | 21/26 [00:00<00:00, 32.42it/s] 96%|#########6| 25/26 [00:00<00:00, 32.91it/s]100%|##########| 26/26 [00:00<00:00, 27.55it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 130 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 131 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 132 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 133 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 134 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 135 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 136 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 137 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 138 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 139 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 140 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 141 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 142 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 143 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 144 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 145 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 146 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 147 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 148 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 149 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 150 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 151 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 152 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 153 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 154 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 155 400
penalty weights 0.0
Epoch: [5][  26/  26]	Loss 0.979 (1.166)	train_nll   0.32 (  0.36)	train_penalty   0.02 (  0.03)	weight_norm   0.66 (  0.81)	train_acc   0.84 (  0.85)	train_minacc   0.16 (  0.12)	train_majacc   0.99 (  0.98)	train_corr   0.00 (  0.00)	l1 6.2571 (6.0219)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.55it/s] 27%|##6       | 7/26 [00:00<00:00, 33.86it/s]                                               27%|##6       | 7/26 [00:00<00:00, 33.86it/s] 50%|#####     | 13/26 [00:00<00:00, 39.01it/s] 73%|#######3  | 19/26 [00:00<00:00, 45.54it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 45.54it/s] 96%|#########6| 25/26 [00:00<00:00, 46.15it/s]100%|##########| 26/26 [00:00<00:00, 38.41it/s]
Test: [   0/  26]	Loss 0.307 (0.307)	test_acc   0.85 (  0.85)	test_minacc   0.29 (  0.29)	test_majacc   0.95 (  0.95)	Loss_d 0.307 (0.307)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.29 (  0.29)	test_majacc_d   0.95 (  0.95)	test_corr_d   0.86 (  0.86)
Test: [  10/  26]	Loss 0.317 (0.337)	test_acc   0.85 (  0.85)	test_minacc   0.22 (  0.28)	test_majacc   0.96 (  0.96)	Loss_d 0.317 (0.337)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.22 (  0.28)	test_majacc_d   0.96 (  0.96)	test_corr_d   0.87 (  0.86)
Test: [  20/  26]	Loss 0.305 (0.336)	test_acc   0.88 (  0.85)	test_minacc   0.23 (  0.26)	test_majacc   0.98 (  0.96)	Loss_d 0.305 (0.336)	test_acc_d   0.88 (  0.85)	test_minacc_d   0.23 (  0.26)	test_majacc_d   0.98 (  0.96)	test_corr_d   0.89 (  0.87)
Test: [  26/  26]	Loss 0.303 (0.332)	test_acc   0.86 (  0.86)	test_minacc   0.30 (  0.26)	test_majacc   0.97 (  0.96)	Loss_d 0.303 (0.332)	test_acc_d   0.86 (  0.86)	test_minacc_d   0.30 (  0.26)	test_majacc_d   0.97 (  0.96)	test_corr_d   0.87 (  0.87)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 67.09it/s]
Test: [  0/  1]	Loss 1.465 (1.465)	test_acc   0.32 (  0.32)	test_minacc   0.26 (  0.26)	test_majacc   0.91 (  0.91)	Loss_d 1.465 (1.465)	test_acc_d   0.32 (  0.32)	test_minacc_d   0.26 (  0.26)	test_majacc_d   0.91 (  0.91)	test_corr_d   0.61 (  0.61)
Test: [  1/  1]	Loss 1.465 (1.465)	test_acc   0.32 (  0.32)	test_minacc   0.26 (  0.26)	test_majacc   0.91 (  0.91)	Loss_d 1.465 (1.465)	test_acc_d   0.32 (  0.32)	test_minacc_d   0.26 (  0.26)	test_majacc_d   0.91 (  0.91)	test_corr_d   0.61 (  0.61)
Overall Timing[  5/  1]	epoch_time 0.0363 (0.0440)	validation_time 0.0003 (0.0015)	train_time 0.0360 (0.0420)
record: (train_acc, test_acc) (0.8254000274538994, 0.3580000102519989)
last accs (train_acc, test_acc) (0.8560000286102295, 0.3230000138282776)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.84it/s] 19%|#9        | 5/26 [00:00<00:00, 21.34it/s] 35%|###4      | 9/26 [00:00<00:00, 27.02it/s] 50%|#####     | 13/26 [00:00<00:00, 30.36it/s] 65%|######5   | 17/26 [00:00<00:00, 32.65it/s] 81%|########  | 21/26 [00:00<00:00, 34.02it/s] 96%|#########6| 25/26 [00:00<00:00, 34.29it/s]100%|##########| 26/26 [00:00<00:00, 28.43it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 156 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 157 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 158 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 159 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 160 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 161 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 162 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 163 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 164 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 165 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 166 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 167 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 168 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 169 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 170 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 171 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 172 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 173 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 174 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 175 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 176 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 177 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 178 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 179 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 180 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 181 400
penalty weights 0.0
Epoch: [6][  26/  26]	Loss 0.768 (0.900)	train_nll   0.32 (  0.35)	train_penalty   0.02 (  0.03)	weight_norm   0.45 (  0.55)	train_acc   0.84 (  0.85)	train_minacc   0.09 (  0.16)	train_majacc   0.99 (  0.97)	train_corr   0.00 (  0.00)	l1 6.8479 (6.5499)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.56it/s] 27%|##6       | 7/26 [00:00<00:00, 35.39it/s]                                               27%|##6       | 7/26 [00:00<00:00, 35.39it/s] 50%|#####     | 13/26 [00:00<00:00, 41.06it/s] 73%|#######3  | 19/26 [00:00<00:00, 46.78it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 46.78it/s] 96%|#########6| 25/26 [00:00<00:00, 48.17it/s]100%|##########| 26/26 [00:00<00:00, 40.26it/s]
Test: [   0/  26]	Loss 0.326 (0.326)	test_acc   0.85 (  0.85)	test_minacc   0.21 (  0.21)	test_majacc   0.96 (  0.96)	Loss_d 0.326 (0.326)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.21 (  0.21)	test_majacc_d   0.96 (  0.96)	test_corr_d   0.81 (  0.81)
Test: [  10/  26]	Loss 0.345 (0.353)	test_acc   0.86 (  0.85)	test_minacc   0.22 (  0.23)	test_majacc   0.97 (  0.96)	Loss_d 0.345 (0.353)	test_acc_d   0.86 (  0.85)	test_minacc_d   0.22 (  0.23)	test_majacc_d   0.97 (  0.96)	test_corr_d   0.84 (  0.83)
Test: [  20/  26]	Loss 0.341 (0.353)	test_acc   0.86 (  0.85)	test_minacc   0.19 (  0.23)	test_majacc   0.95 (  0.96)	Loss_d 0.341 (0.353)	test_acc_d   0.86 (  0.85)	test_minacc_d   0.19 (  0.23)	test_majacc_d   0.95 (  0.96)	test_corr_d   0.83 (  0.84)
Test: [  26/  26]	Loss 0.309 (0.349)	test_acc   0.86 (  0.85)	test_minacc   0.33 (  0.23)	test_majacc   0.98 (  0.96)	Loss_d 0.309 (0.349)	test_acc_d   0.86 (  0.85)	test_minacc_d   0.33 (  0.23)	test_majacc_d   0.98 (  0.96)	test_corr_d   0.85 (  0.84)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 64.05it/s]
Test: [  0/  1]	Loss 1.464 (1.464)	test_acc   0.30 (  0.30)	test_minacc   0.23 (  0.23)	test_majacc   0.94 (  0.94)	Loss_d 1.464 (1.464)	test_acc_d   0.30 (  0.30)	test_minacc_d   0.23 (  0.23)	test_majacc_d   0.94 (  0.94)	test_corr_d   0.56 (  0.56)
Test: [  1/  1]	Loss 1.464 (1.464)	test_acc   0.30 (  0.30)	test_minacc   0.23 (  0.23)	test_majacc   0.94 (  0.94)	Loss_d 1.464 (1.464)	test_acc_d   0.30 (  0.30)	test_minacc_d   0.23 (  0.23)	test_majacc_d   0.94 (  0.94)	test_corr_d   0.56 (  0.56)
Overall Timing[  6/  1]	epoch_time 0.0364 (0.0430)	validation_time 0.0003 (0.0013)	train_time 0.0361 (0.0412)
record: (train_acc, test_acc) (0.8254000274538994, 0.3580000102519989)
last accs (train_acc, test_acc) (0.8521000219583511, 0.2970000207424164)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.49it/s] 19%|#9        | 5/26 [00:00<00:01, 20.76it/s] 35%|###4      | 9/26 [00:00<00:00, 26.28it/s] 50%|#####     | 13/26 [00:00<00:00, 29.28it/s] 65%|######5   | 17/26 [00:00<00:00, 31.01it/s] 81%|########  | 21/26 [00:00<00:00, 32.39it/s] 96%|#########6| 25/26 [00:00<00:00, 33.18it/s]100%|##########| 26/26 [00:00<00:00, 27.70it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 182 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 183 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 184 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 185 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 186 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 187 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 188 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 189 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 190 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 191 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 192 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 193 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 194 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 195 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 196 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 197 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 198 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 199 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 200 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 201 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 202 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 203 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 204 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 205 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 206 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 207 400
penalty weights 0.0
Epoch: [7][  26/  26]	Loss 0.613 (0.703)	train_nll   0.33 (  0.34)	train_penalty   0.03 (  0.03)	weight_norm   0.29 (  0.36)	train_acc   0.83 (  0.85)	train_minacc   0.07 (  0.18)	train_majacc   0.99 (  0.97)	train_corr   0.00 (  0.00)	l1 8.1815 (7.5349)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 19.50it/s] 27%|##6       | 7/26 [00:00<00:00, 37.17it/s]                                               27%|##6       | 7/26 [00:00<00:00, 37.17it/s] 46%|####6     | 12/26 [00:00<00:00, 38.72it/s] 69%|######9   | 18/26 [00:00<00:00, 45.75it/s]                                                69%|######9   | 18/26 [00:00<00:00, 45.75it/s] 92%|#########2| 24/26 [00:00<00:00, 46.46it/s]100%|##########| 26/26 [00:00<00:00, 40.58it/s]
Test: [   0/  26]	Loss 0.312 (0.312)	test_acc   0.83 (  0.83)	test_minacc   0.27 (  0.27)	test_majacc   0.93 (  0.93)	Loss_d 0.312 (0.312)	test_acc_d   0.83 (  0.83)	test_minacc_d   0.27 (  0.27)	test_majacc_d   0.93 (  0.93)	test_corr_d   0.85 (  0.85)
Test: [  10/  26]	Loss 0.330 (0.337)	test_acc   0.84 (  0.85)	test_minacc   0.31 (  0.36)	test_majacc   0.94 (  0.94)	Loss_d 0.330 (0.337)	test_acc_d   0.84 (  0.85)	test_minacc_d   0.31 (  0.36)	test_majacc_d   0.94 (  0.94)	test_corr_d   0.86 (  0.86)
Test: [  20/  26]	Loss 0.312 (0.338)	test_acc   0.88 (  0.85)	test_minacc   0.33 (  0.33)	test_majacc   0.96 (  0.95)	Loss_d 0.312 (0.338)	test_acc_d   0.88 (  0.85)	test_minacc_d   0.33 (  0.33)	test_majacc_d   0.96 (  0.95)	test_corr_d   0.88 (  0.86)
Test: [  26/  26]	Loss 0.312 (0.335)	test_acc   0.87 (  0.85)	test_minacc   0.44 (  0.34)	test_majacc   0.96 (  0.95)	Loss_d 0.312 (0.335)	test_acc_d   0.87 (  0.85)	test_minacc_d   0.44 (  0.34)	test_majacc_d   0.96 (  0.95)	test_corr_d   0.86 (  0.86)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.41it/s]
Test: [  0/  1]	Loss 1.517 (1.517)	test_acc   0.36 (  0.36)	test_minacc   0.30 (  0.30)	test_majacc   0.90 (  0.90)	Loss_d 1.517 (1.517)	test_acc_d   0.36 (  0.36)	test_minacc_d   0.30 (  0.30)	test_majacc_d   0.90 (  0.90)	test_corr_d   0.60 (  0.60)
Test: [  1/  1]	Loss 1.517 (1.517)	test_acc   0.36 (  0.36)	test_minacc   0.30 (  0.30)	test_majacc   0.90 (  0.90)	Loss_d 1.517 (1.517)	test_acc_d   0.36 (  0.36)	test_minacc_d   0.30 (  0.30)	test_majacc_d   0.90 (  0.90)	test_corr_d   0.60 (  0.60)
Overall Timing[  7/  1]	epoch_time 0.0363 (0.0421)	validation_time 0.0003 (0.0012)	train_time 0.0360 (0.0405)
record: (train_acc, test_acc) (0.8254000274538994, 0.3580000102519989)
last accs (train_acc, test_acc) (0.8545000199079513, 0.3580000102519989)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.02it/s] 19%|#9        | 5/26 [00:00<00:00, 23.69it/s] 35%|###4      | 9/26 [00:00<00:00, 28.63it/s] 50%|#####     | 13/26 [00:00<00:00, 31.15it/s] 65%|######5   | 17/26 [00:00<00:00, 32.53it/s] 81%|########  | 21/26 [00:00<00:00, 33.34it/s] 96%|#########6| 25/26 [00:00<00:00, 33.41it/s]100%|##########| 26/26 [00:00<00:00, 28.80it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 208 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 209 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 210 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 211 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 212 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 213 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 214 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 215 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 216 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 217 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 218 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 219 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 220 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 221 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 222 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 223 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 224 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 225 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 226 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 227 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 228 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 229 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 230 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 231 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 232 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 233 400
penalty weights 0.0
Epoch: [8][  26/  26]	Loss 0.531 (0.596)	train_nll   0.31 (  0.34)	train_penalty   0.02 (  0.03)	weight_norm   0.22 (  0.25)	train_acc   0.84 (  0.85)	train_minacc   0.12 (  0.17)	train_majacc   0.99 (  0.97)	train_corr   0.00 (  0.00)	l1 9.6926 (9.0351)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.93it/s] 27%|##6       | 7/26 [00:00<00:00, 31.70it/s]                                               27%|##6       | 7/26 [00:00<00:00, 31.70it/s] 50%|#####     | 13/26 [00:00<00:00, 39.60it/s] 73%|#######3  | 19/26 [00:00<00:00, 45.51it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 45.51it/s] 96%|#########6| 25/26 [00:00<00:00, 47.32it/s]100%|##########| 26/26 [00:00<00:00, 38.30it/s]
Test: [   0/  26]	Loss 0.320 (0.320)	test_acc   0.84 (  0.84)	test_minacc   0.32 (  0.32)	test_majacc   0.93 (  0.93)	Loss_d 0.320 (0.320)	test_acc_d   0.84 (  0.84)	test_minacc_d   0.32 (  0.32)	test_majacc_d   0.93 (  0.93)	test_corr_d   0.81 (  0.81)
Test: [  10/  26]	Loss 0.328 (0.339)	test_acc   0.87 (  0.85)	test_minacc   0.31 (  0.31)	test_majacc   0.96 (  0.95)	Loss_d 0.328 (0.339)	test_acc_d   0.87 (  0.85)	test_minacc_d   0.31 (  0.31)	test_majacc_d   0.96 (  0.95)	test_corr_d   0.83 (  0.83)
Test: [  20/  26]	Loss 0.332 (0.341)	test_acc   0.87 (  0.85)	test_minacc   0.29 (  0.31)	test_majacc   0.95 (  0.95)	Loss_d 0.332 (0.341)	test_acc_d   0.87 (  0.85)	test_minacc_d   0.29 (  0.31)	test_majacc_d   0.95 (  0.95)	test_corr_d   0.84 (  0.83)
Test: [  26/  26]	Loss 0.300 (0.338)	test_acc   0.87 (  0.85)	test_minacc   0.35 (  0.31)	test_majacc   0.98 (  0.95)	Loss_d 0.300 (0.338)	test_acc_d   0.87 (  0.85)	test_minacc_d   0.35 (  0.31)	test_majacc_d   0.98 (  0.95)	test_corr_d   0.84 (  0.83)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 64.19it/s]
Test: [  0/  1]	Loss 1.432 (1.432)	test_acc   0.35 (  0.35)	test_minacc   0.29 (  0.29)	test_majacc   0.90 (  0.90)	Loss_d 1.432 (1.432)	test_acc_d   0.35 (  0.35)	test_minacc_d   0.29 (  0.29)	test_majacc_d   0.90 (  0.90)	test_corr_d   0.50 (  0.50)
Test: [  1/  1]	Loss 1.432 (1.432)	test_acc   0.35 (  0.35)	test_minacc   0.29 (  0.29)	test_majacc   0.90 (  0.90)	Loss_d 1.432 (1.432)	test_acc_d   0.35 (  0.35)	test_minacc_d   0.29 (  0.29)	test_majacc_d   0.90 (  0.90)	test_corr_d   0.50 (  0.50)
Overall Timing[  8/  1]	epoch_time 0.0353 (0.0414)	validation_time 0.0004 (0.0011)	train_time 0.0349 (0.0399)
record: (train_acc, test_acc) (0.8254000274538994, 0.3580000102519989)
last accs (train_acc, test_acc) (0.8549000185132026, 0.35100001096725464)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.07it/s] 19%|#9        | 5/26 [00:00<00:00, 22.91it/s] 35%|###4      | 9/26 [00:00<00:00, 28.39it/s] 50%|#####     | 13/26 [00:00<00:00, 31.36it/s] 65%|######5   | 17/26 [00:00<00:00, 33.13it/s] 81%|########  | 21/26 [00:00<00:00, 34.00it/s] 96%|#########6| 25/26 [00:00<00:00, 34.72it/s]100%|##########| 26/26 [00:00<00:00, 29.30it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 234 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 235 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 236 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 237 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 238 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 239 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 240 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 241 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 242 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 243 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 244 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 245 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 246 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 247 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 248 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 249 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 250 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 251 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 252 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 253 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 254 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 255 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 256 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 257 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 258 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 259 400
penalty weights 0.0
Epoch: [9][  26/  26]	Loss 0.474 (0.514)	train_nll   0.32 (  0.34)	train_penalty   0.03 (  0.02)	weight_norm   0.15 (  0.18)	train_acc   0.84 (  0.85)	train_minacc   0.05 (  0.21)	train_majacc   1.00 (  0.97)	train_corr   0.00 (  0.00)	l1 11.2036 (10.6007)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 19.30it/s] 27%|##6       | 7/26 [00:00<00:00, 35.84it/s]                                               27%|##6       | 7/26 [00:00<00:00, 35.84it/s] 50%|#####     | 13/26 [00:00<00:00, 43.85it/s] 73%|#######3  | 19/26 [00:00<00:00, 47.34it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 47.34it/s] 96%|#########6| 25/26 [00:00<00:00, 49.40it/s]100%|##########| 26/26 [00:00<00:00, 41.58it/s]
Test: [   0/  26]	Loss 0.295 (0.295)	test_acc   0.85 (  0.85)	test_minacc   0.14 (  0.14)	test_majacc   0.97 (  0.97)	Loss_d 0.295 (0.295)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.14 (  0.14)	test_majacc_d   0.97 (  0.97)	test_corr_d   0.91 (  0.91)
Test: [  10/  26]	Loss 0.305 (0.320)	test_acc   0.84 (  0.85)	test_minacc   0.10 (  0.15)	test_majacc   0.97 (  0.98)	Loss_d 0.305 (0.320)	test_acc_d   0.84 (  0.85)	test_minacc_d   0.10 (  0.15)	test_majacc_d   0.97 (  0.98)	test_corr_d   0.91 (  0.91)
Test: [  20/  26]	Loss 0.303 (0.322)	test_acc   0.87 (  0.85)	test_minacc   0.08 (  0.14)	test_majacc   0.98 (  0.98)	Loss_d 0.303 (0.322)	test_acc_d   0.87 (  0.85)	test_minacc_d   0.08 (  0.14)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.91 (  0.91)
Test: [  26/  26]	Loss 0.290 (0.317)	test_acc   0.86 (  0.86)	test_minacc   0.19 (  0.15)	test_majacc   1.00 (  0.98)	Loss_d 0.290 (0.317)	test_acc_d   0.86 (  0.86)	test_minacc_d   0.19 (  0.15)	test_majacc_d   1.00 (  0.98)	test_corr_d   0.91 (  0.91)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.20it/s]
Test: [  0/  1]	Loss 1.590 (1.590)	test_acc   0.21 (  0.21)	test_minacc   0.13 (  0.13)	test_majacc   0.96 (  0.96)	Loss_d 1.590 (1.590)	test_acc_d   0.21 (  0.21)	test_minacc_d   0.13 (  0.13)	test_majacc_d   0.96 (  0.96)	test_corr_d   0.77 (  0.77)
Test: [  1/  1]	Loss 1.590 (1.590)	test_acc   0.21 (  0.21)	test_minacc   0.13 (  0.13)	test_majacc   0.96 (  0.96)	Loss_d 1.590 (1.590)	test_acc_d   0.21 (  0.21)	test_minacc_d   0.13 (  0.13)	test_majacc_d   0.96 (  0.96)	test_corr_d   0.77 (  0.77)
Overall Timing[  9/  1]	epoch_time 0.0359 (0.0408)	validation_time 0.0004 (0.0010)	train_time 0.0354 (0.0395)
record: (train_acc, test_acc) (0.8254000274538994, 0.3580000102519989)
last accs (train_acc, test_acc) (0.8562000239491463, 0.21300001442432404)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.52it/s] 19%|#9        | 5/26 [00:00<00:01, 18.61it/s] 35%|###4      | 9/26 [00:00<00:00, 24.51it/s] 50%|#####     | 13/26 [00:00<00:00, 27.34it/s] 65%|######5   | 17/26 [00:00<00:00, 28.91it/s] 81%|########  | 21/26 [00:00<00:00, 30.58it/s] 96%|#########6| 25/26 [00:00<00:00, 31.64it/s]100%|##########| 26/26 [00:01<00:00, 25.87it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 260 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 261 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 262 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 263 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 264 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 265 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 266 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 267 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 268 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 269 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 270 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 271 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 272 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 273 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 274 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 275 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 276 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 277 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 278 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 279 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 280 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 281 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 282 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 283 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 284 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 285 400
penalty weights 0.0
Epoch: [10][  26/  26]	Loss 0.426 (0.475)	train_nll   0.29 (  0.33)	train_penalty   0.02 (  0.02)	weight_norm   0.13 (  0.14)	train_acc   0.85 (  0.85)	train_minacc   0.21 (  0.23)	train_majacc   0.98 (  0.96)	train_corr   0.00 (  0.00)	l1 12.9192 (12.1526)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.75it/s] 27%|##6       | 7/26 [00:00<00:00, 36.87it/s]                                               27%|##6       | 7/26 [00:00<00:00, 36.87it/s] 50%|#####     | 13/26 [00:00<00:00, 42.19it/s] 73%|#######3  | 19/26 [00:00<00:00, 48.11it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 48.11it/s] 96%|#########6| 25/26 [00:00<00:00, 48.43it/s]100%|##########| 26/26 [00:00<00:00, 40.70it/s]
Test: [   0/  26]	Loss 0.279 (0.279)	test_acc   0.87 (  0.87)	test_minacc   0.48 (  0.48)	test_majacc   0.94 (  0.94)	Loss_d 0.279 (0.279)	test_acc_d   0.87 (  0.87)	test_minacc_d   0.48 (  0.48)	test_majacc_d   0.94 (  0.94)	test_corr_d   0.85 (  0.85)
Test: [  10/  26]	Loss 0.284 (0.322)	test_acc   0.88 (  0.86)	test_minacc   0.43 (  0.40)	test_majacc   0.95 (  0.94)	Loss_d 0.284 (0.322)	test_acc_d   0.88 (  0.86)	test_minacc_d   0.43 (  0.40)	test_majacc_d   0.95 (  0.94)	test_corr_d   0.86 (  0.85)
Test: [  20/  26]	Loss 0.302 (0.325)	test_acc   0.88 (  0.86)	test_minacc   0.38 (  0.39)	test_majacc   0.95 (  0.94)	Loss_d 0.302 (0.325)	test_acc_d   0.88 (  0.86)	test_minacc_d   0.38 (  0.39)	test_majacc_d   0.95 (  0.94)	test_corr_d   0.87 (  0.86)
Test: [  26/  26]	Loss 0.278 (0.318)	test_acc   0.89 (  0.86)	test_minacc   0.53 (  0.40)	test_majacc   0.97 (  0.94)	Loss_d 0.278 (0.318)	test_acc_d   0.89 (  0.86)	test_minacc_d   0.53 (  0.40)	test_majacc_d   0.97 (  0.94)	test_corr_d   0.86 (  0.86)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.05it/s]
Test: [  0/  1]	Loss 1.509 (1.509)	test_acc   0.39 (  0.39)	test_minacc   0.33 (  0.33)	test_majacc   0.95 (  0.95)	Loss_d 1.509 (1.509)	test_acc_d   0.39 (  0.39)	test_minacc_d   0.33 (  0.33)	test_majacc_d   0.95 (  0.95)	test_corr_d   0.58 (  0.58)
Test: [  1/  1]	Loss 1.509 (1.509)	test_acc   0.39 (  0.39)	test_minacc   0.33 (  0.33)	test_majacc   0.95 (  0.95)	Loss_d 1.509 (1.509)	test_acc_d   0.39 (  0.39)	test_minacc_d   0.33 (  0.33)	test_majacc_d   0.95 (  0.95)	test_corr_d   0.58 (  0.58)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/37/checkpoints/model_best.pth
Overall Timing[ 10/  1]	epoch_time 0.0391 (0.0407)	validation_time 0.0004 (0.0010)	train_time 0.0386 (0.0394)
record: (train_acc, test_acc) (0.8632000282406807, 0.39400002360343933)
last accs (train_acc, test_acc) (0.8632000282406807, 0.39400002360343933)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.35it/s] 19%|#9        | 5/26 [00:00<00:00, 23.46it/s] 35%|###4      | 9/26 [00:00<00:00, 28.15it/s] 50%|#####     | 13/26 [00:00<00:00, 30.29it/s] 65%|######5   | 17/26 [00:00<00:00, 31.36it/s] 81%|########  | 21/26 [00:00<00:00, 32.14it/s] 96%|#########6| 25/26 [00:00<00:00, 32.75it/s]100%|##########| 26/26 [00:00<00:00, 28.28it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 286 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 287 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 288 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 289 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 290 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 291 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 292 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 293 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 294 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 295 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 296 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 297 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 298 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 299 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 300 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 301 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 302 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 303 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 304 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 305 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 306 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 307 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 308 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 309 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 310 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 311 400
penalty weights 0.0
Epoch: [11][  26/  26]	Loss 0.422 (0.455)	train_nll   0.30 (  0.33)	train_penalty   0.02 (  0.02)	weight_norm   0.12 (  0.13)	train_acc   0.86 (  0.85)	train_minacc   0.35 (  0.24)	train_majacc   0.97 (  0.96)	train_corr   0.00 (  0.00)	l1 14.5695 (13.8541)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.84it/s] 27%|##6       | 7/26 [00:00<00:00, 36.46it/s]                                               27%|##6       | 7/26 [00:00<00:00, 36.46it/s] 50%|#####     | 13/26 [00:00<00:00, 42.60it/s] 73%|#######3  | 19/26 [00:00<00:00, 48.26it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 48.26it/s] 96%|#########6| 25/26 [00:00<00:00, 47.94it/s]100%|##########| 26/26 [00:00<00:00, 40.52it/s]
Test: [   0/  26]	Loss 0.304 (0.304)	test_acc   0.87 (  0.87)	test_minacc   0.55 (  0.55)	test_majacc   0.92 (  0.92)	Loss_d 0.304 (0.304)	test_acc_d   0.87 (  0.87)	test_minacc_d   0.55 (  0.55)	test_majacc_d   0.92 (  0.92)	test_corr_d   0.79 (  0.79)
Test: [  10/  26]	Loss 0.308 (0.325)	test_acc   0.86 (  0.86)	test_minacc   0.50 (  0.51)	test_majacc   0.93 (  0.93)	Loss_d 0.308 (0.325)	test_acc_d   0.86 (  0.86)	test_minacc_d   0.50 (  0.51)	test_majacc_d   0.93 (  0.93)	test_corr_d   0.82 (  0.81)
Test: [  20/  26]	Loss 0.317 (0.329)	test_acc   0.85 (  0.86)	test_minacc   0.46 (  0.50)	test_majacc   0.90 (  0.92)	Loss_d 0.317 (0.329)	test_acc_d   0.85 (  0.86)	test_minacc_d   0.46 (  0.50)	test_majacc_d   0.90 (  0.92)	test_corr_d   0.81 (  0.81)
Test: [  26/  26]	Loss 0.283 (0.325)	test_acc   0.88 (  0.86)	test_minacc   0.58 (  0.49)	test_majacc   0.94 (  0.92)	Loss_d 0.283 (0.325)	test_acc_d   0.88 (  0.86)	test_minacc_d   0.58 (  0.49)	test_majacc_d   0.94 (  0.92)	test_corr_d   0.81 (  0.81)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 67.24it/s]
Test: [  0/  1]	Loss 1.373 (1.373)	test_acc   0.50 (  0.50)	test_minacc   0.46 (  0.46)	test_majacc   0.88 (  0.88)	Loss_d 1.373 (1.373)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.46 (  0.46)	test_majacc_d   0.88 (  0.88)	test_corr_d   0.31 (  0.31)
Test: [  1/  1]	Loss 1.373 (1.373)	test_acc   0.50 (  0.50)	test_minacc   0.46 (  0.46)	test_majacc   0.88 (  0.88)	Loss_d 1.373 (1.373)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.46 (  0.46)	test_majacc_d   0.88 (  0.88)	test_corr_d   0.31 (  0.31)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/37/checkpoints/model_best.pth
Overall Timing[ 11/  1]	epoch_time 0.0374 (0.0404)	validation_time 0.0003 (0.0009)	train_time 0.0371 (0.0392)
record: (train_acc, test_acc) (0.8592000258564949, 0.49900001287460327)
last accs (train_acc, test_acc) (0.8592000258564949, 0.49900001287460327)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  6.21it/s] 19%|#9        | 5/26 [00:00<00:01, 20.00it/s] 35%|###4      | 9/26 [00:00<00:00, 25.89it/s] 50%|#####     | 13/26 [00:00<00:00, 29.41it/s] 65%|######5   | 17/26 [00:00<00:00, 31.31it/s] 81%|########  | 21/26 [00:00<00:00, 32.65it/s] 96%|#########6| 25/26 [00:00<00:00, 32.88it/s]100%|##########| 26/26 [00:00<00:00, 26.98it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 312 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 313 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 314 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 315 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 316 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 317 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 318 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 319 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 320 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 321 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 322 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 323 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 324 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 325 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 326 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 327 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 328 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 329 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 330 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 331 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 332 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 333 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 334 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 335 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 336 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 337 400
penalty weights 0.0
Epoch: [12][  26/  26]	Loss 0.390 (0.439)	train_nll   0.29 (  0.33)	train_penalty   0.01 (  0.02)	weight_norm   0.10 (  0.11)	train_acc   0.88 (  0.85)	train_minacc   0.42 (  0.22)	train_majacc   0.97 (  0.96)	train_corr   0.00 (  0.00)	l1 15.7747 (15.2007)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 17.74it/s] 31%|###       | 8/26 [00:00<00:00, 37.39it/s]                                               31%|###       | 8/26 [00:00<00:00, 37.39it/s] 50%|#####     | 13/26 [00:00<00:00, 41.99it/s] 73%|#######3  | 19/26 [00:00<00:00, 48.33it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 48.33it/s] 92%|#########2| 24/26 [00:00<00:00, 48.66it/s]100%|##########| 26/26 [00:00<00:00, 41.06it/s]
Test: [   0/  26]	Loss 0.267 (0.267)	test_acc   0.87 (  0.87)	test_minacc   0.57 (  0.57)	test_majacc   0.93 (  0.93)	Loss_d 0.267 (0.267)	test_acc_d   0.87 (  0.87)	test_minacc_d   0.57 (  0.57)	test_majacc_d   0.93 (  0.93)	test_corr_d   0.79 (  0.79)
Test: [  10/  26]	Loss 0.286 (0.312)	test_acc   0.88 (  0.86)	test_minacc   0.57 (  0.50)	test_majacc   0.94 (  0.93)	Loss_d 0.286 (0.312)	test_acc_d   0.88 (  0.86)	test_minacc_d   0.57 (  0.50)	test_majacc_d   0.94 (  0.93)	test_corr_d   0.82 (  0.81)
Test: [  20/  26]	Loss 0.291 (0.314)	test_acc   0.89 (  0.86)	test_minacc   0.50 (  0.51)	test_majacc   0.94 (  0.93)	Loss_d 0.291 (0.314)	test_acc_d   0.89 (  0.86)	test_minacc_d   0.50 (  0.51)	test_majacc_d   0.94 (  0.93)	test_corr_d   0.83 (  0.81)
Test: [  26/  26]	Loss 0.240 (0.308)	test_acc   0.92 (  0.87)	test_minacc   0.67 (  0.51)	test_majacc   0.97 (  0.93)	Loss_d 0.240 (0.308)	test_acc_d   0.92 (  0.87)	test_minacc_d   0.67 (  0.51)	test_majacc_d   0.97 (  0.93)	test_corr_d   0.82 (  0.81)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 65.93it/s]
Test: [  0/  1]	Loss 1.332 (1.332)	test_acc   0.48 (  0.48)	test_minacc   0.44 (  0.44)	test_majacc   0.90 (  0.90)	Loss_d 1.332 (1.332)	test_acc_d   0.48 (  0.48)	test_minacc_d   0.44 (  0.44)	test_majacc_d   0.90 (  0.90)	test_corr_d   0.32 (  0.32)
Test: [  1/  1]	Loss 1.332 (1.332)	test_acc   0.48 (  0.48)	test_minacc   0.44 (  0.44)	test_majacc   0.90 (  0.90)	Loss_d 1.332 (1.332)	test_acc_d   0.48 (  0.48)	test_minacc_d   0.44 (  0.44)	test_majacc_d   0.90 (  0.90)	test_corr_d   0.32 (  0.32)
Overall Timing[ 12/  1]	epoch_time 0.0373 (0.0402)	validation_time 0.0004 (0.0009)	train_time 0.0369 (0.0390)
record: (train_acc, test_acc) (0.8592000258564949, 0.49900001287460327)
last accs (train_acc, test_acc) (0.8662000200152398, 0.484000027179718)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.76it/s] 19%|#9        | 5/26 [00:00<00:01, 20.89it/s] 35%|###4      | 9/26 [00:00<00:00, 25.90it/s] 50%|#####     | 13/26 [00:00<00:00, 28.87it/s] 65%|######5   | 17/26 [00:00<00:00, 30.69it/s] 81%|########  | 21/26 [00:00<00:00, 32.33it/s] 96%|#########6| 25/26 [00:00<00:00, 33.32it/s]100%|##########| 26/26 [00:00<00:00, 27.70it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 338 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 339 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 340 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 341 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 342 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 343 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 344 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 345 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 346 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 347 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 348 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 349 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 350 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 351 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 352 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 353 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 354 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 355 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 356 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 357 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 358 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 359 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 360 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 361 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 362 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 363 400
penalty weights 0.0
Epoch: [13][  26/  26]	Loss 0.361 (0.421)	train_nll   0.26 (  0.32)	train_penalty   0.01 (  0.02)	weight_norm   0.10 (  0.10)	train_acc   0.90 (  0.86)	train_minacc   0.60 (  0.28)	train_majacc   0.96 (  0.96)	train_corr   0.00 (  0.00)	l1 17.0206 (16.4865)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.87it/s] 23%|##3       | 6/26 [00:00<00:00, 29.63it/s]                                               23%|##3       | 6/26 [00:00<00:00, 29.63it/s] 46%|####6     | 12/26 [00:00<00:00, 38.05it/s] 69%|######9   | 18/26 [00:00<00:00, 45.74it/s]                                                69%|######9   | 18/26 [00:00<00:00, 45.74it/s] 92%|#########2| 24/26 [00:00<00:00, 46.55it/s]100%|##########| 26/26 [00:00<00:00, 38.87it/s]
Test: [   0/  26]	Loss 0.275 (0.275)	test_acc   0.88 (  0.88)	test_minacc   0.82 (  0.82)	test_majacc   0.90 (  0.90)	Loss_d 0.275 (0.275)	test_acc_d   0.88 (  0.88)	test_minacc_d   0.82 (  0.82)	test_majacc_d   0.90 (  0.90)	test_corr_d   0.72 (  0.72)
Test: [  10/  26]	Loss 0.288 (0.316)	test_acc   0.87 (  0.86)	test_minacc   0.74 (  0.69)	test_majacc   0.89 (  0.89)	Loss_d 0.288 (0.316)	test_acc_d   0.87 (  0.86)	test_minacc_d   0.74 (  0.69)	test_majacc_d   0.89 (  0.89)	test_corr_d   0.75 (  0.74)
Test: [  20/  26]	Loss 0.300 (0.317)	test_acc   0.87 (  0.86)	test_minacc   0.65 (  0.66)	test_majacc   0.90 (  0.90)	Loss_d 0.300 (0.317)	test_acc_d   0.87 (  0.86)	test_minacc_d   0.65 (  0.66)	test_majacc_d   0.90 (  0.90)	test_corr_d   0.78 (  0.75)
Test: [  26/  26]	Loss 0.234 (0.311)	test_acc   0.92 (  0.86)	test_minacc   0.74 (  0.66)	test_majacc   0.95 (  0.90)	Loss_d 0.234 (0.311)	test_acc_d   0.92 (  0.86)	test_minacc_d   0.74 (  0.66)	test_majacc_d   0.95 (  0.90)	test_corr_d   0.77 (  0.75)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.80it/s]
Test: [  0/  1]	Loss 1.144 (1.144)	test_acc   0.62 (  0.62)	test_minacc   0.59 (  0.59)	test_majacc   0.84 (  0.84)	Loss_d 1.144 (1.144)	test_acc_d   0.62 (  0.62)	test_minacc_d   0.59 (  0.59)	test_majacc_d   0.84 (  0.84)	test_corr_d   0.07 (  0.07)
Test: [  1/  1]	Loss 1.144 (1.144)	test_acc   0.62 (  0.62)	test_minacc   0.59 (  0.59)	test_majacc   0.84 (  0.84)	Loss_d 1.144 (1.144)	test_acc_d   0.62 (  0.62)	test_minacc_d   0.59 (  0.59)	test_majacc_d   0.84 (  0.84)	test_corr_d   0.07 (  0.07)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/37/checkpoints/model_best.pth
Overall Timing[ 13/  1]	epoch_time 0.0364 (0.0399)	validation_time 0.0003 (0.0008)	train_time 0.0360 (0.0388)
record: (train_acc, test_acc) (0.8620000202655792, 0.6170000433921814)
last accs (train_acc, test_acc) (0.8620000202655792, 0.6170000433921814)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 15.27it/s] 23%|##3       | 6/26 [00:00<00:00, 24.66it/s] 38%|###8      | 10/26 [00:00<00:00, 28.72it/s] 54%|#####3    | 14/26 [00:00<00:00, 30.70it/s] 69%|######9   | 18/26 [00:00<00:00, 32.00it/s] 85%|########4 | 22/26 [00:00<00:00, 32.96it/s]100%|##########| 26/26 [00:00<00:00, 33.72it/s]100%|##########| 26/26 [00:00<00:00, 28.91it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 364 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 365 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 366 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 367 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 368 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 369 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 370 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 371 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 372 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 373 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 374 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 375 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 376 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 377 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 378 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 379 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 380 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 381 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 382 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 383 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 384 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 385 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 386 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 387 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 388 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 389 400
penalty weights 0.0
Epoch: [14][  26/  26]	Loss 0.358 (0.402)	train_nll   0.28 (  0.31)	train_penalty   0.01 (  0.02)	weight_norm   0.08 (  0.09)	train_acc   0.86 (  0.86)	train_minacc   0.40 (  0.31)	train_majacc   0.96 (  0.96)	train_corr   0.00 (  0.00)	l1 17.9528 (17.5274)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.07it/s] 27%|##6       | 7/26 [00:00<00:00, 34.56it/s]                                               27%|##6       | 7/26 [00:00<00:00, 34.56it/s] 50%|#####     | 13/26 [00:00<00:00, 39.99it/s] 73%|#######3  | 19/26 [00:00<00:00, 46.52it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 46.52it/s] 96%|#########6| 25/26 [00:00<00:00, 46.34it/s]100%|##########| 26/26 [00:00<00:00, 38.72it/s]
Test: [   0/  26]	Loss 0.266 (0.266)	test_acc   0.87 (  0.87)	test_minacc   0.61 (  0.61)	test_majacc   0.92 (  0.92)	Loss_d 0.266 (0.266)	test_acc_d   0.87 (  0.87)	test_minacc_d   0.61 (  0.61)	test_majacc_d   0.92 (  0.92)	test_corr_d   0.83 (  0.83)
Test: [  10/  26]	Loss 0.270 (0.300)	test_acc   0.88 (  0.87)	test_minacc   0.66 (  0.56)	test_majacc   0.92 (  0.93)	Loss_d 0.270 (0.300)	test_acc_d   0.88 (  0.87)	test_minacc_d   0.66 (  0.56)	test_majacc_d   0.92 (  0.93)	test_corr_d   0.83 (  0.83)
Test: [  20/  26]	Loss 0.283 (0.302)	test_acc   0.88 (  0.87)	test_minacc   0.52 (  0.55)	test_majacc   0.93 (  0.93)	Loss_d 0.283 (0.302)	test_acc_d   0.88 (  0.87)	test_minacc_d   0.52 (  0.55)	test_majacc_d   0.93 (  0.93)	test_corr_d   0.85 (  0.84)
Test: [  26/  26]	Loss 0.241 (0.296)	test_acc   0.90 (  0.87)	test_minacc   0.58 (  0.55)	test_majacc   0.97 (  0.93)	Loss_d 0.241 (0.296)	test_acc_d   0.90 (  0.87)	test_minacc_d   0.58 (  0.55)	test_majacc_d   0.97 (  0.93)	test_corr_d   0.85 (  0.84)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.55it/s]
Test: [  0/  1]	Loss 1.377 (1.377)	test_acc   0.51 (  0.51)	test_minacc   0.47 (  0.47)	test_majacc   0.89 (  0.89)	Loss_d 1.377 (1.377)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.47 (  0.47)	test_majacc_d   0.89 (  0.89)	test_corr_d   0.41 (  0.41)
Test: [  1/  1]	Loss 1.377 (1.377)	test_acc   0.51 (  0.51)	test_minacc   0.47 (  0.47)	test_majacc   0.89 (  0.89)	Loss_d 1.377 (1.377)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.47 (  0.47)	test_majacc_d   0.89 (  0.89)	test_corr_d   0.41 (  0.41)
Overall Timing[ 14/  1]	epoch_time 0.0387 (0.0398)	validation_time 0.0004 (0.0008)	train_time 0.0382 (0.0388)
record: (train_acc, test_acc) (0.8620000202655792, 0.6170000433921814)
last accs (train_acc, test_acc) (0.8715000246763229, 0.5110000371932983)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.25it/s] 19%|#9        | 5/26 [00:00<00:00, 21.74it/s] 35%|###4      | 9/26 [00:00<00:00, 26.73it/s] 50%|#####     | 13/26 [00:00<00:00, 29.29it/s] 65%|######5   | 17/26 [00:00<00:00, 30.47it/s] 81%|########  | 21/26 [00:00<00:00, 32.34it/s] 96%|#########6| 25/26 [00:00<00:00, 33.23it/s]100%|##########| 26/26 [00:00<00:00, 27.70it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 390 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 391 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 392 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 393 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 394 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 395 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 396 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 397 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 398 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 399 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 400 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 401 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 402 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 403 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 404 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 405 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 406 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 407 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 408 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 409 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 410 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 411 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 412 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 413 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 414 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 415 400
penalty weights 10000.0
Epoch: [15][  26/  26]	Loss 0.009 (0.161)	train_nll   0.53 (  0.44)	train_penalty   0.01 (  0.01)	weight_norm   0.10 (  0.09)	train_acc   0.78 (  0.79)	train_minacc   0.88 (  0.55)	train_majacc   0.76 (  0.83)	train_corr   0.00 (  0.00)	l1 17.9872 (18.1275)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 17.80it/s] 27%|##6       | 7/26 [00:00<00:00, 34.78it/s]                                               27%|##6       | 7/26 [00:00<00:00, 34.78it/s] 50%|#####     | 13/26 [00:00<00:00, 40.01it/s] 73%|#######3  | 19/26 [00:00<00:00, 44.44it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 44.44it/s] 96%|#########6| 25/26 [00:00<00:00, 45.03it/s]100%|##########| 26/26 [00:00<00:00, 38.76it/s]
Test: [   0/  26]	Loss 0.609 (0.609)	test_acc   0.68 (  0.68)	test_minacc   0.86 (  0.86)	test_majacc   0.65 (  0.65)	Loss_d 0.609 (0.609)	test_acc_d   0.68 (  0.68)	test_minacc_d   0.86 (  0.86)	test_majacc_d   0.65 (  0.65)	test_corr_d   0.21 (  0.21)
Test: [  10/  26]	Loss 0.621 (0.602)	test_acc   0.66 (  0.68)	test_minacc   0.81 (  0.78)	test_majacc   0.64 (  0.66)	Loss_d 0.621 (0.602)	test_acc_d   0.66 (  0.68)	test_minacc_d   0.81 (  0.78)	test_majacc_d   0.64 (  0.66)	test_corr_d   0.22 (  0.25)
Test: [  20/  26]	Loss 0.614 (0.606)	test_acc   0.69 (  0.68)	test_minacc   0.77 (  0.78)	test_majacc   0.68 (  0.66)	Loss_d 0.614 (0.606)	test_acc_d   0.69 (  0.68)	test_minacc_d   0.77 (  0.78)	test_majacc_d   0.68 (  0.66)	test_corr_d   0.29 (  0.25)
Test: [  26/  26]	Loss 0.560 (0.605)	test_acc   0.74 (  0.68)	test_minacc   0.88 (  0.78)	test_majacc   0.71 (  0.66)	Loss_d 0.560 (0.605)	test_acc_d   0.74 (  0.68)	test_minacc_d   0.88 (  0.78)	test_majacc_d   0.71 (  0.66)	test_corr_d   0.28 (  0.25)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.58it/s]
Test: [  0/  1]	Loss 0.583 (0.583)	test_acc   0.74 (  0.74)	test_minacc   0.74 (  0.74)	test_majacc   0.71 (  0.71)	Loss_d 0.583 (0.583)	test_acc_d   0.74 (  0.74)	test_minacc_d   0.74 (  0.74)	test_majacc_d   0.71 (  0.71)	test_corr_d  -0.43 ( -0.43)
Test: [  1/  1]	Loss 0.583 (0.583)	test_acc   0.74 (  0.74)	test_minacc   0.74 (  0.74)	test_majacc   0.71 (  0.71)	Loss_d 0.583 (0.583)	test_acc_d   0.74 (  0.74)	test_minacc_d   0.74 (  0.74)	test_majacc_d   0.71 (  0.71)	test_corr_d  -0.43 ( -0.43)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/37/checkpoints/model_best.pth
Overall Timing[ 15/  1]	epoch_time 0.0387 (0.0397)	validation_time 0.0005 (0.0008)	train_time 0.0381 (0.0387)
record: (train_acc, test_acc) (0.6794000270962716, 0.7350000143051147)
last accs (train_acc, test_acc) (0.6794000270962716, 0.7350000143051147)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:00, 23.15it/s] 27%|##6       | 7/26 [00:00<00:00, 27.92it/s] 42%|####2     | 11/26 [00:00<00:00, 30.98it/s] 58%|#####7    | 15/26 [00:00<00:00, 32.43it/s] 73%|#######3  | 19/26 [00:00<00:00, 32.96it/s] 88%|########8 | 23/26 [00:00<00:00, 33.44it/s]100%|##########| 26/26 [00:00<00:00, 30.00it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 416 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 417 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 418 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 419 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 420 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 421 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 422 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 423 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 424 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 425 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 426 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 427 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 428 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 429 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 430 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 431 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 432 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 433 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 434 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 435 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 436 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 437 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 438 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 439 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 440 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 441 400
penalty weights 10000.0
Epoch: [16][  26/  26]	Loss 0.000 (0.001)	train_nll   0.68 (  0.67)	train_penalty   0.00 (  0.00)	weight_norm   0.12 (  0.11)	train_acc   0.58 (  0.59)	train_minacc   0.72 (  0.61)	train_majacc   0.56 (  0.58)	train_corr   0.00 (  0.00)	l1 17.8239 (17.8903)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:00, 28.75it/s] 35%|###4      | 9/26 [00:00<00:00, 39.04it/s]                                               35%|###4      | 9/26 [00:00<00:00, 39.04it/s] 58%|#####7    | 15/26 [00:00<00:00, 46.79it/s]                                                58%|#####7    | 15/26 [00:00<00:00, 46.79it/s] 81%|########  | 21/26 [00:00<00:00, 46.68it/s]100%|##########| 26/26 [00:00<00:00, 41.77it/s]
Test: [   0/  26]	Loss 0.686 (0.686)	test_acc   0.56 (  0.56)	test_minacc   0.64 (  0.64)	test_majacc   0.55 (  0.55)	Loss_d 0.686 (0.686)	test_acc_d   0.56 (  0.56)	test_minacc_d   0.64 (  0.64)	test_majacc_d   0.55 (  0.55)	test_corr_d   0.00 (  0.00)
Test: [  10/  26]	Loss 0.696 (0.686)	test_acc   0.55 (  0.57)	test_minacc   0.55 (  0.65)	test_majacc   0.55 (  0.56)	Loss_d 0.696 (0.686)	test_acc_d   0.55 (  0.57)	test_minacc_d   0.55 (  0.65)	test_majacc_d   0.55 (  0.56)	test_corr_d   0.03 (  0.05)
Test: [  20/  26]	Loss 0.685 (0.686)	test_acc   0.57 (  0.57)	test_minacc   0.65 (  0.64)	test_majacc   0.56 (  0.56)	Loss_d 0.685 (0.686)	test_acc_d   0.57 (  0.57)	test_minacc_d   0.65 (  0.64)	test_majacc_d   0.56 (  0.56)	test_corr_d   0.04 (  0.04)
Test: [  26/  26]	Loss 0.679 (0.687)	test_acc   0.59 (  0.57)	test_minacc   0.70 (  0.64)	test_majacc   0.57 (  0.56)	Loss_d 0.679 (0.687)	test_acc_d   0.59 (  0.57)	test_minacc_d   0.70 (  0.64)	test_majacc_d   0.57 (  0.56)	test_corr_d   0.02 (  0.04)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.68it/s]
Test: [  0/  1]	Loss 0.660 (0.660)	test_acc   0.64 (  0.64)	test_minacc   0.65 (  0.65)	test_majacc   0.56 (  0.56)	Loss_d 0.660 (0.660)	test_acc_d   0.64 (  0.64)	test_minacc_d   0.65 (  0.65)	test_majacc_d   0.56 (  0.56)	test_corr_d  -0.34 ( -0.34)
Test: [  1/  1]	Loss 0.660 (0.660)	test_acc   0.64 (  0.64)	test_minacc   0.65 (  0.65)	test_majacc   0.56 (  0.56)	Loss_d 0.660 (0.660)	test_acc_d   0.64 (  0.64)	test_minacc_d   0.65 (  0.65)	test_majacc_d   0.56 (  0.56)	test_corr_d  -0.34 ( -0.34)
Overall Timing[ 16/  1]	epoch_time 0.0349 (0.0395)	validation_time 0.0004 (0.0008)	train_time 0.0345 (0.0385)
record: (train_acc, test_acc) (0.6794000270962716, 0.7350000143051147)
last accs (train_acc, test_acc) (0.570400007545948, 0.6420000195503235)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.65it/s] 15%|#5        | 4/26 [00:00<00:01, 17.69it/s] 31%|###       | 8/26 [00:00<00:00, 24.76it/s] 46%|####6     | 12/26 [00:00<00:00, 27.89it/s] 62%|######1   | 16/26 [00:00<00:00, 29.43it/s] 73%|#######3  | 19/26 [00:00<00:00, 29.40it/s] 88%|########8 | 23/26 [00:00<00:00, 30.81it/s]100%|##########| 26/26 [00:00<00:00, 26.17it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 442 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 443 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 444 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 445 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 446 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 447 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 448 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 449 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 450 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 451 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 452 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 453 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 454 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 455 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 456 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 457 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 458 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 459 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 460 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 461 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 462 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 463 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 464 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 465 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 466 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 467 400
penalty weights 10000.0
Epoch: [17][  26/  26]	Loss 0.000 (0.000)	train_nll   0.68 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.12 (  0.12)	train_acc   0.59 (  0.58)	train_minacc   0.60 (  0.58)	train_majacc   0.59 (  0.58)	train_corr   0.00 (  0.00)	l1 17.7834 (17.7973)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.94it/s] 27%|##6       | 7/26 [00:00<00:00, 31.78it/s]                                               27%|##6       | 7/26 [00:00<00:00, 31.78it/s] 50%|#####     | 13/26 [00:00<00:00, 38.90it/s] 73%|#######3  | 19/26 [00:00<00:00, 45.69it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 45.69it/s] 96%|#########6| 25/26 [00:00<00:00, 46.57it/s]100%|##########| 26/26 [00:00<00:00, 37.95it/s]
Test: [   0/  26]	Loss 0.683 (0.683)	test_acc   0.58 (  0.58)	test_minacc   0.57 (  0.57)	test_majacc   0.58 (  0.58)	Loss_d 0.683 (0.683)	test_acc_d   0.58 (  0.58)	test_minacc_d   0.57 (  0.57)	test_majacc_d   0.58 (  0.58)	test_corr_d   0.06 (  0.06)
Test: [  10/  26]	Loss 0.690 (0.688)	test_acc   0.58 (  0.58)	test_minacc   0.43 (  0.47)	test_majacc   0.61 (  0.60)	Loss_d 0.690 (0.688)	test_acc_d   0.58 (  0.58)	test_minacc_d   0.43 (  0.47)	test_majacc_d   0.61 (  0.60)	test_corr_d   0.08 (  0.09)
Test: [  20/  26]	Loss 0.687 (0.687)	test_acc   0.59 (  0.58)	test_minacc   0.54 (  0.48)	test_majacc   0.59 (  0.59)	Loss_d 0.687 (0.687)	test_acc_d   0.59 (  0.58)	test_minacc_d   0.54 (  0.48)	test_majacc_d   0.59 (  0.59)	test_corr_d   0.05 (  0.08)
Test: [  26/  26]	Loss 0.686 (0.688)	test_acc   0.58 (  0.58)	test_minacc   0.60 (  0.49)	test_majacc   0.57 (  0.59)	Loss_d 0.686 (0.688)	test_acc_d   0.58 (  0.58)	test_minacc_d   0.60 (  0.49)	test_majacc_d   0.57 (  0.59)	test_corr_d   0.06 (  0.08)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.14it/s]
Test: [  0/  1]	Loss 0.672 (0.672)	test_acc   0.62 (  0.62)	test_minacc   0.62 (  0.62)	test_majacc   0.59 (  0.59)	Loss_d 0.672 (0.672)	test_acc_d   0.62 (  0.62)	test_minacc_d   0.62 (  0.62)	test_majacc_d   0.59 (  0.59)	test_corr_d  -0.25 ( -0.25)
Test: [  1/  1]	Loss 0.672 (0.672)	test_acc   0.62 (  0.62)	test_minacc   0.62 (  0.62)	test_majacc   0.59 (  0.59)	Loss_d 0.672 (0.672)	test_acc_d   0.62 (  0.62)	test_minacc_d   0.62 (  0.62)	test_majacc_d   0.59 (  0.59)	test_corr_d  -0.25 ( -0.25)
Overall Timing[ 17/  1]	epoch_time 0.0390 (0.0394)	validation_time 0.0003 (0.0007)	train_time 0.0386 (0.0385)
record: (train_acc, test_acc) (0.6794000270962716, 0.7350000143051147)
last accs (train_acc, test_acc) (0.5758000092506409, 0.6180000305175781)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.67it/s] 19%|#9        | 5/26 [00:00<00:00, 23.09it/s] 35%|###4      | 9/26 [00:00<00:00, 28.26it/s] 50%|#####     | 13/26 [00:00<00:00, 30.22it/s] 65%|######5   | 17/26 [00:00<00:00, 31.93it/s] 81%|########  | 21/26 [00:00<00:00, 33.09it/s] 96%|#########6| 25/26 [00:00<00:00, 32.93it/s]100%|##########| 26/26 [00:00<00:00, 28.50it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 468 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 469 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 470 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 471 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 472 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 473 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 474 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 475 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 476 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 477 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 478 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 479 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 480 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 481 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 482 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 483 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 484 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 485 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 486 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 487 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 488 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 489 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 490 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 491 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 492 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 493 400
penalty weights 10000.0
Epoch: [18][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.12 (  0.12)	train_acc   0.50 (  0.54)	train_minacc   0.60 (  0.51)	train_majacc   0.48 (  0.55)	train_corr   0.00 (  0.00)	l1 17.7714 (17.7769)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 18.38it/s] 31%|###       | 8/26 [00:00<00:00, 41.57it/s]                                               31%|###       | 8/26 [00:00<00:00, 41.57it/s] 50%|#####     | 13/26 [00:00<00:00, 42.14it/s] 73%|#######3  | 19/26 [00:00<00:00, 47.73it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 47.73it/s] 96%|#########6| 25/26 [00:00<00:00, 48.35it/s]100%|##########| 26/26 [00:00<00:00, 40.61it/s]
Test: [   0/  26]	Loss 0.688 (0.688)	test_acc   0.54 (  0.54)	test_minacc   0.66 (  0.66)	test_majacc   0.52 (  0.52)	Loss_d 0.688 (0.688)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.66 (  0.66)	test_majacc_d   0.52 (  0.52)	test_corr_d  -0.03 ( -0.03)
Test: [  10/  26]	Loss 0.692 (0.691)	test_acc   0.54 (  0.54)	test_minacc   0.50 (  0.52)	test_majacc   0.55 (  0.54)	Loss_d 0.692 (0.691)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.50 (  0.52)	test_majacc_d   0.55 (  0.54)	test_corr_d  -0.01 (  0.01)
Test: [  20/  26]	Loss 0.692 (0.691)	test_acc   0.54 (  0.53)	test_minacc   0.67 (  0.53)	test_majacc   0.52 (  0.53)	Loss_d 0.692 (0.691)	test_acc_d   0.54 (  0.53)	test_minacc_d   0.67 (  0.53)	test_majacc_d   0.52 (  0.53)	test_corr_d  -0.03 ( -0.00)
Test: [  26/  26]	Loss 0.689 (0.691)	test_acc   0.50 (  0.53)	test_minacc   0.60 (  0.53)	test_majacc   0.48 (  0.53)	Loss_d 0.689 (0.691)	test_acc_d   0.50 (  0.53)	test_minacc_d   0.60 (  0.53)	test_majacc_d   0.48 (  0.53)	test_corr_d  -0.03 ( -0.00)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 67.57it/s]
Test: [  0/  1]	Loss 0.668 (0.668)	test_acc   0.67 (  0.67)	test_minacc   0.67 (  0.67)	test_majacc   0.58 (  0.58)	Loss_d 0.668 (0.668)	test_acc_d   0.67 (  0.67)	test_minacc_d   0.67 (  0.67)	test_majacc_d   0.58 (  0.58)	test_corr_d  -0.36 ( -0.36)
Test: [  1/  1]	Loss 0.668 (0.668)	test_acc   0.67 (  0.67)	test_minacc   0.67 (  0.67)	test_majacc   0.58 (  0.58)	Loss_d 0.668 (0.668)	test_acc_d   0.67 (  0.67)	test_minacc_d   0.67 (  0.67)	test_majacc_d   0.58 (  0.58)	test_corr_d  -0.36 ( -0.36)
Overall Timing[ 18/  1]	epoch_time 0.0373 (0.0393)	validation_time 0.0004 (0.0007)	train_time 0.0368 (0.0384)
record: (train_acc, test_acc) (0.6794000270962716, 0.7350000143051147)
last accs (train_acc, test_acc) (0.5320000166893005, 0.6650000214576721)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.51it/s] 19%|#9        | 5/26 [00:00<00:01, 18.55it/s] 35%|###4      | 9/26 [00:00<00:00, 24.80it/s] 50%|#####     | 13/26 [00:00<00:00, 28.36it/s] 65%|######5   | 17/26 [00:00<00:00, 30.50it/s] 81%|########  | 21/26 [00:00<00:00, 31.91it/s] 96%|#########6| 25/26 [00:00<00:00, 32.14it/s]100%|##########| 26/26 [00:00<00:00, 26.52it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 494 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 495 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 496 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 497 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 498 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 499 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 500 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 501 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 502 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 503 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 504 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 505 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 506 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 507 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 508 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 509 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 510 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 511 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 512 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 513 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 514 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 515 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 516 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 517 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 518 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 519 400
penalty weights 10000.0
Epoch: [19][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.12 (  0.12)	train_acc   0.48 (  0.51)	train_minacc   0.60 (  0.53)	train_majacc   0.45 (  0.51)	train_corr   0.00 (  0.00)	l1 17.7668 (17.7687)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.88it/s] 27%|##6       | 7/26 [00:00<00:00, 29.15it/s]                                               27%|##6       | 7/26 [00:00<00:00, 29.15it/s] 50%|#####     | 13/26 [00:00<00:00, 37.33it/s] 73%|#######3  | 19/26 [00:00<00:00, 44.47it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 44.47it/s] 96%|#########6| 25/26 [00:00<00:00, 46.08it/s]100%|##########| 26/26 [00:00<00:00, 36.84it/s]
Test: [   0/  26]	Loss 0.689 (0.689)	test_acc   0.52 (  0.52)	test_minacc   0.62 (  0.62)	test_majacc   0.51 (  0.51)	Loss_d 0.689 (0.689)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.62 (  0.62)	test_majacc_d   0.51 (  0.51)	test_corr_d  -0.01 ( -0.01)
Test: [  10/  26]	Loss 0.692 (0.692)	test_acc   0.51 (  0.50)	test_minacc   0.52 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.692 (0.692)	test_acc_d   0.51 (  0.50)	test_minacc_d   0.52 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d   0.00 (  0.03)
Test: [  20/  26]	Loss 0.693 (0.692)	test_acc   0.50 (  0.50)	test_minacc   0.65 (  0.52)	test_majacc   0.48 (  0.50)	Loss_d 0.693 (0.692)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.65 (  0.52)	test_majacc_d   0.48 (  0.50)	test_corr_d  -0.02 (  0.02)
Test: [  26/  26]	Loss 0.692 (0.692)	test_acc   0.48 (  0.50)	test_minacc   0.60 (  0.53)	test_majacc   0.45 (  0.49)	Loss_d 0.692 (0.692)	test_acc_d   0.48 (  0.50)	test_minacc_d   0.60 (  0.53)	test_majacc_d   0.45 (  0.49)	test_corr_d  -0.02 (  0.01)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.92it/s]
Test: [  0/  1]	Loss 0.673 (0.673)	test_acc   0.66 (  0.66)	test_minacc   0.66 (  0.66)	test_majacc   0.63 (  0.63)	Loss_d 0.673 (0.673)	test_acc_d   0.66 (  0.66)	test_minacc_d   0.66 (  0.66)	test_majacc_d   0.63 (  0.63)	test_corr_d  -0.35 ( -0.35)
Test: [  1/  1]	Loss 0.673 (0.673)	test_acc   0.66 (  0.66)	test_minacc   0.66 (  0.66)	test_majacc   0.63 (  0.63)	Loss_d 0.673 (0.673)	test_acc_d   0.66 (  0.66)	test_minacc_d   0.66 (  0.66)	test_majacc_d   0.63 (  0.63)	test_corr_d  -0.35 ( -0.35)
Overall Timing[ 19/  1]	epoch_time 0.0367 (0.0392)	validation_time 0.0003 (0.0007)	train_time 0.0364 (0.0383)
record: (train_acc, test_acc) (0.6794000270962716, 0.7350000143051147)
last accs (train_acc, test_acc) (0.49950001072883604, 0.6580000519752502)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02, 10.00it/s] 19%|#9        | 5/26 [00:00<00:00, 24.42it/s] 35%|###4      | 9/26 [00:00<00:00, 28.59it/s] 50%|#####     | 13/26 [00:00<00:00, 31.18it/s] 65%|######5   | 17/26 [00:00<00:00, 32.59it/s] 81%|########  | 21/26 [00:00<00:00, 33.77it/s] 96%|#########6| 25/26 [00:00<00:00, 34.32it/s]100%|##########| 26/26 [00:00<00:00, 29.58it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 520 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 521 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 522 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 523 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 524 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 525 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 526 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 527 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 528 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 529 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 530 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 531 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 532 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 533 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 534 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 535 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 536 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 537 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 538 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 539 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 540 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 541 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 542 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 543 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 544 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 545 400
penalty weights 10000.0
Epoch: [20][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.12 (  0.12)	train_acc   0.48 (  0.50)	train_minacc   0.63 (  0.54)	train_majacc   0.45 (  0.49)	train_corr   0.00 (  0.00)	l1 17.7644 (17.7655)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.98it/s] 27%|##6       | 7/26 [00:00<00:00, 30.19it/s]                                               27%|##6       | 7/26 [00:00<00:00, 30.19it/s] 50%|#####     | 13/26 [00:00<00:00, 38.38it/s] 73%|#######3  | 19/26 [00:00<00:00, 45.45it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 45.45it/s] 96%|#########6| 25/26 [00:00<00:00, 46.37it/s]100%|##########| 26/26 [00:00<00:00, 37.59it/s]
Test: [   0/  26]	Loss 0.690 (0.690)	test_acc   0.53 (  0.53)	test_minacc   0.68 (  0.68)	test_majacc   0.51 (  0.51)	Loss_d 0.690 (0.690)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.68 (  0.68)	test_majacc_d   0.51 (  0.51)	test_corr_d  -0.03 ( -0.03)
Test: [  10/  26]	Loss 0.692 (0.692)	test_acc   0.53 (  0.50)	test_minacc   0.59 (  0.51)	test_majacc   0.52 (  0.50)	Loss_d 0.692 (0.692)	test_acc_d   0.53 (  0.50)	test_minacc_d   0.59 (  0.51)	test_majacc_d   0.52 (  0.50)	test_corr_d  -0.01 (  0.01)
Test: [  20/  26]	Loss 0.693 (0.692)	test_acc   0.51 (  0.50)	test_minacc   0.69 (  0.54)	test_majacc   0.49 (  0.50)	Loss_d 0.693 (0.692)	test_acc_d   0.51 (  0.50)	test_minacc_d   0.69 (  0.54)	test_majacc_d   0.49 (  0.50)	test_corr_d  -0.03 (  0.00)
Test: [  26/  26]	Loss 0.693 (0.692)	test_acc   0.48 (  0.50)	test_minacc   0.63 (  0.54)	test_majacc   0.45 (  0.50)	Loss_d 0.693 (0.692)	test_acc_d   0.48 (  0.50)	test_minacc_d   0.63 (  0.54)	test_majacc_d   0.45 (  0.50)	test_corr_d  -0.04 ( -0.00)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 64.59it/s]
Test: [  0/  1]	Loss 0.673 (0.673)	test_acc   0.71 (  0.71)	test_minacc   0.72 (  0.72)	test_majacc   0.62 (  0.62)	Loss_d 0.673 (0.673)	test_acc_d   0.71 (  0.71)	test_minacc_d   0.72 (  0.72)	test_majacc_d   0.62 (  0.62)	test_corr_d  -0.40 ( -0.40)
Test: [  1/  1]	Loss 0.673 (0.673)	test_acc   0.71 (  0.71)	test_minacc   0.72 (  0.72)	test_majacc   0.62 (  0.62)	Loss_d 0.673 (0.673)	test_acc_d   0.71 (  0.71)	test_minacc_d   0.72 (  0.72)	test_majacc_d   0.62 (  0.62)	test_corr_d  -0.40 ( -0.40)
Overall Timing[ 20/  1]	epoch_time 0.0361 (0.0390)	validation_time 0.0003 (0.0007)	train_time 0.0357 (0.0382)
record: (train_acc, test_acc) (0.6794000270962716, 0.7350000143051147)
last accs (train_acc, test_acc) (0.5025000121295452, 0.7070000171661377)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.36it/s] 19%|#9        | 5/26 [00:00<00:01, 19.88it/s] 35%|###4      | 9/26 [00:00<00:00, 25.69it/s] 50%|#####     | 13/26 [00:00<00:00, 29.40it/s] 65%|######5   | 17/26 [00:00<00:00, 31.71it/s] 81%|########  | 21/26 [00:00<00:00, 33.25it/s] 96%|#########6| 25/26 [00:00<00:00, 33.54it/s]100%|##########| 26/26 [00:00<00:00, 27.82it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 546 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 547 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 548 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 549 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 550 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 551 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 552 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 553 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 554 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 555 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 556 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 557 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 558 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 559 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 560 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 561 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 562 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 563 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 564 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 565 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 566 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 567 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 568 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 569 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 570 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 571 400
penalty weights 10000.0
Epoch: [21][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.12 (  0.12)	train_acc   0.50 (  0.50)	train_minacc   0.60 (  0.55)	train_majacc   0.48 (  0.49)	train_corr   0.00 (  0.00)	l1 17.7630 (17.7637)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 19.82it/s] 31%|###       | 8/26 [00:00<00:00, 41.01it/s]                                               31%|###       | 8/26 [00:00<00:00, 41.01it/s] 50%|#####     | 13/26 [00:00<00:00, 41.43it/s] 73%|#######3  | 19/26 [00:00<00:00, 46.84it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 46.84it/s] 96%|#########6| 25/26 [00:00<00:00, 47.49it/s]100%|##########| 26/26 [00:00<00:00, 41.03it/s]
Test: [   0/  26]	Loss 0.691 (0.691)	test_acc   0.53 (  0.53)	test_minacc   0.70 (  0.70)	test_majacc   0.50 (  0.50)	Loss_d 0.691 (0.691)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.70 (  0.70)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.05 ( -0.05)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.52 (  0.50)	test_minacc   0.57 (  0.51)	test_majacc   0.51 (  0.49)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.50)	test_minacc_d   0.57 (  0.51)	test_majacc_d   0.51 (  0.49)	test_corr_d  -0.03 ( -0.00)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.50 (  0.50)	test_minacc   0.69 (  0.54)	test_majacc   0.48 (  0.49)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.69 (  0.54)	test_majacc_d   0.48 (  0.49)	test_corr_d  -0.04 ( -0.01)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.49 (  0.50)	test_minacc   0.60 (  0.55)	test_majacc   0.47 (  0.49)	Loss_d 0.693 (0.693)	test_acc_d   0.49 (  0.50)	test_minacc_d   0.60 (  0.55)	test_majacc_d   0.47 (  0.49)	test_corr_d  -0.06 ( -0.01)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 65.96it/s]
Test: [  0/  1]	Loss 0.674 (0.674)	test_acc   0.73 (  0.73)	test_minacc   0.75 (  0.75)	test_majacc   0.60 (  0.60)	Loss_d 0.674 (0.674)	test_acc_d   0.73 (  0.73)	test_minacc_d   0.75 (  0.75)	test_majacc_d   0.60 (  0.60)	test_corr_d  -0.43 ( -0.43)
Test: [  1/  1]	Loss 0.674 (0.674)	test_acc   0.73 (  0.73)	test_minacc   0.75 (  0.75)	test_majacc   0.60 (  0.60)	Loss_d 0.674 (0.674)	test_acc_d   0.73 (  0.73)	test_minacc_d   0.75 (  0.75)	test_majacc_d   0.60 (  0.60)	test_corr_d  -0.43 ( -0.43)
Overall Timing[ 21/  1]	epoch_time 0.0370 (0.0389)	validation_time 0.0004 (0.0007)	train_time 0.0366 (0.0381)
record: (train_acc, test_acc) (0.6794000270962716, 0.7350000143051147)
last accs (train_acc, test_acc) (0.49990001195669176, 0.7310000061988831)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.43it/s] 19%|#9        | 5/26 [00:00<00:01, 20.57it/s] 35%|###4      | 9/26 [00:00<00:00, 25.52it/s] 50%|#####     | 13/26 [00:00<00:00, 28.25it/s] 65%|######5   | 17/26 [00:00<00:00, 29.85it/s] 81%|########  | 21/26 [00:00<00:00, 31.18it/s] 96%|#########6| 25/26 [00:00<00:00, 32.37it/s]100%|##########| 26/26 [00:00<00:00, 26.79it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 572 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 573 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 574 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 575 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 576 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 577 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 578 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 579 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 580 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 581 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 582 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 583 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 584 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 585 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 586 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 587 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 588 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 589 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 590 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 591 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 592 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 593 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 594 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 595 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 596 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 597 400
penalty weights 10000.0
Epoch: [22][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.12 (  0.12)	train_acc   0.50 (  0.50)	train_minacc   0.60 (  0.55)	train_majacc   0.48 (  0.49)	train_corr   0.00 (  0.00)	l1 17.7619 (17.7624)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.90it/s] 19%|#9        | 5/26 [00:00<00:00, 24.07it/s]                                               19%|#9        | 5/26 [00:00<00:00, 24.07it/s] 42%|####2     | 11/26 [00:00<00:00, 38.20it/s] 62%|######1   | 16/26 [00:00<00:00, 41.17it/s]                                                62%|######1   | 16/26 [00:00<00:00, 41.17it/s] 85%|########4 | 22/26 [00:00<00:00, 47.37it/s]100%|##########| 26/26 [00:00<00:00, 37.58it/s]
Test: [   0/  26]	Loss 0.692 (0.692)	test_acc   0.53 (  0.53)	test_minacc   0.71 (  0.71)	test_majacc   0.50 (  0.50)	Loss_d 0.692 (0.692)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.71 (  0.71)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.06 ( -0.06)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.51 (  0.49)	test_minacc   0.59 (  0.52)	test_majacc   0.50 (  0.49)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.49)	test_minacc_d   0.59 (  0.52)	test_majacc_d   0.50 (  0.49)	test_corr_d  -0.04 ( -0.02)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.48 (  0.50)	test_minacc   0.69 (  0.55)	test_majacc   0.46 (  0.49)	Loss_d 0.693 (0.693)	test_acc_d   0.48 (  0.50)	test_minacc_d   0.69 (  0.55)	test_majacc_d   0.46 (  0.49)	test_corr_d  -0.06 ( -0.02)
Test: [  26/  26]	Loss 0.694 (0.693)	test_acc   0.49 (  0.50)	test_minacc   0.58 (  0.56)	test_majacc   0.47 (  0.48)	Loss_d 0.694 (0.693)	test_acc_d   0.49 (  0.50)	test_minacc_d   0.58 (  0.56)	test_majacc_d   0.47 (  0.48)	test_corr_d  -0.08 ( -0.03)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.76it/s]
Test: [  0/  1]	Loss 0.675 (0.675)	test_acc   0.74 (  0.74)	test_minacc   0.75 (  0.75)	test_majacc   0.60 (  0.60)	Loss_d 0.675 (0.675)	test_acc_d   0.74 (  0.74)	test_minacc_d   0.75 (  0.75)	test_majacc_d   0.60 (  0.60)	test_corr_d  -0.46 ( -0.46)
Test: [  1/  1]	Loss 0.675 (0.675)	test_acc   0.74 (  0.74)	test_minacc   0.75 (  0.75)	test_majacc   0.60 (  0.60)	Loss_d 0.675 (0.675)	test_acc_d   0.74 (  0.74)	test_minacc_d   0.75 (  0.75)	test_majacc_d   0.60 (  0.60)	test_corr_d  -0.46 ( -0.46)
Overall Timing[ 22/  1]	epoch_time 0.0379 (0.0389)	validation_time 0.0004 (0.0007)	train_time 0.0375 (0.0381)
record: (train_acc, test_acc) (0.6794000270962716, 0.7350000143051147)
last accs (train_acc, test_acc) (0.49500000992417337, 0.7360000610351562)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.53it/s] 19%|#9        | 5/26 [00:00<00:00, 23.37it/s] 31%|###       | 8/26 [00:00<00:00, 24.35it/s] 46%|####6     | 12/26 [00:00<00:00, 28.73it/s] 62%|######1   | 16/26 [00:00<00:00, 31.14it/s] 77%|#######6  | 20/26 [00:00<00:00, 32.06it/s] 92%|#########2| 24/26 [00:00<00:00, 33.00it/s]100%|##########| 26/26 [00:00<00:00, 27.86it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 598 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 599 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 600 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 601 400
penalty weights 10000.0
args.step pgd_anneal_iters 601 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 602 400
penalty weights 10000.0
args.step pgd_anneal_iters 602 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 603 400
penalty weights 10000.0
args.step pgd_anneal_iters 603 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 604 400
penalty weights 10000.0
args.step pgd_anneal_iters 604 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 605 400
penalty weights 10000.0
args.step pgd_anneal_iters 605 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 606 400
penalty weights 10000.0
args.step pgd_anneal_iters 606 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 607 400
penalty weights 10000.0
args.step pgd_anneal_iters 607 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 608 400
penalty weights 10000.0
args.step pgd_anneal_iters 608 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 609 400
penalty weights 10000.0
args.step pgd_anneal_iters 609 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 610 400
penalty weights 10000.0
args.step pgd_anneal_iters 610 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 611 400
penalty weights 10000.0
args.step pgd_anneal_iters 611 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 612 400
penalty weights 10000.0
args.step pgd_anneal_iters 612 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 613 400
penalty weights 10000.0
args.step pgd_anneal_iters 613 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 614 400
penalty weights 10000.0
args.step pgd_anneal_iters 614 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 615 400
penalty weights 10000.0
args.step pgd_anneal_iters 615 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 616 400
penalty weights 10000.0
args.step pgd_anneal_iters 616 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 617 400
penalty weights 10000.0
args.step pgd_anneal_iters 617 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 618 400
penalty weights 10000.0
args.step pgd_anneal_iters 618 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 619 400
penalty weights 10000.0
args.step pgd_anneal_iters 619 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 620 400
penalty weights 10000.0
args.step pgd_anneal_iters 620 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 621 400
penalty weights 10000.0
args.step pgd_anneal_iters 621 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 622 400
penalty weights 10000.0
args.step pgd_anneal_iters 622 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 623 400
penalty weights 10000.0
args.step pgd_anneal_iters 623 600
dim_v 512
Epoch: [23][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.12 (  0.12)	train_acc   0.48 (  0.51)	train_minacc   0.58 (  0.55)	train_majacc   0.46 (  0.50)	train_corr   0.00 (  0.00)	l1 17.7611 (17.7615)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.28it/s] 27%|##6       | 7/26 [00:00<00:00, 36.15it/s]                                               27%|##6       | 7/26 [00:00<00:00, 36.15it/s] 50%|#####     | 13/26 [00:00<00:00, 40.45it/s] 73%|#######3  | 19/26 [00:00<00:00, 47.18it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 47.18it/s] 96%|#########6| 25/26 [00:00<00:00, 47.66it/s]100%|##########| 26/26 [00:00<00:00, 39.56it/s]
Test: [   0/  26]	Loss 0.692 (0.692)	test_acc   0.53 (  0.53)	test_minacc   0.71 (  0.71)	test_majacc   0.49 (  0.49)	Loss_d 0.692 (0.692)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.71 (  0.71)	test_majacc_d   0.49 (  0.49)	test_corr_d  -0.08 ( -0.08)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.50 (  0.49)	test_minacc   0.60 (  0.52)	test_majacc   0.48 (  0.49)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.49)	test_minacc_d   0.60 (  0.52)	test_majacc_d   0.48 (  0.49)	test_corr_d  -0.06 ( -0.03)
Test: [  20/  26]	Loss 0.694 (0.693)	test_acc   0.48 (  0.49)	test_minacc   0.71 (  0.55)	test_majacc   0.45 (  0.48)	Loss_d 0.694 (0.693)	test_acc_d   0.48 (  0.49)	test_minacc_d   0.71 (  0.55)	test_majacc_d   0.45 (  0.48)	test_corr_d  -0.07 ( -0.04)
Test: [  26/  26]	Loss 0.694 (0.693)	test_acc   0.48 (  0.49)	test_minacc   0.58 (  0.56)	test_majacc   0.46 (  0.48)	Loss_d 0.694 (0.693)	test_acc_d   0.48 (  0.49)	test_minacc_d   0.58 (  0.56)	test_majacc_d   0.46 (  0.48)	test_corr_d  -0.10 ( -0.04)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.85it/s]
Test: [  0/  1]	Loss 0.675 (0.675)	test_acc   0.74 (  0.74)	test_minacc   0.76 (  0.76)	test_majacc   0.62 (  0.62)	Loss_d 0.675 (0.675)	test_acc_d   0.74 (  0.74)	test_minacc_d   0.76 (  0.76)	test_majacc_d   0.62 (  0.62)	test_corr_d  -0.48 ( -0.48)
Test: [  1/  1]	Loss 0.675 (0.675)	test_acc   0.74 (  0.74)	test_minacc   0.76 (  0.76)	test_majacc   0.62 (  0.62)	Loss_d 0.675 (0.675)	test_acc_d   0.74 (  0.74)	test_minacc_d   0.76 (  0.76)	test_majacc_d   0.62 (  0.62)	test_corr_d  -0.48 ( -0.48)
Overall Timing[ 23/  1]	epoch_time 0.0376 (0.0388)	validation_time 0.0004 (0.0007)	train_time 0.0372 (0.0380)
record: (train_acc, test_acc) (0.6794000270962716, 0.7350000143051147)
last accs (train_acc, test_acc) (0.4944000077545643, 0.7430000305175781)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.01it/s] 19%|#9        | 5/26 [00:00<00:00, 21.32it/s] 35%|###4      | 9/26 [00:00<00:00, 26.34it/s] 50%|#####     | 13/26 [00:00<00:00, 28.43it/s] 65%|######5   | 17/26 [00:00<00:00, 30.79it/s] 81%|########  | 21/26 [00:00<00:00, 32.34it/s] 96%|#########6| 25/26 [00:00<00:00, 33.59it/s]100%|##########| 26/26 [00:00<00:00, 27.81it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 624 400
penalty weights 10000.0
args.step pgd_anneal_iters 624 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 625 400
penalty weights 10000.0
args.step pgd_anneal_iters 625 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 626 400
penalty weights 10000.0
args.step pgd_anneal_iters 626 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 627 400
penalty weights 10000.0
args.step pgd_anneal_iters 627 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 628 400
penalty weights 10000.0
args.step pgd_anneal_iters 628 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 629 400
penalty weights 10000.0
args.step pgd_anneal_iters 629 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 630 400
penalty weights 10000.0
args.step pgd_anneal_iters 630 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 631 400
penalty weights 10000.0
args.step pgd_anneal_iters 631 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 632 400
penalty weights 10000.0
args.step pgd_anneal_iters 632 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 633 400
penalty weights 10000.0
args.step pgd_anneal_iters 633 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 634 400
penalty weights 10000.0
args.step pgd_anneal_iters 634 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 635 400
penalty weights 10000.0
args.step pgd_anneal_iters 635 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 636 400
penalty weights 10000.0
args.step pgd_anneal_iters 636 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 637 400
penalty weights 10000.0
args.step pgd_anneal_iters 637 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 638 400
penalty weights 10000.0
args.step pgd_anneal_iters 638 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 639 400
penalty weights 10000.0
args.step pgd_anneal_iters 639 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 640 400
penalty weights 10000.0
args.step pgd_anneal_iters 640 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 641 400
penalty weights 10000.0
args.step pgd_anneal_iters 641 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 642 400
penalty weights 10000.0
args.step pgd_anneal_iters 642 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 643 400
penalty weights 10000.0
args.step pgd_anneal_iters 643 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 644 400
penalty weights 10000.0
args.step pgd_anneal_iters 644 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 645 400
penalty weights 10000.0
args.step pgd_anneal_iters 645 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 646 400
penalty weights 10000.0
args.step pgd_anneal_iters 646 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 647 400
penalty weights 10000.0
args.step pgd_anneal_iters 647 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 648 400
penalty weights 10000.0
args.step pgd_anneal_iters 648 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 649 400
penalty weights 10000.0
args.step pgd_anneal_iters 649 600
dim_v 512
Epoch: [24][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.12 (  0.12)	train_acc   0.46 (  0.50)	train_minacc   0.56 (  0.54)	train_majacc   0.43 (  0.50)	train_corr   0.00 (  0.00)	l1 17.7605 (17.7608)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 17.31it/s] 31%|###       | 8/26 [00:00<00:00, 40.50it/s]                                               31%|###       | 8/26 [00:00<00:00, 40.50it/s] 50%|#####     | 13/26 [00:00<00:00, 44.47it/s] 73%|#######3  | 19/26 [00:00<00:00, 49.23it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 49.23it/s] 96%|#########6| 25/26 [00:00<00:00, 50.04it/s]100%|##########| 26/26 [00:00<00:00, 42.20it/s]
Test: [   0/  26]	Loss 0.692 (0.692)	test_acc   0.51 (  0.51)	test_minacc   0.70 (  0.70)	test_majacc   0.48 (  0.48)	Loss_d 0.692 (0.692)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.70 (  0.70)	test_majacc_d   0.48 (  0.48)	test_corr_d  -0.10 ( -0.10)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.49 (  0.48)	test_minacc   0.62 (  0.54)	test_majacc   0.47 (  0.47)	Loss_d 0.693 (0.693)	test_acc_d   0.49 (  0.48)	test_minacc_d   0.62 (  0.54)	test_majacc_d   0.47 (  0.47)	test_corr_d  -0.08 ( -0.05)
Test: [  20/  26]	Loss 0.694 (0.694)	test_acc   0.47 (  0.48)	test_minacc   0.65 (  0.56)	test_majacc   0.45 (  0.47)	Loss_d 0.694 (0.694)	test_acc_d   0.47 (  0.48)	test_minacc_d   0.65 (  0.56)	test_majacc_d   0.45 (  0.47)	test_corr_d  -0.09 ( -0.06)
Test: [  26/  26]	Loss 0.694 (0.694)	test_acc   0.45 (  0.48)	test_minacc   0.56 (  0.55)	test_majacc   0.43 (  0.47)	Loss_d 0.694 (0.694)	test_acc_d   0.45 (  0.48)	test_minacc_d   0.56 (  0.55)	test_majacc_d   0.43 (  0.47)	test_corr_d  -0.12 ( -0.06)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 56.44it/s]
Test: [  0/  1]	Loss 0.675 (0.675)	test_acc   0.75 (  0.75)	test_minacc   0.77 (  0.77)	test_majacc   0.59 (  0.59)	Loss_d 0.675 (0.675)	test_acc_d   0.75 (  0.75)	test_minacc_d   0.77 (  0.77)	test_majacc_d   0.59 (  0.59)	test_corr_d  -0.50 ( -0.50)
Test: [  1/  1]	Loss 0.675 (0.675)	test_acc   0.75 (  0.75)	test_minacc   0.77 (  0.77)	test_majacc   0.59 (  0.59)	Loss_d 0.675 (0.675)	test_acc_d   0.75 (  0.75)	test_minacc_d   0.77 (  0.77)	test_majacc_d   0.59 (  0.59)	test_corr_d  -0.50 ( -0.50)
Overall Timing[ 24/  1]	epoch_time 0.0364 (0.0387)	validation_time 0.0004 (0.0006)	train_time 0.0360 (0.0380)
record: (train_acc, test_acc) (0.6794000270962716, 0.7350000143051147)
last accs (train_acc, test_acc) (0.4832000094056129, 0.7500000596046448)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.16it/s] 19%|#9        | 5/26 [00:00<00:00, 21.27it/s] 35%|###4      | 9/26 [00:00<00:00, 26.80it/s] 50%|#####     | 13/26 [00:00<00:00, 29.35it/s] 65%|######5   | 17/26 [00:00<00:00, 30.89it/s] 81%|########  | 21/26 [00:00<00:00, 32.29it/s] 96%|#########6| 25/26 [00:00<00:00, 32.44it/s]100%|##########| 26/26 [00:00<00:00, 27.42it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 650 400
penalty weights 10000.0
args.step pgd_anneal_iters 650 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 651 400
penalty weights 10000.0
args.step pgd_anneal_iters 651 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 652 400
penalty weights 10000.0
args.step pgd_anneal_iters 652 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 653 400
penalty weights 10000.0
args.step pgd_anneal_iters 653 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 654 400
penalty weights 10000.0
args.step pgd_anneal_iters 654 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 655 400
penalty weights 10000.0
args.step pgd_anneal_iters 655 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 656 400
penalty weights 10000.0
args.step pgd_anneal_iters 656 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 657 400
penalty weights 10000.0
args.step pgd_anneal_iters 657 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 658 400
penalty weights 10000.0
args.step pgd_anneal_iters 658 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 659 400
penalty weights 10000.0
args.step pgd_anneal_iters 659 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 660 400
penalty weights 10000.0
args.step pgd_anneal_iters 660 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 661 400
penalty weights 10000.0
args.step pgd_anneal_iters 661 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 662 400
penalty weights 10000.0
args.step pgd_anneal_iters 662 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 663 400
penalty weights 10000.0
args.step pgd_anneal_iters 663 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 664 400
penalty weights 10000.0
args.step pgd_anneal_iters 664 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 665 400
penalty weights 10000.0
args.step pgd_anneal_iters 665 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 666 400
penalty weights 10000.0
args.step pgd_anneal_iters 666 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 667 400
penalty weights 10000.0
args.step pgd_anneal_iters 667 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 668 400
penalty weights 10000.0
args.step pgd_anneal_iters 668 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 669 400
penalty weights 10000.0
args.step pgd_anneal_iters 669 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 670 400
penalty weights 10000.0
args.step pgd_anneal_iters 670 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 671 400
penalty weights 10000.0
args.step pgd_anneal_iters 671 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 672 400
penalty weights 10000.0
args.step pgd_anneal_iters 672 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 673 400
penalty weights 10000.0
args.step pgd_anneal_iters 673 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 674 400
penalty weights 10000.0
args.step pgd_anneal_iters 674 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 675 400
penalty weights 10000.0
args.step pgd_anneal_iters 675 600
dim_v 512
Epoch: [25][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.12 (  0.12)	train_acc   0.45 (  0.50)	train_minacc   0.49 (  0.53)	train_majacc   0.44 (  0.50)	train_corr   0.00 (  0.00)	l1 17.7600 (17.7602)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 17.37it/s] 31%|###       | 8/26 [00:00<00:00, 39.87it/s]                                               31%|###       | 8/26 [00:00<00:00, 39.87it/s] 50%|#####     | 13/26 [00:00<00:00, 41.45it/s] 73%|#######3  | 19/26 [00:00<00:00, 47.39it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 47.39it/s] 96%|#########6| 25/26 [00:00<00:00, 48.34it/s]100%|##########| 26/26 [00:00<00:00, 41.01it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.49 (  0.49)	test_minacc   0.68 (  0.68)	test_majacc   0.46 (  0.46)	Loss_d 0.693 (0.693)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.68 (  0.68)	test_majacc_d   0.46 (  0.46)	test_corr_d  -0.11 ( -0.11)
Test: [  10/  26]	Loss 0.694 (0.694)	test_acc   0.49 (  0.48)	test_minacc   0.62 (  0.54)	test_majacc   0.47 (  0.46)	Loss_d 0.694 (0.694)	test_acc_d   0.49 (  0.48)	test_minacc_d   0.62 (  0.54)	test_majacc_d   0.47 (  0.46)	test_corr_d  -0.10 ( -0.06)
Test: [  20/  26]	Loss 0.694 (0.694)	test_acc   0.46 (  0.48)	test_minacc   0.65 (  0.55)	test_majacc   0.43 (  0.46)	Loss_d 0.694 (0.694)	test_acc_d   0.46 (  0.48)	test_minacc_d   0.65 (  0.55)	test_majacc_d   0.43 (  0.46)	test_corr_d  -0.11 ( -0.07)
Test: [  26/  26]	Loss 0.695 (0.694)	test_acc   0.44 (  0.47)	test_minacc   0.49 (  0.55)	test_majacc   0.43 (  0.46)	Loss_d 0.695 (0.694)	test_acc_d   0.44 (  0.47)	test_minacc_d   0.49 (  0.55)	test_majacc_d   0.43 (  0.46)	test_corr_d  -0.14 ( -0.07)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.49it/s]
Test: [  0/  1]	Loss 0.676 (0.676)	test_acc   0.75 (  0.75)	test_minacc   0.77 (  0.77)	test_majacc   0.58 (  0.58)	Loss_d 0.676 (0.676)	test_acc_d   0.75 (  0.75)	test_minacc_d   0.77 (  0.77)	test_majacc_d   0.58 (  0.58)	test_corr_d  -0.52 ( -0.52)
Test: [  1/  1]	Loss 0.676 (0.676)	test_acc   0.75 (  0.75)	test_minacc   0.77 (  0.77)	test_majacc   0.58 (  0.58)	Loss_d 0.676 (0.676)	test_acc_d   0.75 (  0.75)	test_minacc_d   0.77 (  0.77)	test_majacc_d   0.58 (  0.58)	test_corr_d  -0.52 ( -0.52)
Overall Timing[ 25/  1]	epoch_time 0.0372 (0.0387)	validation_time 0.0004 (0.0006)	train_time 0.0368 (0.0379)
record: (train_acc, test_acc) (0.6794000270962716, 0.7350000143051147)
last accs (train_acc, test_acc) (0.4746000088751316, 0.7500000596046448)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.18it/s] 19%|#9        | 5/26 [00:00<00:00, 22.68it/s] 35%|###4      | 9/26 [00:00<00:00, 28.38it/s] 50%|#####     | 13/26 [00:00<00:00, 31.06it/s] 65%|######5   | 17/26 [00:00<00:00, 32.59it/s] 81%|########  | 21/26 [00:00<00:00, 33.60it/s] 96%|#########6| 25/26 [00:00<00:00, 33.70it/s]100%|##########| 26/26 [00:00<00:00, 28.66it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 676 400
penalty weights 10000.0
args.step pgd_anneal_iters 676 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 677 400
penalty weights 10000.0
args.step pgd_anneal_iters 677 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 678 400
penalty weights 10000.0
args.step pgd_anneal_iters 678 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 679 400
penalty weights 10000.0
args.step pgd_anneal_iters 679 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 680 400
penalty weights 10000.0
args.step pgd_anneal_iters 680 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 681 400
penalty weights 10000.0
args.step pgd_anneal_iters 681 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 682 400
penalty weights 10000.0
args.step pgd_anneal_iters 682 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 683 400
penalty weights 10000.0
args.step pgd_anneal_iters 683 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 684 400
penalty weights 10000.0
args.step pgd_anneal_iters 684 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 685 400
penalty weights 10000.0
args.step pgd_anneal_iters 685 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 686 400
penalty weights 10000.0
args.step pgd_anneal_iters 686 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 687 400
penalty weights 10000.0
args.step pgd_anneal_iters 687 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 688 400
penalty weights 10000.0
args.step pgd_anneal_iters 688 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 689 400
penalty weights 10000.0
args.step pgd_anneal_iters 689 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 690 400
penalty weights 10000.0
args.step pgd_anneal_iters 690 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 691 400
penalty weights 10000.0
args.step pgd_anneal_iters 691 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 692 400
penalty weights 10000.0
args.step pgd_anneal_iters 692 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 693 400
penalty weights 10000.0
args.step pgd_anneal_iters 693 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 694 400
penalty weights 10000.0
args.step pgd_anneal_iters 694 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 695 400
penalty weights 10000.0
args.step pgd_anneal_iters 695 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 696 400
penalty weights 10000.0
args.step pgd_anneal_iters 696 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 697 400
penalty weights 10000.0
args.step pgd_anneal_iters 697 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 698 400
penalty weights 10000.0
args.step pgd_anneal_iters 698 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 699 400
penalty weights 10000.0
args.step pgd_anneal_iters 699 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 700 400
penalty weights 10000.0
args.step pgd_anneal_iters 700 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 701 400
penalty weights 10000.0
args.step pgd_anneal_iters 701 600
dim_v 512
Epoch: [26][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.12 (  0.12)	train_acc   0.44 (  0.50)	train_minacc   0.49 (  0.52)	train_majacc   0.43 (  0.49)	train_corr   0.00 (  0.00)	l1 17.7595 (17.7597)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.03it/s] 27%|##6       | 7/26 [00:00<00:00, 32.86it/s]                                               27%|##6       | 7/26 [00:00<00:00, 32.86it/s] 50%|#####     | 13/26 [00:00<00:00, 39.16it/s] 73%|#######3  | 19/26 [00:00<00:00, 45.58it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 45.58it/s] 96%|#########6| 25/26 [00:00<00:00, 46.44it/s]100%|##########| 26/26 [00:00<00:00, 38.23it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.48 (  0.48)	test_minacc   0.68 (  0.68)	test_majacc   0.45 (  0.45)	Loss_d 0.693 (0.693)	test_acc_d   0.48 (  0.48)	test_minacc_d   0.68 (  0.68)	test_majacc_d   0.45 (  0.45)	test_corr_d  -0.13 ( -0.13)
Test: [  10/  26]	Loss 0.694 (0.694)	test_acc   0.49 (  0.47)	test_minacc   0.66 (  0.55)	test_majacc   0.46 (  0.46)	Loss_d 0.694 (0.694)	test_acc_d   0.49 (  0.47)	test_minacc_d   0.66 (  0.55)	test_majacc_d   0.46 (  0.46)	test_corr_d  -0.11 ( -0.08)
Test: [  20/  26]	Loss 0.694 (0.694)	test_acc   0.46 (  0.47)	test_minacc   0.65 (  0.55)	test_majacc   0.44 (  0.46)	Loss_d 0.694 (0.694)	test_acc_d   0.46 (  0.47)	test_minacc_d   0.65 (  0.55)	test_majacc_d   0.44 (  0.46)	test_corr_d  -0.12 ( -0.09)
Test: [  26/  26]	Loss 0.695 (0.694)	test_acc   0.43 (  0.47)	test_minacc   0.49 (  0.55)	test_majacc   0.42 (  0.45)	Loss_d 0.695 (0.694)	test_acc_d   0.43 (  0.47)	test_minacc_d   0.49 (  0.55)	test_majacc_d   0.42 (  0.45)	test_corr_d  -0.15 ( -0.09)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 58.56it/s]
Test: [  0/  1]	Loss 0.676 (0.676)	test_acc   0.75 (  0.75)	test_minacc   0.77 (  0.77)	test_majacc   0.58 (  0.58)	Loss_d 0.676 (0.676)	test_acc_d   0.75 (  0.75)	test_minacc_d   0.77 (  0.77)	test_majacc_d   0.58 (  0.58)	test_corr_d  -0.53 ( -0.53)
Test: [  1/  1]	Loss 0.676 (0.676)	test_acc   0.75 (  0.75)	test_minacc   0.77 (  0.77)	test_majacc   0.58 (  0.58)	Loss_d 0.676 (0.676)	test_acc_d   0.75 (  0.75)	test_minacc_d   0.77 (  0.77)	test_majacc_d   0.58 (  0.58)	test_corr_d  -0.53 ( -0.53)
Overall Timing[ 26/  1]	epoch_time 0.0371 (0.0386)	validation_time 0.0003 (0.0006)	train_time 0.0367 (0.0379)
record: (train_acc, test_acc) (0.6794000270962716, 0.7350000143051147)
last accs (train_acc, test_acc) (0.468400006711483, 0.7540000081062317)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.65it/s] 19%|#9        | 5/26 [00:00<00:00, 21.67it/s] 35%|###4      | 9/26 [00:00<00:00, 27.24it/s] 50%|#####     | 13/26 [00:00<00:00, 30.06it/s] 65%|######5   | 17/26 [00:00<00:00, 31.82it/s] 81%|########  | 21/26 [00:00<00:00, 33.04it/s] 96%|#########6| 25/26 [00:00<00:00, 34.02it/s]100%|##########| 26/26 [00:00<00:00, 28.40it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 702 400
penalty weights 10000.0
args.step pgd_anneal_iters 702 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 703 400
penalty weights 10000.0
args.step pgd_anneal_iters 703 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 704 400
penalty weights 10000.0
args.step pgd_anneal_iters 704 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 705 400
penalty weights 10000.0
args.step pgd_anneal_iters 705 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 706 400
penalty weights 10000.0
args.step pgd_anneal_iters 706 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 707 400
penalty weights 10000.0
args.step pgd_anneal_iters 707 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 708 400
penalty weights 10000.0
args.step pgd_anneal_iters 708 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 709 400
penalty weights 10000.0
args.step pgd_anneal_iters 709 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 710 400
penalty weights 10000.0
args.step pgd_anneal_iters 710 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 711 400
penalty weights 10000.0
args.step pgd_anneal_iters 711 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 712 400
penalty weights 10000.0
args.step pgd_anneal_iters 712 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 713 400
penalty weights 10000.0
args.step pgd_anneal_iters 713 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 714 400
penalty weights 10000.0
args.step pgd_anneal_iters 714 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 715 400
penalty weights 10000.0
args.step pgd_anneal_iters 715 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 716 400
penalty weights 10000.0
args.step pgd_anneal_iters 716 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 717 400
penalty weights 10000.0
args.step pgd_anneal_iters 717 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 718 400
penalty weights 10000.0
args.step pgd_anneal_iters 718 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 719 400
penalty weights 10000.0
args.step pgd_anneal_iters 719 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 720 400
penalty weights 10000.0
args.step pgd_anneal_iters 720 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 721 400
penalty weights 10000.0
args.step pgd_anneal_iters 721 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 722 400
penalty weights 10000.0
args.step pgd_anneal_iters 722 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 723 400
penalty weights 10000.0
args.step pgd_anneal_iters 723 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 724 400
penalty weights 10000.0
args.step pgd_anneal_iters 724 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 725 400
penalty weights 10000.0
args.step pgd_anneal_iters 725 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 726 400
penalty weights 10000.0
args.step pgd_anneal_iters 726 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 727 400
penalty weights 10000.0
args.step pgd_anneal_iters 727 600
dim_v 512
Epoch: [27][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.12 (  0.12)	train_acc   0.44 (  0.50)	train_minacc   0.49 (  0.52)	train_majacc   0.43 (  0.49)	train_corr   0.00 (  0.00)	l1 17.7591 (17.7593)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:00, 27.16it/s] 35%|###4      | 9/26 [00:00<00:00, 40.42it/s]                                               35%|###4      | 9/26 [00:00<00:00, 40.42it/s] 58%|#####7    | 15/26 [00:00<00:00, 48.44it/s]                                                58%|#####7    | 15/26 [00:00<00:00, 48.44it/s] 81%|########  | 21/26 [00:00<00:00, 48.41it/s]100%|##########| 26/26 [00:00<00:00, 42.45it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.48 (  0.48)	test_minacc   0.68 (  0.68)	test_majacc   0.45 (  0.45)	Loss_d 0.693 (0.693)	test_acc_d   0.48 (  0.48)	test_minacc_d   0.68 (  0.68)	test_majacc_d   0.45 (  0.45)	test_corr_d  -0.14 ( -0.14)
Test: [  10/  26]	Loss 0.694 (0.694)	test_acc   0.48 (  0.46)	test_minacc   0.67 (  0.54)	test_majacc   0.45 (  0.45)	Loss_d 0.694 (0.694)	test_acc_d   0.48 (  0.46)	test_minacc_d   0.67 (  0.54)	test_majacc_d   0.45 (  0.45)	test_corr_d  -0.12 ( -0.09)
Test: [  20/  26]	Loss 0.694 (0.694)	test_acc   0.43 (  0.46)	test_minacc   0.62 (  0.55)	test_majacc   0.41 (  0.45)	Loss_d 0.694 (0.694)	test_acc_d   0.43 (  0.46)	test_minacc_d   0.62 (  0.55)	test_majacc_d   0.41 (  0.45)	test_corr_d  -0.13 ( -0.09)
Test: [  26/  26]	Loss 0.695 (0.694)	test_acc   0.42 (  0.46)	test_minacc   0.49 (  0.55)	test_majacc   0.40 (  0.44)	Loss_d 0.695 (0.694)	test_acc_d   0.42 (  0.46)	test_minacc_d   0.49 (  0.55)	test_majacc_d   0.40 (  0.44)	test_corr_d  -0.16 ( -0.10)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.14it/s]
Test: [  0/  1]	Loss 0.676 (0.676)	test_acc   0.76 (  0.76)	test_minacc   0.78 (  0.78)	test_majacc   0.58 (  0.58)	Loss_d 0.676 (0.676)	test_acc_d   0.76 (  0.76)	test_minacc_d   0.78 (  0.78)	test_majacc_d   0.58 (  0.58)	test_corr_d  -0.54 ( -0.54)
Test: [  1/  1]	Loss 0.676 (0.676)	test_acc   0.76 (  0.76)	test_minacc   0.78 (  0.78)	test_majacc   0.58 (  0.58)	Loss_d 0.676 (0.676)	test_acc_d   0.76 (  0.76)	test_minacc_d   0.78 (  0.78)	test_majacc_d   0.58 (  0.58)	test_corr_d  -0.54 ( -0.54)
Overall Timing[ 27/  1]	epoch_time 0.0358 (0.0385)	validation_time 0.0004 (0.0006)	train_time 0.0354 (0.0378)
record: (train_acc, test_acc) (0.6794000270962716, 0.7350000143051147)
last accs (train_acc, test_acc) (0.4602000036239624, 0.7560000419616699)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.58it/s] 19%|#9        | 5/26 [00:00<00:00, 22.64it/s] 35%|###4      | 9/26 [00:00<00:00, 27.07it/s] 50%|#####     | 13/26 [00:00<00:00, 28.83it/s] 65%|######5   | 17/26 [00:00<00:00, 29.78it/s] 81%|########  | 21/26 [00:00<00:00, 30.32it/s] 96%|#########6| 25/26 [00:00<00:00, 30.55it/s]100%|##########| 26/26 [00:00<00:00, 26.88it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 728 400
penalty weights 10000.0
args.step pgd_anneal_iters 728 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 729 400
penalty weights 10000.0
args.step pgd_anneal_iters 729 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 730 400
penalty weights 10000.0
args.step pgd_anneal_iters 730 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 731 400
penalty weights 10000.0
args.step pgd_anneal_iters 731 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 732 400
penalty weights 10000.0
args.step pgd_anneal_iters 732 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 733 400
penalty weights 10000.0
args.step pgd_anneal_iters 733 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 734 400
penalty weights 10000.0
args.step pgd_anneal_iters 734 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 735 400
penalty weights 10000.0
args.step pgd_anneal_iters 735 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 736 400
penalty weights 10000.0
args.step pgd_anneal_iters 736 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 737 400
penalty weights 10000.0
args.step pgd_anneal_iters 737 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 738 400
penalty weights 10000.0
args.step pgd_anneal_iters 738 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 739 400
penalty weights 10000.0
args.step pgd_anneal_iters 739 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 740 400
penalty weights 10000.0
args.step pgd_anneal_iters 740 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 741 400
penalty weights 10000.0
args.step pgd_anneal_iters 741 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 742 400
penalty weights 10000.0
args.step pgd_anneal_iters 742 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 743 400
penalty weights 10000.0
args.step pgd_anneal_iters 743 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 744 400
penalty weights 10000.0
args.step pgd_anneal_iters 744 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 745 400
penalty weights 10000.0
args.step pgd_anneal_iters 745 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 746 400
penalty weights 10000.0
args.step pgd_anneal_iters 746 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 747 400
penalty weights 10000.0
args.step pgd_anneal_iters 747 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 748 400
penalty weights 10000.0
args.step pgd_anneal_iters 748 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 749 400
penalty weights 10000.0
args.step pgd_anneal_iters 749 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 750 400
penalty weights 10000.0
args.step pgd_anneal_iters 750 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 751 400
penalty weights 10000.0
args.step pgd_anneal_iters 751 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 752 400
penalty weights 10000.0
args.step pgd_anneal_iters 752 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 753 400
penalty weights 10000.0
args.step pgd_anneal_iters 753 600
dim_v 512
Epoch: [28][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.12 (  0.12)	train_acc   0.42 (  0.50)	train_minacc   0.49 (  0.52)	train_majacc   0.41 (  0.49)	train_corr   0.00 (  0.00)	l1 17.7587 (17.7588)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 17.90it/s] 27%|##6       | 7/26 [00:00<00:00, 34.25it/s]                                               27%|##6       | 7/26 [00:00<00:00, 34.25it/s] 50%|#####     | 13/26 [00:00<00:00, 40.85it/s] 73%|#######3  | 19/26 [00:00<00:00, 46.19it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 46.19it/s] 96%|#########6| 25/26 [00:00<00:00, 46.79it/s]100%|##########| 26/26 [00:00<00:00, 39.65it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.47 (  0.47)	test_minacc   0.68 (  0.68)	test_majacc   0.44 (  0.44)	Loss_d 0.693 (0.693)	test_acc_d   0.47 (  0.47)	test_minacc_d   0.68 (  0.68)	test_majacc_d   0.44 (  0.44)	test_corr_d  -0.14 ( -0.14)
Test: [  10/  26]	Loss 0.694 (0.694)	test_acc   0.48 (  0.46)	test_minacc   0.69 (  0.55)	test_majacc   0.44 (  0.44)	Loss_d 0.694 (0.694)	test_acc_d   0.48 (  0.46)	test_minacc_d   0.69 (  0.55)	test_majacc_d   0.44 (  0.44)	test_corr_d  -0.12 ( -0.10)
Test: [  20/  26]	Loss 0.694 (0.694)	test_acc   0.42 (  0.45)	test_minacc   0.65 (  0.55)	test_majacc   0.39 (  0.44)	Loss_d 0.694 (0.694)	test_acc_d   0.42 (  0.45)	test_minacc_d   0.65 (  0.55)	test_majacc_d   0.39 (  0.44)	test_corr_d  -0.14 ( -0.10)
Test: [  26/  26]	Loss 0.695 (0.694)	test_acc   0.41 (  0.45)	test_minacc   0.49 (  0.55)	test_majacc   0.39 (  0.43)	Loss_d 0.695 (0.694)	test_acc_d   0.41 (  0.45)	test_minacc_d   0.49 (  0.55)	test_majacc_d   0.39 (  0.43)	test_corr_d  -0.16 ( -0.10)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 67.03it/s]
Test: [  0/  1]	Loss 0.676 (0.676)	test_acc   0.76 (  0.76)	test_minacc   0.77 (  0.77)	test_majacc   0.58 (  0.58)	Loss_d 0.676 (0.676)	test_acc_d   0.76 (  0.76)	test_minacc_d   0.77 (  0.77)	test_majacc_d   0.58 (  0.58)	test_corr_d  -0.54 ( -0.54)
Test: [  1/  1]	Loss 0.676 (0.676)	test_acc   0.76 (  0.76)	test_minacc   0.77 (  0.77)	test_majacc   0.58 (  0.58)	Loss_d 0.676 (0.676)	test_acc_d   0.76 (  0.76)	test_minacc_d   0.77 (  0.77)	test_majacc_d   0.58 (  0.58)	test_corr_d  -0.54 ( -0.54)
Overall Timing[ 28/  1]	epoch_time 0.0374 (0.0385)	validation_time 0.0004 (0.0006)	train_time 0.0370 (0.0378)
record: (train_acc, test_acc) (0.6794000270962716, 0.7350000143051147)
last accs (train_acc, test_acc) (0.4518000056147575, 0.7550000548362732)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  6.04it/s] 19%|#9        | 5/26 [00:00<00:01, 19.19it/s] 35%|###4      | 9/26 [00:00<00:00, 25.95it/s] 50%|#####     | 13/26 [00:00<00:00, 29.15it/s] 65%|######5   | 17/26 [00:00<00:00, 30.79it/s] 81%|########  | 21/26 [00:00<00:00, 31.54it/s] 96%|#########6| 25/26 [00:00<00:00, 32.30it/s]100%|##########| 26/26 [00:00<00:00, 26.86it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 754 400
penalty weights 10000.0
args.step pgd_anneal_iters 754 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 755 400
penalty weights 10000.0
args.step pgd_anneal_iters 755 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 756 400
penalty weights 10000.0
args.step pgd_anneal_iters 756 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 757 400
penalty weights 10000.0
args.step pgd_anneal_iters 757 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 758 400
penalty weights 10000.0
args.step pgd_anneal_iters 758 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 759 400
penalty weights 10000.0
args.step pgd_anneal_iters 759 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 760 400
penalty weights 10000.0
args.step pgd_anneal_iters 760 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 761 400
penalty weights 10000.0
args.step pgd_anneal_iters 761 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 762 400
penalty weights 10000.0
args.step pgd_anneal_iters 762 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 763 400
penalty weights 10000.0
args.step pgd_anneal_iters 763 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 764 400
penalty weights 10000.0
args.step pgd_anneal_iters 764 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 765 400
penalty weights 10000.0
args.step pgd_anneal_iters 765 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 766 400
penalty weights 10000.0
args.step pgd_anneal_iters 766 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 767 400
penalty weights 10000.0
args.step pgd_anneal_iters 767 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 768 400
penalty weights 10000.0
args.step pgd_anneal_iters 768 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 769 400
penalty weights 10000.0
args.step pgd_anneal_iters 769 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 770 400
penalty weights 10000.0
args.step pgd_anneal_iters 770 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 771 400
penalty weights 10000.0
args.step pgd_anneal_iters 771 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 772 400
penalty weights 10000.0
args.step pgd_anneal_iters 772 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 773 400
penalty weights 10000.0
args.step pgd_anneal_iters 773 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 774 400
penalty weights 10000.0
args.step pgd_anneal_iters 774 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 775 400
penalty weights 10000.0
args.step pgd_anneal_iters 775 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 776 400
penalty weights 10000.0
args.step pgd_anneal_iters 776 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 777 400
penalty weights 10000.0
args.step pgd_anneal_iters 777 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 778 400
penalty weights 10000.0
args.step pgd_anneal_iters 778 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 779 400
penalty weights 10000.0
args.step pgd_anneal_iters 779 600
dim_v 512
Epoch: [29][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.12 (  0.12)	train_acc   0.41 (  0.49)	train_minacc   0.47 (  0.52)	train_majacc   0.40 (  0.49)	train_corr   0.00 (  0.00)	l1 17.7583 (17.7584)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.21it/s] 19%|#9        | 5/26 [00:00<00:00, 22.29it/s] 38%|###8      | 10/26 [00:00<00:00, 31.84it/s]                                                38%|###8      | 10/26 [00:00<00:00, 31.84it/s] 58%|#####7    | 15/26 [00:00<00:00, 37.59it/s] 77%|#######6  | 20/26 [00:00<00:00, 39.48it/s]                                                77%|#######6  | 20/26 [00:00<00:00, 39.48it/s]100%|##########| 26/26 [00:00<00:00, 45.28it/s]100%|##########| 26/26 [00:00<00:00, 34.50it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.47 (  0.47)	test_minacc   0.70 (  0.70)	test_majacc   0.43 (  0.43)	Loss_d 0.693 (0.693)	test_acc_d   0.47 (  0.47)	test_minacc_d   0.70 (  0.70)	test_majacc_d   0.43 (  0.43)	test_corr_d  -0.14 ( -0.14)
Test: [  10/  26]	Loss 0.694 (0.694)	test_acc   0.46 (  0.45)	test_minacc   0.69 (  0.55)	test_majacc   0.42 (  0.44)	Loss_d 0.694 (0.694)	test_acc_d   0.46 (  0.45)	test_minacc_d   0.69 (  0.55)	test_majacc_d   0.42 (  0.44)	test_corr_d  -0.12 ( -0.10)
Test: [  20/  26]	Loss 0.694 (0.694)	test_acc   0.41 (  0.45)	test_minacc   0.65 (  0.55)	test_majacc   0.37 (  0.44)	Loss_d 0.694 (0.694)	test_acc_d   0.41 (  0.45)	test_minacc_d   0.65 (  0.55)	test_majacc_d   0.37 (  0.44)	test_corr_d  -0.15 ( -0.10)
Test: [  26/  26]	Loss 0.695 (0.694)	test_acc   0.40 (  0.45)	test_minacc   0.47 (  0.55)	test_majacc   0.39 (  0.43)	Loss_d 0.695 (0.694)	test_acc_d   0.40 (  0.45)	test_minacc_d   0.47 (  0.55)	test_majacc_d   0.39 (  0.43)	test_corr_d  -0.16 ( -0.11)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.81it/s]
Test: [  0/  1]	Loss 0.676 (0.676)	test_acc   0.76 (  0.76)	test_minacc   0.78 (  0.78)	test_majacc   0.57 (  0.57)	Loss_d 0.676 (0.676)	test_acc_d   0.76 (  0.76)	test_minacc_d   0.78 (  0.78)	test_majacc_d   0.57 (  0.57)	test_corr_d  -0.55 ( -0.55)
Test: [  1/  1]	Loss 0.676 (0.676)	test_acc   0.76 (  0.76)	test_minacc   0.78 (  0.78)	test_majacc   0.57 (  0.57)	Loss_d 0.676 (0.676)	test_acc_d   0.76 (  0.76)	test_minacc_d   0.78 (  0.78)	test_majacc_d   0.57 (  0.57)	test_corr_d  -0.55 ( -0.55)
Overall Timing[ 29/  1]	epoch_time 0.0386 (0.0385)	validation_time 0.0004 (0.0006)	train_time 0.0382 (0.0378)
record: (train_acc, test_acc) (0.6794000270962716, 0.7350000143051147)
last accs (train_acc, test_acc) (0.4506000054776669, 0.7580000162124634)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.75it/s] 19%|#9        | 5/26 [00:00<00:00, 23.48it/s] 35%|###4      | 9/26 [00:00<00:00, 28.08it/s] 50%|#####     | 13/26 [00:00<00:00, 31.07it/s] 65%|######5   | 17/26 [00:00<00:00, 32.72it/s] 81%|########  | 21/26 [00:00<00:00, 33.57it/s] 96%|#########6| 25/26 [00:00<00:00, 33.58it/s]100%|##########| 26/26 [00:00<00:00, 28.99it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 780 400
penalty weights 10000.0
args.step pgd_anneal_iters 780 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 781 400
penalty weights 10000.0
args.step pgd_anneal_iters 781 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 782 400
penalty weights 10000.0
args.step pgd_anneal_iters 782 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 783 400
penalty weights 10000.0
args.step pgd_anneal_iters 783 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 784 400
penalty weights 10000.0
args.step pgd_anneal_iters 784 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 785 400
penalty weights 10000.0
args.step pgd_anneal_iters 785 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 786 400
penalty weights 10000.0
args.step pgd_anneal_iters 786 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 787 400
penalty weights 10000.0
args.step pgd_anneal_iters 787 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 788 400
penalty weights 10000.0
args.step pgd_anneal_iters 788 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 789 400
penalty weights 10000.0
args.step pgd_anneal_iters 789 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 790 400
penalty weights 10000.0
args.step pgd_anneal_iters 790 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 791 400
penalty weights 10000.0
args.step pgd_anneal_iters 791 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 792 400
penalty weights 10000.0
args.step pgd_anneal_iters 792 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 793 400
penalty weights 10000.0
args.step pgd_anneal_iters 793 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 794 400
penalty weights 10000.0
args.step pgd_anneal_iters 794 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 795 400
penalty weights 10000.0
args.step pgd_anneal_iters 795 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 796 400
penalty weights 10000.0
args.step pgd_anneal_iters 796 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 797 400
penalty weights 10000.0
args.step pgd_anneal_iters 797 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 798 400
penalty weights 10000.0
args.step pgd_anneal_iters 798 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 799 400
penalty weights 10000.0
args.step pgd_anneal_iters 799 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 800 400
penalty weights 10000.0
args.step pgd_anneal_iters 800 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 801 400
penalty weights 10000.0
args.step pgd_anneal_iters 801 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 802 400
penalty weights 10000.0
args.step pgd_anneal_iters 802 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 803 400
penalty weights 10000.0
args.step pgd_anneal_iters 803 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 804 400
penalty weights 10000.0
args.step pgd_anneal_iters 804 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 805 400
penalty weights 10000.0
args.step pgd_anneal_iters 805 600
dim_v 512
Epoch: [30][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.12 (  0.12)	train_acc   0.41 (  0.49)	train_minacc   0.40 (  0.51)	train_majacc   0.42 (  0.49)	train_corr   0.00 (  0.00)	l1 17.7579 (17.7581)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.61it/s] 27%|##6       | 7/26 [00:00<00:00, 29.47it/s]                                               27%|##6       | 7/26 [00:00<00:00, 29.47it/s] 50%|#####     | 13/26 [00:00<00:00, 38.30it/s] 73%|#######3  | 19/26 [00:00<00:00, 45.22it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 45.22it/s] 96%|#########6| 25/26 [00:00<00:00, 46.49it/s]100%|##########| 26/26 [00:00<00:00, 37.04it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.47 (  0.47)	test_minacc   0.70 (  0.70)	test_majacc   0.43 (  0.43)	Loss_d 0.693 (0.693)	test_acc_d   0.47 (  0.47)	test_minacc_d   0.70 (  0.70)	test_majacc_d   0.43 (  0.43)	test_corr_d  -0.15 ( -0.15)
Test: [  10/  26]	Loss 0.694 (0.694)	test_acc   0.46 (  0.45)	test_minacc   0.69 (  0.54)	test_majacc   0.42 (  0.43)	Loss_d 0.694 (0.694)	test_acc_d   0.46 (  0.45)	test_minacc_d   0.69 (  0.54)	test_majacc_d   0.42 (  0.43)	test_corr_d  -0.13 ( -0.10)
Test: [  20/  26]	Loss 0.694 (0.694)	test_acc   0.41 (  0.45)	test_minacc   0.65 (  0.54)	test_majacc   0.38 (  0.43)	Loss_d 0.694 (0.694)	test_acc_d   0.41 (  0.45)	test_minacc_d   0.65 (  0.54)	test_majacc_d   0.38 (  0.43)	test_corr_d  -0.15 ( -0.11)
Test: [  26/  26]	Loss 0.694 (0.694)	test_acc   0.40 (  0.45)	test_minacc   0.42 (  0.54)	test_majacc   0.39 (  0.43)	Loss_d 0.694 (0.694)	test_acc_d   0.40 (  0.45)	test_minacc_d   0.42 (  0.54)	test_majacc_d   0.39 (  0.43)	test_corr_d  -0.16 ( -0.11)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.84it/s]
Test: [  0/  1]	Loss 0.676 (0.676)	test_acc   0.76 (  0.76)	test_minacc   0.78 (  0.78)	test_majacc   0.57 (  0.57)	Loss_d 0.676 (0.676)	test_acc_d   0.76 (  0.76)	test_minacc_d   0.78 (  0.78)	test_majacc_d   0.57 (  0.57)	test_corr_d  -0.55 ( -0.55)
Test: [  1/  1]	Loss 0.676 (0.676)	test_acc   0.76 (  0.76)	test_minacc   0.78 (  0.78)	test_majacc   0.57 (  0.57)	Loss_d 0.676 (0.676)	test_acc_d   0.76 (  0.76)	test_minacc_d   0.78 (  0.78)	test_majacc_d   0.57 (  0.57)	test_corr_d  -0.55 ( -0.55)
Overall Timing[ 30/  1]	epoch_time 0.0364 (0.0384)	validation_time 0.0003 (0.0006)	train_time 0.0361 (0.0377)
record: (train_acc, test_acc) (0.6794000270962716, 0.7350000143051147)
last accs (train_acc, test_acc) (0.44620000723004344, 0.7580000162124634)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.89it/s] 19%|#9        | 5/26 [00:00<00:00, 23.33it/s] 35%|###4      | 9/26 [00:00<00:00, 28.93it/s] 50%|#####     | 13/26 [00:00<00:00, 31.61it/s] 65%|######5   | 17/26 [00:00<00:00, 33.20it/s] 81%|########  | 21/26 [00:00<00:00, 34.27it/s] 96%|#########6| 25/26 [00:00<00:00, 33.92it/s]100%|##########| 26/26 [00:00<00:00, 29.32it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 806 400
penalty weights 10000.0
args.step pgd_anneal_iters 806 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 807 400
penalty weights 10000.0
args.step pgd_anneal_iters 807 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 808 400
penalty weights 10000.0
args.step pgd_anneal_iters 808 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 809 400
penalty weights 10000.0
args.step pgd_anneal_iters 809 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 810 400
penalty weights 10000.0
args.step pgd_anneal_iters 810 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 811 400
penalty weights 10000.0
args.step pgd_anneal_iters 811 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 812 400
penalty weights 10000.0
args.step pgd_anneal_iters 812 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 813 400
penalty weights 10000.0
args.step pgd_anneal_iters 813 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 814 400
penalty weights 10000.0
args.step pgd_anneal_iters 814 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 815 400
penalty weights 10000.0
args.step pgd_anneal_iters 815 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 816 400
penalty weights 10000.0
args.step pgd_anneal_iters 816 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 817 400
penalty weights 10000.0
args.step pgd_anneal_iters 817 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 818 400
penalty weights 10000.0
args.step pgd_anneal_iters 818 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 819 400
penalty weights 10000.0
args.step pgd_anneal_iters 819 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 820 400
penalty weights 10000.0
args.step pgd_anneal_iters 820 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 821 400
penalty weights 10000.0
args.step pgd_anneal_iters 821 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 822 400
penalty weights 10000.0
args.step pgd_anneal_iters 822 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 823 400
penalty weights 10000.0
args.step pgd_anneal_iters 823 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 824 400
penalty weights 10000.0
args.step pgd_anneal_iters 824 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 825 400
penalty weights 10000.0
args.step pgd_anneal_iters 825 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 826 400
penalty weights 10000.0
args.step pgd_anneal_iters 826 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 827 400
penalty weights 10000.0
args.step pgd_anneal_iters 827 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 828 400
penalty weights 10000.0
args.step pgd_anneal_iters 828 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 829 400
penalty weights 10000.0
args.step pgd_anneal_iters 829 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 830 400
penalty weights 10000.0
args.step pgd_anneal_iters 830 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 831 400
penalty weights 10000.0
args.step pgd_anneal_iters 831 600
dim_v 512
Epoch: [31][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.12 (  0.12)	train_acc   0.40 (  0.49)	train_minacc   0.37 (  0.51)	train_majacc   0.41 (  0.49)	train_corr   0.00 (  0.00)	l1 17.7576 (17.7577)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.63it/s] 27%|##6       | 7/26 [00:00<00:00, 38.30it/s]                                               27%|##6       | 7/26 [00:00<00:00, 38.30it/s] 50%|#####     | 13/26 [00:00<00:00, 42.31it/s] 73%|#######3  | 19/26 [00:00<00:00, 47.30it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 47.30it/s] 96%|#########6| 25/26 [00:00<00:00, 46.69it/s]100%|##########| 26/26 [00:00<00:00, 40.52it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.47 (  0.47)	test_minacc   0.68 (  0.68)	test_majacc   0.43 (  0.43)	Loss_d 0.693 (0.693)	test_acc_d   0.47 (  0.47)	test_minacc_d   0.68 (  0.68)	test_majacc_d   0.43 (  0.43)	test_corr_d  -0.15 ( -0.15)
Test: [  10/  26]	Loss 0.694 (0.694)	test_acc   0.46 (  0.45)	test_minacc   0.67 (  0.54)	test_majacc   0.43 (  0.43)	Loss_d 0.694 (0.694)	test_acc_d   0.46 (  0.45)	test_minacc_d   0.67 (  0.54)	test_majacc_d   0.43 (  0.43)	test_corr_d  -0.13 ( -0.10)
Test: [  20/  26]	Loss 0.694 (0.694)	test_acc   0.40 (  0.44)	test_minacc   0.65 (  0.53)	test_majacc   0.37 (  0.43)	Loss_d 0.694 (0.694)	test_acc_d   0.40 (  0.44)	test_minacc_d   0.65 (  0.53)	test_majacc_d   0.37 (  0.43)	test_corr_d  -0.16 ( -0.11)
Test: [  26/  26]	Loss 0.694 (0.694)	test_acc   0.40 (  0.44)	test_minacc   0.40 (  0.54)	test_majacc   0.41 (  0.42)	Loss_d 0.694 (0.694)	test_acc_d   0.40 (  0.44)	test_minacc_d   0.40 (  0.54)	test_majacc_d   0.41 (  0.42)	test_corr_d  -0.16 ( -0.11)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.73it/s]
Test: [  0/  1]	Loss 0.676 (0.676)	test_acc   0.76 (  0.76)	test_minacc   0.78 (  0.78)	test_majacc   0.57 (  0.57)	Loss_d 0.676 (0.676)	test_acc_d   0.76 (  0.76)	test_minacc_d   0.78 (  0.78)	test_majacc_d   0.57 (  0.57)	test_corr_d  -0.55 ( -0.55)
Test: [  1/  1]	Loss 0.676 (0.676)	test_acc   0.76 (  0.76)	test_minacc   0.78 (  0.78)	test_majacc   0.57 (  0.57)	Loss_d 0.676 (0.676)	test_acc_d   0.76 (  0.76)	test_minacc_d   0.78 (  0.78)	test_majacc_d   0.57 (  0.57)	test_corr_d  -0.55 ( -0.55)
Overall Timing[ 31/  1]	epoch_time 0.0387 (0.0384)	validation_time 0.0004 (0.0006)	train_time 0.0382 (0.0377)
record: (train_acc, test_acc) (0.6794000270962716, 0.7350000143051147)
last accs (train_acc, test_acc) (0.4416000048518181, 0.7600000500679016)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.88it/s] 19%|#9        | 5/26 [00:00<00:00, 22.57it/s] 35%|###4      | 9/26 [00:00<00:00, 27.92it/s] 50%|#####     | 13/26 [00:00<00:00, 30.53it/s] 65%|######5   | 17/26 [00:00<00:00, 32.08it/s] 81%|########  | 21/26 [00:00<00:00, 33.20it/s] 96%|#########6| 25/26 [00:00<00:00, 33.81it/s]100%|##########| 26/26 [00:00<00:00, 28.66it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 832 400
penalty weights 10000.0
args.step pgd_anneal_iters 832 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 833 400
penalty weights 10000.0
args.step pgd_anneal_iters 833 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 834 400
penalty weights 10000.0
args.step pgd_anneal_iters 834 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 835 400
penalty weights 10000.0
args.step pgd_anneal_iters 835 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 836 400
penalty weights 10000.0
args.step pgd_anneal_iters 836 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 837 400
penalty weights 10000.0
args.step pgd_anneal_iters 837 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 838 400
penalty weights 10000.0
args.step pgd_anneal_iters 838 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 839 400
penalty weights 10000.0
args.step pgd_anneal_iters 839 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 840 400
penalty weights 10000.0
args.step pgd_anneal_iters 840 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 841 400
penalty weights 10000.0
args.step pgd_anneal_iters 841 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 842 400
penalty weights 10000.0
args.step pgd_anneal_iters 842 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 843 400
penalty weights 10000.0
args.step pgd_anneal_iters 843 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 844 400
penalty weights 10000.0
args.step pgd_anneal_iters 844 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 845 400
penalty weights 10000.0
args.step pgd_anneal_iters 845 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 846 400
penalty weights 10000.0
args.step pgd_anneal_iters 846 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 847 400
penalty weights 10000.0
args.step pgd_anneal_iters 847 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 848 400
penalty weights 10000.0
args.step pgd_anneal_iters 848 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 849 400
penalty weights 10000.0
args.step pgd_anneal_iters 849 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 850 400
penalty weights 10000.0
args.step pgd_anneal_iters 850 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 851 400
penalty weights 10000.0
args.step pgd_anneal_iters 851 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 852 400
penalty weights 10000.0
args.step pgd_anneal_iters 852 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 853 400
penalty weights 10000.0
args.step pgd_anneal_iters 853 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 854 400
penalty weights 10000.0
args.step pgd_anneal_iters 854 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 855 400
penalty weights 10000.0
args.step pgd_anneal_iters 855 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 856 400
penalty weights 10000.0
args.step pgd_anneal_iters 856 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 857 400
penalty weights 10000.0
args.step pgd_anneal_iters 857 600
dim_v 512
Epoch: [32][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.12 (  0.12)	train_acc   0.40 (  0.49)	train_minacc   0.37 (  0.50)	train_majacc   0.41 (  0.48)	train_corr   0.00 (  0.00)	l1 17.7573 (17.7574)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 17.88it/s] 31%|###       | 8/26 [00:00<00:00, 39.25it/s]                                               31%|###       | 8/26 [00:00<00:00, 39.25it/s] 50%|#####     | 13/26 [00:00<00:00, 41.44it/s] 73%|#######3  | 19/26 [00:00<00:00, 47.30it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 47.30it/s] 96%|#########6| 25/26 [00:00<00:00, 47.28it/s]100%|##########| 26/26 [00:00<00:00, 40.45it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.47 (  0.47)	test_minacc   0.70 (  0.70)	test_majacc   0.44 (  0.44)	Loss_d 0.693 (0.693)	test_acc_d   0.47 (  0.47)	test_minacc_d   0.70 (  0.70)	test_majacc_d   0.44 (  0.44)	test_corr_d  -0.15 ( -0.15)
Test: [  10/  26]	Loss 0.694 (0.694)	test_acc   0.46 (  0.45)	test_minacc   0.69 (  0.53)	test_majacc   0.42 (  0.43)	Loss_d 0.694 (0.694)	test_acc_d   0.46 (  0.45)	test_minacc_d   0.69 (  0.53)	test_majacc_d   0.42 (  0.43)	test_corr_d  -0.13 ( -0.11)
Test: [  20/  26]	Loss 0.694 (0.694)	test_acc   0.40 (  0.44)	test_minacc   0.65 (  0.53)	test_majacc   0.37 (  0.43)	Loss_d 0.694 (0.694)	test_acc_d   0.40 (  0.44)	test_minacc_d   0.65 (  0.53)	test_majacc_d   0.37 (  0.43)	test_corr_d  -0.16 ( -0.11)
Test: [  26/  26]	Loss 0.694 (0.694)	test_acc   0.41 (  0.44)	test_minacc   0.42 (  0.53)	test_majacc   0.41 (  0.42)	Loss_d 0.694 (0.694)	test_acc_d   0.41 (  0.44)	test_minacc_d   0.42 (  0.53)	test_majacc_d   0.41 (  0.42)	test_corr_d  -0.16 ( -0.12)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 67.17it/s]
Test: [  0/  1]	Loss 0.676 (0.676)	test_acc   0.76 (  0.76)	test_minacc   0.78 (  0.78)	test_majacc   0.57 (  0.57)	Loss_d 0.676 (0.676)	test_acc_d   0.76 (  0.76)	test_minacc_d   0.78 (  0.78)	test_majacc_d   0.57 (  0.57)	test_corr_d  -0.56 ( -0.56)
Test: [  1/  1]	Loss 0.676 (0.676)	test_acc   0.76 (  0.76)	test_minacc   0.78 (  0.78)	test_majacc   0.57 (  0.57)	Loss_d 0.676 (0.676)	test_acc_d   0.76 (  0.76)	test_minacc_d   0.78 (  0.78)	test_majacc_d   0.57 (  0.57)	test_corr_d  -0.56 ( -0.56)
Overall Timing[ 32/  1]	epoch_time 0.0373 (0.0384)	validation_time 0.0003 (0.0006)	train_time 0.0369 (0.0377)
record: (train_acc, test_acc) (0.6794000270962716, 0.7350000143051147)
last accs (train_acc, test_acc) (0.440000005364418, 0.7620000243186951)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.19it/s] 19%|#9        | 5/26 [00:00<00:00, 23.25it/s] 35%|###4      | 9/26 [00:00<00:00, 28.12it/s] 50%|#####     | 13/26 [00:00<00:00, 29.77it/s] 65%|######5   | 17/26 [00:00<00:00, 31.50it/s] 81%|########  | 21/26 [00:00<00:00, 32.83it/s] 96%|#########6| 25/26 [00:00<00:00, 33.28it/s]100%|##########| 26/26 [00:00<00:00, 28.38it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 858 400
penalty weights 10000.0
args.step pgd_anneal_iters 858 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 859 400
penalty weights 10000.0
args.step pgd_anneal_iters 859 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 860 400
penalty weights 10000.0
args.step pgd_anneal_iters 860 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 861 400
penalty weights 10000.0
args.step pgd_anneal_iters 861 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 862 400
penalty weights 10000.0
args.step pgd_anneal_iters 862 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 863 400
penalty weights 10000.0
args.step pgd_anneal_iters 863 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 864 400
penalty weights 10000.0
args.step pgd_anneal_iters 864 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 865 400
penalty weights 10000.0
args.step pgd_anneal_iters 865 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 866 400
penalty weights 10000.0
args.step pgd_anneal_iters 866 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 867 400
penalty weights 10000.0
args.step pgd_anneal_iters 867 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 868 400
penalty weights 10000.0
args.step pgd_anneal_iters 868 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 869 400
penalty weights 10000.0
args.step pgd_anneal_iters 869 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 870 400
penalty weights 10000.0
args.step pgd_anneal_iters 870 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 871 400
penalty weights 10000.0
args.step pgd_anneal_iters 871 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 872 400
penalty weights 10000.0
args.step pgd_anneal_iters 872 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 873 400
penalty weights 10000.0
args.step pgd_anneal_iters 873 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 874 400
penalty weights 10000.0
args.step pgd_anneal_iters 874 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 875 400
penalty weights 10000.0
args.step pgd_anneal_iters 875 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 876 400
penalty weights 10000.0
args.step pgd_anneal_iters 876 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 877 400
penalty weights 10000.0
args.step pgd_anneal_iters 877 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 878 400
penalty weights 10000.0
args.step pgd_anneal_iters 878 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 879 400
penalty weights 10000.0
args.step pgd_anneal_iters 879 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 880 400
penalty weights 10000.0
args.step pgd_anneal_iters 880 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 881 400
penalty weights 10000.0
args.step pgd_anneal_iters 881 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 882 400
penalty weights 10000.0
args.step pgd_anneal_iters 882 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 883 400
penalty weights 10000.0
args.step pgd_anneal_iters 883 600
dim_v 512
Epoch: [33][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.12 (  0.12)	train_acc   0.41 (  0.49)	train_minacc   0.37 (  0.51)	train_majacc   0.42 (  0.49)	train_corr   0.00 (  0.00)	l1 17.7570 (17.7571)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.50it/s] 23%|##3       | 6/26 [00:00<00:00, 26.63it/s]                                               23%|##3       | 6/26 [00:00<00:00, 26.63it/s] 46%|####6     | 12/26 [00:00<00:00, 38.61it/s] 65%|######5   | 17/26 [00:00<00:00, 40.04it/s]                                                65%|######5   | 17/26 [00:00<00:00, 40.04it/s] 88%|########8 | 23/26 [00:00<00:00, 45.07it/s]100%|##########| 26/26 [00:00<00:00, 36.55it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.47 (  0.47)	test_minacc   0.71 (  0.71)	test_majacc   0.43 (  0.43)	Loss_d 0.693 (0.693)	test_acc_d   0.47 (  0.47)	test_minacc_d   0.71 (  0.71)	test_majacc_d   0.43 (  0.43)	test_corr_d  -0.15 ( -0.15)
Test: [  10/  26]	Loss 0.694 (0.694)	test_acc   0.47 (  0.44)	test_minacc   0.69 (  0.54)	test_majacc   0.43 (  0.43)	Loss_d 0.694 (0.694)	test_acc_d   0.47 (  0.44)	test_minacc_d   0.69 (  0.54)	test_majacc_d   0.43 (  0.43)	test_corr_d  -0.13 ( -0.11)
Test: [  20/  26]	Loss 0.694 (0.694)	test_acc   0.39 (  0.44)	test_minacc   0.62 (  0.53)	test_majacc   0.36 (  0.42)	Loss_d 0.694 (0.694)	test_acc_d   0.39 (  0.44)	test_minacc_d   0.62 (  0.53)	test_majacc_d   0.36 (  0.42)	test_corr_d  -0.17 ( -0.12)
Test: [  26/  26]	Loss 0.694 (0.694)	test_acc   0.42 (  0.44)	test_minacc   0.42 (  0.53)	test_majacc   0.42 (  0.42)	Loss_d 0.694 (0.694)	test_acc_d   0.42 (  0.44)	test_minacc_d   0.42 (  0.53)	test_majacc_d   0.42 (  0.42)	test_corr_d  -0.16 ( -0.12)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.33it/s]
Test: [  0/  1]	Loss 0.676 (0.676)	test_acc   0.76 (  0.76)	test_minacc   0.78 (  0.78)	test_majacc   0.57 (  0.57)	Loss_d 0.676 (0.676)	test_acc_d   0.76 (  0.76)	test_minacc_d   0.78 (  0.78)	test_majacc_d   0.57 (  0.57)	test_corr_d  -0.56 ( -0.56)
Test: [  1/  1]	Loss 0.676 (0.676)	test_acc   0.76 (  0.76)	test_minacc   0.78 (  0.78)	test_majacc   0.57 (  0.57)	Loss_d 0.676 (0.676)	test_acc_d   0.76 (  0.76)	test_minacc_d   0.78 (  0.78)	test_majacc_d   0.57 (  0.57)	test_corr_d  -0.56 ( -0.56)
Overall Timing[ 33/  1]	epoch_time 0.0376 (0.0384)	validation_time 0.0004 (0.0006)	train_time 0.0372 (0.0377)
record: (train_acc, test_acc) (0.6794000270962716, 0.7350000143051147)
last accs (train_acc, test_acc) (0.4380000049471855, 0.7620000243186951)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  6.22it/s] 19%|#9        | 5/26 [00:00<00:01, 19.68it/s] 35%|###4      | 9/26 [00:00<00:00, 25.05it/s] 50%|#####     | 13/26 [00:00<00:00, 28.75it/s] 65%|######5   | 17/26 [00:00<00:00, 30.82it/s] 81%|########  | 21/26 [00:00<00:00, 32.09it/s] 96%|#########6| 25/26 [00:00<00:00, 32.54it/s]100%|##########| 26/26 [00:00<00:00, 26.90it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 884 400
penalty weights 10000.0
args.step pgd_anneal_iters 884 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 885 400
penalty weights 10000.0
args.step pgd_anneal_iters 885 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 886 400
penalty weights 10000.0
args.step pgd_anneal_iters 886 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 887 400
penalty weights 10000.0
args.step pgd_anneal_iters 887 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 888 400
penalty weights 10000.0
args.step pgd_anneal_iters 888 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 889 400
penalty weights 10000.0
args.step pgd_anneal_iters 889 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 890 400
penalty weights 10000.0
args.step pgd_anneal_iters 890 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 891 400
penalty weights 10000.0
args.step pgd_anneal_iters 891 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 892 400
penalty weights 10000.0
args.step pgd_anneal_iters 892 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 893 400
penalty weights 10000.0
args.step pgd_anneal_iters 893 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 894 400
penalty weights 10000.0
args.step pgd_anneal_iters 894 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 895 400
penalty weights 10000.0
args.step pgd_anneal_iters 895 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 896 400
penalty weights 10000.0
args.step pgd_anneal_iters 896 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 897 400
penalty weights 10000.0
args.step pgd_anneal_iters 897 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 898 400
penalty weights 10000.0
args.step pgd_anneal_iters 898 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 899 400
penalty weights 10000.0
args.step pgd_anneal_iters 899 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 900 400
penalty weights 10000.0
args.step pgd_anneal_iters 900 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 901 400
penalty weights 10000.0
args.step pgd_anneal_iters 901 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 902 400
penalty weights 10000.0
args.step pgd_anneal_iters 902 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 903 400
penalty weights 10000.0
args.step pgd_anneal_iters 903 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 904 400
penalty weights 10000.0
args.step pgd_anneal_iters 904 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 905 400
penalty weights 10000.0
args.step pgd_anneal_iters 905 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 906 400
penalty weights 10000.0
args.step pgd_anneal_iters 906 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 907 400
penalty weights 10000.0
args.step pgd_anneal_iters 907 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 908 400
penalty weights 10000.0
args.step pgd_anneal_iters 908 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 909 400
penalty weights 10000.0
args.step pgd_anneal_iters 909 600
dim_v 512
Epoch: [34][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.12 (  0.12)	train_acc   0.42 (  0.49)	train_minacc   0.35 (  0.50)	train_majacc   0.43 (  0.49)	train_corr   0.00 (  0.00)	l1 17.7567 (17.7568)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:00, 24.14it/s] 31%|###       | 8/26 [00:00<00:00, 37.62it/s]                                               31%|###       | 8/26 [00:00<00:00, 37.62it/s] 54%|#####3    | 14/26 [00:00<00:00, 45.34it/s] 73%|#######3  | 19/26 [00:00<00:00, 45.54it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 45.54it/s] 96%|#########6| 25/26 [00:00<00:00, 48.34it/s]100%|##########| 26/26 [00:00<00:00, 41.12it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.47 (  0.47)	test_minacc   0.71 (  0.71)	test_majacc   0.43 (  0.43)	Loss_d 0.693 (0.693)	test_acc_d   0.47 (  0.47)	test_minacc_d   0.71 (  0.71)	test_majacc_d   0.43 (  0.43)	test_corr_d  -0.15 ( -0.15)
Test: [  10/  26]	Loss 0.694 (0.694)	test_acc   0.46 (  0.44)	test_minacc   0.69 (  0.54)	test_majacc   0.42 (  0.43)	Loss_d 0.694 (0.694)	test_acc_d   0.46 (  0.44)	test_minacc_d   0.69 (  0.54)	test_majacc_d   0.42 (  0.43)	test_corr_d  -0.14 ( -0.12)
Test: [  20/  26]	Loss 0.694 (0.694)	test_acc   0.39 (  0.44)	test_minacc   0.62 (  0.53)	test_majacc   0.36 (  0.42)	Loss_d 0.694 (0.694)	test_acc_d   0.39 (  0.44)	test_minacc_d   0.62 (  0.53)	test_majacc_d   0.36 (  0.42)	test_corr_d  -0.18 ( -0.12)
Test: [  26/  26]	Loss 0.694 (0.694)	test_acc   0.41 (  0.44)	test_minacc   0.37 (  0.53)	test_majacc   0.42 (  0.42)	Loss_d 0.694 (0.694)	test_acc_d   0.41 (  0.44)	test_minacc_d   0.37 (  0.53)	test_majacc_d   0.42 (  0.42)	test_corr_d  -0.16 ( -0.12)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.03it/s]
Test: [  0/  1]	Loss 0.676 (0.676)	test_acc   0.76 (  0.76)	test_minacc   0.78 (  0.78)	test_majacc   0.57 (  0.57)	Loss_d 0.676 (0.676)	test_acc_d   0.76 (  0.76)	test_minacc_d   0.78 (  0.78)	test_majacc_d   0.57 (  0.57)	test_corr_d  -0.56 ( -0.56)
Test: [  1/  1]	Loss 0.676 (0.676)	test_acc   0.76 (  0.76)	test_minacc   0.78 (  0.78)	test_majacc   0.57 (  0.57)	Loss_d 0.676 (0.676)	test_acc_d   0.76 (  0.76)	test_minacc_d   0.78 (  0.78)	test_majacc_d   0.57 (  0.57)	test_corr_d  -0.56 ( -0.56)
Overall Timing[ 34/  1]	epoch_time 0.0370 (0.0383)	validation_time 0.0004 (0.0006)	train_time 0.0365 (0.0377)
record: (train_acc, test_acc) (0.6794000270962716, 0.7350000143051147)
last accs (train_acc, test_acc) (0.4379000052809715, 0.7630000114440918)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.58it/s] 19%|#9        | 5/26 [00:00<00:00, 22.90it/s] 35%|###4      | 9/26 [00:00<00:00, 28.22it/s] 50%|#####     | 13/26 [00:00<00:00, 31.10it/s] 65%|######5   | 17/26 [00:00<00:00, 32.47it/s] 81%|########  | 21/26 [00:00<00:00, 33.19it/s] 96%|#########6| 25/26 [00:00<00:00, 33.50it/s]100%|##########| 26/26 [00:00<00:00, 28.75it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 910 400
penalty weights 10000.0
args.step pgd_anneal_iters 910 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 911 400
penalty weights 10000.0
args.step pgd_anneal_iters 911 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 912 400
penalty weights 10000.0
args.step pgd_anneal_iters 912 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 913 400
penalty weights 10000.0
args.step pgd_anneal_iters 913 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 914 400
penalty weights 10000.0
args.step pgd_anneal_iters 914 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 915 400
penalty weights 10000.0
args.step pgd_anneal_iters 915 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 916 400
penalty weights 10000.0
args.step pgd_anneal_iters 916 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 917 400
penalty weights 10000.0
args.step pgd_anneal_iters 917 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 918 400
penalty weights 10000.0
args.step pgd_anneal_iters 918 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 919 400
penalty weights 10000.0
args.step pgd_anneal_iters 919 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 920 400
penalty weights 10000.0
args.step pgd_anneal_iters 920 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 921 400
penalty weights 10000.0
args.step pgd_anneal_iters 921 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 922 400
penalty weights 10000.0
args.step pgd_anneal_iters 922 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 923 400
penalty weights 10000.0
args.step pgd_anneal_iters 923 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 924 400
penalty weights 10000.0
args.step pgd_anneal_iters 924 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 925 400
penalty weights 10000.0
args.step pgd_anneal_iters 925 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 926 400
penalty weights 10000.0
args.step pgd_anneal_iters 926 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 927 400
penalty weights 10000.0
args.step pgd_anneal_iters 927 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 928 400
penalty weights 10000.0
args.step pgd_anneal_iters 928 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 929 400
penalty weights 10000.0
args.step pgd_anneal_iters 929 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 930 400
penalty weights 10000.0
args.step pgd_anneal_iters 930 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 931 400
penalty weights 10000.0
args.step pgd_anneal_iters 931 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 932 400
penalty weights 10000.0
args.step pgd_anneal_iters 932 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 933 400
penalty weights 10000.0
args.step pgd_anneal_iters 933 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 934 400
penalty weights 10000.0
args.step pgd_anneal_iters 934 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 935 400
penalty weights 10000.0
args.step pgd_anneal_iters 935 600
dim_v 512
Epoch: [35][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.12 (  0.12)	train_acc   0.43 (  0.49)	train_minacc   0.33 (  0.50)	train_majacc   0.45 (  0.49)	train_corr   0.00 (  0.00)	l1 17.7564 (17.7565)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.98it/s] 27%|##6       | 7/26 [00:00<00:00, 35.76it/s]                                               27%|##6       | 7/26 [00:00<00:00, 35.76it/s] 50%|#####     | 13/26 [00:00<00:00, 40.98it/s] 73%|#######3  | 19/26 [00:00<00:00, 47.18it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 47.18it/s] 96%|#########6| 25/26 [00:00<00:00, 47.29it/s]100%|##########| 26/26 [00:00<00:00, 39.54it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.47 (  0.47)	test_minacc   0.70 (  0.70)	test_majacc   0.43 (  0.43)	Loss_d 0.693 (0.693)	test_acc_d   0.47 (  0.47)	test_minacc_d   0.70 (  0.70)	test_majacc_d   0.43 (  0.43)	test_corr_d  -0.16 ( -0.16)
Test: [  10/  26]	Loss 0.694 (0.694)	test_acc   0.46 (  0.44)	test_minacc   0.69 (  0.55)	test_majacc   0.42 (  0.42)	Loss_d 0.694 (0.694)	test_acc_d   0.46 (  0.44)	test_minacc_d   0.69 (  0.55)	test_majacc_d   0.42 (  0.42)	test_corr_d  -0.14 ( -0.12)
Test: [  20/  26]	Loss 0.694 (0.694)	test_acc   0.39 (  0.44)	test_minacc   0.58 (  0.53)	test_majacc   0.36 (  0.43)	Loss_d 0.694 (0.694)	test_acc_d   0.39 (  0.44)	test_minacc_d   0.58 (  0.53)	test_majacc_d   0.36 (  0.43)	test_corr_d  -0.18 ( -0.12)
Test: [  26/  26]	Loss 0.694 (0.694)	test_acc   0.40 (  0.44)	test_minacc   0.35 (  0.53)	test_majacc   0.42 (  0.42)	Loss_d 0.694 (0.694)	test_acc_d   0.40 (  0.44)	test_minacc_d   0.35 (  0.53)	test_majacc_d   0.42 (  0.42)	test_corr_d  -0.15 ( -0.13)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.62it/s]
Test: [  0/  1]	Loss 0.676 (0.676)	test_acc   0.76 (  0.76)	test_minacc   0.79 (  0.79)	test_majacc   0.57 (  0.57)	Loss_d 0.676 (0.676)	test_acc_d   0.76 (  0.76)	test_minacc_d   0.79 (  0.79)	test_majacc_d   0.57 (  0.57)	test_corr_d  -0.57 ( -0.57)
Test: [  1/  1]	Loss 0.676 (0.676)	test_acc   0.76 (  0.76)	test_minacc   0.79 (  0.79)	test_majacc   0.57 (  0.57)	Loss_d 0.676 (0.676)	test_acc_d   0.76 (  0.76)	test_minacc_d   0.79 (  0.79)	test_majacc_d   0.57 (  0.57)	test_corr_d  -0.57 ( -0.57)
Overall Timing[ 35/  1]	epoch_time 0.0370 (0.0383)	validation_time 0.0004 (0.0006)	train_time 0.0365 (0.0376)
record: (train_acc, test_acc) (0.6794000270962716, 0.7350000143051147)
last accs (train_acc, test_acc) (0.4391000061631203, 0.7640000581741333)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.39it/s] 19%|#9        | 5/26 [00:00<00:00, 23.02it/s] 35%|###4      | 9/26 [00:00<00:00, 28.89it/s] 50%|#####     | 13/26 [00:00<00:00, 31.57it/s] 65%|######5   | 17/26 [00:00<00:00, 33.47it/s] 81%|########  | 21/26 [00:00<00:00, 34.07it/s] 96%|#########6| 25/26 [00:00<00:00, 34.14it/s]100%|##########| 26/26 [00:00<00:00, 28.95it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 936 400
penalty weights 10000.0
args.step pgd_anneal_iters 936 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 937 400
penalty weights 10000.0
args.step pgd_anneal_iters 937 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 938 400
penalty weights 10000.0
args.step pgd_anneal_iters 938 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 939 400
penalty weights 10000.0
args.step pgd_anneal_iters 939 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 940 400
penalty weights 10000.0
args.step pgd_anneal_iters 940 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 941 400
penalty weights 10000.0
args.step pgd_anneal_iters 941 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 942 400
penalty weights 10000.0
args.step pgd_anneal_iters 942 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 943 400
penalty weights 10000.0
args.step pgd_anneal_iters 943 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 944 400
penalty weights 10000.0
args.step pgd_anneal_iters 944 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 945 400
penalty weights 10000.0
args.step pgd_anneal_iters 945 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 946 400
penalty weights 10000.0
args.step pgd_anneal_iters 946 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 947 400
penalty weights 10000.0
args.step pgd_anneal_iters 947 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 948 400
penalty weights 10000.0
args.step pgd_anneal_iters 948 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 949 400
penalty weights 10000.0
args.step pgd_anneal_iters 949 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 950 400
penalty weights 10000.0
args.step pgd_anneal_iters 950 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 951 400
penalty weights 10000.0
args.step pgd_anneal_iters 951 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 952 400
penalty weights 10000.0
args.step pgd_anneal_iters 952 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 953 400
penalty weights 10000.0
args.step pgd_anneal_iters 953 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 954 400
penalty weights 10000.0
args.step pgd_anneal_iters 954 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 955 400
penalty weights 10000.0
args.step pgd_anneal_iters 955 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 956 400
penalty weights 10000.0
args.step pgd_anneal_iters 956 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 957 400
penalty weights 10000.0
args.step pgd_anneal_iters 957 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 958 400
penalty weights 10000.0
args.step pgd_anneal_iters 958 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 959 400
penalty weights 10000.0
args.step pgd_anneal_iters 959 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 960 400
penalty weights 10000.0
args.step pgd_anneal_iters 960 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 961 400
penalty weights 10000.0
args.step pgd_anneal_iters 961 600
dim_v 512
Epoch: [36][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.12 (  0.12)	train_acc   0.42 (  0.49)	train_minacc   0.35 (  0.49)	train_majacc   0.44 (  0.49)	train_corr   0.00 (  0.00)	l1 17.7561 (17.7562)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 17.33it/s] 27%|##6       | 7/26 [00:00<00:00, 35.03it/s]                                               27%|##6       | 7/26 [00:00<00:00, 35.03it/s] 50%|#####     | 13/26 [00:00<00:00, 41.84it/s] 73%|#######3  | 19/26 [00:00<00:00, 47.66it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 47.66it/s] 96%|#########6| 25/26 [00:00<00:00, 48.61it/s]100%|##########| 26/26 [00:00<00:00, 40.82it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.46 (  0.46)	test_minacc   0.64 (  0.64)	test_majacc   0.43 (  0.43)	Loss_d 0.693 (0.693)	test_acc_d   0.46 (  0.46)	test_minacc_d   0.64 (  0.64)	test_majacc_d   0.43 (  0.43)	test_corr_d  -0.15 ( -0.15)
Test: [  10/  26]	Loss 0.694 (0.694)	test_acc   0.45 (  0.45)	test_minacc   0.69 (  0.53)	test_majacc   0.40 (  0.43)	Loss_d 0.694 (0.694)	test_acc_d   0.45 (  0.45)	test_minacc_d   0.69 (  0.53)	test_majacc_d   0.40 (  0.43)	test_corr_d  -0.13 ( -0.12)
Test: [  20/  26]	Loss 0.694 (0.694)	test_acc   0.40 (  0.45)	test_minacc   0.54 (  0.52)	test_majacc   0.38 (  0.43)	Loss_d 0.694 (0.694)	test_acc_d   0.40 (  0.45)	test_minacc_d   0.54 (  0.52)	test_majacc_d   0.38 (  0.43)	test_corr_d  -0.18 ( -0.12)
Test: [  26/  26]	Loss 0.694 (0.694)	test_acc   0.42 (  0.44)	test_minacc   0.37 (  0.52)	test_majacc   0.43 (  0.43)	Loss_d 0.694 (0.694)	test_acc_d   0.42 (  0.44)	test_minacc_d   0.37 (  0.52)	test_majacc_d   0.43 (  0.43)	test_corr_d  -0.15 ( -0.12)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.95it/s]
Test: [  0/  1]	Loss 0.676 (0.676)	test_acc   0.77 (  0.77)	test_minacc   0.79 (  0.79)	test_majacc   0.57 (  0.57)	Loss_d 0.676 (0.676)	test_acc_d   0.77 (  0.77)	test_minacc_d   0.79 (  0.79)	test_majacc_d   0.57 (  0.57)	test_corr_d  -0.57 ( -0.57)
Test: [  1/  1]	Loss 0.676 (0.676)	test_acc   0.77 (  0.77)	test_minacc   0.79 (  0.79)	test_majacc   0.57 (  0.57)	Loss_d 0.676 (0.676)	test_acc_d   0.77 (  0.77)	test_minacc_d   0.79 (  0.79)	test_majacc_d   0.57 (  0.57)	test_corr_d  -0.57 ( -0.57)
Overall Timing[ 36/  1]	epoch_time 0.0356 (0.0382)	validation_time 0.0003 (0.0006)	train_time 0.0353 (0.0376)
record: (train_acc, test_acc) (0.6794000270962716, 0.7350000143051147)
last accs (train_acc, test_acc) (0.44150000357627867, 0.76500004529953)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.64it/s] 19%|#9        | 5/26 [00:00<00:00, 23.37it/s] 35%|###4      | 9/26 [00:00<00:00, 28.60it/s] 50%|#####     | 13/26 [00:00<00:00, 30.59it/s] 65%|######5   | 17/26 [00:00<00:00, 30.76it/s] 81%|########  | 21/26 [00:00<00:00, 32.33it/s] 96%|#########6| 25/26 [00:00<00:00, 33.61it/s]100%|##########| 26/26 [00:00<00:00, 28.78it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 962 400
penalty weights 10000.0
args.step pgd_anneal_iters 962 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 963 400
penalty weights 10000.0
args.step pgd_anneal_iters 963 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 964 400
penalty weights 10000.0
args.step pgd_anneal_iters 964 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 965 400
penalty weights 10000.0
args.step pgd_anneal_iters 965 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 966 400
penalty weights 10000.0
args.step pgd_anneal_iters 966 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 967 400
penalty weights 10000.0
args.step pgd_anneal_iters 967 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 968 400
penalty weights 10000.0
args.step pgd_anneal_iters 968 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 969 400
penalty weights 10000.0
args.step pgd_anneal_iters 969 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 970 400
penalty weights 10000.0
args.step pgd_anneal_iters 970 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 971 400
penalty weights 10000.0
args.step pgd_anneal_iters 971 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 972 400
penalty weights 10000.0
args.step pgd_anneal_iters 972 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 973 400
penalty weights 10000.0
args.step pgd_anneal_iters 973 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 974 400
penalty weights 10000.0
args.step pgd_anneal_iters 974 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 975 400
penalty weights 10000.0
args.step pgd_anneal_iters 975 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 976 400
penalty weights 10000.0
args.step pgd_anneal_iters 976 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 977 400
penalty weights 10000.0
args.step pgd_anneal_iters 977 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 978 400
penalty weights 10000.0
args.step pgd_anneal_iters 978 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 979 400
penalty weights 10000.0
args.step pgd_anneal_iters 979 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 980 400
penalty weights 10000.0
args.step pgd_anneal_iters 980 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 981 400
penalty weights 10000.0
args.step pgd_anneal_iters 981 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 982 400
penalty weights 10000.0
args.step pgd_anneal_iters 982 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 983 400
penalty weights 10000.0
args.step pgd_anneal_iters 983 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 984 400
penalty weights 10000.0
args.step pgd_anneal_iters 984 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 985 400
penalty weights 10000.0
args.step pgd_anneal_iters 985 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 986 400
penalty weights 10000.0
args.step pgd_anneal_iters 986 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 987 400
penalty weights 10000.0
args.step pgd_anneal_iters 987 600
dim_v 512
Epoch: [37][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.12 (  0.12)	train_acc   0.42 (  0.50)	train_minacc   0.33 (  0.48)	train_majacc   0.44 (  0.50)	train_corr   0.00 (  0.00)	l1 17.7559 (17.7560)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.29it/s] 27%|##6       | 7/26 [00:00<00:00, 33.96it/s]                                               27%|##6       | 7/26 [00:00<00:00, 33.96it/s] 50%|#####     | 13/26 [00:00<00:00, 40.16it/s] 73%|#######3  | 19/26 [00:00<00:00, 46.50it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 46.50it/s] 96%|#########6| 25/26 [00:00<00:00, 47.70it/s]100%|##########| 26/26 [00:00<00:00, 39.33it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.46 (  0.46)	test_minacc   0.64 (  0.64)	test_majacc   0.43 (  0.43)	Loss_d 0.693 (0.693)	test_acc_d   0.46 (  0.46)	test_minacc_d   0.64 (  0.64)	test_majacc_d   0.43 (  0.43)	test_corr_d  -0.14 ( -0.14)
Test: [  10/  26]	Loss 0.694 (0.694)	test_acc   0.43 (  0.45)	test_minacc   0.66 (  0.52)	test_majacc   0.39 (  0.43)	Loss_d 0.694 (0.694)	test_acc_d   0.43 (  0.45)	test_minacc_d   0.66 (  0.52)	test_majacc_d   0.39 (  0.43)	test_corr_d  -0.13 ( -0.11)
Test: [  20/  26]	Loss 0.694 (0.694)	test_acc   0.40 (  0.45)	test_minacc   0.52 (  0.51)	test_majacc   0.38 (  0.43)	Loss_d 0.694 (0.694)	test_acc_d   0.40 (  0.45)	test_minacc_d   0.52 (  0.51)	test_majacc_d   0.38 (  0.43)	test_corr_d  -0.17 ( -0.11)
Test: [  26/  26]	Loss 0.694 (0.694)	test_acc   0.40 (  0.44)	test_minacc   0.33 (  0.50)	test_majacc   0.42 (  0.43)	Loss_d 0.694 (0.694)	test_acc_d   0.40 (  0.44)	test_minacc_d   0.33 (  0.50)	test_majacc_d   0.42 (  0.43)	test_corr_d  -0.13 ( -0.11)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.94it/s]
Test: [  0/  1]	Loss 0.676 (0.676)	test_acc   0.77 (  0.77)	test_minacc   0.79 (  0.79)	test_majacc   0.57 (  0.57)	Loss_d 0.676 (0.676)	test_acc_d   0.77 (  0.77)	test_minacc_d   0.79 (  0.79)	test_majacc_d   0.57 (  0.57)	test_corr_d  -0.57 ( -0.57)
Test: [  1/  1]	Loss 0.676 (0.676)	test_acc   0.77 (  0.77)	test_minacc   0.79 (  0.79)	test_majacc   0.57 (  0.57)	Loss_d 0.676 (0.676)	test_acc_d   0.77 (  0.77)	test_minacc_d   0.79 (  0.79)	test_majacc_d   0.57 (  0.57)	test_corr_d  -0.57 ( -0.57)
Overall Timing[ 37/  1]	epoch_time 0.0367 (0.0382)	validation_time 0.0004 (0.0006)	train_time 0.0362 (0.0375)
record: (train_acc, test_acc) (0.6794000270962716, 0.7350000143051147)
last accs (train_acc, test_acc) (0.44110000488162043, 0.76500004529953)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.63it/s] 19%|#9        | 5/26 [00:00<00:00, 22.46it/s] 35%|###4      | 9/26 [00:00<00:00, 28.11it/s] 50%|#####     | 13/26 [00:00<00:00, 30.93it/s] 65%|######5   | 17/26 [00:00<00:00, 31.75it/s] 81%|########  | 21/26 [00:00<00:00, 32.84it/s] 96%|#########6| 25/26 [00:00<00:00, 32.96it/s]100%|##########| 26/26 [00:00<00:00, 28.22it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 988 400
penalty weights 10000.0
args.step pgd_anneal_iters 988 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 989 400
penalty weights 10000.0
args.step pgd_anneal_iters 989 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 990 400
penalty weights 10000.0
args.step pgd_anneal_iters 990 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 991 400
penalty weights 10000.0
args.step pgd_anneal_iters 991 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 992 400
penalty weights 10000.0
args.step pgd_anneal_iters 992 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 993 400
penalty weights 10000.0
args.step pgd_anneal_iters 993 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 994 400
penalty weights 10000.0
args.step pgd_anneal_iters 994 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 995 400
penalty weights 10000.0
args.step pgd_anneal_iters 995 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 996 400
penalty weights 10000.0
args.step pgd_anneal_iters 996 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 997 400
penalty weights 10000.0
args.step pgd_anneal_iters 997 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 998 400
penalty weights 10000.0
args.step pgd_anneal_iters 998 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 999 400
penalty weights 10000.0
args.step pgd_anneal_iters 999 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1000 400
penalty weights 10000.0
args.step pgd_anneal_iters 1000 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1001 400
penalty weights 10000.0
args.step pgd_anneal_iters 1001 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1002 400
penalty weights 10000.0
args.step pgd_anneal_iters 1002 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1003 400
penalty weights 10000.0
args.step pgd_anneal_iters 1003 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1004 400
penalty weights 10000.0
args.step pgd_anneal_iters 1004 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1005 400
penalty weights 10000.0
args.step pgd_anneal_iters 1005 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1006 400
penalty weights 10000.0
args.step pgd_anneal_iters 1006 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1007 400
penalty weights 10000.0
args.step pgd_anneal_iters 1007 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1008 400
penalty weights 10000.0
args.step pgd_anneal_iters 1008 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1009 400
penalty weights 10000.0
args.step pgd_anneal_iters 1009 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1010 400
penalty weights 10000.0
args.step pgd_anneal_iters 1010 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1011 400
penalty weights 10000.0
args.step pgd_anneal_iters 1011 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1012 400
penalty weights 10000.0
args.step pgd_anneal_iters 1012 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1013 400
penalty weights 10000.0
args.step pgd_anneal_iters 1013 600
dim_v 512
Epoch: [38][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.12 (  0.12)	train_acc   0.42 (  0.50)	train_minacc   0.33 (  0.48)	train_majacc   0.44 (  0.50)	train_corr   0.00 (  0.00)	l1 17.7556 (17.7557)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:00, 25.72it/s] 35%|###4      | 9/26 [00:00<00:00, 39.05it/s]                                               35%|###4      | 9/26 [00:00<00:00, 39.05it/s] 58%|#####7    | 15/26 [00:00<00:00, 47.56it/s]                                                58%|#####7    | 15/26 [00:00<00:00, 47.56it/s] 81%|########  | 21/26 [00:00<00:00, 47.39it/s]100%|##########| 26/26 [00:00<00:00, 41.87it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.47 (  0.47)	test_minacc   0.66 (  0.66)	test_majacc   0.44 (  0.44)	Loss_d 0.693 (0.693)	test_acc_d   0.47 (  0.47)	test_minacc_d   0.66 (  0.66)	test_majacc_d   0.44 (  0.44)	test_corr_d  -0.13 ( -0.13)
Test: [  10/  26]	Loss 0.694 (0.694)	test_acc   0.44 (  0.45)	test_minacc   0.66 (  0.52)	test_majacc   0.40 (  0.44)	Loss_d 0.694 (0.694)	test_acc_d   0.44 (  0.45)	test_minacc_d   0.66 (  0.52)	test_majacc_d   0.40 (  0.44)	test_corr_d  -0.13 ( -0.11)
Test: [  20/  26]	Loss 0.694 (0.694)	test_acc   0.40 (  0.45)	test_minacc   0.50 (  0.51)	test_majacc   0.39 (  0.44)	Loss_d 0.694 (0.694)	test_acc_d   0.40 (  0.45)	test_minacc_d   0.50 (  0.51)	test_majacc_d   0.39 (  0.44)	test_corr_d  -0.17 ( -0.11)
Test: [  26/  26]	Loss 0.694 (0.694)	test_acc   0.40 (  0.44)	test_minacc   0.35 (  0.51)	test_majacc   0.41 (  0.43)	Loss_d 0.694 (0.694)	test_acc_d   0.40 (  0.44)	test_minacc_d   0.35 (  0.51)	test_majacc_d   0.41 (  0.43)	test_corr_d  -0.13 ( -0.11)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.67it/s]
Test: [  0/  1]	Loss 0.676 (0.676)	test_acc   0.77 (  0.77)	test_minacc   0.79 (  0.79)	test_majacc   0.56 (  0.56)	Loss_d 0.676 (0.676)	test_acc_d   0.77 (  0.77)	test_minacc_d   0.79 (  0.79)	test_majacc_d   0.56 (  0.56)	test_corr_d  -0.57 ( -0.57)
Test: [  1/  1]	Loss 0.676 (0.676)	test_acc   0.77 (  0.77)	test_minacc   0.79 (  0.79)	test_majacc   0.56 (  0.56)	Loss_d 0.676 (0.676)	test_acc_d   0.77 (  0.77)	test_minacc_d   0.79 (  0.79)	test_majacc_d   0.56 (  0.56)	test_corr_d  -0.57 ( -0.57)
Overall Timing[ 38/  1]	epoch_time 0.0364 (0.0381)	validation_time 0.0003 (0.0005)	train_time 0.0361 (0.0375)
record: (train_acc, test_acc) (0.6794000270962716, 0.7350000143051147)
last accs (train_acc, test_acc) (0.44370000568032264, 0.76500004529953)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.95it/s] 15%|#5        | 4/26 [00:00<00:01, 19.66it/s] 31%|###       | 8/26 [00:00<00:00, 26.14it/s] 46%|####6     | 12/26 [00:00<00:00, 29.39it/s] 62%|######1   | 16/26 [00:00<00:00, 30.74it/s] 77%|#######6  | 20/26 [00:00<00:00, 31.83it/s] 92%|#########2| 24/26 [00:00<00:00, 32.34it/s]100%|##########| 26/26 [00:00<00:00, 27.68it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1014 400
penalty weights 10000.0
args.step pgd_anneal_iters 1014 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1015 400
penalty weights 10000.0
args.step pgd_anneal_iters 1015 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1016 400
penalty weights 10000.0
args.step pgd_anneal_iters 1016 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1017 400
penalty weights 10000.0
args.step pgd_anneal_iters 1017 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1018 400
penalty weights 10000.0
args.step pgd_anneal_iters 1018 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1019 400
penalty weights 10000.0
args.step pgd_anneal_iters 1019 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1020 400
penalty weights 10000.0
args.step pgd_anneal_iters 1020 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1021 400
penalty weights 10000.0
args.step pgd_anneal_iters 1021 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1022 400
penalty weights 10000.0
args.step pgd_anneal_iters 1022 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1023 400
penalty weights 10000.0
args.step pgd_anneal_iters 1023 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1024 400
penalty weights 10000.0
args.step pgd_anneal_iters 1024 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1025 400
penalty weights 10000.0
args.step pgd_anneal_iters 1025 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1026 400
penalty weights 10000.0
args.step pgd_anneal_iters 1026 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1027 400
penalty weights 10000.0
args.step pgd_anneal_iters 1027 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1028 400
penalty weights 10000.0
args.step pgd_anneal_iters 1028 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1029 400
penalty weights 10000.0
args.step pgd_anneal_iters 1029 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1030 400
penalty weights 10000.0
args.step pgd_anneal_iters 1030 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1031 400
penalty weights 10000.0
args.step pgd_anneal_iters 1031 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1032 400
penalty weights 10000.0
args.step pgd_anneal_iters 1032 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1033 400
penalty weights 10000.0
args.step pgd_anneal_iters 1033 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1034 400
penalty weights 10000.0
args.step pgd_anneal_iters 1034 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1035 400
penalty weights 10000.0
args.step pgd_anneal_iters 1035 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1036 400
penalty weights 10000.0
args.step pgd_anneal_iters 1036 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1037 400
penalty weights 10000.0
args.step pgd_anneal_iters 1037 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1038 400
penalty weights 10000.0
args.step pgd_anneal_iters 1038 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1039 400
penalty weights 10000.0
args.step pgd_anneal_iters 1039 600
dim_v 512
Epoch: [39][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.12 (  0.12)	train_acc   0.42 (  0.50)	train_minacc   0.35 (  0.48)	train_majacc   0.44 (  0.50)	train_corr   0.00 (  0.00)	l1 17.7554 (17.7555)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:00, 26.99it/s] 35%|###4      | 9/26 [00:00<00:00, 41.67it/s]                                               35%|###4      | 9/26 [00:00<00:00, 41.67it/s] 58%|#####7    | 15/26 [00:00<00:00, 45.20it/s]                                                58%|#####7    | 15/26 [00:00<00:00, 45.20it/s] 81%|########  | 21/26 [00:00<00:00, 48.78it/s]100%|##########| 26/26 [00:00<00:00, 42.94it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.48 (  0.48)	test_minacc   0.64 (  0.64)	test_majacc   0.45 (  0.45)	Loss_d 0.693 (0.693)	test_acc_d   0.48 (  0.48)	test_minacc_d   0.64 (  0.64)	test_majacc_d   0.45 (  0.45)	test_corr_d  -0.13 ( -0.13)
Test: [  10/  26]	Loss 0.694 (0.694)	test_acc   0.43 (  0.45)	test_minacc   0.64 (  0.52)	test_majacc   0.39 (  0.44)	Loss_d 0.694 (0.694)	test_acc_d   0.43 (  0.45)	test_minacc_d   0.64 (  0.52)	test_majacc_d   0.39 (  0.44)	test_corr_d  -0.13 ( -0.11)
Test: [  20/  26]	Loss 0.694 (0.694)	test_acc   0.40 (  0.45)	test_minacc   0.50 (  0.51)	test_majacc   0.39 (  0.44)	Loss_d 0.694 (0.694)	test_acc_d   0.40 (  0.45)	test_minacc_d   0.50 (  0.51)	test_majacc_d   0.39 (  0.44)	test_corr_d  -0.17 ( -0.11)
Test: [  26/  26]	Loss 0.694 (0.694)	test_acc   0.41 (  0.44)	test_minacc   0.35 (  0.50)	test_majacc   0.42 (  0.43)	Loss_d 0.694 (0.694)	test_acc_d   0.41 (  0.44)	test_minacc_d   0.35 (  0.50)	test_majacc_d   0.42 (  0.43)	test_corr_d  -0.13 ( -0.12)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.24it/s]
Test: [  0/  1]	Loss 0.676 (0.676)	test_acc   0.77 (  0.77)	test_minacc   0.79 (  0.79)	test_majacc   0.56 (  0.56)	Loss_d 0.676 (0.676)	test_acc_d   0.77 (  0.77)	test_minacc_d   0.79 (  0.79)	test_majacc_d   0.56 (  0.56)	test_corr_d  -0.57 ( -0.57)
Test: [  1/  1]	Loss 0.676 (0.676)	test_acc   0.77 (  0.77)	test_minacc   0.79 (  0.79)	test_majacc   0.56 (  0.56)	Loss_d 0.676 (0.676)	test_acc_d   0.77 (  0.77)	test_minacc_d   0.79 (  0.79)	test_majacc_d   0.56 (  0.56)	test_corr_d  -0.57 ( -0.57)
Overall Timing[ 39/  1]	epoch_time 0.0370 (0.0381)	validation_time 0.0004 (0.0005)	train_time 0.0365 (0.0375)
record: (train_acc, test_acc) (0.6794000270962716, 0.7350000143051147)
last accs (train_acc, test_acc) (0.4443000048995018, 0.76500004529953)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.37it/s] 19%|#9        | 5/26 [00:00<00:00, 22.29it/s] 35%|###4      | 9/26 [00:00<00:00, 27.27it/s] 50%|#####     | 13/26 [00:00<00:00, 28.89it/s] 65%|######5   | 17/26 [00:00<00:00, 30.68it/s] 81%|########  | 21/26 [00:00<00:00, 32.06it/s] 96%|#########6| 25/26 [00:00<00:00, 32.43it/s]100%|##########| 26/26 [00:00<00:00, 27.82it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1040 400
penalty weights 10000.0
args.step pgd_anneal_iters 1040 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1041 400
penalty weights 10000.0
args.step pgd_anneal_iters 1041 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1042 400
penalty weights 10000.0
args.step pgd_anneal_iters 1042 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1043 400
penalty weights 10000.0
args.step pgd_anneal_iters 1043 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1044 400
penalty weights 10000.0
args.step pgd_anneal_iters 1044 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1045 400
penalty weights 10000.0
args.step pgd_anneal_iters 1045 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1046 400
penalty weights 10000.0
args.step pgd_anneal_iters 1046 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1047 400
penalty weights 10000.0
args.step pgd_anneal_iters 1047 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1048 400
penalty weights 10000.0
args.step pgd_anneal_iters 1048 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1049 400
penalty weights 10000.0
args.step pgd_anneal_iters 1049 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1050 400
penalty weights 10000.0
args.step pgd_anneal_iters 1050 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1051 400
penalty weights 10000.0
args.step pgd_anneal_iters 1051 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1052 400
penalty weights 10000.0
args.step pgd_anneal_iters 1052 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1053 400
penalty weights 10000.0
args.step pgd_anneal_iters 1053 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1054 400
penalty weights 10000.0
args.step pgd_anneal_iters 1054 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1055 400
penalty weights 10000.0
args.step pgd_anneal_iters 1055 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1056 400
penalty weights 10000.0
args.step pgd_anneal_iters 1056 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1057 400
penalty weights 10000.0
args.step pgd_anneal_iters 1057 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1058 400
penalty weights 10000.0
args.step pgd_anneal_iters 1058 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1059 400
penalty weights 10000.0
args.step pgd_anneal_iters 1059 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1060 400
penalty weights 10000.0
args.step pgd_anneal_iters 1060 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1061 400
penalty weights 10000.0
args.step pgd_anneal_iters 1061 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1062 400
penalty weights 10000.0
args.step pgd_anneal_iters 1062 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1063 400
penalty weights 10000.0
args.step pgd_anneal_iters 1063 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1064 400
penalty weights 10000.0
args.step pgd_anneal_iters 1064 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1065 400
penalty weights 10000.0
args.step pgd_anneal_iters 1065 600
dim_v 512
Epoch: [40][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.12 (  0.12)	train_acc   0.42 (  0.50)	train_minacc   0.33 (  0.48)	train_majacc   0.43 (  0.50)	train_corr   0.00 (  0.00)	l1 17.7552 (17.7553)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.02it/s] 23%|##3       | 6/26 [00:00<00:00, 30.00it/s]                                               23%|##3       | 6/26 [00:00<00:00, 30.00it/s] 46%|####6     | 12/26 [00:00<00:00, 40.53it/s] 65%|######5   | 17/26 [00:00<00:00, 42.23it/s]                                                65%|######5   | 17/26 [00:00<00:00, 42.23it/s] 88%|########8 | 23/26 [00:00<00:00, 47.60it/s]100%|##########| 26/26 [00:00<00:00, 38.46it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.47 (  0.47)	test_minacc   0.61 (  0.61)	test_majacc   0.45 (  0.45)	Loss_d 0.693 (0.693)	test_acc_d   0.47 (  0.47)	test_minacc_d   0.61 (  0.61)	test_majacc_d   0.45 (  0.45)	test_corr_d  -0.13 ( -0.13)
Test: [  10/  26]	Loss 0.694 (0.694)	test_acc   0.43 (  0.45)	test_minacc   0.62 (  0.52)	test_majacc   0.39 (  0.44)	Loss_d 0.694 (0.694)	test_acc_d   0.43 (  0.45)	test_minacc_d   0.62 (  0.52)	test_majacc_d   0.39 (  0.44)	test_corr_d  -0.13 ( -0.12)
Test: [  20/  26]	Loss 0.694 (0.694)	test_acc   0.39 (  0.45)	test_minacc   0.48 (  0.50)	test_majacc   0.38 (  0.44)	Loss_d 0.694 (0.694)	test_acc_d   0.39 (  0.45)	test_minacc_d   0.48 (  0.50)	test_majacc_d   0.38 (  0.44)	test_corr_d  -0.18 ( -0.12)
Test: [  26/  26]	Loss 0.694 (0.694)	test_acc   0.40 (  0.44)	test_minacc   0.33 (  0.50)	test_majacc   0.42 (  0.43)	Loss_d 0.694 (0.694)	test_acc_d   0.40 (  0.44)	test_minacc_d   0.33 (  0.50)	test_majacc_d   0.42 (  0.43)	test_corr_d  -0.13 ( -0.12)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.53it/s]
Test: [  0/  1]	Loss 0.676 (0.676)	test_acc   0.76 (  0.76)	test_minacc   0.79 (  0.79)	test_majacc   0.56 (  0.56)	Loss_d 0.676 (0.676)	test_acc_d   0.76 (  0.76)	test_minacc_d   0.79 (  0.79)	test_majacc_d   0.56 (  0.56)	test_corr_d  -0.57 ( -0.57)
Test: [  1/  1]	Loss 0.676 (0.676)	test_acc   0.76 (  0.76)	test_minacc   0.79 (  0.79)	test_majacc   0.56 (  0.56)	Loss_d 0.676 (0.676)	test_acc_d   0.76 (  0.76)	test_minacc_d   0.79 (  0.79)	test_majacc_d   0.56 (  0.56)	test_corr_d  -0.57 ( -0.57)
Overall Timing[ 40/  1]	epoch_time 0.0375 (0.0381)	validation_time 0.0004 (0.0005)	train_time 0.0371 (0.0375)
record: (train_acc, test_acc) (0.6794000270962716, 0.7350000143051147)
last accs (train_acc, test_acc) (0.44360000589489934, 0.7640000581741333)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.72it/s] 15%|#5        | 4/26 [00:00<00:01, 19.31it/s] 31%|###       | 8/26 [00:00<00:00, 25.77it/s] 46%|####6     | 12/26 [00:00<00:00, 28.86it/s] 62%|######1   | 16/26 [00:00<00:00, 30.35it/s] 77%|#######6  | 20/26 [00:00<00:00, 31.86it/s] 92%|#########2| 24/26 [00:00<00:00, 32.77it/s]100%|##########| 26/26 [00:00<00:00, 27.65it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1066 400
penalty weights 10000.0
args.step pgd_anneal_iters 1066 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1067 400
penalty weights 10000.0
args.step pgd_anneal_iters 1067 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1068 400
penalty weights 10000.0
args.step pgd_anneal_iters 1068 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1069 400
penalty weights 10000.0
args.step pgd_anneal_iters 1069 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1070 400
penalty weights 10000.0
args.step pgd_anneal_iters 1070 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1071 400
penalty weights 10000.0
args.step pgd_anneal_iters 1071 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1072 400
penalty weights 10000.0
args.step pgd_anneal_iters 1072 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1073 400
penalty weights 10000.0
args.step pgd_anneal_iters 1073 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1074 400
penalty weights 10000.0
args.step pgd_anneal_iters 1074 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1075 400
penalty weights 10000.0
args.step pgd_anneal_iters 1075 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1076 400
penalty weights 10000.0
args.step pgd_anneal_iters 1076 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1077 400
penalty weights 10000.0
args.step pgd_anneal_iters 1077 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1078 400
penalty weights 10000.0
args.step pgd_anneal_iters 1078 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1079 400
penalty weights 10000.0
args.step pgd_anneal_iters 1079 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1080 400
penalty weights 10000.0
args.step pgd_anneal_iters 1080 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1081 400
penalty weights 10000.0
args.step pgd_anneal_iters 1081 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1082 400
penalty weights 10000.0
args.step pgd_anneal_iters 1082 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1083 400
penalty weights 10000.0
args.step pgd_anneal_iters 1083 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1084 400
penalty weights 10000.0
args.step pgd_anneal_iters 1084 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1085 400
penalty weights 10000.0
args.step pgd_anneal_iters 1085 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1086 400
penalty weights 10000.0
args.step pgd_anneal_iters 1086 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1087 400
penalty weights 10000.0
args.step pgd_anneal_iters 1087 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1088 400
penalty weights 10000.0
args.step pgd_anneal_iters 1088 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1089 400
penalty weights 10000.0
args.step pgd_anneal_iters 1089 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1090 400
penalty weights 10000.0
args.step pgd_anneal_iters 1090 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1091 400
penalty weights 10000.0
args.step pgd_anneal_iters 1091 600
dim_v 512
Epoch: [41][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.12 (  0.12)	train_acc   0.42 (  0.50)	train_minacc   0.30 (  0.47)	train_majacc   0.44 (  0.50)	train_corr   0.00 (  0.00)	l1 17.7549 (17.7550)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.25it/s] 27%|##6       | 7/26 [00:00<00:00, 34.01it/s]                                               27%|##6       | 7/26 [00:00<00:00, 34.01it/s] 50%|#####     | 13/26 [00:00<00:00, 42.90it/s] 69%|######9   | 18/26 [00:00<00:00, 45.02it/s]                                                69%|######9   | 18/26 [00:00<00:00, 45.02it/s] 92%|#########2| 24/26 [00:00<00:00, 48.77it/s]100%|##########| 26/26 [00:00<00:00, 40.54it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.47 (  0.47)	test_minacc   0.57 (  0.57)	test_majacc   0.46 (  0.46)	Loss_d 0.693 (0.693)	test_acc_d   0.47 (  0.47)	test_minacc_d   0.57 (  0.57)	test_majacc_d   0.46 (  0.46)	test_corr_d  -0.13 ( -0.13)
Test: [  10/  26]	Loss 0.694 (0.694)	test_acc   0.43 (  0.45)	test_minacc   0.66 (  0.51)	test_majacc   0.39 (  0.43)	Loss_d 0.694 (0.694)	test_acc_d   0.43 (  0.45)	test_minacc_d   0.66 (  0.51)	test_majacc_d   0.39 (  0.43)	test_corr_d  -0.13 ( -0.12)
Test: [  20/  26]	Loss 0.694 (0.694)	test_acc   0.40 (  0.45)	test_minacc   0.48 (  0.50)	test_majacc   0.39 (  0.44)	Loss_d 0.694 (0.694)	test_acc_d   0.40 (  0.45)	test_minacc_d   0.48 (  0.50)	test_majacc_d   0.39 (  0.44)	test_corr_d  -0.18 ( -0.12)
Test: [  26/  26]	Loss 0.694 (0.694)	test_acc   0.40 (  0.44)	test_minacc   0.33 (  0.49)	test_majacc   0.42 (  0.43)	Loss_d 0.694 (0.694)	test_acc_d   0.40 (  0.44)	test_minacc_d   0.33 (  0.49)	test_majacc_d   0.42 (  0.43)	test_corr_d  -0.12 ( -0.12)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.66it/s]
Test: [  0/  1]	Loss 0.677 (0.677)	test_acc   0.76 (  0.76)	test_minacc   0.78 (  0.78)	test_majacc   0.56 (  0.56)	Loss_d 0.677 (0.677)	test_acc_d   0.76 (  0.76)	test_minacc_d   0.78 (  0.78)	test_majacc_d   0.56 (  0.56)	test_corr_d  -0.57 ( -0.57)
Test: [  1/  1]	Loss 0.677 (0.677)	test_acc   0.76 (  0.76)	test_minacc   0.78 (  0.78)	test_majacc   0.56 (  0.56)	Loss_d 0.677 (0.677)	test_acc_d   0.76 (  0.76)	test_minacc_d   0.78 (  0.78)	test_majacc_d   0.56 (  0.56)	test_corr_d  -0.57 ( -0.57)
Overall Timing[ 41/  1]	epoch_time 0.0365 (0.0381)	validation_time 0.0003 (0.0005)	train_time 0.0361 (0.0374)
record: (train_acc, test_acc) (0.6794000270962716, 0.7350000143051147)
last accs (train_acc, test_acc) (0.44330000591278074, 0.7610000371932983)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.64it/s] 19%|#9        | 5/26 [00:00<00:00, 22.94it/s] 35%|###4      | 9/26 [00:00<00:00, 28.53it/s] 50%|#####     | 13/26 [00:00<00:00, 31.24it/s] 65%|######5   | 17/26 [00:00<00:00, 32.77it/s] 81%|########  | 21/26 [00:00<00:00, 33.96it/s] 96%|#########6| 25/26 [00:00<00:00, 33.90it/s]100%|##########| 26/26 [00:00<00:00, 29.03it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1092 400
penalty weights 10000.0
args.step pgd_anneal_iters 1092 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1093 400
penalty weights 10000.0
args.step pgd_anneal_iters 1093 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1094 400
penalty weights 10000.0
args.step pgd_anneal_iters 1094 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1095 400
penalty weights 10000.0
args.step pgd_anneal_iters 1095 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1096 400
penalty weights 10000.0
args.step pgd_anneal_iters 1096 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1097 400
penalty weights 10000.0
args.step pgd_anneal_iters 1097 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1098 400
penalty weights 10000.0
args.step pgd_anneal_iters 1098 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1099 400
penalty weights 10000.0
args.step pgd_anneal_iters 1099 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1100 400
penalty weights 10000.0
args.step pgd_anneal_iters 1100 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1101 400
penalty weights 10000.0
args.step pgd_anneal_iters 1101 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1102 400
penalty weights 10000.0
args.step pgd_anneal_iters 1102 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1103 400
penalty weights 10000.0
args.step pgd_anneal_iters 1103 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1104 400
penalty weights 10000.0
args.step pgd_anneal_iters 1104 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1105 400
penalty weights 10000.0
args.step pgd_anneal_iters 1105 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1106 400
penalty weights 10000.0
args.step pgd_anneal_iters 1106 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1107 400
penalty weights 10000.0
args.step pgd_anneal_iters 1107 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1108 400
penalty weights 10000.0
args.step pgd_anneal_iters 1108 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1109 400
penalty weights 10000.0
args.step pgd_anneal_iters 1109 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1110 400
penalty weights 10000.0
args.step pgd_anneal_iters 1110 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1111 400
penalty weights 10000.0
args.step pgd_anneal_iters 1111 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1112 400
penalty weights 10000.0
args.step pgd_anneal_iters 1112 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1113 400
penalty weights 10000.0
args.step pgd_anneal_iters 1113 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1114 400
penalty weights 10000.0
args.step pgd_anneal_iters 1114 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1115 400
penalty weights 10000.0
args.step pgd_anneal_iters 1115 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1116 400
penalty weights 10000.0
args.step pgd_anneal_iters 1116 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1117 400
penalty weights 10000.0
args.step pgd_anneal_iters 1117 600
dim_v 512
Epoch: [42][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.12 (  0.12)	train_acc   0.42 (  0.50)	train_minacc   0.30 (  0.47)	train_majacc   0.44 (  0.50)	train_corr   0.00 (  0.00)	l1 17.7547 (17.7548)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.80it/s] 23%|##3       | 6/26 [00:00<00:00, 29.59it/s]                                               23%|##3       | 6/26 [00:00<00:00, 29.59it/s] 46%|####6     | 12/26 [00:00<00:00, 40.40it/s] 69%|######9   | 18/26 [00:00<00:00, 45.87it/s]                                                69%|######9   | 18/26 [00:00<00:00, 45.87it/s] 92%|#########2| 24/26 [00:00<00:00, 48.06it/s]100%|##########| 26/26 [00:00<00:00, 39.81it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.47 (  0.47)	test_minacc   0.57 (  0.57)	test_majacc   0.45 (  0.45)	Loss_d 0.693 (0.693)	test_acc_d   0.47 (  0.47)	test_minacc_d   0.57 (  0.57)	test_majacc_d   0.45 (  0.45)	test_corr_d  -0.13 ( -0.13)
Test: [  10/  26]	Loss 0.694 (0.694)	test_acc   0.44 (  0.45)	test_minacc   0.67 (  0.51)	test_majacc   0.40 (  0.43)	Loss_d 0.694 (0.694)	test_acc_d   0.44 (  0.45)	test_minacc_d   0.67 (  0.51)	test_majacc_d   0.40 (  0.43)	test_corr_d  -0.13 ( -0.12)
Test: [  20/  26]	Loss 0.694 (0.694)	test_acc   0.41 (  0.45)	test_minacc   0.52 (  0.50)	test_majacc   0.39 (  0.44)	Loss_d 0.694 (0.694)	test_acc_d   0.41 (  0.45)	test_minacc_d   0.52 (  0.50)	test_majacc_d   0.39 (  0.44)	test_corr_d  -0.19 ( -0.12)
Test: [  26/  26]	Loss 0.694 (0.694)	test_acc   0.40 (  0.44)	test_minacc   0.33 (  0.49)	test_majacc   0.41 (  0.44)	Loss_d 0.694 (0.694)	test_acc_d   0.40 (  0.44)	test_minacc_d   0.33 (  0.49)	test_majacc_d   0.41 (  0.44)	test_corr_d  -0.12 ( -0.12)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 67.20it/s]
Test: [  0/  1]	Loss 0.677 (0.677)	test_acc   0.76 (  0.76)	test_minacc   0.79 (  0.79)	test_majacc   0.56 (  0.56)	Loss_d 0.677 (0.677)	test_acc_d   0.76 (  0.76)	test_minacc_d   0.79 (  0.79)	test_majacc_d   0.56 (  0.56)	test_corr_d  -0.58 ( -0.58)
Test: [  1/  1]	Loss 0.677 (0.677)	test_acc   0.76 (  0.76)	test_minacc   0.79 (  0.79)	test_majacc   0.56 (  0.56)	Loss_d 0.677 (0.677)	test_acc_d   0.76 (  0.76)	test_minacc_d   0.79 (  0.79)	test_majacc_d   0.56 (  0.56)	test_corr_d  -0.58 ( -0.58)
Overall Timing[ 42/  1]	epoch_time 0.0367 (0.0380)	validation_time 0.0004 (0.0005)	train_time 0.0363 (0.0374)
record: (train_acc, test_acc) (0.6794000270962716, 0.7350000143051147)
last accs (train_acc, test_acc) (0.4435000050663948, 0.7630000114440918)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.10it/s] 19%|#9        | 5/26 [00:00<00:01, 17.71it/s] 35%|###4      | 9/26 [00:00<00:00, 24.40it/s] 50%|#####     | 13/26 [00:00<00:00, 28.40it/s] 65%|######5   | 17/26 [00:00<00:00, 30.57it/s] 81%|########  | 21/26 [00:00<00:00, 32.33it/s] 96%|#########6| 25/26 [00:00<00:00, 33.26it/s]100%|##########| 26/26 [00:00<00:00, 26.56it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1118 400
penalty weights 10000.0
args.step pgd_anneal_iters 1118 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1119 400
penalty weights 10000.0
args.step pgd_anneal_iters 1119 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1120 400
penalty weights 10000.0
args.step pgd_anneal_iters 1120 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1121 400
penalty weights 10000.0
args.step pgd_anneal_iters 1121 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1122 400
penalty weights 10000.0
args.step pgd_anneal_iters 1122 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1123 400
penalty weights 10000.0
args.step pgd_anneal_iters 1123 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1124 400
penalty weights 10000.0
args.step pgd_anneal_iters 1124 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1125 400
penalty weights 10000.0
args.step pgd_anneal_iters 1125 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1126 400
penalty weights 10000.0
args.step pgd_anneal_iters 1126 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1127 400
penalty weights 10000.0
args.step pgd_anneal_iters 1127 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1128 400
penalty weights 10000.0
args.step pgd_anneal_iters 1128 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1129 400
penalty weights 10000.0
args.step pgd_anneal_iters 1129 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1130 400
penalty weights 10000.0
args.step pgd_anneal_iters 1130 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1131 400
penalty weights 10000.0
args.step pgd_anneal_iters 1131 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1132 400
penalty weights 10000.0
args.step pgd_anneal_iters 1132 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1133 400
penalty weights 10000.0
args.step pgd_anneal_iters 1133 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1134 400
penalty weights 10000.0
args.step pgd_anneal_iters 1134 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1135 400
penalty weights 10000.0
args.step pgd_anneal_iters 1135 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1136 400
penalty weights 10000.0
args.step pgd_anneal_iters 1136 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1137 400
penalty weights 10000.0
args.step pgd_anneal_iters 1137 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1138 400
penalty weights 10000.0
args.step pgd_anneal_iters 1138 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1139 400
penalty weights 10000.0
args.step pgd_anneal_iters 1139 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1140 400
penalty weights 10000.0
args.step pgd_anneal_iters 1140 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1141 400
penalty weights 10000.0
args.step pgd_anneal_iters 1141 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1142 400
penalty weights 10000.0
args.step pgd_anneal_iters 1142 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1143 400
penalty weights 10000.0
args.step pgd_anneal_iters 1143 600
dim_v 512
Epoch: [43][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.12 (  0.12)	train_acc   0.43 (  0.50)	train_minacc   0.30 (  0.47)	train_majacc   0.45 (  0.50)	train_corr   0.00 (  0.00)	l1 17.7545 (17.7546)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.41it/s] 27%|##6       | 7/26 [00:00<00:00, 34.47it/s]                                               27%|##6       | 7/26 [00:00<00:00, 34.47it/s] 50%|#####     | 13/26 [00:00<00:00, 39.43it/s] 73%|#######3  | 19/26 [00:00<00:00, 45.34it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 45.34it/s] 96%|#########6| 25/26 [00:00<00:00, 46.69it/s]100%|##########| 26/26 [00:00<00:00, 38.80it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.47 (  0.47)	test_minacc   0.57 (  0.57)	test_majacc   0.45 (  0.45)	Loss_d 0.693 (0.693)	test_acc_d   0.47 (  0.47)	test_minacc_d   0.57 (  0.57)	test_majacc_d   0.45 (  0.45)	test_corr_d  -0.13 ( -0.13)
Test: [  10/  26]	Loss 0.694 (0.694)	test_acc   0.45 (  0.45)	test_minacc   0.66 (  0.51)	test_majacc   0.41 (  0.44)	Loss_d 0.694 (0.694)	test_acc_d   0.45 (  0.45)	test_minacc_d   0.66 (  0.51)	test_majacc_d   0.41 (  0.44)	test_corr_d  -0.13 ( -0.12)
Test: [  20/  26]	Loss 0.694 (0.694)	test_acc   0.40 (  0.45)	test_minacc   0.52 (  0.50)	test_majacc   0.39 (  0.44)	Loss_d 0.694 (0.694)	test_acc_d   0.40 (  0.45)	test_minacc_d   0.52 (  0.50)	test_majacc_d   0.39 (  0.44)	test_corr_d  -0.19 ( -0.12)
Test: [  26/  26]	Loss 0.694 (0.694)	test_acc   0.41 (  0.45)	test_minacc   0.30 (  0.49)	test_majacc   0.43 (  0.44)	Loss_d 0.694 (0.694)	test_acc_d   0.41 (  0.45)	test_minacc_d   0.30 (  0.49)	test_majacc_d   0.43 (  0.44)	test_corr_d  -0.12 ( -0.13)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 60.94it/s]
Test: [  0/  1]	Loss 0.677 (0.677)	test_acc   0.76 (  0.76)	test_minacc   0.79 (  0.79)	test_majacc   0.56 (  0.56)	Loss_d 0.677 (0.677)	test_acc_d   0.76 (  0.76)	test_minacc_d   0.79 (  0.79)	test_majacc_d   0.56 (  0.56)	test_corr_d  -0.58 ( -0.58)
Test: [  1/  1]	Loss 0.677 (0.677)	test_acc   0.76 (  0.76)	test_minacc   0.79 (  0.79)	test_majacc   0.56 (  0.56)	Loss_d 0.677 (0.677)	test_acc_d   0.76 (  0.76)	test_minacc_d   0.79 (  0.79)	test_majacc_d   0.56 (  0.56)	test_corr_d  -0.58 ( -0.58)
Overall Timing[ 43/  1]	epoch_time 0.0372 (0.0380)	validation_time 0.0005 (0.0005)	train_time 0.0367 (0.0374)
record: (train_acc, test_acc) (0.6794000270962716, 0.7350000143051147)
last accs (train_acc, test_acc) (0.44540000388026235, 0.7630000114440918)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.82it/s] 19%|#9        | 5/26 [00:00<00:00, 23.04it/s] 35%|###4      | 9/26 [00:00<00:00, 27.84it/s] 50%|#####     | 13/26 [00:00<00:00, 30.78it/s] 65%|######5   | 17/26 [00:00<00:00, 32.10it/s] 81%|########  | 21/26 [00:00<00:00, 33.22it/s] 96%|#########6| 25/26 [00:00<00:00, 33.01it/s]100%|##########| 26/26 [00:00<00:00, 28.55it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1144 400
penalty weights 10000.0
args.step pgd_anneal_iters 1144 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1145 400
penalty weights 10000.0
args.step pgd_anneal_iters 1145 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1146 400
penalty weights 10000.0
args.step pgd_anneal_iters 1146 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1147 400
penalty weights 10000.0
args.step pgd_anneal_iters 1147 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1148 400
penalty weights 10000.0
args.step pgd_anneal_iters 1148 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1149 400
penalty weights 10000.0
args.step pgd_anneal_iters 1149 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1150 400
penalty weights 10000.0
args.step pgd_anneal_iters 1150 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1151 400
penalty weights 10000.0
args.step pgd_anneal_iters 1151 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1152 400
penalty weights 10000.0
args.step pgd_anneal_iters 1152 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1153 400
penalty weights 10000.0
args.step pgd_anneal_iters 1153 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1154 400
penalty weights 10000.0
args.step pgd_anneal_iters 1154 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1155 400
penalty weights 10000.0
args.step pgd_anneal_iters 1155 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1156 400
penalty weights 10000.0
args.step pgd_anneal_iters 1156 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1157 400
penalty weights 10000.0
args.step pgd_anneal_iters 1157 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1158 400
penalty weights 10000.0
args.step pgd_anneal_iters 1158 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1159 400
penalty weights 10000.0
args.step pgd_anneal_iters 1159 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1160 400
penalty weights 10000.0
args.step pgd_anneal_iters 1160 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1161 400
penalty weights 10000.0
args.step pgd_anneal_iters 1161 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1162 400
penalty weights 10000.0
args.step pgd_anneal_iters 1162 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1163 400
penalty weights 10000.0
args.step pgd_anneal_iters 1163 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1164 400
penalty weights 10000.0
args.step pgd_anneal_iters 1164 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1165 400
penalty weights 10000.0
args.step pgd_anneal_iters 1165 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1166 400
penalty weights 10000.0
args.step pgd_anneal_iters 1166 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1167 400
penalty weights 10000.0
args.step pgd_anneal_iters 1167 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1168 400
penalty weights 10000.0
args.step pgd_anneal_iters 1168 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1169 400
penalty weights 10000.0
args.step pgd_anneal_iters 1169 600
dim_v 512
Epoch: [44][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.12 (  0.12)	train_acc   0.44 (  0.50)	train_minacc   0.30 (  0.47)	train_majacc   0.46 (  0.50)	train_corr   0.00 (  0.00)	l1 17.7543 (17.7544)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.96it/s] 23%|##3       | 6/26 [00:00<00:00, 31.48it/s]                                               23%|##3       | 6/26 [00:00<00:00, 31.48it/s] 42%|####2     | 11/26 [00:00<00:00, 37.89it/s] 65%|######5   | 17/26 [00:00<00:00, 43.10it/s]                                                65%|######5   | 17/26 [00:00<00:00, 43.10it/s] 88%|########8 | 23/26 [00:00<00:00, 45.73it/s]100%|##########| 26/26 [00:00<00:00, 38.90it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.47 (  0.47)	test_minacc   0.57 (  0.57)	test_majacc   0.46 (  0.46)	Loss_d 0.693 (0.693)	test_acc_d   0.47 (  0.47)	test_minacc_d   0.57 (  0.57)	test_majacc_d   0.46 (  0.46)	test_corr_d  -0.13 ( -0.13)
Test: [  10/  26]	Loss 0.694 (0.694)	test_acc   0.45 (  0.45)	test_minacc   0.66 (  0.51)	test_majacc   0.42 (  0.44)	Loss_d 0.694 (0.694)	test_acc_d   0.45 (  0.45)	test_minacc_d   0.66 (  0.51)	test_majacc_d   0.42 (  0.44)	test_corr_d  -0.13 ( -0.12)
Test: [  20/  26]	Loss 0.694 (0.694)	test_acc   0.41 (  0.45)	test_minacc   0.54 (  0.50)	test_majacc   0.39 (  0.45)	Loss_d 0.694 (0.694)	test_acc_d   0.41 (  0.45)	test_minacc_d   0.54 (  0.50)	test_majacc_d   0.39 (  0.45)	test_corr_d  -0.19 ( -0.13)
Test: [  26/  26]	Loss 0.694 (0.694)	test_acc   0.42 (  0.45)	test_minacc   0.35 (  0.49)	test_majacc   0.44 (  0.44)	Loss_d 0.694 (0.694)	test_acc_d   0.42 (  0.45)	test_minacc_d   0.35 (  0.49)	test_majacc_d   0.44 (  0.44)	test_corr_d  -0.12 ( -0.13)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 64.15it/s]
Test: [  0/  1]	Loss 0.677 (0.677)	test_acc   0.76 (  0.76)	test_minacc   0.78 (  0.78)	test_majacc   0.56 (  0.56)	Loss_d 0.677 (0.677)	test_acc_d   0.76 (  0.76)	test_minacc_d   0.78 (  0.78)	test_majacc_d   0.56 (  0.56)	test_corr_d  -0.58 ( -0.58)
Test: [  1/  1]	Loss 0.677 (0.677)	test_acc   0.76 (  0.76)	test_minacc   0.78 (  0.78)	test_majacc   0.56 (  0.56)	Loss_d 0.677 (0.677)	test_acc_d   0.76 (  0.76)	test_minacc_d   0.78 (  0.78)	test_majacc_d   0.56 (  0.56)	test_corr_d  -0.58 ( -0.58)
Overall Timing[ 44/  1]	epoch_time 0.0367 (0.0380)	validation_time 0.0003 (0.0005)	train_time 0.0363 (0.0374)
record: (train_acc, test_acc) (0.6794000270962716, 0.7350000143051147)
last accs (train_acc, test_acc) (0.44990000465512275, 0.7620000243186951)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.98it/s] 15%|#5        | 4/26 [00:00<00:01, 17.10it/s] 31%|###       | 8/26 [00:00<00:00, 24.23it/s] 46%|####6     | 12/26 [00:00<00:00, 28.26it/s] 62%|######1   | 16/26 [00:00<00:00, 30.71it/s] 77%|#######6  | 20/26 [00:00<00:00, 31.67it/s] 92%|#########2| 24/26 [00:00<00:00, 32.39it/s]100%|##########| 26/26 [00:00<00:00, 26.97it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1170 400
penalty weights 10000.0
args.step pgd_anneal_iters 1170 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1171 400
penalty weights 10000.0
args.step pgd_anneal_iters 1171 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1172 400
penalty weights 10000.0
args.step pgd_anneal_iters 1172 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1173 400
penalty weights 10000.0
args.step pgd_anneal_iters 1173 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1174 400
penalty weights 10000.0
args.step pgd_anneal_iters 1174 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1175 400
penalty weights 10000.0
args.step pgd_anneal_iters 1175 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1176 400
penalty weights 10000.0
args.step pgd_anneal_iters 1176 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1177 400
penalty weights 10000.0
args.step pgd_anneal_iters 1177 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1178 400
penalty weights 10000.0
args.step pgd_anneal_iters 1178 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1179 400
penalty weights 10000.0
args.step pgd_anneal_iters 1179 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1180 400
penalty weights 10000.0
args.step pgd_anneal_iters 1180 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1181 400
penalty weights 10000.0
args.step pgd_anneal_iters 1181 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1182 400
penalty weights 10000.0
args.step pgd_anneal_iters 1182 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1183 400
penalty weights 10000.0
args.step pgd_anneal_iters 1183 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1184 400
penalty weights 10000.0
args.step pgd_anneal_iters 1184 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1185 400
penalty weights 10000.0
args.step pgd_anneal_iters 1185 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1186 400
penalty weights 10000.0
args.step pgd_anneal_iters 1186 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1187 400
penalty weights 10000.0
args.step pgd_anneal_iters 1187 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1188 400
penalty weights 10000.0
args.step pgd_anneal_iters 1188 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1189 400
penalty weights 10000.0
args.step pgd_anneal_iters 1189 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1190 400
penalty weights 10000.0
args.step pgd_anneal_iters 1190 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1191 400
penalty weights 10000.0
args.step pgd_anneal_iters 1191 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1192 400
penalty weights 10000.0
args.step pgd_anneal_iters 1192 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1193 400
penalty weights 10000.0
args.step pgd_anneal_iters 1193 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1194 400
penalty weights 10000.0
args.step pgd_anneal_iters 1194 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1195 400
penalty weights 10000.0
args.step pgd_anneal_iters 1195 600
dim_v 512
Epoch: [45][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.12 (  0.12)	train_acc   0.43 (  0.50)	train_minacc   0.30 (  0.46)	train_majacc   0.46 (  0.51)	train_corr   0.00 (  0.00)	l1 17.7541 (17.7541)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.92it/s] 27%|##6       | 7/26 [00:00<00:00, 34.94it/s]                                               27%|##6       | 7/26 [00:00<00:00, 34.94it/s] 50%|#####     | 13/26 [00:00<00:00, 43.06it/s] 69%|######9   | 18/26 [00:00<00:00, 43.97it/s]                                                69%|######9   | 18/26 [00:00<00:00, 43.97it/s] 92%|#########2| 24/26 [00:00<00:00, 48.55it/s]100%|##########| 26/26 [00:00<00:00, 40.20it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.46 (  0.46)	test_minacc   0.57 (  0.57)	test_majacc   0.44 (  0.44)	Loss_d 0.693 (0.693)	test_acc_d   0.46 (  0.46)	test_minacc_d   0.57 (  0.57)	test_majacc_d   0.44 (  0.44)	test_corr_d  -0.13 ( -0.13)
Test: [  10/  26]	Loss 0.694 (0.694)	test_acc   0.44 (  0.45)	test_minacc   0.62 (  0.51)	test_majacc   0.41 (  0.44)	Loss_d 0.694 (0.694)	test_acc_d   0.44 (  0.45)	test_minacc_d   0.62 (  0.51)	test_majacc_d   0.41 (  0.44)	test_corr_d  -0.13 ( -0.13)
Test: [  20/  26]	Loss 0.694 (0.694)	test_acc   0.42 (  0.45)	test_minacc   0.54 (  0.50)	test_majacc   0.40 (  0.45)	Loss_d 0.694 (0.694)	test_acc_d   0.42 (  0.45)	test_minacc_d   0.54 (  0.50)	test_majacc_d   0.40 (  0.45)	test_corr_d  -0.20 ( -0.13)
Test: [  26/  26]	Loss 0.694 (0.694)	test_acc   0.42 (  0.45)	test_minacc   0.33 (  0.49)	test_majacc   0.44 (  0.44)	Loss_d 0.694 (0.694)	test_acc_d   0.42 (  0.45)	test_minacc_d   0.33 (  0.49)	test_majacc_d   0.44 (  0.44)	test_corr_d  -0.12 ( -0.13)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.52it/s]
Test: [  0/  1]	Loss 0.677 (0.677)	test_acc   0.76 (  0.76)	test_minacc   0.79 (  0.79)	test_majacc   0.56 (  0.56)	Loss_d 0.677 (0.677)	test_acc_d   0.76 (  0.76)	test_minacc_d   0.79 (  0.79)	test_majacc_d   0.56 (  0.56)	test_corr_d  -0.58 ( -0.58)
Test: [  1/  1]	Loss 0.677 (0.677)	test_acc   0.76 (  0.76)	test_minacc   0.79 (  0.79)	test_majacc   0.56 (  0.56)	Loss_d 0.677 (0.677)	test_acc_d   0.76 (  0.76)	test_minacc_d   0.79 (  0.79)	test_majacc_d   0.56 (  0.56)	test_corr_d  -0.58 ( -0.58)
Overall Timing[ 45/  1]	epoch_time 0.0362 (0.0379)	validation_time 0.0004 (0.0005)	train_time 0.0358 (0.0373)
record: (train_acc, test_acc) (0.6794000270962716, 0.7350000143051147)
last accs (train_acc, test_acc) (0.4489000035524368, 0.7640000581741333)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.28it/s] 19%|#9        | 5/26 [00:00<00:00, 22.24it/s] 35%|###4      | 9/26 [00:00<00:00, 26.93it/s] 50%|#####     | 13/26 [00:00<00:00, 29.18it/s] 65%|######5   | 17/26 [00:00<00:00, 31.23it/s] 81%|########  | 21/26 [00:00<00:00, 32.14it/s] 96%|#########6| 25/26 [00:00<00:00, 32.61it/s]100%|##########| 26/26 [00:00<00:00, 27.97it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1196 400
penalty weights 10000.0
args.step pgd_anneal_iters 1196 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1197 400
penalty weights 10000.0
args.step pgd_anneal_iters 1197 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1198 400
penalty weights 10000.0
args.step pgd_anneal_iters 1198 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1199 400
penalty weights 10000.0
args.step pgd_anneal_iters 1199 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1200 400
penalty weights 10000.0
args.step pgd_anneal_iters 1200 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1201 400
penalty weights 10000.0
args.step pgd_anneal_iters 1201 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1202 400
penalty weights 10000.0
args.step pgd_anneal_iters 1202 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1203 400
penalty weights 10000.0
args.step pgd_anneal_iters 1203 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1204 400
penalty weights 10000.0
args.step pgd_anneal_iters 1204 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1205 400
penalty weights 10000.0
args.step pgd_anneal_iters 1205 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1206 400
penalty weights 10000.0
args.step pgd_anneal_iters 1206 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1207 400
penalty weights 10000.0
args.step pgd_anneal_iters 1207 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1208 400
penalty weights 10000.0
args.step pgd_anneal_iters 1208 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1209 400
penalty weights 10000.0
args.step pgd_anneal_iters 1209 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1210 400
penalty weights 10000.0
args.step pgd_anneal_iters 1210 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1211 400
penalty weights 10000.0
args.step pgd_anneal_iters 1211 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1212 400
penalty weights 10000.0
args.step pgd_anneal_iters 1212 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1213 400
penalty weights 10000.0
args.step pgd_anneal_iters 1213 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1214 400
penalty weights 10000.0
args.step pgd_anneal_iters 1214 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1215 400
penalty weights 10000.0
args.step pgd_anneal_iters 1215 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1216 400
penalty weights 10000.0
args.step pgd_anneal_iters 1216 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1217 400
penalty weights 10000.0
args.step pgd_anneal_iters 1217 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1218 400
penalty weights 10000.0
args.step pgd_anneal_iters 1218 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1219 400
penalty weights 10000.0
args.step pgd_anneal_iters 1219 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1220 400
penalty weights 10000.0
args.step pgd_anneal_iters 1220 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1221 400
penalty weights 10000.0
args.step pgd_anneal_iters 1221 600
dim_v 512
Epoch: [46][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.12 (  0.12)	train_acc   0.44 (  0.50)	train_minacc   0.33 (  0.46)	train_majacc   0.46 (  0.51)	train_corr   0.00 (  0.00)	l1 17.7538 (17.7539)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.47it/s] 27%|##6       | 7/26 [00:00<00:00, 34.33it/s]                                               27%|##6       | 7/26 [00:00<00:00, 34.33it/s] 50%|#####     | 13/26 [00:00<00:00, 40.01it/s] 73%|#######3  | 19/26 [00:00<00:00, 46.52it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 46.52it/s] 96%|#########6| 25/26 [00:00<00:00, 47.13it/s]100%|##########| 26/26 [00:00<00:00, 39.33it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.46 (  0.46)	test_minacc   0.57 (  0.57)	test_majacc   0.44 (  0.44)	Loss_d 0.693 (0.693)	test_acc_d   0.46 (  0.46)	test_minacc_d   0.57 (  0.57)	test_majacc_d   0.44 (  0.44)	test_corr_d  -0.13 ( -0.13)
Test: [  10/  26]	Loss 0.694 (0.694)	test_acc   0.44 (  0.45)	test_minacc   0.60 (  0.51)	test_majacc   0.41 (  0.44)	Loss_d 0.694 (0.694)	test_acc_d   0.44 (  0.45)	test_minacc_d   0.60 (  0.51)	test_majacc_d   0.41 (  0.44)	test_corr_d  -0.13 ( -0.13)
Test: [  20/  26]	Loss 0.694 (0.694)	test_acc   0.41 (  0.45)	test_minacc   0.54 (  0.49)	test_majacc   0.39 (  0.45)	Loss_d 0.694 (0.694)	test_acc_d   0.41 (  0.45)	test_minacc_d   0.54 (  0.49)	test_majacc_d   0.39 (  0.45)	test_corr_d  -0.20 ( -0.13)
Test: [  26/  26]	Loss 0.694 (0.694)	test_acc   0.42 (  0.45)	test_minacc   0.33 (  0.49)	test_majacc   0.44 (  0.44)	Loss_d 0.694 (0.694)	test_acc_d   0.42 (  0.45)	test_minacc_d   0.33 (  0.49)	test_majacc_d   0.44 (  0.44)	test_corr_d  -0.11 ( -0.13)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 67.01it/s]
Test: [  0/  1]	Loss 0.677 (0.677)	test_acc   0.76 (  0.76)	test_minacc   0.79 (  0.79)	test_majacc   0.55 (  0.55)	Loss_d 0.677 (0.677)	test_acc_d   0.76 (  0.76)	test_minacc_d   0.79 (  0.79)	test_majacc_d   0.55 (  0.55)	test_corr_d  -0.58 ( -0.58)
Test: [  1/  1]	Loss 0.677 (0.677)	test_acc   0.76 (  0.76)	test_minacc   0.79 (  0.79)	test_majacc   0.55 (  0.55)	Loss_d 0.677 (0.677)	test_acc_d   0.76 (  0.76)	test_minacc_d   0.79 (  0.79)	test_majacc_d   0.55 (  0.55)	test_corr_d  -0.58 ( -0.58)
Overall Timing[ 46/  1]	epoch_time 0.0372 (0.0379)	validation_time 0.0003 (0.0005)	train_time 0.0369 (0.0373)
record: (train_acc, test_acc) (0.6794000270962716, 0.7350000143051147)
last accs (train_acc, test_acc) (0.4490000058710575, 0.7620000243186951)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.96it/s] 15%|#5        | 4/26 [00:00<00:01, 16.91it/s] 31%|###       | 8/26 [00:00<00:00, 24.35it/s] 46%|####6     | 12/26 [00:00<00:00, 28.52it/s] 62%|######1   | 16/26 [00:00<00:00, 31.28it/s] 77%|#######6  | 20/26 [00:00<00:00, 33.09it/s] 92%|#########2| 24/26 [00:00<00:00, 33.83it/s]100%|##########| 26/26 [00:00<00:00, 27.40it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1222 400
penalty weights 10000.0
args.step pgd_anneal_iters 1222 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1223 400
penalty weights 10000.0
args.step pgd_anneal_iters 1223 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1224 400
penalty weights 10000.0
args.step pgd_anneal_iters 1224 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1225 400
penalty weights 10000.0
args.step pgd_anneal_iters 1225 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1226 400
penalty weights 10000.0
args.step pgd_anneal_iters 1226 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1227 400
penalty weights 10000.0
args.step pgd_anneal_iters 1227 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1228 400
penalty weights 10000.0
args.step pgd_anneal_iters 1228 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1229 400
penalty weights 10000.0
args.step pgd_anneal_iters 1229 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1230 400
penalty weights 10000.0
args.step pgd_anneal_iters 1230 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1231 400
penalty weights 10000.0
args.step pgd_anneal_iters 1231 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1232 400
penalty weights 10000.0
args.step pgd_anneal_iters 1232 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1233 400
penalty weights 10000.0
args.step pgd_anneal_iters 1233 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1234 400
penalty weights 10000.0
args.step pgd_anneal_iters 1234 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1235 400
penalty weights 10000.0
args.step pgd_anneal_iters 1235 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1236 400
penalty weights 10000.0
args.step pgd_anneal_iters 1236 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1237 400
penalty weights 10000.0
args.step pgd_anneal_iters 1237 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1238 400
penalty weights 10000.0
args.step pgd_anneal_iters 1238 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1239 400
penalty weights 10000.0
args.step pgd_anneal_iters 1239 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1240 400
penalty weights 10000.0
args.step pgd_anneal_iters 1240 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1241 400
penalty weights 10000.0
args.step pgd_anneal_iters 1241 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1242 400
penalty weights 10000.0
args.step pgd_anneal_iters 1242 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1243 400
penalty weights 10000.0
args.step pgd_anneal_iters 1243 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1244 400
penalty weights 10000.0
args.step pgd_anneal_iters 1244 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1245 400
penalty weights 10000.0
args.step pgd_anneal_iters 1245 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1246 400
penalty weights 10000.0
args.step pgd_anneal_iters 1246 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1247 400
penalty weights 10000.0
args.step pgd_anneal_iters 1247 600
dim_v 512
Epoch: [47][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.12 (  0.12)	train_acc   0.44 (  0.50)	train_minacc   0.35 (  0.47)	train_majacc   0.46 (  0.51)	train_corr   0.00 (  0.00)	l1 17.7536 (17.7537)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  6.21it/s] 27%|##6       | 7/26 [00:00<00:00, 30.77it/s]                                               27%|##6       | 7/26 [00:00<00:00, 30.77it/s] 50%|#####     | 13/26 [00:00<00:00, 38.53it/s] 73%|#######3  | 19/26 [00:00<00:00, 45.59it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 45.59it/s] 96%|#########6| 25/26 [00:00<00:00, 46.85it/s]100%|##########| 26/26 [00:00<00:00, 37.75it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.46 (  0.46)	test_minacc   0.57 (  0.57)	test_majacc   0.44 (  0.44)	Loss_d 0.693 (0.693)	test_acc_d   0.46 (  0.46)	test_minacc_d   0.57 (  0.57)	test_majacc_d   0.44 (  0.44)	test_corr_d  -0.13 ( -0.13)
Test: [  10/  26]	Loss 0.694 (0.694)	test_acc   0.43 (  0.45)	test_minacc   0.59 (  0.51)	test_majacc   0.41 (  0.44)	Loss_d 0.694 (0.694)	test_acc_d   0.43 (  0.45)	test_minacc_d   0.59 (  0.51)	test_majacc_d   0.41 (  0.44)	test_corr_d  -0.13 ( -0.13)
Test: [  20/  26]	Loss 0.694 (0.694)	test_acc   0.43 (  0.46)	test_minacc   0.58 (  0.50)	test_majacc   0.41 (  0.45)	Loss_d 0.694 (0.694)	test_acc_d   0.43 (  0.46)	test_minacc_d   0.58 (  0.50)	test_majacc_d   0.41 (  0.45)	test_corr_d  -0.20 ( -0.13)
Test: [  26/  26]	Loss 0.694 (0.694)	test_acc   0.44 (  0.45)	test_minacc   0.35 (  0.49)	test_majacc   0.45 (  0.44)	Loss_d 0.694 (0.694)	test_acc_d   0.44 (  0.45)	test_minacc_d   0.35 (  0.49)	test_majacc_d   0.45 (  0.44)	test_corr_d  -0.11 ( -0.13)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.05it/s]
Test: [  0/  1]	Loss 0.677 (0.677)	test_acc   0.76 (  0.76)	test_minacc   0.79 (  0.79)	test_majacc   0.55 (  0.55)	Loss_d 0.677 (0.677)	test_acc_d   0.76 (  0.76)	test_minacc_d   0.79 (  0.79)	test_majacc_d   0.55 (  0.55)	test_corr_d  -0.58 ( -0.58)
Test: [  1/  1]	Loss 0.677 (0.677)	test_acc   0.76 (  0.76)	test_minacc   0.79 (  0.79)	test_majacc   0.55 (  0.55)	Loss_d 0.677 (0.677)	test_acc_d   0.76 (  0.76)	test_minacc_d   0.79 (  0.79)	test_majacc_d   0.55 (  0.55)	test_corr_d  -0.58 ( -0.58)
Overall Timing[ 47/  1]	epoch_time 0.0372 (0.0379)	validation_time 0.0003 (0.0005)	train_time 0.0369 (0.0373)
record: (train_acc, test_acc) (0.6794000270962716, 0.7350000143051147)
last accs (train_acc, test_acc) (0.4513000032901764, 0.7620000243186951)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.53it/s] 19%|#9        | 5/26 [00:00<00:01, 18.24it/s] 35%|###4      | 9/26 [00:00<00:00, 24.87it/s] 50%|#####     | 13/26 [00:00<00:00, 28.98it/s] 65%|######5   | 17/26 [00:00<00:00, 31.20it/s] 81%|########  | 21/26 [00:00<00:00, 29.95it/s] 96%|#########6| 25/26 [00:00<00:00, 30.95it/s]100%|##########| 26/26 [00:00<00:00, 26.01it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1248 400
penalty weights 10000.0
args.step pgd_anneal_iters 1248 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1249 400
penalty weights 10000.0
args.step pgd_anneal_iters 1249 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1250 400
penalty weights 10000.0
args.step pgd_anneal_iters 1250 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1251 400
penalty weights 10000.0
args.step pgd_anneal_iters 1251 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1252 400
penalty weights 10000.0
args.step pgd_anneal_iters 1252 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1253 400
penalty weights 10000.0
args.step pgd_anneal_iters 1253 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1254 400
penalty weights 10000.0
args.step pgd_anneal_iters 1254 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1255 400
penalty weights 10000.0
args.step pgd_anneal_iters 1255 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1256 400
penalty weights 10000.0
args.step pgd_anneal_iters 1256 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1257 400
penalty weights 10000.0
args.step pgd_anneal_iters 1257 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1258 400
penalty weights 10000.0
args.step pgd_anneal_iters 1258 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1259 400
penalty weights 10000.0
args.step pgd_anneal_iters 1259 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1260 400
penalty weights 10000.0
args.step pgd_anneal_iters 1260 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1261 400
penalty weights 10000.0
args.step pgd_anneal_iters 1261 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1262 400
penalty weights 10000.0
args.step pgd_anneal_iters 1262 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1263 400
penalty weights 10000.0
args.step pgd_anneal_iters 1263 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1264 400
penalty weights 10000.0
args.step pgd_anneal_iters 1264 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1265 400
penalty weights 10000.0
args.step pgd_anneal_iters 1265 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1266 400
penalty weights 10000.0
args.step pgd_anneal_iters 1266 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1267 400
penalty weights 10000.0
args.step pgd_anneal_iters 1267 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1268 400
penalty weights 10000.0
args.step pgd_anneal_iters 1268 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1269 400
penalty weights 10000.0
args.step pgd_anneal_iters 1269 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1270 400
penalty weights 10000.0
args.step pgd_anneal_iters 1270 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1271 400
penalty weights 10000.0
args.step pgd_anneal_iters 1271 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1272 400
penalty weights 10000.0
args.step pgd_anneal_iters 1272 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1273 400
penalty weights 10000.0
args.step pgd_anneal_iters 1273 600
dim_v 512
Epoch: [48][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.12 (  0.12)	train_acc   0.44 (  0.50)	train_minacc   0.35 (  0.47)	train_majacc   0.46 (  0.51)	train_corr   0.00 (  0.00)	l1 17.7534 (17.7535)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 19.84it/s] 31%|###       | 8/26 [00:00<00:00, 41.02it/s]                                               31%|###       | 8/26 [00:00<00:00, 41.02it/s] 54%|#####3    | 14/26 [00:00<00:00, 47.50it/s] 73%|#######3  | 19/26 [00:00<00:00, 47.71it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 47.71it/s] 96%|#########6| 25/26 [00:00<00:00, 50.33it/s]100%|##########| 26/26 [00:00<00:00, 43.12it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.45 (  0.45)	test_minacc   0.55 (  0.55)	test_majacc   0.43 (  0.43)	Loss_d 0.693 (0.693)	test_acc_d   0.45 (  0.45)	test_minacc_d   0.55 (  0.55)	test_majacc_d   0.43 (  0.43)	test_corr_d  -0.14 ( -0.14)
Test: [  10/  26]	Loss 0.694 (0.694)	test_acc   0.43 (  0.45)	test_minacc   0.57 (  0.50)	test_majacc   0.40 (  0.44)	Loss_d 0.694 (0.694)	test_acc_d   0.43 (  0.45)	test_minacc_d   0.57 (  0.50)	test_majacc_d   0.40 (  0.44)	test_corr_d  -0.13 ( -0.13)
Test: [  20/  26]	Loss 0.694 (0.694)	test_acc   0.43 (  0.46)	test_minacc   0.58 (  0.50)	test_majacc   0.41 (  0.45)	Loss_d 0.694 (0.694)	test_acc_d   0.43 (  0.46)	test_minacc_d   0.58 (  0.50)	test_majacc_d   0.41 (  0.45)	test_corr_d  -0.21 ( -0.13)
Test: [  26/  26]	Loss 0.694 (0.694)	test_acc   0.43 (  0.45)	test_minacc   0.35 (  0.49)	test_majacc   0.45 (  0.44)	Loss_d 0.694 (0.694)	test_acc_d   0.43 (  0.45)	test_minacc_d   0.35 (  0.49)	test_majacc_d   0.45 (  0.44)	test_corr_d  -0.11 ( -0.13)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 64.33it/s]
Test: [  0/  1]	Loss 0.677 (0.677)	test_acc   0.76 (  0.76)	test_minacc   0.79 (  0.79)	test_majacc   0.56 (  0.56)	Loss_d 0.677 (0.677)	test_acc_d   0.76 (  0.76)	test_minacc_d   0.79 (  0.79)	test_majacc_d   0.56 (  0.56)	test_corr_d  -0.58 ( -0.58)
Test: [  1/  1]	Loss 0.677 (0.677)	test_acc   0.76 (  0.76)	test_minacc   0.79 (  0.79)	test_majacc   0.56 (  0.56)	Loss_d 0.677 (0.677)	test_acc_d   0.76 (  0.76)	test_minacc_d   0.79 (  0.79)	test_majacc_d   0.56 (  0.56)	test_corr_d  -0.58 ( -0.58)
Overall Timing[ 48/  1]	epoch_time 0.0373 (0.0379)	validation_time 0.0004 (0.0005)	train_time 0.0368 (0.0373)
record: (train_acc, test_acc) (0.6794000270962716, 0.7350000143051147)
last accs (train_acc, test_acc) (0.4507000042796135, 0.7630000114440918)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.78it/s] 15%|#5        | 4/26 [00:00<00:01, 19.03it/s] 31%|###       | 8/26 [00:00<00:00, 25.55it/s] 46%|####6     | 12/26 [00:00<00:00, 29.19it/s] 62%|######1   | 16/26 [00:00<00:00, 30.34it/s] 77%|#######6  | 20/26 [00:00<00:00, 31.34it/s] 92%|#########2| 24/26 [00:00<00:00, 32.36it/s]100%|##########| 26/26 [00:00<00:00, 27.40it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1274 400
penalty weights 10000.0
args.step pgd_anneal_iters 1274 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1275 400
penalty weights 10000.0
args.step pgd_anneal_iters 1275 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1276 400
penalty weights 10000.0
args.step pgd_anneal_iters 1276 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1277 400
penalty weights 10000.0
args.step pgd_anneal_iters 1277 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1278 400
penalty weights 10000.0
args.step pgd_anneal_iters 1278 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1279 400
penalty weights 10000.0
args.step pgd_anneal_iters 1279 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1280 400
penalty weights 10000.0
args.step pgd_anneal_iters 1280 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1281 400
penalty weights 10000.0
args.step pgd_anneal_iters 1281 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1282 400
penalty weights 10000.0
args.step pgd_anneal_iters 1282 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1283 400
penalty weights 10000.0
args.step pgd_anneal_iters 1283 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1284 400
penalty weights 10000.0
args.step pgd_anneal_iters 1284 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1285 400
penalty weights 10000.0
args.step pgd_anneal_iters 1285 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1286 400
penalty weights 10000.0
args.step pgd_anneal_iters 1286 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1287 400
penalty weights 10000.0
args.step pgd_anneal_iters 1287 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1288 400
penalty weights 10000.0
args.step pgd_anneal_iters 1288 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1289 400
penalty weights 10000.0
args.step pgd_anneal_iters 1289 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1290 400
penalty weights 10000.0
args.step pgd_anneal_iters 1290 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1291 400
penalty weights 10000.0
args.step pgd_anneal_iters 1291 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1292 400
penalty weights 10000.0
args.step pgd_anneal_iters 1292 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1293 400
penalty weights 10000.0
args.step pgd_anneal_iters 1293 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1294 400
penalty weights 10000.0
args.step pgd_anneal_iters 1294 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1295 400
penalty weights 10000.0
args.step pgd_anneal_iters 1295 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1296 400
penalty weights 10000.0
args.step pgd_anneal_iters 1296 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1297 400
penalty weights 10000.0
args.step pgd_anneal_iters 1297 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1298 400
penalty weights 10000.0
args.step pgd_anneal_iters 1298 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1299 400
penalty weights 10000.0
args.step pgd_anneal_iters 1299 600
dim_v 512
Epoch: [49][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.12 (  0.12)	train_acc   0.45 (  0.50)	train_minacc   0.37 (  0.47)	train_majacc   0.47 (  0.51)	train_corr   0.00 (  0.00)	l1 17.7532 (17.7533)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:00, 28.29it/s] 35%|###4      | 9/26 [00:00<00:00, 42.37it/s]                                               35%|###4      | 9/26 [00:00<00:00, 42.37it/s] 54%|#####3    | 14/26 [00:00<00:00, 45.52it/s] 77%|#######6  | 20/26 [00:00<00:00, 49.09it/s]                                                77%|#######6  | 20/26 [00:00<00:00, 49.09it/s]100%|##########| 26/26 [00:00<00:00, 51.27it/s]100%|##########| 26/26 [00:00<00:00, 43.03it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.45 (  0.45)	test_minacc   0.55 (  0.55)	test_majacc   0.43 (  0.43)	Loss_d 0.693 (0.693)	test_acc_d   0.45 (  0.45)	test_minacc_d   0.55 (  0.55)	test_majacc_d   0.43 (  0.43)	test_corr_d  -0.13 ( -0.13)
Test: [  10/  26]	Loss 0.694 (0.694)	test_acc   0.44 (  0.45)	test_minacc   0.55 (  0.50)	test_majacc   0.42 (  0.44)	Loss_d 0.694 (0.694)	test_acc_d   0.44 (  0.45)	test_minacc_d   0.55 (  0.50)	test_majacc_d   0.42 (  0.44)	test_corr_d  -0.13 ( -0.13)
Test: [  20/  26]	Loss 0.694 (0.694)	test_acc   0.43 (  0.46)	test_minacc   0.58 (  0.49)	test_majacc   0.41 (  0.45)	Loss_d 0.694 (0.694)	test_acc_d   0.43 (  0.46)	test_minacc_d   0.58 (  0.49)	test_majacc_d   0.41 (  0.45)	test_corr_d  -0.21 ( -0.13)
Test: [  26/  26]	Loss 0.694 (0.694)	test_acc   0.44 (  0.45)	test_minacc   0.37 (  0.49)	test_majacc   0.46 (  0.45)	Loss_d 0.694 (0.694)	test_acc_d   0.44 (  0.45)	test_minacc_d   0.37 (  0.49)	test_majacc_d   0.46 (  0.45)	test_corr_d  -0.11 ( -0.13)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 57.56it/s]
Test: [  0/  1]	Loss 0.677 (0.677)	test_acc   0.76 (  0.76)	test_minacc   0.79 (  0.79)	test_majacc   0.56 (  0.56)	Loss_d 0.677 (0.677)	test_acc_d   0.76 (  0.76)	test_minacc_d   0.79 (  0.79)	test_majacc_d   0.56 (  0.56)	test_corr_d  -0.59 ( -0.59)
Test: [  1/  1]	Loss 0.677 (0.677)	test_acc   0.76 (  0.76)	test_minacc   0.79 (  0.79)	test_majacc   0.56 (  0.56)	Loss_d 0.677 (0.677)	test_acc_d   0.76 (  0.76)	test_minacc_d   0.79 (  0.79)	test_majacc_d   0.56 (  0.56)	test_corr_d  -0.59 ( -0.59)
Overall Timing[ 49/  1]	epoch_time 0.0355 (0.0378)	validation_time 0.0005 (0.0005)	train_time 0.0350 (0.0372)
record: (train_acc, test_acc) (0.6794000270962716, 0.7350000143051147)
last accs (train_acc, test_acc) (0.45270000594854354, 0.7640000581741333)
done saving aggregate.csv to ./aggregate.csv
wandb: - 0.096 MB of 0.096 MB uploadedwandb: \ 0.096 MB of 0.096 MB uploadedwandb: | 0.096 MB of 0.096 MB uploadedwandb: / 0.096 MB of 0.096 MB uploadedwandb: - 0.118 MB of 0.124 MB uploaded (0.003 MB deduped)wandb: 
wandb: Run history:
wandb:                                                                           global_step ▁▁▁▁▂▂▂▂▂▃▃▃▃▃▃▄▄▄▄▄▅▅▅▅▅▅▆▆▆▆▆▆▇▇▇▇▇███
wandb:      resnet18-usc-unsigned/baseline/prune_rate=1.0/37/logs/diagnostics/epoch_time_val █▂▁▂▁▁▁▁▂▁▁▁▂▁▂▁▁▁▁▁▁▁▁▁▁▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:      resnet18-usc-unsigned/baseline/prune_rate=1.0/37/logs/diagnostics/train_time_val █▂▂▂▁▁▁▁▂▂▂▁▂▁▂▁▁▁▂▂▁▁▁▂▁▂▂▂▁▁▁▁▂▁▁▁▁▂▁▁
wandb: resnet18-usc-unsigned/baseline/prune_rate=1.0/37/logs/diagnostics/validation_time_val █▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:                     resnet18-usc-unsigned/baseline/prune_rate=1.0/37/logs/global_step ▁▁▁▁▂▂▂▂▂▃▃▃▃▃▃▄▄▄▄▄▅▅▅▅▅▅▆▆▆▆▆▆▇▇▇▇▇███
wandb:                   resnet18-usc-unsigned/baseline/prune_rate=1.0/37/logs/test/Loss_avg ██▇█▆▆▇▆▇▆▆▄▁▁▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂
wandb:                 resnet18-usc-unsigned/baseline/prune_rate=1.0/37/logs/test/Loss_d_avg ██▇█▆▆▇▆▇▆▆▄▁▁▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂
wandb:                 resnet18-usc-unsigned/baseline/prune_rate=1.0/37/logs/test/Loss_d_val ██▇█▆▆▇▆▇▆▆▄▁▁▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂
wandb:                   resnet18-usc-unsigned/baseline/prune_rate=1.0/37/logs/test/Loss_val ██▇█▆▆▇▆▇▆▆▄▁▁▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂
wandb:               resnet18-usc-unsigned/baseline/prune_rate=1.0/37/logs/test/test_acc_avg ▁▁▄▃▃▃▄▄▄▅▅▆█▇▆▇▇███████████████████████
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/37/logs/test/test_acc_d_avg ▁▁▄▃▃▃▄▄▄▅▅▆█▇▆▇▇███████████████████████
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/37/logs/test/test_acc_d_val ▁▁▄▃▃▃▄▄▄▅▅▆█▇▆▇▇███████████████████████
wandb:               resnet18-usc-unsigned/baseline/prune_rate=1.0/37/logs/test/test_acc_val ▁▁▄▃▃▃▄▄▄▅▅▆█▇▆▇▇███████████████████████
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/37/logs/test/test_corr_d_avg ██▆▇▆▆▆▆▆▅▅▄▂▂▃▂▂▂▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/37/logs/test/test_corr_d_val ██▆▇▆▆▆▆▆▅▅▄▂▂▃▂▂▂▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/37/logs/test/test_majacc_avg ██▇█▇▇▇▇▇▆▇▆▄▁▂▁▂▂▂▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/37/logs/test/test_majacc_d_avg ██▇█▇▇▇▇▇▆▇▆▄▁▂▁▂▂▂▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/37/logs/test/test_majacc_d_val ██▇█▇▇▇▇▇▆▇▆▄▁▂▁▂▂▂▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/37/logs/test/test_majacc_val ██▇█▇▇▇▇▇▆▇▆▄▁▂▁▂▂▂▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/37/logs/test/test_minacc_avg ▁▁▄▃▃▃▄▄▄▅▅▆█▇▇▇▇███████████████████████
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/37/logs/test/test_minacc_d_avg ▁▁▄▃▃▃▄▄▄▅▅▆█▇▇▇▇███████████████████████
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/37/logs/test/test_minacc_d_val ▁▁▄▃▃▃▄▄▄▅▅▆█▇▇▇▇███████████████████████
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/37/logs/test/test_minacc_val ▁▁▄▃▃▃▄▄▄▅▅▆█▇▇▇▇███████████████████████
wandb:                  resnet18-usc-unsigned/baseline/prune_rate=1.0/37/logs/train/Loss_avg █▅▃▂▂▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:                  resnet18-usc-unsigned/baseline/prune_rate=1.0/37/logs/train/Loss_val █▄▃▂▂▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:                    resnet18-usc-unsigned/baseline/prune_rate=1.0/37/logs/train/l1_avg ▃▂▁▁▁▁▂▃▅▆▆▇████████████████████████████
wandb:                    resnet18-usc-unsigned/baseline/prune_rate=1.0/37/logs/train/l1_val ▂▂▁▁▁▂▂▃▅▆▇▇████████████████████████████
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/37/logs/train/train_acc_avg ▇███████████▇▃▃▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/37/logs/train/train_acc_val ▇▇▇▇▇▇▇▇▇▇██▆▄▄▂▂▂▂▂▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▂▂
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/37/logs/train/train_corr_avg ▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/37/logs/train/train_corr_val ▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/37/logs/train/train_majacc_avg ▇███████████▆▂▂▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/37/logs/train/train_majacc_val ███████████▇▅▃▃▂▂▂▂▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▂▂▂▂▂
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/37/logs/train/train_minacc_avg ▁▁▁▁▂▃▃▃▄▄▃▄▇██▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▆▆▆▆▆▆▆▆▆
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/37/logs/train/train_minacc_val ▁▁▂▁▂▂▁▂▃▄▄▆█▇▆▆▆▆▆▆▅▅▅▅▄▄▄▄▃▄▃▃▃▃▃▃▃▃▄▄
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/37/logs/train/train_nll_avg ▅▃▃▂▂▂▁▁▁▁▁▁▃███████████████████████████
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/37/logs/train/train_nll_val ▄▃▃▃▂▂▂▂▁▂▁▁▅███████████████████████████
wandb:         resnet18-usc-unsigned/baseline/prune_rate=1.0/37/logs/train/train_penalty_avg █▂▂▂▂▂▂▂▂▂▂▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:         resnet18-usc-unsigned/baseline/prune_rate=1.0/37/logs/train/train_penalty_val █▆▄▄▂▃▃▃▂▂▂▂▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:           resnet18-usc-unsigned/baseline/prune_rate=1.0/37/logs/train/weight_norm_avg █▅▃▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:           resnet18-usc-unsigned/baseline/prune_rate=1.0/37/logs/train/weight_norm_val █▄▃▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb: 
wandb: Run summary:
wandb:                                                                           global_step 49
wandb:      resnet18-usc-unsigned/baseline/prune_rate=1.0/37/logs/diagnostics/epoch_time_val 0.03554
wandb:      resnet18-usc-unsigned/baseline/prune_rate=1.0/37/logs/diagnostics/train_time_val 0.03504
wandb: resnet18-usc-unsigned/baseline/prune_rate=1.0/37/logs/diagnostics/validation_time_val 0.00048
wandb:                     resnet18-usc-unsigned/baseline/prune_rate=1.0/37/logs/global_step 49
wandb:                   resnet18-usc-unsigned/baseline/prune_rate=1.0/37/logs/test/Loss_avg 0.67663
wandb:                 resnet18-usc-unsigned/baseline/prune_rate=1.0/37/logs/test/Loss_d_avg 0.67663
wandb:                 resnet18-usc-unsigned/baseline/prune_rate=1.0/37/logs/test/Loss_d_val 0.67663
wandb:                   resnet18-usc-unsigned/baseline/prune_rate=1.0/37/logs/test/Loss_val 0.67663
wandb:               resnet18-usc-unsigned/baseline/prune_rate=1.0/37/logs/test/test_acc_avg 0.764
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/37/logs/test/test_acc_d_avg 0.764
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/37/logs/test/test_acc_d_val 0.764
wandb:               resnet18-usc-unsigned/baseline/prune_rate=1.0/37/logs/test/test_acc_val 0.764
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/37/logs/test/test_corr_d_avg -0.585
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/37/logs/test/test_corr_d_val -0.585
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/37/logs/test/test_majacc_avg 0.56
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/37/logs/test/test_majacc_d_avg 0.56
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/37/logs/test/test_majacc_d_val 0.56
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/37/logs/test/test_majacc_val 0.56
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/37/logs/test/test_minacc_avg 0.78667
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/37/logs/test/test_minacc_d_avg 0.78667
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/37/logs/test/test_minacc_d_val 0.78667
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/37/logs/test/test_minacc_val 0.78667
wandb:                  resnet18-usc-unsigned/baseline/prune_rate=1.0/37/logs/train/Loss_avg 8e-05
wandb:                  resnet18-usc-unsigned/baseline/prune_rate=1.0/37/logs/train/Loss_val 8e-05
wandb:                    resnet18-usc-unsigned/baseline/prune_rate=1.0/37/logs/train/l1_avg 17.7533
wandb:                    resnet18-usc-unsigned/baseline/prune_rate=1.0/37/logs/train/l1_val 17.75323
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/37/logs/train/train_acc_avg 0.5018
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/37/logs/train/train_acc_val 0.452
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/37/logs/train/train_corr_avg 0.0
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/37/logs/train/train_corr_val 0.0
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/37/logs/train/train_majacc_avg 0.50769
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/37/logs/train/train_majacc_val 0.4686
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/37/logs/train/train_minacc_avg 0.46761
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/37/logs/train/train_minacc_val 0.37209
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/37/logs/train/train_nll_avg 0.69306
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/37/logs/train/train_nll_val 0.69375
wandb:         resnet18-usc-unsigned/baseline/prune_rate=1.0/37/logs/train/train_penalty_avg 0.0
wandb:         resnet18-usc-unsigned/baseline/prune_rate=1.0/37/logs/train/train_penalty_val 0.0
wandb:           resnet18-usc-unsigned/baseline/prune_rate=1.0/37/logs/train/weight_norm_avg 0.11613
wandb:           resnet18-usc-unsigned/baseline/prune_rate=1.0/37/logs/train/weight_norm_val 0.11608
wandb: 
wandb: 🚀 View run name_random at: https://wandb.ai/janezdu-uiuc/irm/runs/7txqwdfs
wandb: ⭐️ View project at: https://wandb.ai/janezdu-uiuc/irm
wandb: Synced 5 W&B file(s), 0 media file(s), 2 artifact file(s) and 1 other file(s)
wandb: Find logs at: ./wandb/run-20240906_152013-7txqwdfs/logs
wandb: WARNING The new W&B backend becomes opt-out in version 0.18.0; try it out with `wandb.require("core")`! See https://wandb.me/wandb-core for more information.
