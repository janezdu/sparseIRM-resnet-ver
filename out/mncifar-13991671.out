hello
wandb: Currently logged in as: janezdu (janezdu-uiuc). Use `wandb login --relogin` to force relogin
wandb: wandb version 0.17.9 is available!  To upgrade, please run:
wandb:  $ pip install wandb --upgrade
wandb: Tracking run with wandb version 0.17.7
wandb: Run data is saved locally in /scratch/users/zd16/sparseIRM-resnet-ver/wandb/run-20240907_201142-47lcsdky
wandb: Run `wandb offline` to turn off syncing.
wandb: Syncing run name_random
wandb: ⭐️ View project at https://wandb.ai/janezdu-uiuc/irm
wandb: 🚀 View run at https://wandb.ai/janezdu-uiuc/irm/runs/47lcsdky
=> Reading YAML config from configs/smallscale/resnet18/resnet18-usc-unsigned.yaml
Namespace(data='dataset/', optimizer='adam', weight_opt='adam', set='mnistcifar', arch='ResNet18', config='configs/smallscale/resnet18/resnet18-usc-unsigned.yaml', log_dir=None, workers=4, epochs=50, start_epoch=None, batch_size=390, lr=0.006, warmup_length=0, momentum=0.9, weight_decay=0.0, print_freq=10, num_classes=1, resume='', resume_train_weights='', evaluate=False, pretrained=None, pretrained_distill=None, alpha_distill=0.95, T_distill=2, seed=0, multigpu=[0], lr_policy='cosine_lr', lr_adjust=30, lr_gamma=0.1, name='baseline', save_every=-1, prune_rate=1.0, param_prune_rate=0.0, pr_start=1.0, low_data=1, width_mult=1.0, nesterov=False, threetimes=False, random_subnet=False, one_batch=False, conv_type='DenseConv', freeze_weights=False, st=False, mode='fan_in', nonlinearity='relu', bn_type='LearnedBatchNorm', init='kaiming_normal', no_bn_decay=False, scale_fan=False, first_layer_dense=False, last_layer_dense=True, approx=False, zero=False, flip=False, bs=False, gumbel_sample=False, multiply_prob=False, no_multiply=False, multiply_cont=False, multiply_prob_bs=False, indiv=False, label_smoothing=None, first_layer_type=None, trainer='default', score_init_constant=1.0, K=1, update_freq=20, D=0.01, T=1, TA=True, TA2=False, TA_grow=False, center=False, straight_through=False, PLA_factor=0.1, PLA_patience=10, gradient_loss_para=0, abs_loss_para=0, thres=0.9, runs_name='name_random', resume_compare_loss1='', resume_compare_loss2='', init_weights='', trained_mask='', weight_rescaling=False, constrain_by_layer=False, weight_rescaling_data=False, use_running_stats=False, not_clipping=False, rescaling_para=False, lasso_para=0, dont_freeze_weights=False, iterative=True, prob_by_weight=False, rescale_at_fix_subnet=False, train_weights_at_the_same_time=False, sample_from_training_set=False, load_true_para=False, distill=False, finetune=False, stablize=False, prev_best=0, weight_opt_lr=0.0006, n=500, ts=0.28, te=0.6, d=20000, s=80, c=0.75, init_prob=False, thres_before=0.001, wide_ratio=0.001, noise=1, cal_p_q=False, just_finetune=False, snip=False, envs_num=2, l2_regularizer_weight=0.001, data_num=50000, env_type='linear', irm_type='irmv1', hidden_dim=390, penalty_anneal_iters=400, penalty_weight=10000.0, grayscale_model=0, weight_lr_schedule=False, fix_subnet=False, freeze_weight=False, step='ours', prior_sd_coef=0, dim_inv=2, variance_gamma=1.0, dim_spu=10, image_scale=32, cons_ratio='0.999_0.7_0.1', noise_ratio=0.2, step_gamma=0.1, step_round=3, inner_steps=1, use_pgd=False, z=15.0, pgd_anneal_iters=600, pgd_skip_steps=50, fraction_z=0.95)
=> Creating model 'ResNet18'
Here!!!!!!!!
==> Conv Type: DenseConv
==> BN Type: LearnedBatchNorm
<class 'torch.nn.modules.conv.Conv2d'>
<class 'torch.nn.modules.batchnorm.BatchNorm2d'>
==> Building first layer with <class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
ResNet(
  (conv1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
  (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (relu): ReLU(inplace=True)
  (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
  (layer1): Sequential(
    (0): BasicBlock(
      (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (1): BasicBlock(
      (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (layer2): Sequential(
    (0): BasicBlock(
      (conv1): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (downsample): Sequential(
        (0): Conv2d(64, 128, kernel_size=(1, 1), stride=(2, 2), bias=False)
        (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (1): BasicBlock(
      (conv1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (layer3): Sequential(
    (0): BasicBlock(
      (conv1): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (downsample): Sequential(
        (0): Conv2d(128, 256, kernel_size=(1, 1), stride=(2, 2), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (1): BasicBlock(
      (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (layer4): Sequential(
    (0): BasicBlock(
      (conv1): Conv2d(256, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (downsample): Sequential(
        (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (1): BasicBlock(
      (conv1): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (avgpool): AdaptiveAvgPool2d(output_size=1)
  (fc): Conv2d(512, 1, kernel_size=(1, 1), stride=(1, 1), bias=False)
)
=> Parallelizing on [0] gpus
<DEBUG> gradient to module.conv1.weight
<DEBUG> gradient to module.bn1.weight
<DEBUG> gradient to module.bn1.bias
<DEBUG> gradient to module.layer1.0.conv1.weight
<DEBUG> gradient to module.layer1.0.bn1.weight
<DEBUG> gradient to module.layer1.0.bn1.bias
<DEBUG> gradient to module.layer1.0.conv2.weight
<DEBUG> gradient to module.layer1.0.bn2.weight
<DEBUG> gradient to module.layer1.0.bn2.bias
<DEBUG> gradient to module.layer1.1.conv1.weight
<DEBUG> gradient to module.layer1.1.bn1.weight
<DEBUG> gradient to module.layer1.1.bn1.bias
<DEBUG> gradient to module.layer1.1.conv2.weight
<DEBUG> gradient to module.layer1.1.bn2.weight
<DEBUG> gradient to module.layer1.1.bn2.bias
<DEBUG> gradient to module.layer2.0.conv1.weight
<DEBUG> gradient to module.layer2.0.bn1.weight
<DEBUG> gradient to module.layer2.0.bn1.bias
<DEBUG> gradient to module.layer2.0.conv2.weight
<DEBUG> gradient to module.layer2.0.bn2.weight
<DEBUG> gradient to module.layer2.0.bn2.bias
<DEBUG> gradient to module.layer2.0.downsample.0.weight
<DEBUG> gradient to module.layer2.0.downsample.1.weight
<DEBUG> gradient to module.layer2.0.downsample.1.bias
<DEBUG> gradient to module.layer2.1.conv1.weight
<DEBUG> gradient to module.layer2.1.bn1.weight
<DEBUG> gradient to module.layer2.1.bn1.bias
<DEBUG> gradient to module.layer2.1.conv2.weight
<DEBUG> gradient to module.layer2.1.bn2.weight
<DEBUG> gradient to module.layer2.1.bn2.bias
<DEBUG> gradient to module.layer3.0.conv1.weight
<DEBUG> gradient to module.layer3.0.bn1.weight
<DEBUG> gradient to module.layer3.0.bn1.bias
<DEBUG> gradient to module.layer3.0.conv2.weight
<DEBUG> gradient to module.layer3.0.bn2.weight
<DEBUG> gradient to module.layer3.0.bn2.bias
<DEBUG> gradient to module.layer3.0.downsample.0.weight
<DEBUG> gradient to module.layer3.0.downsample.1.weight
<DEBUG> gradient to module.layer3.0.downsample.1.bias
<DEBUG> gradient to module.layer3.1.conv1.weight
<DEBUG> gradient to module.layer3.1.bn1.weight
<DEBUG> gradient to module.layer3.1.bn1.bias
<DEBUG> gradient to module.layer3.1.conv2.weight
<DEBUG> gradient to module.layer3.1.bn2.weight
<DEBUG> gradient to module.layer3.1.bn2.bias
<DEBUG> gradient to module.layer4.0.conv1.weight
<DEBUG> gradient to module.layer4.0.bn1.weight
<DEBUG> gradient to module.layer4.0.bn1.bias
<DEBUG> gradient to module.layer4.0.conv2.weight
<DEBUG> gradient to module.layer4.0.bn2.weight
<DEBUG> gradient to module.layer4.0.bn2.bias
<DEBUG> gradient to module.layer4.0.downsample.0.weight
<DEBUG> gradient to module.layer4.0.downsample.1.weight
<DEBUG> gradient to module.layer4.0.downsample.1.bias
<DEBUG> gradient to module.layer4.1.conv1.weight
<DEBUG> gradient to module.layer4.1.bn1.weight
<DEBUG> gradient to module.layer4.1.bn1.bias
<DEBUG> gradient to module.layer4.1.conv2.weight
<DEBUG> gradient to module.layer4.1.bn2.weight
<DEBUG> gradient to module.layer4.1.bn2.bias
<DEBUG> gradient to module.fc.weight
Files already downloaded and verified
Files already downloaded and verified
Adding Noise to Label, len(Y)=12000, Label_noise=1162
Xmp (7877, 3, 32, 32) (6903, 3, 32, 32)
Xcp (6006, 3, 32, 32) (5994, 3, 32, 32)
env=0 2497 2497 3 3
xn 2500 xp 2500
env=1 1750 1750 750 750
xn 2500 xp 2500
env=2 50 50 450 450
xn 500 xp 500
=> Creating model 'EBD'
EBD(
  (embedings): Embedding(2, 1)
)
=> Parallelizing on [0] gpus
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:01<00:42,  1.69s/it] 19%|#9        | 5/26 [00:01<00:05,  3.65it/s] 35%|###4      | 9/26 [00:01<00:02,  7.27it/s] 50%|#####     | 13/26 [00:02<00:01, 11.25it/s] 65%|######5   | 17/26 [00:02<00:00, 15.44it/s] 81%|########  | 21/26 [00:02<00:00, 19.74it/s] 96%|#########6| 25/26 [00:02<00:00, 23.52it/s]100%|##########| 26/26 [00:02<00:00,  9.63it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 0 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 2 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 3 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 4 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 5 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 6 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 7 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 8 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 9 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 10 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 11 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 12 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 13 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 14 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 15 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 16 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 17 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 18 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 19 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 20 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 21 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 22 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 23 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 24 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 25 400
penalty weights 0.0
Epoch: [0][  26/  26]	Loss 0.441 (0.501)	train_nll   0.44 (  0.50)	train_penalty   0.07 (  0.16)	weight_norm  20.88 ( 18.15)	train_acc   0.82 (  0.82)	train_minacc   0.00 (  0.06)	train_majacc   1.00 (  0.95)	train_corr   0.00 (  0.00)	l1 7.1186 (8.1165)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.45it/s] 27%|##6       | 7/26 [00:00<00:00, 35.90it/s]                                               27%|##6       | 7/26 [00:00<00:00, 35.90it/s] 46%|####6     | 12/26 [00:00<00:00, 41.16it/s] 65%|######5   | 17/26 [00:00<00:00, 43.36it/s]                                                65%|######5   | 17/26 [00:00<00:00, 43.36it/s] 85%|########4 | 22/26 [00:00<00:00, 44.92it/s]100%|##########| 26/26 [00:00<00:00, 37.55it/s]
Test: [   0/  26]	Loss 0.425 (0.425)	test_acc   0.85 (  0.85)	test_minacc   0.03 (  0.03)	test_majacc   1.00 (  1.00)	Loss_d 0.425 (0.425)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.03 (  0.03)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.97 (  0.97)
Test: [  10/  26]	Loss 0.433 (0.424)	test_acc   0.85 (  0.84)	test_minacc   0.00 (  0.01)	test_majacc   0.99 (  0.99)	Loss_d 0.433 (0.424)	test_acc_d   0.85 (  0.84)	test_minacc_d   0.00 (  0.01)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.97 (  0.97)
Test: [  20/  26]	Loss 0.354 (0.412)	test_acc   0.88 (  0.85)	test_minacc   0.02 (  0.01)	test_majacc   1.00 (  0.99)	Loss_d 0.354 (0.412)	test_acc_d   0.88 (  0.85)	test_minacc_d   0.02 (  0.01)	test_majacc_d   1.00 (  0.99)	test_corr_d   0.98 (  0.97)
Test: [  26/  26]	Loss 0.429 (0.410)	test_acc   0.83 (  0.85)	test_minacc   0.02 (  0.01)	test_majacc   1.00 (  0.99)	Loss_d 0.429 (0.410)	test_acc_d   0.83 (  0.85)	test_minacc_d   0.02 (  0.01)	test_majacc_d   1.00 (  0.99)	test_corr_d   0.98 (  0.97)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00,  2.48it/s]100%|##########| 1/1 [00:00<00:00,  2.48it/s]
Test: [  0/  1]	Loss 1.890 (1.890)	test_acc   0.11 (  0.11)	test_minacc   0.01 (  0.01)	test_majacc   1.00 (  1.00)	Loss_d 1.890 (1.890)	test_acc_d   0.11 (  0.11)	test_minacc_d   0.01 (  0.01)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.96 (  0.96)
Test: [  1/  1]	Loss 1.890 (1.890)	test_acc   0.11 (  0.11)	test_minacc   0.01 (  0.01)	test_majacc   1.00 (  1.00)	Loss_d 1.890 (1.890)	test_acc_d   0.11 (  0.11)	test_minacc_d   0.01 (  0.01)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.96 (  0.96)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/138/checkpoints/model_best.pth
Overall Timing[  0/  1]	epoch_time 0.0785 (0.0785)	validation_time 0.0069 (0.0069)	train_time 0.0697 (0.0697)
record: (train_acc, test_acc) (0.8467000222206116, 0.10900000482797623)
last accs (train_acc, test_acc) (0.8467000222206116, 0.10900000482797623)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.57it/s] 12%|#1        | 3/26 [00:00<00:01, 12.21it/s] 27%|##6       | 7/26 [00:00<00:00, 22.26it/s] 42%|####2     | 11/26 [00:00<00:00, 27.57it/s] 58%|#####7    | 15/26 [00:00<00:00, 30.49it/s] 73%|#######3  | 19/26 [00:00<00:00, 32.40it/s] 88%|########8 | 23/26 [00:00<00:00, 33.42it/s]100%|##########| 26/26 [00:00<00:00, 26.81it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 26 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 27 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 28 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 29 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 30 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 31 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 32 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 33 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 34 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 35 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 36 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 37 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 38 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 39 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 40 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 41 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 42 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 43 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 44 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 45 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 46 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 47 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 48 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 49 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 50 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 51 400
penalty weights 0.0
Epoch: [1][  26/  26]	Loss 0.420 (0.408)	train_nll   0.42 (  0.41)	train_penalty   0.06 (  0.05)	weight_norm  21.97 ( 21.63)	train_acc   0.82 (  0.85)	train_minacc   0.02 (  0.02)	train_majacc   1.00 (  0.99)	train_corr   0.00 (  0.00)	l1 6.9052 (6.8732)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:02,  9.52it/s] 27%|##6       | 7/26 [00:00<00:00, 24.98it/s]                                               27%|##6       | 7/26 [00:00<00:00, 24.98it/s] 46%|####6     | 12/26 [00:00<00:00, 29.88it/s] 65%|######5   | 17/26 [00:00<00:00, 36.03it/s]                                                65%|######5   | 17/26 [00:00<00:00, 36.03it/s] 85%|########4 | 22/26 [00:00<00:00, 40.10it/s]100%|##########| 26/26 [00:00<00:00, 32.64it/s]
Test: [   0/  26]	Loss 0.425 (0.425)	test_acc   0.84 (  0.84)	test_minacc   0.05 (  0.05)	test_majacc   0.99 (  0.99)	Loss_d 0.425 (0.425)	test_acc_d   0.84 (  0.84)	test_minacc_d   0.05 (  0.05)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.96 (  0.96)
Test: [  10/  26]	Loss 0.417 (0.412)	test_acc   0.85 (  0.84)	test_minacc   0.02 (  0.02)	test_majacc   0.99 (  0.99)	Loss_d 0.417 (0.412)	test_acc_d   0.85 (  0.84)	test_minacc_d   0.02 (  0.02)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.97 (  0.97)
Test: [  20/  26]	Loss 0.339 (0.399)	test_acc   0.88 (  0.85)	test_minacc   0.04 (  0.02)	test_majacc   1.00 (  0.99)	Loss_d 0.339 (0.399)	test_acc_d   0.88 (  0.85)	test_minacc_d   0.04 (  0.02)	test_majacc_d   1.00 (  0.99)	test_corr_d   0.97 (  0.97)
Test: [  26/  26]	Loss 0.413 (0.397)	test_acc   0.83 (  0.85)	test_minacc   0.05 (  0.02)	test_majacc   1.00 (  1.00)	Loss_d 0.413 (0.397)	test_acc_d   0.83 (  0.85)	test_minacc_d   0.05 (  0.02)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.96 (  0.97)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 59.83it/s]
Test: [  0/  1]	Loss 1.942 (1.942)	test_acc   0.11 (  0.11)	test_minacc   0.01 (  0.01)	test_majacc   1.00 (  1.00)	Loss_d 1.942 (1.942)	test_acc_d   0.11 (  0.11)	test_minacc_d   0.01 (  0.01)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.96 (  0.96)
Test: [  1/  1]	Loss 1.942 (1.942)	test_acc   0.11 (  0.11)	test_minacc   0.01 (  0.01)	test_majacc   1.00 (  1.00)	Loss_d 1.942 (1.942)	test_acc_d   0.11 (  0.11)	test_minacc_d   0.01 (  0.01)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.96 (  0.96)
Overall Timing[  1/  1]	epoch_time 0.0422 (0.0603)	validation_time 0.0004 (0.0037)	train_time 0.0417 (0.0557)
record: (train_acc, test_acc) (0.8467000222206116, 0.10900000482797623)
last accs (train_acc, test_acc) (0.8480000279545784, 0.10600000619888306)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 16.96it/s] 23%|##3       | 6/26 [00:00<00:00, 27.12it/s] 38%|###8      | 10/26 [00:00<00:00, 30.97it/s] 54%|#####3    | 14/26 [00:00<00:00, 33.04it/s] 69%|######9   | 18/26 [00:00<00:00, 34.14it/s] 85%|########4 | 22/26 [00:00<00:00, 34.11it/s]100%|##########| 26/26 [00:00<00:00, 31.04it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 52 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 53 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 54 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 55 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 56 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 57 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 58 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 59 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 60 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 61 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 62 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 63 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 64 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 65 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 66 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 67 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 68 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 69 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 70 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 71 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 72 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 73 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 74 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 75 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 76 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 77 400
penalty weights 0.0
Epoch: [2][  26/  26]	Loss 0.400 (0.389)	train_nll   0.40 (  0.39)	train_penalty   0.03 (  0.05)	weight_norm  22.10 ( 22.05)	train_acc   0.82 (  0.85)	train_minacc   0.05 (  0.04)	train_majacc   0.99 (  0.99)	train_corr   0.00 (  0.00)	l1 6.8662 (6.8280)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.34it/s] 15%|#5        | 4/26 [00:00<00:01, 16.67it/s] 35%|###4      | 9/26 [00:00<00:00, 29.11it/s]                                               35%|###4      | 9/26 [00:00<00:00, 29.11it/s] 54%|#####3    | 14/26 [00:00<00:00, 32.98it/s] 73%|#######3  | 19/26 [00:00<00:00, 37.70it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 37.70it/s] 92%|#########2| 24/26 [00:00<00:00, 41.16it/s]100%|##########| 26/26 [00:00<00:00, 32.50it/s]
Test: [   0/  26]	Loss 0.411 (0.411)	test_acc   0.83 (  0.83)	test_minacc   0.03 (  0.03)	test_majacc   0.98 (  0.98)	Loss_d 0.411 (0.411)	test_acc_d   0.83 (  0.83)	test_minacc_d   0.03 (  0.03)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.93 (  0.93)
Test: [  10/  26]	Loss 0.408 (0.399)	test_acc   0.84 (  0.84)	test_minacc   0.03 (  0.08)	test_majacc   0.98 (  0.98)	Loss_d 0.408 (0.399)	test_acc_d   0.84 (  0.84)	test_minacc_d   0.03 (  0.08)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.93 (  0.92)
Test: [  20/  26]	Loss 0.325 (0.385)	test_acc   0.88 (  0.84)	test_minacc   0.12 (  0.08)	test_majacc   0.99 (  0.98)	Loss_d 0.325 (0.385)	test_acc_d   0.88 (  0.84)	test_minacc_d   0.12 (  0.08)	test_majacc_d   0.99 (  0.98)	test_corr_d   0.92 (  0.92)
Test: [  26/  26]	Loss 0.381 (0.381)	test_acc   0.84 (  0.85)	test_minacc   0.16 (  0.09)	test_majacc   0.99 (  0.98)	Loss_d 0.381 (0.381)	test_acc_d   0.84 (  0.85)	test_minacc_d   0.16 (  0.09)	test_majacc_d   0.99 (  0.98)	test_corr_d   0.93 (  0.92)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.12it/s]
Test: [  0/  1]	Loss 1.719 (1.719)	test_acc   0.15 (  0.15)	test_minacc   0.05 (  0.05)	test_majacc   0.99 (  0.99)	Loss_d 1.719 (1.719)	test_acc_d   0.15 (  0.15)	test_minacc_d   0.05 (  0.05)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.88 (  0.88)
Test: [  1/  1]	Loss 1.719 (1.719)	test_acc   0.15 (  0.15)	test_minacc   0.05 (  0.05)	test_majacc   0.99 (  0.99)	Loss_d 1.719 (1.719)	test_acc_d   0.15 (  0.15)	test_minacc_d   0.05 (  0.05)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.88 (  0.88)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/138/checkpoints/model_best.pth
Overall Timing[  2/  1]	epoch_time 0.0420 (0.0542)	validation_time 0.0003 (0.0026)	train_time 0.0417 (0.0510)
record: (train_acc, test_acc) (0.8460000190734863, 0.14600001275539398)
last accs (train_acc, test_acc) (0.8460000190734863, 0.14600001275539398)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 14.50it/s] 15%|#5        | 4/26 [00:00<00:01, 16.38it/s] 31%|###       | 8/26 [00:00<00:00, 25.52it/s] 46%|####6     | 12/26 [00:00<00:00, 30.52it/s] 62%|######1   | 16/26 [00:00<00:00, 32.75it/s] 77%|#######6  | 20/26 [00:00<00:00, 33.44it/s] 92%|#########2| 24/26 [00:00<00:00, 34.30it/s]100%|##########| 26/26 [00:00<00:00, 29.04it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 78 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 79 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 80 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 81 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 82 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 83 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 84 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 85 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 86 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 87 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 88 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 89 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 90 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 91 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 92 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 93 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 94 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 95 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 96 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 97 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 98 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 99 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 100 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 101 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 102 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 103 400
penalty weights 0.0
Epoch: [3][  26/  26]	Loss 0.395 (0.367)	train_nll   0.40 (  0.37)	train_penalty   0.04 (  0.04)	weight_norm  22.17 ( 22.14)	train_acc   0.82 (  0.85)	train_minacc   0.02 (  0.11)	train_majacc   1.00 (  0.98)	train_corr   0.00 (  0.00)	l1 6.9985 (6.9214)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:07,  3.19it/s] 23%|##3       | 6/26 [00:00<00:01, 17.82it/s]                                               23%|##3       | 6/26 [00:00<00:01, 17.82it/s] 42%|####2     | 11/26 [00:00<00:00, 26.99it/s] 62%|######1   | 16/26 [00:00<00:00, 33.64it/s]                                                62%|######1   | 16/26 [00:00<00:00, 33.64it/s] 81%|########  | 21/26 [00:00<00:00, 35.18it/s]100%|##########| 26/26 [00:00<00:00, 38.95it/s]100%|##########| 26/26 [00:00<00:00, 28.29it/s]
Test: [   0/  26]	Loss 0.383 (0.383)	test_acc   0.84 (  0.84)	test_minacc   0.03 (  0.03)	test_majacc   0.99 (  0.99)	Loss_d 0.383 (0.383)	test_acc_d   0.84 (  0.84)	test_minacc_d   0.03 (  0.03)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.93 (  0.93)
Test: [  10/  26]	Loss 0.360 (0.365)	test_acc   0.86 (  0.85)	test_minacc   0.07 (  0.07)	test_majacc   0.99 (  0.99)	Loss_d 0.360 (0.365)	test_acc_d   0.86 (  0.85)	test_minacc_d   0.07 (  0.07)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.94 (  0.93)
Test: [  20/  26]	Loss 0.300 (0.348)	test_acc   0.89 (  0.85)	test_minacc   0.19 (  0.08)	test_majacc   0.99 (  0.99)	Loss_d 0.300 (0.348)	test_acc_d   0.89 (  0.85)	test_minacc_d   0.19 (  0.08)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.92 (  0.93)
Test: [  26/  26]	Loss 0.367 (0.346)	test_acc   0.84 (  0.85)	test_minacc   0.11 (  0.09)	test_majacc   0.99 (  0.99)	Loss_d 0.367 (0.346)	test_acc_d   0.84 (  0.85)	test_minacc_d   0.11 (  0.09)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.93 (  0.93)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 59.44it/s]
Test: [  0/  1]	Loss 1.724 (1.724)	test_acc   0.13 (  0.13)	test_minacc   0.04 (  0.04)	test_majacc   1.00 (  1.00)	Loss_d 1.724 (1.724)	test_acc_d   0.13 (  0.13)	test_minacc_d   0.04 (  0.04)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.89 (  0.89)
Test: [  1/  1]	Loss 1.724 (1.724)	test_acc   0.13 (  0.13)	test_minacc   0.04 (  0.04)	test_majacc   1.00 (  1.00)	Loss_d 1.724 (1.724)	test_acc_d   0.13 (  0.13)	test_minacc_d   0.04 (  0.04)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.89 (  0.89)
Overall Timing[  3/  1]	epoch_time 0.0429 (0.0514)	validation_time 0.0005 (0.0020)	train_time 0.0423 (0.0488)
record: (train_acc, test_acc) (0.8460000190734863, 0.14600001275539398)
last accs (train_acc, test_acc) (0.8532000242471695, 0.13199999928474426)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.81it/s] 19%|#9        | 5/26 [00:00<00:01, 20.54it/s] 35%|###4      | 9/26 [00:00<00:00, 26.56it/s] 50%|#####     | 13/26 [00:00<00:00, 30.51it/s] 65%|######5   | 17/26 [00:00<00:00, 32.60it/s] 81%|########  | 21/26 [00:00<00:00, 33.55it/s] 96%|#########6| 25/26 [00:00<00:00, 34.40it/s]100%|##########| 26/26 [00:00<00:00, 28.61it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 104 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 105 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 106 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 107 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 108 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 109 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 110 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 111 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 112 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 113 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 114 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 115 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 116 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 117 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 118 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 119 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 120 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 121 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 122 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 123 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 124 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 125 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 126 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 127 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 128 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 129 400
penalty weights 0.0
Epoch: [4][  26/  26]	Loss 0.372 (0.342)	train_nll   0.37 (  0.34)	train_penalty   0.05 (  0.03)	weight_norm  22.25 ( 22.21)	train_acc   0.83 (  0.85)	train_minacc   0.07 (  0.19)	train_majacc   1.00 (  0.97)	train_corr   0.00 (  0.00)	l1 6.9357 (6.8828)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.38it/s] 27%|##6       | 7/26 [00:00<00:00, 27.50it/s]                                               27%|##6       | 7/26 [00:00<00:00, 27.50it/s] 46%|####6     | 12/26 [00:00<00:00, 35.43it/s] 65%|######5   | 17/26 [00:00<00:00, 35.52it/s]                                                65%|######5   | 17/26 [00:00<00:00, 35.52it/s] 85%|########4 | 22/26 [00:00<00:00, 39.06it/s]100%|##########| 26/26 [00:00<00:00, 32.95it/s]
Test: [   0/  26]	Loss 0.359 (0.359)	test_acc   0.85 (  0.85)	test_minacc   0.10 (  0.10)	test_majacc   0.99 (  0.99)	Loss_d 0.359 (0.359)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.10 (  0.10)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.93 (  0.93)
Test: [  10/  26]	Loss 0.346 (0.340)	test_acc   0.86 (  0.85)	test_minacc   0.09 (  0.13)	test_majacc   1.00 (  0.99)	Loss_d 0.346 (0.340)	test_acc_d   0.86 (  0.85)	test_minacc_d   0.09 (  0.13)	test_majacc_d   1.00 (  0.99)	test_corr_d   0.94 (  0.94)
Test: [  20/  26]	Loss 0.262 (0.323)	test_acc   0.89 (  0.86)	test_minacc   0.19 (  0.14)	test_majacc   0.99 (  0.99)	Loss_d 0.262 (0.323)	test_acc_d   0.89 (  0.86)	test_minacc_d   0.19 (  0.14)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.93 (  0.93)
Test: [  26/  26]	Loss 0.330 (0.320)	test_acc   0.84 (  0.86)	test_minacc   0.14 (  0.14)	test_majacc   1.00 (  0.99)	Loss_d 0.330 (0.320)	test_acc_d   0.84 (  0.86)	test_minacc_d   0.14 (  0.14)	test_majacc_d   1.00 (  0.99)	test_corr_d   0.93 (  0.93)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.60it/s]
Test: [  0/  1]	Loss 1.854 (1.854)	test_acc   0.18 (  0.18)	test_minacc   0.09 (  0.09)	test_majacc   0.99 (  0.99)	Loss_d 1.854 (1.854)	test_acc_d   0.18 (  0.18)	test_minacc_d   0.09 (  0.09)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.86 (  0.86)
Test: [  1/  1]	Loss 1.854 (1.854)	test_acc   0.18 (  0.18)	test_minacc   0.09 (  0.09)	test_majacc   0.99 (  0.99)	Loss_d 1.854 (1.854)	test_acc_d   0.18 (  0.18)	test_minacc_d   0.09 (  0.09)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.86 (  0.86)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/138/checkpoints/model_best.pth
Overall Timing[  4/  1]	epoch_time 0.0426 (0.0496)	validation_time 0.0003 (0.0017)	train_time 0.0422 (0.0475)
record: (train_acc, test_acc) (0.8597000207901001, 0.17600001394748688)
last accs (train_acc, test_acc) (0.8597000207901001, 0.17600001394748688)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.32it/s] 19%|#9        | 5/26 [00:00<00:00, 24.39it/s] 38%|###8      | 10/26 [00:00<00:00, 31.91it/s] 58%|#####7    | 15/26 [00:00<00:00, 35.68it/s] 77%|#######6  | 20/26 [00:00<00:00, 37.56it/s] 96%|#########6| 25/26 [00:00<00:00, 37.77it/s]100%|##########| 26/26 [00:00<00:00, 31.87it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 130 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 131 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 132 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 133 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 134 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 135 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 136 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 137 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 138 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 139 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 140 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 141 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 142 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 143 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 144 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 145 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 146 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 147 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 148 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 149 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 150 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 151 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 152 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 153 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 154 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 155 400
penalty weights 0.0
Epoch: [5][  26/  26]	Loss 0.315 (0.326)	train_nll   0.31 (  0.33)	train_penalty   0.02 (  0.02)	weight_norm  22.34 ( 22.29)	train_acc   0.87 (  0.86)	train_minacc   0.34 (  0.25)	train_majacc   0.98 (  0.97)	train_corr   0.00 (  0.00)	l1 6.8381 (6.7210)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.01it/s] 23%|##3       | 6/26 [00:00<00:00, 28.88it/s]                                               23%|##3       | 6/26 [00:00<00:00, 28.88it/s] 42%|####2     | 11/26 [00:00<00:00, 35.56it/s] 62%|######1   | 16/26 [00:00<00:00, 36.40it/s]                                                62%|######1   | 16/26 [00:00<00:00, 36.40it/s] 81%|########  | 21/26 [00:00<00:00, 39.55it/s]100%|##########| 26/26 [00:00<00:00, 34.73it/s]
Test: [   0/  26]	Loss 0.340 (0.340)	test_acc   0.85 (  0.85)	test_minacc   0.15 (  0.15)	test_majacc   0.98 (  0.98)	Loss_d 0.340 (0.340)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.15 (  0.15)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.91 (  0.91)
Test: [  10/  26]	Loss 0.329 (0.323)	test_acc   0.86 (  0.86)	test_minacc   0.16 (  0.22)	test_majacc   0.98 (  0.98)	Loss_d 0.329 (0.323)	test_acc_d   0.86 (  0.86)	test_minacc_d   0.16 (  0.22)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.93 (  0.91)
Test: [  20/  26]	Loss 0.247 (0.305)	test_acc   0.89 (  0.87)	test_minacc   0.27 (  0.26)	test_majacc   0.97 (  0.97)	Loss_d 0.247 (0.305)	test_acc_d   0.89 (  0.87)	test_minacc_d   0.27 (  0.26)	test_majacc_d   0.97 (  0.97)	test_corr_d   0.91 (  0.91)
Test: [  26/  26]	Loss 0.295 (0.302)	test_acc   0.87 (  0.87)	test_minacc   0.41 (  0.26)	test_majacc   0.97 (  0.98)	Loss_d 0.295 (0.302)	test_acc_d   0.87 (  0.87)	test_minacc_d   0.41 (  0.26)	test_majacc_d   0.97 (  0.98)	test_corr_d   0.89 (  0.91)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.50it/s]
Test: [  0/  1]	Loss 1.830 (1.830)	test_acc   0.25 (  0.25)	test_minacc   0.16 (  0.16)	test_majacc   0.99 (  0.99)	Loss_d 1.830 (1.830)	test_acc_d   0.25 (  0.25)	test_minacc_d   0.16 (  0.16)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.77 (  0.77)
Test: [  1/  1]	Loss 1.830 (1.830)	test_acc   0.25 (  0.25)	test_minacc   0.16 (  0.16)	test_majacc   0.99 (  0.99)	Loss_d 1.830 (1.830)	test_acc_d   0.25 (  0.25)	test_minacc_d   0.16 (  0.16)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.77 (  0.77)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/138/checkpoints/model_best.pth
Overall Timing[  5/  1]	epoch_time 0.0375 (0.0476)	validation_time 0.0004 (0.0015)	train_time 0.0370 (0.0458)
record: (train_acc, test_acc) (0.8678000202775001, 0.24500000476837158)
last accs (train_acc, test_acc) (0.8678000202775001, 0.24500000476837158)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.15it/s] 19%|#9        | 5/26 [00:00<00:00, 22.24it/s] 35%|###4      | 9/26 [00:00<00:00, 28.12it/s] 50%|#####     | 13/26 [00:00<00:00, 31.09it/s] 65%|######5   | 17/26 [00:00<00:00, 32.39it/s] 81%|########  | 21/26 [00:00<00:00, 33.64it/s] 96%|#########6| 25/26 [00:00<00:00, 33.70it/s]100%|##########| 26/26 [00:00<00:00, 28.76it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 156 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 157 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 158 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 159 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 160 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 161 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 162 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 163 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 164 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 165 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 166 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 167 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 168 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 169 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 170 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 171 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 172 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 173 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 174 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 175 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 176 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 177 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 178 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 179 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 180 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 181 400
penalty weights 0.0
Epoch: [6][  26/  26]	Loss 0.306 (0.312)	train_nll   0.31 (  0.31)	train_penalty   0.01 (  0.02)	weight_norm  22.44 ( 22.38)	train_acc   0.88 (  0.86)	train_minacc   0.41 (  0.32)	train_majacc   0.98 (  0.96)	train_corr   0.00 (  0.00)	l1 6.7802 (6.8285)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.31it/s] 27%|##6       | 7/26 [00:00<00:00, 33.76it/s]                                               27%|##6       | 7/26 [00:00<00:00, 33.76it/s] 46%|####6     | 12/26 [00:00<00:00, 36.56it/s] 65%|######5   | 17/26 [00:00<00:00, 38.46it/s]                                                65%|######5   | 17/26 [00:00<00:00, 38.46it/s] 85%|########4 | 22/26 [00:00<00:00, 41.69it/s]100%|##########| 26/26 [00:00<00:00, 35.51it/s]
Test: [   0/  26]	Loss 0.362 (0.362)	test_acc   0.84 (  0.84)	test_minacc   0.19 (  0.19)	test_majacc   0.96 (  0.96)	Loss_d 0.362 (0.362)	test_acc_d   0.84 (  0.84)	test_minacc_d   0.19 (  0.19)	test_majacc_d   0.96 (  0.96)	test_corr_d   0.89 (  0.89)
Test: [  10/  26]	Loss 0.355 (0.343)	test_acc   0.87 (  0.86)	test_minacc   0.19 (  0.27)	test_majacc   0.98 (  0.96)	Loss_d 0.355 (0.343)	test_acc_d   0.87 (  0.86)	test_minacc_d   0.19 (  0.27)	test_majacc_d   0.98 (  0.96)	test_corr_d   0.91 (  0.89)
Test: [  20/  26]	Loss 0.283 (0.329)	test_acc   0.88 (  0.86)	test_minacc   0.35 (  0.29)	test_majacc   0.95 (  0.96)	Loss_d 0.283 (0.329)	test_acc_d   0.88 (  0.86)	test_minacc_d   0.35 (  0.29)	test_majacc_d   0.95 (  0.96)	test_corr_d   0.88 (  0.89)
Test: [  26/  26]	Loss 0.297 (0.325)	test_acc   0.87 (  0.86)	test_minacc   0.41 (  0.30)	test_majacc   0.97 (  0.96)	Loss_d 0.297 (0.325)	test_acc_d   0.87 (  0.86)	test_minacc_d   0.41 (  0.30)	test_majacc_d   0.97 (  0.96)	test_corr_d   0.87 (  0.89)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.87it/s]
Test: [  0/  1]	Loss 1.818 (1.818)	test_acc   0.26 (  0.26)	test_minacc   0.18 (  0.18)	test_majacc   0.97 (  0.97)	Loss_d 1.818 (1.818)	test_acc_d   0.26 (  0.26)	test_minacc_d   0.18 (  0.18)	test_majacc_d   0.97 (  0.97)	test_corr_d   0.76 (  0.76)
Test: [  1/  1]	Loss 1.818 (1.818)	test_acc   0.26 (  0.26)	test_minacc   0.18 (  0.18)	test_majacc   0.97 (  0.97)	Loss_d 1.818 (1.818)	test_acc_d   0.26 (  0.26)	test_minacc_d   0.18 (  0.18)	test_majacc_d   0.97 (  0.97)	test_corr_d   0.76 (  0.76)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/138/checkpoints/model_best.pth
Overall Timing[  6/  1]	epoch_time 0.0393 (0.0464)	validation_time 0.0003 (0.0013)	train_time 0.0390 (0.0448)
record: (train_acc, test_acc) (0.8619000171422958, 0.2600000202655792)
last accs (train_acc, test_acc) (0.8619000171422958, 0.2600000202655792)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 16.13it/s] 23%|##3       | 6/26 [00:00<00:00, 26.99it/s] 38%|###8      | 10/26 [00:00<00:00, 31.86it/s] 54%|#####3    | 14/26 [00:00<00:00, 33.96it/s] 69%|######9   | 18/26 [00:00<00:00, 34.92it/s] 85%|########4 | 22/26 [00:00<00:00, 35.91it/s]100%|##########| 26/26 [00:00<00:00, 31.68it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 182 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 183 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 184 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 185 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 186 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 187 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 188 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 189 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 190 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 191 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 192 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 193 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 194 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 195 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 196 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 197 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 198 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 199 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 200 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 201 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 202 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 203 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 204 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 205 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 206 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 207 400
penalty weights 0.0
Epoch: [7][  26/  26]	Loss 0.263 (0.307)	train_nll   0.26 (  0.31)	train_penalty   0.01 (  0.02)	weight_norm  22.58 ( 22.51)	train_acc   0.88 (  0.87)	train_minacc   0.45 (  0.33)	train_majacc   0.98 (  0.96)	train_corr   0.00 (  0.00)	l1 6.6272 (6.8443)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.26it/s] 12%|#1        | 3/26 [00:00<00:01, 14.12it/s] 31%|###       | 8/26 [00:00<00:00, 28.63it/s]                                               31%|###       | 8/26 [00:00<00:00, 28.63it/s] 50%|#####     | 13/26 [00:00<00:00, 34.98it/s] 69%|######9   | 18/26 [00:00<00:00, 36.17it/s]                                                69%|######9   | 18/26 [00:00<00:00, 36.17it/s] 88%|########8 | 23/26 [00:00<00:00, 39.30it/s]100%|##########| 26/26 [00:00<00:00, 32.62it/s]
Test: [   0/  26]	Loss 0.339 (0.339)	test_acc   0.86 (  0.86)	test_minacc   0.40 (  0.40)	test_majacc   0.95 (  0.95)	Loss_d 0.339 (0.339)	test_acc_d   0.86 (  0.86)	test_minacc_d   0.40 (  0.40)	test_majacc_d   0.95 (  0.95)	test_corr_d   0.83 (  0.83)
Test: [  10/  26]	Loss 0.337 (0.317)	test_acc   0.88 (  0.87)	test_minacc   0.34 (  0.43)	test_majacc   0.97 (  0.95)	Loss_d 0.337 (0.317)	test_acc_d   0.88 (  0.87)	test_minacc_d   0.34 (  0.43)	test_majacc_d   0.97 (  0.95)	test_corr_d   0.87 (  0.84)
Test: [  20/  26]	Loss 0.257 (0.302)	test_acc   0.90 (  0.87)	test_minacc   0.58 (  0.47)	test_majacc   0.94 (  0.95)	Loss_d 0.257 (0.302)	test_acc_d   0.90 (  0.87)	test_minacc_d   0.58 (  0.47)	test_majacc_d   0.94 (  0.95)	test_corr_d   0.82 (  0.84)
Test: [  26/  26]	Loss 0.249 (0.297)	test_acc   0.88 (  0.88)	test_minacc   0.48 (  0.48)	test_majacc   0.96 (  0.95)	Loss_d 0.249 (0.297)	test_acc_d   0.88 (  0.88)	test_minacc_d   0.48 (  0.48)	test_majacc_d   0.96 (  0.95)	test_corr_d   0.82 (  0.84)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 60.05it/s]
Test: [  0/  1]	Loss 1.630 (1.630)	test_acc   0.38 (  0.38)	test_minacc   0.31 (  0.31)	test_majacc   0.97 (  0.97)	Loss_d 1.630 (1.630)	test_acc_d   0.38 (  0.38)	test_minacc_d   0.31 (  0.31)	test_majacc_d   0.97 (  0.97)	test_corr_d   0.55 (  0.55)
Test: [  1/  1]	Loss 1.630 (1.630)	test_acc   0.38 (  0.38)	test_minacc   0.31 (  0.31)	test_majacc   0.97 (  0.97)	Loss_d 1.630 (1.630)	test_acc_d   0.38 (  0.38)	test_minacc_d   0.31 (  0.31)	test_majacc_d   0.97 (  0.97)	test_corr_d   0.55 (  0.55)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/138/checkpoints/model_best.pth
Overall Timing[  7/  1]	epoch_time 0.0370 (0.0452)	validation_time 0.0004 (0.0012)	train_time 0.0365 (0.0438)
record: (train_acc, test_acc) (0.8763000223040581, 0.3760000169277191)
last accs (train_acc, test_acc) (0.8763000223040581, 0.3760000169277191)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.26it/s] 15%|#5        | 4/26 [00:00<00:01, 17.86it/s] 31%|###       | 8/26 [00:00<00:00, 24.62it/s] 46%|####6     | 12/26 [00:00<00:00, 27.75it/s] 62%|######1   | 16/26 [00:00<00:00, 29.91it/s] 77%|#######6  | 20/26 [00:00<00:00, 31.71it/s] 92%|#########2| 24/26 [00:00<00:00, 32.31it/s]100%|##########| 26/26 [00:00<00:00, 27.30it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 208 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 209 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 210 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 211 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 212 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 213 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 214 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 215 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 216 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 217 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 218 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 219 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 220 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 221 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 222 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 223 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 224 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 225 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 226 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 227 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 228 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 229 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 230 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 231 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 232 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 233 400
penalty weights 0.0
Epoch: [8][  26/  26]	Loss 0.255 (0.285)	train_nll   0.26 (  0.28)	train_penalty   0.01 (  0.01)	weight_norm  22.74 ( 22.66)	train_acc   0.86 (  0.87)	train_minacc   0.27 (  0.41)	train_majacc   0.99 (  0.96)	train_corr   0.00 (  0.00)	l1 6.7540 (6.7970)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:00, 23.44it/s] 31%|###       | 8/26 [00:00<00:00, 37.28it/s]                                               31%|###       | 8/26 [00:00<00:00, 37.28it/s] 50%|#####     | 13/26 [00:00<00:00, 41.06it/s] 69%|######9   | 18/26 [00:00<00:00, 43.10it/s]                                                69%|######9   | 18/26 [00:00<00:00, 43.10it/s] 88%|########8 | 23/26 [00:00<00:00, 39.58it/s]100%|##########| 26/26 [00:00<00:00, 37.94it/s]
Test: [   0/  26]	Loss 0.308 (0.308)	test_acc   0.88 (  0.88)	test_minacc   0.44 (  0.44)	test_majacc   0.97 (  0.97)	Loss_d 0.308 (0.308)	test_acc_d   0.88 (  0.88)	test_minacc_d   0.44 (  0.44)	test_majacc_d   0.97 (  0.97)	test_corr_d   0.86 (  0.86)
Test: [  10/  26]	Loss 0.320 (0.290)	test_acc   0.88 (  0.87)	test_minacc   0.38 (  0.43)	test_majacc   0.97 (  0.96)	Loss_d 0.320 (0.290)	test_acc_d   0.88 (  0.87)	test_minacc_d   0.38 (  0.43)	test_majacc_d   0.97 (  0.96)	test_corr_d   0.88 (  0.86)
Test: [  20/  26]	Loss 0.216 (0.271)	test_acc   0.90 (  0.89)	test_minacc   0.58 (  0.49)	test_majacc   0.95 (  0.96)	Loss_d 0.216 (0.271)	test_acc_d   0.90 (  0.89)	test_minacc_d   0.58 (  0.49)	test_majacc_d   0.95 (  0.96)	test_corr_d   0.85 (  0.85)
Test: [  26/  26]	Loss 0.226 (0.267)	test_acc   0.88 (  0.89)	test_minacc   0.48 (  0.50)	test_majacc   0.97 (  0.96)	Loss_d 0.226 (0.267)	test_acc_d   0.88 (  0.89)	test_minacc_d   0.48 (  0.50)	test_majacc_d   0.97 (  0.96)	test_corr_d   0.83 (  0.85)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 65.74it/s]
Test: [  0/  1]	Loss 1.794 (1.794)	test_acc   0.36 (  0.36)	test_minacc   0.29 (  0.29)	test_majacc   0.98 (  0.98)	Loss_d 1.794 (1.794)	test_acc_d   0.36 (  0.36)	test_minacc_d   0.29 (  0.29)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.64 (  0.64)
Test: [  1/  1]	Loss 1.794 (1.794)	test_acc   0.36 (  0.36)	test_minacc   0.29 (  0.29)	test_majacc   0.98 (  0.98)	Loss_d 1.794 (1.794)	test_acc_d   0.36 (  0.36)	test_minacc_d   0.29 (  0.29)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.64 (  0.64)
Overall Timing[  8/  1]	epoch_time 0.0414 (0.0448)	validation_time 0.0004 (0.0011)	train_time 0.0410 (0.0435)
record: (train_acc, test_acc) (0.8763000223040581, 0.3760000169277191)
last accs (train_acc, test_acc) (0.8884000217914582, 0.35500001907348633)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.72it/s] 19%|#9        | 5/26 [00:00<00:00, 25.30it/s] 35%|###4      | 9/26 [00:00<00:00, 29.89it/s] 50%|#####     | 13/26 [00:00<00:00, 31.66it/s] 65%|######5   | 17/26 [00:00<00:00, 32.40it/s] 81%|########  | 21/26 [00:00<00:00, 32.75it/s] 96%|#########6| 25/26 [00:00<00:00, 33.78it/s]100%|##########| 26/26 [00:00<00:00, 29.83it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 234 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 235 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 236 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 237 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 238 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 239 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 240 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 241 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 242 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 243 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 244 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 245 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 246 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 247 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 248 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 249 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 250 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 251 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 252 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 253 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 254 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 255 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 256 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 257 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 258 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 259 400
penalty weights 0.0
Epoch: [9][  26/  26]	Loss 0.236 (0.268)	train_nll   0.24 (  0.27)	train_penalty   0.01 (  0.01)	weight_norm  22.94 ( 22.84)	train_acc   0.88 (  0.89)	train_minacc   0.41 (  0.52)	train_majacc   0.98 (  0.95)	train_corr   0.00 (  0.00)	l1 7.0111 (6.7007)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.13it/s] 23%|##3       | 6/26 [00:00<00:00, 23.75it/s]                                               23%|##3       | 6/26 [00:00<00:00, 23.75it/s] 42%|####2     | 11/26 [00:00<00:00, 32.60it/s] 62%|######1   | 16/26 [00:00<00:00, 37.92it/s]                                                62%|######1   | 16/26 [00:00<00:00, 37.92it/s] 81%|########  | 21/26 [00:00<00:00, 36.91it/s]100%|##########| 26/26 [00:00<00:00, 40.37it/s]100%|##########| 26/26 [00:00<00:00, 31.86it/s]
Test: [   0/  26]	Loss 0.301 (0.301)	test_acc   0.88 (  0.88)	test_minacc   0.47 (  0.47)	test_majacc   0.96 (  0.96)	Loss_d 0.301 (0.301)	test_acc_d   0.88 (  0.88)	test_minacc_d   0.47 (  0.47)	test_majacc_d   0.96 (  0.96)	test_corr_d   0.86 (  0.86)
Test: [  10/  26]	Loss 0.316 (0.279)	test_acc   0.86 (  0.88)	test_minacc   0.33 (  0.43)	test_majacc   0.95 (  0.96)	Loss_d 0.316 (0.279)	test_acc_d   0.86 (  0.88)	test_minacc_d   0.33 (  0.43)	test_majacc_d   0.95 (  0.96)	test_corr_d   0.89 (  0.86)
Test: [  20/  26]	Loss 0.164 (0.249)	test_acc   0.94 (  0.89)	test_minacc   0.75 (  0.50)	test_majacc   0.96 (  0.96)	Loss_d 0.164 (0.249)	test_acc_d   0.94 (  0.89)	test_minacc_d   0.75 (  0.50)	test_majacc_d   0.96 (  0.96)	test_corr_d   0.85 (  0.86)
Test: [  26/  26]	Loss 0.169 (0.240)	test_acc   0.92 (  0.90)	test_minacc   0.66 (  0.53)	test_majacc   0.98 (  0.96)	Loss_d 0.169 (0.240)	test_acc_d   0.92 (  0.90)	test_minacc_d   0.66 (  0.53)	test_majacc_d   0.98 (  0.96)	test_corr_d   0.81 (  0.85)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.85it/s]
Test: [  0/  1]	Loss 2.043 (2.043)	test_acc   0.39 (  0.39)	test_minacc   0.32 (  0.32)	test_majacc   0.99 (  0.99)	Loss_d 2.043 (2.043)	test_acc_d   0.39 (  0.39)	test_minacc_d   0.32 (  0.32)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.56 (  0.56)
Test: [  1/  1]	Loss 2.043 (2.043)	test_acc   0.39 (  0.39)	test_minacc   0.32 (  0.32)	test_majacc   0.99 (  0.99)	Loss_d 2.043 (2.043)	test_acc_d   0.39 (  0.39)	test_minacc_d   0.32 (  0.32)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.56 (  0.56)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/138/checkpoints/model_best.pth
Overall Timing[  9/  1]	epoch_time 0.0447 (0.0448)	validation_time 0.0003 (0.0010)	train_time 0.0444 (0.0435)
record: (train_acc, test_acc) (0.8962000241279602, 0.3890000283718109)
last accs (train_acc, test_acc) (0.8962000241279602, 0.3890000283718109)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.59it/s] 19%|#9        | 5/26 [00:00<00:00, 22.38it/s] 35%|###4      | 9/26 [00:00<00:00, 27.63it/s] 50%|#####     | 13/26 [00:00<00:00, 30.84it/s] 65%|######5   | 17/26 [00:00<00:00, 32.65it/s] 81%|########  | 21/26 [00:00<00:00, 34.18it/s] 96%|#########6| 25/26 [00:00<00:00, 34.85it/s]100%|##########| 26/26 [00:00<00:00, 29.18it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 260 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 261 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 262 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 263 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 264 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 265 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 266 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 267 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 268 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 269 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 270 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 271 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 272 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 273 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 274 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 275 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 276 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 277 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 278 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 279 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 280 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 281 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 282 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 283 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 284 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 285 400
penalty weights 0.0
Epoch: [10][  26/  26]	Loss 0.169 (0.255)	train_nll   0.17 (  0.26)	train_penalty   0.00 (  0.01)	weight_norm  23.18 ( 23.06)	train_acc   0.93 (  0.89)	train_minacc   0.66 (  0.54)	train_majacc   0.99 (  0.95)	train_corr   0.00 (  0.00)	l1 7.0268 (6.6199)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:01, 21.82it/s] 23%|##3       | 6/26 [00:00<00:01, 18.65it/s]                                               23%|##3       | 6/26 [00:00<00:01, 18.65it/s] 42%|####2     | 11/26 [00:00<00:00, 28.70it/s] 62%|######1   | 16/26 [00:00<00:00, 32.39it/s]                                                62%|######1   | 16/26 [00:00<00:00, 32.39it/s] 81%|########  | 21/26 [00:00<00:00, 36.79it/s]100%|##########| 26/26 [00:00<00:00, 31.82it/s]
Test: [   0/  26]	Loss 0.267 (0.267)	test_acc   0.89 (  0.89)	test_minacc   0.52 (  0.52)	test_majacc   0.96 (  0.96)	Loss_d 0.267 (0.267)	test_acc_d   0.89 (  0.89)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.96 (  0.96)	test_corr_d   0.85 (  0.85)
Test: [  10/  26]	Loss 0.311 (0.266)	test_acc   0.87 (  0.88)	test_minacc   0.34 (  0.45)	test_majacc   0.97 (  0.96)	Loss_d 0.311 (0.266)	test_acc_d   0.87 (  0.88)	test_minacc_d   0.34 (  0.45)	test_majacc_d   0.97 (  0.96)	test_corr_d   0.90 (  0.86)
Test: [  20/  26]	Loss 0.164 (0.247)	test_acc   0.94 (  0.90)	test_minacc   0.69 (  0.52)	test_majacc   0.97 (  0.96)	Loss_d 0.164 (0.247)	test_acc_d   0.94 (  0.90)	test_minacc_d   0.69 (  0.52)	test_majacc_d   0.97 (  0.96)	test_corr_d   0.85 (  0.85)
Test: [  26/  26]	Loss 0.126 (0.236)	test_acc   0.97 (  0.90)	test_minacc   0.86 (  0.55)	test_majacc   1.00 (  0.96)	Loss_d 0.126 (0.236)	test_acc_d   0.97 (  0.90)	test_minacc_d   0.86 (  0.55)	test_majacc_d   1.00 (  0.96)	test_corr_d   0.79 (  0.85)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.41it/s]
Test: [  0/  1]	Loss 2.196 (2.196)	test_acc   0.37 (  0.37)	test_minacc   0.30 (  0.30)	test_majacc   0.99 (  0.99)	Loss_d 2.196 (2.196)	test_acc_d   0.37 (  0.37)	test_minacc_d   0.30 (  0.30)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.56 (  0.56)
Test: [  1/  1]	Loss 2.196 (2.196)	test_acc   0.37 (  0.37)	test_minacc   0.30 (  0.30)	test_majacc   0.99 (  0.99)	Loss_d 2.196 (2.196)	test_acc_d   0.37 (  0.37)	test_minacc_d   0.30 (  0.30)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.56 (  0.56)
Overall Timing[ 10/  1]	epoch_time 0.0428 (0.0446)	validation_time 0.0004 (0.0010)	train_time 0.0424 (0.0434)
record: (train_acc, test_acc) (0.8962000241279602, 0.3890000283718109)
last accs (train_acc, test_acc) (0.9010000178813934, 0.3720000088214874)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.24it/s] 19%|#9        | 5/26 [00:00<00:01, 18.96it/s] 35%|###4      | 9/26 [00:00<00:00, 25.18it/s] 50%|#####     | 13/26 [00:00<00:00, 29.05it/s] 65%|######5   | 17/26 [00:00<00:00, 31.17it/s] 81%|########  | 21/26 [00:00<00:00, 32.75it/s] 96%|#########6| 25/26 [00:00<00:00, 33.89it/s]100%|##########| 26/26 [00:00<00:00, 27.33it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 286 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 287 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 288 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 289 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 290 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 291 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 292 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 293 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 294 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 295 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 296 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 297 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 298 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 299 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 300 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 301 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 302 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 303 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 304 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 305 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 306 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 307 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 308 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 309 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 310 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 311 400
penalty weights 0.0
Epoch: [11][  26/  26]	Loss 0.202 (0.254)	train_nll   0.20 (  0.25)	train_penalty   0.00 (  0.01)	weight_norm  23.48 ( 23.33)	train_acc   0.90 (  0.89)	train_minacc   0.61 (  0.56)	train_majacc   0.96 (  0.95)	train_corr   0.00 (  0.00)	l1 6.6329 (6.7391)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.95it/s] 15%|#5        | 4/26 [00:00<00:01, 18.31it/s] 35%|###4      | 9/26 [00:00<00:00, 30.18it/s]                                               35%|###4      | 9/26 [00:00<00:00, 30.18it/s] 54%|#####3    | 14/26 [00:00<00:00, 36.75it/s] 73%|#######3  | 19/26 [00:00<00:00, 37.40it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 37.40it/s] 92%|#########2| 24/26 [00:00<00:00, 40.66it/s]100%|##########| 26/26 [00:00<00:00, 33.15it/s]
Test: [   0/  26]	Loss 0.284 (0.284)	test_acc   0.89 (  0.89)	test_minacc   0.55 (  0.55)	test_majacc   0.96 (  0.96)	Loss_d 0.284 (0.284)	test_acc_d   0.89 (  0.89)	test_minacc_d   0.55 (  0.55)	test_majacc_d   0.96 (  0.96)	test_corr_d   0.84 (  0.84)
Test: [  10/  26]	Loss 0.260 (0.256)	test_acc   0.89 (  0.89)	test_minacc   0.41 (  0.49)	test_majacc   0.98 (  0.97)	Loss_d 0.260 (0.256)	test_acc_d   0.89 (  0.89)	test_minacc_d   0.41 (  0.49)	test_majacc_d   0.98 (  0.97)	test_corr_d   0.89 (  0.86)
Test: [  20/  26]	Loss 0.170 (0.241)	test_acc   0.94 (  0.90)	test_minacc   0.67 (  0.53)	test_majacc   0.98 (  0.97)	Loss_d 0.170 (0.241)	test_acc_d   0.94 (  0.90)	test_minacc_d   0.67 (  0.53)	test_majacc_d   0.98 (  0.97)	test_corr_d   0.87 (  0.86)
Test: [  26/  26]	Loss 0.163 (0.234)	test_acc   0.94 (  0.90)	test_minacc   0.77 (  0.54)	test_majacc   0.97 (  0.97)	Loss_d 0.163 (0.234)	test_acc_d   0.94 (  0.90)	test_minacc_d   0.77 (  0.54)	test_majacc_d   0.97 (  0.97)	test_corr_d   0.80 (  0.86)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.50it/s]
Test: [  0/  1]	Loss 2.076 (2.076)	test_acc   0.38 (  0.38)	test_minacc   0.32 (  0.32)	test_majacc   0.96 (  0.96)	Loss_d 2.076 (2.076)	test_acc_d   0.38 (  0.38)	test_minacc_d   0.32 (  0.32)	test_majacc_d   0.96 (  0.96)	test_corr_d   0.58 (  0.58)
Test: [  1/  1]	Loss 2.076 (2.076)	test_acc   0.38 (  0.38)	test_minacc   0.32 (  0.32)	test_majacc   0.96 (  0.96)	Loss_d 2.076 (2.076)	test_acc_d   0.38 (  0.38)	test_minacc_d   0.32 (  0.32)	test_majacc_d   0.96 (  0.96)	test_corr_d   0.58 (  0.58)
Overall Timing[ 11/  1]	epoch_time 0.0417 (0.0444)	validation_time 0.0004 (0.0009)	train_time 0.0412 (0.0433)
record: (train_acc, test_acc) (0.8962000241279602, 0.3890000283718109)
last accs (train_acc, test_acc) (0.9026000162363053, 0.3830000162124634)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.38it/s] 19%|#9        | 5/26 [00:00<00:01, 18.51it/s] 35%|###4      | 9/26 [00:00<00:00, 24.87it/s] 50%|#####     | 13/26 [00:00<00:00, 27.90it/s] 65%|######5   | 17/26 [00:00<00:00, 29.98it/s] 81%|########  | 21/26 [00:00<00:00, 31.81it/s] 96%|#########6| 25/26 [00:00<00:00, 32.48it/s]100%|##########| 26/26 [00:00<00:00, 26.38it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 312 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 313 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 314 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 315 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 316 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 317 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 318 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 319 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 320 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 321 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 322 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 323 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 324 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 325 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 326 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 327 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 328 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 329 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 330 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 331 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 332 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 333 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 334 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 335 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 336 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 337 400
penalty weights 0.0
Epoch: [12][  26/  26]	Loss 0.193 (0.228)	train_nll   0.19 (  0.23)	train_penalty   0.00 (  0.01)	weight_norm  23.79 ( 23.63)	train_acc   0.92 (  0.91)	train_minacc   0.64 (  0.63)	train_majacc   0.98 (  0.96)	train_corr   0.00 (  0.00)	l1 6.8714 (7.1366)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.10it/s] 23%|##3       | 6/26 [00:00<00:00, 28.59it/s]                                               23%|##3       | 6/26 [00:00<00:00, 28.59it/s] 42%|####2     | 11/26 [00:00<00:00, 33.99it/s] 62%|######1   | 16/26 [00:00<00:00, 39.43it/s]                                                62%|######1   | 16/26 [00:00<00:00, 39.43it/s] 81%|########  | 21/26 [00:00<00:00, 41.07it/s]100%|##########| 26/26 [00:00<00:00, 34.97it/s]
Test: [   0/  26]	Loss 0.258 (0.258)	test_acc   0.88 (  0.88)	test_minacc   0.52 (  0.52)	test_majacc   0.95 (  0.95)	Loss_d 0.258 (0.258)	test_acc_d   0.88 (  0.88)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.95 (  0.95)	test_corr_d   0.84 (  0.84)
Test: [  10/  26]	Loss 0.283 (0.250)	test_acc   0.88 (  0.90)	test_minacc   0.45 (  0.53)	test_majacc   0.96 (  0.96)	Loss_d 0.283 (0.250)	test_acc_d   0.88 (  0.90)	test_minacc_d   0.45 (  0.53)	test_majacc_d   0.96 (  0.96)	test_corr_d   0.87 (  0.85)
Test: [  20/  26]	Loss 0.132 (0.225)	test_acc   0.95 (  0.91)	test_minacc   0.73 (  0.57)	test_majacc   0.99 (  0.97)	Loss_d 0.132 (0.225)	test_acc_d   0.95 (  0.91)	test_minacc_d   0.73 (  0.57)	test_majacc_d   0.99 (  0.97)	test_corr_d   0.85 (  0.85)
Test: [  26/  26]	Loss 0.149 (0.216)	test_acc   0.95 (  0.91)	test_minacc   0.80 (  0.59)	test_majacc   0.98 (  0.97)	Loss_d 0.149 (0.216)	test_acc_d   0.95 (  0.91)	test_minacc_d   0.80 (  0.59)	test_majacc_d   0.98 (  0.97)	test_corr_d   0.79 (  0.84)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.83it/s]
Test: [  0/  1]	Loss 2.280 (2.280)	test_acc   0.37 (  0.37)	test_minacc   0.31 (  0.31)	test_majacc   0.95 (  0.95)	Loss_d 2.280 (2.280)	test_acc_d   0.37 (  0.37)	test_minacc_d   0.31 (  0.31)	test_majacc_d   0.95 (  0.95)	test_corr_d   0.57 (  0.57)
Test: [  1/  1]	Loss 2.280 (2.280)	test_acc   0.37 (  0.37)	test_minacc   0.31 (  0.31)	test_majacc   0.95 (  0.95)	Loss_d 2.280 (2.280)	test_acc_d   0.37 (  0.37)	test_minacc_d   0.31 (  0.31)	test_majacc_d   0.95 (  0.95)	test_corr_d   0.57 (  0.57)
Overall Timing[ 12/  1]	epoch_time 0.0432 (0.0443)	validation_time 0.0004 (0.0009)	train_time 0.0427 (0.0432)
record: (train_acc, test_acc) (0.8962000241279602, 0.3890000283718109)
last accs (train_acc, test_acc) (0.9109000163674354, 0.3700000047683716)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 17.19it/s] 23%|##3       | 6/26 [00:00<00:00, 26.67it/s] 38%|###8      | 10/26 [00:00<00:00, 29.80it/s] 54%|#####3    | 14/26 [00:00<00:00, 31.73it/s] 69%|######9   | 18/26 [00:00<00:00, 32.68it/s] 85%|########4 | 22/26 [00:00<00:00, 33.39it/s]100%|##########| 26/26 [00:00<00:00, 34.13it/s]100%|##########| 26/26 [00:00<00:00, 29.55it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 338 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 339 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 340 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 341 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 342 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 343 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 344 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 345 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 346 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 347 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 348 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 349 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 350 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 351 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 352 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 353 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 354 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 355 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 356 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 357 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 358 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 359 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 360 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 361 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 362 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 363 400
penalty weights 0.0
Epoch: [13][  26/  26]	Loss 0.152 (0.207)	train_nll   0.15 (  0.21)	train_penalty   0.00 (  0.00)	weight_norm  24.13 ( 23.96)	train_acc   0.92 (  0.92)	train_minacc   0.68 (  0.67)	train_majacc   0.98 (  0.96)	train_corr   0.00 (  0.00)	l1 7.5925 (7.0911)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.12it/s] 27%|##6       | 7/26 [00:00<00:00, 32.41it/s]                                               27%|##6       | 7/26 [00:00<00:00, 32.41it/s] 50%|#####     | 13/26 [00:00<00:00, 39.03it/s] 69%|######9   | 18/26 [00:00<00:00, 42.05it/s]                                                69%|######9   | 18/26 [00:00<00:00, 42.05it/s] 88%|########8 | 23/26 [00:00<00:00, 43.14it/s]100%|##########| 26/26 [00:00<00:00, 36.08it/s]
Test: [   0/  26]	Loss 0.277 (0.277)	test_acc   0.90 (  0.90)	test_minacc   0.50 (  0.50)	test_majacc   0.98 (  0.98)	Loss_d 0.277 (0.277)	test_acc_d   0.90 (  0.90)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.86 (  0.86)
Test: [  10/  26]	Loss 0.282 (0.247)	test_acc   0.91 (  0.90)	test_minacc   0.47 (  0.49)	test_majacc   0.98 (  0.98)	Loss_d 0.282 (0.247)	test_acc_d   0.91 (  0.90)	test_minacc_d   0.47 (  0.49)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.89 (  0.87)
Test: [  20/  26]	Loss 0.127 (0.218)	test_acc   0.96 (  0.91)	test_minacc   0.69 (  0.54)	test_majacc   1.00 (  0.98)	Loss_d 0.127 (0.218)	test_acc_d   0.96 (  0.91)	test_minacc_d   0.69 (  0.54)	test_majacc_d   1.00 (  0.98)	test_corr_d   0.87 (  0.86)
Test: [  26/  26]	Loss 0.109 (0.206)	test_acc   0.96 (  0.92)	test_minacc   0.80 (  0.56)	test_majacc   0.99 (  0.98)	Loss_d 0.109 (0.206)	test_acc_d   0.96 (  0.92)	test_minacc_d   0.80 (  0.56)	test_majacc_d   0.99 (  0.98)	test_corr_d   0.79 (  0.86)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 57.82it/s]
Test: [  0/  1]	Loss 2.769 (2.769)	test_acc   0.32 (  0.32)	test_minacc   0.25 (  0.25)	test_majacc   0.96 (  0.96)	Loss_d 2.769 (2.769)	test_acc_d   0.32 (  0.32)	test_minacc_d   0.25 (  0.25)	test_majacc_d   0.96 (  0.96)	test_corr_d   0.62 (  0.62)
Test: [  1/  1]	Loss 2.769 (2.769)	test_acc   0.32 (  0.32)	test_minacc   0.25 (  0.25)	test_majacc   0.96 (  0.96)	Loss_d 2.769 (2.769)	test_acc_d   0.32 (  0.32)	test_minacc_d   0.25 (  0.25)	test_majacc_d   0.96 (  0.96)	test_corr_d   0.62 (  0.62)
Overall Timing[ 13/  1]	epoch_time 0.0415 (0.0441)	validation_time 0.0004 (0.0009)	train_time 0.0410 (0.0431)
record: (train_acc, test_acc) (0.8962000241279602, 0.3890000283718109)
last accs (train_acc, test_acc) (0.9175000172257424, 0.31800001859664917)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s] 15%|#5        | 4/26 [00:00<00:00, 24.99it/s] 31%|###       | 8/26 [00:00<00:00, 30.22it/s] 46%|####6     | 12/26 [00:00<00:00, 31.79it/s] 62%|######1   | 16/26 [00:00<00:00, 33.52it/s] 77%|#######6  | 20/26 [00:00<00:00, 34.29it/s] 92%|#########2| 24/26 [00:00<00:00, 34.20it/s]100%|##########| 26/26 [00:00<00:00, 30.82it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 364 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 365 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 366 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 367 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 368 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 369 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 370 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 371 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 372 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 373 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 374 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 375 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 376 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 377 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 378 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 379 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 380 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 381 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 382 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 383 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 384 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 385 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 386 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 387 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 388 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 389 400
penalty weights 0.0
Epoch: [14][  26/  26]	Loss 0.120 (0.186)	train_nll   0.12 (  0.19)	train_penalty   0.00 (  0.01)	weight_norm  24.55 ( 24.34)	train_acc   0.96 (  0.92)	train_minacc   0.86 (  0.70)	train_majacc   0.98 (  0.96)	train_corr   0.00 (  0.00)	l1 7.7096 (7.3651)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  6.10it/s] 12%|#1        | 3/26 [00:00<00:01, 12.05it/s] 31%|###       | 8/26 [00:00<00:00, 25.22it/s]                                               31%|###       | 8/26 [00:00<00:00, 25.22it/s] 50%|#####     | 13/26 [00:00<00:00, 32.89it/s] 69%|######9   | 18/26 [00:00<00:00, 35.37it/s]                                                69%|######9   | 18/26 [00:00<00:00, 35.37it/s] 88%|########8 | 23/26 [00:00<00:00, 38.98it/s]100%|##########| 26/26 [00:00<00:00, 30.57it/s]
Test: [   0/  26]	Loss 0.216 (0.216)	test_acc   0.90 (  0.90)	test_minacc   0.71 (  0.71)	test_majacc   0.94 (  0.94)	Loss_d 0.216 (0.216)	test_acc_d   0.90 (  0.90)	test_minacc_d   0.71 (  0.71)	test_majacc_d   0.94 (  0.94)	test_corr_d   0.74 (  0.74)
Test: [  10/  26]	Loss 0.235 (0.202)	test_acc   0.92 (  0.91)	test_minacc   0.62 (  0.67)	test_majacc   0.97 (  0.96)	Loss_d 0.235 (0.202)	test_acc_d   0.92 (  0.91)	test_minacc_d   0.62 (  0.67)	test_majacc_d   0.97 (  0.96)	test_corr_d   0.80 (  0.77)
Test: [  20/  26]	Loss 0.128 (0.185)	test_acc   0.95 (  0.92)	test_minacc   0.85 (  0.72)	test_majacc   0.96 (  0.96)	Loss_d 0.128 (0.185)	test_acc_d   0.95 (  0.92)	test_minacc_d   0.85 (  0.72)	test_majacc_d   0.96 (  0.96)	test_corr_d   0.78 (  0.77)
Test: [  26/  26]	Loss 0.072 (0.172)	test_acc   0.99 (  0.93)	test_minacc   0.98 (  0.75)	test_majacc   0.99 (  0.96)	Loss_d 0.072 (0.172)	test_acc_d   0.99 (  0.93)	test_minacc_d   0.98 (  0.75)	test_majacc_d   0.99 (  0.96)	test_corr_d   0.70 (  0.76)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.02it/s]
Test: [  0/  1]	Loss 2.452 (2.452)	test_acc   0.42 (  0.42)	test_minacc   0.36 (  0.36)	test_majacc   0.94 (  0.94)	Loss_d 2.452 (2.452)	test_acc_d   0.42 (  0.42)	test_minacc_d   0.36 (  0.36)	test_majacc_d   0.94 (  0.94)	test_corr_d   0.40 (  0.40)
Test: [  1/  1]	Loss 2.452 (2.452)	test_acc   0.42 (  0.42)	test_minacc   0.36 (  0.36)	test_majacc   0.94 (  0.94)	Loss_d 2.452 (2.452)	test_acc_d   0.42 (  0.42)	test_minacc_d   0.36 (  0.36)	test_majacc_d   0.94 (  0.94)	test_corr_d   0.40 (  0.40)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/138/checkpoints/model_best.pth
Overall Timing[ 14/  1]	epoch_time 0.0430 (0.0440)	validation_time 0.0004 (0.0008)	train_time 0.0426 (0.0430)
record: (train_acc, test_acc) (0.9301000236272812, 0.4190000295639038)
last accs (train_acc, test_acc) (0.9301000236272812, 0.4190000295639038)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.56it/s] 12%|#1        | 3/26 [00:00<00:01, 14.31it/s] 27%|##6       | 7/26 [00:00<00:00, 24.24it/s] 42%|####2     | 11/26 [00:00<00:00, 28.73it/s] 58%|#####7    | 15/26 [00:00<00:00, 31.04it/s] 73%|#######3  | 19/26 [00:00<00:00, 32.32it/s] 88%|########8 | 23/26 [00:00<00:00, 33.14it/s]100%|##########| 26/26 [00:00<00:00, 27.80it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 390 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 391 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 392 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 393 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 394 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 395 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 396 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 397 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 398 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 399 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 400 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 401 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 402 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 403 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 404 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 405 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 406 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 407 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 408 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 409 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 410 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 411 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 412 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 413 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 414 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 415 400
penalty weights 10000.0
Epoch: [15][  26/  26]	Loss 0.001 (0.074)	train_nll   0.29 (  0.21)	train_penalty   0.00 (  0.00)	weight_norm  24.92 ( 24.76)	train_acc   0.86 (  0.91)	train_minacc   0.82 (  0.71)	train_majacc   0.87 (  0.95)	train_corr   0.00 (  0.00)	l1 6.7807 (7.7402)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.93it/s] 23%|##3       | 6/26 [00:00<00:00, 28.13it/s]                                               23%|##3       | 6/26 [00:00<00:00, 28.13it/s] 42%|####2     | 11/26 [00:00<00:00, 37.11it/s] 62%|######1   | 16/26 [00:00<00:00, 39.61it/s]                                                62%|######1   | 16/26 [00:00<00:00, 39.61it/s] 81%|########  | 21/26 [00:00<00:00, 39.05it/s]100%|##########| 26/26 [00:00<00:00, 42.19it/s]100%|##########| 26/26 [00:00<00:00, 34.70it/s]
Test: [   0/  26]	Loss 0.330 (0.330)	test_acc   0.84 (  0.84)	test_minacc   0.74 (  0.74)	test_majacc   0.86 (  0.86)	Loss_d 0.330 (0.330)	test_acc_d   0.84 (  0.84)	test_minacc_d   0.74 (  0.74)	test_majacc_d   0.86 (  0.86)	test_corr_d   0.62 (  0.62)
Test: [  10/  26]	Loss 0.261 (0.229)	test_acc   0.88 (  0.90)	test_minacc   0.78 (  0.86)	test_majacc   0.90 (  0.91)	Loss_d 0.261 (0.229)	test_acc_d   0.88 (  0.90)	test_minacc_d   0.78 (  0.86)	test_majacc_d   0.90 (  0.91)	test_corr_d   0.67 (  0.66)
Test: [  20/  26]	Loss 0.260 (0.232)	test_acc   0.89 (  0.90)	test_minacc   0.96 (  0.89)	test_majacc   0.88 (  0.90)	Loss_d 0.260 (0.232)	test_acc_d   0.89 (  0.90)	test_minacc_d   0.96 (  0.89)	test_majacc_d   0.88 (  0.90)	test_corr_d   0.65 (  0.65)
Test: [  26/  26]	Loss 0.280 (0.236)	test_acc   0.86 (  0.90)	test_minacc   0.82 (  0.88)	test_majacc   0.87 (  0.90)	Loss_d 0.280 (0.236)	test_acc_d   0.86 (  0.90)	test_minacc_d   0.82 (  0.88)	test_majacc_d   0.87 (  0.90)	test_corr_d   0.58 (  0.64)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 60.82it/s]
Test: [  0/  1]	Loss 1.597 (1.597)	test_acc   0.53 (  0.53)	test_minacc   0.49 (  0.49)	test_majacc   0.92 (  0.92)	Loss_d 1.597 (1.597)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.49 (  0.49)	test_majacc_d   0.92 (  0.92)	test_corr_d   0.23 (  0.23)
Test: [  1/  1]	Loss 1.597 (1.597)	test_acc   0.53 (  0.53)	test_minacc   0.49 (  0.49)	test_majacc   0.92 (  0.92)	Loss_d 1.597 (1.597)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.49 (  0.49)	test_majacc_d   0.92 (  0.92)	test_corr_d   0.23 (  0.23)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/138/checkpoints/model_best.pth
Overall Timing[ 15/  1]	epoch_time 0.0429 (0.0439)	validation_time 0.0004 (0.0008)	train_time 0.0425 (0.0430)
record: (train_acc, test_acc) (0.895900020301342, 0.5290000438690186)
last accs (train_acc, test_acc) (0.895900020301342, 0.5290000438690186)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:07,  3.56it/s] 12%|#1        | 3/26 [00:00<00:03,  6.71it/s] 23%|##3       | 6/26 [00:00<00:01, 12.03it/s] 38%|###8      | 10/26 [00:00<00:00, 18.63it/s] 54%|#####3    | 14/26 [00:00<00:00, 23.26it/s] 69%|######9   | 18/26 [00:00<00:00, 26.48it/s] 85%|########4 | 22/26 [00:01<00:00, 29.24it/s]100%|##########| 26/26 [00:01<00:00, 30.95it/s]100%|##########| 26/26 [00:01<00:00, 20.95it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 416 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 417 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 418 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 419 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 420 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 421 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 422 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 423 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 424 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 425 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 426 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 427 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 428 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 429 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 430 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 431 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 432 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 433 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 434 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 435 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 436 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 437 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 438 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 439 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 440 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 441 400
penalty weights 10000.0
Epoch: [16][  26/  26]	Loss 0.000 (0.005)	train_nll   0.25 (  0.27)	train_penalty   0.00 (  0.00)	weight_norm  25.00 ( 24.97)	train_acc   0.88 (  0.87)	train_minacc   0.89 (  0.88)	train_majacc   0.88 (  0.87)	train_corr   0.00 (  0.00)	l1 6.4275 (6.1550)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 18.49it/s] 27%|##6       | 7/26 [00:00<00:00, 36.16it/s]                                               27%|##6       | 7/26 [00:00<00:00, 36.16it/s] 46%|####6     | 12/26 [00:00<00:00, 38.99it/s] 65%|######5   | 17/26 [00:00<00:00, 39.34it/s]                                                65%|######5   | 17/26 [00:00<00:00, 39.34it/s] 85%|########4 | 22/26 [00:00<00:00, 42.43it/s]100%|##########| 26/26 [00:00<00:00, 36.91it/s]
Test: [   0/  26]	Loss 0.288 (0.288)	test_acc   0.88 (  0.88)	test_minacc   0.84 (  0.84)	test_majacc   0.89 (  0.89)	Loss_d 0.288 (0.288)	test_acc_d   0.88 (  0.88)	test_minacc_d   0.84 (  0.84)	test_majacc_d   0.89 (  0.89)	test_corr_d   0.62 (  0.62)
Test: [  10/  26]	Loss 0.251 (0.274)	test_acc   0.89 (  0.88)	test_minacc   0.74 (  0.81)	test_majacc   0.92 (  0.90)	Loss_d 0.251 (0.274)	test_acc_d   0.89 (  0.88)	test_minacc_d   0.74 (  0.81)	test_majacc_d   0.92 (  0.90)	test_corr_d   0.73 (  0.66)
Test: [  20/  26]	Loss 0.277 (0.272)	test_acc   0.87 (  0.88)	test_minacc   0.85 (  0.82)	test_majacc   0.87 (  0.89)	Loss_d 0.277 (0.272)	test_acc_d   0.87 (  0.88)	test_minacc_d   0.85 (  0.82)	test_majacc_d   0.87 (  0.89)	test_corr_d   0.65 (  0.66)
Test: [  26/  26]	Loss 0.255 (0.273)	test_acc   0.88 (  0.88)	test_minacc   0.89 (  0.82)	test_majacc   0.88 (  0.89)	Loss_d 0.255 (0.273)	test_acc_d   0.88 (  0.88)	test_minacc_d   0.89 (  0.82)	test_majacc_d   0.88 (  0.89)	test_corr_d   0.60 (  0.66)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.45it/s]
Test: [  0/  1]	Loss 1.529 (1.529)	test_acc   0.57 (  0.57)	test_minacc   0.53 (  0.53)	test_majacc   0.94 (  0.94)	Loss_d 1.529 (1.529)	test_acc_d   0.57 (  0.57)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.94 (  0.94)	test_corr_d   0.13 (  0.13)
Test: [  1/  1]	Loss 1.529 (1.529)	test_acc   0.57 (  0.57)	test_minacc   0.53 (  0.53)	test_majacc   0.94 (  0.94)	Loss_d 1.529 (1.529)	test_acc_d   0.57 (  0.57)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.94 (  0.94)	test_corr_d   0.13 (  0.13)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/138/checkpoints/model_best.pth
Overall Timing[ 16/  1]	epoch_time 0.0425 (0.0439)	validation_time 0.0003 (0.0008)	train_time 0.0422 (0.0429)
record: (train_acc, test_acc) (0.879300023496151, 0.5740000009536743)
last accs (train_acc, test_acc) (0.879300023496151, 0.5740000009536743)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:07,  3.26it/s] 19%|#9        | 5/26 [00:00<00:01, 14.41it/s] 35%|###4      | 9/26 [00:00<00:00, 21.42it/s] 50%|#####     | 13/26 [00:00<00:00, 25.50it/s] 65%|######5   | 17/26 [00:00<00:00, 28.74it/s] 81%|########  | 21/26 [00:00<00:00, 31.06it/s] 96%|#########6| 25/26 [00:00<00:00, 33.15it/s]100%|##########| 26/26 [00:01<00:00, 24.48it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 442 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 443 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 444 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 445 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 446 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 447 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 448 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 449 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 450 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 451 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 452 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 453 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 454 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 455 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 456 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 457 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 458 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 459 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 460 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 461 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 462 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 463 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 464 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 465 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 466 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 467 400
penalty weights 10000.0
Epoch: [17][  26/  26]	Loss 0.000 (0.001)	train_nll   0.29 (  0.28)	train_penalty   0.00 (  0.00)	weight_norm  25.02 ( 25.01)	train_acc   0.86 (  0.87)	train_minacc   0.84 (  0.81)	train_majacc   0.86 (  0.88)	train_corr   0.00 (  0.00)	l1 6.0812 (6.3508)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:06,  3.90it/s] 19%|#9        | 5/26 [00:00<00:01, 15.82it/s]                                               19%|#9        | 5/26 [00:00<00:01, 15.82it/s] 42%|####2     | 11/26 [00:00<00:00, 28.68it/s] 62%|######1   | 16/26 [00:00<00:00, 31.72it/s]                                                62%|######1   | 16/26 [00:00<00:00, 31.72it/s] 81%|########  | 21/26 [00:00<00:00, 35.60it/s]100%|##########| 26/26 [00:00<00:00, 39.15it/s]100%|##########| 26/26 [00:00<00:00, 29.00it/s]
Test: [   0/  26]	Loss 0.298 (0.298)	test_acc   0.86 (  0.86)	test_minacc   0.79 (  0.79)	test_majacc   0.87 (  0.87)	Loss_d 0.298 (0.298)	test_acc_d   0.86 (  0.86)	test_minacc_d   0.79 (  0.79)	test_majacc_d   0.87 (  0.87)	test_corr_d   0.63 (  0.63)
Test: [  10/  26]	Loss 0.271 (0.266)	test_acc   0.87 (  0.88)	test_minacc   0.78 (  0.85)	test_majacc   0.89 (  0.88)	Loss_d 0.271 (0.266)	test_acc_d   0.87 (  0.88)	test_minacc_d   0.78 (  0.85)	test_majacc_d   0.89 (  0.88)	test_corr_d   0.69 (  0.65)
Test: [  20/  26]	Loss 0.288 (0.272)	test_acc   0.86 (  0.87)	test_minacc   0.88 (  0.84)	test_majacc   0.86 (  0.88)	Loss_d 0.288 (0.272)	test_acc_d   0.86 (  0.87)	test_minacc_d   0.88 (  0.84)	test_majacc_d   0.86 (  0.88)	test_corr_d   0.64 (  0.65)
Test: [  26/  26]	Loss 0.293 (0.276)	test_acc   0.86 (  0.87)	test_minacc   0.84 (  0.84)	test_majacc   0.86 (  0.87)	Loss_d 0.293 (0.276)	test_acc_d   0.86 (  0.87)	test_minacc_d   0.84 (  0.84)	test_majacc_d   0.86 (  0.87)	test_corr_d   0.60 (  0.65)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.55it/s]
Test: [  0/  1]	Loss 1.419 (1.419)	test_acc   0.57 (  0.57)	test_minacc   0.53 (  0.53)	test_majacc   0.93 (  0.93)	Loss_d 1.419 (1.419)	test_acc_d   0.57 (  0.57)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.93 (  0.93)	test_corr_d   0.15 (  0.15)
Test: [  1/  1]	Loss 1.419 (1.419)	test_acc   0.57 (  0.57)	test_minacc   0.53 (  0.53)	test_majacc   0.93 (  0.93)	Loss_d 1.419 (1.419)	test_acc_d   0.57 (  0.57)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.93 (  0.93)	test_corr_d   0.15 (  0.15)
Overall Timing[ 17/  1]	epoch_time 0.0417 (0.0437)	validation_time 0.0004 (0.0008)	train_time 0.0412 (0.0428)
record: (train_acc, test_acc) (0.879300023496151, 0.5740000009536743)
last accs (train_acc, test_acc) (0.8689000265598297, 0.5660000443458557)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 15.01it/s] 15%|#5        | 4/26 [00:00<00:01, 14.17it/s] 31%|###       | 8/26 [00:00<00:00, 21.93it/s] 46%|####6     | 12/26 [00:00<00:00, 26.77it/s] 62%|######1   | 16/26 [00:00<00:00, 29.85it/s] 77%|#######6  | 20/26 [00:00<00:00, 31.77it/s] 92%|#########2| 24/26 [00:00<00:00, 32.97it/s]100%|##########| 26/26 [00:00<00:00, 26.46it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 468 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 469 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 470 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 471 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 472 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 473 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 474 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 475 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 476 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 477 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 478 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 479 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 480 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 481 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 482 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 483 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 484 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 485 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 486 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 487 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 488 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 489 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 490 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 491 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 492 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 493 400
penalty weights 10000.0
Epoch: [18][  26/  26]	Loss 0.000 (0.001)	train_nll   0.28 (  0.29)	train_penalty   0.00 (  0.00)	weight_norm  25.02 ( 25.02)	train_acc   0.86 (  0.86)	train_minacc   0.86 (  0.85)	train_majacc   0.85 (  0.86)	train_corr   0.00 (  0.00)	l1 6.1168 (6.1983)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 17.29it/s] 27%|##6       | 7/26 [00:00<00:00, 34.25it/s]                                               27%|##6       | 7/26 [00:00<00:00, 34.25it/s] 46%|####6     | 12/26 [00:00<00:00, 39.87it/s] 65%|######5   | 17/26 [00:00<00:00, 41.87it/s]                                                65%|######5   | 17/26 [00:00<00:00, 41.87it/s] 85%|########4 | 22/26 [00:00<00:00, 40.48it/s]100%|##########| 26/26 [00:00<00:00, 37.05it/s]
Test: [   0/  26]	Loss 0.285 (0.285)	test_acc   0.87 (  0.87)	test_minacc   0.84 (  0.84)	test_majacc   0.87 (  0.87)	Loss_d 0.285 (0.285)	test_acc_d   0.87 (  0.87)	test_minacc_d   0.84 (  0.84)	test_majacc_d   0.87 (  0.87)	test_corr_d   0.63 (  0.63)
Test: [  10/  26]	Loss 0.252 (0.260)	test_acc   0.89 (  0.88)	test_minacc   0.79 (  0.87)	test_majacc   0.91 (  0.88)	Loss_d 0.252 (0.260)	test_acc_d   0.89 (  0.88)	test_minacc_d   0.79 (  0.87)	test_majacc_d   0.91 (  0.88)	test_corr_d   0.70 (  0.65)
Test: [  20/  26]	Loss 0.287 (0.266)	test_acc   0.86 (  0.88)	test_minacc   0.90 (  0.86)	test_majacc   0.85 (  0.88)	Loss_d 0.287 (0.266)	test_acc_d   0.86 (  0.88)	test_minacc_d   0.90 (  0.86)	test_majacc_d   0.85 (  0.88)	test_corr_d   0.65 (  0.65)
Test: [  26/  26]	Loss 0.278 (0.270)	test_acc   0.85 (  0.87)	test_minacc   0.86 (  0.86)	test_majacc   0.85 (  0.87)	Loss_d 0.278 (0.270)	test_acc_d   0.85 (  0.87)	test_minacc_d   0.86 (  0.86)	test_majacc_d   0.85 (  0.87)	test_corr_d   0.60 (  0.65)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 58.94it/s]
Test: [  0/  1]	Loss 1.414 (1.414)	test_acc   0.58 (  0.58)	test_minacc   0.54 (  0.54)	test_majacc   0.95 (  0.95)	Loss_d 1.414 (1.414)	test_acc_d   0.58 (  0.58)	test_minacc_d   0.54 (  0.54)	test_majacc_d   0.95 (  0.95)	test_corr_d   0.14 (  0.14)
Test: [  1/  1]	Loss 1.414 (1.414)	test_acc   0.58 (  0.58)	test_minacc   0.54 (  0.54)	test_majacc   0.95 (  0.95)	Loss_d 1.414 (1.414)	test_acc_d   0.58 (  0.58)	test_minacc_d   0.54 (  0.54)	test_majacc_d   0.95 (  0.95)	test_corr_d   0.14 (  0.14)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/138/checkpoints/model_best.pth
Overall Timing[ 18/  1]	epoch_time 0.0408 (0.0436)	validation_time 0.0004 (0.0007)	train_time 0.0404 (0.0427)
record: (train_acc, test_acc) (0.8719000228047371, 0.5800000429153442)
last accs (train_acc, test_acc) (0.8719000228047371, 0.5800000429153442)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:05,  4.36it/s] 19%|#9        | 5/26 [00:00<00:01, 16.78it/s] 35%|###4      | 9/26 [00:00<00:00, 23.08it/s] 50%|#####     | 13/26 [00:00<00:00, 26.73it/s] 65%|######5   | 17/26 [00:00<00:00, 29.03it/s] 81%|########  | 21/26 [00:00<00:00, 30.99it/s] 96%|#########6| 25/26 [00:00<00:00, 32.68it/s]100%|##########| 26/26 [00:01<00:00, 25.67it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 494 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 495 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 496 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 497 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 498 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 499 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 500 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 501 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 502 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 503 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 504 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 505 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 506 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 507 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 508 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 509 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 510 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 511 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 512 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 513 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 514 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 515 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 516 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 517 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 518 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 519 400
penalty weights 10000.0
Epoch: [19][  26/  26]	Loss 0.000 (0.000)	train_nll   0.28 (  0.28)	train_penalty   0.00 (  0.00)	weight_norm  25.02 ( 25.02)	train_acc   0.87 (  0.87)	train_minacc   0.86 (  0.85)	train_majacc   0.87 (  0.87)	train_corr   0.00 (  0.00)	l1 6.0547 (6.3311)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.39it/s] 23%|##3       | 6/26 [00:00<00:00, 29.90it/s]                                               23%|##3       | 6/26 [00:00<00:00, 29.90it/s] 42%|####2     | 11/26 [00:00<00:00, 37.46it/s] 62%|######1   | 16/26 [00:00<00:00, 41.09it/s]                                                62%|######1   | 16/26 [00:00<00:00, 41.09it/s] 81%|########  | 21/26 [00:00<00:00, 39.54it/s]100%|##########| 26/26 [00:00<00:00, 42.36it/s]100%|##########| 26/26 [00:00<00:00, 35.17it/s]
Test: [   0/  26]	Loss 0.265 (0.265)	test_acc   0.89 (  0.89)	test_minacc   0.84 (  0.84)	test_majacc   0.90 (  0.90)	Loss_d 0.265 (0.265)	test_acc_d   0.89 (  0.89)	test_minacc_d   0.84 (  0.84)	test_majacc_d   0.90 (  0.90)	test_corr_d   0.67 (  0.67)
Test: [  10/  26]	Loss 0.237 (0.247)	test_acc   0.91 (  0.90)	test_minacc   0.79 (  0.85)	test_majacc   0.93 (  0.90)	Loss_d 0.237 (0.247)	test_acc_d   0.91 (  0.90)	test_minacc_d   0.79 (  0.85)	test_majacc_d   0.93 (  0.90)	test_corr_d   0.74 (  0.69)
Test: [  20/  26]	Loss 0.261 (0.246)	test_acc   0.88 (  0.89)	test_minacc   0.90 (  0.85)	test_majacc   0.88 (  0.90)	Loss_d 0.261 (0.246)	test_acc_d   0.88 (  0.89)	test_minacc_d   0.90 (  0.85)	test_majacc_d   0.88 (  0.90)	test_corr_d   0.69 (  0.69)
Test: [  26/  26]	Loss 0.277 (0.251)	test_acc   0.86 (  0.89)	test_minacc   0.86 (  0.84)	test_majacc   0.86 (  0.90)	Loss_d 0.277 (0.251)	test_acc_d   0.86 (  0.89)	test_minacc_d   0.86 (  0.84)	test_majacc_d   0.86 (  0.90)	test_corr_d   0.64 (  0.69)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.58it/s]
Test: [  0/  1]	Loss 1.475 (1.475)	test_acc   0.55 (  0.55)	test_minacc   0.51 (  0.51)	test_majacc   0.95 (  0.95)	Loss_d 1.475 (1.475)	test_acc_d   0.55 (  0.55)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.95 (  0.95)	test_corr_d   0.23 (  0.23)
Test: [  1/  1]	Loss 1.475 (1.475)	test_acc   0.55 (  0.55)	test_minacc   0.51 (  0.51)	test_majacc   0.95 (  0.95)	Loss_d 1.475 (1.475)	test_acc_d   0.55 (  0.55)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.95 (  0.95)	test_corr_d   0.23 (  0.23)
Overall Timing[ 19/  1]	epoch_time 0.0404 (0.0434)	validation_time 0.0004 (0.0007)	train_time 0.0400 (0.0426)
record: (train_acc, test_acc) (0.8719000228047371, 0.5800000429153442)
last accs (train_acc, test_acc) (0.8891000197529793, 0.5530000329017639)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:06,  4.10it/s] 19%|#9        | 5/26 [00:00<00:01, 16.54it/s] 35%|###4      | 9/26 [00:00<00:00, 23.36it/s] 50%|#####     | 13/26 [00:00<00:00, 27.52it/s] 65%|######5   | 17/26 [00:00<00:00, 30.11it/s] 81%|########  | 21/26 [00:00<00:00, 32.03it/s] 96%|#########6| 25/26 [00:00<00:00, 32.94it/s]100%|##########| 26/26 [00:01<00:00, 25.92it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 520 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 521 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 522 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 523 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 524 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 525 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 526 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 527 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 528 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 529 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 530 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 531 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 532 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 533 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 534 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 535 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 536 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 537 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 538 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 539 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 540 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 541 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 542 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 543 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 544 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 545 400
penalty weights 10000.0
Epoch: [20][  26/  26]	Loss 0.000 (0.001)	train_nll   0.28 (  0.27)	train_penalty   0.00 (  0.00)	weight_norm  25.03 ( 25.03)	train_acc   0.87 (  0.87)	train_minacc   0.86 (  0.85)	train_majacc   0.87 (  0.88)	train_corr   0.00 (  0.00)	l1 6.1519 (6.4518)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:01, 20.28it/s] 31%|###       | 8/26 [00:00<00:00, 33.97it/s]                                               31%|###       | 8/26 [00:00<00:00, 33.97it/s] 50%|#####     | 13/26 [00:00<00:00, 39.80it/s] 69%|######9   | 18/26 [00:00<00:00, 42.58it/s]                                                69%|######9   | 18/26 [00:00<00:00, 42.58it/s] 88%|########8 | 23/26 [00:00<00:00, 40.59it/s]100%|##########| 26/26 [00:00<00:00, 37.00it/s]
Test: [   0/  26]	Loss 0.262 (0.262)	test_acc   0.88 (  0.88)	test_minacc   0.82 (  0.82)	test_majacc   0.89 (  0.89)	Loss_d 0.262 (0.262)	test_acc_d   0.88 (  0.88)	test_minacc_d   0.82 (  0.82)	test_majacc_d   0.89 (  0.89)	test_corr_d   0.69 (  0.69)
Test: [  10/  26]	Loss 0.220 (0.241)	test_acc   0.91 (  0.90)	test_minacc   0.74 (  0.82)	test_majacc   0.94 (  0.91)	Loss_d 0.220 (0.241)	test_acc_d   0.91 (  0.90)	test_minacc_d   0.74 (  0.82)	test_majacc_d   0.94 (  0.91)	test_corr_d   0.76 (  0.71)
Test: [  20/  26]	Loss 0.243 (0.234)	test_acc   0.89 (  0.90)	test_minacc   0.88 (  0.84)	test_majacc   0.89 (  0.91)	Loss_d 0.243 (0.234)	test_acc_d   0.89 (  0.90)	test_minacc_d   0.88 (  0.84)	test_majacc_d   0.89 (  0.91)	test_corr_d   0.71 (  0.71)
Test: [  26/  26]	Loss 0.271 (0.239)	test_acc   0.87 (  0.90)	test_minacc   0.86 (  0.83)	test_majacc   0.87 (  0.91)	Loss_d 0.271 (0.239)	test_acc_d   0.87 (  0.90)	test_minacc_d   0.86 (  0.83)	test_majacc_d   0.87 (  0.91)	test_corr_d   0.66 (  0.71)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 60.35it/s]
Test: [  0/  1]	Loss 1.547 (1.547)	test_acc   0.53 (  0.53)	test_minacc   0.48 (  0.48)	test_majacc   0.95 (  0.95)	Loss_d 1.547 (1.547)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.48 (  0.48)	test_majacc_d   0.95 (  0.95)	test_corr_d   0.27 (  0.27)
Test: [  1/  1]	Loss 1.547 (1.547)	test_acc   0.53 (  0.53)	test_minacc   0.48 (  0.48)	test_majacc   0.95 (  0.95)	Loss_d 1.547 (1.547)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.48 (  0.48)	test_majacc_d   0.95 (  0.95)	test_corr_d   0.27 (  0.27)
Overall Timing[ 20/  1]	epoch_time 0.0406 (0.0433)	validation_time 0.0004 (0.0007)	train_time 0.0401 (0.0425)
record: (train_acc, test_acc) (0.8719000228047371, 0.5800000429153442)
last accs (train_acc, test_acc) (0.8957000244259834, 0.5300000309944153)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.36it/s] 19%|#9        | 5/26 [00:00<00:01, 19.11it/s] 35%|###4      | 9/26 [00:00<00:00, 25.95it/s] 50%|#####     | 13/26 [00:00<00:00, 29.77it/s] 65%|######5   | 17/26 [00:00<00:00, 31.45it/s] 81%|########  | 21/26 [00:00<00:00, 32.84it/s] 96%|#########6| 25/26 [00:00<00:00, 33.21it/s]100%|##########| 26/26 [00:00<00:00, 27.21it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 546 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 547 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 548 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 549 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 550 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 551 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 552 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 553 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 554 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 555 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 556 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 557 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 558 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 559 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 560 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 561 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 562 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 563 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 564 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 565 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 566 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 567 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 568 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 569 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 570 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 571 400
penalty weights 10000.0
Epoch: [21][  26/  26]	Loss 0.000 (0.001)	train_nll   0.27 (  0.25)	train_penalty   0.00 (  0.00)	weight_norm  25.04 ( 25.03)	train_acc   0.88 (  0.88)	train_minacc   0.84 (  0.84)	train_majacc   0.89 (  0.89)	train_corr   0.00 (  0.00)	l1 6.8223 (6.6895)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.20it/s] 23%|##3       | 6/26 [00:00<00:00, 24.19it/s]                                               23%|##3       | 6/26 [00:00<00:00, 24.19it/s] 42%|####2     | 11/26 [00:00<00:00, 32.34it/s] 62%|######1   | 16/26 [00:00<00:00, 38.05it/s]                                                62%|######1   | 16/26 [00:00<00:00, 38.05it/s] 81%|########  | 21/26 [00:00<00:00, 37.78it/s]100%|##########| 26/26 [00:00<00:00, 32.43it/s]
Test: [   0/  26]	Loss 0.264 (0.264)	test_acc   0.88 (  0.88)	test_minacc   0.77 (  0.77)	test_majacc   0.91 (  0.91)	Loss_d 0.264 (0.264)	test_acc_d   0.88 (  0.88)	test_minacc_d   0.77 (  0.77)	test_majacc_d   0.91 (  0.91)	test_corr_d   0.71 (  0.71)
Test: [  10/  26]	Loss 0.227 (0.248)	test_acc   0.90 (  0.89)	test_minacc   0.71 (  0.79)	test_majacc   0.94 (  0.91)	Loss_d 0.227 (0.248)	test_acc_d   0.90 (  0.89)	test_minacc_d   0.71 (  0.79)	test_majacc_d   0.94 (  0.91)	test_corr_d   0.78 (  0.73)
Test: [  20/  26]	Loss 0.210 (0.229)	test_acc   0.91 (  0.90)	test_minacc   0.92 (  0.82)	test_majacc   0.91 (  0.92)	Loss_d 0.210 (0.229)	test_acc_d   0.91 (  0.90)	test_minacc_d   0.92 (  0.82)	test_majacc_d   0.91 (  0.92)	test_corr_d   0.74 (  0.73)
Test: [  26/  26]	Loss 0.253 (0.232)	test_acc   0.88 (  0.90)	test_minacc   0.84 (  0.82)	test_majacc   0.89 (  0.91)	Loss_d 0.253 (0.232)	test_acc_d   0.88 (  0.90)	test_minacc_d   0.84 (  0.82)	test_majacc_d   0.89 (  0.91)	test_corr_d   0.68 (  0.73)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.55it/s]
Test: [  0/  1]	Loss 1.812 (1.812)	test_acc   0.51 (  0.51)	test_minacc   0.46 (  0.46)	test_majacc   0.95 (  0.95)	Loss_d 1.812 (1.812)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.46 (  0.46)	test_majacc_d   0.95 (  0.95)	test_corr_d   0.32 (  0.32)
Test: [  1/  1]	Loss 1.812 (1.812)	test_acc   0.51 (  0.51)	test_minacc   0.46 (  0.46)	test_majacc   0.95 (  0.95)	Loss_d 1.812 (1.812)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.46 (  0.46)	test_majacc_d   0.95 (  0.95)	test_corr_d   0.32 (  0.32)
Overall Timing[ 21/  1]	epoch_time 0.0409 (0.0432)	validation_time 0.0004 (0.0007)	train_time 0.0404 (0.0424)
record: (train_acc, test_acc) (0.8719000228047371, 0.5800000429153442)
last accs (train_acc, test_acc) (0.8980000235438347, 0.5060000419616699)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:02,  9.52it/s] 23%|##3       | 6/26 [00:00<00:00, 20.19it/s] 38%|###8      | 10/26 [00:00<00:00, 26.21it/s] 54%|#####3    | 14/26 [00:00<00:00, 29.33it/s] 69%|######9   | 18/26 [00:00<00:00, 31.11it/s] 85%|########4 | 22/26 [00:00<00:00, 32.34it/s]100%|##########| 26/26 [00:00<00:00, 33.13it/s]100%|##########| 26/26 [00:00<00:00, 27.17it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 572 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 573 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 574 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 575 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 576 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 577 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 578 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 579 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 580 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 581 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 582 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 583 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 584 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 585 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 586 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 587 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 588 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 589 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 590 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 591 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 592 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 593 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 594 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 595 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 596 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 597 400
penalty weights 10000.0
Epoch: [22][  26/  26]	Loss 0.001 (0.002)	train_nll   0.23 (  0.24)	train_penalty   0.00 (  0.00)	weight_norm  25.05 ( 25.04)	train_acc   0.89 (  0.90)	train_minacc   0.91 (  0.80)	train_majacc   0.89 (  0.91)	train_corr   0.00 (  0.00)	l1 7.3014 (6.7610)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:00, 25.38it/s] 31%|###       | 8/26 [00:00<00:00, 38.52it/s]                                               31%|###       | 8/26 [00:00<00:00, 38.52it/s] 50%|#####     | 13/26 [00:00<00:00, 41.31it/s] 69%|######9   | 18/26 [00:00<00:00, 44.16it/s]                                                69%|######9   | 18/26 [00:00<00:00, 44.16it/s] 88%|########8 | 23/26 [00:00<00:00, 41.37it/s]100%|##########| 26/26 [00:00<00:00, 38.33it/s]
Test: [   0/  26]	Loss 0.270 (0.270)	test_acc   0.87 (  0.87)	test_minacc   0.84 (  0.84)	test_majacc   0.88 (  0.88)	Loss_d 0.270 (0.270)	test_acc_d   0.87 (  0.87)	test_minacc_d   0.84 (  0.84)	test_majacc_d   0.88 (  0.88)	test_corr_d   0.67 (  0.67)
Test: [  10/  26]	Loss 0.247 (0.260)	test_acc   0.89 (  0.88)	test_minacc   0.74 (  0.83)	test_majacc   0.92 (  0.89)	Loss_d 0.247 (0.260)	test_acc_d   0.89 (  0.88)	test_minacc_d   0.74 (  0.83)	test_majacc_d   0.92 (  0.89)	test_corr_d   0.75 (  0.69)
Test: [  20/  26]	Loss 0.212 (0.244)	test_acc   0.91 (  0.89)	test_minacc   0.96 (  0.85)	test_majacc   0.90 (  0.90)	Loss_d 0.212 (0.244)	test_acc_d   0.91 (  0.89)	test_minacc_d   0.96 (  0.85)	test_majacc_d   0.90 (  0.90)	test_corr_d   0.71 (  0.69)
Test: [  26/  26]	Loss 0.232 (0.242)	test_acc   0.90 (  0.89)	test_minacc   0.91 (  0.86)	test_majacc   0.89 (  0.90)	Loss_d 0.232 (0.242)	test_acc_d   0.90 (  0.89)	test_minacc_d   0.91 (  0.86)	test_majacc_d   0.89 (  0.90)	test_corr_d   0.64 (  0.69)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.56it/s]
Test: [  0/  1]	Loss 1.902 (1.902)	test_acc   0.55 (  0.55)	test_minacc   0.51 (  0.51)	test_majacc   0.94 (  0.94)	Loss_d 1.902 (1.902)	test_acc_d   0.55 (  0.55)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.94 (  0.94)	test_corr_d   0.22 (  0.22)
Test: [  1/  1]	Loss 1.902 (1.902)	test_acc   0.55 (  0.55)	test_minacc   0.51 (  0.51)	test_majacc   0.94 (  0.94)	Loss_d 1.902 (1.902)	test_acc_d   0.55 (  0.55)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.94 (  0.94)	test_corr_d   0.22 (  0.22)
Overall Timing[ 22/  1]	epoch_time 0.0423 (0.0431)	validation_time 0.0004 (0.0007)	train_time 0.0418 (0.0423)
record: (train_acc, test_acc) (0.8719000228047371, 0.5800000429153442)
last accs (train_acc, test_acc) (0.8902000210285187, 0.5540000200271606)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 14.68it/s] 23%|##3       | 6/26 [00:00<00:00, 25.26it/s] 38%|###8      | 10/26 [00:00<00:00, 29.10it/s] 54%|#####3    | 14/26 [00:00<00:00, 31.15it/s] 69%|######9   | 18/26 [00:00<00:00, 32.18it/s] 85%|########4 | 22/26 [00:00<00:00, 33.33it/s]100%|##########| 26/26 [00:00<00:00, 33.56it/s]100%|##########| 26/26 [00:00<00:00, 28.94it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 598 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 599 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 600 400
penalty weights 10000.0
l1 at pgd_anneal_iters 7.254243850708008
set z to 6.891531658172607
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 601 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 602 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 603 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 604 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 605 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 606 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 607 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 608 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 609 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 610 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 611 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 612 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 613 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 614 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 615 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 616 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 617 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 618 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 619 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 620 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 621 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 622 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 623 400
penalty weights 10000.0
Epoch: [23][  26/  26]	Loss 0.002 (0.001)	train_nll   0.28 (  0.25)	train_penalty   0.00 (  0.00)	weight_norm  25.06 ( 25.05)	train_acc   0.85 (  0.88)	train_minacc   0.89 (  0.85)	train_majacc   0.84 (  0.89)	train_corr   0.00 (  0.00)	l1 7.3004 (7.0034)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.82it/s] 23%|##3       | 6/26 [00:00<00:00, 27.45it/s]                                               23%|##3       | 6/26 [00:00<00:00, 27.45it/s] 42%|####2     | 11/26 [00:00<00:00, 32.63it/s] 62%|######1   | 16/26 [00:00<00:00, 37.67it/s]                                                62%|######1   | 16/26 [00:00<00:00, 37.67it/s] 81%|########  | 21/26 [00:00<00:00, 38.82it/s]100%|##########| 26/26 [00:00<00:00, 41.55it/s]100%|##########| 26/26 [00:00<00:00, 33.20it/s]
Test: [   0/  26]	Loss 0.315 (0.315)	test_acc   0.84 (  0.84)	test_minacc   0.82 (  0.82)	test_majacc   0.84 (  0.84)	Loss_d 0.315 (0.315)	test_acc_d   0.84 (  0.84)	test_minacc_d   0.82 (  0.82)	test_majacc_d   0.84 (  0.84)	test_corr_d   0.61 (  0.61)
Test: [  10/  26]	Loss 0.292 (0.282)	test_acc   0.86 (  0.86)	test_minacc   0.74 (  0.86)	test_majacc   0.88 (  0.86)	Loss_d 0.292 (0.282)	test_acc_d   0.86 (  0.86)	test_minacc_d   0.74 (  0.86)	test_majacc_d   0.88 (  0.86)	test_corr_d   0.68 (  0.63)
Test: [  20/  26]	Loss 0.282 (0.285)	test_acc   0.84 (  0.85)	test_minacc   0.83 (  0.86)	test_majacc   0.84 (  0.85)	Loss_d 0.282 (0.285)	test_acc_d   0.84 (  0.85)	test_minacc_d   0.83 (  0.86)	test_majacc_d   0.84 (  0.85)	test_corr_d   0.65 (  0.63)
Test: [  26/  26]	Loss 0.274 (0.284)	test_acc   0.85 (  0.85)	test_minacc   0.89 (  0.86)	test_majacc   0.84 (  0.85)	Loss_d 0.274 (0.284)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.89 (  0.86)	test_majacc_d   0.84 (  0.85)	test_corr_d   0.58 (  0.63)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.93it/s]
Test: [  0/  1]	Loss 1.801 (1.801)	test_acc   0.60 (  0.60)	test_minacc   0.57 (  0.57)	test_majacc   0.93 (  0.93)	Loss_d 1.801 (1.801)	test_acc_d   0.60 (  0.60)	test_minacc_d   0.57 (  0.57)	test_majacc_d   0.93 (  0.93)	test_corr_d   0.11 (  0.11)
Test: [  1/  1]	Loss 1.801 (1.801)	test_acc   0.60 (  0.60)	test_minacc   0.57 (  0.57)	test_majacc   0.93 (  0.93)	Loss_d 1.801 (1.801)	test_acc_d   0.60 (  0.60)	test_minacc_d   0.57 (  0.57)	test_majacc_d   0.93 (  0.93)	test_corr_d   0.11 (  0.11)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/138/checkpoints/model_best.pth
Overall Timing[ 23/  1]	epoch_time 0.0400 (0.0430)	validation_time 0.0003 (0.0007)	train_time 0.0397 (0.0422)
record: (train_acc, test_acc) (0.8528000237345695, 0.6030000448226929)
last accs (train_acc, test_acc) (0.8528000237345695, 0.6030000448226929)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.92it/s] 15%|#5        | 4/26 [00:00<00:01, 16.11it/s] 31%|###       | 8/26 [00:00<00:00, 24.22it/s] 46%|####6     | 12/26 [00:00<00:00, 28.27it/s] 62%|######1   | 16/26 [00:00<00:00, 30.79it/s] 77%|#######6  | 20/26 [00:00<00:00, 32.52it/s] 92%|#########2| 24/26 [00:00<00:00, 33.92it/s]100%|##########| 26/26 [00:00<00:00, 27.30it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 624 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 625 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 626 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 627 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 628 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 629 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 630 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 631 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 632 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 633 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 634 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 635 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 636 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 637 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 638 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 639 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 640 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 641 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 642 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 643 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 644 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 645 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 646 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 647 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 648 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 649 400
penalty weights 10000.0
Epoch: [24][  26/  26]	Loss 0.002 (0.001)	train_nll   0.20 (  0.25)	train_penalty   0.00 (  0.00)	weight_norm  25.06 ( 25.06)	train_acc   0.91 (  0.88)	train_minacc   0.91 (  0.84)	train_majacc   0.91 (  0.89)	train_corr   0.00 (  0.00)	l1 7.0202 (6.9178)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.72it/s] 19%|#9        | 5/26 [00:00<00:00, 21.76it/s] 38%|###8      | 10/26 [00:00<00:00, 29.82it/s]                                                38%|###8      | 10/26 [00:00<00:00, 29.82it/s] 62%|######1   | 16/26 [00:00<00:00, 37.81it/s]                                                62%|######1   | 16/26 [00:00<00:00, 37.81it/s] 81%|########  | 21/26 [00:00<00:00, 40.80it/s]100%|##########| 26/26 [00:00<00:00, 43.25it/s]100%|##########| 26/26 [00:00<00:00, 33.61it/s]
Test: [   0/  26]	Loss 0.245 (0.245)	test_acc   0.88 (  0.88)	test_minacc   0.87 (  0.87)	test_majacc   0.88 (  0.88)	Loss_d 0.245 (0.245)	test_acc_d   0.88 (  0.88)	test_minacc_d   0.87 (  0.87)	test_majacc_d   0.88 (  0.88)	test_corr_d   0.67 (  0.67)
Test: [  10/  26]	Loss 0.262 (0.252)	test_acc   0.88 (  0.88)	test_minacc   0.76 (  0.85)	test_majacc   0.91 (  0.89)	Loss_d 0.262 (0.252)	test_acc_d   0.88 (  0.88)	test_minacc_d   0.76 (  0.85)	test_majacc_d   0.91 (  0.89)	test_corr_d   0.74 (  0.69)
Test: [  20/  26]	Loss 0.249 (0.255)	test_acc   0.90 (  0.88)	test_minacc   0.88 (  0.85)	test_majacc   0.90 (  0.89)	Loss_d 0.249 (0.255)	test_acc_d   0.90 (  0.88)	test_minacc_d   0.88 (  0.85)	test_majacc_d   0.90 (  0.89)	test_corr_d   0.71 (  0.69)
Test: [  26/  26]	Loss 0.209 (0.253)	test_acc   0.91 (  0.88)	test_minacc   0.91 (  0.85)	test_majacc   0.91 (  0.89)	Loss_d 0.209 (0.253)	test_acc_d   0.91 (  0.88)	test_minacc_d   0.91 (  0.85)	test_majacc_d   0.91 (  0.89)	test_corr_d   0.65 (  0.69)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.20it/s]
Test: [  0/  1]	Loss 1.813 (1.813)	test_acc   0.57 (  0.57)	test_minacc   0.53 (  0.53)	test_majacc   0.92 (  0.92)	Loss_d 1.813 (1.813)	test_acc_d   0.57 (  0.57)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.92 (  0.92)	test_corr_d   0.20 (  0.20)
Test: [  1/  1]	Loss 1.813 (1.813)	test_acc   0.57 (  0.57)	test_minacc   0.53 (  0.53)	test_majacc   0.92 (  0.92)	Loss_d 1.813 (1.813)	test_acc_d   0.57 (  0.57)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.92 (  0.92)	test_corr_d   0.20 (  0.20)
Overall Timing[ 24/  1]	epoch_time 0.0400 (0.0429)	validation_time 0.0003 (0.0007)	train_time 0.0397 (0.0421)
record: (train_acc, test_acc) (0.8528000237345695, 0.6030000448226929)
last accs (train_acc, test_acc) (0.8832000209093094, 0.5730000138282776)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.30it/s] 19%|#9        | 5/26 [00:00<00:00, 23.83it/s] 35%|###4      | 9/26 [00:00<00:00, 28.73it/s] 50%|#####     | 13/26 [00:00<00:00, 31.27it/s] 65%|######5   | 17/26 [00:00<00:00, 32.07it/s] 81%|########  | 21/26 [00:00<00:00, 33.12it/s] 96%|#########6| 25/26 [00:00<00:00, 33.81it/s]100%|##########| 26/26 [00:00<00:00, 28.99it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 650 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 651 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 652 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 653 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 654 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 655 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 656 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 657 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 658 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 659 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 660 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 661 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 662 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 663 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 664 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 665 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 666 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 667 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 668 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 669 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 670 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 671 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 672 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 673 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 674 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 675 400
penalty weights 10000.0
Epoch: [25][  26/  26]	Loss 0.001 (0.000)	train_nll   0.24 (  0.24)	train_penalty   0.00 (  0.00)	weight_norm  25.06 ( 25.06)	train_acc   0.88 (  0.89)	train_minacc   0.89 (  0.86)	train_majacc   0.87 (  0.89)	train_corr   0.00 (  0.00)	l1 7.1045 (7.0700)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.78it/s] 23%|##3       | 6/26 [00:00<00:00, 25.51it/s]                                               23%|##3       | 6/26 [00:00<00:00, 25.51it/s] 42%|####2     | 11/26 [00:00<00:00, 34.01it/s] 62%|######1   | 16/26 [00:00<00:00, 39.27it/s]                                                62%|######1   | 16/26 [00:00<00:00, 39.27it/s] 81%|########  | 21/26 [00:00<00:00, 37.50it/s]100%|##########| 26/26 [00:00<00:00, 40.70it/s]100%|##########| 26/26 [00:00<00:00, 32.86it/s]
Test: [   0/  26]	Loss 0.229 (0.229)	test_acc   0.89 (  0.89)	test_minacc   0.87 (  0.87)	test_majacc   0.90 (  0.90)	Loss_d 0.229 (0.229)	test_acc_d   0.89 (  0.89)	test_minacc_d   0.87 (  0.87)	test_majacc_d   0.90 (  0.90)	test_corr_d   0.69 (  0.69)
Test: [  10/  26]	Loss 0.250 (0.230)	test_acc   0.89 (  0.90)	test_minacc   0.76 (  0.87)	test_majacc   0.91 (  0.90)	Loss_d 0.250 (0.230)	test_acc_d   0.89 (  0.90)	test_minacc_d   0.76 (  0.87)	test_majacc_d   0.91 (  0.90)	test_corr_d   0.74 (  0.70)
Test: [  20/  26]	Loss 0.243 (0.240)	test_acc   0.89 (  0.89)	test_minacc   0.83 (  0.86)	test_majacc   0.89 (  0.89)	Loss_d 0.243 (0.240)	test_acc_d   0.89 (  0.89)	test_minacc_d   0.83 (  0.86)	test_majacc_d   0.89 (  0.89)	test_corr_d   0.71 (  0.70)
Test: [  26/  26]	Loss 0.240 (0.241)	test_acc   0.88 (  0.89)	test_minacc   0.89 (  0.86)	test_majacc   0.87 (  0.89)	Loss_d 0.240 (0.241)	test_acc_d   0.88 (  0.89)	test_minacc_d   0.89 (  0.86)	test_majacc_d   0.87 (  0.89)	test_corr_d   0.65 (  0.69)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 59.56it/s]
Test: [  0/  1]	Loss 1.855 (1.855)	test_acc   0.58 (  0.58)	test_minacc   0.54 (  0.54)	test_majacc   0.93 (  0.93)	Loss_d 1.855 (1.855)	test_acc_d   0.58 (  0.58)	test_minacc_d   0.54 (  0.54)	test_majacc_d   0.93 (  0.93)	test_corr_d   0.20 (  0.20)
Test: [  1/  1]	Loss 1.855 (1.855)	test_acc   0.58 (  0.58)	test_minacc   0.54 (  0.54)	test_majacc   0.93 (  0.93)	Loss_d 1.855 (1.855)	test_acc_d   0.58 (  0.58)	test_minacc_d   0.54 (  0.54)	test_majacc_d   0.93 (  0.93)	test_corr_d   0.20 (  0.20)
Overall Timing[ 25/  1]	epoch_time 0.0413 (0.0428)	validation_time 0.0003 (0.0006)	train_time 0.0409 (0.0421)
record: (train_acc, test_acc) (0.8528000237345695, 0.6030000448226929)
last accs (train_acc, test_acc) (0.8862000205516816, 0.5790000557899475)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.47it/s] 12%|#1        | 3/26 [00:00<00:02, 10.99it/s] 27%|##6       | 7/26 [00:00<00:00, 20.90it/s] 42%|####2     | 11/26 [00:00<00:00, 26.29it/s] 58%|#####7    | 15/26 [00:00<00:00, 29.34it/s] 73%|#######3  | 19/26 [00:00<00:00, 31.38it/s] 88%|########8 | 23/26 [00:00<00:00, 32.39it/s]100%|##########| 26/26 [00:01<00:00, 25.75it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 676 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 677 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 678 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 679 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 680 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 681 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 682 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 683 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 684 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 685 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 686 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 687 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 688 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 689 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 690 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 691 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 692 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 693 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 694 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 695 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 696 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 697 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 698 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 699 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 700 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 701 400
penalty weights 10000.0
Epoch: [26][  26/  26]	Loss 0.002 (0.001)	train_nll   0.22 (  0.24)	train_penalty   0.00 (  0.00)	weight_norm  25.06 ( 25.06)	train_acc   0.90 (  0.89)	train_minacc   0.91 (  0.86)	train_majacc   0.89 (  0.89)	train_corr   0.00 (  0.00)	l1 6.7961 (7.1570)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.12it/s] 19%|#9        | 5/26 [00:00<00:00, 24.64it/s] 38%|###8      | 10/26 [00:00<00:00, 34.97it/s]                                                38%|###8      | 10/26 [00:00<00:00, 34.97it/s] 58%|#####7    | 15/26 [00:00<00:00, 38.77it/s] 77%|#######6  | 20/26 [00:00<00:00, 39.79it/s]                                                77%|#######6  | 20/26 [00:00<00:00, 39.79it/s] 96%|#########6| 25/26 [00:00<00:00, 41.81it/s]100%|##########| 26/26 [00:00<00:00, 34.55it/s]
Test: [   0/  26]	Loss 0.234 (0.234)	test_acc   0.91 (  0.91)	test_minacc   0.89 (  0.89)	test_majacc   0.91 (  0.91)	Loss_d 0.234 (0.234)	test_acc_d   0.91 (  0.91)	test_minacc_d   0.89 (  0.89)	test_majacc_d   0.91 (  0.91)	test_corr_d   0.71 (  0.71)
Test: [  10/  26]	Loss 0.223 (0.221)	test_acc   0.90 (  0.91)	test_minacc   0.83 (  0.87)	test_majacc   0.92 (  0.91)	Loss_d 0.223 (0.221)	test_acc_d   0.90 (  0.91)	test_minacc_d   0.83 (  0.87)	test_majacc_d   0.92 (  0.91)	test_corr_d   0.76 (  0.72)
Test: [  20/  26]	Loss 0.231 (0.224)	test_acc   0.90 (  0.90)	test_minacc   0.85 (  0.87)	test_majacc   0.90 (  0.91)	Loss_d 0.231 (0.224)	test_acc_d   0.90 (  0.90)	test_minacc_d   0.85 (  0.87)	test_majacc_d   0.90 (  0.91)	test_corr_d   0.74 (  0.72)
Test: [  26/  26]	Loss 0.220 (0.227)	test_acc   0.89 (  0.90)	test_minacc   0.91 (  0.86)	test_majacc   0.89 (  0.90)	Loss_d 0.220 (0.227)	test_acc_d   0.89 (  0.90)	test_minacc_d   0.91 (  0.86)	test_majacc_d   0.89 (  0.90)	test_corr_d   0.68 (  0.72)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.14it/s]
Test: [  0/  1]	Loss 1.816 (1.816)	test_acc   0.54 (  0.54)	test_minacc   0.50 (  0.50)	test_majacc   0.95 (  0.95)	Loss_d 1.816 (1.816)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.95 (  0.95)	test_corr_d   0.29 (  0.29)
Test: [  1/  1]	Loss 1.816 (1.816)	test_acc   0.54 (  0.54)	test_minacc   0.50 (  0.50)	test_majacc   0.95 (  0.95)	Loss_d 1.816 (1.816)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.95 (  0.95)	test_corr_d   0.29 (  0.29)
Overall Timing[ 26/  1]	epoch_time 0.0424 (0.0428)	validation_time 0.0006 (0.0006)	train_time 0.0417 (0.0421)
record: (train_acc, test_acc) (0.8528000237345695, 0.6030000448226929)
last accs (train_acc, test_acc) (0.8974000192284584, 0.5440000295639038)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.19it/s] 15%|#5        | 4/26 [00:00<00:01, 14.46it/s] 31%|###       | 8/26 [00:00<00:00, 22.60it/s] 46%|####6     | 12/26 [00:00<00:00, 27.42it/s] 62%|######1   | 16/26 [00:00<00:00, 29.75it/s] 77%|#######6  | 20/26 [00:00<00:00, 31.12it/s] 92%|#########2| 24/26 [00:00<00:00, 32.28it/s]100%|##########| 26/26 [00:01<00:00, 25.85it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 702 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 703 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 704 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 705 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 706 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 707 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 708 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 709 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 710 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 711 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 712 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 713 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 714 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 715 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 716 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 717 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 718 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 719 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 720 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 721 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 722 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 723 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 724 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 725 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 726 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 727 400
penalty weights 10000.0
Epoch: [27][  26/  26]	Loss 0.001 (0.001)	train_nll   0.25 (  0.24)	train_penalty   0.00 (  0.00)	weight_norm  25.07 ( 25.07)	train_acc   0.88 (  0.89)	train_minacc   0.89 (  0.86)	train_majacc   0.88 (  0.90)	train_corr   0.00 (  0.00)	l1 6.9218 (7.1981)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.26it/s] 31%|###       | 8/26 [00:00<00:00, 34.15it/s]                                               31%|###       | 8/26 [00:00<00:00, 34.15it/s] 50%|#####     | 13/26 [00:00<00:00, 39.51it/s] 73%|#######3  | 19/26 [00:00<00:00, 44.12it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 44.12it/s] 92%|#########2| 24/26 [00:00<00:00, 45.53it/s]100%|##########| 26/26 [00:00<00:00, 36.75it/s]
Test: [   0/  26]	Loss 0.233 (0.233)	test_acc   0.90 (  0.90)	test_minacc   0.87 (  0.87)	test_majacc   0.91 (  0.91)	Loss_d 0.233 (0.233)	test_acc_d   0.90 (  0.90)	test_minacc_d   0.87 (  0.87)	test_majacc_d   0.91 (  0.91)	test_corr_d   0.72 (  0.72)
Test: [  10/  26]	Loss 0.202 (0.217)	test_acc   0.93 (  0.91)	test_minacc   0.83 (  0.87)	test_majacc   0.94 (  0.92)	Loss_d 0.202 (0.217)	test_acc_d   0.93 (  0.91)	test_minacc_d   0.83 (  0.87)	test_majacc_d   0.94 (  0.92)	test_corr_d   0.77 (  0.73)
Test: [  20/  26]	Loss 0.223 (0.216)	test_acc   0.89 (  0.91)	test_minacc   0.85 (  0.87)	test_majacc   0.90 (  0.91)	Loss_d 0.223 (0.216)	test_acc_d   0.89 (  0.91)	test_minacc_d   0.85 (  0.87)	test_majacc_d   0.90 (  0.91)	test_corr_d   0.74 (  0.73)
Test: [  26/  26]	Loss 0.251 (0.221)	test_acc   0.88 (  0.90)	test_minacc   0.89 (  0.87)	test_majacc   0.88 (  0.91)	Loss_d 0.251 (0.221)	test_acc_d   0.88 (  0.90)	test_minacc_d   0.89 (  0.87)	test_majacc_d   0.88 (  0.91)	test_corr_d   0.68 (  0.73)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.64it/s]
Test: [  0/  1]	Loss 1.873 (1.873)	test_acc   0.54 (  0.54)	test_minacc   0.50 (  0.50)	test_majacc   0.94 (  0.94)	Loss_d 1.873 (1.873)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.94 (  0.94)	test_corr_d   0.30 (  0.30)
Test: [  1/  1]	Loss 1.873 (1.873)	test_acc   0.54 (  0.54)	test_minacc   0.50 (  0.50)	test_majacc   0.94 (  0.94)	Loss_d 1.873 (1.873)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.94 (  0.94)	test_corr_d   0.30 (  0.30)
Overall Timing[ 27/  1]	epoch_time 0.0391 (0.0427)	validation_time 0.0003 (0.0006)	train_time 0.0387 (0.0420)
record: (train_acc, test_acc) (0.8528000237345695, 0.6030000448226929)
last accs (train_acc, test_acc) (0.902400024652481, 0.5410000085830688)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:06,  3.65it/s] 19%|#9        | 5/26 [00:00<00:01, 15.16it/s] 35%|###4      | 9/26 [00:00<00:00, 22.12it/s] 50%|#####     | 13/26 [00:00<00:00, 26.58it/s] 65%|######5   | 17/26 [00:00<00:00, 29.48it/s] 81%|########  | 21/26 [00:00<00:00, 31.62it/s] 96%|#########6| 25/26 [00:00<00:00, 32.68it/s]100%|##########| 26/26 [00:01<00:00, 25.05it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 728 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 729 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 730 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 731 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 732 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 733 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 734 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 735 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 736 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 737 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 738 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 739 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 740 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 741 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 742 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 743 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 744 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 745 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 746 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 747 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 748 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 749 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 750 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 751 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 752 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 753 400
penalty weights 10000.0
Epoch: [28][  26/  26]	Loss 0.003 (0.001)	train_nll   0.27 (  0.23)	train_penalty   0.00 (  0.00)	weight_norm  25.08 ( 25.07)	train_acc   0.86 (  0.89)	train_minacc   0.80 (  0.88)	train_majacc   0.88 (  0.89)	train_corr   0.00 (  0.00)	l1 7.5708 (7.3493)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 17.14it/s] 27%|##6       | 7/26 [00:00<00:00, 32.81it/s]                                               27%|##6       | 7/26 [00:00<00:00, 32.81it/s] 46%|####6     | 12/26 [00:00<00:00, 38.95it/s] 65%|######5   | 17/26 [00:00<00:00, 42.46it/s]                                                65%|######5   | 17/26 [00:00<00:00, 42.46it/s] 85%|########4 | 22/26 [00:00<00:00, 40.38it/s]100%|##########| 26/26 [00:00<00:00, 36.89it/s]
Test: [   0/  26]	Loss 0.246 (0.246)	test_acc   0.91 (  0.91)	test_minacc   0.85 (  0.85)	test_majacc   0.92 (  0.92)	Loss_d 0.246 (0.246)	test_acc_d   0.91 (  0.91)	test_minacc_d   0.85 (  0.85)	test_majacc_d   0.92 (  0.92)	test_corr_d   0.72 (  0.72)
Test: [  10/  26]	Loss 0.227 (0.238)	test_acc   0.91 (  0.89)	test_minacc   0.78 (  0.85)	test_majacc   0.93 (  0.90)	Loss_d 0.227 (0.238)	test_acc_d   0.91 (  0.89)	test_minacc_d   0.78 (  0.85)	test_majacc_d   0.93 (  0.90)	test_corr_d   0.77 (  0.72)
Test: [  20/  26]	Loss 0.217 (0.228)	test_acc   0.89 (  0.90)	test_minacc   0.88 (  0.86)	test_majacc   0.89 (  0.90)	Loss_d 0.217 (0.228)	test_acc_d   0.89 (  0.90)	test_minacc_d   0.88 (  0.86)	test_majacc_d   0.89 (  0.90)	test_corr_d   0.73 (  0.73)
Test: [  26/  26]	Loss 0.261 (0.229)	test_acc   0.87 (  0.89)	test_minacc   0.82 (  0.85)	test_majacc   0.88 (  0.90)	Loss_d 0.261 (0.229)	test_acc_d   0.87 (  0.89)	test_minacc_d   0.82 (  0.85)	test_majacc_d   0.88 (  0.90)	test_corr_d   0.67 (  0.72)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.31it/s]
Test: [  0/  1]	Loss 2.097 (2.097)	test_acc   0.54 (  0.54)	test_minacc   0.50 (  0.50)	test_majacc   0.94 (  0.94)	Loss_d 2.097 (2.097)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.94 (  0.94)	test_corr_d   0.29 (  0.29)
Test: [  1/  1]	Loss 2.097 (2.097)	test_acc   0.54 (  0.54)	test_minacc   0.50 (  0.50)	test_majacc   0.94 (  0.94)	Loss_d 2.097 (2.097)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.94 (  0.94)	test_corr_d   0.29 (  0.29)
Overall Timing[ 28/  1]	epoch_time 0.0416 (0.0426)	validation_time 0.0004 (0.0006)	train_time 0.0411 (0.0419)
record: (train_acc, test_acc) (0.8528000237345695, 0.6030000448226929)
last accs (train_acc, test_acc) (0.8945000231266022, 0.5430000424385071)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.44it/s] 19%|#9        | 5/26 [00:00<00:01, 18.91it/s] 35%|###4      | 9/26 [00:00<00:00, 23.96it/s] 50%|#####     | 13/26 [00:00<00:00, 27.70it/s] 65%|######5   | 17/26 [00:00<00:00, 29.18it/s] 81%|########  | 21/26 [00:00<00:00, 30.77it/s] 96%|#########6| 25/26 [00:00<00:00, 32.41it/s]100%|##########| 26/26 [00:00<00:00, 26.35it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 754 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 755 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 756 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 757 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 758 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 759 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 760 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 761 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 762 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 763 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 764 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 765 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 766 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 767 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 768 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 769 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 770 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 771 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 772 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 773 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 774 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 775 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 776 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 777 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 778 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 779 400
penalty weights 10000.0
Epoch: [29][  26/  26]	Loss 0.001 (0.001)	train_nll   0.23 (  0.23)	train_penalty   0.00 (  0.00)	weight_norm  25.08 ( 25.08)	train_acc   0.89 (  0.89)	train_minacc   0.93 (  0.85)	train_majacc   0.88 (  0.90)	train_corr   0.00 (  0.00)	l1 7.7070 (7.2162)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:08,  2.79it/s] 23%|##3       | 6/26 [00:00<00:01, 16.04it/s]                                               23%|##3       | 6/26 [00:00<00:01, 16.04it/s] 42%|####2     | 11/26 [00:00<00:00, 25.16it/s] 62%|######1   | 16/26 [00:00<00:00, 31.83it/s]                                                62%|######1   | 16/26 [00:00<00:00, 31.83it/s] 81%|########  | 21/26 [00:00<00:00, 33.00it/s]100%|##########| 26/26 [00:00<00:00, 37.50it/s]100%|##########| 26/26 [00:00<00:00, 26.53it/s]
Test: [   0/  26]	Loss 0.270 (0.270)	test_acc   0.87 (  0.87)	test_minacc   0.87 (  0.87)	test_majacc   0.87 (  0.87)	Loss_d 0.270 (0.270)	test_acc_d   0.87 (  0.87)	test_minacc_d   0.87 (  0.87)	test_majacc_d   0.87 (  0.87)	test_corr_d   0.67 (  0.67)
Test: [  10/  26]	Loss 0.276 (0.270)	test_acc   0.88 (  0.87)	test_minacc   0.79 (  0.84)	test_majacc   0.90 (  0.88)	Loss_d 0.276 (0.270)	test_acc_d   0.88 (  0.87)	test_minacc_d   0.79 (  0.84)	test_majacc_d   0.90 (  0.88)	test_corr_d   0.74 (  0.68)
Test: [  20/  26]	Loss 0.237 (0.263)	test_acc   0.88 (  0.87)	test_minacc   0.90 (  0.84)	test_majacc   0.88 (  0.88)	Loss_d 0.237 (0.263)	test_acc_d   0.88 (  0.87)	test_minacc_d   0.90 (  0.84)	test_majacc_d   0.88 (  0.88)	test_corr_d   0.69 (  0.69)
Test: [  26/  26]	Loss 0.231 (0.260)	test_acc   0.89 (  0.87)	test_minacc   0.91 (  0.85)	test_majacc   0.89 (  0.88)	Loss_d 0.231 (0.260)	test_acc_d   0.89 (  0.87)	test_minacc_d   0.91 (  0.85)	test_majacc_d   0.89 (  0.88)	test_corr_d   0.65 (  0.69)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.53it/s]
Test: [  0/  1]	Loss 2.119 (2.119)	test_acc   0.56 (  0.56)	test_minacc   0.53 (  0.53)	test_majacc   0.90 (  0.90)	Loss_d 2.119 (2.119)	test_acc_d   0.56 (  0.56)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.90 (  0.90)	test_corr_d   0.21 (  0.21)
Test: [  1/  1]	Loss 2.119 (2.119)	test_acc   0.56 (  0.56)	test_minacc   0.53 (  0.53)	test_majacc   0.90 (  0.90)	Loss_d 2.119 (2.119)	test_acc_d   0.56 (  0.56)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.90 (  0.90)	test_corr_d   0.21 (  0.21)
Overall Timing[ 29/  1]	epoch_time 0.0444 (0.0427)	validation_time 0.0004 (0.0006)	train_time 0.0439 (0.0420)
record: (train_acc, test_acc) (0.8528000237345695, 0.6030000448226929)
last accs (train_acc, test_acc) (0.8736000229716301, 0.5630000233650208)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.27it/s] 19%|#9        | 5/26 [00:00<00:01, 20.74it/s] 31%|###       | 8/26 [00:00<00:00, 23.66it/s] 46%|####6     | 12/26 [00:00<00:00, 28.48it/s] 62%|######1   | 16/26 [00:00<00:00, 31.15it/s] 77%|#######6  | 20/26 [00:00<00:00, 31.96it/s] 92%|#########2| 24/26 [00:00<00:00, 33.43it/s]100%|##########| 26/26 [00:00<00:00, 27.36it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 780 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 781 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 782 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 783 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 784 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 785 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 786 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 787 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 788 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 789 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 790 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 791 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 792 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 793 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 794 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 795 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 796 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 797 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 798 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 799 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 800 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 801 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 802 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 803 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 804 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 805 400
penalty weights 10000.0
Epoch: [30][  26/  26]	Loss 0.001 (0.001)	train_nll   0.23 (  0.24)	train_penalty   0.00 (  0.00)	weight_norm  25.09 ( 25.08)	train_acc   0.89 (  0.89)	train_minacc   0.93 (  0.84)	train_majacc   0.88 (  0.89)	train_corr   0.00 (  0.00)	l1 7.2056 (7.2304)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:09,  2.52it/s] 23%|##3       | 6/26 [00:00<00:01, 14.93it/s]                                               23%|##3       | 6/26 [00:00<00:01, 14.93it/s] 42%|####2     | 11/26 [00:00<00:00, 23.85it/s] 62%|######1   | 16/26 [00:00<00:00, 30.66it/s]                                                62%|######1   | 16/26 [00:00<00:00, 30.66it/s] 81%|########  | 21/26 [00:00<00:00, 32.97it/s]100%|##########| 26/26 [00:00<00:00, 37.35it/s]100%|##########| 26/26 [00:01<00:00, 25.84it/s]
Test: [   0/  26]	Loss 0.248 (0.248)	test_acc   0.87 (  0.87)	test_minacc   0.89 (  0.89)	test_majacc   0.86 (  0.86)	Loss_d 0.248 (0.248)	test_acc_d   0.87 (  0.87)	test_minacc_d   0.89 (  0.89)	test_majacc_d   0.86 (  0.86)	test_corr_d   0.68 (  0.68)
Test: [  10/  26]	Loss 0.257 (0.240)	test_acc   0.87 (  0.88)	test_minacc   0.81 (  0.89)	test_majacc   0.88 (  0.88)	Loss_d 0.257 (0.240)	test_acc_d   0.87 (  0.88)	test_minacc_d   0.81 (  0.89)	test_majacc_d   0.88 (  0.88)	test_corr_d   0.73 (  0.69)
Test: [  20/  26]	Loss 0.260 (0.249)	test_acc   0.88 (  0.88)	test_minacc   0.88 (  0.88)	test_majacc   0.88 (  0.88)	Loss_d 0.260 (0.249)	test_acc_d   0.88 (  0.88)	test_minacc_d   0.88 (  0.88)	test_majacc_d   0.88 (  0.88)	test_corr_d   0.71 (  0.69)
Test: [  26/  26]	Loss 0.236 (0.250)	test_acc   0.89 (  0.88)	test_minacc   0.93 (  0.87)	test_majacc   0.88 (  0.88)	Loss_d 0.236 (0.250)	test_acc_d   0.89 (  0.88)	test_minacc_d   0.93 (  0.87)	test_majacc_d   0.88 (  0.88)	test_corr_d   0.65 (  0.69)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.46it/s]
Test: [  0/  1]	Loss 1.912 (1.912)	test_acc   0.58 (  0.58)	test_minacc   0.54 (  0.54)	test_majacc   0.92 (  0.92)	Loss_d 1.912 (1.912)	test_acc_d   0.58 (  0.58)	test_minacc_d   0.54 (  0.54)	test_majacc_d   0.92 (  0.92)	test_corr_d   0.21 (  0.21)
Test: [  1/  1]	Loss 1.912 (1.912)	test_acc   0.58 (  0.58)	test_minacc   0.54 (  0.54)	test_majacc   0.92 (  0.92)	Loss_d 1.912 (1.912)	test_acc_d   0.58 (  0.58)	test_minacc_d   0.54 (  0.54)	test_majacc_d   0.92 (  0.92)	test_corr_d   0.21 (  0.21)
Overall Timing[ 30/  1]	epoch_time 0.0441 (0.0427)	validation_time 0.0004 (0.0006)	train_time 0.0437 (0.0420)
record: (train_acc, test_acc) (0.8528000237345695, 0.6030000448226929)
last accs (train_acc, test_acc) (0.8789000168442727, 0.5820000171661377)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:00, 25.40it/s] 27%|##6       | 7/26 [00:00<00:00, 29.14it/s] 42%|####2     | 11/26 [00:00<00:00, 31.92it/s] 58%|#####7    | 15/26 [00:00<00:00, 33.35it/s] 73%|#######3  | 19/26 [00:00<00:00, 34.14it/s] 88%|########8 | 23/26 [00:00<00:00, 34.51it/s]100%|##########| 26/26 [00:00<00:00, 30.74it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 806 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 807 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 808 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 809 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 810 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 811 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 812 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 813 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 814 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 815 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 816 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 817 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 818 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 819 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 820 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 821 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 822 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 823 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 824 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 825 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 826 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 827 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 828 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 829 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 830 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 831 400
penalty weights 10000.0
Epoch: [31][  26/  26]	Loss 0.000 (0.000)	train_nll   0.24 (  0.25)	train_penalty   0.00 (  0.00)	weight_norm  25.09 ( 25.09)	train_acc   0.89 (  0.88)	train_minacc   0.93 (  0.87)	train_majacc   0.88 (  0.88)	train_corr   0.00 (  0.00)	l1 6.8819 (7.2901)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.12it/s] 23%|##3       | 6/26 [00:00<00:00, 23.97it/s]                                               23%|##3       | 6/26 [00:00<00:00, 23.97it/s] 42%|####2     | 11/26 [00:00<00:00, 32.46it/s] 62%|######1   | 16/26 [00:00<00:00, 37.60it/s]                                                62%|######1   | 16/26 [00:00<00:00, 37.60it/s] 81%|########  | 21/26 [00:00<00:00, 39.96it/s]100%|##########| 26/26 [00:00<00:00, 42.66it/s]100%|##########| 26/26 [00:00<00:00, 32.77it/s]
Test: [   0/  26]	Loss 0.235 (0.235)	test_acc   0.89 (  0.89)	test_minacc   0.87 (  0.87)	test_majacc   0.89 (  0.89)	Loss_d 0.235 (0.235)	test_acc_d   0.89 (  0.89)	test_minacc_d   0.87 (  0.87)	test_majacc_d   0.89 (  0.89)	test_corr_d   0.71 (  0.71)
Test: [  10/  26]	Loss 0.219 (0.221)	test_acc   0.89 (  0.90)	test_minacc   0.84 (  0.89)	test_majacc   0.90 (  0.90)	Loss_d 0.219 (0.221)	test_acc_d   0.89 (  0.90)	test_minacc_d   0.84 (  0.89)	test_majacc_d   0.90 (  0.90)	test_corr_d   0.75 (  0.72)
Test: [  20/  26]	Loss 0.232 (0.224)	test_acc   0.89 (  0.90)	test_minacc   0.92 (  0.89)	test_majacc   0.89 (  0.90)	Loss_d 0.232 (0.224)	test_acc_d   0.89 (  0.90)	test_minacc_d   0.92 (  0.89)	test_majacc_d   0.89 (  0.90)	test_corr_d   0.73 (  0.72)
Test: [  26/  26]	Loss 0.247 (0.228)	test_acc   0.89 (  0.89)	test_minacc   0.93 (  0.89)	test_majacc   0.88 (  0.89)	Loss_d 0.247 (0.228)	test_acc_d   0.89 (  0.89)	test_minacc_d   0.93 (  0.89)	test_majacc_d   0.88 (  0.89)	test_corr_d   0.68 (  0.72)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.16it/s]
Test: [  0/  1]	Loss 1.835 (1.835)	test_acc   0.56 (  0.56)	test_minacc   0.52 (  0.52)	test_majacc   0.93 (  0.93)	Loss_d 1.835 (1.835)	test_acc_d   0.56 (  0.56)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.93 (  0.93)	test_corr_d   0.27 (  0.27)
Test: [  1/  1]	Loss 1.835 (1.835)	test_acc   0.56 (  0.56)	test_minacc   0.52 (  0.52)	test_majacc   0.93 (  0.93)	Loss_d 1.835 (1.835)	test_acc_d   0.56 (  0.56)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.93 (  0.93)	test_corr_d   0.27 (  0.27)
Overall Timing[ 31/  1]	epoch_time 0.0398 (0.0427)	validation_time 0.0006 (0.0006)	train_time 0.0391 (0.0420)
record: (train_acc, test_acc) (0.8528000237345695, 0.6030000448226929)
last accs (train_acc, test_acc) (0.8922000172138214, 0.5590000152587891)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:01, 20.08it/s] 27%|##6       | 7/26 [00:00<00:00, 26.31it/s] 42%|####2     | 11/26 [00:00<00:00, 28.87it/s] 58%|#####7    | 15/26 [00:00<00:00, 29.91it/s] 73%|#######3  | 19/26 [00:00<00:00, 30.83it/s] 88%|########8 | 23/26 [00:00<00:00, 32.38it/s]100%|##########| 26/26 [00:00<00:00, 29.15it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 832 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 833 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 834 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 835 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 836 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 837 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 838 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 839 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 840 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 841 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 842 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 843 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 844 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 845 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 846 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 847 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 848 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 849 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 850 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 851 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 852 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 853 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 854 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 855 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 856 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 857 400
penalty weights 10000.0
Epoch: [32][  26/  26]	Loss 0.000 (0.001)	train_nll   0.26 (  0.25)	train_penalty   0.00 (  0.00)	weight_norm  25.09 ( 25.09)	train_acc   0.88 (  0.88)	train_minacc   0.89 (  0.88)	train_majacc   0.88 (  0.88)	train_corr   0.00 (  0.00)	l1 7.1031 (7.3236)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 18.80it/s] 27%|##6       | 7/26 [00:00<00:00, 32.90it/s]                                               27%|##6       | 7/26 [00:00<00:00, 32.90it/s] 46%|####6     | 12/26 [00:00<00:00, 39.40it/s] 65%|######5   | 17/26 [00:00<00:00, 41.30it/s]                                                65%|######5   | 17/26 [00:00<00:00, 41.30it/s] 85%|########4 | 22/26 [00:00<00:00, 43.41it/s]100%|##########| 26/26 [00:00<00:00, 37.22it/s]
Test: [   0/  26]	Loss 0.246 (0.246)	test_acc   0.88 (  0.88)	test_minacc   0.85 (  0.85)	test_majacc   0.89 (  0.89)	Loss_d 0.246 (0.246)	test_acc_d   0.88 (  0.88)	test_minacc_d   0.85 (  0.85)	test_majacc_d   0.89 (  0.89)	test_corr_d   0.72 (  0.72)
Test: [  10/  26]	Loss 0.210 (0.226)	test_acc   0.91 (  0.90)	test_minacc   0.83 (  0.88)	test_majacc   0.92 (  0.90)	Loss_d 0.210 (0.226)	test_acc_d   0.91 (  0.90)	test_minacc_d   0.83 (  0.88)	test_majacc_d   0.92 (  0.90)	test_corr_d   0.77 (  0.73)
Test: [  20/  26]	Loss 0.224 (0.221)	test_acc   0.90 (  0.90)	test_minacc   0.90 (  0.88)	test_majacc   0.90 (  0.90)	Loss_d 0.224 (0.221)	test_acc_d   0.90 (  0.90)	test_minacc_d   0.90 (  0.88)	test_majacc_d   0.90 (  0.90)	test_corr_d   0.74 (  0.74)
Test: [  26/  26]	Loss 0.255 (0.225)	test_acc   0.88 (  0.90)	test_minacc   0.89 (  0.88)	test_majacc   0.88 (  0.90)	Loss_d 0.255 (0.225)	test_acc_d   0.88 (  0.90)	test_minacc_d   0.89 (  0.88)	test_majacc_d   0.88 (  0.90)	test_corr_d   0.69 (  0.73)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 59.53it/s]
Test: [  0/  1]	Loss 1.958 (1.958)	test_acc   0.55 (  0.55)	test_minacc   0.51 (  0.51)	test_majacc   0.92 (  0.92)	Loss_d 1.958 (1.958)	test_acc_d   0.55 (  0.55)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.92 (  0.92)	test_corr_d   0.31 (  0.31)
Test: [  1/  1]	Loss 1.958 (1.958)	test_acc   0.55 (  0.55)	test_minacc   0.51 (  0.51)	test_majacc   0.92 (  0.92)	Loss_d 1.958 (1.958)	test_acc_d   0.55 (  0.55)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.92 (  0.92)	test_corr_d   0.31 (  0.31)
Overall Timing[ 32/  1]	epoch_time 0.0442 (0.0427)	validation_time 0.0005 (0.0006)	train_time 0.0437 (0.0420)
record: (train_acc, test_acc) (0.8528000237345695, 0.6030000448226929)
last accs (train_acc, test_acc) (0.8962000133991241, 0.5480000376701355)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.19it/s] 19%|#9        | 5/26 [00:00<00:01, 17.90it/s] 35%|###4      | 9/26 [00:00<00:00, 23.51it/s] 50%|#####     | 13/26 [00:00<00:00, 26.56it/s] 65%|######5   | 17/26 [00:00<00:00, 28.89it/s] 81%|########  | 21/26 [00:00<00:00, 30.49it/s] 96%|#########6| 25/26 [00:00<00:00, 31.87it/s]100%|##########| 26/26 [00:01<00:00, 25.67it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 858 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 859 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 860 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 861 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 862 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 863 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 864 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 865 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 866 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 867 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 868 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 869 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 870 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 871 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 872 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 873 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 874 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 875 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 876 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 877 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 878 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 879 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 880 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 881 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 882 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 883 400
penalty weights 10000.0
Epoch: [33][  26/  26]	Loss 0.003 (0.001)	train_nll   0.29 (  0.24)	train_penalty   0.00 (  0.00)	weight_norm  25.10 ( 25.10)	train_acc   0.86 (  0.88)	train_minacc   0.82 (  0.89)	train_majacc   0.87 (  0.88)	train_corr   0.00 (  0.00)	l1 7.7851 (7.3825)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 16.18it/s] 15%|#5        | 4/26 [00:00<00:01, 14.41it/s] 35%|###4      | 9/26 [00:00<00:00, 27.35it/s]                                               35%|###4      | 9/26 [00:00<00:00, 27.35it/s] 54%|#####3    | 14/26 [00:00<00:00, 34.67it/s] 73%|#######3  | 19/26 [00:00<00:00, 39.14it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 39.14it/s] 92%|#########2| 24/26 [00:00<00:00, 38.03it/s]100%|##########| 26/26 [00:00<00:00, 31.79it/s]
Test: [   0/  26]	Loss 0.259 (0.259)	test_acc   0.88 (  0.88)	test_minacc   0.82 (  0.82)	test_majacc   0.89 (  0.89)	Loss_d 0.259 (0.259)	test_acc_d   0.88 (  0.88)	test_minacc_d   0.82 (  0.82)	test_majacc_d   0.89 (  0.89)	test_corr_d   0.72 (  0.72)
Test: [  10/  26]	Loss 0.244 (0.253)	test_acc   0.88 (  0.88)	test_minacc   0.78 (  0.85)	test_majacc   0.90 (  0.89)	Loss_d 0.244 (0.253)	test_acc_d   0.88 (  0.88)	test_minacc_d   0.78 (  0.85)	test_majacc_d   0.90 (  0.89)	test_corr_d   0.75 (  0.71)
Test: [  20/  26]	Loss 0.234 (0.245)	test_acc   0.89 (  0.88)	test_minacc   0.94 (  0.86)	test_majacc   0.88 (  0.88)	Loss_d 0.234 (0.245)	test_acc_d   0.89 (  0.88)	test_minacc_d   0.94 (  0.86)	test_majacc_d   0.88 (  0.88)	test_corr_d   0.72 (  0.72)
Test: [  26/  26]	Loss 0.273 (0.245)	test_acc   0.88 (  0.88)	test_minacc   0.84 (  0.87)	test_majacc   0.88 (  0.88)	Loss_d 0.273 (0.245)	test_acc_d   0.88 (  0.88)	test_minacc_d   0.84 (  0.87)	test_majacc_d   0.88 (  0.88)	test_corr_d   0.68 (  0.71)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.35it/s]
Test: [  0/  1]	Loss 2.223 (2.223)	test_acc   0.55 (  0.55)	test_minacc   0.51 (  0.51)	test_majacc   0.94 (  0.94)	Loss_d 2.223 (2.223)	test_acc_d   0.55 (  0.55)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.94 (  0.94)	test_corr_d   0.29 (  0.29)
Test: [  1/  1]	Loss 2.223 (2.223)	test_acc   0.55 (  0.55)	test_minacc   0.51 (  0.51)	test_majacc   0.94 (  0.94)	Loss_d 2.223 (2.223)	test_acc_d   0.55 (  0.55)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.94 (  0.94)	test_corr_d   0.29 (  0.29)
Overall Timing[ 33/  1]	epoch_time 0.0439 (0.0427)	validation_time 0.0004 (0.0006)	train_time 0.0434 (0.0420)
record: (train_acc, test_acc) (0.8528000237345695, 0.6030000448226929)
last accs (train_acc, test_acc) (0.8801000244021415, 0.5520000457763672)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.19it/s] 12%|#1        | 3/26 [00:00<00:01, 13.47it/s] 27%|##6       | 7/26 [00:00<00:00, 22.35it/s] 42%|####2     | 11/26 [00:00<00:00, 27.09it/s] 58%|#####7    | 15/26 [00:00<00:00, 30.17it/s] 73%|#######3  | 19/26 [00:00<00:00, 31.77it/s] 88%|########8 | 23/26 [00:00<00:00, 32.86it/s]100%|##########| 26/26 [00:00<00:00, 27.23it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 884 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 885 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 886 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 887 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 888 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 889 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 890 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 891 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 892 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 893 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 894 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 895 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 896 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 897 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 898 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 899 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 900 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 901 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 902 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 903 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 904 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 905 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 906 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 907 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 908 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 909 400
penalty weights 10000.0
Epoch: [34][  26/  26]	Loss 0.000 (0.000)	train_nll   0.23 (  0.23)	train_penalty   0.00 (  0.00)	weight_norm  25.11 ( 25.10)	train_acc   0.87 (  0.89)	train_minacc   0.91 (  0.86)	train_majacc   0.86 (  0.89)	train_corr   0.00 (  0.00)	l1 7.6469 (7.3961)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.63it/s] 23%|##3       | 6/26 [00:00<00:00, 25.34it/s]                                               23%|##3       | 6/26 [00:00<00:00, 25.34it/s] 42%|####2     | 11/26 [00:00<00:00, 33.66it/s] 62%|######1   | 16/26 [00:00<00:00, 36.61it/s]                                                62%|######1   | 16/26 [00:00<00:00, 36.61it/s] 81%|########  | 21/26 [00:00<00:00, 39.29it/s]100%|##########| 26/26 [00:00<00:00, 41.91it/s]100%|##########| 26/26 [00:00<00:00, 33.31it/s]
Test: [   0/  26]	Loss 0.251 (0.251)	test_acc   0.88 (  0.88)	test_minacc   0.89 (  0.89)	test_majacc   0.88 (  0.88)	Loss_d 0.251 (0.251)	test_acc_d   0.88 (  0.88)	test_minacc_d   0.89 (  0.89)	test_majacc_d   0.88 (  0.88)	test_corr_d   0.69 (  0.69)
Test: [  10/  26]	Loss 0.259 (0.258)	test_acc   0.89 (  0.88)	test_minacc   0.78 (  0.88)	test_majacc   0.91 (  0.88)	Loss_d 0.259 (0.258)	test_acc_d   0.89 (  0.88)	test_minacc_d   0.78 (  0.88)	test_majacc_d   0.91 (  0.88)	test_corr_d   0.75 (  0.69)
Test: [  20/  26]	Loss 0.248 (0.255)	test_acc   0.87 (  0.88)	test_minacc   0.90 (  0.87)	test_majacc   0.87 (  0.88)	Loss_d 0.248 (0.255)	test_acc_d   0.87 (  0.88)	test_minacc_d   0.90 (  0.87)	test_majacc_d   0.87 (  0.88)	test_corr_d   0.71 (  0.70)
Test: [  26/  26]	Loss 0.233 (0.254)	test_acc   0.87 (  0.87)	test_minacc   0.91 (  0.87)	test_majacc   0.86 (  0.88)	Loss_d 0.233 (0.254)	test_acc_d   0.87 (  0.87)	test_minacc_d   0.91 (  0.87)	test_majacc_d   0.86 (  0.88)	test_corr_d   0.66 (  0.70)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 60.93it/s]
Test: [  0/  1]	Loss 2.138 (2.138)	test_acc   0.57 (  0.57)	test_minacc   0.53 (  0.53)	test_majacc   0.91 (  0.91)	Loss_d 2.138 (2.138)	test_acc_d   0.57 (  0.57)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.91 (  0.91)	test_corr_d   0.25 (  0.25)
Test: [  1/  1]	Loss 2.138 (2.138)	test_acc   0.57 (  0.57)	test_minacc   0.53 (  0.53)	test_majacc   0.91 (  0.91)	Loss_d 2.138 (2.138)	test_acc_d   0.57 (  0.57)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.91 (  0.91)	test_corr_d   0.25 (  0.25)
Overall Timing[ 34/  1]	epoch_time 0.0421 (0.0427)	validation_time 0.0003 (0.0006)	train_time 0.0418 (0.0420)
record: (train_acc, test_acc) (0.8528000237345695, 0.6030000448226929)
last accs (train_acc, test_acc) (0.8745000163912773, 0.5670000314712524)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.80it/s]  8%|7         | 2/26 [00:00<00:04,  5.99it/s] 23%|##3       | 6/26 [00:00<00:01, 16.48it/s] 35%|###4      | 9/26 [00:00<00:00, 20.66it/s] 50%|#####     | 13/26 [00:00<00:00, 24.63it/s] 65%|######5   | 17/26 [00:00<00:00, 28.40it/s] 81%|########  | 21/26 [00:00<00:00, 30.40it/s] 96%|#########6| 25/26 [00:01<00:00, 31.77it/s]100%|##########| 26/26 [00:01<00:00, 23.60it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 910 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 911 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 912 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 913 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 914 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 915 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 916 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 917 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 918 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 919 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 920 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 921 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 922 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 923 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 924 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 925 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 926 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 927 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 928 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 929 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 930 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 931 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 932 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 933 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 934 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 935 400
penalty weights 10000.0
Epoch: [35][  26/  26]	Loss 0.001 (0.000)	train_nll   0.23 (  0.24)	train_penalty   0.00 (  0.00)	weight_norm  25.11 ( 25.11)	train_acc   0.90 (  0.88)	train_minacc   0.93 (  0.87)	train_majacc   0.89 (  0.88)	train_corr   0.00 (  0.00)	l1 7.3381 (7.3936)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.69it/s] 12%|#1        | 3/26 [00:00<00:01, 14.00it/s] 31%|###       | 8/26 [00:00<00:00, 28.90it/s]                                               31%|###       | 8/26 [00:00<00:00, 28.90it/s] 50%|#####     | 13/26 [00:00<00:00, 35.77it/s] 69%|######9   | 18/26 [00:00<00:00, 36.22it/s]                                                69%|######9   | 18/26 [00:00<00:00, 36.22it/s] 88%|########8 | 23/26 [00:00<00:00, 39.38it/s]100%|##########| 26/26 [00:00<00:00, 32.68it/s]
Test: [   0/  26]	Loss 0.244 (0.244)	test_acc   0.89 (  0.89)	test_minacc   0.90 (  0.90)	test_majacc   0.89 (  0.89)	Loss_d 0.244 (0.244)	test_acc_d   0.89 (  0.89)	test_minacc_d   0.90 (  0.90)	test_majacc_d   0.89 (  0.89)	test_corr_d   0.69 (  0.69)
Test: [  10/  26]	Loss 0.237 (0.237)	test_acc   0.89 (  0.89)	test_minacc   0.84 (  0.91)	test_majacc   0.90 (  0.89)	Loss_d 0.237 (0.237)	test_acc_d   0.89 (  0.89)	test_minacc_d   0.84 (  0.91)	test_majacc_d   0.90 (  0.89)	test_corr_d   0.74 (  0.70)
Test: [  20/  26]	Loss 0.253 (0.241)	test_acc   0.87 (  0.88)	test_minacc   0.90 (  0.90)	test_majacc   0.86 (  0.88)	Loss_d 0.253 (0.241)	test_acc_d   0.87 (  0.88)	test_minacc_d   0.90 (  0.90)	test_majacc_d   0.86 (  0.88)	test_corr_d   0.71 (  0.71)
Test: [  26/  26]	Loss 0.229 (0.241)	test_acc   0.90 (  0.88)	test_minacc   0.93 (  0.89)	test_majacc   0.89 (  0.88)	Loss_d 0.229 (0.241)	test_acc_d   0.90 (  0.88)	test_minacc_d   0.93 (  0.89)	test_majacc_d   0.89 (  0.88)	test_corr_d   0.67 (  0.71)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 60.57it/s]
Test: [  0/  1]	Loss 2.014 (2.014)	test_acc   0.58 (  0.58)	test_minacc   0.54 (  0.54)	test_majacc   0.93 (  0.93)	Loss_d 2.014 (2.014)	test_acc_d   0.58 (  0.58)	test_minacc_d   0.54 (  0.54)	test_majacc_d   0.93 (  0.93)	test_corr_d   0.25 (  0.25)
Test: [  1/  1]	Loss 2.014 (2.014)	test_acc   0.58 (  0.58)	test_minacc   0.54 (  0.54)	test_majacc   0.93 (  0.93)	Loss_d 2.014 (2.014)	test_acc_d   0.58 (  0.58)	test_minacc_d   0.54 (  0.54)	test_majacc_d   0.93 (  0.93)	test_corr_d   0.25 (  0.25)
Overall Timing[ 35/  1]	epoch_time 0.0383 (0.0426)	validation_time 0.0005 (0.0006)	train_time 0.0378 (0.0419)
record: (train_acc, test_acc) (0.8528000237345695, 0.6030000448226929)
last accs (train_acc, test_acc) (0.8829000226259232, 0.5790000557899475)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 19.15it/s] 19%|#9        | 5/26 [00:00<00:00, 24.54it/s] 35%|###4      | 9/26 [00:00<00:00, 28.83it/s] 50%|#####     | 13/26 [00:00<00:00, 30.53it/s] 65%|######5   | 17/26 [00:00<00:00, 31.54it/s] 81%|########  | 21/26 [00:00<00:00, 32.32it/s] 96%|#########6| 25/26 [00:00<00:00, 32.74it/s]100%|##########| 26/26 [00:00<00:00, 29.07it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 936 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 937 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 938 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 939 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 940 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 941 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 942 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 943 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 944 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 945 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 946 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 947 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 948 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 949 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 950 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 951 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 952 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 953 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 954 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 955 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 956 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 957 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 958 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 959 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 960 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 961 400
penalty weights 10000.0
Epoch: [36][  26/  26]	Loss 0.000 (0.000)	train_nll   0.24 (  0.25)	train_penalty   0.00 (  0.00)	weight_norm  25.11 ( 25.11)	train_acc   0.88 (  0.88)	train_minacc   0.91 (  0.88)	train_majacc   0.88 (  0.88)	train_corr   0.00 (  0.00)	l1 7.1706 (7.5331)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:05,  4.71it/s] 23%|##3       | 6/26 [00:00<00:00, 22.45it/s]                                               23%|##3       | 6/26 [00:00<00:00, 22.45it/s] 42%|####2     | 11/26 [00:00<00:00, 30.99it/s] 62%|######1   | 16/26 [00:00<00:00, 36.18it/s]                                                62%|######1   | 16/26 [00:00<00:00, 36.18it/s] 81%|########  | 21/26 [00:00<00:00, 36.49it/s]100%|##########| 26/26 [00:00<00:00, 39.86it/s]100%|##########| 26/26 [00:00<00:00, 30.84it/s]
Test: [   0/  26]	Loss 0.246 (0.246)	test_acc   0.89 (  0.89)	test_minacc   0.90 (  0.90)	test_majacc   0.88 (  0.88)	Loss_d 0.246 (0.246)	test_acc_d   0.89 (  0.89)	test_minacc_d   0.90 (  0.90)	test_majacc_d   0.88 (  0.88)	test_corr_d   0.72 (  0.72)
Test: [  10/  26]	Loss 0.226 (0.227)	test_acc   0.89 (  0.89)	test_minacc   0.81 (  0.89)	test_majacc   0.90 (  0.89)	Loss_d 0.226 (0.227)	test_acc_d   0.89 (  0.89)	test_minacc_d   0.81 (  0.89)	test_majacc_d   0.90 (  0.89)	test_corr_d   0.77 (  0.73)
Test: [  20/  26]	Loss 0.233 (0.226)	test_acc   0.88 (  0.89)	test_minacc   0.90 (  0.89)	test_majacc   0.88 (  0.89)	Loss_d 0.233 (0.226)	test_acc_d   0.88 (  0.89)	test_minacc_d   0.90 (  0.89)	test_majacc_d   0.88 (  0.89)	test_corr_d   0.74 (  0.73)
Test: [  26/  26]	Loss 0.242 (0.229)	test_acc   0.88 (  0.89)	test_minacc   0.93 (  0.89)	test_majacc   0.87 (  0.89)	Loss_d 0.242 (0.229)	test_acc_d   0.88 (  0.89)	test_minacc_d   0.93 (  0.89)	test_majacc_d   0.87 (  0.89)	test_corr_d   0.69 (  0.73)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.96it/s]
Test: [  0/  1]	Loss 1.995 (1.995)	test_acc   0.56 (  0.56)	test_minacc   0.52 (  0.52)	test_majacc   0.94 (  0.94)	Loss_d 1.995 (1.995)	test_acc_d   0.56 (  0.56)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.94 (  0.94)	test_corr_d   0.31 (  0.31)
Test: [  1/  1]	Loss 1.995 (1.995)	test_acc   0.56 (  0.56)	test_minacc   0.52 (  0.52)	test_majacc   0.94 (  0.94)	Loss_d 1.995 (1.995)	test_acc_d   0.56 (  0.56)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.94 (  0.94)	test_corr_d   0.31 (  0.31)
Overall Timing[ 36/  1]	epoch_time 0.0442 (0.0426)	validation_time 0.0004 (0.0006)	train_time 0.0438 (0.0420)
record: (train_acc, test_acc) (0.8528000237345695, 0.6030000448226929)
last accs (train_acc, test_acc) (0.8905000265240669, 0.5649999976158142)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 17.48it/s] 23%|##3       | 6/26 [00:00<00:00, 26.53it/s] 38%|###8      | 10/26 [00:00<00:00, 29.50it/s] 54%|#####3    | 14/26 [00:00<00:00, 30.27it/s] 69%|######9   | 18/26 [00:00<00:00, 31.03it/s] 85%|########4 | 22/26 [00:00<00:00, 32.00it/s]100%|##########| 26/26 [00:00<00:00, 33.19it/s]100%|##########| 26/26 [00:00<00:00, 28.94it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 962 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 963 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 964 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 965 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 966 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 967 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 968 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 969 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 970 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 971 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 972 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 973 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 974 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 975 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 976 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 977 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 978 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 979 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 980 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 981 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 982 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 983 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 984 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 985 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 986 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 987 400
penalty weights 10000.0
Epoch: [37][  26/  26]	Loss 0.000 (0.000)	train_nll   0.26 (  0.24)	train_penalty   0.00 (  0.00)	weight_norm  25.11 ( 25.11)	train_acc   0.86 (  0.88)	train_minacc   0.91 (  0.89)	train_majacc   0.85 (  0.88)	train_corr   0.00 (  0.00)	l1 7.5191 (7.5271)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.72it/s] 23%|##3       | 6/26 [00:00<00:00, 29.27it/s]                                               23%|##3       | 6/26 [00:00<00:00, 29.27it/s] 42%|####2     | 11/26 [00:00<00:00, 36.57it/s] 62%|######1   | 16/26 [00:00<00:00, 40.62it/s]                                                62%|######1   | 16/26 [00:00<00:00, 40.62it/s] 81%|########  | 21/26 [00:00<00:00, 38.91it/s]100%|##########| 26/26 [00:00<00:00, 42.03it/s]100%|##########| 26/26 [00:00<00:00, 34.65it/s]
Test: [   0/  26]	Loss 0.261 (0.261)	test_acc   0.88 (  0.88)	test_minacc   0.89 (  0.89)	test_majacc   0.87 (  0.87)	Loss_d 0.261 (0.261)	test_acc_d   0.88 (  0.88)	test_minacc_d   0.89 (  0.89)	test_majacc_d   0.87 (  0.87)	test_corr_d   0.71 (  0.71)
Test: [  10/  26]	Loss 0.229 (0.241)	test_acc   0.89 (  0.88)	test_minacc   0.81 (  0.87)	test_majacc   0.90 (  0.88)	Loss_d 0.229 (0.241)	test_acc_d   0.89 (  0.88)	test_minacc_d   0.81 (  0.87)	test_majacc_d   0.90 (  0.88)	test_corr_d   0.76 (  0.73)
Test: [  20/  26]	Loss 0.222 (0.232)	test_acc   0.89 (  0.89)	test_minacc   0.92 (  0.88)	test_majacc   0.89 (  0.89)	Loss_d 0.222 (0.232)	test_acc_d   0.89 (  0.89)	test_minacc_d   0.92 (  0.88)	test_majacc_d   0.89 (  0.89)	test_corr_d   0.74 (  0.73)
Test: [  26/  26]	Loss 0.256 (0.234)	test_acc   0.88 (  0.88)	test_minacc   0.93 (  0.88)	test_majacc   0.86 (  0.88)	Loss_d 0.256 (0.234)	test_acc_d   0.88 (  0.88)	test_minacc_d   0.93 (  0.88)	test_majacc_d   0.86 (  0.88)	test_corr_d   0.68 (  0.73)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 59.25it/s]
Test: [  0/  1]	Loss 2.094 (2.094)	test_acc   0.57 (  0.57)	test_minacc   0.53 (  0.53)	test_majacc   0.94 (  0.94)	Loss_d 2.094 (2.094)	test_acc_d   0.57 (  0.57)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.94 (  0.94)	test_corr_d   0.30 (  0.30)
Test: [  1/  1]	Loss 2.094 (2.094)	test_acc   0.57 (  0.57)	test_minacc   0.53 (  0.53)	test_majacc   0.94 (  0.94)	Loss_d 2.094 (2.094)	test_acc_d   0.57 (  0.57)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.94 (  0.94)	test_corr_d   0.30 (  0.30)
Overall Timing[ 37/  1]	epoch_time 0.0465 (0.0427)	validation_time 0.0005 (0.0006)	train_time 0.0459 (0.0421)
record: (train_acc, test_acc) (0.8528000237345695, 0.6030000448226929)
last accs (train_acc, test_acc) (0.884200022995472, 0.5740000009536743)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.99it/s] 19%|#9        | 5/26 [00:00<00:00, 22.01it/s] 35%|###4      | 9/26 [00:00<00:00, 27.69it/s] 50%|#####     | 13/26 [00:00<00:00, 30.42it/s] 65%|######5   | 17/26 [00:00<00:00, 32.13it/s] 81%|########  | 21/26 [00:00<00:00, 32.96it/s] 96%|#########6| 25/26 [00:00<00:00, 33.66it/s]100%|##########| 26/26 [00:00<00:00, 28.40it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 988 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 989 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 990 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 991 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 992 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 993 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 994 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 995 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 996 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 997 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 998 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 999 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1000 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1001 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1002 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1003 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1004 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1005 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1006 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1007 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1008 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1009 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1010 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1011 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1012 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1013 400
penalty weights 10000.0
Epoch: [38][  26/  26]	Loss 0.002 (0.000)	train_nll   0.28 (  0.24)	train_penalty   0.00 (  0.00)	weight_norm  25.12 ( 25.12)	train_acc   0.85 (  0.88)	train_minacc   0.91 (  0.88)	train_majacc   0.84 (  0.88)	train_corr   0.00 (  0.00)	l1 7.8789 (7.4122)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:02,  9.97it/s] 27%|##6       | 7/26 [00:00<00:00, 24.39it/s]                                               27%|##6       | 7/26 [00:00<00:00, 24.39it/s] 46%|####6     | 12/26 [00:00<00:00, 32.40it/s] 65%|######5   | 17/26 [00:00<00:00, 37.22it/s]                                                65%|######5   | 17/26 [00:00<00:00, 37.22it/s] 85%|########4 | 22/26 [00:00<00:00, 39.58it/s]100%|##########| 26/26 [00:00<00:00, 33.11it/s]
Test: [   0/  26]	Loss 0.262 (0.262)	test_acc   0.88 (  0.88)	test_minacc   0.85 (  0.85)	test_majacc   0.88 (  0.88)	Loss_d 0.262 (0.262)	test_acc_d   0.88 (  0.88)	test_minacc_d   0.85 (  0.85)	test_majacc_d   0.88 (  0.88)	test_corr_d   0.70 (  0.70)
Test: [  10/  26]	Loss 0.281 (0.267)	test_acc   0.86 (  0.87)	test_minacc   0.78 (  0.84)	test_majacc   0.88 (  0.87)	Loss_d 0.281 (0.267)	test_acc_d   0.86 (  0.87)	test_minacc_d   0.78 (  0.84)	test_majacc_d   0.88 (  0.87)	test_corr_d   0.73 (  0.70)
Test: [  20/  26]	Loss 0.242 (0.264)	test_acc   0.86 (  0.86)	test_minacc   0.94 (  0.85)	test_majacc   0.85 (  0.86)	Loss_d 0.242 (0.264)	test_acc_d   0.86 (  0.86)	test_minacc_d   0.94 (  0.85)	test_majacc_d   0.85 (  0.86)	test_corr_d   0.70 (  0.70)
Test: [  26/  26]	Loss 0.272 (0.262)	test_acc   0.85 (  0.86)	test_minacc   0.91 (  0.86)	test_majacc   0.84 (  0.86)	Loss_d 0.272 (0.262)	test_acc_d   0.85 (  0.86)	test_minacc_d   0.91 (  0.86)	test_majacc_d   0.84 (  0.86)	test_corr_d   0.66 (  0.70)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.28it/s]
Test: [  0/  1]	Loss 2.273 (2.273)	test_acc   0.57 (  0.57)	test_minacc   0.53 (  0.53)	test_majacc   0.92 (  0.92)	Loss_d 2.273 (2.273)	test_acc_d   0.57 (  0.57)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.92 (  0.92)	test_corr_d   0.26 (  0.26)
Test: [  1/  1]	Loss 2.273 (2.273)	test_acc   0.57 (  0.57)	test_minacc   0.53 (  0.53)	test_majacc   0.92 (  0.92)	Loss_d 2.273 (2.273)	test_acc_d   0.57 (  0.57)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.92 (  0.92)	test_corr_d   0.26 (  0.26)
Overall Timing[ 38/  1]	epoch_time 0.0391 (0.0426)	validation_time 0.0004 (0.0006)	train_time 0.0387 (0.0420)
record: (train_acc, test_acc) (0.8528000237345695, 0.6030000448226929)
last accs (train_acc, test_acc) (0.8618000199198723, 0.5670000314712524)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:02, 11.20it/s] 23%|##3       | 6/26 [00:00<00:00, 21.64it/s] 38%|###8      | 10/26 [00:00<00:00, 27.16it/s] 54%|#####3    | 14/26 [00:00<00:00, 30.38it/s] 69%|######9   | 18/26 [00:00<00:00, 32.26it/s] 85%|########4 | 22/26 [00:00<00:00, 33.43it/s]100%|##########| 26/26 [00:00<00:00, 33.90it/s]100%|##########| 26/26 [00:00<00:00, 28.21it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1014 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1015 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1016 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1017 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1018 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1019 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1020 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1021 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1022 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1023 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1024 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1025 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1026 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1027 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1028 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1029 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1030 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1031 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1032 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1033 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1034 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1035 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1036 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1037 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1038 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1039 400
penalty weights 10000.0
Epoch: [39][  26/  26]	Loss 0.000 (0.000)	train_nll   0.22 (  0.24)	train_penalty   0.00 (  0.00)	weight_norm  25.12 ( 25.12)	train_acc   0.88 (  0.88)	train_minacc   0.93 (  0.86)	train_majacc   0.87 (  0.88)	train_corr   0.00 (  0.00)	l1 7.4526 (7.4797)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 18.07it/s] 27%|##6       | 7/26 [00:00<00:00, 34.83it/s]                                               27%|##6       | 7/26 [00:00<00:00, 34.83it/s] 46%|####6     | 12/26 [00:00<00:00, 40.48it/s] 65%|######5   | 17/26 [00:00<00:00, 42.40it/s]                                                65%|######5   | 17/26 [00:00<00:00, 42.40it/s] 85%|########4 | 22/26 [00:00<00:00, 40.94it/s]100%|##########| 26/26 [00:00<00:00, 37.67it/s]
Test: [   0/  26]	Loss 0.251 (0.251)	test_acc   0.88 (  0.88)	test_minacc   0.90 (  0.90)	test_majacc   0.88 (  0.88)	Loss_d 0.251 (0.251)	test_acc_d   0.88 (  0.88)	test_minacc_d   0.90 (  0.90)	test_majacc_d   0.88 (  0.88)	test_corr_d   0.71 (  0.71)
Test: [  10/  26]	Loss 0.256 (0.246)	test_acc   0.89 (  0.88)	test_minacc   0.83 (  0.88)	test_majacc   0.90 (  0.88)	Loss_d 0.256 (0.246)	test_acc_d   0.89 (  0.88)	test_minacc_d   0.83 (  0.88)	test_majacc_d   0.90 (  0.88)	test_corr_d   0.75 (  0.71)
Test: [  20/  26]	Loss 0.248 (0.246)	test_acc   0.87 (  0.88)	test_minacc   0.90 (  0.87)	test_majacc   0.87 (  0.88)	Loss_d 0.248 (0.246)	test_acc_d   0.87 (  0.88)	test_minacc_d   0.90 (  0.87)	test_majacc_d   0.87 (  0.88)	test_corr_d   0.73 (  0.72)
Test: [  26/  26]	Loss 0.225 (0.245)	test_acc   0.88 (  0.88)	test_minacc   0.91 (  0.87)	test_majacc   0.87 (  0.88)	Loss_d 0.225 (0.245)	test_acc_d   0.88 (  0.88)	test_minacc_d   0.91 (  0.87)	test_majacc_d   0.87 (  0.88)	test_corr_d   0.68 (  0.72)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.72it/s]
Test: [  0/  1]	Loss 2.129 (2.129)	test_acc   0.57 (  0.57)	test_minacc   0.53 (  0.53)	test_majacc   0.93 (  0.93)	Loss_d 2.129 (2.129)	test_acc_d   0.57 (  0.57)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.93 (  0.93)	test_corr_d   0.29 (  0.29)
Test: [  1/  1]	Loss 2.129 (2.129)	test_acc   0.57 (  0.57)	test_minacc   0.53 (  0.53)	test_majacc   0.93 (  0.93)	Loss_d 2.129 (2.129)	test_acc_d   0.57 (  0.57)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.93 (  0.93)	test_corr_d   0.29 (  0.29)
Overall Timing[ 39/  1]	epoch_time 0.0396 (0.0426)	validation_time 0.0003 (0.0006)	train_time 0.0392 (0.0419)
record: (train_acc, test_acc) (0.8528000237345695, 0.6030000448226929)
last accs (train_acc, test_acc) (0.8793000188469887, 0.5670000314712524)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.27it/s] 12%|#1        | 3/26 [00:00<00:01, 13.78it/s] 27%|##6       | 7/26 [00:00<00:00, 22.94it/s] 42%|####2     | 11/26 [00:00<00:00, 27.47it/s] 58%|#####7    | 15/26 [00:00<00:00, 29.75it/s] 73%|#######3  | 19/26 [00:00<00:00, 31.73it/s] 88%|########8 | 23/26 [00:00<00:00, 32.88it/s]100%|##########| 26/26 [00:00<00:00, 27.24it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1040 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1041 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1042 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1043 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1044 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1045 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1046 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1047 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1048 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1049 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1050 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1051 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1052 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1053 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1054 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1055 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1056 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1057 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1058 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1059 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1060 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1061 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1062 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1063 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1064 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1065 400
penalty weights 10000.0
Epoch: [40][  26/  26]	Loss 0.000 (0.000)	train_nll   0.23 (  0.25)	train_penalty   0.00 (  0.00)	weight_norm  25.12 ( 25.12)	train_acc   0.89 (  0.88)	train_minacc   0.93 (  0.88)	train_majacc   0.88 (  0.88)	train_corr   0.00 (  0.00)	l1 7.2813 (7.4968)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.92it/s] 23%|##3       | 6/26 [00:00<00:00, 25.81it/s]                                               23%|##3       | 6/26 [00:00<00:00, 25.81it/s] 42%|####2     | 11/26 [00:00<00:00, 33.59it/s] 62%|######1   | 16/26 [00:00<00:00, 38.67it/s]                                                62%|######1   | 16/26 [00:00<00:00, 38.67it/s] 81%|########  | 21/26 [00:00<00:00, 40.70it/s]100%|##########| 26/26 [00:00<00:00, 43.24it/s]100%|##########| 26/26 [00:00<00:00, 34.44it/s]
Test: [   0/  26]	Loss 0.239 (0.239)	test_acc   0.88 (  0.88)	test_minacc   0.90 (  0.90)	test_majacc   0.88 (  0.88)	Loss_d 0.239 (0.239)	test_acc_d   0.88 (  0.88)	test_minacc_d   0.90 (  0.90)	test_majacc_d   0.88 (  0.88)	test_corr_d   0.71 (  0.71)
Test: [  10/  26]	Loss 0.228 (0.234)	test_acc   0.90 (  0.89)	test_minacc   0.90 (  0.92)	test_majacc   0.90 (  0.88)	Loss_d 0.228 (0.234)	test_acc_d   0.90 (  0.89)	test_minacc_d   0.90 (  0.92)	test_majacc_d   0.90 (  0.88)	test_corr_d   0.75 (  0.71)
Test: [  20/  26]	Loss 0.242 (0.236)	test_acc   0.86 (  0.88)	test_minacc   0.92 (  0.91)	test_majacc   0.85 (  0.88)	Loss_d 0.242 (0.236)	test_acc_d   0.86 (  0.88)	test_minacc_d   0.92 (  0.91)	test_majacc_d   0.85 (  0.88)	test_corr_d   0.72 (  0.72)
Test: [  26/  26]	Loss 0.235 (0.237)	test_acc   0.88 (  0.88)	test_minacc   0.93 (  0.91)	test_majacc   0.87 (  0.88)	Loss_d 0.235 (0.237)	test_acc_d   0.88 (  0.88)	test_minacc_d   0.93 (  0.91)	test_majacc_d   0.87 (  0.88)	test_corr_d   0.68 (  0.72)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 60.82it/s]
Test: [  0/  1]	Loss 2.021 (2.021)	test_acc   0.57 (  0.57)	test_minacc   0.53 (  0.53)	test_majacc   0.94 (  0.94)	Loss_d 2.021 (2.021)	test_acc_d   0.57 (  0.57)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.94 (  0.94)	test_corr_d   0.27 (  0.27)
Test: [  1/  1]	Loss 2.021 (2.021)	test_acc   0.57 (  0.57)	test_minacc   0.53 (  0.53)	test_majacc   0.94 (  0.94)	Loss_d 2.021 (2.021)	test_acc_d   0.57 (  0.57)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.94 (  0.94)	test_corr_d   0.27 (  0.27)
Overall Timing[ 40/  1]	epoch_time 0.0398 (0.0425)	validation_time 0.0004 (0.0006)	train_time 0.0394 (0.0419)
record: (train_acc, test_acc) (0.8528000237345695, 0.6030000448226929)
last accs (train_acc, test_acc) (0.8806000259518624, 0.5720000267028809)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:06,  3.61it/s]  8%|7         | 2/26 [00:00<00:04,  5.48it/s] 23%|##3       | 6/26 [00:00<00:01, 15.63it/s] 38%|###8      | 10/26 [00:00<00:00, 22.24it/s] 54%|#####3    | 14/26 [00:00<00:00, 25.98it/s] 69%|######9   | 18/26 [00:00<00:00, 28.73it/s] 85%|########4 | 22/26 [00:00<00:00, 30.71it/s]100%|##########| 26/26 [00:01<00:00, 32.10it/s]100%|##########| 26/26 [00:01<00:00, 22.73it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1066 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1067 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1068 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1069 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1070 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1071 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1072 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1073 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1074 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1075 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1076 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1077 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1078 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1079 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1080 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1081 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1082 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1083 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1084 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1085 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1086 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1087 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1088 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1089 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1090 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1091 400
penalty weights 10000.0
Epoch: [41][  26/  26]	Loss 0.000 (0.000)	train_nll   0.25 (  0.25)	train_penalty   0.00 (  0.00)	weight_norm  25.13 ( 25.13)	train_acc   0.88 (  0.88)	train_minacc   0.93 (  0.90)	train_majacc   0.86 (  0.87)	train_corr   0.00 (  0.00)	l1 7.5047 (7.5688)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.76it/s] 23%|##3       | 6/26 [00:00<00:00, 29.11it/s]                                               23%|##3       | 6/26 [00:00<00:00, 29.11it/s] 42%|####2     | 11/26 [00:00<00:00, 35.98it/s] 62%|######1   | 16/26 [00:00<00:00, 40.31it/s]                                                62%|######1   | 16/26 [00:00<00:00, 40.31it/s] 81%|########  | 21/26 [00:00<00:00, 38.89it/s]100%|##########| 26/26 [00:00<00:00, 41.65it/s]100%|##########| 26/26 [00:00<00:00, 34.92it/s]
Test: [   0/  26]	Loss 0.263 (0.263)	test_acc   0.85 (  0.85)	test_minacc   0.89 (  0.89)	test_majacc   0.85 (  0.85)	Loss_d 0.263 (0.263)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.89 (  0.89)	test_majacc_d   0.85 (  0.85)	test_corr_d   0.71 (  0.71)
Test: [  10/  26]	Loss 0.236 (0.245)	test_acc   0.88 (  0.88)	test_minacc   0.84 (  0.88)	test_majacc   0.89 (  0.87)	Loss_d 0.236 (0.245)	test_acc_d   0.88 (  0.88)	test_minacc_d   0.84 (  0.88)	test_majacc_d   0.89 (  0.87)	test_corr_d   0.76 (  0.72)
Test: [  20/  26]	Loss 0.235 (0.239)	test_acc   0.88 (  0.88)	test_minacc   0.92 (  0.89)	test_majacc   0.88 (  0.88)	Loss_d 0.235 (0.239)	test_acc_d   0.88 (  0.88)	test_minacc_d   0.92 (  0.89)	test_majacc_d   0.88 (  0.88)	test_corr_d   0.74 (  0.73)
Test: [  26/  26]	Loss 0.249 (0.241)	test_acc   0.88 (  0.88)	test_minacc   0.93 (  0.89)	test_majacc   0.86 (  0.88)	Loss_d 0.249 (0.241)	test_acc_d   0.88 (  0.88)	test_minacc_d   0.93 (  0.89)	test_majacc_d   0.86 (  0.88)	test_corr_d   0.68 (  0.72)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.90it/s]
Test: [  0/  1]	Loss 2.098 (2.098)	test_acc   0.58 (  0.58)	test_minacc   0.54 (  0.54)	test_majacc   0.91 (  0.91)	Loss_d 2.098 (2.098)	test_acc_d   0.58 (  0.58)	test_minacc_d   0.54 (  0.54)	test_majacc_d   0.91 (  0.91)	test_corr_d   0.29 (  0.29)
Test: [  1/  1]	Loss 2.098 (2.098)	test_acc   0.58 (  0.58)	test_minacc   0.54 (  0.54)	test_majacc   0.91 (  0.91)	Loss_d 2.098 (2.098)	test_acc_d   0.58 (  0.58)	test_minacc_d   0.54 (  0.54)	test_majacc_d   0.91 (  0.91)	test_corr_d   0.29 (  0.29)
Overall Timing[ 41/  1]	epoch_time 0.0423 (0.0425)	validation_time 0.0007 (0.0006)	train_time 0.0416 (0.0419)
record: (train_acc, test_acc) (0.8528000237345695, 0.6030000448226929)
last accs (train_acc, test_acc) (0.8806000232100487, 0.5770000219345093)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:05,  4.67it/s] 12%|#1        | 3/26 [00:00<00:02, 10.48it/s] 27%|##6       | 7/26 [00:00<00:00, 20.10it/s] 42%|####2     | 11/26 [00:00<00:00, 25.37it/s] 58%|#####7    | 15/26 [00:00<00:00, 28.12it/s] 73%|#######3  | 19/26 [00:00<00:00, 30.75it/s] 88%|########8 | 23/26 [00:00<00:00, 32.23it/s]100%|##########| 26/26 [00:01<00:00, 25.22it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1092 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1093 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1094 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1095 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1096 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1097 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1098 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1099 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1100 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1101 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1102 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1103 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1104 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1105 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1106 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1107 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1108 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1109 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1110 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1111 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1112 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1113 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1114 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1115 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1116 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1117 400
penalty weights 10000.0
Epoch: [42][  26/  26]	Loss 0.000 (0.000)	train_nll   0.25 (  0.24)	train_penalty   0.00 (  0.00)	weight_norm  25.13 ( 25.13)	train_acc   0.87 (  0.88)	train_minacc   0.93 (  0.90)	train_majacc   0.86 (  0.88)	train_corr   0.00 (  0.00)	l1 7.8674 (7.5083)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.71it/s] 23%|##3       | 6/26 [00:00<00:00, 32.05it/s]                                               23%|##3       | 6/26 [00:00<00:00, 32.05it/s] 42%|####2     | 11/26 [00:00<00:00, 37.94it/s] 62%|######1   | 16/26 [00:00<00:00, 42.39it/s]                                                62%|######1   | 16/26 [00:00<00:00, 42.39it/s] 81%|########  | 21/26 [00:00<00:00, 41.72it/s]100%|##########| 26/26 [00:00<00:00, 44.23it/s]100%|##########| 26/26 [00:00<00:00, 36.60it/s]
Test: [   0/  26]	Loss 0.252 (0.252)	test_acc   0.87 (  0.87)	test_minacc   0.90 (  0.90)	test_majacc   0.86 (  0.86)	Loss_d 0.252 (0.252)	test_acc_d   0.87 (  0.87)	test_minacc_d   0.90 (  0.90)	test_majacc_d   0.86 (  0.86)	test_corr_d   0.68 (  0.68)
Test: [  10/  26]	Loss 0.251 (0.248)	test_acc   0.88 (  0.87)	test_minacc   0.83 (  0.90)	test_majacc   0.89 (  0.87)	Loss_d 0.251 (0.248)	test_acc_d   0.88 (  0.87)	test_minacc_d   0.83 (  0.90)	test_majacc_d   0.89 (  0.87)	test_corr_d   0.74 (  0.70)
Test: [  20/  26]	Loss 0.236 (0.246)	test_acc   0.87 (  0.87)	test_minacc   0.96 (  0.90)	test_majacc   0.86 (  0.87)	Loss_d 0.236 (0.246)	test_acc_d   0.87 (  0.87)	test_minacc_d   0.96 (  0.90)	test_majacc_d   0.86 (  0.87)	test_corr_d   0.71 (  0.70)
Test: [  26/  26]	Loss 0.252 (0.246)	test_acc   0.87 (  0.87)	test_minacc   0.93 (  0.90)	test_majacc   0.86 (  0.87)	Loss_d 0.252 (0.246)	test_acc_d   0.87 (  0.87)	test_minacc_d   0.93 (  0.90)	test_majacc_d   0.86 (  0.87)	test_corr_d   0.66 (  0.70)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.49it/s]
Test: [  0/  1]	Loss 2.161 (2.161)	test_acc   0.61 (  0.61)	test_minacc   0.57 (  0.57)	test_majacc   0.91 (  0.91)	Loss_d 2.161 (2.161)	test_acc_d   0.61 (  0.61)	test_minacc_d   0.57 (  0.57)	test_majacc_d   0.91 (  0.91)	test_corr_d   0.21 (  0.21)
Test: [  1/  1]	Loss 2.161 (2.161)	test_acc   0.61 (  0.61)	test_minacc   0.57 (  0.57)	test_majacc   0.91 (  0.91)	Loss_d 2.161 (2.161)	test_acc_d   0.61 (  0.61)	test_minacc_d   0.57 (  0.57)	test_majacc_d   0.91 (  0.91)	test_corr_d   0.21 (  0.21)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/138/checkpoints/model_best.pth
Overall Timing[ 42/  1]	epoch_time 0.0414 (0.0425)	validation_time 0.0004 (0.0006)	train_time 0.0410 (0.0418)
record: (train_acc, test_acc) (0.8722000223398209, 0.6070000529289246)
last accs (train_acc, test_acc) (0.8722000223398209, 0.6070000529289246)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 13.78it/s] 23%|##3       | 6/26 [00:00<00:00, 24.41it/s] 38%|###8      | 10/26 [00:00<00:00, 29.18it/s] 54%|#####3    | 14/26 [00:00<00:00, 30.89it/s] 69%|######9   | 18/26 [00:00<00:00, 31.69it/s] 85%|########4 | 22/26 [00:00<00:00, 32.59it/s]100%|##########| 26/26 [00:00<00:00, 33.18it/s]100%|##########| 26/26 [00:00<00:00, 28.68it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1118 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1119 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1120 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1121 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1122 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1123 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1124 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1125 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1126 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1127 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1128 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1129 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1130 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1131 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1132 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1133 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1134 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1135 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1136 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1137 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1138 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1139 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1140 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1141 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1142 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1143 400
penalty weights 10000.0
Epoch: [43][  26/  26]	Loss 0.000 (0.000)	train_nll   0.23 (  0.24)	train_penalty   0.00 (  0.00)	weight_norm  25.13 ( 25.13)	train_acc   0.88 (  0.88)	train_minacc   0.93 (  0.90)	train_majacc   0.86 (  0.88)	train_corr   0.00 (  0.00)	l1 7.4762 (7.5688)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:06,  3.61it/s] 15%|#5        | 4/26 [00:00<00:01, 12.16it/s] 35%|###4      | 9/26 [00:00<00:00, 23.61it/s]                                               35%|###4      | 9/26 [00:00<00:00, 23.61it/s] 54%|#####3    | 14/26 [00:00<00:00, 30.17it/s] 73%|#######3  | 19/26 [00:00<00:00, 34.97it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 34.97it/s] 92%|#########2| 24/26 [00:00<00:00, 37.64it/s]100%|##########| 26/26 [00:00<00:00, 28.05it/s]
Test: [   0/  26]	Loss 0.248 (0.248)	test_acc   0.88 (  0.88)	test_minacc   0.90 (  0.90)	test_majacc   0.87 (  0.87)	Loss_d 0.248 (0.248)	test_acc_d   0.88 (  0.88)	test_minacc_d   0.90 (  0.90)	test_majacc_d   0.87 (  0.87)	test_corr_d   0.70 (  0.70)
Test: [  10/  26]	Loss 0.245 (0.242)	test_acc   0.89 (  0.88)	test_minacc   0.86 (  0.91)	test_majacc   0.89 (  0.88)	Loss_d 0.245 (0.242)	test_acc_d   0.89 (  0.88)	test_minacc_d   0.86 (  0.91)	test_majacc_d   0.89 (  0.88)	test_corr_d   0.74 (  0.71)
Test: [  20/  26]	Loss 0.246 (0.242)	test_acc   0.86 (  0.88)	test_minacc   0.94 (  0.90)	test_majacc   0.85 (  0.87)	Loss_d 0.246 (0.242)	test_acc_d   0.86 (  0.88)	test_minacc_d   0.94 (  0.90)	test_majacc_d   0.85 (  0.87)	test_corr_d   0.71 (  0.71)
Test: [  26/  26]	Loss 0.233 (0.243)	test_acc   0.88 (  0.87)	test_minacc   0.93 (  0.90)	test_majacc   0.86 (  0.87)	Loss_d 0.233 (0.243)	test_acc_d   0.88 (  0.87)	test_minacc_d   0.93 (  0.90)	test_majacc_d   0.86 (  0.87)	test_corr_d   0.68 (  0.71)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.07it/s]
Test: [  0/  1]	Loss 2.087 (2.087)	test_acc   0.59 (  0.59)	test_minacc   0.55 (  0.55)	test_majacc   0.92 (  0.92)	Loss_d 2.087 (2.087)	test_acc_d   0.59 (  0.59)	test_minacc_d   0.55 (  0.55)	test_majacc_d   0.92 (  0.92)	test_corr_d   0.25 (  0.25)
Test: [  1/  1]	Loss 2.087 (2.087)	test_acc   0.59 (  0.59)	test_minacc   0.55 (  0.55)	test_majacc   0.92 (  0.92)	Loss_d 2.087 (2.087)	test_acc_d   0.59 (  0.59)	test_minacc_d   0.55 (  0.55)	test_majacc_d   0.92 (  0.92)	test_corr_d   0.25 (  0.25)
Overall Timing[ 43/  1]	epoch_time 0.0447 (0.0425)	validation_time 0.0003 (0.0006)	train_time 0.0443 (0.0419)
record: (train_acc, test_acc) (0.8722000223398209, 0.6070000529289246)
last accs (train_acc, test_acc) (0.8738000259399414, 0.5850000381469727)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:07,  3.46it/s] 19%|#9        | 5/26 [00:00<00:01, 14.80it/s] 35%|###4      | 9/26 [00:00<00:00, 21.82it/s] 50%|#####     | 13/26 [00:00<00:00, 26.11it/s] 65%|######5   | 17/26 [00:00<00:00, 28.95it/s] 81%|########  | 21/26 [00:00<00:00, 30.94it/s] 96%|#########6| 25/26 [00:00<00:00, 32.40it/s]100%|##########| 26/26 [00:01<00:00, 24.13it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1144 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1145 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1146 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1147 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1148 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1149 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1150 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1151 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1152 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1153 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1154 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1155 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1156 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1157 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1158 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1159 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1160 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1161 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1162 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1163 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1164 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1165 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1166 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1167 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1168 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1169 400
penalty weights 10000.0
Epoch: [44][  26/  26]	Loss 0.000 (0.000)	train_nll   0.24 (  0.25)	train_penalty   0.00 (  0.00)	weight_norm  25.13 ( 25.13)	train_acc   0.88 (  0.87)	train_minacc   0.93 (  0.89)	train_majacc   0.87 (  0.87)	train_corr   0.00 (  0.00)	l1 7.3734 (7.6209)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 17.90it/s] 27%|##6       | 7/26 [00:00<00:00, 31.03it/s]                                               27%|##6       | 7/26 [00:00<00:00, 31.03it/s] 46%|####6     | 12/26 [00:00<00:00, 36.97it/s] 65%|######5   | 17/26 [00:00<00:00, 40.37it/s]                                                65%|######5   | 17/26 [00:00<00:00, 40.37it/s] 85%|########4 | 22/26 [00:00<00:00, 42.17it/s]100%|##########| 26/26 [00:00<00:00, 35.25it/s]
Test: [   0/  26]	Loss 0.256 (0.256)	test_acc   0.87 (  0.87)	test_minacc   0.90 (  0.90)	test_majacc   0.86 (  0.86)	Loss_d 0.256 (0.256)	test_acc_d   0.87 (  0.87)	test_minacc_d   0.90 (  0.90)	test_majacc_d   0.86 (  0.86)	test_corr_d   0.72 (  0.72)
Test: [  10/  26]	Loss 0.241 (0.240)	test_acc   0.88 (  0.88)	test_minacc   0.83 (  0.90)	test_majacc   0.89 (  0.88)	Loss_d 0.241 (0.240)	test_acc_d   0.88 (  0.88)	test_minacc_d   0.83 (  0.90)	test_majacc_d   0.89 (  0.88)	test_corr_d   0.76 (  0.73)
Test: [  20/  26]	Loss 0.240 (0.237)	test_acc   0.86 (  0.88)	test_minacc   0.92 (  0.90)	test_majacc   0.86 (  0.88)	Loss_d 0.240 (0.237)	test_acc_d   0.86 (  0.88)	test_minacc_d   0.92 (  0.90)	test_majacc_d   0.86 (  0.88)	test_corr_d   0.74 (  0.73)
Test: [  26/  26]	Loss 0.237 (0.239)	test_acc   0.88 (  0.88)	test_minacc   0.93 (  0.90)	test_majacc   0.87 (  0.88)	Loss_d 0.237 (0.239)	test_acc_d   0.88 (  0.88)	test_minacc_d   0.93 (  0.90)	test_majacc_d   0.87 (  0.88)	test_corr_d   0.70 (  0.73)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.00it/s]
Test: [  0/  1]	Loss 2.070 (2.070)	test_acc   0.58 (  0.58)	test_minacc   0.54 (  0.54)	test_majacc   0.93 (  0.93)	Loss_d 2.070 (2.070)	test_acc_d   0.58 (  0.58)	test_minacc_d   0.54 (  0.54)	test_majacc_d   0.93 (  0.93)	test_corr_d   0.29 (  0.29)
Test: [  1/  1]	Loss 2.070 (2.070)	test_acc   0.58 (  0.58)	test_minacc   0.54 (  0.54)	test_majacc   0.93 (  0.93)	Loss_d 2.070 (2.070)	test_acc_d   0.58 (  0.58)	test_minacc_d   0.54 (  0.54)	test_majacc_d   0.93 (  0.93)	test_corr_d   0.29 (  0.29)
Overall Timing[ 44/  1]	epoch_time 0.0398 (0.0425)	validation_time 0.0005 (0.0006)	train_time 0.0393 (0.0418)
record: (train_acc, test_acc) (0.8722000223398209, 0.6070000529289246)
last accs (train_acc, test_acc) (0.8789000211954117, 0.5760000348091125)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 18.20it/s] 23%|##3       | 6/26 [00:00<00:00, 26.94it/s] 38%|###8      | 10/26 [00:00<00:00, 30.18it/s] 54%|#####3    | 14/26 [00:00<00:00, 32.58it/s] 69%|######9   | 18/26 [00:00<00:00, 33.72it/s] 85%|########4 | 22/26 [00:00<00:00, 34.67it/s]100%|##########| 26/26 [00:00<00:00, 34.84it/s]100%|##########| 26/26 [00:00<00:00, 30.20it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1170 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1171 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1172 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1173 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1174 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1175 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1176 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1177 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1178 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1179 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1180 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1181 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1182 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1183 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1184 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1185 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1186 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1187 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1188 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1189 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1190 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1191 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1192 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1193 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1194 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1195 400
penalty weights 10000.0
Epoch: [45][  26/  26]	Loss 0.000 (0.000)	train_nll   0.26 (  0.25)	train_penalty   0.00 (  0.00)	weight_norm  25.13 ( 25.13)	train_acc   0.87 (  0.87)	train_minacc   0.93 (  0.91)	train_majacc   0.85 (  0.87)	train_corr   0.00 (  0.00)	l1 7.7214 (7.5927)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.90it/s] 15%|#5        | 4/26 [00:00<00:01, 13.68it/s] 35%|###4      | 9/26 [00:00<00:00, 25.63it/s]                                               35%|###4      | 9/26 [00:00<00:00, 25.63it/s] 54%|#####3    | 14/26 [00:00<00:00, 33.08it/s] 73%|#######3  | 19/26 [00:00<00:00, 36.94it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 36.94it/s] 92%|#########2| 24/26 [00:00<00:00, 36.50it/s]100%|##########| 26/26 [00:00<00:00, 30.21it/s]
Test: [   0/  26]	Loss 0.265 (0.265)	test_acc   0.85 (  0.85)	test_minacc   0.89 (  0.89)	test_majacc   0.84 (  0.84)	Loss_d 0.265 (0.265)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.89 (  0.89)	test_majacc_d   0.84 (  0.84)	test_corr_d   0.70 (  0.70)
Test: [  10/  26]	Loss 0.247 (0.254)	test_acc   0.88 (  0.87)	test_minacc   0.84 (  0.89)	test_majacc   0.89 (  0.86)	Loss_d 0.247 (0.254)	test_acc_d   0.88 (  0.87)	test_minacc_d   0.84 (  0.89)	test_majacc_d   0.89 (  0.86)	test_corr_d   0.74 (  0.71)
Test: [  20/  26]	Loss 0.237 (0.248)	test_acc   0.88 (  0.87)	test_minacc   0.94 (  0.90)	test_majacc   0.87 (  0.87)	Loss_d 0.237 (0.248)	test_acc_d   0.88 (  0.87)	test_minacc_d   0.94 (  0.90)	test_majacc_d   0.87 (  0.87)	test_corr_d   0.73 (  0.71)
Test: [  26/  26]	Loss 0.253 (0.248)	test_acc   0.87 (  0.87)	test_minacc   0.93 (  0.90)	test_majacc   0.86 (  0.87)	Loss_d 0.253 (0.248)	test_acc_d   0.87 (  0.87)	test_minacc_d   0.93 (  0.90)	test_majacc_d   0.86 (  0.87)	test_corr_d   0.68 (  0.71)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.32it/s]
Test: [  0/  1]	Loss 2.126 (2.126)	test_acc   0.60 (  0.60)	test_minacc   0.56 (  0.56)	test_majacc   0.91 (  0.91)	Loss_d 2.126 (2.126)	test_acc_d   0.60 (  0.60)	test_minacc_d   0.56 (  0.56)	test_majacc_d   0.91 (  0.91)	test_corr_d   0.25 (  0.25)
Test: [  1/  1]	Loss 2.126 (2.126)	test_acc   0.60 (  0.60)	test_minacc   0.56 (  0.56)	test_majacc   0.91 (  0.91)	Loss_d 2.126 (2.126)	test_acc_d   0.60 (  0.60)	test_minacc_d   0.56 (  0.56)	test_majacc_d   0.91 (  0.91)	test_corr_d   0.25 (  0.25)
Overall Timing[ 45/  1]	epoch_time 0.0453 (0.0425)	validation_time 0.0004 (0.0006)	train_time 0.0449 (0.0419)
record: (train_acc, test_acc) (0.8722000223398209, 0.6070000529289246)
last accs (train_acc, test_acc) (0.8722000223398209, 0.5990000367164612)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 15.12it/s] 23%|##3       | 6/26 [00:00<00:00, 26.65it/s] 38%|###8      | 10/26 [00:00<00:00, 30.90it/s] 54%|#####3    | 14/26 [00:00<00:00, 32.87it/s] 69%|######9   | 18/26 [00:00<00:00, 34.16it/s] 85%|########4 | 22/26 [00:00<00:00, 34.50it/s]100%|##########| 26/26 [00:00<00:00, 34.84it/s]100%|##########| 26/26 [00:00<00:00, 30.08it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1196 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1197 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1198 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1199 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1200 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1201 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1202 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1203 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1204 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1205 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1206 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1207 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1208 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1209 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1210 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1211 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1212 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1213 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1214 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1215 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1216 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1217 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1218 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1219 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1220 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1221 400
penalty weights 10000.0
Epoch: [46][  26/  26]	Loss 0.000 (0.000)	train_nll   0.25 (  0.24)	train_penalty   0.00 (  0.00)	weight_norm  25.14 ( 25.14)	train_acc   0.87 (  0.87)	train_minacc   0.91 (  0.90)	train_majacc   0.86 (  0.87)	train_corr   0.00 (  0.00)	l1 7.7691 (7.4936)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 19.60it/s] 27%|##6       | 7/26 [00:00<00:00, 31.27it/s]                                               27%|##6       | 7/26 [00:00<00:00, 31.27it/s] 46%|####6     | 12/26 [00:00<00:00, 38.21it/s] 65%|######5   | 17/26 [00:00<00:00, 41.14it/s]                                                65%|######5   | 17/26 [00:00<00:00, 41.14it/s] 85%|########4 | 22/26 [00:00<00:00, 43.78it/s]100%|##########| 26/26 [00:00<00:00, 38.26it/s]
Test: [   0/  26]	Loss 0.244 (0.244)	test_acc   0.87 (  0.87)	test_minacc   0.90 (  0.90)	test_majacc   0.87 (  0.87)	Loss_d 0.244 (0.244)	test_acc_d   0.87 (  0.87)	test_minacc_d   0.90 (  0.90)	test_majacc_d   0.87 (  0.87)	test_corr_d   0.69 (  0.69)
Test: [  10/  26]	Loss 0.253 (0.245)	test_acc   0.87 (  0.88)	test_minacc   0.83 (  0.91)	test_majacc   0.88 (  0.87)	Loss_d 0.253 (0.245)	test_acc_d   0.87 (  0.88)	test_minacc_d   0.83 (  0.91)	test_majacc_d   0.88 (  0.87)	test_corr_d   0.73 (  0.70)
Test: [  20/  26]	Loss 0.244 (0.248)	test_acc   0.87 (  0.87)	test_minacc   0.94 (  0.91)	test_majacc   0.86 (  0.86)	Loss_d 0.244 (0.248)	test_acc_d   0.87 (  0.87)	test_minacc_d   0.94 (  0.91)	test_majacc_d   0.86 (  0.86)	test_corr_d   0.70 (  0.70)
Test: [  26/  26]	Loss 0.248 (0.248)	test_acc   0.87 (  0.87)	test_minacc   0.91 (  0.91)	test_majacc   0.86 (  0.86)	Loss_d 0.248 (0.248)	test_acc_d   0.87 (  0.87)	test_minacc_d   0.91 (  0.91)	test_majacc_d   0.86 (  0.86)	test_corr_d   0.67 (  0.70)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.70it/s]
Test: [  0/  1]	Loss 2.136 (2.136)	test_acc   0.62 (  0.62)	test_minacc   0.59 (  0.59)	test_majacc   0.92 (  0.92)	Loss_d 2.136 (2.136)	test_acc_d   0.62 (  0.62)	test_minacc_d   0.59 (  0.59)	test_majacc_d   0.92 (  0.92)	test_corr_d   0.20 (  0.20)
Test: [  1/  1]	Loss 2.136 (2.136)	test_acc   0.62 (  0.62)	test_minacc   0.59 (  0.59)	test_majacc   0.92 (  0.92)	Loss_d 2.136 (2.136)	test_acc_d   0.62 (  0.62)	test_minacc_d   0.59 (  0.59)	test_majacc_d   0.92 (  0.92)	test_corr_d   0.20 (  0.20)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/138/checkpoints/model_best.pth
Overall Timing[ 46/  1]	epoch_time 0.0390 (0.0424)	validation_time 0.0003 (0.0006)	train_time 0.0387 (0.0418)
record: (train_acc, test_acc) (0.8695000213384628, 0.6220000386238098)
last accs (train_acc, test_acc) (0.8695000213384628, 0.6220000386238098)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.68it/s] 15%|#5        | 4/26 [00:00<00:01, 18.31it/s] 31%|###       | 8/26 [00:00<00:00, 25.93it/s] 46%|####6     | 12/26 [00:00<00:00, 29.71it/s] 62%|######1   | 16/26 [00:00<00:00, 32.04it/s] 77%|#######6  | 20/26 [00:00<00:00, 33.89it/s] 92%|#########2| 24/26 [00:00<00:00, 34.79it/s]100%|##########| 26/26 [00:00<00:00, 29.03it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1222 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1223 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1224 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1225 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1226 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1227 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1228 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1229 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1230 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1231 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1232 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1233 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1234 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1235 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1236 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1237 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1238 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1239 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1240 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1241 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1242 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1243 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1244 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1245 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1246 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1247 400
penalty weights 10000.0
Epoch: [47][  26/  26]	Loss 0.000 (0.000)	train_nll   0.23 (  0.24)	train_penalty   0.00 (  0.00)	weight_norm  25.14 ( 25.14)	train_acc   0.89 (  0.88)	train_minacc   0.93 (  0.90)	train_majacc   0.88 (  0.87)	train_corr   0.00 (  0.00)	l1 7.3934 (7.6423)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.28it/s] 12%|#1        | 3/26 [00:00<00:01, 12.73it/s] 31%|###       | 8/26 [00:00<00:00, 26.85it/s]                                               31%|###       | 8/26 [00:00<00:00, 26.85it/s] 50%|#####     | 13/26 [00:00<00:00, 34.47it/s] 69%|######9   | 18/26 [00:00<00:00, 37.16it/s]                                                69%|######9   | 18/26 [00:00<00:00, 37.16it/s] 88%|########8 | 23/26 [00:00<00:00, 38.42it/s]100%|##########| 26/26 [00:00<00:00, 31.52it/s]
Test: [   0/  26]	Loss 0.246 (0.246)	test_acc   0.88 (  0.88)	test_minacc   0.92 (  0.92)	test_majacc   0.88 (  0.88)	Loss_d 0.246 (0.246)	test_acc_d   0.88 (  0.88)	test_minacc_d   0.92 (  0.92)	test_majacc_d   0.88 (  0.88)	test_corr_d   0.72 (  0.72)
Test: [  10/  26]	Loss 0.242 (0.237)	test_acc   0.88 (  0.88)	test_minacc   0.84 (  0.90)	test_majacc   0.89 (  0.88)	Loss_d 0.242 (0.237)	test_acc_d   0.88 (  0.88)	test_minacc_d   0.84 (  0.90)	test_majacc_d   0.89 (  0.88)	test_corr_d   0.76 (  0.73)
Test: [  20/  26]	Loss 0.239 (0.236)	test_acc   0.87 (  0.88)	test_minacc   0.94 (  0.90)	test_majacc   0.86 (  0.88)	Loss_d 0.239 (0.236)	test_acc_d   0.87 (  0.88)	test_minacc_d   0.94 (  0.90)	test_majacc_d   0.86 (  0.88)	test_corr_d   0.74 (  0.73)
Test: [  26/  26]	Loss 0.230 (0.237)	test_acc   0.88 (  0.88)	test_minacc   0.93 (  0.90)	test_majacc   0.87 (  0.88)	Loss_d 0.230 (0.237)	test_acc_d   0.88 (  0.88)	test_minacc_d   0.93 (  0.90)	test_majacc_d   0.87 (  0.88)	test_corr_d   0.70 (  0.73)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.90it/s]
Test: [  0/  1]	Loss 2.121 (2.121)	test_acc   0.58 (  0.58)	test_minacc   0.54 (  0.54)	test_majacc   0.92 (  0.92)	Loss_d 2.121 (2.121)	test_acc_d   0.58 (  0.58)	test_minacc_d   0.54 (  0.54)	test_majacc_d   0.92 (  0.92)	test_corr_d   0.30 (  0.30)
Test: [  1/  1]	Loss 2.121 (2.121)	test_acc   0.58 (  0.58)	test_minacc   0.54 (  0.54)	test_majacc   0.92 (  0.92)	Loss_d 2.121 (2.121)	test_acc_d   0.58 (  0.58)	test_minacc_d   0.54 (  0.54)	test_majacc_d   0.92 (  0.92)	test_corr_d   0.30 (  0.30)
Overall Timing[ 47/  1]	epoch_time 0.0391 (0.0424)	validation_time 0.0004 (0.0006)	train_time 0.0387 (0.0418)
record: (train_acc, test_acc) (0.8695000213384628, 0.6220000386238098)
last accs (train_acc, test_acc) (0.8811000224351883, 0.5750000476837158)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.85it/s] 19%|#9        | 5/26 [00:00<00:00, 24.98it/s] 35%|###4      | 9/26 [00:00<00:00, 29.59it/s] 50%|#####     | 13/26 [00:00<00:00, 31.96it/s] 65%|######5   | 17/26 [00:00<00:00, 33.33it/s] 81%|########  | 21/26 [00:00<00:00, 33.97it/s] 96%|#########6| 25/26 [00:00<00:00, 34.52it/s]100%|##########| 26/26 [00:00<00:00, 29.85it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1248 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1249 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1250 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1251 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1252 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1253 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1254 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1255 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1256 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1257 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1258 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1259 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1260 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1261 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1262 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1263 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1264 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1265 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1266 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1267 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1268 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1269 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1270 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1271 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1272 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1273 400
penalty weights 10000.0
Epoch: [48][  26/  26]	Loss 0.000 (0.000)	train_nll   0.24 (  0.25)	train_penalty   0.00 (  0.00)	weight_norm  25.14 ( 25.14)	train_acc   0.88 (  0.87)	train_minacc   0.93 (  0.90)	train_majacc   0.86 (  0.87)	train_corr   0.00 (  0.00)	l1 7.5440 (7.6345)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.04it/s] 31%|###       | 8/26 [00:00<00:00, 38.82it/s]                                               31%|###       | 8/26 [00:00<00:00, 38.82it/s] 50%|#####     | 13/26 [00:00<00:00, 39.64it/s] 69%|######9   | 18/26 [00:00<00:00, 42.54it/s]                                                69%|######9   | 18/26 [00:00<00:00, 42.54it/s] 88%|########8 | 23/26 [00:00<00:00, 43.70it/s]100%|##########| 26/26 [00:00<00:00, 37.10it/s]
Test: [   0/  26]	Loss 0.265 (0.265)	test_acc   0.86 (  0.86)	test_minacc   0.92 (  0.92)	test_majacc   0.85 (  0.85)	Loss_d 0.265 (0.265)	test_acc_d   0.86 (  0.86)	test_minacc_d   0.92 (  0.92)	test_majacc_d   0.85 (  0.85)	test_corr_d   0.71 (  0.71)
Test: [  10/  26]	Loss 0.241 (0.247)	test_acc   0.87 (  0.87)	test_minacc   0.86 (  0.90)	test_majacc   0.88 (  0.87)	Loss_d 0.241 (0.247)	test_acc_d   0.87 (  0.87)	test_minacc_d   0.86 (  0.90)	test_majacc_d   0.88 (  0.87)	test_corr_d   0.75 (  0.72)
Test: [  20/  26]	Loss 0.244 (0.244)	test_acc   0.86 (  0.88)	test_minacc   0.92 (  0.90)	test_majacc   0.85 (  0.87)	Loss_d 0.244 (0.244)	test_acc_d   0.86 (  0.88)	test_minacc_d   0.92 (  0.90)	test_majacc_d   0.85 (  0.87)	test_corr_d   0.73 (  0.72)
Test: [  26/  26]	Loss 0.237 (0.245)	test_acc   0.88 (  0.87)	test_minacc   0.93 (  0.90)	test_majacc   0.86 (  0.87)	Loss_d 0.237 (0.245)	test_acc_d   0.88 (  0.87)	test_minacc_d   0.93 (  0.90)	test_majacc_d   0.86 (  0.87)	test_corr_d   0.70 (  0.72)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.52it/s]
Test: [  0/  1]	Loss 2.134 (2.134)	test_acc   0.58 (  0.58)	test_minacc   0.54 (  0.54)	test_majacc   0.92 (  0.92)	Loss_d 2.134 (2.134)	test_acc_d   0.58 (  0.58)	test_minacc_d   0.54 (  0.54)	test_majacc_d   0.92 (  0.92)	test_corr_d   0.29 (  0.29)
Test: [  1/  1]	Loss 2.134 (2.134)	test_acc   0.58 (  0.58)	test_minacc   0.54 (  0.54)	test_majacc   0.92 (  0.92)	Loss_d 2.134 (2.134)	test_acc_d   0.58 (  0.58)	test_minacc_d   0.54 (  0.54)	test_majacc_d   0.92 (  0.92)	test_corr_d   0.29 (  0.29)
Overall Timing[ 48/  1]	epoch_time 0.0386 (0.0423)	validation_time 0.0004 (0.0006)	train_time 0.0382 (0.0417)
record: (train_acc, test_acc) (0.8695000213384628, 0.6220000386238098)
last accs (train_acc, test_acc) (0.8731000248193741, 0.5790000557899475)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 12.93it/s] 23%|##3       | 6/26 [00:00<00:00, 24.64it/s] 38%|###8      | 10/26 [00:00<00:00, 28.21it/s] 54%|#####3    | 14/26 [00:00<00:00, 30.52it/s] 69%|######9   | 18/26 [00:00<00:00, 31.97it/s] 85%|########4 | 22/26 [00:00<00:00, 32.34it/s]100%|##########| 26/26 [00:00<00:00, 33.18it/s]100%|##########| 26/26 [00:00<00:00, 28.35it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1274 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1275 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1276 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1277 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1278 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1279 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1280 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1281 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1282 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1283 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1284 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1285 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1286 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1287 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1288 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1289 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1290 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1291 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1292 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1293 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1294 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1295 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1296 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1297 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1298 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1299 400
penalty weights 10000.0
Epoch: [49][  26/  26]	Loss 0.000 (0.000)	train_nll   0.25 (  0.24)	train_penalty   0.00 (  0.00)	weight_norm  25.14 ( 25.14)	train_acc   0.88 (  0.87)	train_minacc   0.93 (  0.91)	train_majacc   0.86 (  0.87)	train_corr   0.00 (  0.00)	l1 7.8701 (7.6383)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.96it/s] 12%|#1        | 3/26 [00:00<00:01, 15.02it/s] 31%|###       | 8/26 [00:00<00:00, 29.54it/s]                                               31%|###       | 8/26 [00:00<00:00, 29.54it/s] 50%|#####     | 13/26 [00:00<00:00, 36.26it/s] 69%|######9   | 18/26 [00:00<00:00, 39.00it/s]                                                69%|######9   | 18/26 [00:00<00:00, 39.00it/s] 88%|########8 | 23/26 [00:00<00:00, 39.39it/s]100%|##########| 26/26 [00:00<00:00, 34.02it/s]
Test: [   0/  26]	Loss 0.258 (0.258)	test_acc   0.86 (  0.86)	test_minacc   0.90 (  0.90)	test_majacc   0.85 (  0.85)	Loss_d 0.258 (0.258)	test_acc_d   0.86 (  0.86)	test_minacc_d   0.90 (  0.90)	test_majacc_d   0.85 (  0.85)	test_corr_d   0.70 (  0.70)
Test: [  10/  26]	Loss 0.253 (0.253)	test_acc   0.87 (  0.87)	test_minacc   0.84 (  0.89)	test_majacc   0.88 (  0.86)	Loss_d 0.253 (0.253)	test_acc_d   0.87 (  0.87)	test_minacc_d   0.84 (  0.89)	test_majacc_d   0.88 (  0.86)	test_corr_d   0.75 (  0.71)
Test: [  20/  26]	Loss 0.236 (0.247)	test_acc   0.87 (  0.87)	test_minacc   0.94 (  0.90)	test_majacc   0.86 (  0.87)	Loss_d 0.236 (0.247)	test_acc_d   0.87 (  0.87)	test_minacc_d   0.94 (  0.90)	test_majacc_d   0.86 (  0.87)	test_corr_d   0.73 (  0.72)
Test: [  26/  26]	Loss 0.246 (0.247)	test_acc   0.88 (  0.87)	test_minacc   0.93 (  0.90)	test_majacc   0.86 (  0.87)	Loss_d 0.246 (0.247)	test_acc_d   0.88 (  0.87)	test_minacc_d   0.93 (  0.90)	test_majacc_d   0.86 (  0.87)	test_corr_d   0.69 (  0.71)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.29it/s]
Test: [  0/  1]	Loss 2.224 (2.224)	test_acc   0.58 (  0.58)	test_minacc   0.55 (  0.55)	test_majacc   0.91 (  0.91)	Loss_d 2.224 (2.224)	test_acc_d   0.58 (  0.58)	test_minacc_d   0.55 (  0.55)	test_majacc_d   0.91 (  0.91)	test_corr_d   0.26 (  0.26)
Test: [  1/  1]	Loss 2.224 (2.224)	test_acc   0.58 (  0.58)	test_minacc   0.55 (  0.55)	test_majacc   0.91 (  0.91)	Loss_d 2.224 (2.224)	test_acc_d   0.58 (  0.58)	test_minacc_d   0.55 (  0.55)	test_majacc_d   0.91 (  0.91)	test_corr_d   0.26 (  0.26)
Overall Timing[ 49/  1]	epoch_time 0.0399 (0.0423)	validation_time 0.0006 (0.0006)	train_time 0.0393 (0.0416)
record: (train_acc, test_acc) (0.8695000213384628, 0.6220000386238098)
last accs (train_acc, test_acc) (0.8718000214099884, 0.5840000510215759)
done saving aggregate.csv to ./aggregate.csv
wandb: - 0.166 MB of 0.166 MB uploadedwandb: \ 0.166 MB of 0.166 MB uploadedwandb: | 0.189 MB of 0.201 MB uploaded (0.003 MB deduped)wandb: / 0.471 MB of 0.471 MB uploaded (0.003 MB deduped)wandb: 
wandb: Run history:
wandb:                                                                            global_step ▁▁▁▁▂▂▂▂▂▃▃▃▃▃▃▄▄▄▄▄▅▅▅▅▅▅▆▆▆▆▆▆▇▇▇▇▇███
wandb:      resnet18-usc-unsigned/baseline/prune_rate=1.0/138/logs/diagnostics/epoch_time_val █▂▂▂▁▁▁▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▁▂▂▁▂▂▁▂▃▁▁▂▂▂▂▁▁▁
wandb:      resnet18-usc-unsigned/baseline/prune_rate=1.0/138/logs/diagnostics/train_time_val █▂▂▂▁▂▁▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▁▂▃▂▃▂▁▃▃▁▂▂▂▃▃▁▁▂
wandb: resnet18-usc-unsigned/baseline/prune_rate=1.0/138/logs/diagnostics/validation_time_val █▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:                     resnet18-usc-unsigned/baseline/prune_rate=1.0/138/logs/global_step ▁▁▁▁▂▂▂▂▂▃▃▃▃▃▃▄▄▄▄▄▅▅▅▅▅▅▆▆▆▆▆▆▇▇▇▇▇███
wandb:                   resnet18-usc-unsigned/baseline/prune_rate=1.0/138/logs/test/Loss_avg ▃▄▃▃▃▃▂▃▅▄▅█▂▂▁▁▂▃▄▃▃▃▃▅▄▃▄▅▄▄▅▅▄▅▅▄▅▅▅▅
wandb:                 resnet18-usc-unsigned/baseline/prune_rate=1.0/138/logs/test/Loss_d_avg ▃▄▃▃▃▃▂▃▅▄▅█▂▂▁▁▂▃▄▃▃▃▃▅▄▃▄▅▄▄▅▅▄▅▅▄▅▅▅▅
wandb:                 resnet18-usc-unsigned/baseline/prune_rate=1.0/138/logs/test/Loss_d_val ▃▄▃▃▃▃▂▃▅▄▅█▂▂▁▁▂▃▄▃▃▃▃▅▄▃▄▅▄▄▅▅▄▅▅▄▅▅▅▅
wandb:                   resnet18-usc-unsigned/baseline/prune_rate=1.0/138/logs/test/Loss_val ▃▄▃▃▃▃▂▃▅▄▅█▂▂▁▁▂▃▄▃▃▃▃▅▄▃▄▅▄▄▅▅▄▅▅▄▅▅▅▅
wandb:               resnet18-usc-unsigned/baseline/prune_rate=1.0/138/logs/test/test_acc_avg ▁▁▂▁▃▃▅▄▅▅▅▄▇▇▇▇▇▆▇█▇▇▇▇▇▇▇▇▇▇▇▇▇▇█▇██▇▇
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/138/logs/test/test_acc_d_avg ▁▁▂▁▃▃▅▄▅▅▅▄▇▇▇▇▇▆▇█▇▇▇▇▇▇▇▇▇▇▇▇▇▇█▇██▇▇
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/138/logs/test/test_acc_d_val ▁▁▂▁▃▃▅▄▅▅▅▄▇▇▇▇▇▆▇█▇▇▇▇▇▇▇▇▇▇▇▇▇▇█▇██▇▇
wandb:               resnet18-usc-unsigned/baseline/prune_rate=1.0/138/logs/test/test_acc_val ▁▁▂▁▃▃▅▄▅▅▅▄▇▇▇▇▇▆▇█▇▇▇▇▇▇▇▇▇▇▇▇▇▇█▇██▇▇
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/138/logs/test/test_corr_d_avg ██▇▇▆▆▅▅▅▅▅▅▂▁▁▁▂▃▂▁▂▂▃▂▂▂▃▂▂▃▃▂▂▂▂▂▂▂▃▂
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/138/logs/test/test_corr_d_val ██▇▇▆▆▅▅▅▅▅▅▂▁▁▁▂▃▂▁▂▂▃▂▂▂▃▂▂▃▃▂▂▂▂▂▂▂▃▂
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/138/logs/test/test_majacc_avg ██▇█▇▆▆▆▇▅▄▅▂▃▃▄▄▄▃▃▃▄▃▃▂▃▂▃▃▃▃▂▃▁▁▂▁▂▂▁
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/138/logs/test/test_majacc_d_avg ██▇█▇▆▆▆▇▅▄▅▂▃▃▄▄▄▃▃▃▄▃▃▂▃▂▃▃▃▃▂▃▁▁▂▁▂▂▁
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/138/logs/test/test_majacc_d_val ██▇█▇▆▆▆▇▅▄▅▂▃▃▄▄▄▃▃▃▄▃▃▂▃▂▃▃▃▃▂▃▁▁▂▁▂▂▁
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/138/logs/test/test_majacc_val ██▇█▇▆▆▆▇▅▄▅▂▃▃▄▄▄▃▃▃▄▃▃▂▃▂▃▃▃▃▂▃▁▁▂▁▂▂▁
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/138/logs/test/test_minacc_avg ▁▁▂▁▃▃▅▄▅▅▅▄▇▇▇▇▇▆▇█▇▇▇▇▇▇▇▇▇▇▇▇▇▇████▇█
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/138/logs/test/test_minacc_d_avg ▁▁▂▁▃▃▅▄▅▅▅▄▇▇▇▇▇▆▇█▇▇▇▇▇▇▇▇▇▇▇▇▇▇████▇█
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/138/logs/test/test_minacc_d_val ▁▁▂▁▃▃▅▄▅▅▅▄▇▇▇▇▇▆▇█▇▇▇▇▇▇▇▇▇▇▇▇▇▇████▇█
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/138/logs/test/test_minacc_val ▁▁▂▁▃▃▅▄▅▅▅▄▇▇▇▇▇▆▇█▇▇▇▇▇▇▇▇▇▇▇▇▇▇████▇█
wandb:                  resnet18-usc-unsigned/baseline/prune_rate=1.0/138/logs/train/Loss_avg █▇▆▆▆▅▅▅▅▅▄▄▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:                  resnet18-usc-unsigned/baseline/prune_rate=1.0/138/logs/train/Loss_val ██▇▇▆▆▅▅▄▄▄▃▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:                    resnet18-usc-unsigned/baseline/prune_rate=1.0/138/logs/train/l1_avg █▄▃▄▃▃▃▃▃▃▅▄▇▁▂▁▂▃▃▄▄▅▅▅▅▅▅▅▅▆▆▅▆▆▆▆▆▆▆▆
wandb:                    resnet18-usc-unsigned/baseline/prune_rate=1.0/138/logs/train/l1_val ▅▄▄▅▄▄▃▄▅▃▄▇▄▂▁▁▁▄▆▆▅▄▄▇▅▄▅█▆▅▇█▆▇█▆▇█▆█
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/138/logs/train/train_acc_avg ▁▃▃▃▄▄▅▅▆▆▇██▅▅▄▅▆▇▆▆▆▆▆▆▅▅▆▆▆▅▆▅▅▅▅▅▅▅▅
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/138/logs/train/train_acc_val ▁▁▁▁▄▅▅▃█▆▇▇▃▅▃▃▄▅▅▃▄▆▅▄▅▅▅▃▆▅▄▃▅▄▄▄▄▄▅▄
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/138/logs/train/train_corr_avg ▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/138/logs/train/train_corr_val ▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/138/logs/train/train_majacc_avg ▆██▇▇▆▆▆▆▆▆▆▆▁▂▁▂▃▄▂▃▃▃▃▃▂▂▂▂▂▂▂▂▂▂▂▁▁▂▁
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/138/logs/train/train_majacc_val ████▇▇▇▇█▆▇▇▂▃▂▂▂▃▃▁▂▃▃▃▃▃▃▂▃▃▂▁▃▂▂▂▂▂▃▂
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/138/logs/train/train_minacc_avg ▁▁▁▂▃▃▃▄▅▅▆▆▆█▇██▇▇█████████████████████
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/138/logs/train/train_minacc_val ▁▁▁▁▄▄▄▃▆▆▆▆▇█▇▇▇▇█████▇███▇████████████
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/138/logs/train/train_nll_avg █▆▅▅▄▄▃▃▂▂▂▁▁▃▃▃▃▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/138/logs/train/train_nll_val █▇▇▇▅▅▄▃▁▂▂▁▄▃▄▄▄▄▃▄▃▃▃▄▃▃▄▄▃▃▄▄▃▃▃▃▄▃▃▃
wandb:         resnet18-usc-unsigned/baseline/prune_rate=1.0/138/logs/train/train_penalty_avg █▃▃▃▂▂▂▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:         resnet18-usc-unsigned/baseline/prune_rate=1.0/138/logs/train/train_penalty_val █▇▄▅▃▂▂▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:           resnet18-usc-unsigned/baseline/prune_rate=1.0/138/logs/train/weight_norm_avg ▁▄▅▅▅▅▅▆▆▆▆▇████████████████████████████
wandb:           resnet18-usc-unsigned/baseline/prune_rate=1.0/138/logs/train/weight_norm_val ▁▃▃▃▃▄▄▄▅▅▆▆████████████████████████████
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/138/logs/train/zero_count_avg ▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/138/logs/train/zero_count_val ▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb: 
wandb: Run summary:
wandb:                                                                            global_step 49
wandb:      resnet18-usc-unsigned/baseline/prune_rate=1.0/138/logs/diagnostics/epoch_time_val 0.03992
wandb:      resnet18-usc-unsigned/baseline/prune_rate=1.0/138/logs/diagnostics/train_time_val 0.03928
wandb: resnet18-usc-unsigned/baseline/prune_rate=1.0/138/logs/diagnostics/validation_time_val 0.00062
wandb:                     resnet18-usc-unsigned/baseline/prune_rate=1.0/138/logs/global_step 49
wandb:                   resnet18-usc-unsigned/baseline/prune_rate=1.0/138/logs/test/Loss_avg 2.22366
wandb:                 resnet18-usc-unsigned/baseline/prune_rate=1.0/138/logs/test/Loss_d_avg 2.22366
wandb:                 resnet18-usc-unsigned/baseline/prune_rate=1.0/138/logs/test/Loss_d_val 2.22366
wandb:                   resnet18-usc-unsigned/baseline/prune_rate=1.0/138/logs/test/Loss_val 2.22366
wandb:               resnet18-usc-unsigned/baseline/prune_rate=1.0/138/logs/test/test_acc_avg 0.584
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/138/logs/test/test_acc_d_avg 0.584
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/138/logs/test/test_acc_d_val 0.584
wandb:               resnet18-usc-unsigned/baseline/prune_rate=1.0/138/logs/test/test_acc_val 0.584
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/138/logs/test/test_corr_d_avg 0.26018
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/138/logs/test/test_corr_d_val 0.26018
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/138/logs/test/test_majacc_avg 0.91
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/138/logs/test/test_majacc_d_avg 0.91
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/138/logs/test/test_majacc_d_val 0.91
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/138/logs/test/test_majacc_val 0.91
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/138/logs/test/test_minacc_avg 0.54778
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/138/logs/test/test_minacc_d_avg 0.54778
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/138/logs/test/test_minacc_d_val 0.54778
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/138/logs/test/test_minacc_val 0.54778
wandb:                  resnet18-usc-unsigned/baseline/prune_rate=1.0/138/logs/train/Loss_avg 0.00014
wandb:                  resnet18-usc-unsigned/baseline/prune_rate=1.0/138/logs/train/Loss_val 0.00039
wandb:                    resnet18-usc-unsigned/baseline/prune_rate=1.0/138/logs/train/l1_avg 7.63829
wandb:                    resnet18-usc-unsigned/baseline/prune_rate=1.0/138/logs/train/l1_val 7.87011
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/138/logs/train/train_acc_avg 0.8738
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/138/logs/train/train_acc_val 0.876
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/138/logs/train/train_corr_avg 0.0
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/138/logs/train/train_corr_val 0.0
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/138/logs/train/train_majacc_avg 0.86816
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/138/logs/train/train_majacc_val 0.86408
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/138/logs/train/train_minacc_avg 0.90643
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/138/logs/train/train_minacc_val 0.93182
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/138/logs/train/train_nll_avg 0.24369
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/138/logs/train/train_nll_val 0.24828
wandb:         resnet18-usc-unsigned/baseline/prune_rate=1.0/138/logs/train/train_penalty_avg 0.00012
wandb:         resnet18-usc-unsigned/baseline/prune_rate=1.0/138/logs/train/train_penalty_val 0.00037
wandb:           resnet18-usc-unsigned/baseline/prune_rate=1.0/138/logs/train/weight_norm_avg 25.14174
wandb:           resnet18-usc-unsigned/baseline/prune_rate=1.0/138/logs/train/weight_norm_val 25.14291
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/138/logs/train/zero_count_avg 0.0
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/138/logs/train/zero_count_val 0.0
wandb: 
wandb: 🚀 View run name_random at: https://wandb.ai/janezdu-uiuc/irm/runs/47lcsdky
wandb: ⭐️ View project at: https://wandb.ai/janezdu-uiuc/irm
wandb: Synced 5 W&B file(s), 0 media file(s), 2 artifact file(s) and 1 other file(s)
wandb: Find logs at: ./wandb/run-20240907_201142-47lcsdky/logs
wandb: WARNING The new W&B backend becomes opt-out in version 0.18.0; try it out with `wandb.require("core")`! See https://wandb.me/wandb-core for more information.
wandb: Currently logged in as: janezdu (janezdu-uiuc). Use `wandb login --relogin` to force relogin
wandb: wandb version 0.17.9 is available!  To upgrade, please run:
wandb:  $ pip install wandb --upgrade
wandb: Tracking run with wandb version 0.17.7
wandb: Run data is saved locally in /scratch/users/zd16/sparseIRM-resnet-ver/wandb/run-20240907_201429-gevyfr50
wandb: Run `wandb offline` to turn off syncing.
wandb: Syncing run name_random
wandb: ⭐️ View project at https://wandb.ai/janezdu-uiuc/irm
wandb: 🚀 View run at https://wandb.ai/janezdu-uiuc/irm/runs/gevyfr50
=> Reading YAML config from configs/smallscale/resnet18/resnet18-usc-unsigned.yaml
Namespace(data='dataset/', optimizer='adam', weight_opt='adam', set='mnistcifar', arch='ResNet18', config='configs/smallscale/resnet18/resnet18-usc-unsigned.yaml', log_dir=None, workers=4, epochs=50, start_epoch=None, batch_size=390, lr=0.006, warmup_length=0, momentum=0.9, weight_decay=0.0, print_freq=10, num_classes=1, resume='', resume_train_weights='', evaluate=False, pretrained=None, pretrained_distill=None, alpha_distill=0.95, T_distill=2, seed=0, multigpu=[0], lr_policy='cosine_lr', lr_adjust=30, lr_gamma=0.1, name='baseline', save_every=-1, prune_rate=1.0, param_prune_rate=0.0, pr_start=1.0, low_data=1, width_mult=1.0, nesterov=False, threetimes=False, random_subnet=False, one_batch=False, conv_type='DenseConv', freeze_weights=False, st=False, mode='fan_in', nonlinearity='relu', bn_type='LearnedBatchNorm', init='kaiming_normal', no_bn_decay=False, scale_fan=False, first_layer_dense=False, last_layer_dense=True, approx=False, zero=False, flip=False, bs=False, gumbel_sample=False, multiply_prob=False, no_multiply=False, multiply_cont=False, multiply_prob_bs=False, indiv=False, label_smoothing=None, first_layer_type=None, trainer='default', score_init_constant=1.0, K=1, update_freq=20, D=0.01, T=1, TA=True, TA2=False, TA_grow=False, center=False, straight_through=False, PLA_factor=0.1, PLA_patience=10, gradient_loss_para=0, abs_loss_para=0, thres=0.9, runs_name='name_random', resume_compare_loss1='', resume_compare_loss2='', init_weights='', trained_mask='', weight_rescaling=False, constrain_by_layer=False, weight_rescaling_data=False, use_running_stats=False, not_clipping=False, rescaling_para=False, lasso_para=0, dont_freeze_weights=False, iterative=True, prob_by_weight=False, rescale_at_fix_subnet=False, train_weights_at_the_same_time=False, sample_from_training_set=False, load_true_para=False, distill=False, finetune=False, stablize=False, prev_best=0, weight_opt_lr=0.0006, n=500, ts=0.28, te=0.6, d=20000, s=80, c=0.75, init_prob=False, thres_before=0.001, wide_ratio=0.001, noise=1, cal_p_q=False, just_finetune=False, snip=False, envs_num=2, l2_regularizer_weight=0.001, data_num=50000, env_type='linear', irm_type='irmv1', hidden_dim=390, penalty_anneal_iters=400, penalty_weight=10000.0, grayscale_model=0, weight_lr_schedule=False, fix_subnet=False, freeze_weight=False, step='ours', prior_sd_coef=0, dim_inv=2, variance_gamma=1.0, dim_spu=10, image_scale=32, cons_ratio='0.999_0.7_0.1', noise_ratio=0.2, step_gamma=0.1, step_round=3, inner_steps=1, use_pgd=False, z=15.0, pgd_anneal_iters=600, pgd_skip_steps=50, fraction_z=0.95)
=> Creating model 'ResNet18'
Here!!!!!!!!
==> Conv Type: DenseConv
==> BN Type: LearnedBatchNorm
<class 'torch.nn.modules.conv.Conv2d'>
<class 'torch.nn.modules.batchnorm.BatchNorm2d'>
==> Building first layer with <class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
ResNet(
  (conv1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
  (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (relu): ReLU(inplace=True)
  (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
  (layer1): Sequential(
    (0): BasicBlock(
      (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (1): BasicBlock(
      (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (layer2): Sequential(
    (0): BasicBlock(
      (conv1): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (downsample): Sequential(
        (0): Conv2d(64, 128, kernel_size=(1, 1), stride=(2, 2), bias=False)
        (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (1): BasicBlock(
      (conv1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (layer3): Sequential(
    (0): BasicBlock(
      (conv1): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (downsample): Sequential(
        (0): Conv2d(128, 256, kernel_size=(1, 1), stride=(2, 2), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (1): BasicBlock(
      (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (layer4): Sequential(
    (0): BasicBlock(
      (conv1): Conv2d(256, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (downsample): Sequential(
        (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (1): BasicBlock(
      (conv1): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (avgpool): AdaptiveAvgPool2d(output_size=1)
  (fc): Conv2d(512, 1, kernel_size=(1, 1), stride=(1, 1), bias=False)
)
=> Parallelizing on [0] gpus
<DEBUG> gradient to module.conv1.weight
<DEBUG> gradient to module.bn1.weight
<DEBUG> gradient to module.bn1.bias
<DEBUG> gradient to module.layer1.0.conv1.weight
<DEBUG> gradient to module.layer1.0.bn1.weight
<DEBUG> gradient to module.layer1.0.bn1.bias
<DEBUG> gradient to module.layer1.0.conv2.weight
<DEBUG> gradient to module.layer1.0.bn2.weight
<DEBUG> gradient to module.layer1.0.bn2.bias
<DEBUG> gradient to module.layer1.1.conv1.weight
<DEBUG> gradient to module.layer1.1.bn1.weight
<DEBUG> gradient to module.layer1.1.bn1.bias
<DEBUG> gradient to module.layer1.1.conv2.weight
<DEBUG> gradient to module.layer1.1.bn2.weight
<DEBUG> gradient to module.layer1.1.bn2.bias
<DEBUG> gradient to module.layer2.0.conv1.weight
<DEBUG> gradient to module.layer2.0.bn1.weight
<DEBUG> gradient to module.layer2.0.bn1.bias
<DEBUG> gradient to module.layer2.0.conv2.weight
<DEBUG> gradient to module.layer2.0.bn2.weight
<DEBUG> gradient to module.layer2.0.bn2.bias
<DEBUG> gradient to module.layer2.0.downsample.0.weight
<DEBUG> gradient to module.layer2.0.downsample.1.weight
<DEBUG> gradient to module.layer2.0.downsample.1.bias
<DEBUG> gradient to module.layer2.1.conv1.weight
<DEBUG> gradient to module.layer2.1.bn1.weight
<DEBUG> gradient to module.layer2.1.bn1.bias
<DEBUG> gradient to module.layer2.1.conv2.weight
<DEBUG> gradient to module.layer2.1.bn2.weight
<DEBUG> gradient to module.layer2.1.bn2.bias
<DEBUG> gradient to module.layer3.0.conv1.weight
<DEBUG> gradient to module.layer3.0.bn1.weight
<DEBUG> gradient to module.layer3.0.bn1.bias
<DEBUG> gradient to module.layer3.0.conv2.weight
<DEBUG> gradient to module.layer3.0.bn2.weight
<DEBUG> gradient to module.layer3.0.bn2.bias
<DEBUG> gradient to module.layer3.0.downsample.0.weight
<DEBUG> gradient to module.layer3.0.downsample.1.weight
<DEBUG> gradient to module.layer3.0.downsample.1.bias
<DEBUG> gradient to module.layer3.1.conv1.weight
<DEBUG> gradient to module.layer3.1.bn1.weight
<DEBUG> gradient to module.layer3.1.bn1.bias
<DEBUG> gradient to module.layer3.1.conv2.weight
<DEBUG> gradient to module.layer3.1.bn2.weight
<DEBUG> gradient to module.layer3.1.bn2.bias
<DEBUG> gradient to module.layer4.0.conv1.weight
<DEBUG> gradient to module.layer4.0.bn1.weight
<DEBUG> gradient to module.layer4.0.bn1.bias
<DEBUG> gradient to module.layer4.0.conv2.weight
<DEBUG> gradient to module.layer4.0.bn2.weight
<DEBUG> gradient to module.layer4.0.bn2.bias
<DEBUG> gradient to module.layer4.0.downsample.0.weight
<DEBUG> gradient to module.layer4.0.downsample.1.weight
<DEBUG> gradient to module.layer4.0.downsample.1.bias
<DEBUG> gradient to module.layer4.1.conv1.weight
<DEBUG> gradient to module.layer4.1.bn1.weight
<DEBUG> gradient to module.layer4.1.bn1.bias
<DEBUG> gradient to module.layer4.1.conv2.weight
<DEBUG> gradient to module.layer4.1.bn2.weight
<DEBUG> gradient to module.layer4.1.bn2.bias
<DEBUG> gradient to module.fc.weight
Files already downloaded and verified
Files already downloaded and verified
Adding Noise to Label, len(Y)=12000, Label_noise=1208
Xmp (7877, 3, 32, 32) (6903, 3, 32, 32)
Xcp (5964, 3, 32, 32) (6036, 3, 32, 32)
env=0 2497 2497 3 3
xn 2500 xp 2500
env=1 1750 1750 750 750
xn 2500 xp 2500
env=2 50 50 450 450
xn 500 xp 500
=> Creating model 'EBD'
EBD(
  (embedings): Embedding(2, 1)
)
=> Parallelizing on [0] gpus
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:03<01:18,  3.14s/it] 19%|#9        | 5/26 [00:03<00:10,  2.04it/s] 35%|###4      | 9/26 [00:03<00:04,  4.21it/s] 50%|#####     | 13/26 [00:03<00:01,  6.83it/s] 65%|######5   | 17/26 [00:03<00:00,  9.80it/s] 81%|########  | 21/26 [00:03<00:00, 13.10it/s] 96%|#########6| 25/26 [00:03<00:00, 16.54it/s]100%|##########| 26/26 [00:04<00:00,  6.14it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 0 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 2 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 3 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 4 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 5 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 6 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 7 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 8 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 9 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 10 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 11 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 12 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 13 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 14 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 15 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 16 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 17 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 18 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 19 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 20 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 21 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 22 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 23 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 24 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 25 400
penalty weights 0.0
Epoch: [0][  26/  26]	Loss 0.416 (0.581)	train_nll   0.42 (  0.58)	train_penalty   0.07 (  0.40)	weight_norm  20.84 ( 18.09)	train_acc   0.85 (  0.81)	train_minacc   0.00 (  0.07)	train_majacc   1.00 (  0.94)	train_corr   0.00 (  0.00)	l1 6.5660 (7.7491)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:00, 26.35it/s] 31%|###       | 8/26 [00:00<00:00, 38.26it/s]                                               31%|###       | 8/26 [00:00<00:00, 38.26it/s] 50%|#####     | 13/26 [00:00<00:00, 42.88it/s] 69%|######9   | 18/26 [00:00<00:00, 43.03it/s]                                                69%|######9   | 18/26 [00:00<00:00, 43.03it/s] 92%|#########2| 24/26 [00:00<00:00, 48.00it/s]100%|##########| 26/26 [00:00<00:00, 41.29it/s]
Test: [   0/  26]	Loss 0.448 (0.448)	test_acc   0.84 (  0.84)	test_minacc   0.02 (  0.02)	test_majacc   1.00 (  1.00)	Loss_d 0.448 (0.448)	test_acc_d   0.84 (  0.84)	test_minacc_d   0.02 (  0.02)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.98 (  0.98)
Test: [  10/  26]	Loss 0.372 (0.419)	test_acc   0.86 (  0.84)	test_minacc   0.00 (  0.03)	test_majacc   0.99 (  0.99)	Loss_d 0.372 (0.419)	test_acc_d   0.86 (  0.84)	test_minacc_d   0.00 (  0.03)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.98 (  0.97)
Test: [  20/  26]	Loss 0.368 (0.409)	test_acc   0.86 (  0.85)	test_minacc   0.00 (  0.02)	test_majacc   1.00 (  0.99)	Loss_d 0.368 (0.409)	test_acc_d   0.86 (  0.85)	test_minacc_d   0.00 (  0.02)	test_majacc_d   1.00 (  0.99)	test_corr_d   0.99 (  0.98)
Test: [  26/  26]	Loss 0.420 (0.408)	test_acc   0.85 (  0.85)	test_minacc   0.00 (  0.02)	test_majacc   1.00 (  0.99)	Loss_d 0.420 (0.408)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.00 (  0.02)	test_majacc_d   1.00 (  0.99)	test_corr_d   0.99 (  0.98)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00,  2.51it/s]100%|##########| 1/1 [00:00<00:00,  2.50it/s]
Test: [  0/  1]	Loss 1.839 (1.839)	test_acc   0.12 (  0.12)	test_minacc   0.02 (  0.02)	test_majacc   1.00 (  1.00)	Loss_d 1.839 (1.839)	test_acc_d   0.12 (  0.12)	test_minacc_d   0.02 (  0.02)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.96 (  0.96)
Test: [  1/  1]	Loss 1.839 (1.839)	test_acc   0.12 (  0.12)	test_minacc   0.02 (  0.02)	test_majacc   1.00 (  1.00)	Loss_d 1.839 (1.839)	test_acc_d   0.12 (  0.12)	test_minacc_d   0.02 (  0.02)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.96 (  0.96)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/140/checkpoints/model_best.pth
Overall Timing[  0/  1]	epoch_time 0.1052 (0.1052)	validation_time 0.0068 (0.0068)	train_time 0.0952 (0.0952)
record: (train_acc, test_acc) (0.8482000333070755, 0.11500000208616257)
last accs (train_acc, test_acc) (0.8482000333070755, 0.11500000208616257)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.07it/s] 15%|#5        | 4/26 [00:00<00:01, 16.89it/s] 35%|###4      | 9/26 [00:00<00:00, 27.90it/s] 54%|#####3    | 14/26 [00:00<00:00, 33.66it/s] 73%|#######3  | 19/26 [00:00<00:00, 36.46it/s] 92%|#########2| 24/26 [00:00<00:00, 38.14it/s]100%|##########| 26/26 [00:00<00:00, 30.69it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 26 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 27 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 28 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 29 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 30 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 31 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 32 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 33 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 34 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 35 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 36 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 37 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 38 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 39 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 40 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 41 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 42 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 43 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 44 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 45 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 46 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 47 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 48 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 49 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 50 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 51 400
penalty weights 0.0
Epoch: [1][  26/  26]	Loss 0.382 (0.404)	train_nll   0.38 (  0.40)	train_penalty   0.05 (  0.06)	weight_norm  21.96 ( 21.61)	train_acc   0.85 (  0.85)	train_minacc   0.03 (  0.04)	train_majacc   1.00 (  0.99)	train_corr   0.00 (  0.00)	l1 6.4115 (6.5230)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.77it/s] 23%|##3       | 6/26 [00:00<00:00, 27.46it/s]                                               23%|##3       | 6/26 [00:00<00:00, 27.46it/s] 42%|####2     | 11/26 [00:00<00:00, 35.77it/s] 62%|######1   | 16/26 [00:00<00:00, 39.66it/s]                                                62%|######1   | 16/26 [00:00<00:00, 39.66it/s] 81%|########  | 21/26 [00:00<00:00, 38.94it/s]100%|##########| 26/26 [00:00<00:00, 41.99it/s]100%|##########| 26/26 [00:00<00:00, 34.54it/s]
Test: [   0/  26]	Loss 0.429 (0.429)	test_acc   0.83 (  0.83)	test_minacc   0.05 (  0.05)	test_majacc   0.98 (  0.98)	Loss_d 0.429 (0.429)	test_acc_d   0.83 (  0.83)	test_minacc_d   0.05 (  0.05)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.95 (  0.95)
Test: [  10/  26]	Loss 0.345 (0.394)	test_acc   0.86 (  0.84)	test_minacc   0.02 (  0.07)	test_majacc   0.98 (  0.98)	Loss_d 0.345 (0.394)	test_acc_d   0.86 (  0.84)	test_minacc_d   0.02 (  0.07)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.95 (  0.95)
Test: [  20/  26]	Loss 0.340 (0.383)	test_acc   0.87 (  0.85)	test_minacc   0.04 (  0.07)	test_majacc   0.99 (  0.99)	Loss_d 0.340 (0.383)	test_acc_d   0.87 (  0.85)	test_minacc_d   0.04 (  0.07)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.96 (  0.95)
Test: [  26/  26]	Loss 0.382 (0.381)	test_acc   0.86 (  0.85)	test_minacc   0.05 (  0.07)	test_majacc   1.00 (  0.99)	Loss_d 0.382 (0.381)	test_acc_d   0.86 (  0.85)	test_minacc_d   0.05 (  0.07)	test_majacc_d   1.00 (  0.99)	test_corr_d   0.96 (  0.95)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.12it/s]
Test: [  0/  1]	Loss 1.737 (1.737)	test_acc   0.14 (  0.14)	test_minacc   0.05 (  0.05)	test_majacc   0.99 (  0.99)	Loss_d 1.737 (1.737)	test_acc_d   0.14 (  0.14)	test_minacc_d   0.05 (  0.05)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.91 (  0.91)
Test: [  1/  1]	Loss 1.737 (1.737)	test_acc   0.14 (  0.14)	test_minacc   0.05 (  0.05)	test_majacc   0.99 (  0.99)	Loss_d 1.737 (1.737)	test_acc_d   0.14 (  0.14)	test_minacc_d   0.05 (  0.05)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.91 (  0.91)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/140/checkpoints/model_best.pth
Overall Timing[  1/  1]	epoch_time 0.0386 (0.0719)	validation_time 0.0004 (0.0036)	train_time 0.0381 (0.0667)
record: (train_acc, test_acc) (0.8488000220656395, 0.14000000059604645)
last accs (train_acc, test_acc) (0.8488000220656395, 0.14000000059604645)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.54it/s] 19%|#9        | 5/26 [00:00<00:01, 20.73it/s] 35%|###4      | 9/26 [00:00<00:00, 27.73it/s] 50%|#####     | 13/26 [00:00<00:00, 31.92it/s] 69%|######9   | 18/26 [00:00<00:00, 35.92it/s] 88%|########8 | 23/26 [00:00<00:00, 38.44it/s]100%|##########| 26/26 [00:00<00:00, 29.68it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 52 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 53 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 54 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 55 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 56 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 57 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 58 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 59 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 60 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 61 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 62 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 63 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 64 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 65 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 66 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 67 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 68 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 69 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 70 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 71 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 72 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 73 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 74 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 75 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 76 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 77 400
penalty weights 0.0
Epoch: [2][  26/  26]	Loss 0.371 (0.380)	train_nll   0.37 (  0.38)	train_penalty   0.05 (  0.04)	weight_norm  22.10 ( 22.05)	train_acc   0.86 (  0.85)	train_minacc   0.11 (  0.09)	train_majacc   1.00 (  0.98)	train_corr   0.00 (  0.00)	l1 6.3924 (6.4001)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 17.78it/s] 27%|##6       | 7/26 [00:00<00:00, 35.04it/s]                                               27%|##6       | 7/26 [00:00<00:00, 35.04it/s] 46%|####6     | 12/26 [00:00<00:00, 41.51it/s] 65%|######5   | 17/26 [00:00<00:00, 38.54it/s]                                                65%|######5   | 17/26 [00:00<00:00, 38.54it/s] 85%|########4 | 22/26 [00:00<00:00, 41.44it/s]100%|##########| 26/26 [00:00<00:00, 36.70it/s]
Test: [   0/  26]	Loss 0.418 (0.418)	test_acc   0.84 (  0.84)	test_minacc   0.14 (  0.14)	test_majacc   0.97 (  0.97)	Loss_d 0.418 (0.418)	test_acc_d   0.84 (  0.84)	test_minacc_d   0.14 (  0.14)	test_majacc_d   0.97 (  0.97)	test_corr_d   0.92 (  0.92)
Test: [  10/  26]	Loss 0.331 (0.380)	test_acc   0.85 (  0.85)	test_minacc   0.10 (  0.16)	test_majacc   0.96 (  0.97)	Loss_d 0.331 (0.380)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.10 (  0.16)	test_majacc_d   0.96 (  0.97)	test_corr_d   0.93 (  0.92)
Test: [  20/  26]	Loss 0.317 (0.368)	test_acc   0.87 (  0.85)	test_minacc   0.15 (  0.16)	test_majacc   0.98 (  0.97)	Loss_d 0.317 (0.368)	test_acc_d   0.87 (  0.85)	test_minacc_d   0.15 (  0.16)	test_majacc_d   0.98 (  0.97)	test_corr_d   0.92 (  0.92)
Test: [  26/  26]	Loss 0.366 (0.366)	test_acc   0.86 (  0.85)	test_minacc   0.11 (  0.16)	test_majacc   1.00 (  0.97)	Loss_d 0.366 (0.366)	test_acc_d   0.86 (  0.85)	test_minacc_d   0.11 (  0.16)	test_majacc_d   1.00 (  0.97)	test_corr_d   0.95 (  0.92)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.33it/s]
Test: [  0/  1]	Loss 1.717 (1.717)	test_acc   0.20 (  0.20)	test_minacc   0.11 (  0.11)	test_majacc   0.97 (  0.97)	Loss_d 1.717 (1.717)	test_acc_d   0.20 (  0.20)	test_minacc_d   0.11 (  0.11)	test_majacc_d   0.97 (  0.97)	test_corr_d   0.84 (  0.84)
Test: [  1/  1]	Loss 1.717 (1.717)	test_acc   0.20 (  0.20)	test_minacc   0.11 (  0.11)	test_majacc   0.97 (  0.97)	Loss_d 1.717 (1.717)	test_acc_d   0.20 (  0.20)	test_minacc_d   0.11 (  0.11)	test_majacc_d   0.97 (  0.97)	test_corr_d   0.84 (  0.84)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/140/checkpoints/model_best.pth
Overall Timing[  2/  1]	epoch_time 0.0401 (0.0613)	validation_time 0.0004 (0.0026)	train_time 0.0397 (0.0577)
record: (train_acc, test_acc) (0.8521000242829323, 0.19700001180171967)
last accs (train_acc, test_acc) (0.8521000242829323, 0.19700001180171967)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 18.36it/s] 23%|##3       | 6/26 [00:00<00:00, 26.80it/s] 38%|###8      | 10/26 [00:00<00:00, 30.28it/s] 54%|#####3    | 14/26 [00:00<00:00, 32.53it/s] 69%|######9   | 18/26 [00:00<00:00, 33.16it/s] 85%|########4 | 22/26 [00:00<00:00, 34.10it/s]100%|##########| 26/26 [00:00<00:00, 34.56it/s]100%|##########| 26/26 [00:00<00:00, 30.60it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 78 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 79 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 80 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 81 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 82 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 83 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 84 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 85 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 86 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 87 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 88 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 89 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 90 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 91 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 92 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 93 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 94 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 95 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 96 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 97 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 98 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 99 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 100 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 101 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 102 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 103 400
penalty weights 0.0
Epoch: [3][  26/  26]	Loss 0.329 (0.359)	train_nll   0.33 (  0.36)	train_penalty   0.04 (  0.03)	weight_norm  22.16 ( 22.13)	train_acc   0.87 (  0.85)	train_minacc   0.26 (  0.16)	train_majacc   0.98 (  0.98)	train_corr   0.00 (  0.00)	l1 6.3255 (6.3035)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.50it/s] 27%|##6       | 7/26 [00:00<00:00, 36.19it/s]                                               27%|##6       | 7/26 [00:00<00:00, 36.19it/s] 42%|####2     | 11/26 [00:00<00:00, 34.47it/s] 69%|######9   | 18/26 [00:00<00:00, 45.84it/s]                                                69%|######9   | 18/26 [00:00<00:00, 45.84it/s] 88%|########8 | 23/26 [00:00<00:00, 41.63it/s]100%|##########| 26/26 [00:00<00:00, 37.84it/s]
Test: [   0/  26]	Loss 0.389 (0.389)	test_acc   0.84 (  0.84)	test_minacc   0.22 (  0.22)	test_majacc   0.96 (  0.96)	Loss_d 0.389 (0.389)	test_acc_d   0.84 (  0.84)	test_minacc_d   0.22 (  0.22)	test_majacc_d   0.96 (  0.96)	test_corr_d   0.88 (  0.88)
Test: [  10/  26]	Loss 0.307 (0.356)	test_acc   0.85 (  0.85)	test_minacc   0.24 (  0.25)	test_majacc   0.94 (  0.96)	Loss_d 0.307 (0.356)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.24 (  0.25)	test_majacc_d   0.94 (  0.96)	test_corr_d   0.89 (  0.88)
Test: [  20/  26]	Loss 0.290 (0.343)	test_acc   0.88 (  0.85)	test_minacc   0.31 (  0.25)	test_majacc   0.97 (  0.96)	Loss_d 0.290 (0.343)	test_acc_d   0.88 (  0.85)	test_minacc_d   0.31 (  0.25)	test_majacc_d   0.97 (  0.96)	test_corr_d   0.89 (  0.88)
Test: [  26/  26]	Loss 0.316 (0.340)	test_acc   0.86 (  0.85)	test_minacc   0.21 (  0.25)	test_majacc   0.98 (  0.96)	Loss_d 0.316 (0.340)	test_acc_d   0.86 (  0.85)	test_minacc_d   0.21 (  0.25)	test_majacc_d   0.98 (  0.96)	test_corr_d   0.92 (  0.88)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.56it/s]
Test: [  0/  1]	Loss 1.642 (1.642)	test_acc   0.27 (  0.27)	test_minacc   0.19 (  0.19)	test_majacc   0.97 (  0.97)	Loss_d 1.642 (1.642)	test_acc_d   0.27 (  0.27)	test_minacc_d   0.19 (  0.19)	test_majacc_d   0.97 (  0.97)	test_corr_d   0.73 (  0.73)
Test: [  1/  1]	Loss 1.642 (1.642)	test_acc   0.27 (  0.27)	test_minacc   0.19 (  0.19)	test_majacc   0.97 (  0.97)	Loss_d 1.642 (1.642)	test_acc_d   0.27 (  0.27)	test_minacc_d   0.19 (  0.19)	test_majacc_d   0.97 (  0.97)	test_corr_d   0.73 (  0.73)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/140/checkpoints/model_best.pth
Overall Timing[  3/  1]	epoch_time 0.0384 (0.0556)	validation_time 0.0003 (0.0020)	train_time 0.0381 (0.0528)
record: (train_acc, test_acc) (0.851100024342537, 0.26600000262260437)
last accs (train_acc, test_acc) (0.851100024342537, 0.26600000262260437)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.10it/s] 19%|#9        | 5/26 [00:00<00:00, 22.17it/s] 35%|###4      | 9/26 [00:00<00:00, 27.75it/s] 50%|#####     | 13/26 [00:00<00:00, 30.68it/s] 65%|######5   | 17/26 [00:00<00:00, 31.97it/s] 81%|########  | 21/26 [00:00<00:00, 33.38it/s] 96%|#########6| 25/26 [00:00<00:00, 34.74it/s]100%|##########| 26/26 [00:00<00:00, 29.11it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 104 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 105 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 106 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 107 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 108 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 109 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 110 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 111 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 112 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 113 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 114 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 115 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 116 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 117 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 118 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 119 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 120 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 121 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 122 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 123 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 124 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 125 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 126 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 127 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 128 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 129 400
penalty weights 0.0
Epoch: [4][  26/  26]	Loss 0.323 (0.339)	train_nll   0.32 (  0.34)	train_penalty   0.04 (  0.03)	weight_norm  22.24 ( 22.20)	train_acc   0.87 (  0.86)	train_minacc   0.18 (  0.23)	train_majacc   0.99 (  0.97)	train_corr   0.00 (  0.00)	l1 6.2523 (6.2033)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.40it/s] 12%|#1        | 3/26 [00:00<00:01, 13.83it/s] 31%|###       | 8/26 [00:00<00:00, 28.82it/s]                                               31%|###       | 8/26 [00:00<00:00, 28.82it/s] 50%|#####     | 13/26 [00:00<00:00, 36.22it/s] 65%|######5   | 17/26 [00:00<00:00, 37.40it/s]                                                65%|######5   | 17/26 [00:00<00:00, 37.40it/s] 85%|########4 | 22/26 [00:00<00:00, 40.99it/s]100%|##########| 26/26 [00:00<00:00, 33.62it/s]
Test: [   0/  26]	Loss 0.354 (0.354)	test_acc   0.86 (  0.86)	test_minacc   0.24 (  0.24)	test_majacc   0.98 (  0.98)	Loss_d 0.354 (0.354)	test_acc_d   0.86 (  0.86)	test_minacc_d   0.24 (  0.24)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.92 (  0.92)
Test: [  10/  26]	Loss 0.270 (0.327)	test_acc   0.88 (  0.86)	test_minacc   0.22 (  0.23)	test_majacc   0.98 (  0.98)	Loss_d 0.270 (0.327)	test_acc_d   0.88 (  0.86)	test_minacc_d   0.22 (  0.23)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.92 (  0.91)
Test: [  20/  26]	Loss 0.269 (0.312)	test_acc   0.90 (  0.87)	test_minacc   0.37 (  0.24)	test_majacc   0.98 (  0.98)	Loss_d 0.269 (0.312)	test_acc_d   0.90 (  0.87)	test_minacc_d   0.37 (  0.24)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.92 (  0.91)
Test: [  26/  26]	Loss 0.289 (0.309)	test_acc   0.88 (  0.87)	test_minacc   0.24 (  0.25)	test_majacc   0.99 (  0.98)	Loss_d 0.289 (0.309)	test_acc_d   0.88 (  0.87)	test_minacc_d   0.24 (  0.25)	test_majacc_d   0.99 (  0.98)	test_corr_d   0.93 (  0.91)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 60.82it/s]
Test: [  0/  1]	Loss 1.755 (1.755)	test_acc   0.25 (  0.25)	test_minacc   0.16 (  0.16)	test_majacc   0.99 (  0.99)	Loss_d 1.755 (1.755)	test_acc_d   0.25 (  0.25)	test_minacc_d   0.16 (  0.16)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.78 (  0.78)
Test: [  1/  1]	Loss 1.755 (1.755)	test_acc   0.25 (  0.25)	test_minacc   0.16 (  0.16)	test_majacc   0.99 (  0.99)	Loss_d 1.755 (1.755)	test_acc_d   0.25 (  0.25)	test_minacc_d   0.16 (  0.16)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.78 (  0.78)
Overall Timing[  4/  1]	epoch_time 0.0442 (0.0533)	validation_time 0.0005 (0.0017)	train_time 0.0437 (0.0510)
record: (train_acc, test_acc) (0.851100024342537, 0.26600000262260437)
last accs (train_acc, test_acc) (0.8680000262856483, 0.24500000476837158)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:03,  7.56it/s] 23%|##3       | 6/26 [00:00<00:01, 17.51it/s] 38%|###8      | 10/26 [00:00<00:00, 23.29it/s] 54%|#####3    | 14/26 [00:00<00:00, 26.85it/s] 69%|######9   | 18/26 [00:00<00:00, 29.20it/s] 85%|########4 | 22/26 [00:00<00:00, 31.45it/s]100%|##########| 26/26 [00:00<00:00, 26.07it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 130 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 131 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 132 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 133 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 134 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 135 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 136 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 137 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 138 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 139 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 140 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 141 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 142 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 143 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 144 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 145 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 146 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 147 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 148 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 149 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 150 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 151 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 152 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 153 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 154 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 155 400
penalty weights 0.0
Epoch: [5][  26/  26]	Loss 0.284 (0.320)	train_nll   0.28 (  0.32)	train_penalty   0.02 (  0.02)	weight_norm  22.34 ( 22.29)	train_acc   0.87 (  0.87)	train_minacc   0.21 (  0.30)	train_majacc   0.99 (  0.97)	train_corr   0.00 (  0.00)	l1 6.4395 (6.3069)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:05,  4.83it/s] 23%|##3       | 6/26 [00:00<00:00, 22.90it/s]                                               23%|##3       | 6/26 [00:00<00:00, 22.90it/s] 42%|####2     | 11/26 [00:00<00:00, 30.64it/s] 65%|######5   | 17/26 [00:00<00:00, 36.06it/s]                                                65%|######5   | 17/26 [00:00<00:00, 36.06it/s] 85%|########4 | 22/26 [00:00<00:00, 39.66it/s]100%|##########| 26/26 [00:00<00:00, 32.16it/s]
Test: [   0/  26]	Loss 0.326 (0.326)	test_acc   0.87 (  0.87)	test_minacc   0.33 (  0.33)	test_majacc   0.98 (  0.98)	Loss_d 0.326 (0.326)	test_acc_d   0.87 (  0.87)	test_minacc_d   0.33 (  0.33)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.89 (  0.89)
Test: [  10/  26]	Loss 0.264 (0.314)	test_acc   0.89 (  0.87)	test_minacc   0.36 (  0.34)	test_majacc   0.96 (  0.96)	Loss_d 0.264 (0.314)	test_acc_d   0.89 (  0.87)	test_minacc_d   0.36 (  0.34)	test_majacc_d   0.96 (  0.96)	test_corr_d   0.88 (  0.88)
Test: [  20/  26]	Loss 0.277 (0.301)	test_acc   0.89 (  0.87)	test_minacc   0.40 (  0.35)	test_majacc   0.97 (  0.96)	Loss_d 0.277 (0.301)	test_acc_d   0.89 (  0.87)	test_minacc_d   0.40 (  0.35)	test_majacc_d   0.97 (  0.96)	test_corr_d   0.88 (  0.88)
Test: [  26/  26]	Loss 0.252 (0.298)	test_acc   0.88 (  0.87)	test_minacc   0.34 (  0.36)	test_majacc   0.98 (  0.96)	Loss_d 0.252 (0.298)	test_acc_d   0.88 (  0.87)	test_minacc_d   0.34 (  0.36)	test_majacc_d   0.98 (  0.96)	test_corr_d   0.90 (  0.88)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.24it/s]
Test: [  0/  1]	Loss 1.699 (1.699)	test_acc   0.33 (  0.33)	test_minacc   0.26 (  0.26)	test_majacc   0.98 (  0.98)	Loss_d 1.699 (1.699)	test_acc_d   0.33 (  0.33)	test_minacc_d   0.26 (  0.26)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.65 (  0.65)
Test: [  1/  1]	Loss 1.699 (1.699)	test_acc   0.33 (  0.33)	test_minacc   0.26 (  0.26)	test_majacc   0.98 (  0.98)	Loss_d 1.699 (1.699)	test_acc_d   0.33 (  0.33)	test_minacc_d   0.26 (  0.26)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.65 (  0.65)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/140/checkpoints/model_best.pth
Overall Timing[  5/  1]	epoch_time 0.0397 (0.0510)	validation_time 0.0003 (0.0015)	train_time 0.0394 (0.0490)
record: (train_acc, test_acc) (0.8735000252127647, 0.3290000259876251)
last accs (train_acc, test_acc) (0.8735000252127647, 0.3290000259876251)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:08,  2.90it/s] 19%|#9        | 5/26 [00:00<00:01, 13.11it/s] 35%|###4      | 9/26 [00:00<00:00, 20.26it/s] 50%|#####     | 13/26 [00:00<00:00, 24.79it/s] 65%|######5   | 17/26 [00:00<00:00, 27.70it/s] 81%|########  | 21/26 [00:00<00:00, 29.98it/s] 96%|#########6| 25/26 [00:01<00:00, 31.69it/s]100%|##########| 26/26 [00:01<00:00, 23.58it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 156 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 157 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 158 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 159 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 160 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 161 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 162 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 163 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 164 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 165 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 166 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 167 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 168 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 169 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 170 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 171 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 172 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 173 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 174 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 175 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 176 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 177 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 178 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 179 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 180 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 181 400
penalty weights 0.0
Epoch: [6][  26/  26]	Loss 0.250 (0.305)	train_nll   0.25 (  0.30)	train_penalty   0.01 (  0.02)	weight_norm  22.47 ( 22.40)	train_acc   0.88 (  0.87)	train_minacc   0.34 (  0.35)	train_majacc   0.98 (  0.96)	train_corr   0.00 (  0.00)	l1 6.6737 (6.3927)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.76it/s] 23%|##3       | 6/26 [00:00<00:00, 23.74it/s]                                               23%|##3       | 6/26 [00:00<00:00, 23.74it/s] 46%|####6     | 12/26 [00:00<00:00, 36.34it/s] 65%|######5   | 17/26 [00:00<00:00, 36.54it/s]                                                65%|######5   | 17/26 [00:00<00:00, 36.54it/s] 85%|########4 | 22/26 [00:00<00:00, 39.93it/s]100%|##########| 26/26 [00:00<00:00, 33.10it/s]
Test: [   0/  26]	Loss 0.305 (0.305)	test_acc   0.86 (  0.86)	test_minacc   0.27 (  0.27)	test_majacc   0.97 (  0.97)	Loss_d 0.305 (0.305)	test_acc_d   0.86 (  0.86)	test_minacc_d   0.27 (  0.27)	test_majacc_d   0.97 (  0.97)	test_corr_d   0.89 (  0.89)
Test: [  10/  26]	Loss 0.254 (0.300)	test_acc   0.89 (  0.87)	test_minacc   0.36 (  0.33)	test_majacc   0.97 (  0.97)	Loss_d 0.254 (0.300)	test_acc_d   0.89 (  0.87)	test_minacc_d   0.36 (  0.33)	test_majacc_d   0.97 (  0.97)	test_corr_d   0.88 (  0.88)
Test: [  20/  26]	Loss 0.243 (0.285)	test_acc   0.91 (  0.88)	test_minacc   0.46 (  0.36)	test_majacc   0.98 (  0.97)	Loss_d 0.243 (0.285)	test_acc_d   0.91 (  0.88)	test_minacc_d   0.46 (  0.36)	test_majacc_d   0.98 (  0.97)	test_corr_d   0.89 (  0.88)
Test: [  26/  26]	Loss 0.217 (0.280)	test_acc   0.89 (  0.88)	test_minacc   0.37 (  0.37)	test_majacc   0.98 (  0.97)	Loss_d 0.217 (0.280)	test_acc_d   0.89 (  0.88)	test_minacc_d   0.37 (  0.37)	test_majacc_d   0.98 (  0.97)	test_corr_d   0.89 (  0.88)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.61it/s]
Test: [  0/  1]	Loss 1.931 (1.931)	test_acc   0.28 (  0.28)	test_minacc   0.20 (  0.20)	test_majacc   0.99 (  0.99)	Loss_d 1.931 (1.931)	test_acc_d   0.28 (  0.28)	test_minacc_d   0.20 (  0.20)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.72 (  0.72)
Test: [  1/  1]	Loss 1.931 (1.931)	test_acc   0.28 (  0.28)	test_minacc   0.20 (  0.20)	test_majacc   0.99 (  0.99)	Loss_d 1.931 (1.931)	test_acc_d   0.28 (  0.28)	test_minacc_d   0.20 (  0.20)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.72 (  0.72)
Overall Timing[  6/  1]	epoch_time 0.0410 (0.0496)	validation_time 0.0003 (0.0013)	train_time 0.0406 (0.0478)
record: (train_acc, test_acc) (0.8735000252127647, 0.3290000259876251)
last accs (train_acc, test_acc) (0.8791000239253044, 0.2750000059604645)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.05it/s] 19%|#9        | 5/26 [00:00<00:00, 25.03it/s] 38%|###8      | 10/26 [00:00<00:00, 32.83it/s] 54%|#####3    | 14/26 [00:00<00:00, 34.14it/s] 69%|######9   | 18/26 [00:00<00:00, 35.39it/s] 85%|########4 | 22/26 [00:00<00:00, 35.91it/s]100%|##########| 26/26 [00:00<00:00, 36.35it/s]100%|##########| 26/26 [00:00<00:00, 31.57it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 182 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 183 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 184 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 185 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 186 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 187 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 188 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 189 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 190 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 191 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 192 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 193 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 194 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 195 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 196 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 197 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 198 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 199 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 200 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 201 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 202 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 203 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 204 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 205 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 206 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 207 400
penalty weights 0.0
Epoch: [7][  26/  26]	Loss 0.213 (0.282)	train_nll   0.21 (  0.28)	train_penalty   0.01 (  0.01)	weight_norm  22.63 ( 22.54)	train_acc   0.89 (  0.88)	train_minacc   0.39 (  0.46)	train_majacc   0.98 (  0.95)	train_corr   0.00 (  0.00)	l1 6.7089 (6.5364)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.14it/s] 27%|##6       | 7/26 [00:00<00:00, 32.56it/s]                                               27%|##6       | 7/26 [00:00<00:00, 32.56it/s] 46%|####6     | 12/26 [00:00<00:00, 39.48it/s] 65%|######5   | 17/26 [00:00<00:00, 39.94it/s]                                                65%|######5   | 17/26 [00:00<00:00, 39.94it/s] 85%|########4 | 22/26 [00:00<00:00, 41.49it/s]100%|##########| 26/26 [00:00<00:00, 35.67it/s]
Test: [   0/  26]	Loss 0.298 (0.298)	test_acc   0.87 (  0.87)	test_minacc   0.27 (  0.27)	test_majacc   0.98 (  0.98)	Loss_d 0.298 (0.298)	test_acc_d   0.87 (  0.87)	test_minacc_d   0.27 (  0.27)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.91 (  0.91)
Test: [  10/  26]	Loss 0.258 (0.302)	test_acc   0.89 (  0.87)	test_minacc   0.36 (  0.32)	test_majacc   0.96 (  0.97)	Loss_d 0.258 (0.302)	test_acc_d   0.89 (  0.87)	test_minacc_d   0.36 (  0.32)	test_majacc_d   0.96 (  0.97)	test_corr_d   0.89 (  0.89)
Test: [  20/  26]	Loss 0.227 (0.283)	test_acc   0.91 (  0.88)	test_minacc   0.44 (  0.35)	test_majacc   0.98 (  0.97)	Loss_d 0.227 (0.283)	test_acc_d   0.91 (  0.88)	test_minacc_d   0.44 (  0.35)	test_majacc_d   0.98 (  0.97)	test_corr_d   0.88 (  0.89)
Test: [  26/  26]	Loss 0.197 (0.276)	test_acc   0.91 (  0.88)	test_minacc   0.42 (  0.36)	test_majacc   1.00 (  0.97)	Loss_d 0.197 (0.276)	test_acc_d   0.91 (  0.88)	test_minacc_d   0.42 (  0.36)	test_majacc_d   1.00 (  0.97)	test_corr_d   0.89 (  0.89)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.87it/s]
Test: [  0/  1]	Loss 2.057 (2.057)	test_acc   0.26 (  0.26)	test_minacc   0.17 (  0.17)	test_majacc   0.99 (  0.99)	Loss_d 2.057 (2.057)	test_acc_d   0.26 (  0.26)	test_minacc_d   0.17 (  0.17)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.74 (  0.74)
Test: [  1/  1]	Loss 2.057 (2.057)	test_acc   0.26 (  0.26)	test_minacc   0.17 (  0.17)	test_majacc   0.99 (  0.99)	Loss_d 2.057 (2.057)	test_acc_d   0.26 (  0.26)	test_minacc_d   0.17 (  0.17)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.74 (  0.74)
Overall Timing[  7/  1]	epoch_time 0.0389 (0.0483)	validation_time 0.0004 (0.0012)	train_time 0.0385 (0.0467)
record: (train_acc, test_acc) (0.8735000252127647, 0.3290000259876251)
last accs (train_acc, test_acc) (0.881100026845932, 0.2550000250339508)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:05,  4.31it/s] 15%|#5        | 4/26 [00:00<00:01, 14.02it/s] 31%|###       | 8/26 [00:00<00:00, 21.72it/s] 46%|####6     | 12/26 [00:00<00:00, 26.60it/s] 62%|######1   | 16/26 [00:00<00:00, 29.85it/s] 77%|#######6  | 20/26 [00:00<00:00, 31.76it/s] 92%|#########2| 24/26 [00:00<00:00, 32.87it/s]100%|##########| 26/26 [00:01<00:00, 25.86it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 208 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 209 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 210 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 211 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 212 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 213 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 214 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 215 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 216 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 217 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 218 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 219 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 220 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 221 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 222 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 223 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 224 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 225 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 226 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 227 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 228 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 229 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 230 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 231 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 232 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 233 400
penalty weights 0.0
Epoch: [8][  26/  26]	Loss 0.217 (0.274)	train_nll   0.22 (  0.27)	train_penalty   0.01 (  0.01)	weight_norm  22.83 ( 22.73)	train_acc   0.92 (  0.88)	train_minacc   0.61 (  0.47)	train_majacc   0.98 (  0.96)	train_corr   0.00 (  0.00)	l1 6.8532 (6.5548)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 17.25it/s] 27%|##6       | 7/26 [00:00<00:00, 34.38it/s]                                               27%|##6       | 7/26 [00:00<00:00, 34.38it/s] 46%|####6     | 12/26 [00:00<00:00, 39.33it/s] 69%|######9   | 18/26 [00:00<00:00, 41.54it/s]                                                69%|######9   | 18/26 [00:00<00:00, 41.54it/s] 88%|########8 | 23/26 [00:00<00:00, 42.57it/s]100%|##########| 26/26 [00:00<00:00, 38.33it/s]
Test: [   0/  26]	Loss 0.310 (0.310)	test_acc   0.85 (  0.85)	test_minacc   0.51 (  0.51)	test_majacc   0.92 (  0.92)	Loss_d 0.310 (0.310)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.92 (  0.92)	test_corr_d   0.78 (  0.78)
Test: [  10/  26]	Loss 0.270 (0.316)	test_acc   0.87 (  0.86)	test_minacc   0.60 (  0.54)	test_majacc   0.91 (  0.92)	Loss_d 0.270 (0.316)	test_acc_d   0.87 (  0.86)	test_minacc_d   0.60 (  0.54)	test_majacc_d   0.91 (  0.92)	test_corr_d   0.77 (  0.77)
Test: [  20/  26]	Loss 0.242 (0.289)	test_acc   0.89 (  0.87)	test_minacc   0.60 (  0.56)	test_majacc   0.93 (  0.93)	Loss_d 0.242 (0.289)	test_acc_d   0.89 (  0.87)	test_minacc_d   0.60 (  0.56)	test_majacc_d   0.93 (  0.93)	test_corr_d   0.77 (  0.77)
Test: [  26/  26]	Loss 0.160 (0.276)	test_acc   0.94 (  0.88)	test_minacc   0.74 (  0.59)	test_majacc   0.98 (  0.93)	Loss_d 0.160 (0.276)	test_acc_d   0.94 (  0.88)	test_minacc_d   0.74 (  0.59)	test_majacc_d   0.98 (  0.93)	test_corr_d   0.77 (  0.77)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.86it/s]
Test: [  0/  1]	Loss 1.775 (1.775)	test_acc   0.41 (  0.41)	test_minacc   0.36 (  0.36)	test_majacc   0.92 (  0.92)	Loss_d 1.775 (1.775)	test_acc_d   0.41 (  0.41)	test_minacc_d   0.36 (  0.36)	test_majacc_d   0.92 (  0.92)	test_corr_d   0.38 (  0.38)
Test: [  1/  1]	Loss 1.775 (1.775)	test_acc   0.41 (  0.41)	test_minacc   0.36 (  0.36)	test_majacc   0.92 (  0.92)	Loss_d 1.775 (1.775)	test_acc_d   0.41 (  0.41)	test_minacc_d   0.36 (  0.36)	test_majacc_d   0.92 (  0.92)	test_corr_d   0.38 (  0.38)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/140/checkpoints/model_best.pth
Overall Timing[  8/  1]	epoch_time 0.0411 (0.0475)	validation_time 0.0003 (0.0011)	train_time 0.0408 (0.0460)
record: (train_acc, test_acc) (0.8821000190377235, 0.41200003027915955)
last accs (train_acc, test_acc) (0.8821000190377235, 0.41200003027915955)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:08,  2.90it/s] 19%|#9        | 5/26 [00:00<00:01, 13.13it/s] 35%|###4      | 9/26 [00:00<00:00, 20.06it/s] 50%|#####     | 13/26 [00:00<00:00, 24.94it/s] 65%|######5   | 17/26 [00:00<00:00, 28.35it/s] 81%|########  | 21/26 [00:00<00:00, 30.96it/s] 96%|#########6| 25/26 [00:01<00:00, 32.76it/s]100%|##########| 26/26 [00:01<00:00, 23.95it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 234 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 235 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 236 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 237 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 238 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 239 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 240 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 241 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 242 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 243 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 244 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 245 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 246 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 247 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 248 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 249 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 250 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 251 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 252 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 253 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 254 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 255 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 256 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 257 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 258 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 259 400
penalty weights 0.0
Epoch: [9][  26/  26]	Loss 0.162 (0.276)	train_nll   0.16 (  0.28)	train_penalty   0.00 (  0.01)	weight_norm  23.07 ( 22.95)	train_acc   0.92 (  0.88)	train_minacc   0.66 (  0.45)	train_majacc   0.97 (  0.96)	train_corr   0.00 (  0.00)	l1 7.3818 (6.3392)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.90it/s] 19%|#9        | 5/26 [00:00<00:00, 24.52it/s]                                               19%|#9        | 5/26 [00:00<00:00, 24.52it/s] 42%|####2     | 11/26 [00:00<00:00, 37.53it/s] 62%|######1   | 16/26 [00:00<00:00, 40.89it/s]                                                62%|######1   | 16/26 [00:00<00:00, 40.89it/s] 81%|########  | 21/26 [00:00<00:00, 39.32it/s]100%|##########| 26/26 [00:00<00:00, 42.08it/s]100%|##########| 26/26 [00:00<00:00, 35.01it/s]
Test: [   0/  26]	Loss 0.254 (0.254)	test_acc   0.90 (  0.90)	test_minacc   0.68 (  0.68)	test_majacc   0.94 (  0.94)	Loss_d 0.254 (0.254)	test_acc_d   0.90 (  0.90)	test_minacc_d   0.68 (  0.68)	test_majacc_d   0.94 (  0.94)	test_corr_d   0.75 (  0.75)
Test: [  10/  26]	Loss 0.274 (0.302)	test_acc   0.89 (  0.88)	test_minacc   0.74 (  0.67)	test_majacc   0.91 (  0.92)	Loss_d 0.274 (0.302)	test_acc_d   0.89 (  0.88)	test_minacc_d   0.74 (  0.67)	test_majacc_d   0.91 (  0.92)	test_corr_d   0.72 (  0.73)
Test: [  20/  26]	Loss 0.183 (0.276)	test_acc   0.92 (  0.89)	test_minacc   0.71 (  0.69)	test_majacc   0.96 (  0.93)	Loss_d 0.183 (0.276)	test_acc_d   0.92 (  0.89)	test_minacc_d   0.71 (  0.69)	test_majacc_d   0.96 (  0.93)	test_corr_d   0.75 (  0.74)
Test: [  26/  26]	Loss 0.113 (0.261)	test_acc   0.97 (  0.89)	test_minacc   0.92 (  0.71)	test_majacc   0.98 (  0.93)	Loss_d 0.113 (0.261)	test_acc_d   0.97 (  0.89)	test_minacc_d   0.92 (  0.71)	test_majacc_d   0.98 (  0.93)	test_corr_d   0.75 (  0.73)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.85it/s]
Test: [  0/  1]	Loss 1.975 (1.975)	test_acc   0.46 (  0.46)	test_minacc   0.41 (  0.41)	test_majacc   0.89 (  0.89)	Loss_d 1.975 (1.975)	test_acc_d   0.46 (  0.46)	test_minacc_d   0.41 (  0.41)	test_majacc_d   0.89 (  0.89)	test_corr_d   0.31 (  0.31)
Test: [  1/  1]	Loss 1.975 (1.975)	test_acc   0.46 (  0.46)	test_minacc   0.41 (  0.41)	test_majacc   0.89 (  0.89)	Loss_d 1.975 (1.975)	test_acc_d   0.46 (  0.46)	test_minacc_d   0.41 (  0.41)	test_majacc_d   0.89 (  0.89)	test_corr_d   0.31 (  0.31)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/140/checkpoints/model_best.pth
Overall Timing[  9/  1]	epoch_time 0.0452 (0.0473)	validation_time 0.0005 (0.0010)	train_time 0.0448 (0.0459)
record: (train_acc, test_acc) (0.894000020623207, 0.45900002121925354)
last accs (train_acc, test_acc) (0.894000020623207, 0.45900002121925354)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 15.20it/s] 23%|##3       | 6/26 [00:00<00:00, 26.16it/s] 38%|###8      | 10/26 [00:00<00:00, 30.15it/s] 54%|#####3    | 14/26 [00:00<00:00, 31.98it/s] 69%|######9   | 18/26 [00:00<00:00, 32.80it/s] 85%|########4 | 22/26 [00:00<00:00, 33.67it/s]100%|##########| 26/26 [00:00<00:00, 34.51it/s]100%|##########| 26/26 [00:00<00:00, 29.76it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 260 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 261 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 262 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 263 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 264 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 265 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 266 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 267 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 268 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 269 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 270 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 271 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 272 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 273 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 274 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 275 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 276 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 277 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 278 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 279 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 280 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 281 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 282 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 283 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 284 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 285 400
penalty weights 0.0
Epoch: [10][  26/  26]	Loss 0.175 (0.273)	train_nll   0.17 (  0.27)	train_penalty   0.00 (  0.02)	weight_norm  23.34 ( 23.21)	train_acc   0.93 (  0.89)	train_minacc   0.63 (  0.49)	train_majacc   0.99 (  0.96)	train_corr   0.00 (  0.00)	l1 7.2874 (6.1637)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.41it/s] 23%|##3       | 6/26 [00:00<00:00, 30.69it/s]                                               23%|##3       | 6/26 [00:00<00:00, 30.69it/s] 42%|####2     | 11/26 [00:00<00:00, 38.10it/s] 62%|######1   | 16/26 [00:00<00:00, 41.85it/s]                                                62%|######1   | 16/26 [00:00<00:00, 41.85it/s] 81%|########  | 21/26 [00:00<00:00, 39.53it/s]100%|##########| 26/26 [00:00<00:00, 35.54it/s]
Test: [   0/  26]	Loss 0.218 (0.218)	test_acc   0.91 (  0.91)	test_minacc   0.59 (  0.59)	test_majacc   0.97 (  0.97)	Loss_d 0.218 (0.218)	test_acc_d   0.91 (  0.91)	test_minacc_d   0.59 (  0.59)	test_majacc_d   0.97 (  0.97)	test_corr_d   0.83 (  0.83)
Test: [  10/  26]	Loss 0.230 (0.262)	test_acc   0.91 (  0.90)	test_minacc   0.64 (  0.56)	test_majacc   0.95 (  0.96)	Loss_d 0.230 (0.262)	test_acc_d   0.91 (  0.90)	test_minacc_d   0.64 (  0.56)	test_majacc_d   0.95 (  0.96)	test_corr_d   0.81 (  0.81)
Test: [  20/  26]	Loss 0.200 (0.254)	test_acc   0.91 (  0.90)	test_minacc   0.56 (  0.57)	test_majacc   0.96 (  0.96)	Loss_d 0.200 (0.254)	test_acc_d   0.91 (  0.90)	test_minacc_d   0.56 (  0.57)	test_majacc_d   0.96 (  0.96)	test_corr_d   0.83 (  0.82)
Test: [  26/  26]	Loss 0.115 (0.240)	test_acc   0.96 (  0.91)	test_minacc   0.76 (  0.60)	test_majacc   0.99 (  0.96)	Loss_d 0.115 (0.240)	test_acc_d   0.96 (  0.91)	test_minacc_d   0.76 (  0.60)	test_majacc_d   0.99 (  0.96)	test_corr_d   0.80 (  0.81)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.10it/s]
Test: [  0/  1]	Loss 2.417 (2.417)	test_acc   0.38 (  0.38)	test_minacc   0.31 (  0.31)	test_majacc   0.94 (  0.94)	Loss_d 2.417 (2.417)	test_acc_d   0.38 (  0.38)	test_minacc_d   0.31 (  0.31)	test_majacc_d   0.94 (  0.94)	test_corr_d   0.51 (  0.51)
Test: [  1/  1]	Loss 2.417 (2.417)	test_acc   0.38 (  0.38)	test_minacc   0.31 (  0.31)	test_majacc   0.94 (  0.94)	Loss_d 2.417 (2.417)	test_acc_d   0.38 (  0.38)	test_minacc_d   0.31 (  0.31)	test_majacc_d   0.94 (  0.94)	test_corr_d   0.51 (  0.51)
Overall Timing[ 10/  1]	epoch_time 0.0393 (0.0465)	validation_time 0.0004 (0.0010)	train_time 0.0389 (0.0452)
record: (train_acc, test_acc) (0.894000020623207, 0.45900002121925354)
last accs (train_acc, test_acc) (0.905100020289421, 0.37700000405311584)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.85it/s] 19%|#9        | 5/26 [00:00<00:01, 19.84it/s] 35%|###4      | 9/26 [00:00<00:00, 26.43it/s] 50%|#####     | 13/26 [00:00<00:00, 30.01it/s] 65%|######5   | 17/26 [00:00<00:00, 32.05it/s] 81%|########  | 21/26 [00:00<00:00, 33.19it/s] 96%|#########6| 25/26 [00:00<00:00, 34.17it/s]100%|##########| 26/26 [00:00<00:00, 27.68it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 286 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 287 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 288 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 289 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 290 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 291 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 292 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 293 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 294 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 295 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 296 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 297 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 298 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 299 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 300 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 301 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 302 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 303 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 304 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 305 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 306 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 307 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 308 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 309 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 310 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 311 400
penalty weights 0.0
Epoch: [11][  26/  26]	Loss 0.175 (0.251)	train_nll   0.17 (  0.25)	train_penalty   0.01 (  0.01)	weight_norm  23.68 ( 23.51)	train_acc   0.94 (  0.90)	train_minacc   0.68 (  0.55)	train_majacc   0.99 (  0.96)	train_corr   0.00 (  0.00)	l1 6.6129 (7.0549)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.85it/s] 23%|##3       | 6/26 [00:00<00:00, 25.62it/s]                                               23%|##3       | 6/26 [00:00<00:00, 25.62it/s] 42%|####2     | 11/26 [00:00<00:00, 33.80it/s] 62%|######1   | 16/26 [00:00<00:00, 38.53it/s]                                                62%|######1   | 16/26 [00:00<00:00, 38.53it/s] 81%|########  | 21/26 [00:00<00:00, 37.98it/s]100%|##########| 26/26 [00:00<00:00, 41.50it/s]100%|##########| 26/26 [00:00<00:00, 33.03it/s]
Test: [   0/  26]	Loss 0.229 (0.229)	test_acc   0.90 (  0.90)	test_minacc   0.57 (  0.57)	test_majacc   0.96 (  0.96)	Loss_d 0.229 (0.229)	test_acc_d   0.90 (  0.90)	test_minacc_d   0.57 (  0.57)	test_majacc_d   0.96 (  0.96)	test_corr_d   0.83 (  0.83)
Test: [  10/  26]	Loss 0.238 (0.245)	test_acc   0.89 (  0.90)	test_minacc   0.68 (  0.62)	test_majacc   0.93 (  0.95)	Loss_d 0.238 (0.245)	test_acc_d   0.89 (  0.90)	test_minacc_d   0.68 (  0.62)	test_majacc_d   0.93 (  0.95)	test_corr_d   0.79 (  0.80)
Test: [  20/  26]	Loss 0.184 (0.243)	test_acc   0.92 (  0.90)	test_minacc   0.75 (  0.62)	test_majacc   0.95 (  0.95)	Loss_d 0.184 (0.243)	test_acc_d   0.92 (  0.90)	test_minacc_d   0.75 (  0.62)	test_majacc_d   0.95 (  0.95)	test_corr_d   0.81 (  0.81)
Test: [  26/  26]	Loss 0.151 (0.236)	test_acc   0.95 (  0.90)	test_minacc   0.82 (  0.62)	test_majacc   0.97 (  0.95)	Loss_d 0.151 (0.236)	test_acc_d   0.95 (  0.90)	test_minacc_d   0.82 (  0.62)	test_majacc_d   0.97 (  0.95)	test_corr_d   0.81 (  0.81)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.98it/s]
Test: [  0/  1]	Loss 1.913 (1.913)	test_acc   0.42 (  0.42)	test_minacc   0.36 (  0.36)	test_majacc   0.94 (  0.94)	Loss_d 1.913 (1.913)	test_acc_d   0.42 (  0.42)	test_minacc_d   0.36 (  0.36)	test_majacc_d   0.94 (  0.94)	test_corr_d   0.48 (  0.48)
Test: [  1/  1]	Loss 1.913 (1.913)	test_acc   0.42 (  0.42)	test_minacc   0.36 (  0.36)	test_majacc   0.94 (  0.94)	Loss_d 1.913 (1.913)	test_acc_d   0.42 (  0.42)	test_minacc_d   0.36 (  0.36)	test_majacc_d   0.94 (  0.94)	test_corr_d   0.48 (  0.48)
Overall Timing[ 11/  1]	epoch_time 0.0414 (0.0461)	validation_time 0.0004 (0.0009)	train_time 0.0410 (0.0449)
record: (train_acc, test_acc) (0.894000020623207, 0.45900002121925354)
last accs (train_acc, test_acc) (0.9035000237822532, 0.41600000858306885)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.07it/s] 19%|#9        | 5/26 [00:00<00:01, 17.87it/s] 35%|###4      | 9/26 [00:00<00:00, 24.16it/s] 50%|#####     | 13/26 [00:00<00:00, 27.41it/s] 65%|######5   | 17/26 [00:00<00:00, 29.91it/s] 81%|########  | 21/26 [00:00<00:00, 31.67it/s] 96%|#########6| 25/26 [00:00<00:00, 32.55it/s]100%|##########| 26/26 [00:00<00:00, 26.02it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 312 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 313 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 314 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 315 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 316 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 317 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 318 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 319 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 320 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 321 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 322 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 323 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 324 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 325 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 326 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 327 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 328 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 329 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 330 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 331 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 332 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 333 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 334 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 335 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 336 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 337 400
penalty weights 0.0
Epoch: [12][  26/  26]	Loss 0.229 (0.239)	train_nll   0.23 (  0.24)	train_penalty   0.01 (  0.01)	weight_norm  24.03 ( 23.85)	train_acc   0.90 (  0.90)	train_minacc   0.42 (  0.59)	train_majacc   0.99 (  0.96)	train_corr   0.00 (  0.00)	l1 5.9423 (6.9941)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.61it/s] 15%|#5        | 4/26 [00:00<00:01, 21.13it/s] 35%|###4      | 9/26 [00:00<00:00, 32.50it/s]                                               35%|###4      | 9/26 [00:00<00:00, 32.50it/s] 54%|#####3    | 14/26 [00:00<00:00, 38.04it/s] 73%|#######3  | 19/26 [00:00<00:00, 39.67it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 39.67it/s] 92%|#########2| 24/26 [00:00<00:00, 42.32it/s]100%|##########| 26/26 [00:00<00:00, 34.58it/s]
Test: [   0/  26]	Loss 0.280 (0.280)	test_acc   0.88 (  0.88)	test_minacc   0.44 (  0.44)	test_majacc   0.97 (  0.97)	Loss_d 0.280 (0.280)	test_acc_d   0.88 (  0.88)	test_minacc_d   0.44 (  0.44)	test_majacc_d   0.97 (  0.97)	test_corr_d   0.86 (  0.86)
Test: [  10/  26]	Loss 0.215 (0.254)	test_acc   0.92 (  0.90)	test_minacc   0.64 (  0.55)	test_majacc   0.96 (  0.97)	Loss_d 0.215 (0.254)	test_acc_d   0.92 (  0.90)	test_minacc_d   0.64 (  0.55)	test_majacc_d   0.96 (  0.97)	test_corr_d   0.85 (  0.84)
Test: [  20/  26]	Loss 0.211 (0.244)	test_acc   0.92 (  0.91)	test_minacc   0.58 (  0.57)	test_majacc   0.98 (  0.97)	Loss_d 0.211 (0.244)	test_acc_d   0.92 (  0.91)	test_minacc_d   0.58 (  0.57)	test_majacc_d   0.98 (  0.97)	test_corr_d   0.85 (  0.84)
Test: [  26/  26]	Loss 0.192 (0.240)	test_acc   0.92 (  0.91)	test_minacc   0.50 (  0.58)	test_majacc   0.99 (  0.97)	Loss_d 0.192 (0.240)	test_acc_d   0.92 (  0.91)	test_minacc_d   0.50 (  0.58)	test_majacc_d   0.99 (  0.97)	test_corr_d   0.87 (  0.84)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.82it/s]
Test: [  0/  1]	Loss 1.764 (1.764)	test_acc   0.37 (  0.37)	test_minacc   0.31 (  0.31)	test_majacc   0.92 (  0.92)	Loss_d 1.764 (1.764)	test_acc_d   0.37 (  0.37)	test_minacc_d   0.31 (  0.31)	test_majacc_d   0.92 (  0.92)	test_corr_d   0.57 (  0.57)
Test: [  1/  1]	Loss 1.764 (1.764)	test_acc   0.37 (  0.37)	test_minacc   0.31 (  0.31)	test_majacc   0.92 (  0.92)	Loss_d 1.764 (1.764)	test_acc_d   0.37 (  0.37)	test_minacc_d   0.31 (  0.31)	test_majacc_d   0.92 (  0.92)	test_corr_d   0.57 (  0.57)
Overall Timing[ 12/  1]	epoch_time 0.0397 (0.0456)	validation_time 0.0005 (0.0009)	train_time 0.0392 (0.0445)
record: (train_acc, test_acc) (0.894000020623207, 0.45900002121925354)
last accs (train_acc, test_acc) (0.9073000233769417, 0.36900001764297485)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:05,  4.54it/s] 19%|#9        | 5/26 [00:00<00:01, 17.32it/s] 35%|###4      | 9/26 [00:00<00:00, 23.65it/s] 50%|#####     | 13/26 [00:00<00:00, 27.58it/s] 65%|######5   | 17/26 [00:00<00:00, 29.42it/s] 81%|########  | 21/26 [00:00<00:00, 30.88it/s] 96%|#########6| 25/26 [00:00<00:00, 32.76it/s]100%|##########| 26/26 [00:00<00:00, 26.17it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 338 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 339 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 340 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 341 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 342 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 343 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 344 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 345 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 346 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 347 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 348 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 349 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 350 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 351 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 352 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 353 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 354 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 355 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 356 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 357 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 358 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 359 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 360 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 361 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 362 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 363 400
penalty weights 0.0
Epoch: [13][  26/  26]	Loss 0.174 (0.225)	train_nll   0.17 (  0.23)	train_penalty   0.00 (  0.01)	weight_norm  24.39 ( 24.21)	train_acc   0.93 (  0.91)	train_minacc   0.55 (  0.63)	train_majacc   1.00 (  0.96)	train_corr   0.00 (  0.00)	l1 7.1854 (7.1214)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.75it/s] 23%|##3       | 6/26 [00:00<00:00, 31.01it/s]                                               23%|##3       | 6/26 [00:00<00:00, 31.01it/s] 42%|####2     | 11/26 [00:00<00:00, 37.26it/s] 62%|######1   | 16/26 [00:00<00:00, 41.20it/s]                                                62%|######1   | 16/26 [00:00<00:00, 41.20it/s] 81%|########  | 21/26 [00:00<00:00, 39.93it/s]100%|##########| 26/26 [00:00<00:00, 42.84it/s]100%|##########| 26/26 [00:00<00:00, 36.13it/s]
Test: [   0/  26]	Loss 0.233 (0.233)	test_acc   0.89 (  0.89)	test_minacc   0.48 (  0.48)	test_majacc   0.98 (  0.98)	Loss_d 0.233 (0.233)	test_acc_d   0.89 (  0.89)	test_minacc_d   0.48 (  0.48)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.86 (  0.86)
Test: [  10/  26]	Loss 0.182 (0.229)	test_acc   0.92 (  0.90)	test_minacc   0.62 (  0.58)	test_majacc   0.96 (  0.96)	Loss_d 0.182 (0.229)	test_acc_d   0.92 (  0.90)	test_minacc_d   0.62 (  0.58)	test_majacc_d   0.96 (  0.96)	test_corr_d   0.83 (  0.83)
Test: [  20/  26]	Loss 0.182 (0.211)	test_acc   0.94 (  0.91)	test_minacc   0.69 (  0.61)	test_majacc   0.98 (  0.97)	Loss_d 0.182 (0.211)	test_acc_d   0.94 (  0.91)	test_minacc_d   0.69 (  0.61)	test_majacc_d   0.98 (  0.97)	test_corr_d   0.84 (  0.83)
Test: [  26/  26]	Loss 0.137 (0.205)	test_acc   0.96 (  0.92)	test_minacc   0.74 (  0.63)	test_majacc   1.00 (  0.97)	Loss_d 0.137 (0.205)	test_acc_d   0.96 (  0.92)	test_minacc_d   0.74 (  0.63)	test_majacc_d   1.00 (  0.97)	test_corr_d   0.85 (  0.83)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 60.74it/s]
Test: [  0/  1]	Loss 2.272 (2.272)	test_acc   0.38 (  0.38)	test_minacc   0.32 (  0.32)	test_majacc   0.94 (  0.94)	Loss_d 2.272 (2.272)	test_acc_d   0.38 (  0.38)	test_minacc_d   0.32 (  0.32)	test_majacc_d   0.94 (  0.94)	test_corr_d   0.55 (  0.55)
Test: [  1/  1]	Loss 2.272 (2.272)	test_acc   0.38 (  0.38)	test_minacc   0.32 (  0.32)	test_majacc   0.94 (  0.94)	Loss_d 2.272 (2.272)	test_acc_d   0.38 (  0.38)	test_minacc_d   0.32 (  0.32)	test_majacc_d   0.94 (  0.94)	test_corr_d   0.55 (  0.55)
Overall Timing[ 13/  1]	epoch_time 0.0416 (0.0453)	validation_time 0.0009 (0.0009)	train_time 0.0407 (0.0442)
record: (train_acc, test_acc) (0.894000020623207, 0.45900002121925354)
last accs (train_acc, test_acc) (0.9162000207901001, 0.37800002098083496)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 15.67it/s] 23%|##3       | 6/26 [00:00<00:00, 25.94it/s] 38%|###8      | 10/26 [00:00<00:00, 29.39it/s] 54%|#####3    | 14/26 [00:00<00:00, 31.34it/s] 69%|######9   | 18/26 [00:00<00:00, 31.31it/s] 85%|########4 | 22/26 [00:00<00:00, 32.66it/s]100%|##########| 26/26 [00:00<00:00, 33.70it/s]100%|##########| 26/26 [00:00<00:00, 29.24it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 364 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 365 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 366 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 367 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 368 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 369 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 370 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 371 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 372 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 373 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 374 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 375 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 376 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 377 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 378 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 379 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 380 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 381 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 382 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 383 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 384 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 385 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 386 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 387 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 388 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 389 400
penalty weights 0.0
Epoch: [14][  26/  26]	Loss 0.133 (0.199)	train_nll   0.13 (  0.20)	train_penalty   0.00 (  0.01)	weight_norm  24.75 ( 24.58)	train_acc   0.94 (  0.92)	train_minacc   0.68 (  0.67)	train_majacc   0.99 (  0.96)	train_corr   0.00 (  0.00)	l1 7.4272 (7.3403)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.65it/s] 19%|#9        | 5/26 [00:00<00:00, 25.03it/s] 38%|###8      | 10/26 [00:00<00:00, 32.11it/s]                                                38%|###8      | 10/26 [00:00<00:00, 32.11it/s] 58%|#####7    | 15/26 [00:00<00:00, 37.57it/s] 77%|#######6  | 20/26 [00:00<00:00, 41.31it/s]                                                77%|#######6  | 20/26 [00:00<00:00, 41.31it/s] 96%|#########6| 25/26 [00:00<00:00, 42.15it/s]100%|##########| 26/26 [00:00<00:00, 35.45it/s]
Test: [   0/  26]	Loss 0.214 (0.214)	test_acc   0.92 (  0.92)	test_minacc   0.60 (  0.60)	test_majacc   0.98 (  0.98)	Loss_d 0.214 (0.214)	test_acc_d   0.92 (  0.92)	test_minacc_d   0.60 (  0.60)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.85 (  0.85)
Test: [  10/  26]	Loss 0.179 (0.214)	test_acc   0.91 (  0.91)	test_minacc   0.58 (  0.58)	test_majacc   0.96 (  0.98)	Loss_d 0.179 (0.214)	test_acc_d   0.91 (  0.91)	test_minacc_d   0.58 (  0.58)	test_majacc_d   0.96 (  0.98)	test_corr_d   0.84 (  0.84)
Test: [  20/  26]	Loss 0.155 (0.194)	test_acc   0.94 (  0.92)	test_minacc   0.69 (  0.60)	test_majacc   0.98 (  0.98)	Loss_d 0.155 (0.194)	test_acc_d   0.94 (  0.92)	test_minacc_d   0.69 (  0.60)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.84 (  0.84)
Test: [  26/  26]	Loss 0.108 (0.184)	test_acc   0.95 (  0.93)	test_minacc   0.74 (  0.63)	test_majacc   0.99 (  0.98)	Loss_d 0.108 (0.184)	test_acc_d   0.95 (  0.93)	test_minacc_d   0.74 (  0.63)	test_majacc_d   0.99 (  0.98)	test_corr_d   0.83 (  0.84)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.27it/s]
Test: [  0/  1]	Loss 2.632 (2.632)	test_acc   0.32 (  0.32)	test_minacc   0.26 (  0.26)	test_majacc   0.94 (  0.94)	Loss_d 2.632 (2.632)	test_acc_d   0.32 (  0.32)	test_minacc_d   0.26 (  0.26)	test_majacc_d   0.94 (  0.94)	test_corr_d   0.60 (  0.60)
Test: [  1/  1]	Loss 2.632 (2.632)	test_acc   0.32 (  0.32)	test_minacc   0.26 (  0.26)	test_majacc   0.94 (  0.94)	Loss_d 2.632 (2.632)	test_acc_d   0.32 (  0.32)	test_minacc_d   0.26 (  0.26)	test_majacc_d   0.94 (  0.94)	test_corr_d   0.60 (  0.60)
Overall Timing[ 14/  1]	epoch_time 0.0449 (0.0453)	validation_time 0.0004 (0.0009)	train_time 0.0446 (0.0442)
record: (train_acc, test_acc) (0.894000020623207, 0.45900002121925354)
last accs (train_acc, test_acc) (0.9265000153183937, 0.3240000009536743)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:01, 22.78it/s] 27%|##6       | 7/26 [00:00<00:00, 29.49it/s] 42%|####2     | 11/26 [00:00<00:00, 31.97it/s] 58%|#####7    | 15/26 [00:00<00:00, 32.31it/s] 73%|#######3  | 19/26 [00:00<00:00, 32.26it/s] 88%|########8 | 23/26 [00:00<00:00, 33.09it/s]100%|##########| 26/26 [00:00<00:00, 30.46it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 390 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 391 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 392 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 393 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 394 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 395 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 396 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 397 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 398 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 399 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 400 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 401 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 402 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 403 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 404 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 405 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 406 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 407 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 408 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 409 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 410 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 411 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 412 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 413 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 414 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 415 400
penalty weights 10000.0
Epoch: [15][  26/  26]	Loss 0.010 (0.079)	train_nll   0.28 (  0.24)	train_penalty   0.01 (  0.00)	weight_norm  25.08 ( 24.94)	train_acc   0.92 (  0.90)	train_minacc   0.92 (  0.72)	train_majacc   0.92 (  0.93)	train_corr   0.00 (  0.00)	l1 6.4581 (7.1647)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.52it/s] 23%|##3       | 6/26 [00:00<00:00, 27.09it/s]                                               23%|##3       | 6/26 [00:00<00:00, 27.09it/s] 42%|####2     | 11/26 [00:00<00:00, 35.33it/s] 62%|######1   | 16/26 [00:00<00:00, 39.59it/s]                                                62%|######1   | 16/26 [00:00<00:00, 39.59it/s] 81%|########  | 21/26 [00:00<00:00, 38.98it/s]100%|##########| 26/26 [00:00<00:00, 34.46it/s]
Test: [   0/  26]	Loss 0.358 (0.358)	test_acc   0.85 (  0.85)	test_minacc   0.78 (  0.78)	test_majacc   0.86 (  0.86)	Loss_d 0.358 (0.358)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.78 (  0.78)	test_majacc_d   0.86 (  0.86)	test_corr_d   0.59 (  0.59)
Test: [  10/  26]	Loss 0.373 (0.343)	test_acc   0.84 (  0.86)	test_minacc   0.96 (  0.86)	test_majacc   0.83 (  0.86)	Loss_d 0.373 (0.343)	test_acc_d   0.84 (  0.86)	test_minacc_d   0.96 (  0.86)	test_majacc_d   0.83 (  0.86)	test_corr_d   0.56 (  0.58)
Test: [  20/  26]	Loss 0.369 (0.336)	test_acc   0.85 (  0.86)	test_minacc   0.85 (  0.87)	test_majacc   0.85 (  0.86)	Loss_d 0.369 (0.336)	test_acc_d   0.85 (  0.86)	test_minacc_d   0.85 (  0.87)	test_majacc_d   0.85 (  0.86)	test_corr_d   0.60 (  0.59)
Test: [  26/  26]	Loss 0.304 (0.342)	test_acc   0.89 (  0.86)	test_minacc   0.92 (  0.86)	test_majacc   0.88 (  0.86)	Loss_d 0.304 (0.342)	test_acc_d   0.89 (  0.86)	test_minacc_d   0.92 (  0.86)	test_majacc_d   0.88 (  0.86)	test_corr_d   0.62 (  0.59)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 65.00it/s]
Test: [  0/  1]	Loss 1.450 (1.450)	test_acc   0.52 (  0.52)	test_minacc   0.49 (  0.49)	test_majacc   0.79 (  0.79)	Loss_d 1.450 (1.450)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.49 (  0.49)	test_majacc_d   0.79 (  0.79)	test_corr_d   0.16 (  0.16)
Test: [  1/  1]	Loss 1.450 (1.450)	test_acc   0.52 (  0.52)	test_minacc   0.49 (  0.49)	test_majacc   0.79 (  0.79)	Loss_d 1.450 (1.450)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.49 (  0.49)	test_majacc_d   0.79 (  0.79)	test_corr_d   0.16 (  0.16)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/140/checkpoints/model_best.pth
Overall Timing[ 15/  1]	epoch_time 0.0411 (0.0450)	validation_time 0.0004 (0.0008)	train_time 0.0407 (0.0440)
record: (train_acc, test_acc) (0.8572000217437744, 0.5180000066757202)
last accs (train_acc, test_acc) (0.8572000217437744, 0.5180000066757202)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.25it/s] 19%|#9        | 5/26 [00:00<00:01, 18.48it/s] 35%|###4      | 9/26 [00:00<00:00, 24.03it/s] 50%|#####     | 13/26 [00:00<00:00, 27.28it/s] 65%|######5   | 17/26 [00:00<00:00, 30.02it/s] 81%|########  | 21/26 [00:00<00:00, 31.87it/s] 96%|#########6| 25/26 [00:00<00:00, 33.07it/s]100%|##########| 26/26 [00:00<00:00, 26.69it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 416 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 417 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 418 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 419 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 420 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 421 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 422 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 423 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 424 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 425 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 426 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 427 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 428 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 429 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 430 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 431 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 432 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 433 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 434 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 435 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 436 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 437 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 438 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 439 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 440 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 441 400
penalty weights 10000.0
Epoch: [16][  26/  26]	Loss 0.002 (0.003)	train_nll   0.34 (  0.37)	train_penalty   0.00 (  0.00)	weight_norm  25.15 ( 25.13)	train_acc   0.84 (  0.83)	train_minacc   0.84 (  0.84)	train_majacc   0.84 (  0.82)	train_corr   0.00 (  0.00)	l1 5.6638 (6.0244)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.55it/s] 19%|#9        | 5/26 [00:00<00:00, 25.18it/s]                                               19%|#9        | 5/26 [00:00<00:00, 25.18it/s] 42%|####2     | 11/26 [00:00<00:00, 37.66it/s] 62%|######1   | 16/26 [00:00<00:00, 41.56it/s]                                                62%|######1   | 16/26 [00:00<00:00, 41.56it/s] 81%|########  | 21/26 [00:00<00:00, 39.45it/s]100%|##########| 26/26 [00:00<00:00, 42.42it/s]100%|##########| 26/26 [00:00<00:00, 35.20it/s]
Test: [   0/  26]	Loss 0.332 (0.332)	test_acc   0.82 (  0.82)	test_minacc   0.76 (  0.76)	test_majacc   0.83 (  0.83)	Loss_d 0.332 (0.332)	test_acc_d   0.82 (  0.82)	test_minacc_d   0.76 (  0.76)	test_majacc_d   0.83 (  0.83)	test_corr_d   0.63 (  0.63)
Test: [  10/  26]	Loss 0.307 (0.331)	test_acc   0.86 (  0.84)	test_minacc   0.88 (  0.80)	test_majacc   0.86 (  0.85)	Loss_d 0.307 (0.331)	test_acc_d   0.86 (  0.84)	test_minacc_d   0.88 (  0.80)	test_majacc_d   0.86 (  0.85)	test_corr_d   0.66 (  0.64)
Test: [  20/  26]	Loss 0.332 (0.324)	test_acc   0.83 (  0.84)	test_minacc   0.73 (  0.80)	test_majacc   0.85 (  0.85)	Loss_d 0.332 (0.324)	test_acc_d   0.83 (  0.84)	test_minacc_d   0.73 (  0.80)	test_majacc_d   0.85 (  0.85)	test_corr_d   0.68 (  0.65)
Test: [  26/  26]	Loss 0.344 (0.331)	test_acc   0.84 (  0.84)	test_minacc   0.82 (  0.79)	test_majacc   0.85 (  0.85)	Loss_d 0.344 (0.331)	test_acc_d   0.84 (  0.84)	test_minacc_d   0.82 (  0.79)	test_majacc_d   0.85 (  0.85)	test_corr_d   0.63 (  0.65)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 64.70it/s]
Test: [  0/  1]	Loss 1.445 (1.445)	test_acc   0.50 (  0.50)	test_minacc   0.46 (  0.46)	test_majacc   0.83 (  0.83)	Loss_d 1.445 (1.445)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.46 (  0.46)	test_majacc_d   0.83 (  0.83)	test_corr_d   0.33 (  0.33)
Test: [  1/  1]	Loss 1.445 (1.445)	test_acc   0.50 (  0.50)	test_minacc   0.46 (  0.46)	test_majacc   0.83 (  0.83)	Loss_d 1.445 (1.445)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.46 (  0.46)	test_majacc_d   0.83 (  0.83)	test_corr_d   0.33 (  0.33)
Overall Timing[ 16/  1]	epoch_time 0.0445 (0.0450)	validation_time 0.0004 (0.0008)	train_time 0.0441 (0.0440)
record: (train_acc, test_acc) (0.8572000217437744, 0.5180000066757202)
last accs (train_acc, test_acc) (0.842100024163723, 0.4960000216960907)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  6.21it/s] 12%|#1        | 3/26 [00:00<00:02, 10.61it/s] 27%|##6       | 7/26 [00:00<00:00, 20.36it/s] 42%|####2     | 11/26 [00:00<00:00, 25.70it/s] 58%|#####7    | 15/26 [00:00<00:00, 28.93it/s] 73%|#######3  | 19/26 [00:00<00:00, 30.07it/s] 88%|########8 | 23/26 [00:00<00:00, 32.56it/s]100%|##########| 26/26 [00:00<00:00, 26.02it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 442 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 443 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 444 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 445 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 446 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 447 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 448 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 449 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 450 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 451 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 452 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 453 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 454 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 455 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 456 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 457 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 458 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 459 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 460 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 461 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 462 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 463 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 464 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 465 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 466 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 467 400
penalty weights 10000.0
Epoch: [17][  26/  26]	Loss 0.000 (0.001)	train_nll   0.36 (  0.35)	train_penalty   0.00 (  0.00)	weight_norm  25.16 ( 25.15)	train_acc   0.81 (  0.82)	train_minacc   0.76 (  0.81)	train_majacc   0.82 (  0.83)	train_corr   0.00 (  0.00)	l1 5.4692 (5.6614)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 13.23it/s] 23%|##3       | 6/26 [00:00<00:00, 24.79it/s]                                               23%|##3       | 6/26 [00:00<00:00, 24.79it/s] 42%|####2     | 11/26 [00:00<00:00, 30.36it/s] 62%|######1   | 16/26 [00:00<00:00, 36.61it/s]                                                62%|######1   | 16/26 [00:00<00:00, 36.61it/s] 81%|########  | 21/26 [00:00<00:00, 39.41it/s]100%|##########| 26/26 [00:00<00:00, 34.21it/s]
Test: [   0/  26]	Loss 0.358 (0.358)	test_acc   0.81 (  0.81)	test_minacc   0.70 (  0.70)	test_majacc   0.83 (  0.83)	Loss_d 0.358 (0.358)	test_acc_d   0.81 (  0.81)	test_minacc_d   0.70 (  0.70)	test_majacc_d   0.83 (  0.83)	test_corr_d   0.62 (  0.62)
Test: [  10/  26]	Loss 0.318 (0.328)	test_acc   0.86 (  0.84)	test_minacc   0.90 (  0.81)	test_majacc   0.85 (  0.85)	Loss_d 0.318 (0.328)	test_acc_d   0.86 (  0.84)	test_minacc_d   0.90 (  0.81)	test_majacc_d   0.85 (  0.85)	test_corr_d   0.62 (  0.62)
Test: [  20/  26]	Loss 0.331 (0.317)	test_acc   0.84 (  0.85)	test_minacc   0.81 (  0.82)	test_majacc   0.84 (  0.85)	Loss_d 0.331 (0.317)	test_acc_d   0.84 (  0.85)	test_minacc_d   0.81 (  0.82)	test_majacc_d   0.84 (  0.85)	test_corr_d   0.64 (  0.63)
Test: [  26/  26]	Loss 0.363 (0.323)	test_acc   0.81 (  0.84)	test_minacc   0.76 (  0.81)	test_majacc   0.82 (  0.85)	Loss_d 0.363 (0.323)	test_acc_d   0.81 (  0.84)	test_minacc_d   0.76 (  0.81)	test_majacc_d   0.82 (  0.85)	test_corr_d   0.60 (  0.63)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.96it/s]
Test: [  0/  1]	Loss 1.417 (1.417)	test_acc   0.52 (  0.52)	test_minacc   0.49 (  0.49)	test_majacc   0.83 (  0.83)	Loss_d 1.417 (1.417)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.49 (  0.49)	test_majacc_d   0.83 (  0.83)	test_corr_d   0.24 (  0.24)
Test: [  1/  1]	Loss 1.417 (1.417)	test_acc   0.52 (  0.52)	test_minacc   0.49 (  0.49)	test_majacc   0.83 (  0.83)	Loss_d 1.417 (1.417)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.49 (  0.49)	test_majacc_d   0.83 (  0.83)	test_corr_d   0.24 (  0.24)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/140/checkpoints/model_best.pth
Overall Timing[ 17/  1]	epoch_time 0.0428 (0.0449)	validation_time 0.0003 (0.0008)	train_time 0.0425 (0.0439)
record: (train_acc, test_acc) (0.8444000236392021, 0.5220000147819519)
last accs (train_acc, test_acc) (0.8444000236392021, 0.5220000147819519)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:01, 20.51it/s] 27%|##6       | 7/26 [00:00<00:00, 26.74it/s] 42%|####2     | 11/26 [00:00<00:00, 29.42it/s] 58%|#####7    | 15/26 [00:00<00:00, 30.94it/s] 73%|#######3  | 19/26 [00:00<00:00, 31.83it/s] 88%|########8 | 23/26 [00:00<00:00, 33.17it/s]100%|##########| 26/26 [00:00<00:00, 29.36it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 468 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 469 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 470 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 471 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 472 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 473 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 474 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 475 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 476 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 477 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 478 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 479 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 480 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 481 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 482 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 483 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 484 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 485 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 486 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 487 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 488 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 489 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 490 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 491 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 492 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 493 400
penalty weights 10000.0
Epoch: [18][  26/  26]	Loss 0.000 (0.001)	train_nll   0.36 (  0.35)	train_penalty   0.00 (  0.00)	weight_norm  25.16 ( 25.16)	train_acc   0.82 (  0.83)	train_minacc   0.76 (  0.82)	train_majacc   0.83 (  0.83)	train_corr   0.00 (  0.00)	l1 5.4049 (5.6592)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:00, 23.69it/s] 31%|###       | 8/26 [00:00<00:00, 33.95it/s]                                               31%|###       | 8/26 [00:00<00:00, 33.95it/s] 50%|#####     | 13/26 [00:00<00:00, 38.59it/s] 73%|#######3  | 19/26 [00:00<00:00, 40.03it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 40.03it/s] 92%|#########2| 24/26 [00:00<00:00, 41.17it/s]100%|##########| 26/26 [00:00<00:00, 37.11it/s]
Test: [   0/  26]	Loss 0.339 (0.339)	test_acc   0.82 (  0.82)	test_minacc   0.68 (  0.68)	test_majacc   0.84 (  0.84)	Loss_d 0.339 (0.339)	test_acc_d   0.82 (  0.82)	test_minacc_d   0.68 (  0.68)	test_majacc_d   0.84 (  0.84)	test_corr_d   0.66 (  0.66)
Test: [  10/  26]	Loss 0.307 (0.324)	test_acc   0.86 (  0.85)	test_minacc   0.90 (  0.78)	test_majacc   0.86 (  0.86)	Loss_d 0.307 (0.324)	test_acc_d   0.86 (  0.85)	test_minacc_d   0.90 (  0.78)	test_majacc_d   0.86 (  0.86)	test_corr_d   0.66 (  0.66)
Test: [  20/  26]	Loss 0.311 (0.308)	test_acc   0.85 (  0.86)	test_minacc   0.77 (  0.80)	test_majacc   0.86 (  0.87)	Loss_d 0.311 (0.308)	test_acc_d   0.85 (  0.86)	test_minacc_d   0.77 (  0.80)	test_majacc_d   0.86 (  0.87)	test_corr_d   0.69 (  0.67)
Test: [  26/  26]	Loss 0.355 (0.313)	test_acc   0.83 (  0.85)	test_minacc   0.74 (  0.79)	test_majacc   0.85 (  0.86)	Loss_d 0.355 (0.313)	test_acc_d   0.83 (  0.85)	test_minacc_d   0.74 (  0.79)	test_majacc_d   0.85 (  0.86)	test_corr_d   0.65 (  0.67)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 60.83it/s]
Test: [  0/  1]	Loss 1.453 (1.453)	test_acc   0.51 (  0.51)	test_minacc   0.47 (  0.47)	test_majacc   0.84 (  0.84)	Loss_d 1.453 (1.453)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.47 (  0.47)	test_majacc_d   0.84 (  0.84)	test_corr_d   0.32 (  0.32)
Test: [  1/  1]	Loss 1.453 (1.453)	test_acc   0.51 (  0.51)	test_minacc   0.47 (  0.47)	test_majacc   0.84 (  0.84)	Loss_d 1.453 (1.453)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.47 (  0.47)	test_majacc_d   0.84 (  0.84)	test_corr_d   0.32 (  0.32)
Overall Timing[ 18/  1]	epoch_time 0.0408 (0.0447)	validation_time 0.0005 (0.0008)	train_time 0.0403 (0.0437)
record: (train_acc, test_acc) (0.8444000236392021, 0.5220000147819519)
last accs (train_acc, test_acc) (0.8533000240325928, 0.5060000419616699)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 14.85it/s] 23%|##3       | 6/26 [00:00<00:00, 25.18it/s] 38%|###8      | 10/26 [00:00<00:00, 27.83it/s] 54%|#####3    | 14/26 [00:00<00:00, 30.43it/s] 69%|######9   | 18/26 [00:00<00:00, 32.14it/s] 85%|########4 | 22/26 [00:00<00:00, 33.41it/s]100%|##########| 26/26 [00:00<00:00, 34.49it/s]100%|##########| 26/26 [00:00<00:00, 29.44it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 494 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 495 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 496 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 497 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 498 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 499 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 500 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 501 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 502 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 503 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 504 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 505 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 506 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 507 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 508 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 509 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 510 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 511 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 512 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 513 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 514 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 515 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 516 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 517 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 518 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 519 400
penalty weights 10000.0
Epoch: [19][  26/  26]	Loss 0.001 (0.001)	train_nll   0.37 (  0.34)	train_penalty   0.00 (  0.00)	weight_norm  25.17 ( 25.16)	train_acc   0.82 (  0.83)	train_minacc   0.76 (  0.79)	train_majacc   0.83 (  0.84)	train_corr   0.00 (  0.00)	l1 5.6419 (5.7118)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.14it/s] 23%|##3       | 6/26 [00:00<00:00, 30.05it/s]                                               23%|##3       | 6/26 [00:00<00:00, 30.05it/s] 42%|####2     | 11/26 [00:00<00:00, 37.00it/s] 62%|######1   | 16/26 [00:00<00:00, 41.14it/s]                                                62%|######1   | 16/26 [00:00<00:00, 41.14it/s] 81%|########  | 21/26 [00:00<00:00, 38.66it/s]100%|##########| 26/26 [00:00<00:00, 41.51it/s]100%|##########| 26/26 [00:00<00:00, 34.78it/s]
Test: [   0/  26]	Loss 0.352 (0.352)	test_acc   0.82 (  0.82)	test_minacc   0.73 (  0.73)	test_majacc   0.83 (  0.83)	Loss_d 0.352 (0.352)	test_acc_d   0.82 (  0.82)	test_minacc_d   0.73 (  0.73)	test_majacc_d   0.83 (  0.83)	test_corr_d   0.64 (  0.64)
Test: [  10/  26]	Loss 0.317 (0.341)	test_acc   0.85 (  0.84)	test_minacc   0.92 (  0.79)	test_majacc   0.84 (  0.85)	Loss_d 0.317 (0.341)	test_acc_d   0.85 (  0.84)	test_minacc_d   0.92 (  0.79)	test_majacc_d   0.84 (  0.85)	test_corr_d   0.64 (  0.64)
Test: [  20/  26]	Loss 0.294 (0.310)	test_acc   0.86 (  0.85)	test_minacc   0.85 (  0.82)	test_majacc   0.87 (  0.86)	Loss_d 0.294 (0.310)	test_acc_d   0.86 (  0.85)	test_minacc_d   0.85 (  0.82)	test_majacc_d   0.87 (  0.86)	test_corr_d   0.69 (  0.66)
Test: [  26/  26]	Loss 0.357 (0.312)	test_acc   0.82 (  0.85)	test_minacc   0.74 (  0.81)	test_majacc   0.83 (  0.86)	Loss_d 0.357 (0.312)	test_acc_d   0.82 (  0.85)	test_minacc_d   0.74 (  0.81)	test_majacc_d   0.83 (  0.86)	test_corr_d   0.64 (  0.66)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 56.03it/s]
Test: [  0/  1]	Loss 1.530 (1.530)	test_acc   0.52 (  0.52)	test_minacc   0.49 (  0.49)	test_majacc   0.83 (  0.83)	Loss_d 1.530 (1.530)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.49 (  0.49)	test_majacc_d   0.83 (  0.83)	test_corr_d   0.27 (  0.27)
Test: [  1/  1]	Loss 1.530 (1.530)	test_acc   0.52 (  0.52)	test_minacc   0.49 (  0.49)	test_majacc   0.83 (  0.83)	Loss_d 1.530 (1.530)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.49 (  0.49)	test_majacc_d   0.83 (  0.83)	test_corr_d   0.27 (  0.27)
Overall Timing[ 19/  1]	epoch_time 0.0385 (0.0444)	validation_time 0.0004 (0.0007)	train_time 0.0381 (0.0434)
record: (train_acc, test_acc) (0.8444000236392021, 0.5220000147819519)
last accs (train_acc, test_acc) (0.8509000271558762, 0.5210000276565552)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.34it/s] 19%|#9        | 5/26 [00:00<00:00, 25.39it/s] 35%|###4      | 9/26 [00:00<00:00, 29.89it/s] 50%|#####     | 13/26 [00:00<00:00, 32.18it/s] 65%|######5   | 17/26 [00:00<00:00, 32.86it/s] 81%|########  | 21/26 [00:00<00:00, 33.52it/s] 96%|#########6| 25/26 [00:00<00:00, 33.61it/s]100%|##########| 26/26 [00:00<00:00, 29.45it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 520 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 521 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 522 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 523 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 524 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 525 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 526 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 527 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 528 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 529 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 530 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 531 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 532 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 533 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 534 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 535 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 536 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 537 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 538 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 539 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 540 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 541 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 542 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 543 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 544 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 545 400
penalty weights 10000.0
Epoch: [20][  26/  26]	Loss 0.000 (0.003)	train_nll   0.34 (  0.33)	train_penalty   0.00 (  0.00)	weight_norm  25.18 ( 25.18)	train_acc   0.84 (  0.84)	train_minacc   0.79 (  0.81)	train_majacc   0.84 (  0.85)	train_corr   0.00 (  0.00)	l1 5.9697 (5.7391)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.43it/s] 23%|##3       | 6/26 [00:00<00:00, 29.16it/s]                                               23%|##3       | 6/26 [00:00<00:00, 29.16it/s] 42%|####2     | 11/26 [00:00<00:00, 35.71it/s] 62%|######1   | 16/26 [00:00<00:00, 40.23it/s]                                                62%|######1   | 16/26 [00:00<00:00, 40.23it/s] 81%|########  | 21/26 [00:00<00:00, 37.45it/s]100%|##########| 26/26 [00:00<00:00, 34.33it/s]
Test: [   0/  26]	Loss 0.336 (0.336)	test_acc   0.79 (  0.79)	test_minacc   0.71 (  0.71)	test_majacc   0.81 (  0.81)	Loss_d 0.336 (0.336)	test_acc_d   0.79 (  0.79)	test_minacc_d   0.71 (  0.71)	test_majacc_d   0.81 (  0.81)	test_corr_d   0.64 (  0.64)
Test: [  10/  26]	Loss 0.346 (0.358)	test_acc   0.83 (  0.82)	test_minacc   0.88 (  0.77)	test_majacc   0.82 (  0.82)	Loss_d 0.346 (0.358)	test_acc_d   0.83 (  0.82)	test_minacc_d   0.88 (  0.77)	test_majacc_d   0.82 (  0.82)	test_corr_d   0.63 (  0.64)
Test: [  20/  26]	Loss 0.279 (0.321)	test_acc   0.87 (  0.84)	test_minacc   0.87 (  0.81)	test_majacc   0.87 (  0.84)	Loss_d 0.279 (0.321)	test_acc_d   0.87 (  0.84)	test_minacc_d   0.87 (  0.81)	test_majacc_d   0.87 (  0.84)	test_corr_d   0.70 (  0.66)
Test: [  26/  26]	Loss 0.335 (0.318)	test_acc   0.83 (  0.84)	test_minacc   0.79 (  0.81)	test_majacc   0.84 (  0.85)	Loss_d 0.335 (0.318)	test_acc_d   0.83 (  0.84)	test_minacc_d   0.79 (  0.81)	test_majacc_d   0.84 (  0.85)	test_corr_d   0.66 (  0.66)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 60.29it/s]
Test: [  0/  1]	Loss 1.668 (1.668)	test_acc   0.52 (  0.52)	test_minacc   0.49 (  0.49)	test_majacc   0.80 (  0.80)	Loss_d 1.668 (1.668)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.49 (  0.49)	test_majacc_d   0.80 (  0.80)	test_corr_d   0.29 (  0.29)
Test: [  1/  1]	Loss 1.668 (1.668)	test_acc   0.52 (  0.52)	test_minacc   0.49 (  0.49)	test_majacc   0.80 (  0.80)	Loss_d 1.668 (1.668)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.49 (  0.49)	test_majacc_d   0.80 (  0.80)	test_corr_d   0.29 (  0.29)
Overall Timing[ 20/  1]	epoch_time 0.0423 (0.0443)	validation_time 0.0005 (0.0007)	train_time 0.0419 (0.0434)
record: (train_acc, test_acc) (0.8444000236392021, 0.5220000147819519)
last accs (train_acc, test_acc) (0.8425000246763229, 0.5190000534057617)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.47it/s]  8%|7         | 2/26 [00:00<00:02,  9.43it/s] 23%|##3       | 6/26 [00:00<00:00, 21.53it/s] 38%|###8      | 10/26 [00:00<00:00, 26.78it/s] 54%|#####3    | 14/26 [00:00<00:00, 29.62it/s] 69%|######9   | 18/26 [00:00<00:00, 31.42it/s] 85%|########4 | 22/26 [00:00<00:00, 32.41it/s]100%|##########| 26/26 [00:00<00:00, 33.26it/s]100%|##########| 26/26 [00:00<00:00, 26.98it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 546 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 547 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 548 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 549 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 550 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 551 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 552 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 553 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 554 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 555 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 556 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 557 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 558 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 559 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 560 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 561 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 562 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 563 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 564 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 565 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 566 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 567 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 568 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 569 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 570 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 571 400
penalty weights 10000.0
Epoch: [21][  26/  26]	Loss 0.000 (0.001)	train_nll   0.37 (  0.35)	train_penalty   0.00 (  0.00)	weight_norm  25.20 ( 25.19)	train_acc   0.83 (  0.81)	train_minacc   0.79 (  0.75)	train_majacc   0.83 (  0.82)	train_corr   0.00 (  0.00)	l1 5.5617 (5.6119)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.14it/s] 27%|##6       | 7/26 [00:00<00:00, 33.97it/s]                                               27%|##6       | 7/26 [00:00<00:00, 33.97it/s] 46%|####6     | 12/26 [00:00<00:00, 40.09it/s] 65%|######5   | 17/26 [00:00<00:00, 41.77it/s]                                                65%|######5   | 17/26 [00:00<00:00, 41.77it/s] 85%|########4 | 22/26 [00:00<00:00, 44.08it/s]100%|##########| 26/26 [00:00<00:00, 36.87it/s]
Test: [   0/  26]	Loss 0.347 (0.347)	test_acc   0.80 (  0.80)	test_minacc   0.76 (  0.76)	test_majacc   0.81 (  0.81)	Loss_d 0.347 (0.347)	test_acc_d   0.80 (  0.80)	test_minacc_d   0.76 (  0.76)	test_majacc_d   0.81 (  0.81)	test_corr_d   0.62 (  0.62)
Test: [  10/  26]	Loss 0.382 (0.365)	test_acc   0.78 (  0.80)	test_minacc   0.82 (  0.76)	test_majacc   0.78 (  0.80)	Loss_d 0.382 (0.365)	test_acc_d   0.78 (  0.80)	test_minacc_d   0.82 (  0.76)	test_majacc_d   0.78 (  0.80)	test_corr_d   0.59 (  0.62)
Test: [  20/  26]	Loss 0.311 (0.342)	test_acc   0.82 (  0.81)	test_minacc   0.75 (  0.78)	test_majacc   0.83 (  0.82)	Loss_d 0.311 (0.342)	test_acc_d   0.82 (  0.81)	test_minacc_d   0.75 (  0.78)	test_majacc_d   0.83 (  0.82)	test_corr_d   0.68 (  0.64)
Test: [  26/  26]	Loss 0.363 (0.340)	test_acc   0.83 (  0.82)	test_minacc   0.79 (  0.78)	test_majacc   0.84 (  0.82)	Loss_d 0.363 (0.340)	test_acc_d   0.83 (  0.82)	test_minacc_d   0.79 (  0.78)	test_majacc_d   0.84 (  0.82)	test_corr_d   0.63 (  0.64)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.10it/s]
Test: [  0/  1]	Loss 1.617 (1.617)	test_acc   0.49 (  0.49)	test_minacc   0.46 (  0.46)	test_majacc   0.83 (  0.83)	Loss_d 1.617 (1.617)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.46 (  0.46)	test_majacc_d   0.83 (  0.83)	test_corr_d   0.32 (  0.32)
Test: [  1/  1]	Loss 1.617 (1.617)	test_acc   0.49 (  0.49)	test_minacc   0.46 (  0.46)	test_majacc   0.83 (  0.83)	Loss_d 1.617 (1.617)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.46 (  0.46)	test_majacc_d   0.83 (  0.83)	test_corr_d   0.32 (  0.32)
Overall Timing[ 21/  1]	epoch_time 0.0419 (0.0442)	validation_time 0.0005 (0.0007)	train_time 0.0414 (0.0433)
record: (train_acc, test_acc) (0.8444000236392021, 0.5220000147819519)
last accs (train_acc, test_acc) (0.8157000285983086, 0.49400001764297485)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.08it/s] 19%|#9        | 5/26 [00:00<00:01, 19.14it/s] 35%|###4      | 9/26 [00:00<00:00, 26.09it/s] 50%|#####     | 13/26 [00:00<00:00, 30.12it/s] 65%|######5   | 17/26 [00:00<00:00, 31.57it/s] 81%|########  | 21/26 [00:00<00:00, 33.25it/s] 96%|#########6| 25/26 [00:00<00:00, 33.24it/s]100%|##########| 26/26 [00:00<00:00, 27.35it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 572 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 573 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 574 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 575 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 576 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 577 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 578 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 579 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 580 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 581 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 582 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 583 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 584 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 585 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 586 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 587 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 588 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 589 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 590 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 591 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 592 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 593 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 594 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 595 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 596 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 597 400
penalty weights 10000.0
Epoch: [22][  26/  26]	Loss 0.001 (0.001)	train_nll   0.38 (  0.35)	train_penalty   0.00 (  0.00)	weight_norm  25.21 ( 25.20)	train_acc   0.82 (  0.81)	train_minacc   0.79 (  0.79)	train_majacc   0.83 (  0.81)	train_corr   0.00 (  0.00)	l1 5.8522 (5.6656)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 14.27it/s] 23%|##3       | 6/26 [00:00<00:00, 25.40it/s]                                               23%|##3       | 6/26 [00:00<00:00, 25.40it/s] 46%|####6     | 12/26 [00:00<00:00, 38.32it/s] 69%|######9   | 18/26 [00:00<00:00, 39.50it/s]                                                69%|######9   | 18/26 [00:00<00:00, 39.50it/s] 88%|########8 | 23/26 [00:00<00:00, 41.24it/s]100%|##########| 26/26 [00:00<00:00, 35.50it/s]
Test: [   0/  26]	Loss 0.352 (0.352)	test_acc   0.81 (  0.81)	test_minacc   0.79 (  0.79)	test_majacc   0.81 (  0.81)	Loss_d 0.352 (0.352)	test_acc_d   0.81 (  0.81)	test_minacc_d   0.79 (  0.79)	test_majacc_d   0.81 (  0.81)	test_corr_d   0.62 (  0.62)
Test: [  10/  26]	Loss 0.393 (0.372)	test_acc   0.79 (  0.80)	test_minacc   0.82 (  0.76)	test_majacc   0.79 (  0.80)	Loss_d 0.393 (0.372)	test_acc_d   0.79 (  0.80)	test_minacc_d   0.82 (  0.76)	test_majacc_d   0.79 (  0.80)	test_corr_d   0.59 (  0.62)
Test: [  20/  26]	Loss 0.284 (0.346)	test_acc   0.84 (  0.81)	test_minacc   0.81 (  0.78)	test_majacc   0.85 (  0.82)	Loss_d 0.284 (0.346)	test_acc_d   0.84 (  0.81)	test_minacc_d   0.81 (  0.78)	test_majacc_d   0.85 (  0.82)	test_corr_d   0.68 (  0.63)
Test: [  26/  26]	Loss 0.350 (0.340)	test_acc   0.84 (  0.82)	test_minacc   0.79 (  0.79)	test_majacc   0.84 (  0.82)	Loss_d 0.350 (0.340)	test_acc_d   0.84 (  0.82)	test_minacc_d   0.79 (  0.79)	test_majacc_d   0.84 (  0.82)	test_corr_d   0.64 (  0.64)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 64.82it/s]
Test: [  0/  1]	Loss 1.699 (1.699)	test_acc   0.50 (  0.50)	test_minacc   0.46 (  0.46)	test_majacc   0.84 (  0.84)	Loss_d 1.699 (1.699)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.46 (  0.46)	test_majacc_d   0.84 (  0.84)	test_corr_d   0.31 (  0.31)
Test: [  1/  1]	Loss 1.699 (1.699)	test_acc   0.50 (  0.50)	test_minacc   0.46 (  0.46)	test_majacc   0.84 (  0.84)	Loss_d 1.699 (1.699)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.46 (  0.46)	test_majacc_d   0.84 (  0.84)	test_corr_d   0.31 (  0.31)
Overall Timing[ 22/  1]	epoch_time 0.0406 (0.0440)	validation_time 0.0004 (0.0007)	train_time 0.0402 (0.0431)
record: (train_acc, test_acc) (0.8444000236392021, 0.5220000147819519)
last accs (train_acc, test_acc) (0.8176000263690949, 0.49900001287460327)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.64it/s] 15%|#5        | 4/26 [00:00<00:01, 16.49it/s] 31%|###       | 8/26 [00:00<00:00, 24.90it/s] 46%|####6     | 12/26 [00:00<00:00, 28.77it/s] 62%|######1   | 16/26 [00:00<00:00, 30.83it/s] 77%|#######6  | 20/26 [00:00<00:00, 31.89it/s] 92%|#########2| 24/26 [00:00<00:00, 32.38it/s]100%|##########| 26/26 [00:00<00:00, 26.85it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 598 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 599 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 600 400
penalty weights 10000.0
l1 at pgd_anneal_iters 5.548946380615234
set z to 5.271499061584472
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 601 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 602 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 603 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 604 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 605 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 606 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 607 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 608 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 609 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 610 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 611 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 612 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 613 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 614 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 615 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 616 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 617 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 618 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 619 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 620 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 621 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 622 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 623 400
penalty weights 10000.0
Epoch: [23][  26/  26]	Loss 0.009 (0.002)	train_nll   0.42 (  0.32)	train_penalty   0.01 (  0.00)	weight_norm  25.23 ( 25.22)	train_acc   0.80 (  0.85)	train_minacc   0.82 (  0.81)	train_majacc   0.80 (  0.85)	train_corr   0.00 (  0.00)	l1 6.6239 (5.7558)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 12.61it/s] 27%|##6       | 7/26 [00:00<00:00, 29.70it/s]                                               27%|##6       | 7/26 [00:00<00:00, 29.70it/s] 50%|#####     | 13/26 [00:00<00:00, 40.26it/s] 69%|######9   | 18/26 [00:00<00:00, 42.61it/s]                                                69%|######9   | 18/26 [00:00<00:00, 42.61it/s] 88%|########8 | 23/26 [00:00<00:00, 43.43it/s]100%|##########| 26/26 [00:00<00:00, 36.11it/s]
Test: [   0/  26]	Loss 0.408 (0.408)	test_acc   0.77 (  0.77)	test_minacc   0.75 (  0.75)	test_majacc   0.77 (  0.77)	Loss_d 0.408 (0.408)	test_acc_d   0.77 (  0.77)	test_minacc_d   0.75 (  0.75)	test_majacc_d   0.77 (  0.77)	test_corr_d   0.54 (  0.54)
Test: [  10/  26]	Loss 0.510 (0.459)	test_acc   0.77 (  0.78)	test_minacc   0.86 (  0.79)	test_majacc   0.76 (  0.77)	Loss_d 0.510 (0.459)	test_acc_d   0.77 (  0.78)	test_minacc_d   0.86 (  0.79)	test_majacc_d   0.76 (  0.77)	test_corr_d   0.50 (  0.54)
Test: [  20/  26]	Loss 0.315 (0.423)	test_acc   0.80 (  0.79)	test_minacc   0.92 (  0.82)	test_majacc   0.78 (  0.78)	Loss_d 0.315 (0.423)	test_acc_d   0.80 (  0.79)	test_minacc_d   0.92 (  0.82)	test_majacc_d   0.78 (  0.78)	test_corr_d   0.59 (  0.55)
Test: [  26/  26]	Loss 0.364 (0.408)	test_acc   0.82 (  0.79)	test_minacc   0.82 (  0.82)	test_majacc   0.82 (  0.79)	Loss_d 0.364 (0.408)	test_acc_d   0.82 (  0.79)	test_minacc_d   0.82 (  0.82)	test_majacc_d   0.82 (  0.79)	test_corr_d   0.58 (  0.56)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 54.79it/s]
Test: [  0/  1]	Loss 1.708 (1.708)	test_acc   0.57 (  0.57)	test_minacc   0.55 (  0.55)	test_majacc   0.76 (  0.76)	Loss_d 1.708 (1.708)	test_acc_d   0.57 (  0.57)	test_minacc_d   0.55 (  0.55)	test_majacc_d   0.76 (  0.76)	test_corr_d   0.09 (  0.09)
Test: [  1/  1]	Loss 1.708 (1.708)	test_acc   0.57 (  0.57)	test_minacc   0.55 (  0.55)	test_majacc   0.76 (  0.76)	Loss_d 1.708 (1.708)	test_acc_d   0.57 (  0.57)	test_minacc_d   0.55 (  0.55)	test_majacc_d   0.76 (  0.76)	test_corr_d   0.09 (  0.09)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/140/checkpoints/model_best.pth
Overall Timing[ 23/  1]	epoch_time 0.0408 (0.0439)	validation_time 0.0004 (0.0007)	train_time 0.0404 (0.0430)
record: (train_acc, test_acc) (0.7943000235557556, 0.5740000009536743)
last accs (train_acc, test_acc) (0.7943000235557556, 0.5740000009536743)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.57it/s] 19%|#9        | 5/26 [00:00<00:01, 20.00it/s] 35%|###4      | 9/26 [00:00<00:00, 26.64it/s] 50%|#####     | 13/26 [00:00<00:00, 30.35it/s] 65%|######5   | 17/26 [00:00<00:00, 32.60it/s] 81%|########  | 21/26 [00:00<00:00, 34.09it/s] 96%|#########6| 25/26 [00:00<00:00, 34.58it/s]100%|##########| 26/26 [00:00<00:00, 28.22it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 624 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 625 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 626 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 627 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 628 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 629 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 630 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 631 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 632 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 633 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 634 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 635 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 636 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 637 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 638 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 639 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 640 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 641 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 642 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 643 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 644 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 645 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 646 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 647 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 648 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 649 400
penalty weights 10000.0
Epoch: [24][  26/  26]	Loss 0.003 (0.004)	train_nll   0.33 (  0.37)	train_penalty   0.00 (  0.00)	weight_norm  25.28 ( 25.25)	train_acc   0.82 (  0.81)	train_minacc   0.84 (  0.73)	train_majacc   0.82 (  0.83)	train_corr   0.00 (  0.00)	l1 5.7975 (5.7484)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  6.17it/s] 23%|##3       | 6/26 [00:00<00:00, 26.49it/s]                                               23%|##3       | 6/26 [00:00<00:00, 26.49it/s] 42%|####2     | 11/26 [00:00<00:00, 33.97it/s] 62%|######1   | 16/26 [00:00<00:00, 38.85it/s]                                                62%|######1   | 16/26 [00:00<00:00, 38.85it/s] 81%|########  | 21/26 [00:00<00:00, 37.56it/s]100%|##########| 26/26 [00:00<00:00, 40.74it/s]100%|##########| 26/26 [00:00<00:00, 33.09it/s]
Test: [   0/  26]	Loss 0.438 (0.438)	test_acc   0.76 (  0.76)	test_minacc   0.71 (  0.71)	test_majacc   0.76 (  0.76)	Loss_d 0.438 (0.438)	test_acc_d   0.76 (  0.76)	test_minacc_d   0.71 (  0.71)	test_majacc_d   0.76 (  0.76)	test_corr_d   0.58 (  0.58)
Test: [  10/  26]	Loss 0.440 (0.427)	test_acc   0.75 (  0.76)	test_minacc   0.80 (  0.74)	test_majacc   0.75 (  0.76)	Loss_d 0.440 (0.427)	test_acc_d   0.75 (  0.76)	test_minacc_d   0.80 (  0.74)	test_majacc_d   0.75 (  0.76)	test_corr_d   0.55 (  0.57)
Test: [  20/  26]	Loss 0.417 (0.428)	test_acc   0.78 (  0.76)	test_minacc   0.69 (  0.73)	test_majacc   0.79 (  0.76)	Loss_d 0.417 (0.428)	test_acc_d   0.78 (  0.76)	test_minacc_d   0.69 (  0.73)	test_majacc_d   0.79 (  0.76)	test_corr_d   0.62 (  0.58)
Test: [  26/  26]	Loss 0.332 (0.422)	test_acc   0.82 (  0.76)	test_minacc   0.84 (  0.73)	test_majacc   0.82 (  0.77)	Loss_d 0.332 (0.422)	test_acc_d   0.82 (  0.76)	test_minacc_d   0.84 (  0.73)	test_majacc_d   0.82 (  0.77)	test_corr_d   0.62 (  0.58)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 64.86it/s]
Test: [  0/  1]	Loss 1.455 (1.455)	test_acc   0.58 (  0.58)	test_minacc   0.55 (  0.55)	test_majacc   0.82 (  0.82)	Loss_d 1.455 (1.455)	test_acc_d   0.58 (  0.58)	test_minacc_d   0.55 (  0.55)	test_majacc_d   0.82 (  0.82)	test_corr_d   0.15 (  0.15)
Test: [  1/  1]	Loss 1.455 (1.455)	test_acc   0.58 (  0.58)	test_minacc   0.55 (  0.55)	test_majacc   0.82 (  0.82)	Loss_d 1.455 (1.455)	test_acc_d   0.58 (  0.58)	test_minacc_d   0.55 (  0.55)	test_majacc_d   0.82 (  0.82)	test_corr_d   0.15 (  0.15)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/140/checkpoints/model_best.pth
Overall Timing[ 24/  1]	epoch_time 0.0390 (0.0437)	validation_time 0.0004 (0.0007)	train_time 0.0386 (0.0428)
record: (train_acc, test_acc) (0.7645000350475312, 0.5760000348091125)
last accs (train_acc, test_acc) (0.7645000350475312, 0.5760000348091125)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:05,  4.34it/s] 19%|#9        | 5/26 [00:00<00:01, 16.47it/s] 35%|###4      | 9/26 [00:00<00:00, 22.72it/s] 50%|#####     | 13/26 [00:00<00:00, 26.59it/s] 65%|######5   | 17/26 [00:00<00:00, 29.40it/s] 81%|########  | 21/26 [00:00<00:00, 31.56it/s] 96%|#########6| 25/26 [00:00<00:00, 33.14it/s]100%|##########| 26/26 [00:01<00:00, 25.81it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 650 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 651 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 652 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 653 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 654 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 655 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 656 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 657 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 658 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 659 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 660 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 661 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 662 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 663 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 664 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 665 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 666 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 667 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 668 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 669 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 670 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 671 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 672 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 673 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 674 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 675 400
penalty weights 10000.0
Epoch: [25][  26/  26]	Loss 0.001 (0.001)	train_nll   0.35 (  0.39)	train_penalty   0.00 (  0.00)	weight_norm  25.30 ( 25.29)	train_acc   0.81 (  0.79)	train_minacc   0.79 (  0.77)	train_majacc   0.82 (  0.79)	train_corr   0.00 (  0.00)	l1 5.7631 (5.5535)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  6.02it/s]  8%|7         | 2/26 [00:00<00:04,  5.20it/s] 27%|##6       | 7/26 [00:00<00:01, 18.31it/s]                                               27%|##6       | 7/26 [00:00<00:01, 18.31it/s] 54%|#####3    | 14/26 [00:00<00:00, 31.35it/s] 73%|#######3  | 19/26 [00:00<00:00, 36.33it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 36.33it/s] 92%|#########2| 24/26 [00:00<00:00, 38.91it/s]100%|##########| 26/26 [00:00<00:00, 28.09it/s]
Test: [   0/  26]	Loss 0.416 (0.416)	test_acc   0.78 (  0.78)	test_minacc   0.78 (  0.78)	test_majacc   0.78 (  0.78)	Loss_d 0.416 (0.416)	test_acc_d   0.78 (  0.78)	test_minacc_d   0.78 (  0.78)	test_majacc_d   0.78 (  0.78)	test_corr_d   0.56 (  0.56)
Test: [  10/  26]	Loss 0.449 (0.435)	test_acc   0.75 (  0.75)	test_minacc   0.82 (  0.75)	test_majacc   0.74 (  0.75)	Loss_d 0.449 (0.435)	test_acc_d   0.75 (  0.75)	test_minacc_d   0.82 (  0.75)	test_majacc_d   0.74 (  0.75)	test_corr_d   0.52 (  0.53)
Test: [  20/  26]	Loss 0.415 (0.438)	test_acc   0.77 (  0.75)	test_minacc   0.71 (  0.74)	test_majacc   0.78 (  0.76)	Loss_d 0.415 (0.438)	test_acc_d   0.77 (  0.75)	test_minacc_d   0.71 (  0.74)	test_majacc_d   0.78 (  0.76)	test_corr_d   0.59 (  0.54)
Test: [  26/  26]	Loss 0.362 (0.431)	test_acc   0.80 (  0.76)	test_minacc   0.79 (  0.74)	test_majacc   0.81 (  0.76)	Loss_d 0.362 (0.431)	test_acc_d   0.80 (  0.76)	test_minacc_d   0.79 (  0.74)	test_majacc_d   0.81 (  0.76)	test_corr_d   0.59 (  0.55)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 64.27it/s]
Test: [  0/  1]	Loss 1.413 (1.413)	test_acc   0.59 (  0.59)	test_minacc   0.57 (  0.57)	test_majacc   0.80 (  0.80)	Loss_d 1.413 (1.413)	test_acc_d   0.59 (  0.59)	test_minacc_d   0.57 (  0.57)	test_majacc_d   0.80 (  0.80)	test_corr_d   0.08 (  0.08)
Test: [  1/  1]	Loss 1.413 (1.413)	test_acc   0.59 (  0.59)	test_minacc   0.57 (  0.57)	test_majacc   0.80 (  0.80)	Loss_d 1.413 (1.413)	test_acc_d   0.59 (  0.59)	test_minacc_d   0.57 (  0.57)	test_majacc_d   0.80 (  0.80)	test_corr_d   0.08 (  0.08)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/140/checkpoints/model_best.pth
Overall Timing[ 25/  1]	epoch_time 0.0408 (0.0436)	validation_time 0.0003 (0.0007)	train_time 0.0405 (0.0428)
record: (train_acc, test_acc) (0.759600024998188, 0.593000054359436)
last accs (train_acc, test_acc) (0.759600024998188, 0.593000054359436)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.35it/s] 19%|#9        | 5/26 [00:00<00:01, 18.17it/s] 35%|###4      | 9/26 [00:00<00:00, 25.02it/s] 50%|#####     | 13/26 [00:00<00:00, 28.53it/s] 65%|######5   | 17/26 [00:00<00:00, 30.95it/s] 81%|########  | 21/26 [00:00<00:00, 32.31it/s] 96%|#########6| 25/26 [00:00<00:00, 32.92it/s]100%|##########| 26/26 [00:00<00:00, 26.95it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 676 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 677 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 678 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 679 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 680 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 681 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 682 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 683 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 684 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 685 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 686 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 687 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 688 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 689 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 690 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 691 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 692 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 693 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 694 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 695 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 696 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 697 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 698 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 699 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 700 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 701 400
penalty weights 10000.0
Epoch: [26][  26/  26]	Loss 0.000 (0.001)	train_nll   0.36 (  0.38)	train_penalty   0.00 (  0.00)	weight_norm  25.30 ( 25.30)	train_acc   0.82 (  0.80)	train_minacc   0.87 (  0.78)	train_majacc   0.82 (  0.80)	train_corr   0.00 (  0.00)	l1 6.0144 (5.6403)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:01, 22.68it/s] 31%|###       | 8/26 [00:00<00:00, 36.78it/s]                                               31%|###       | 8/26 [00:00<00:00, 36.78it/s] 50%|#####     | 13/26 [00:00<00:00, 41.45it/s] 69%|######9   | 18/26 [00:00<00:00, 42.94it/s]                                                69%|######9   | 18/26 [00:00<00:00, 42.94it/s] 88%|########8 | 23/26 [00:00<00:00, 43.26it/s]100%|##########| 26/26 [00:00<00:00, 37.79it/s]
Test: [   0/  26]	Loss 0.381 (0.381)	test_acc   0.80 (  0.80)	test_minacc   0.84 (  0.84)	test_majacc   0.80 (  0.80)	Loss_d 0.381 (0.381)	test_acc_d   0.80 (  0.80)	test_minacc_d   0.84 (  0.84)	test_majacc_d   0.80 (  0.80)	test_corr_d   0.56 (  0.56)
Test: [  10/  26]	Loss 0.457 (0.411)	test_acc   0.76 (  0.77)	test_minacc   0.84 (  0.79)	test_majacc   0.74 (  0.77)	Loss_d 0.457 (0.411)	test_acc_d   0.76 (  0.77)	test_minacc_d   0.84 (  0.79)	test_majacc_d   0.74 (  0.77)	test_corr_d   0.50 (  0.53)
Test: [  20/  26]	Loss 0.403 (0.422)	test_acc   0.79 (  0.77)	test_minacc   0.75 (  0.78)	test_majacc   0.80 (  0.77)	Loss_d 0.403 (0.422)	test_acc_d   0.79 (  0.77)	test_minacc_d   0.75 (  0.78)	test_majacc_d   0.80 (  0.77)	test_corr_d   0.59 (  0.54)
Test: [  26/  26]	Loss 0.362 (0.415)	test_acc   0.82 (  0.78)	test_minacc   0.87 (  0.79)	test_majacc   0.81 (  0.77)	Loss_d 0.362 (0.415)	test_acc_d   0.82 (  0.78)	test_minacc_d   0.87 (  0.79)	test_majacc_d   0.81 (  0.77)	test_corr_d   0.59 (  0.54)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 59.45it/s]
Test: [  0/  1]	Loss 1.473 (1.473)	test_acc   0.61 (  0.61)	test_minacc   0.59 (  0.59)	test_majacc   0.78 (  0.78)	Loss_d 1.473 (1.473)	test_acc_d   0.61 (  0.61)	test_minacc_d   0.59 (  0.59)	test_majacc_d   0.78 (  0.78)	test_corr_d   0.06 (  0.06)
Test: [  1/  1]	Loss 1.473 (1.473)	test_acc   0.61 (  0.61)	test_minacc   0.59 (  0.59)	test_majacc   0.78 (  0.78)	Loss_d 1.473 (1.473)	test_acc_d   0.61 (  0.61)	test_minacc_d   0.59 (  0.59)	test_majacc_d   0.78 (  0.78)	test_corr_d   0.06 (  0.06)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/140/checkpoints/model_best.pth
Overall Timing[ 26/  1]	epoch_time 0.0426 (0.0435)	validation_time 0.0005 (0.0007)	train_time 0.0421 (0.0427)
record: (train_acc, test_acc) (0.7756000328063964, 0.6110000014305115)
last accs (train_acc, test_acc) (0.7756000328063964, 0.6110000014305115)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.58it/s] 19%|#9        | 5/26 [00:00<00:01, 18.82it/s] 35%|###4      | 9/26 [00:00<00:00, 25.32it/s] 50%|#####     | 13/26 [00:00<00:00, 29.18it/s] 65%|######5   | 17/26 [00:00<00:00, 30.79it/s] 81%|########  | 21/26 [00:00<00:00, 32.40it/s] 96%|#########6| 25/26 [00:00<00:00, 33.51it/s]100%|##########| 26/26 [00:00<00:00, 27.37it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 702 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 703 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 704 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 705 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 706 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 707 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 708 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 709 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 710 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 711 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 712 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 713 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 714 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 715 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 716 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 717 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 718 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 719 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 720 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 721 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 722 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 723 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 724 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 725 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 726 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 727 400
penalty weights 10000.0
Epoch: [27][  26/  26]	Loss 0.002 (0.002)	train_nll   0.35 (  0.37)	train_penalty   0.00 (  0.00)	weight_norm  25.32 ( 25.31)	train_acc   0.78 (  0.79)	train_minacc   0.79 (  0.83)	train_majacc   0.77 (  0.79)	train_corr   0.00 (  0.00)	l1 5.8677 (5.7459)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.70it/s] 27%|##6       | 7/26 [00:00<00:00, 29.40it/s]                                               27%|##6       | 7/26 [00:00<00:00, 29.40it/s] 46%|####6     | 12/26 [00:00<00:00, 37.27it/s] 65%|######5   | 17/26 [00:00<00:00, 40.66it/s]                                                65%|######5   | 17/26 [00:00<00:00, 40.66it/s] 85%|########4 | 22/26 [00:00<00:00, 42.48it/s]100%|##########| 26/26 [00:00<00:00, 34.78it/s]
Test: [   0/  26]	Loss 0.341 (0.341)	test_acc   0.80 (  0.80)	test_minacc   0.83 (  0.83)	test_majacc   0.80 (  0.80)	Loss_d 0.341 (0.341)	test_acc_d   0.80 (  0.80)	test_minacc_d   0.83 (  0.83)	test_majacc_d   0.80 (  0.80)	test_corr_d   0.62 (  0.62)
Test: [  10/  26]	Loss 0.419 (0.363)	test_acc   0.73 (  0.78)	test_minacc   0.80 (  0.80)	test_majacc   0.71 (  0.78)	Loss_d 0.419 (0.363)	test_acc_d   0.73 (  0.78)	test_minacc_d   0.80 (  0.80)	test_majacc_d   0.71 (  0.78)	test_corr_d   0.57 (  0.60)
Test: [  20/  26]	Loss 0.387 (0.382)	test_acc   0.75 (  0.77)	test_minacc   0.73 (  0.77)	test_majacc   0.76 (  0.77)	Loss_d 0.387 (0.382)	test_acc_d   0.75 (  0.77)	test_minacc_d   0.73 (  0.77)	test_majacc_d   0.76 (  0.77)	test_corr_d   0.63 (  0.60)
Test: [  26/  26]	Loss 0.361 (0.379)	test_acc   0.77 (  0.77)	test_minacc   0.76 (  0.78)	test_majacc   0.77 (  0.77)	Loss_d 0.361 (0.379)	test_acc_d   0.77 (  0.77)	test_minacc_d   0.76 (  0.78)	test_majacc_d   0.77 (  0.77)	test_corr_d   0.63 (  0.60)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 64.93it/s]
Test: [  0/  1]	Loss 1.479 (1.479)	test_acc   0.62 (  0.62)	test_minacc   0.60 (  0.60)	test_majacc   0.79 (  0.79)	Loss_d 1.479 (1.479)	test_acc_d   0.62 (  0.62)	test_minacc_d   0.60 (  0.60)	test_majacc_d   0.79 (  0.79)	test_corr_d   0.16 (  0.16)
Test: [  1/  1]	Loss 1.479 (1.479)	test_acc   0.62 (  0.62)	test_minacc   0.60 (  0.60)	test_majacc   0.79 (  0.79)	Loss_d 1.479 (1.479)	test_acc_d   0.62 (  0.62)	test_minacc_d   0.60 (  0.60)	test_majacc_d   0.79 (  0.79)	test_corr_d   0.16 (  0.16)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/140/checkpoints/model_best.pth
Overall Timing[ 27/  1]	epoch_time 0.0423 (0.0435)	validation_time 0.0004 (0.0007)	train_time 0.0418 (0.0427)
record: (train_acc, test_acc) (0.7732000296115875, 0.6220000386238098)
last accs (train_acc, test_acc) (0.7732000296115875, 0.6220000386238098)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.26it/s] 19%|#9        | 5/26 [00:00<00:01, 17.67it/s] 35%|###4      | 9/26 [00:00<00:00, 23.66it/s] 50%|#####     | 13/26 [00:00<00:00, 27.20it/s] 65%|######5   | 17/26 [00:00<00:00, 28.95it/s] 81%|########  | 21/26 [00:00<00:00, 30.23it/s] 96%|#########6| 25/26 [00:00<00:00, 31.42it/s]100%|##########| 26/26 [00:01<00:00, 25.62it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 728 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 729 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 730 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 731 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 732 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 733 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 734 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 735 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 736 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 737 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 738 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 739 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 740 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 741 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 742 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 743 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 744 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 745 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 746 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 747 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 748 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 749 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 750 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 751 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 752 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 753 400
penalty weights 10000.0
Epoch: [28][  26/  26]	Loss 0.003 (0.002)	train_nll   0.33 (  0.38)	train_penalty   0.00 (  0.00)	weight_norm  25.33 ( 25.33)	train_acc   0.81 (  0.77)	train_minacc   0.76 (  0.77)	train_majacc   0.82 (  0.77)	train_corr   0.00 (  0.00)	l1 5.5507 (5.9397)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:00, 29.87it/s] 31%|###       | 8/26 [00:00<00:00, 39.65it/s]                                               31%|###       | 8/26 [00:00<00:00, 39.65it/s] 50%|#####     | 13/26 [00:00<00:00, 42.43it/s] 69%|######9   | 18/26 [00:00<00:00, 42.74it/s]                                                69%|######9   | 18/26 [00:00<00:00, 42.74it/s] 88%|########8 | 23/26 [00:00<00:00, 41.79it/s]100%|##########| 26/26 [00:00<00:00, 39.47it/s]
Test: [   0/  26]	Loss 0.353 (0.353)	test_acc   0.81 (  0.81)	test_minacc   0.78 (  0.78)	test_majacc   0.82 (  0.82)	Loss_d 0.353 (0.353)	test_acc_d   0.81 (  0.81)	test_minacc_d   0.78 (  0.78)	test_majacc_d   0.82 (  0.82)	test_corr_d   0.65 (  0.65)
Test: [  10/  26]	Loss 0.395 (0.355)	test_acc   0.76 (  0.79)	test_minacc   0.82 (  0.79)	test_majacc   0.76 (  0.80)	Loss_d 0.395 (0.355)	test_acc_d   0.76 (  0.79)	test_minacc_d   0.82 (  0.79)	test_majacc_d   0.76 (  0.80)	test_corr_d   0.58 (  0.62)
Test: [  20/  26]	Loss 0.378 (0.366)	test_acc   0.79 (  0.78)	test_minacc   0.71 (  0.77)	test_majacc   0.80 (  0.79)	Loss_d 0.378 (0.366)	test_acc_d   0.79 (  0.78)	test_minacc_d   0.71 (  0.77)	test_majacc_d   0.80 (  0.79)	test_corr_d   0.66 (  0.63)
Test: [  26/  26]	Loss 0.338 (0.366)	test_acc   0.80 (  0.79)	test_minacc   0.76 (  0.76)	test_majacc   0.81 (  0.79)	Loss_d 0.338 (0.366)	test_acc_d   0.80 (  0.79)	test_minacc_d   0.76 (  0.76)	test_majacc_d   0.81 (  0.79)	test_corr_d   0.64 (  0.63)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 56.77it/s]
Test: [  0/  1]	Loss 1.515 (1.515)	test_acc   0.58 (  0.58)	test_minacc   0.55 (  0.55)	test_majacc   0.82 (  0.82)	Loss_d 1.515 (1.515)	test_acc_d   0.58 (  0.58)	test_minacc_d   0.55 (  0.55)	test_majacc_d   0.82 (  0.82)	test_corr_d   0.19 (  0.19)
Test: [  1/  1]	Loss 1.515 (1.515)	test_acc   0.58 (  0.58)	test_minacc   0.55 (  0.55)	test_majacc   0.82 (  0.82)	Loss_d 1.515 (1.515)	test_acc_d   0.58 (  0.58)	test_minacc_d   0.55 (  0.55)	test_majacc_d   0.82 (  0.82)	test_corr_d   0.19 (  0.19)
Overall Timing[ 28/  1]	epoch_time 0.0417 (0.0434)	validation_time 0.0005 (0.0006)	train_time 0.0412 (0.0426)
record: (train_acc, test_acc) (0.7732000296115875, 0.6220000386238098)
last accs (train_acc, test_acc) (0.7865000301599503, 0.5770000219345093)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.77it/s] 19%|#9        | 5/26 [00:00<00:00, 23.11it/s] 35%|###4      | 9/26 [00:00<00:00, 27.91it/s] 50%|#####     | 13/26 [00:00<00:00, 30.60it/s] 65%|######5   | 17/26 [00:00<00:00, 32.12it/s] 81%|########  | 21/26 [00:00<00:00, 33.23it/s] 96%|#########6| 25/26 [00:00<00:00, 33.94it/s]100%|##########| 26/26 [00:00<00:00, 28.94it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 754 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 755 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 756 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 757 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 758 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 759 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 760 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 761 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 762 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 763 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 764 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 765 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 766 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 767 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 768 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 769 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 770 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 771 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 772 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 773 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 774 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 775 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 776 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 777 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 778 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 779 400
penalty weights 10000.0
Epoch: [29][  26/  26]	Loss 0.001 (0.001)	train_nll   0.35 (  0.37)	train_penalty   0.00 (  0.00)	weight_norm  25.34 ( 25.34)	train_acc   0.80 (  0.78)	train_minacc   0.76 (  0.75)	train_majacc   0.81 (  0.78)	train_corr   0.00 (  0.00)	l1 5.5763 (5.6602)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.63it/s] 19%|#9        | 5/26 [00:00<00:00, 24.55it/s] 38%|###8      | 10/26 [00:00<00:00, 34.47it/s]                                                38%|###8      | 10/26 [00:00<00:00, 34.47it/s] 58%|#####7    | 15/26 [00:00<00:00, 38.67it/s] 77%|#######6  | 20/26 [00:00<00:00, 38.26it/s]                                                77%|#######6  | 20/26 [00:00<00:00, 38.26it/s] 96%|#########6| 25/26 [00:00<00:00, 40.75it/s]100%|##########| 26/26 [00:00<00:00, 34.28it/s]
Test: [   0/  26]	Loss 0.337 (0.337)	test_acc   0.81 (  0.81)	test_minacc   0.73 (  0.73)	test_majacc   0.83 (  0.83)	Loss_d 0.337 (0.337)	test_acc_d   0.81 (  0.81)	test_minacc_d   0.73 (  0.73)	test_majacc_d   0.83 (  0.83)	test_corr_d   0.67 (  0.67)
Test: [  10/  26]	Loss 0.363 (0.333)	test_acc   0.79 (  0.81)	test_minacc   0.84 (  0.78)	test_majacc   0.79 (  0.81)	Loss_d 0.363 (0.333)	test_acc_d   0.79 (  0.81)	test_minacc_d   0.84 (  0.78)	test_majacc_d   0.79 (  0.81)	test_corr_d   0.62 (  0.65)
Test: [  20/  26]	Loss 0.371 (0.350)	test_acc   0.80 (  0.79)	test_minacc   0.73 (  0.76)	test_majacc   0.81 (  0.80)	Loss_d 0.371 (0.350)	test_acc_d   0.80 (  0.79)	test_minacc_d   0.73 (  0.76)	test_majacc_d   0.81 (  0.80)	test_corr_d   0.68 (  0.65)
Test: [  26/  26]	Loss 0.349 (0.351)	test_acc   0.80 (  0.80)	test_minacc   0.76 (  0.76)	test_majacc   0.80 (  0.80)	Loss_d 0.349 (0.351)	test_acc_d   0.80 (  0.80)	test_minacc_d   0.76 (  0.76)	test_majacc_d   0.80 (  0.80)	test_corr_d   0.65 (  0.65)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 64.33it/s]
Test: [  0/  1]	Loss 1.592 (1.592)	test_acc   0.58 (  0.58)	test_minacc   0.55 (  0.55)	test_majacc   0.84 (  0.84)	Loss_d 1.592 (1.592)	test_acc_d   0.58 (  0.58)	test_minacc_d   0.55 (  0.55)	test_majacc_d   0.84 (  0.84)	test_corr_d   0.24 (  0.24)
Test: [  1/  1]	Loss 1.592 (1.592)	test_acc   0.58 (  0.58)	test_minacc   0.55 (  0.55)	test_majacc   0.84 (  0.84)	Loss_d 1.592 (1.592)	test_acc_d   0.58 (  0.58)	test_minacc_d   0.55 (  0.55)	test_majacc_d   0.84 (  0.84)	test_corr_d   0.24 (  0.24)
Overall Timing[ 29/  1]	epoch_time 0.0443 (0.0435)	validation_time 0.0004 (0.0006)	train_time 0.0438 (0.0427)
record: (train_acc, test_acc) (0.7732000296115875, 0.6220000386238098)
last accs (train_acc, test_acc) (0.7950000193119049, 0.5770000219345093)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:05,  4.86it/s] 19%|#9        | 5/26 [00:00<00:01, 17.62it/s] 35%|###4      | 9/26 [00:00<00:00, 23.29it/s] 50%|#####     | 13/26 [00:00<00:00, 26.54it/s] 65%|######5   | 17/26 [00:00<00:00, 28.82it/s] 81%|########  | 21/26 [00:00<00:00, 30.57it/s] 96%|#########6| 25/26 [00:00<00:00, 32.08it/s]100%|##########| 26/26 [00:01<00:00, 25.66it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 780 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 781 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 782 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 783 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 784 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 785 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 786 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 787 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 788 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 789 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 790 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 791 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 792 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 793 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 794 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 795 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 796 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 797 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 798 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 799 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 800 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 801 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 802 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 803 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 804 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 805 400
penalty weights 10000.0
Epoch: [30][  26/  26]	Loss 0.002 (0.001)	train_nll   0.37 (  0.37)	train_penalty   0.00 (  0.00)	weight_norm  25.36 ( 25.35)	train_acc   0.78 (  0.78)	train_minacc   0.50 (  0.77)	train_majacc   0.83 (  0.78)	train_corr   0.00 (  0.00)	l1 5.3796 (5.8527)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.30it/s] 27%|##6       | 7/26 [00:00<00:00, 34.03it/s]                                               27%|##6       | 7/26 [00:00<00:00, 34.03it/s] 46%|####6     | 12/26 [00:00<00:00, 40.64it/s] 65%|######5   | 17/26 [00:00<00:00, 41.76it/s]                                                65%|######5   | 17/26 [00:00<00:00, 41.76it/s] 85%|########4 | 22/26 [00:00<00:00, 41.86it/s]100%|##########| 26/26 [00:00<00:00, 37.40it/s]
Test: [   0/  26]	Loss 0.333 (0.333)	test_acc   0.84 (  0.84)	test_minacc   0.65 (  0.65)	test_majacc   0.88 (  0.88)	Loss_d 0.333 (0.333)	test_acc_d   0.84 (  0.84)	test_minacc_d   0.65 (  0.65)	test_majacc_d   0.88 (  0.88)	test_corr_d   0.69 (  0.69)
Test: [  10/  26]	Loss 0.354 (0.329)	test_acc   0.82 (  0.84)	test_minacc   0.56 (  0.60)	test_majacc   0.85 (  0.88)	Loss_d 0.354 (0.329)	test_acc_d   0.82 (  0.84)	test_minacc_d   0.56 (  0.60)	test_majacc_d   0.85 (  0.88)	test_corr_d   0.65 (  0.67)
Test: [  20/  26]	Loss 0.368 (0.340)	test_acc   0.81 (  0.83)	test_minacc   0.56 (  0.59)	test_majacc   0.85 (  0.87)	Loss_d 0.368 (0.340)	test_acc_d   0.81 (  0.83)	test_minacc_d   0.56 (  0.59)	test_majacc_d   0.85 (  0.87)	test_corr_d   0.69 (  0.67)
Test: [  26/  26]	Loss 0.373 (0.343)	test_acc   0.80 (  0.82)	test_minacc   0.47 (  0.59)	test_majacc   0.85 (  0.87)	Loss_d 0.373 (0.343)	test_acc_d   0.80 (  0.82)	test_minacc_d   0.47 (  0.59)	test_majacc_d   0.85 (  0.87)	test_corr_d   0.66 (  0.67)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 60.56it/s]
Test: [  0/  1]	Loss 1.539 (1.539)	test_acc   0.55 (  0.55)	test_minacc   0.52 (  0.52)	test_majacc   0.79 (  0.79)	Loss_d 1.539 (1.539)	test_acc_d   0.55 (  0.55)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.79 (  0.79)	test_corr_d   0.30 (  0.30)
Test: [  1/  1]	Loss 1.539 (1.539)	test_acc   0.55 (  0.55)	test_minacc   0.52 (  0.52)	test_majacc   0.79 (  0.79)	Loss_d 1.539 (1.539)	test_acc_d   0.55 (  0.55)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.79 (  0.79)	test_corr_d   0.30 (  0.30)
Overall Timing[ 30/  1]	epoch_time 0.0430 (0.0434)	validation_time 0.0004 (0.0006)	train_time 0.0427 (0.0427)
record: (train_acc, test_acc) (0.7732000296115875, 0.6220000386238098)
last accs (train_acc, test_acc) (0.8244000245332718, 0.5509999990463257)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:02,  9.26it/s] 19%|#9        | 5/26 [00:00<00:01, 16.54it/s] 35%|###4      | 9/26 [00:00<00:00, 21.21it/s] 50%|#####     | 13/26 [00:00<00:00, 25.90it/s] 65%|######5   | 17/26 [00:00<00:00, 29.06it/s] 81%|########  | 21/26 [00:00<00:00, 30.87it/s] 96%|#########6| 25/26 [00:00<00:00, 31.83it/s]100%|##########| 26/26 [00:01<00:00, 25.73it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 806 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 807 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 808 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 809 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 810 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 811 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 812 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 813 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 814 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 815 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 816 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 817 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 818 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 819 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 820 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 821 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 822 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 823 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 824 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 825 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 826 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 827 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 828 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 829 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 830 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 831 400
penalty weights 10000.0
Epoch: [31][  26/  26]	Loss 0.001 (0.002)	train_nll   0.39 (  0.38)	train_penalty   0.00 (  0.00)	weight_norm  25.38 ( 25.38)	train_acc   0.74 (  0.79)	train_minacc   0.95 (  0.56)	train_majacc   0.71 (  0.83)	train_corr   0.00 (  0.00)	l1 5.8405 (6.0071)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:00, 24.49it/s] 31%|###       | 8/26 [00:00<00:00, 36.88it/s]                                               31%|###       | 8/26 [00:00<00:00, 36.88it/s] 50%|#####     | 13/26 [00:00<00:00, 40.71it/s] 69%|######9   | 18/26 [00:00<00:00, 43.05it/s]                                                69%|######9   | 18/26 [00:00<00:00, 43.05it/s] 88%|########8 | 23/26 [00:00<00:00, 40.96it/s]100%|##########| 26/26 [00:00<00:00, 37.72it/s]
Test: [   0/  26]	Loss 0.350 (0.350)	test_acc   0.78 (  0.78)	test_minacc   0.89 (  0.89)	test_majacc   0.76 (  0.76)	Loss_d 0.350 (0.350)	test_acc_d   0.78 (  0.78)	test_minacc_d   0.89 (  0.89)	test_majacc_d   0.76 (  0.76)	test_corr_d   0.65 (  0.65)
Test: [  10/  26]	Loss 0.367 (0.352)	test_acc   0.73 (  0.77)	test_minacc   0.94 (  0.92)	test_majacc   0.69 (  0.74)	Loss_d 0.367 (0.352)	test_acc_d   0.73 (  0.77)	test_minacc_d   0.94 (  0.92)	test_majacc_d   0.69 (  0.74)	test_corr_d   0.61 (  0.63)
Test: [  20/  26]	Loss 0.360 (0.348)	test_acc   0.77 (  0.77)	test_minacc   0.87 (  0.92)	test_majacc   0.76 (  0.74)	Loss_d 0.360 (0.348)	test_acc_d   0.77 (  0.77)	test_minacc_d   0.87 (  0.92)	test_majacc_d   0.76 (  0.74)	test_corr_d   0.65 (  0.63)
Test: [  26/  26]	Loss 0.381 (0.350)	test_acc   0.74 (  0.77)	test_minacc   0.95 (  0.92)	test_majacc   0.71 (  0.74)	Loss_d 0.381 (0.350)	test_acc_d   0.74 (  0.77)	test_minacc_d   0.95 (  0.92)	test_majacc_d   0.71 (  0.74)	test_corr_d   0.62 (  0.63)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.31it/s]
Test: [  0/  1]	Loss 1.592 (1.592)	test_acc   0.63 (  0.63)	test_minacc   0.62 (  0.62)	test_majacc   0.77 (  0.77)	Loss_d 1.592 (1.592)	test_acc_d   0.63 (  0.63)	test_minacc_d   0.62 (  0.62)	test_majacc_d   0.77 (  0.77)	test_corr_d   0.22 (  0.22)
Test: [  1/  1]	Loss 1.592 (1.592)	test_acc   0.63 (  0.63)	test_minacc   0.62 (  0.62)	test_majacc   0.77 (  0.77)	Loss_d 1.592 (1.592)	test_acc_d   0.63 (  0.63)	test_minacc_d   0.62 (  0.62)	test_majacc_d   0.77 (  0.77)	test_corr_d   0.22 (  0.22)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/140/checkpoints/model_best.pth
Overall Timing[ 31/  1]	epoch_time 0.0465 (0.0435)	validation_time 0.0004 (0.0006)	train_time 0.0461 (0.0428)
record: (train_acc, test_acc) (0.7671000244021415, 0.6340000033378601)
last accs (train_acc, test_acc) (0.7671000244021415, 0.6340000033378601)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  6.16it/s] 19%|#9        | 5/26 [00:00<00:01, 20.26it/s] 35%|###4      | 9/26 [00:00<00:00, 26.21it/s] 50%|#####     | 13/26 [00:00<00:00, 29.14it/s] 65%|######5   | 17/26 [00:00<00:00, 30.65it/s] 81%|########  | 21/26 [00:00<00:00, 32.40it/s] 96%|#########6| 25/26 [00:00<00:00, 33.15it/s]100%|##########| 26/26 [00:00<00:00, 27.29it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 832 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 833 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 834 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 835 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 836 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 837 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 838 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 839 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 840 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 841 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 842 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 843 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 844 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 845 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 846 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 847 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 848 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 849 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 850 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 851 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 852 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 853 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 854 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 855 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 856 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 857 400
penalty weights 10000.0
Epoch: [32][  26/  26]	Loss 0.000 (0.001)	train_nll   0.38 (  0.37)	train_penalty   0.00 (  0.00)	weight_norm  25.39 ( 25.39)	train_acc   0.79 (  0.78)	train_minacc   0.84 (  0.84)	train_majacc   0.78 (  0.77)	train_corr   0.00 (  0.00)	l1 5.9343 (5.8591)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.48it/s] 27%|##6       | 7/26 [00:00<00:00, 27.52it/s]                                               27%|##6       | 7/26 [00:00<00:00, 27.52it/s] 46%|####6     | 12/26 [00:00<00:00, 34.62it/s] 65%|######5   | 17/26 [00:00<00:00, 38.62it/s]                                                65%|######5   | 17/26 [00:00<00:00, 38.62it/s] 88%|########8 | 23/26 [00:00<00:00, 43.74it/s]100%|##########| 26/26 [00:00<00:00, 34.67it/s]
Test: [   0/  26]	Loss 0.383 (0.383)	test_acc   0.76 (  0.76)	test_minacc   0.78 (  0.78)	test_majacc   0.76 (  0.76)	Loss_d 0.383 (0.383)	test_acc_d   0.76 (  0.76)	test_minacc_d   0.78 (  0.78)	test_majacc_d   0.76 (  0.76)	test_corr_d   0.59 (  0.59)
Test: [  10/  26]	Loss 0.404 (0.391)	test_acc   0.78 (  0.78)	test_minacc   0.88 (  0.81)	test_majacc   0.77 (  0.77)	Loss_d 0.404 (0.391)	test_acc_d   0.78 (  0.78)	test_minacc_d   0.88 (  0.81)	test_majacc_d   0.77 (  0.77)	test_corr_d   0.57 (  0.58)
Test: [  20/  26]	Loss 0.377 (0.377)	test_acc   0.79 (  0.78)	test_minacc   0.81 (  0.82)	test_majacc   0.79 (  0.77)	Loss_d 0.377 (0.377)	test_acc_d   0.79 (  0.78)	test_minacc_d   0.81 (  0.82)	test_majacc_d   0.79 (  0.77)	test_corr_d   0.61 (  0.59)
Test: [  26/  26]	Loss 0.377 (0.375)	test_acc   0.79 (  0.78)	test_minacc   0.84 (  0.82)	test_majacc   0.78 (  0.78)	Loss_d 0.377 (0.375)	test_acc_d   0.79 (  0.78)	test_minacc_d   0.84 (  0.82)	test_majacc_d   0.78 (  0.78)	test_corr_d   0.59 (  0.59)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.85it/s]
Test: [  0/  1]	Loss 1.611 (1.611)	test_acc   0.59 (  0.59)	test_minacc   0.56 (  0.56)	test_majacc   0.81 (  0.81)	Loss_d 1.611 (1.611)	test_acc_d   0.59 (  0.59)	test_minacc_d   0.56 (  0.56)	test_majacc_d   0.81 (  0.81)	test_corr_d   0.18 (  0.18)
Test: [  1/  1]	Loss 1.611 (1.611)	test_acc   0.59 (  0.59)	test_minacc   0.56 (  0.56)	test_majacc   0.81 (  0.81)	Loss_d 1.611 (1.611)	test_acc_d   0.59 (  0.59)	test_minacc_d   0.56 (  0.56)	test_majacc_d   0.81 (  0.81)	test_corr_d   0.18 (  0.18)
Overall Timing[ 32/  1]	epoch_time 0.0412 (0.0435)	validation_time 0.0004 (0.0006)	train_time 0.0408 (0.0427)
record: (train_acc, test_acc) (0.7671000244021415, 0.6340000033378601)
last accs (train_acc, test_acc) (0.7829000267982483, 0.5850000381469727)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.94it/s] 19%|#9        | 5/26 [00:00<00:00, 22.93it/s] 35%|###4      | 9/26 [00:00<00:00, 27.97it/s] 50%|#####     | 13/26 [00:00<00:00, 30.78it/s] 65%|######5   | 17/26 [00:00<00:00, 32.38it/s] 81%|########  | 21/26 [00:00<00:00, 33.55it/s] 96%|#########6| 25/26 [00:00<00:00, 34.14it/s]100%|##########| 26/26 [00:00<00:00, 29.18it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 858 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 859 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 860 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 861 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 862 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 863 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 864 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 865 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 866 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 867 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 868 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 869 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 870 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 871 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 872 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 873 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 874 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 875 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 876 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 877 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 878 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 879 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 880 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 881 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 882 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 883 400
penalty weights 10000.0
Epoch: [33][  26/  26]	Loss 0.000 (0.001)	train_nll   0.40 (  0.38)	train_penalty   0.00 (  0.00)	weight_norm  25.40 ( 25.39)	train_acc   0.77 (  0.78)	train_minacc   0.82 (  0.83)	train_majacc   0.76 (  0.78)	train_corr   0.00 (  0.00)	l1 6.3080 (5.9979)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:00, 28.68it/s] 31%|###       | 8/26 [00:00<00:00, 39.53it/s]                                               31%|###       | 8/26 [00:00<00:00, 39.53it/s] 50%|#####     | 13/26 [00:00<00:00, 38.04it/s] 69%|######9   | 18/26 [00:00<00:00, 41.27it/s]                                                69%|######9   | 18/26 [00:00<00:00, 41.27it/s] 88%|########8 | 23/26 [00:00<00:00, 42.77it/s]100%|##########| 26/26 [00:00<00:00, 37.23it/s]
Test: [   0/  26]	Loss 0.418 (0.418)	test_acc   0.75 (  0.75)	test_minacc   0.83 (  0.83)	test_majacc   0.74 (  0.74)	Loss_d 0.418 (0.418)	test_acc_d   0.75 (  0.75)	test_minacc_d   0.83 (  0.83)	test_majacc_d   0.74 (  0.74)	test_corr_d   0.54 (  0.54)
Test: [  10/  26]	Loss 0.448 (0.427)	test_acc   0.74 (  0.75)	test_minacc   0.82 (  0.80)	test_majacc   0.73 (  0.75)	Loss_d 0.448 (0.427)	test_acc_d   0.74 (  0.75)	test_minacc_d   0.82 (  0.80)	test_majacc_d   0.73 (  0.75)	test_corr_d   0.52 (  0.53)
Test: [  20/  26]	Loss 0.414 (0.419)	test_acc   0.77 (  0.76)	test_minacc   0.83 (  0.80)	test_majacc   0.76 (  0.75)	Loss_d 0.414 (0.419)	test_acc_d   0.77 (  0.76)	test_minacc_d   0.83 (  0.80)	test_majacc_d   0.76 (  0.75)	test_corr_d   0.57 (  0.55)
Test: [  26/  26]	Loss 0.398 (0.416)	test_acc   0.77 (  0.76)	test_minacc   0.82 (  0.80)	test_majacc   0.76 (  0.75)	Loss_d 0.398 (0.416)	test_acc_d   0.77 (  0.76)	test_minacc_d   0.82 (  0.80)	test_majacc_d   0.76 (  0.75)	test_corr_d   0.57 (  0.55)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.08it/s]
Test: [  0/  1]	Loss 1.619 (1.619)	test_acc   0.59 (  0.59)	test_minacc   0.57 (  0.57)	test_majacc   0.78 (  0.78)	Loss_d 1.619 (1.619)	test_acc_d   0.59 (  0.59)	test_minacc_d   0.57 (  0.57)	test_majacc_d   0.78 (  0.78)	test_corr_d   0.12 (  0.12)
Test: [  1/  1]	Loss 1.619 (1.619)	test_acc   0.59 (  0.59)	test_minacc   0.57 (  0.57)	test_majacc   0.78 (  0.78)	Loss_d 1.619 (1.619)	test_acc_d   0.59 (  0.59)	test_minacc_d   0.57 (  0.57)	test_majacc_d   0.78 (  0.78)	test_corr_d   0.12 (  0.12)
Overall Timing[ 33/  1]	epoch_time 0.0415 (0.0434)	validation_time 0.0003 (0.0006)	train_time 0.0411 (0.0427)
record: (train_acc, test_acc) (0.7671000244021415, 0.6340000033378601)
last accs (train_acc, test_acc) (0.7597000292539596, 0.5940000414848328)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.75it/s] 19%|#9        | 5/26 [00:00<00:01, 19.28it/s] 35%|###4      | 9/26 [00:00<00:00, 25.31it/s] 50%|#####     | 13/26 [00:00<00:00, 28.94it/s] 65%|######5   | 17/26 [00:00<00:00, 31.14it/s] 81%|########  | 21/26 [00:00<00:00, 33.02it/s] 96%|#########6| 25/26 [00:00<00:00, 33.93it/s]100%|##########| 26/26 [00:00<00:00, 27.68it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 884 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 885 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 886 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 887 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 888 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 889 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 890 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 891 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 892 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 893 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 894 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 895 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 896 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 897 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 898 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 899 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 900 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 901 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 902 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 903 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 904 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 905 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 906 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 907 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 908 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 909 400
penalty weights 10000.0
Epoch: [34][  26/  26]	Loss 0.001 (0.001)	train_nll   0.38 (  0.39)	train_penalty   0.00 (  0.00)	weight_norm  25.40 ( 25.40)	train_acc   0.78 (  0.77)	train_minacc   0.97 (  0.86)	train_majacc   0.75 (  0.75)	train_corr   0.00 (  0.00)	l1 6.1191 (6.0116)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.42it/s] 23%|##3       | 6/26 [00:00<00:00, 24.26it/s]                                               23%|##3       | 6/26 [00:00<00:00, 24.26it/s] 42%|####2     | 11/26 [00:00<00:00, 33.53it/s] 65%|######5   | 17/26 [00:00<00:00, 39.78it/s]                                                65%|######5   | 17/26 [00:00<00:00, 39.78it/s] 88%|########8 | 23/26 [00:00<00:00, 43.87it/s]100%|##########| 26/26 [00:00<00:00, 34.71it/s]
Test: [   0/  26]	Loss 0.374 (0.374)	test_acc   0.77 (  0.77)	test_minacc   0.90 (  0.90)	test_majacc   0.75 (  0.75)	Loss_d 0.374 (0.374)	test_acc_d   0.77 (  0.77)	test_minacc_d   0.90 (  0.90)	test_majacc_d   0.75 (  0.75)	test_corr_d   0.57 (  0.57)
Test: [  10/  26]	Loss 0.432 (0.390)	test_acc   0.72 (  0.75)	test_minacc   0.90 (  0.88)	test_majacc   0.69 (  0.72)	Loss_d 0.432 (0.390)	test_acc_d   0.72 (  0.75)	test_minacc_d   0.90 (  0.88)	test_majacc_d   0.69 (  0.72)	test_corr_d   0.52 (  0.55)
Test: [  20/  26]	Loss 0.399 (0.394)	test_acc   0.75 (  0.75)	test_minacc   0.88 (  0.88)	test_majacc   0.73 (  0.72)	Loss_d 0.399 (0.394)	test_acc_d   0.75 (  0.75)	test_minacc_d   0.88 (  0.88)	test_majacc_d   0.73 (  0.72)	test_corr_d   0.57 (  0.56)
Test: [  26/  26]	Loss 0.388 (0.393)	test_acc   0.76 (  0.75)	test_minacc   0.97 (  0.89)	test_majacc   0.73 (  0.72)	Loss_d 0.388 (0.393)	test_acc_d   0.76 (  0.75)	test_minacc_d   0.97 (  0.89)	test_majacc_d   0.73 (  0.72)	test_corr_d   0.57 (  0.56)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.02it/s]
Test: [  0/  1]	Loss 1.530 (1.530)	test_acc   0.64 (  0.64)	test_minacc   0.63 (  0.63)	test_majacc   0.78 (  0.78)	Loss_d 1.530 (1.530)	test_acc_d   0.64 (  0.64)	test_minacc_d   0.63 (  0.63)	test_majacc_d   0.78 (  0.78)	test_corr_d   0.09 (  0.09)
Test: [  1/  1]	Loss 1.530 (1.530)	test_acc   0.64 (  0.64)	test_minacc   0.63 (  0.63)	test_majacc   0.78 (  0.78)	Loss_d 1.530 (1.530)	test_acc_d   0.64 (  0.64)	test_minacc_d   0.63 (  0.63)	test_majacc_d   0.78 (  0.78)	test_corr_d   0.09 (  0.09)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/140/checkpoints/model_best.pth
Overall Timing[ 34/  1]	epoch_time 0.0404 (0.0433)	validation_time 0.0005 (0.0006)	train_time 0.0399 (0.0426)
record: (train_acc, test_acc) (0.74870003002882, 0.6420000195503235)
last accs (train_acc, test_acc) (0.74870003002882, 0.6420000195503235)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.43it/s] 15%|#5        | 4/26 [00:00<00:01, 17.68it/s] 31%|###       | 8/26 [00:00<00:00, 25.49it/s] 46%|####6     | 12/26 [00:00<00:00, 29.79it/s] 62%|######1   | 16/26 [00:00<00:00, 31.46it/s] 77%|#######6  | 20/26 [00:00<00:00, 32.53it/s] 92%|#########2| 24/26 [00:00<00:00, 33.47it/s]100%|##########| 26/26 [00:00<00:00, 27.93it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 910 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 911 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 912 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 913 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 914 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 915 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 916 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 917 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 918 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 919 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 920 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 921 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 922 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 923 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 924 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 925 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 926 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 927 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 928 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 929 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 930 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 931 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 932 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 933 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 934 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 935 400
penalty weights 10000.0
Epoch: [35][  26/  26]	Loss 0.001 (0.000)	train_nll   0.39 (  0.40)	train_penalty   0.00 (  0.00)	weight_norm  25.41 ( 25.41)	train_acc   0.74 (  0.73)	train_minacc   0.95 (  0.89)	train_majacc   0.70 (  0.71)	train_corr   0.00 (  0.00)	l1 5.9191 (6.1960)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 13.91it/s] 27%|##6       | 7/26 [00:00<00:00, 30.32it/s]                                               27%|##6       | 7/26 [00:00<00:00, 30.32it/s] 46%|####6     | 12/26 [00:00<00:00, 36.40it/s] 65%|######5   | 17/26 [00:00<00:00, 39.30it/s]                                                65%|######5   | 17/26 [00:00<00:00, 39.30it/s] 85%|########4 | 22/26 [00:00<00:00, 38.74it/s]100%|##########| 26/26 [00:00<00:00, 35.28it/s]
Test: [   0/  26]	Loss 0.383 (0.383)	test_acc   0.75 (  0.75)	test_minacc   0.90 (  0.90)	test_majacc   0.72 (  0.72)	Loss_d 0.383 (0.383)	test_acc_d   0.75 (  0.75)	test_minacc_d   0.90 (  0.90)	test_majacc_d   0.72 (  0.72)	test_corr_d   0.61 (  0.61)
Test: [  10/  26]	Loss 0.399 (0.384)	test_acc   0.70 (  0.74)	test_minacc   0.96 (  0.91)	test_majacc   0.66 (  0.71)	Loss_d 0.399 (0.384)	test_acc_d   0.70 (  0.74)	test_minacc_d   0.96 (  0.91)	test_majacc_d   0.66 (  0.71)	test_corr_d   0.58 (  0.59)
Test: [  20/  26]	Loss 0.402 (0.386)	test_acc   0.71 (  0.73)	test_minacc   0.85 (  0.91)	test_majacc   0.69 (  0.70)	Loss_d 0.402 (0.386)	test_acc_d   0.71 (  0.73)	test_minacc_d   0.85 (  0.91)	test_majacc_d   0.69 (  0.70)	test_corr_d   0.62 (  0.60)
Test: [  26/  26]	Loss 0.394 (0.387)	test_acc   0.73 (  0.73)	test_minacc   0.95 (  0.91)	test_majacc   0.69 (  0.70)	Loss_d 0.394 (0.387)	test_acc_d   0.73 (  0.73)	test_minacc_d   0.95 (  0.91)	test_majacc_d   0.69 (  0.70)	test_corr_d   0.60 (  0.60)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 58.48it/s]
Test: [  0/  1]	Loss 1.560 (1.560)	test_acc   0.64 (  0.64)	test_minacc   0.63 (  0.63)	test_majacc   0.77 (  0.77)	Loss_d 1.560 (1.560)	test_acc_d   0.64 (  0.64)	test_minacc_d   0.63 (  0.63)	test_majacc_d   0.77 (  0.77)	test_corr_d   0.19 (  0.19)
Test: [  1/  1]	Loss 1.560 (1.560)	test_acc   0.64 (  0.64)	test_minacc   0.63 (  0.63)	test_majacc   0.77 (  0.77)	Loss_d 1.560 (1.560)	test_acc_d   0.64 (  0.64)	test_minacc_d   0.63 (  0.63)	test_majacc_d   0.77 (  0.77)	test_corr_d   0.19 (  0.19)
Overall Timing[ 35/  1]	epoch_time 0.0425 (0.0433)	validation_time 0.0006 (0.0006)	train_time 0.0419 (0.0426)
record: (train_acc, test_acc) (0.74870003002882, 0.6420000195503235)
last accs (train_acc, test_acc) (0.7320000296831131, 0.64000004529953)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.76it/s] 19%|#9        | 5/26 [00:00<00:00, 21.39it/s] 35%|###4      | 9/26 [00:00<00:00, 27.11it/s] 50%|#####     | 13/26 [00:00<00:00, 30.20it/s] 65%|######5   | 17/26 [00:00<00:00, 32.39it/s] 81%|########  | 21/26 [00:00<00:00, 33.90it/s] 96%|#########6| 25/26 [00:00<00:00, 34.36it/s]100%|##########| 26/26 [00:00<00:00, 28.88it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 936 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 937 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 938 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 939 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 940 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 941 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 942 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 943 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 944 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 945 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 946 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 947 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 948 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 949 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 950 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 951 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 952 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 953 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 954 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 955 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 956 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 957 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 958 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 959 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 960 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 961 400
penalty weights 10000.0
Epoch: [36][  26/  26]	Loss 0.000 (0.000)	train_nll   0.42 (  0.40)	train_penalty   0.00 (  0.00)	weight_norm  25.41 ( 25.41)	train_acc   0.66 (  0.71)	train_minacc   0.92 (  0.91)	train_majacc   0.62 (  0.67)	train_corr   0.00 (  0.00)	l1 6.0638 (6.1073)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.97it/s] 23%|##3       | 6/26 [00:00<00:00, 26.64it/s]                                               23%|##3       | 6/26 [00:00<00:00, 26.64it/s] 42%|####2     | 11/26 [00:00<00:00, 34.39it/s] 62%|######1   | 16/26 [00:00<00:00, 39.08it/s]                                                62%|######1   | 16/26 [00:00<00:00, 39.08it/s] 81%|########  | 21/26 [00:00<00:00, 38.84it/s]100%|##########| 26/26 [00:00<00:00, 41.78it/s]100%|##########| 26/26 [00:00<00:00, 33.60it/s]
Test: [   0/  26]	Loss 0.395 (0.395)	test_acc   0.71 (  0.71)	test_minacc   0.90 (  0.90)	test_majacc   0.68 (  0.68)	Loss_d 0.395 (0.395)	test_acc_d   0.71 (  0.71)	test_minacc_d   0.90 (  0.90)	test_majacc_d   0.68 (  0.68)	test_corr_d   0.58 (  0.58)
Test: [  10/  26]	Loss 0.414 (0.403)	test_acc   0.67 (  0.70)	test_minacc   0.94 (  0.92)	test_majacc   0.63 (  0.67)	Loss_d 0.414 (0.403)	test_acc_d   0.67 (  0.70)	test_minacc_d   0.94 (  0.92)	test_majacc_d   0.63 (  0.67)	test_corr_d   0.56 (  0.57)
Test: [  20/  26]	Loss 0.407 (0.398)	test_acc   0.71 (  0.71)	test_minacc   0.90 (  0.92)	test_majacc   0.68 (  0.67)	Loss_d 0.407 (0.398)	test_acc_d   0.71 (  0.71)	test_minacc_d   0.90 (  0.92)	test_majacc_d   0.68 (  0.67)	test_corr_d   0.60 (  0.58)
Test: [  26/  26]	Loss 0.413 (0.399)	test_acc   0.67 (  0.71)	test_minacc   0.92 (  0.92)	test_majacc   0.63 (  0.67)	Loss_d 0.413 (0.399)	test_acc_d   0.67 (  0.71)	test_minacc_d   0.92 (  0.92)	test_majacc_d   0.63 (  0.67)	test_corr_d   0.58 (  0.58)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.04it/s]
Test: [  0/  1]	Loss 1.554 (1.554)	test_acc   0.68 (  0.68)	test_minacc   0.67 (  0.67)	test_majacc   0.77 (  0.77)	Loss_d 1.554 (1.554)	test_acc_d   0.68 (  0.68)	test_minacc_d   0.67 (  0.67)	test_majacc_d   0.77 (  0.77)	test_corr_d   0.16 (  0.16)
Test: [  1/  1]	Loss 1.554 (1.554)	test_acc   0.68 (  0.68)	test_minacc   0.67 (  0.67)	test_majacc   0.77 (  0.77)	Loss_d 1.554 (1.554)	test_acc_d   0.68 (  0.68)	test_minacc_d   0.67 (  0.67)	test_majacc_d   0.77 (  0.77)	test_corr_d   0.16 (  0.16)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/140/checkpoints/model_best.pth
Overall Timing[ 36/  1]	epoch_time 0.0401 (0.0432)	validation_time 0.0004 (0.0006)	train_time 0.0397 (0.0425)
record: (train_acc, test_acc) (0.706700031042099, 0.6810000538825989)
last accs (train_acc, test_acc) (0.706700031042099, 0.6810000538825989)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  6.19it/s] 19%|#9        | 5/26 [00:00<00:01, 20.70it/s] 35%|###4      | 9/26 [00:00<00:00, 26.52it/s] 50%|#####     | 13/26 [00:00<00:00, 29.74it/s] 65%|######5   | 17/26 [00:00<00:00, 31.17it/s] 81%|########  | 21/26 [00:00<00:00, 32.63it/s] 96%|#########6| 25/26 [00:00<00:00, 33.78it/s]100%|##########| 26/26 [00:00<00:00, 27.95it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 962 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 963 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 964 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 965 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 966 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 967 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 968 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 969 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 970 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 971 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 972 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 973 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 974 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 975 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 976 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 977 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 978 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 979 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 980 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 981 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 982 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 983 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 984 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 985 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 986 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 987 400
penalty weights 10000.0
Epoch: [37][  26/  26]	Loss 0.000 (0.000)	train_nll   0.41 (  0.39)	train_penalty   0.00 (  0.00)	weight_norm  25.42 ( 25.41)	train_acc   0.70 (  0.71)	train_minacc   0.97 (  0.93)	train_majacc   0.65 (  0.68)	train_corr   0.00 (  0.00)	l1 6.1936 (5.9732)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.55it/s] 23%|##3       | 6/26 [00:00<00:00, 24.85it/s]                                               23%|##3       | 6/26 [00:00<00:00, 24.85it/s] 42%|####2     | 11/26 [00:00<00:00, 32.96it/s] 62%|######1   | 16/26 [00:00<00:00, 38.08it/s]                                                62%|######1   | 16/26 [00:00<00:00, 38.08it/s] 81%|########  | 21/26 [00:00<00:00, 37.99it/s]100%|##########| 26/26 [00:00<00:00, 40.97it/s]100%|##########| 26/26 [00:00<00:00, 32.87it/s]
Test: [   0/  26]	Loss 0.395 (0.395)	test_acc   0.72 (  0.72)	test_minacc   0.92 (  0.92)	test_majacc   0.68 (  0.68)	Loss_d 0.395 (0.395)	test_acc_d   0.72 (  0.72)	test_minacc_d   0.92 (  0.92)	test_majacc_d   0.68 (  0.68)	test_corr_d   0.57 (  0.57)
Test: [  10/  26]	Loss 0.429 (0.409)	test_acc   0.66 (  0.70)	test_minacc   0.94 (  0.92)	test_majacc   0.61 (  0.66)	Loss_d 0.429 (0.409)	test_acc_d   0.66 (  0.70)	test_minacc_d   0.94 (  0.92)	test_majacc_d   0.61 (  0.66)	test_corr_d   0.54 (  0.55)
Test: [  20/  26]	Loss 0.404 (0.404)	test_acc   0.71 (  0.70)	test_minacc   0.90 (  0.93)	test_majacc   0.68 (  0.66)	Loss_d 0.404 (0.404)	test_acc_d   0.71 (  0.70)	test_minacc_d   0.90 (  0.93)	test_majacc_d   0.68 (  0.66)	test_corr_d   0.58 (  0.56)
Test: [  26/  26]	Loss 0.406 (0.403)	test_acc   0.70 (  0.70)	test_minacc   0.97 (  0.93)	test_majacc   0.65 (  0.66)	Loss_d 0.406 (0.403)	test_acc_d   0.70 (  0.70)	test_minacc_d   0.97 (  0.93)	test_majacc_d   0.65 (  0.66)	test_corr_d   0.56 (  0.57)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.19it/s]
Test: [  0/  1]	Loss 1.572 (1.572)	test_acc   0.69 (  0.69)	test_minacc   0.68 (  0.68)	test_majacc   0.76 (  0.76)	Loss_d 1.572 (1.572)	test_acc_d   0.69 (  0.69)	test_minacc_d   0.68 (  0.68)	test_majacc_d   0.76 (  0.76)	test_corr_d   0.12 (  0.12)
Test: [  1/  1]	Loss 1.572 (1.572)	test_acc   0.69 (  0.69)	test_minacc   0.68 (  0.68)	test_majacc   0.76 (  0.76)	Loss_d 1.572 (1.572)	test_acc_d   0.69 (  0.69)	test_minacc_d   0.68 (  0.68)	test_majacc_d   0.76 (  0.76)	test_corr_d   0.12 (  0.12)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/140/checkpoints/model_best.pth
Overall Timing[ 37/  1]	epoch_time 0.0419 (0.0432)	validation_time 0.0004 (0.0006)	train_time 0.0414 (0.0425)
record: (train_acc, test_acc) (0.7028000321984291, 0.6860000491142273)
last accs (train_acc, test_acc) (0.7028000321984291, 0.6860000491142273)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.22it/s] 19%|#9        | 5/26 [00:00<00:00, 23.48it/s] 35%|###4      | 9/26 [00:00<00:00, 27.75it/s] 50%|#####     | 13/26 [00:00<00:00, 30.10it/s] 65%|######5   | 17/26 [00:00<00:00, 31.35it/s] 81%|########  | 21/26 [00:00<00:00, 32.33it/s] 96%|#########6| 25/26 [00:00<00:00, 33.10it/s]100%|##########| 26/26 [00:00<00:00, 28.44it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 988 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 989 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 990 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 991 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 992 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 993 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 994 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 995 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 996 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 997 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 998 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 999 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1000 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1001 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1002 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1003 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1004 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1005 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1006 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1007 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1008 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1009 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1010 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1011 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1012 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1013 400
penalty weights 10000.0
Epoch: [38][  26/  26]	Loss 0.000 (0.000)	train_nll   0.39 (  0.39)	train_penalty   0.00 (  0.00)	weight_norm  25.42 ( 25.42)	train_acc   0.70 (  0.72)	train_minacc   0.97 (  0.93)	train_majacc   0.65 (  0.68)	train_corr   0.00 (  0.00)	l1 6.0365 (6.0744)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.02it/s] 23%|##3       | 6/26 [00:00<00:00, 23.47it/s]                                               23%|##3       | 6/26 [00:00<00:00, 23.47it/s] 42%|####2     | 11/26 [00:00<00:00, 28.97it/s] 62%|######1   | 16/26 [00:00<00:00, 34.76it/s]                                                62%|######1   | 16/26 [00:00<00:00, 34.76it/s] 81%|########  | 21/26 [00:00<00:00, 38.21it/s]100%|##########| 26/26 [00:00<00:00, 41.04it/s]100%|##########| 26/26 [00:00<00:00, 31.55it/s]
Test: [   0/  26]	Loss 0.374 (0.374)	test_acc   0.73 (  0.73)	test_minacc   0.92 (  0.92)	test_majacc   0.70 (  0.70)	Loss_d 0.374 (0.374)	test_acc_d   0.73 (  0.73)	test_minacc_d   0.92 (  0.92)	test_majacc_d   0.70 (  0.70)	test_corr_d   0.59 (  0.59)
Test: [  10/  26]	Loss 0.413 (0.383)	test_acc   0.68 (  0.73)	test_minacc   0.94 (  0.93)	test_majacc   0.65 (  0.69)	Loss_d 0.413 (0.383)	test_acc_d   0.68 (  0.73)	test_minacc_d   0.94 (  0.93)	test_majacc_d   0.65 (  0.69)	test_corr_d   0.56 (  0.58)
Test: [  20/  26]	Loss 0.395 (0.385)	test_acc   0.71 (  0.72)	test_minacc   0.90 (  0.92)	test_majacc   0.68 (  0.69)	Loss_d 0.395 (0.385)	test_acc_d   0.71 (  0.72)	test_minacc_d   0.90 (  0.92)	test_majacc_d   0.68 (  0.69)	test_corr_d   0.60 (  0.58)
Test: [  26/  26]	Loss 0.394 (0.385)	test_acc   0.70 (  0.72)	test_minacc   0.97 (  0.92)	test_majacc   0.65 (  0.69)	Loss_d 0.394 (0.385)	test_acc_d   0.70 (  0.72)	test_minacc_d   0.97 (  0.92)	test_majacc_d   0.65 (  0.69)	test_corr_d   0.58 (  0.58)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.39it/s]
Test: [  0/  1]	Loss 1.551 (1.551)	test_acc   0.67 (  0.67)	test_minacc   0.66 (  0.66)	test_majacc   0.75 (  0.75)	Loss_d 1.551 (1.551)	test_acc_d   0.67 (  0.67)	test_minacc_d   0.66 (  0.66)	test_majacc_d   0.75 (  0.75)	test_corr_d   0.13 (  0.13)
Test: [  1/  1]	Loss 1.551 (1.551)	test_acc   0.67 (  0.67)	test_minacc   0.66 (  0.66)	test_majacc   0.75 (  0.75)	Loss_d 1.551 (1.551)	test_acc_d   0.67 (  0.67)	test_minacc_d   0.66 (  0.66)	test_majacc_d   0.75 (  0.75)	test_corr_d   0.13 (  0.13)
Overall Timing[ 38/  1]	epoch_time 0.0415 (0.0431)	validation_time 0.0004 (0.0006)	train_time 0.0410 (0.0424)
record: (train_acc, test_acc) (0.7028000321984291, 0.6860000491142273)
last accs (train_acc, test_acc) (0.722500033557415, 0.6720000505447388)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:02, 11.24it/s] 23%|##3       | 6/26 [00:00<00:00, 22.20it/s] 38%|###8      | 10/26 [00:00<00:00, 27.11it/s] 54%|#####3    | 14/26 [00:00<00:00, 29.67it/s] 69%|######9   | 18/26 [00:00<00:00, 31.62it/s] 85%|########4 | 22/26 [00:00<00:00, 32.89it/s]100%|##########| 26/26 [00:00<00:00, 33.67it/s]100%|##########| 26/26 [00:00<00:00, 28.08it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1014 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1015 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1016 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1017 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1018 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1019 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1020 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1021 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1022 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1023 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1024 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1025 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1026 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1027 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1028 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1029 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1030 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1031 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1032 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1033 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1034 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1035 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1036 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1037 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1038 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1039 400
penalty weights 10000.0
Epoch: [39][  26/  26]	Loss 0.000 (0.000)	train_nll   0.40 (  0.39)	train_penalty   0.00 (  0.00)	weight_norm  25.42 ( 25.42)	train_acc   0.68 (  0.71)	train_minacc   0.95 (  0.92)	train_majacc   0.64 (  0.67)	train_corr   0.00 (  0.00)	l1 6.0534 (6.1837)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.71it/s] 23%|##3       | 6/26 [00:00<00:00, 29.47it/s]                                               23%|##3       | 6/26 [00:00<00:00, 29.47it/s] 42%|####2     | 11/26 [00:00<00:00, 36.47it/s] 62%|######1   | 16/26 [00:00<00:00, 40.20it/s]                                                62%|######1   | 16/26 [00:00<00:00, 40.20it/s] 81%|########  | 21/26 [00:00<00:00, 37.39it/s]100%|##########| 26/26 [00:00<00:00, 40.61it/s]100%|##########| 26/26 [00:00<00:00, 33.40it/s]
Test: [   0/  26]	Loss 0.387 (0.387)	test_acc   0.73 (  0.73)	test_minacc   0.92 (  0.92)	test_majacc   0.69 (  0.69)	Loss_d 0.387 (0.387)	test_acc_d   0.73 (  0.73)	test_minacc_d   0.92 (  0.92)	test_majacc_d   0.69 (  0.69)	test_corr_d   0.59 (  0.59)
Test: [  10/  26]	Loss 0.406 (0.393)	test_acc   0.68 (  0.71)	test_minacc   0.94 (  0.92)	test_majacc   0.64 (  0.67)	Loss_d 0.406 (0.393)	test_acc_d   0.68 (  0.71)	test_minacc_d   0.94 (  0.92)	test_majacc_d   0.64 (  0.67)	test_corr_d   0.57 (  0.58)
Test: [  20/  26]	Loss 0.400 (0.391)	test_acc   0.71 (  0.71)	test_minacc   0.90 (  0.93)	test_majacc   0.68 (  0.67)	Loss_d 0.400 (0.391)	test_acc_d   0.71 (  0.71)	test_minacc_d   0.90 (  0.93)	test_majacc_d   0.68 (  0.67)	test_corr_d   0.61 (  0.59)
Test: [  26/  26]	Loss 0.402 (0.391)	test_acc   0.68 (  0.71)	test_minacc   0.95 (  0.93)	test_majacc   0.63 (  0.67)	Loss_d 0.402 (0.391)	test_acc_d   0.68 (  0.71)	test_minacc_d   0.95 (  0.93)	test_majacc_d   0.63 (  0.67)	test_corr_d   0.58 (  0.59)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.40it/s]
Test: [  0/  1]	Loss 1.572 (1.572)	test_acc   0.68 (  0.68)	test_minacc   0.67 (  0.67)	test_majacc   0.75 (  0.75)	Loss_d 1.572 (1.572)	test_acc_d   0.68 (  0.68)	test_minacc_d   0.67 (  0.67)	test_majacc_d   0.75 (  0.75)	test_corr_d   0.17 (  0.17)
Test: [  1/  1]	Loss 1.572 (1.572)	test_acc   0.68 (  0.68)	test_minacc   0.67 (  0.67)	test_majacc   0.75 (  0.75)	Loss_d 1.572 (1.572)	test_acc_d   0.68 (  0.68)	test_minacc_d   0.67 (  0.67)	test_majacc_d   0.75 (  0.75)	test_corr_d   0.17 (  0.17)
Overall Timing[ 39/  1]	epoch_time 0.0438 (0.0431)	validation_time 0.0003 (0.0006)	train_time 0.0434 (0.0425)
record: (train_acc, test_acc) (0.7028000321984291, 0.6860000491142273)
last accs (train_acc, test_acc) (0.7107000367045403, 0.6780000329017639)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.66it/s] 19%|#9        | 5/26 [00:00<00:01, 20.89it/s] 35%|###4      | 9/26 [00:00<00:00, 26.23it/s] 50%|#####     | 13/26 [00:00<00:00, 29.47it/s] 65%|######5   | 17/26 [00:00<00:00, 31.33it/s] 81%|########  | 21/26 [00:00<00:00, 32.31it/s] 96%|#########6| 25/26 [00:00<00:00, 32.54it/s]100%|##########| 26/26 [00:00<00:00, 27.61it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1040 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1041 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1042 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1043 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1044 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1045 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1046 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1047 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1048 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1049 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1050 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1051 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1052 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1053 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1054 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1055 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1056 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1057 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1058 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1059 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1060 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1061 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1062 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1063 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1064 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1065 400
penalty weights 10000.0
Epoch: [40][  26/  26]	Loss 0.000 (0.000)	train_nll   0.41 (  0.39)	train_penalty   0.00 (  0.00)	weight_norm  25.42 ( 25.42)	train_acc   0.67 (  0.71)	train_minacc   0.97 (  0.93)	train_majacc   0.62 (  0.67)	train_corr   0.00 (  0.00)	l1 6.1778 (6.0734)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.49it/s] 23%|##3       | 6/26 [00:00<00:00, 27.32it/s]                                               23%|##3       | 6/26 [00:00<00:00, 27.32it/s] 42%|####2     | 11/26 [00:00<00:00, 35.40it/s] 62%|######1   | 16/26 [00:00<00:00, 38.66it/s]                                                62%|######1   | 16/26 [00:00<00:00, 38.66it/s] 81%|########  | 21/26 [00:00<00:00, 37.02it/s]100%|##########| 26/26 [00:00<00:00, 40.52it/s]100%|##########| 26/26 [00:00<00:00, 33.21it/s]
Test: [   0/  26]	Loss 0.394 (0.394)	test_acc   0.71 (  0.71)	test_minacc   0.92 (  0.92)	test_majacc   0.67 (  0.67)	Loss_d 0.394 (0.394)	test_acc_d   0.71 (  0.71)	test_minacc_d   0.92 (  0.92)	test_majacc_d   0.67 (  0.67)	test_corr_d   0.58 (  0.58)
Test: [  10/  26]	Loss 0.420 (0.405)	test_acc   0.66 (  0.70)	test_minacc   0.94 (  0.93)	test_majacc   0.62 (  0.66)	Loss_d 0.420 (0.405)	test_acc_d   0.66 (  0.70)	test_minacc_d   0.94 (  0.93)	test_majacc_d   0.62 (  0.66)	test_corr_d   0.55 (  0.56)
Test: [  20/  26]	Loss 0.405 (0.401)	test_acc   0.70 (  0.70)	test_minacc   0.92 (  0.93)	test_majacc   0.67 (  0.66)	Loss_d 0.405 (0.401)	test_acc_d   0.70 (  0.70)	test_minacc_d   0.92 (  0.93)	test_majacc_d   0.67 (  0.66)	test_corr_d   0.59 (  0.57)
Test: [  26/  26]	Loss 0.409 (0.401)	test_acc   0.68 (  0.70)	test_minacc   0.97 (  0.93)	test_majacc   0.62 (  0.66)	Loss_d 0.409 (0.401)	test_acc_d   0.68 (  0.70)	test_minacc_d   0.97 (  0.93)	test_majacc_d   0.62 (  0.66)	test_corr_d   0.57 (  0.57)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 59.57it/s]
Test: [  0/  1]	Loss 1.569 (1.569)	test_acc   0.69 (  0.69)	test_minacc   0.68 (  0.68)	test_majacc   0.75 (  0.75)	Loss_d 1.569 (1.569)	test_acc_d   0.69 (  0.69)	test_minacc_d   0.68 (  0.68)	test_majacc_d   0.75 (  0.75)	test_corr_d   0.14 (  0.14)
Test: [  1/  1]	Loss 1.569 (1.569)	test_acc   0.69 (  0.69)	test_minacc   0.68 (  0.68)	test_majacc   0.75 (  0.75)	Loss_d 1.569 (1.569)	test_acc_d   0.69 (  0.69)	test_minacc_d   0.68 (  0.68)	test_majacc_d   0.75 (  0.75)	test_corr_d   0.14 (  0.14)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/140/checkpoints/model_best.pth
Overall Timing[ 40/  1]	epoch_time 0.0420 (0.0431)	validation_time 0.0004 (0.0006)	train_time 0.0415 (0.0424)
record: (train_acc, test_acc) (0.700500037431717, 0.6890000104904175)
last accs (train_acc, test_acc) (0.700500037431717, 0.6890000104904175)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:06,  3.64it/s] 19%|#9        | 5/26 [00:00<00:01, 14.84it/s] 35%|###4      | 9/26 [00:00<00:00, 21.58it/s] 50%|#####     | 13/26 [00:00<00:00, 25.50it/s] 65%|######5   | 17/26 [00:00<00:00, 27.58it/s] 81%|########  | 21/26 [00:00<00:00, 29.40it/s] 96%|#########6| 25/26 [00:00<00:00, 31.49it/s]100%|##########| 26/26 [00:01<00:00, 23.72it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1066 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1067 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1068 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1069 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1070 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1071 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1072 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1073 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1074 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1075 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1076 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1077 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1078 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1079 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1080 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1081 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1082 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1083 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1084 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1085 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1086 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1087 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1088 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1089 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1090 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1091 400
penalty weights 10000.0
Epoch: [41][  26/  26]	Loss 0.000 (0.000)	train_nll   0.40 (  0.39)	train_penalty   0.00 (  0.00)	weight_norm  25.42 ( 25.42)	train_acc   0.70 (  0.71)	train_minacc   0.97 (  0.93)	train_majacc   0.66 (  0.67)	train_corr   0.00 (  0.00)	l1 6.1124 (6.0644)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.56it/s] 27%|##6       | 7/26 [00:00<00:00, 27.51it/s]                                               27%|##6       | 7/26 [00:00<00:00, 27.51it/s] 46%|####6     | 12/26 [00:00<00:00, 34.78it/s] 65%|######5   | 17/26 [00:00<00:00, 38.31it/s]                                                65%|######5   | 17/26 [00:00<00:00, 38.31it/s] 85%|########4 | 22/26 [00:00<00:00, 40.46it/s]100%|##########| 26/26 [00:00<00:00, 33.47it/s]
Test: [   0/  26]	Loss 0.381 (0.381)	test_acc   0.73 (  0.73)	test_minacc   0.92 (  0.92)	test_majacc   0.69 (  0.69)	Loss_d 0.381 (0.381)	test_acc_d   0.73 (  0.73)	test_minacc_d   0.92 (  0.92)	test_majacc_d   0.69 (  0.69)	test_corr_d   0.59 (  0.59)
Test: [  10/  26]	Loss 0.416 (0.392)	test_acc   0.66 (  0.71)	test_minacc   0.94 (  0.92)	test_majacc   0.62 (  0.67)	Loss_d 0.416 (0.392)	test_acc_d   0.66 (  0.71)	test_minacc_d   0.94 (  0.92)	test_majacc_d   0.62 (  0.67)	test_corr_d   0.56 (  0.57)
Test: [  20/  26]	Loss 0.397 (0.391)	test_acc   0.71 (  0.71)	test_minacc   0.90 (  0.93)	test_majacc   0.68 (  0.67)	Loss_d 0.397 (0.391)	test_acc_d   0.71 (  0.71)	test_minacc_d   0.90 (  0.93)	test_majacc_d   0.68 (  0.67)	test_corr_d   0.60 (  0.58)
Test: [  26/  26]	Loss 0.398 (0.391)	test_acc   0.70 (  0.71)	test_minacc   0.97 (  0.93)	test_majacc   0.66 (  0.67)	Loss_d 0.398 (0.391)	test_acc_d   0.70 (  0.71)	test_minacc_d   0.97 (  0.93)	test_majacc_d   0.66 (  0.67)	test_corr_d   0.57 (  0.58)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.27it/s]
Test: [  0/  1]	Loss 1.566 (1.566)	test_acc   0.69 (  0.69)	test_minacc   0.68 (  0.68)	test_majacc   0.76 (  0.76)	Loss_d 1.566 (1.566)	test_acc_d   0.69 (  0.69)	test_minacc_d   0.68 (  0.68)	test_majacc_d   0.76 (  0.76)	test_corr_d   0.13 (  0.13)
Test: [  1/  1]	Loss 1.566 (1.566)	test_acc   0.69 (  0.69)	test_minacc   0.68 (  0.68)	test_majacc   0.76 (  0.76)	Loss_d 1.566 (1.566)	test_acc_d   0.69 (  0.69)	test_minacc_d   0.68 (  0.68)	test_majacc_d   0.76 (  0.76)	test_corr_d   0.13 (  0.13)
Overall Timing[ 41/  1]	epoch_time 0.0452 (0.0432)	validation_time 0.0004 (0.0006)	train_time 0.0448 (0.0425)
record: (train_acc, test_acc) (0.700500037431717, 0.6890000104904175)
last accs (train_acc, test_acc) (0.7114000321030617, 0.6890000104904175)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:02,  8.57it/s] 23%|##3       | 6/26 [00:00<00:01, 19.41it/s] 38%|###8      | 10/26 [00:00<00:00, 25.24it/s] 54%|#####3    | 14/26 [00:00<00:00, 28.08it/s] 69%|######9   | 18/26 [00:00<00:00, 30.10it/s] 85%|########4 | 22/26 [00:00<00:00, 31.77it/s]100%|##########| 26/26 [00:00<00:00, 32.33it/s]100%|##########| 26/26 [00:00<00:00, 26.22it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1092 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1093 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1094 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1095 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1096 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1097 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1098 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1099 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1100 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1101 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1102 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1103 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1104 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1105 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1106 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1107 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1108 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1109 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1110 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1111 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1112 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1113 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1114 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1115 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1116 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1117 400
penalty weights 10000.0
Epoch: [42][  26/  26]	Loss 0.000 (0.000)	train_nll   0.40 (  0.39)	train_penalty   0.00 (  0.00)	weight_norm  25.42 ( 25.42)	train_acc   0.70 (  0.71)	train_minacc   0.97 (  0.93)	train_majacc   0.65 (  0.67)	train_corr   0.00 (  0.00)	l1 6.0660 (6.1502)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.25it/s] 23%|##3       | 6/26 [00:00<00:00, 24.25it/s]                                               23%|##3       | 6/26 [00:00<00:00, 24.25it/s] 42%|####2     | 11/26 [00:00<00:00, 33.16it/s] 62%|######1   | 16/26 [00:00<00:00, 38.20it/s]                                                62%|######1   | 16/26 [00:00<00:00, 38.20it/s] 81%|########  | 21/26 [00:00<00:00, 37.89it/s]100%|##########| 26/26 [00:00<00:00, 40.78it/s]100%|##########| 26/26 [00:00<00:00, 32.18it/s]
Test: [   0/  26]	Loss 0.378 (0.378)	test_acc   0.73 (  0.73)	test_minacc   0.92 (  0.92)	test_majacc   0.70 (  0.70)	Loss_d 0.378 (0.378)	test_acc_d   0.73 (  0.73)	test_minacc_d   0.92 (  0.92)	test_majacc_d   0.70 (  0.70)	test_corr_d   0.60 (  0.60)
Test: [  10/  26]	Loss 0.406 (0.387)	test_acc   0.68 (  0.72)	test_minacc   0.94 (  0.93)	test_majacc   0.64 (  0.68)	Loss_d 0.406 (0.387)	test_acc_d   0.68 (  0.72)	test_minacc_d   0.94 (  0.93)	test_majacc_d   0.64 (  0.68)	test_corr_d   0.57 (  0.58)
Test: [  20/  26]	Loss 0.395 (0.386)	test_acc   0.71 (  0.72)	test_minacc   0.90 (  0.93)	test_majacc   0.68 (  0.68)	Loss_d 0.395 (0.386)	test_acc_d   0.71 (  0.72)	test_minacc_d   0.90 (  0.93)	test_majacc_d   0.68 (  0.68)	test_corr_d   0.60 (  0.59)
Test: [  26/  26]	Loss 0.397 (0.386)	test_acc   0.70 (  0.72)	test_minacc   0.97 (  0.93)	test_majacc   0.65 (  0.68)	Loss_d 0.397 (0.386)	test_acc_d   0.70 (  0.72)	test_minacc_d   0.97 (  0.93)	test_majacc_d   0.65 (  0.68)	test_corr_d   0.58 (  0.59)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 60.70it/s]
Test: [  0/  1]	Loss 1.568 (1.568)	test_acc   0.68 (  0.68)	test_minacc   0.67 (  0.67)	test_majacc   0.76 (  0.76)	Loss_d 1.568 (1.568)	test_acc_d   0.68 (  0.68)	test_minacc_d   0.67 (  0.67)	test_majacc_d   0.76 (  0.76)	test_corr_d   0.15 (  0.15)
Test: [  1/  1]	Loss 1.568 (1.568)	test_acc   0.68 (  0.68)	test_minacc   0.67 (  0.67)	test_majacc   0.76 (  0.76)	Loss_d 1.568 (1.568)	test_acc_d   0.68 (  0.68)	test_minacc_d   0.67 (  0.67)	test_majacc_d   0.76 (  0.76)	test_corr_d   0.15 (  0.15)
Overall Timing[ 42/  1]	epoch_time 0.0450 (0.0432)	validation_time 0.0006 (0.0006)	train_time 0.0444 (0.0425)
record: (train_acc, test_acc) (0.700500037431717, 0.6890000104904175)
last accs (train_acc, test_acc) (0.7158000374436378, 0.6820000410079956)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 16.30it/s] 23%|##3       | 6/26 [00:00<00:00, 25.73it/s] 38%|###8      | 10/26 [00:00<00:00, 30.59it/s] 54%|#####3    | 14/26 [00:00<00:00, 33.60it/s] 69%|######9   | 18/26 [00:00<00:00, 34.98it/s] 85%|########4 | 22/26 [00:00<00:00, 36.46it/s]100%|##########| 26/26 [00:00<00:00, 36.66it/s]100%|##########| 26/26 [00:00<00:00, 31.62it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1118 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1119 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1120 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1121 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1122 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1123 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1124 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1125 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1126 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1127 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1128 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1129 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1130 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1131 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1132 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1133 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1134 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1135 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1136 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1137 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1138 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1139 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1140 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1141 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1142 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1143 400
penalty weights 10000.0
Epoch: [43][  26/  26]	Loss 0.000 (0.000)	train_nll   0.41 (  0.39)	train_penalty   0.00 (  0.00)	weight_norm  25.42 ( 25.42)	train_acc   0.68 (  0.71)	train_minacc   0.97 (  0.93)	train_majacc   0.62 (  0.67)	train_corr   0.00 (  0.00)	l1 6.1432 (6.1336)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:00, 25.26it/s] 31%|###       | 8/26 [00:00<00:00, 37.30it/s]                                               31%|###       | 8/26 [00:00<00:00, 37.30it/s] 50%|#####     | 13/26 [00:00<00:00, 40.82it/s] 69%|######9   | 18/26 [00:00<00:00, 40.12it/s]                                                69%|######9   | 18/26 [00:00<00:00, 40.12it/s] 88%|########8 | 23/26 [00:00<00:00, 41.80it/s]100%|##########| 26/26 [00:00<00:00, 36.79it/s]
Test: [   0/  26]	Loss 0.387 (0.387)	test_acc   0.72 (  0.72)	test_minacc   0.92 (  0.92)	test_majacc   0.68 (  0.68)	Loss_d 0.387 (0.387)	test_acc_d   0.72 (  0.72)	test_minacc_d   0.92 (  0.92)	test_majacc_d   0.68 (  0.68)	test_corr_d   0.59 (  0.59)
Test: [  10/  26]	Loss 0.412 (0.397)	test_acc   0.66 (  0.71)	test_minacc   0.94 (  0.93)	test_majacc   0.62 (  0.66)	Loss_d 0.412 (0.397)	test_acc_d   0.66 (  0.71)	test_minacc_d   0.94 (  0.93)	test_majacc_d   0.62 (  0.66)	test_corr_d   0.56 (  0.57)
Test: [  20/  26]	Loss 0.400 (0.394)	test_acc   0.71 (  0.71)	test_minacc   0.92 (  0.93)	test_majacc   0.67 (  0.67)	Loss_d 0.400 (0.394)	test_acc_d   0.71 (  0.71)	test_minacc_d   0.92 (  0.93)	test_majacc_d   0.67 (  0.67)	test_corr_d   0.60 (  0.58)
Test: [  26/  26]	Loss 0.404 (0.393)	test_acc   0.68 (  0.71)	test_minacc   0.97 (  0.93)	test_majacc   0.62 (  0.67)	Loss_d 0.404 (0.393)	test_acc_d   0.68 (  0.71)	test_minacc_d   0.97 (  0.93)	test_majacc_d   0.62 (  0.67)	test_corr_d   0.58 (  0.58)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 60.70it/s]
Test: [  0/  1]	Loss 1.577 (1.577)	test_acc   0.69 (  0.69)	test_minacc   0.68 (  0.68)	test_majacc   0.76 (  0.76)	Loss_d 1.577 (1.577)	test_acc_d   0.69 (  0.69)	test_minacc_d   0.68 (  0.68)	test_majacc_d   0.76 (  0.76)	test_corr_d   0.15 (  0.15)
Test: [  1/  1]	Loss 1.577 (1.577)	test_acc   0.69 (  0.69)	test_minacc   0.68 (  0.68)	test_majacc   0.76 (  0.76)	Loss_d 1.577 (1.577)	test_acc_d   0.69 (  0.69)	test_minacc_d   0.68 (  0.68)	test_majacc_d   0.76 (  0.76)	test_corr_d   0.15 (  0.15)
Overall Timing[ 43/  1]	epoch_time 0.0403 (0.0431)	validation_time 0.0004 (0.0006)	train_time 0.0399 (0.0425)
record: (train_acc, test_acc) (0.700500037431717, 0.6890000104904175)
last accs (train_acc, test_acc) (0.7057000324726105, 0.6850000619888306)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 16.02it/s] 23%|##3       | 6/26 [00:00<00:00, 26.69it/s] 38%|###8      | 10/26 [00:00<00:00, 30.35it/s] 54%|#####3    | 14/26 [00:00<00:00, 31.98it/s] 69%|######9   | 18/26 [00:00<00:00, 33.01it/s] 85%|########4 | 22/26 [00:00<00:00, 33.76it/s]100%|##########| 26/26 [00:00<00:00, 34.56it/s]100%|##########| 26/26 [00:00<00:00, 29.96it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1144 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1145 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1146 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1147 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1148 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1149 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1150 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1151 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1152 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1153 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1154 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1155 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1156 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1157 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1158 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1159 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1160 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1161 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1162 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1163 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1164 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1165 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1166 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1167 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1168 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1169 400
penalty weights 10000.0
Epoch: [44][  26/  26]	Loss 0.000 (0.000)	train_nll   0.40 (  0.39)	train_penalty   0.00 (  0.00)	weight_norm  25.42 ( 25.42)	train_acc   0.70 (  0.71)	train_minacc   0.97 (  0.93)	train_majacc   0.66 (  0.67)	train_corr   0.00 (  0.00)	l1 6.1525 (6.0860)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.89it/s] 23%|##3       | 6/26 [00:00<00:00, 28.51it/s]                                               23%|##3       | 6/26 [00:00<00:00, 28.51it/s] 42%|####2     | 11/26 [00:00<00:00, 36.89it/s] 62%|######1   | 16/26 [00:00<00:00, 37.05it/s]                                                62%|######1   | 16/26 [00:00<00:00, 37.05it/s] 81%|########  | 21/26 [00:00<00:00, 39.95it/s]100%|##########| 26/26 [00:00<00:00, 42.57it/s]100%|##########| 26/26 [00:00<00:00, 34.90it/s]
Test: [   0/  26]	Loss 0.384 (0.384)	test_acc   0.72 (  0.72)	test_minacc   0.92 (  0.92)	test_majacc   0.69 (  0.69)	Loss_d 0.384 (0.384)	test_acc_d   0.72 (  0.72)	test_minacc_d   0.92 (  0.92)	test_majacc_d   0.69 (  0.69)	test_corr_d   0.58 (  0.58)
Test: [  10/  26]	Loss 0.416 (0.396)	test_acc   0.66 (  0.71)	test_minacc   0.94 (  0.93)	test_majacc   0.62 (  0.67)	Loss_d 0.416 (0.396)	test_acc_d   0.66 (  0.71)	test_minacc_d   0.94 (  0.93)	test_majacc_d   0.62 (  0.67)	test_corr_d   0.56 (  0.57)
Test: [  20/  26]	Loss 0.398 (0.393)	test_acc   0.71 (  0.71)	test_minacc   0.90 (  0.93)	test_majacc   0.68 (  0.67)	Loss_d 0.398 (0.393)	test_acc_d   0.71 (  0.71)	test_minacc_d   0.90 (  0.93)	test_majacc_d   0.68 (  0.67)	test_corr_d   0.60 (  0.58)
Test: [  26/  26]	Loss 0.401 (0.393)	test_acc   0.70 (  0.71)	test_minacc   0.97 (  0.93)	test_majacc   0.65 (  0.67)	Loss_d 0.401 (0.393)	test_acc_d   0.70 (  0.71)	test_minacc_d   0.97 (  0.93)	test_majacc_d   0.65 (  0.67)	test_corr_d   0.57 (  0.58)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 56.92it/s]
Test: [  0/  1]	Loss 1.574 (1.574)	test_acc   0.69 (  0.69)	test_minacc   0.68 (  0.68)	test_majacc   0.76 (  0.76)	Loss_d 1.574 (1.574)	test_acc_d   0.69 (  0.69)	test_minacc_d   0.68 (  0.68)	test_majacc_d   0.76 (  0.76)	test_corr_d   0.13 (  0.13)
Test: [  1/  1]	Loss 1.574 (1.574)	test_acc   0.69 (  0.69)	test_minacc   0.68 (  0.68)	test_majacc   0.76 (  0.76)	Loss_d 1.574 (1.574)	test_acc_d   0.69 (  0.69)	test_minacc_d   0.68 (  0.68)	test_majacc_d   0.76 (  0.76)	test_corr_d   0.13 (  0.13)
Overall Timing[ 44/  1]	epoch_time 0.0403 (0.0431)	validation_time 0.0004 (0.0006)	train_time 0.0399 (0.0424)
record: (train_acc, test_acc) (0.700500037431717, 0.6890000104904175)
last accs (train_acc, test_acc) (0.7073000321388244, 0.6890000104904175)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.86it/s] 19%|#9        | 5/26 [00:00<00:00, 22.66it/s] 35%|###4      | 9/26 [00:00<00:00, 27.58it/s] 50%|#####     | 13/26 [00:00<00:00, 30.10it/s] 65%|######5   | 17/26 [00:00<00:00, 32.12it/s] 81%|########  | 21/26 [00:00<00:00, 33.37it/s] 96%|#########6| 25/26 [00:00<00:00, 34.38it/s]100%|##########| 26/26 [00:00<00:00, 29.38it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1170 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1171 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1172 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1173 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1174 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1175 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1176 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1177 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1178 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1179 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1180 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1181 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1182 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1183 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1184 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1185 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1186 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1187 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1188 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1189 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1190 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1191 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1192 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1193 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1194 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1195 400
penalty weights 10000.0
Epoch: [45][  26/  26]	Loss 0.000 (0.000)	train_nll   0.40 (  0.39)	train_penalty   0.00 (  0.00)	weight_norm  25.42 ( 25.42)	train_acc   0.70 (  0.71)	train_minacc   0.97 (  0.93)	train_majacc   0.66 (  0.67)	train_corr   0.00 (  0.00)	l1 6.0982 (6.1302)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:05,  4.22it/s] 27%|##6       | 7/26 [00:00<00:00, 23.78it/s]                                               27%|##6       | 7/26 [00:00<00:00, 23.78it/s] 46%|####6     | 12/26 [00:00<00:00, 31.57it/s] 65%|######5   | 17/26 [00:00<00:00, 33.89it/s]                                                65%|######5   | 17/26 [00:00<00:00, 33.89it/s] 85%|########4 | 22/26 [00:00<00:00, 37.67it/s]100%|##########| 26/26 [00:00<00:00, 31.21it/s]
Test: [   0/  26]	Loss 0.377 (0.377)	test_acc   0.74 (  0.74)	test_minacc   0.92 (  0.92)	test_majacc   0.70 (  0.70)	Loss_d 0.377 (0.377)	test_acc_d   0.74 (  0.74)	test_minacc_d   0.92 (  0.92)	test_majacc_d   0.70 (  0.70)	test_corr_d   0.59 (  0.59)
Test: [  10/  26]	Loss 0.409 (0.387)	test_acc   0.68 (  0.72)	test_minacc   0.94 (  0.93)	test_majacc   0.64 (  0.68)	Loss_d 0.409 (0.387)	test_acc_d   0.68 (  0.72)	test_minacc_d   0.94 (  0.93)	test_majacc_d   0.64 (  0.68)	test_corr_d   0.56 (  0.58)
Test: [  20/  26]	Loss 0.394 (0.387)	test_acc   0.71 (  0.72)	test_minacc   0.90 (  0.93)	test_majacc   0.68 (  0.68)	Loss_d 0.394 (0.387)	test_acc_d   0.71 (  0.72)	test_minacc_d   0.90 (  0.93)	test_majacc_d   0.68 (  0.68)	test_corr_d   0.60 (  0.59)
Test: [  26/  26]	Loss 0.396 (0.386)	test_acc   0.70 (  0.72)	test_minacc   0.97 (  0.93)	test_majacc   0.66 (  0.68)	Loss_d 0.396 (0.386)	test_acc_d   0.70 (  0.72)	test_minacc_d   0.97 (  0.93)	test_majacc_d   0.66 (  0.68)	test_corr_d   0.58 (  0.59)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.02it/s]
Test: [  0/  1]	Loss 1.574 (1.574)	test_acc   0.68 (  0.68)	test_minacc   0.68 (  0.68)	test_majacc   0.76 (  0.76)	Loss_d 1.574 (1.574)	test_acc_d   0.68 (  0.68)	test_minacc_d   0.68 (  0.68)	test_majacc_d   0.76 (  0.76)	test_corr_d   0.14 (  0.14)
Test: [  1/  1]	Loss 1.574 (1.574)	test_acc   0.68 (  0.68)	test_minacc   0.68 (  0.68)	test_majacc   0.76 (  0.76)	Loss_d 1.574 (1.574)	test_acc_d   0.68 (  0.68)	test_minacc_d   0.68 (  0.68)	test_majacc_d   0.76 (  0.76)	test_corr_d   0.14 (  0.14)
Overall Timing[ 45/  1]	epoch_time 0.0398 (0.0430)	validation_time 0.0004 (0.0006)	train_time 0.0394 (0.0424)
record: (train_acc, test_acc) (0.700500037431717, 0.6890000104904175)
last accs (train_acc, test_acc) (0.7157000330090523, 0.6840000152587891)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.98it/s] 19%|#9        | 5/26 [00:00<00:01, 20.21it/s] 35%|###4      | 9/26 [00:00<00:00, 26.29it/s] 50%|#####     | 13/26 [00:00<00:00, 29.51it/s] 65%|######5   | 17/26 [00:00<00:00, 31.29it/s] 81%|########  | 21/26 [00:00<00:00, 32.66it/s] 96%|#########6| 25/26 [00:00<00:00, 33.92it/s]100%|##########| 26/26 [00:00<00:00, 28.13it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1196 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1197 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1198 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1199 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1200 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1201 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1202 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1203 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1204 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1205 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1206 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1207 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1208 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1209 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1210 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1211 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1212 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1213 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1214 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1215 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1216 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1217 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1218 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1219 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1220 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1221 400
penalty weights 10000.0
Epoch: [46][  26/  26]	Loss 0.000 (0.000)	train_nll   0.40 (  0.39)	train_penalty   0.00 (  0.00)	weight_norm  25.42 ( 25.42)	train_acc   0.69 (  0.71)	train_minacc   0.95 (  0.93)	train_majacc   0.65 (  0.67)	train_corr   0.00 (  0.00)	l1 6.1190 (6.1540)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.98it/s] 23%|##3       | 6/26 [00:00<00:00, 27.15it/s]                                               23%|##3       | 6/26 [00:00<00:00, 27.15it/s] 42%|####2     | 11/26 [00:00<00:00, 34.40it/s] 62%|######1   | 16/26 [00:00<00:00, 38.88it/s]                                                62%|######1   | 16/26 [00:00<00:00, 38.88it/s] 81%|########  | 21/26 [00:00<00:00, 39.71it/s]100%|##########| 26/26 [00:00<00:00, 42.10it/s]100%|##########| 26/26 [00:00<00:00, 33.89it/s]
Test: [   0/  26]	Loss 0.381 (0.381)	test_acc   0.73 (  0.73)	test_minacc   0.92 (  0.92)	test_majacc   0.69 (  0.69)	Loss_d 0.381 (0.381)	test_acc_d   0.73 (  0.73)	test_minacc_d   0.92 (  0.92)	test_majacc_d   0.69 (  0.69)	test_corr_d   0.59 (  0.59)
Test: [  10/  26]	Loss 0.408 (0.391)	test_acc   0.67 (  0.71)	test_minacc   0.94 (  0.93)	test_majacc   0.64 (  0.67)	Loss_d 0.408 (0.391)	test_acc_d   0.67 (  0.71)	test_minacc_d   0.94 (  0.93)	test_majacc_d   0.64 (  0.67)	test_corr_d   0.57 (  0.58)
Test: [  20/  26]	Loss 0.396 (0.389)	test_acc   0.71 (  0.71)	test_minacc   0.90 (  0.93)	test_majacc   0.68 (  0.67)	Loss_d 0.396 (0.389)	test_acc_d   0.71 (  0.71)	test_minacc_d   0.90 (  0.93)	test_majacc_d   0.68 (  0.67)	test_corr_d   0.60 (  0.59)
Test: [  26/  26]	Loss 0.400 (0.388)	test_acc   0.69 (  0.71)	test_minacc   0.95 (  0.93)	test_majacc   0.65 (  0.67)	Loss_d 0.400 (0.388)	test_acc_d   0.69 (  0.71)	test_minacc_d   0.95 (  0.93)	test_majacc_d   0.65 (  0.67)	test_corr_d   0.58 (  0.59)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 58.23it/s]
Test: [  0/  1]	Loss 1.579 (1.579)	test_acc   0.68 (  0.68)	test_minacc   0.68 (  0.68)	test_majacc   0.76 (  0.76)	Loss_d 1.579 (1.579)	test_acc_d   0.68 (  0.68)	test_minacc_d   0.68 (  0.68)	test_majacc_d   0.76 (  0.76)	test_corr_d   0.15 (  0.15)
Test: [  1/  1]	Loss 1.579 (1.579)	test_acc   0.68 (  0.68)	test_minacc   0.68 (  0.68)	test_majacc   0.76 (  0.76)	Loss_d 1.579 (1.579)	test_acc_d   0.68 (  0.68)	test_minacc_d   0.68 (  0.68)	test_majacc_d   0.76 (  0.76)	test_corr_d   0.15 (  0.15)
Overall Timing[ 46/  1]	epoch_time 0.0454 (0.0431)	validation_time 0.0004 (0.0006)	train_time 0.0449 (0.0424)
record: (train_acc, test_acc) (0.700500037431717, 0.6890000104904175)
last accs (train_acc, test_acc) (0.7111000361442565, 0.6840000152587891)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.47it/s] 19%|#9        | 5/26 [00:00<00:00, 21.61it/s] 31%|###       | 8/26 [00:00<00:00, 24.34it/s] 46%|####6     | 12/26 [00:00<00:00, 27.92it/s] 62%|######1   | 16/26 [00:00<00:00, 30.49it/s] 77%|#######6  | 20/26 [00:00<00:00, 32.34it/s] 92%|#########2| 24/26 [00:00<00:00, 33.15it/s]100%|##########| 26/26 [00:00<00:00, 27.74it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1222 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1223 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1224 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1225 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1226 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1227 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1228 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1229 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1230 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1231 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1232 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1233 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1234 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1235 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1236 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1237 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1238 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1239 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1240 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1241 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1242 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1243 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1244 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1245 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1246 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1247 400
penalty weights 10000.0
Epoch: [47][  26/  26]	Loss 0.000 (0.000)	train_nll   0.40 (  0.39)	train_penalty   0.00 (  0.00)	weight_norm  25.42 ( 25.42)	train_acc   0.70 (  0.71)	train_minacc   0.97 (  0.93)	train_majacc   0.65 (  0.67)	train_corr   0.00 (  0.00)	l1 6.1632 (6.1190)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.50it/s] 15%|#5        | 4/26 [00:00<00:01, 15.61it/s] 35%|###4      | 9/26 [00:00<00:00, 27.83it/s]                                               35%|###4      | 9/26 [00:00<00:00, 27.83it/s] 54%|#####3    | 14/26 [00:00<00:00, 35.34it/s] 77%|#######6  | 20/26 [00:00<00:00, 39.52it/s]                                                77%|#######6  | 20/26 [00:00<00:00, 39.52it/s]100%|##########| 26/26 [00:00<00:00, 44.32it/s]100%|##########| 26/26 [00:00<00:00, 33.62it/s]
Test: [   0/  26]	Loss 0.384 (0.384)	test_acc   0.72 (  0.72)	test_minacc   0.92 (  0.92)	test_majacc   0.68 (  0.68)	Loss_d 0.384 (0.384)	test_acc_d   0.72 (  0.72)	test_minacc_d   0.92 (  0.92)	test_majacc_d   0.68 (  0.68)	test_corr_d   0.59 (  0.59)
Test: [  10/  26]	Loss 0.413 (0.395)	test_acc   0.67 (  0.71)	test_minacc   0.94 (  0.93)	test_majacc   0.63 (  0.67)	Loss_d 0.413 (0.395)	test_acc_d   0.67 (  0.71)	test_minacc_d   0.94 (  0.93)	test_majacc_d   0.63 (  0.67)	test_corr_d   0.56 (  0.57)
Test: [  20/  26]	Loss 0.397 (0.392)	test_acc   0.71 (  0.71)	test_minacc   0.92 (  0.93)	test_majacc   0.67 (  0.67)	Loss_d 0.397 (0.392)	test_acc_d   0.71 (  0.71)	test_minacc_d   0.92 (  0.93)	test_majacc_d   0.67 (  0.67)	test_corr_d   0.60 (  0.58)
Test: [  26/  26]	Loss 0.401 (0.391)	test_acc   0.70 (  0.71)	test_minacc   0.97 (  0.93)	test_majacc   0.65 (  0.67)	Loss_d 0.401 (0.391)	test_acc_d   0.70 (  0.71)	test_minacc_d   0.97 (  0.93)	test_majacc_d   0.65 (  0.67)	test_corr_d   0.58 (  0.58)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.35it/s]
Test: [  0/  1]	Loss 1.582 (1.582)	test_acc   0.69 (  0.69)	test_minacc   0.68 (  0.68)	test_majacc   0.76 (  0.76)	Loss_d 1.582 (1.582)	test_acc_d   0.69 (  0.69)	test_minacc_d   0.68 (  0.68)	test_majacc_d   0.76 (  0.76)	test_corr_d   0.14 (  0.14)
Test: [  1/  1]	Loss 1.582 (1.582)	test_acc   0.69 (  0.69)	test_minacc   0.68 (  0.68)	test_majacc   0.76 (  0.76)	Loss_d 1.582 (1.582)	test_acc_d   0.69 (  0.69)	test_minacc_d   0.68 (  0.68)	test_majacc_d   0.76 (  0.76)	test_corr_d   0.14 (  0.14)
Overall Timing[ 47/  1]	epoch_time 0.0442 (0.0431)	validation_time 0.0003 (0.0006)	train_time 0.0438 (0.0424)
record: (train_acc, test_acc) (0.700500037431717, 0.6890000104904175)
last accs (train_acc, test_acc) (0.7083000274300575, 0.6860000491142273)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 17.87it/s] 19%|#9        | 5/26 [00:00<00:00, 23.93it/s] 35%|###4      | 9/26 [00:00<00:00, 28.41it/s] 50%|#####     | 13/26 [00:00<00:00, 30.71it/s] 65%|######5   | 17/26 [00:00<00:00, 32.14it/s] 81%|########  | 21/26 [00:00<00:00, 32.87it/s] 96%|#########6| 25/26 [00:00<00:00, 33.66it/s]100%|##########| 26/26 [00:00<00:00, 29.71it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1248 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1249 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1250 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1251 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1252 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1253 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1254 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1255 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1256 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1257 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1258 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1259 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1260 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1261 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1262 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1263 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1264 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1265 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1266 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1267 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1268 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1269 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1270 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1271 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1272 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1273 400
penalty weights 10000.0
Epoch: [48][  26/  26]	Loss 0.000 (0.000)	train_nll   0.40 (  0.39)	train_penalty   0.00 (  0.00)	weight_norm  25.42 ( 25.42)	train_acc   0.70 (  0.71)	train_minacc   0.97 (  0.93)	train_majacc   0.66 (  0.67)	train_corr   0.00 (  0.00)	l1 6.1389 (6.1209)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.56it/s] 23%|##3       | 6/26 [00:00<00:00, 31.20it/s]                                               23%|##3       | 6/26 [00:00<00:00, 31.20it/s] 42%|####2     | 11/26 [00:00<00:00, 37.10it/s] 62%|######1   | 16/26 [00:00<00:00, 41.17it/s]                                                62%|######1   | 16/26 [00:00<00:00, 41.17it/s] 81%|########  | 21/26 [00:00<00:00, 39.70it/s]100%|##########| 26/26 [00:00<00:00, 42.46it/s]100%|##########| 26/26 [00:00<00:00, 35.76it/s]
Test: [   0/  26]	Loss 0.379 (0.379)	test_acc   0.73 (  0.73)	test_minacc   0.92 (  0.92)	test_majacc   0.69 (  0.69)	Loss_d 0.379 (0.379)	test_acc_d   0.73 (  0.73)	test_minacc_d   0.92 (  0.92)	test_majacc_d   0.69 (  0.69)	test_corr_d   0.59 (  0.59)
Test: [  10/  26]	Loss 0.411 (0.390)	test_acc   0.67 (  0.71)	test_minacc   0.94 (  0.93)	test_majacc   0.63 (  0.67)	Loss_d 0.411 (0.390)	test_acc_d   0.67 (  0.71)	test_minacc_d   0.94 (  0.93)	test_majacc_d   0.63 (  0.67)	test_corr_d   0.56 (  0.57)
Test: [  20/  26]	Loss 0.394 (0.388)	test_acc   0.71 (  0.71)	test_minacc   0.90 (  0.93)	test_majacc   0.67 (  0.67)	Loss_d 0.394 (0.388)	test_acc_d   0.71 (  0.71)	test_minacc_d   0.90 (  0.93)	test_majacc_d   0.67 (  0.67)	test_corr_d   0.60 (  0.58)
Test: [  26/  26]	Loss 0.397 (0.388)	test_acc   0.70 (  0.71)	test_minacc   0.97 (  0.93)	test_majacc   0.65 (  0.67)	Loss_d 0.397 (0.388)	test_acc_d   0.70 (  0.71)	test_minacc_d   0.97 (  0.93)	test_majacc_d   0.65 (  0.67)	test_corr_d   0.58 (  0.58)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.29it/s]
Test: [  0/  1]	Loss 1.581 (1.581)	test_acc   0.69 (  0.69)	test_minacc   0.68 (  0.68)	test_majacc   0.76 (  0.76)	Loss_d 1.581 (1.581)	test_acc_d   0.69 (  0.69)	test_minacc_d   0.68 (  0.68)	test_majacc_d   0.76 (  0.76)	test_corr_d   0.14 (  0.14)
Test: [  1/  1]	Loss 1.581 (1.581)	test_acc   0.69 (  0.69)	test_minacc   0.68 (  0.68)	test_majacc   0.76 (  0.76)	Loss_d 1.581 (1.581)	test_acc_d   0.69 (  0.69)	test_minacc_d   0.68 (  0.68)	test_majacc_d   0.76 (  0.76)	test_corr_d   0.14 (  0.14)
Overall Timing[ 48/  1]	epoch_time 0.0394 (0.0430)	validation_time 0.0004 (0.0006)	train_time 0.0390 (0.0424)
record: (train_acc, test_acc) (0.700500037431717, 0.6890000104904175)
last accs (train_acc, test_acc) (0.7120000283718109, 0.687000036239624)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:07,  3.57it/s] 19%|#9        | 5/26 [00:00<00:01, 15.34it/s] 35%|###4      | 9/26 [00:00<00:00, 22.45it/s] 50%|#####     | 13/26 [00:00<00:00, 27.06it/s] 65%|######5   | 17/26 [00:00<00:00, 29.93it/s] 81%|########  | 21/26 [00:00<00:00, 32.09it/s] 96%|#########6| 25/26 [00:00<00:00, 33.15it/s]100%|##########| 26/26 [00:01<00:00, 25.50it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1274 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1275 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1276 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1277 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1278 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1279 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1280 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1281 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1282 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1283 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1284 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1285 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1286 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1287 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1288 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1289 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1290 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1291 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1292 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1293 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1294 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1295 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1296 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1297 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1298 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1299 400
penalty weights 10000.0
Epoch: [49][  26/  26]	Loss 0.000 (0.000)	train_nll   0.40 (  0.39)	train_penalty   0.00 (  0.00)	weight_norm  25.42 ( 25.42)	train_acc   0.70 (  0.71)	train_minacc   0.95 (  0.93)	train_majacc   0.65 (  0.67)	train_corr   0.00 (  0.00)	l1 6.1160 (6.1571)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.33it/s] 23%|##3       | 6/26 [00:00<00:00, 28.86it/s]                                               23%|##3       | 6/26 [00:00<00:00, 28.86it/s] 42%|####2     | 11/26 [00:00<00:00, 33.37it/s] 62%|######1   | 16/26 [00:00<00:00, 38.16it/s]                                                62%|######1   | 16/26 [00:00<00:00, 38.16it/s] 81%|########  | 21/26 [00:00<00:00, 39.86it/s]100%|##########| 26/26 [00:00<00:00, 41.72it/s]100%|##########| 26/26 [00:00<00:00, 33.92it/s]
Test: [   0/  26]	Loss 0.377 (0.377)	test_acc   0.73 (  0.73)	test_minacc   0.92 (  0.92)	test_majacc   0.69 (  0.69)	Loss_d 0.377 (0.377)	test_acc_d   0.73 (  0.73)	test_minacc_d   0.92 (  0.92)	test_majacc_d   0.69 (  0.69)	test_corr_d   0.60 (  0.60)
Test: [  10/  26]	Loss 0.406 (0.386)	test_acc   0.68 (  0.72)	test_minacc   0.94 (  0.93)	test_majacc   0.64 (  0.68)	Loss_d 0.406 (0.386)	test_acc_d   0.68 (  0.72)	test_minacc_d   0.94 (  0.93)	test_majacc_d   0.64 (  0.68)	test_corr_d   0.57 (  0.58)
Test: [  20/  26]	Loss 0.393 (0.385)	test_acc   0.71 (  0.72)	test_minacc   0.90 (  0.93)	test_majacc   0.68 (  0.68)	Loss_d 0.393 (0.385)	test_acc_d   0.71 (  0.72)	test_minacc_d   0.90 (  0.93)	test_majacc_d   0.68 (  0.68)	test_corr_d   0.61 (  0.59)
Test: [  26/  26]	Loss 0.397 (0.385)	test_acc   0.70 (  0.72)	test_minacc   0.95 (  0.93)	test_majacc   0.65 (  0.68)	Loss_d 0.397 (0.385)	test_acc_d   0.70 (  0.72)	test_minacc_d   0.95 (  0.93)	test_majacc_d   0.65 (  0.68)	test_corr_d   0.58 (  0.59)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.70it/s]
Test: [  0/  1]	Loss 1.583 (1.583)	test_acc   0.69 (  0.69)	test_minacc   0.68 (  0.68)	test_majacc   0.77 (  0.77)	Loss_d 1.583 (1.583)	test_acc_d   0.69 (  0.69)	test_minacc_d   0.68 (  0.68)	test_majacc_d   0.77 (  0.77)	test_corr_d   0.15 (  0.15)
Test: [  1/  1]	Loss 1.583 (1.583)	test_acc   0.69 (  0.69)	test_minacc   0.68 (  0.68)	test_majacc   0.77 (  0.77)	Loss_d 1.583 (1.583)	test_acc_d   0.69 (  0.69)	test_minacc_d   0.68 (  0.68)	test_majacc_d   0.77 (  0.77)	test_corr_d   0.15 (  0.15)
Overall Timing[ 49/  1]	epoch_time 0.0408 (0.0430)	validation_time 0.0004 (0.0006)	train_time 0.0404 (0.0423)
record: (train_acc, test_acc) (0.700500037431717, 0.6890000104904175)
last accs (train_acc, test_acc) (0.71590003490448, 0.6850000619888306)
done saving aggregate.csv to ./aggregate.csv
wandb: - 0.164 MB of 0.164 MB uploadedwandb: \ 0.164 MB of 0.164 MB uploadedwandb: | 0.164 MB of 0.164 MB uploadedwandb: / 0.187 MB of 0.195 MB uploaded (0.003 MB deduped)wandb: - 0.470 MB of 0.470 MB uploaded (0.003 MB deduped)wandb: 
wandb: Run history:
wandb:                                                                            global_step ▁▁▁▁▂▂▂▂▂▃▃▃▃▃▃▄▄▄▄▄▅▅▅▅▅▅▆▆▆▆▆▆▇▇▇▇▇███
wandb:      resnet18-usc-unsigned/baseline/prune_rate=1.0/140/logs/diagnostics/epoch_time_val █▁▁▁▁▁▁▁▁▁▁▁▁▂▁▁▁▁▁▁▁▁▁▁▁▂▁▁▁▁▁▁▁▂▂▁▁▂▂▁
wandb:      resnet18-usc-unsigned/baseline/prune_rate=1.0/140/logs/diagnostics/train_time_val █▁▁▁▁▁▁▁▁▁▁▁▁▂▂▁▁▁▁▁▁▁▁▁▂▂▁▁▁▁▁▁▁▂▂▁▁▂▂▁
wandb: resnet18-usc-unsigned/baseline/prune_rate=1.0/140/logs/diagnostics/validation_time_val █▁▁▁▁▁▁▁▁▁▁▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:                     resnet18-usc-unsigned/baseline/prune_rate=1.0/140/logs/global_step ▁▁▁▁▂▂▂▂▂▃▃▃▃▃▃▄▄▄▄▄▅▅▅▅▅▅▆▆▆▆▆▆▇▇▇▇▇███
wandb:                   resnet18-usc-unsigned/baseline/prune_rate=1.0/140/logs/test/Loss_avg ▄▃▃▃▃▅▅▄█▄▃▇▁▁▁▁▃▂▃▃▁▁▁▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂
wandb:                 resnet18-usc-unsigned/baseline/prune_rate=1.0/140/logs/test/Loss_d_avg ▄▃▃▃▃▅▅▄█▄▃▇▁▁▁▁▃▂▃▃▁▁▁▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂
wandb:                 resnet18-usc-unsigned/baseline/prune_rate=1.0/140/logs/test/Loss_d_val ▄▃▃▃▃▅▅▄█▄▃▇▁▁▁▁▃▂▃▃▁▁▁▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂
wandb:                   resnet18-usc-unsigned/baseline/prune_rate=1.0/140/logs/test/Loss_val ▄▃▃▃▃▅▅▄█▄▃▇▁▁▁▁▃▂▃▃▁▁▁▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂
wandb:               resnet18-usc-unsigned/baseline/prune_rate=1.0/140/logs/test/test_acc_avg ▁▁▂▃▄▃▃▅▄▅▄▄▆▆▆▆▆▆▆▇▇▇▇▇▆▇▇▇▇███████████
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/140/logs/test/test_acc_d_avg ▁▁▂▃▄▃▃▅▄▅▄▄▆▆▆▆▆▆▆▇▇▇▇▇▆▇▇▇▇███████████
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/140/logs/test/test_acc_d_val ▁▁▂▃▄▃▃▅▄▅▄▄▆▆▆▆▆▆▆▇▇▇▇▇▆▇▇▇▇███████████
wandb:               resnet18-usc-unsigned/baseline/prune_rate=1.0/140/logs/test/test_acc_val ▁▁▂▃▄▃▃▅▄▅▄▄▆▆▆▆▆▆▆▇▇▇▇▇▆▇▇▇▇███████████
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/140/logs/test/test_corr_d_avg ██▇▆▆▆▆▃▅▄▅▅▂▃▂▃▃▃▃▁▁▁▂▂▃▂▂▁▂▂▁▂▂▂▂▂▂▂▂▂
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/140/logs/test/test_corr_d_val ██▇▆▆▆▆▃▅▄▅▅▂▃▂▃▃▃▃▁▁▁▂▂▃▂▂▁▂▂▁▂▂▂▂▂▂▂▂▂
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/140/logs/test/test_majacc_avg ██▇▇▇██▆▆▆▆▆▂▃▃▄▂▃▄▁▂▂▂▃▂▂▃▂▂▂▁▁▁▁▁▁▁▁▁▂
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/140/logs/test/test_majacc_d_avg ██▇▇▇██▆▆▆▆▆▂▃▃▄▂▃▄▁▂▂▂▃▂▂▃▂▂▂▁▁▁▁▁▁▁▁▁▂
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/140/logs/test/test_majacc_d_val ██▇▇▇██▆▆▆▆▆▂▃▃▄▂▃▄▁▂▂▂▃▂▂▃▂▂▂▁▁▁▁▁▁▁▁▁▂
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/140/logs/test/test_majacc_val ██▇▇▇██▆▆▆▆▆▂▃▃▄▂▃▄▁▂▂▂▃▂▂▃▂▂▂▁▁▁▁▁▁▁▁▁▂
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/140/logs/test/test_minacc_avg ▁▁▂▃▄▃▃▅▄▅▄▄▆▆▆▆▆▆▆▇▇▇▇▇▆▇▇▇▇███████████
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/140/logs/test/test_minacc_d_avg ▁▁▂▃▄▃▃▅▄▅▄▄▆▆▆▆▆▆▆▇▇▇▇▇▆▇▇▇▇███████████
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/140/logs/test/test_minacc_d_val ▁▁▂▃▄▃▃▅▄▅▄▄▆▆▆▆▆▆▆▇▇▇▇▇▆▇▇▇▇███████████
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/140/logs/test/test_minacc_val ▁▁▂▃▄▃▃▅▄▅▄▄▆▆▆▆▆▆▆▇▇▇▇▇▆▇▇▇▇███████████
wandb:                  resnet18-usc-unsigned/baseline/prune_rate=1.0/140/logs/train/Loss_avg █▆▆▅▅▅▄▄▄▄▄▄▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:                  resnet18-usc-unsigned/baseline/prune_rate=1.0/140/logs/train/Loss_val █▇▇▇▆▅▅▅▄▄▅▄▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:                    resnet18-usc-unsigned/baseline/prune_rate=1.0/140/logs/train/l1_avg █▄▄▃▃▄▄▄▃▆▆▆▆▃▁▁▂▁▁▂▁▁▂▂▂▂▂▂▃▃▂▃▃▃▃▃▃▃▃▃
wandb:                    resnet18-usc-unsigned/baseline/prune_rate=1.0/140/logs/train/l1_val ▅▅▅▄▅▆▆▆█▆▃█▅▂▁▁▃▂▃▆▂▃▃▂▁▃▃▄▃▄▄▃▄▄▄▄▄▄▄▄
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/140/logs/train/train_acc_avg ▄▆▆▆▇▇▇▇▇████▅▅▅▆▅▅▆▄▄▄▃▃▄▃▄▂▁▁▁▁▁▁▁▁▁▁▁
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/140/logs/train/train_acc_val ▆▆▆▆▆▆▇▇██▇█▇▅▅▅▅▅▅▄▅▅▄▅▄▃▄▄▃▁▂▂▁▂▂▁▂▂▂▂
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/140/logs/train/train_corr_avg ▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/140/logs/train/train_corr_val ▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/140/logs/train/train_majacc_avg ▇████▇▇▇▇▇▇▇▇▄▄▅▅▄▄▅▄▄▄▃▃▅▃▃▂▁▁▁▁▁▁▁▁▁▁▁
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/140/logs/train/train_majacc_val ████████████▆▅▅▅▅▅▅▄▅▅▄▅▅▃▄▄▂▁▂▂▁▂▂▁▂▂▂▂
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/140/logs/train/train_minacc_avg ▁▁▁▂▃▃▄▄▅▅▅▆▆▇▇▇▇▇▇▇▇▇▇▇▇▅▇▇████████████
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/140/logs/train/train_minacc_val ▁▁▂▃▃▃▄▅▆▆▄▅█▇▆▆▇▇▇▇▇▇▇▆▅█▇▇████████████
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/140/logs/train/train_nll_avg █▅▄▄▃▃▂▂▂▂▁▁▁▄▃▃▃▃▃▃▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/140/logs/train/train_nll_val █▇▇▅▄▃▂▂▁▁▃▁▄▆▆▆▆▇▇█▆▆▆▅▇▇▇▇▇██▇█▇▇█▇██▇
wandb:         resnet18-usc-unsigned/baseline/prune_rate=1.0/140/logs/train/train_penalty_avg █▂▂▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:         resnet18-usc-unsigned/baseline/prune_rate=1.0/140/logs/train/train_penalty_val █▆▆▅▃▂▂▁▁▂▂▁▂▁▁▁▁▁▁▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:           resnet18-usc-unsigned/baseline/prune_rate=1.0/140/logs/train/weight_norm_avg ▁▄▅▅▅▅▅▅▆▆▆▇████████████████████████████
wandb:           resnet18-usc-unsigned/baseline/prune_rate=1.0/140/logs/train/weight_norm_val ▁▃▃▃▃▃▄▄▅▅▆▆▇███████████████████████████
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/140/logs/train/zero_count_avg ▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/140/logs/train/zero_count_val ▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb: 
wandb: Run summary:
wandb:                                                                            global_step 49
wandb:      resnet18-usc-unsigned/baseline/prune_rate=1.0/140/logs/diagnostics/epoch_time_val 0.0408
wandb:      resnet18-usc-unsigned/baseline/prune_rate=1.0/140/logs/diagnostics/train_time_val 0.04036
wandb: resnet18-usc-unsigned/baseline/prune_rate=1.0/140/logs/diagnostics/validation_time_val 0.00042
wandb:                     resnet18-usc-unsigned/baseline/prune_rate=1.0/140/logs/global_step 49
wandb:                   resnet18-usc-unsigned/baseline/prune_rate=1.0/140/logs/test/Loss_avg 1.58285
wandb:                 resnet18-usc-unsigned/baseline/prune_rate=1.0/140/logs/test/Loss_d_avg 1.58285
wandb:                 resnet18-usc-unsigned/baseline/prune_rate=1.0/140/logs/test/Loss_d_val 1.58285
wandb:                   resnet18-usc-unsigned/baseline/prune_rate=1.0/140/logs/test/Loss_val 1.58285
wandb:               resnet18-usc-unsigned/baseline/prune_rate=1.0/140/logs/test/test_acc_avg 0.685
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/140/logs/test/test_acc_d_avg 0.685
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/140/logs/test/test_acc_d_val 0.685
wandb:               resnet18-usc-unsigned/baseline/prune_rate=1.0/140/logs/test/test_acc_val 0.685
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/140/logs/test/test_corr_d_avg 0.14657
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/140/logs/test/test_corr_d_val 0.14657
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/140/logs/test/test_majacc_avg 0.77
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/140/logs/test/test_majacc_d_avg 0.77
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/140/logs/test/test_majacc_d_val 0.77
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/140/logs/test/test_majacc_val 0.77
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/140/logs/test/test_minacc_avg 0.67556
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/140/logs/test/test_minacc_d_avg 0.67556
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/140/logs/test/test_minacc_d_val 0.67556
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/140/logs/test/test_minacc_val 0.67556
wandb:                  resnet18-usc-unsigned/baseline/prune_rate=1.0/140/logs/train/Loss_avg 4e-05
wandb:                  resnet18-usc-unsigned/baseline/prune_rate=1.0/140/logs/train/Loss_val 4e-05
wandb:                    resnet18-usc-unsigned/baseline/prune_rate=1.0/140/logs/train/l1_avg 6.15712
wandb:                    resnet18-usc-unsigned/baseline/prune_rate=1.0/140/logs/train/l1_val 6.11603
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/140/logs/train/train_acc_avg 0.713
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/140/logs/train/train_acc_val 0.696
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/140/logs/train/train_corr_avg 0.0
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/140/logs/train/train_corr_val 0.0
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/140/logs/train/train_majacc_avg 0.6748
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/140/logs/train/train_majacc_val 0.65094
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/140/logs/train/train_minacc_avg 0.929
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/140/logs/train/train_minacc_val 0.94737
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/140/logs/train/train_nll_avg 0.38765
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/140/logs/train/train_nll_val 0.39642
wandb:         resnet18-usc-unsigned/baseline/prune_rate=1.0/140/logs/train/train_penalty_avg 0.0
wandb:         resnet18-usc-unsigned/baseline/prune_rate=1.0/140/logs/train/train_penalty_val 0.0
wandb:           resnet18-usc-unsigned/baseline/prune_rate=1.0/140/logs/train/weight_norm_avg 25.41984
wandb:           resnet18-usc-unsigned/baseline/prune_rate=1.0/140/logs/train/weight_norm_val 25.41958
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/140/logs/train/zero_count_avg 0.0
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/140/logs/train/zero_count_val 0.0
wandb: 
wandb: 🚀 View run name_random at: https://wandb.ai/janezdu-uiuc/irm/runs/gevyfr50
wandb: ⭐️ View project at: https://wandb.ai/janezdu-uiuc/irm
wandb: Synced 5 W&B file(s), 0 media file(s), 2 artifact file(s) and 1 other file(s)
wandb: Find logs at: ./wandb/run-20240907_201429-gevyfr50/logs
wandb: WARNING The new W&B backend becomes opt-out in version 0.18.0; try it out with `wandb.require("core")`! See https://wandb.me/wandb-core for more information.
wandb: Currently logged in as: janezdu (janezdu-uiuc). Use `wandb login --relogin` to force relogin
wandb: wandb version 0.17.9 is available!  To upgrade, please run:
wandb:  $ pip install wandb --upgrade
wandb: Tracking run with wandb version 0.17.7
wandb: Run data is saved locally in /scratch/users/zd16/sparseIRM-resnet-ver/wandb/run-20240907_201718-bfjqie3r
wandb: Run `wandb offline` to turn off syncing.
wandb: Syncing run name_random
wandb: ⭐️ View project at https://wandb.ai/janezdu-uiuc/irm
wandb: 🚀 View run at https://wandb.ai/janezdu-uiuc/irm/runs/bfjqie3r
=> Reading YAML config from configs/smallscale/resnet18/resnet18-usc-unsigned.yaml
Namespace(data='dataset/', optimizer='adam', weight_opt='adam', set='mnistcifar', arch='ResNet18', config='configs/smallscale/resnet18/resnet18-usc-unsigned.yaml', log_dir=None, workers=4, epochs=50, start_epoch=None, batch_size=390, lr=0.006, warmup_length=0, momentum=0.9, weight_decay=0.0, print_freq=10, num_classes=1, resume='', resume_train_weights='', evaluate=False, pretrained=None, pretrained_distill=None, alpha_distill=0.95, T_distill=2, seed=0, multigpu=[0], lr_policy='cosine_lr', lr_adjust=30, lr_gamma=0.1, name='baseline', save_every=-1, prune_rate=1.0, param_prune_rate=0.0, pr_start=1.0, low_data=1, width_mult=1.0, nesterov=False, threetimes=False, random_subnet=False, one_batch=False, conv_type='DenseConv', freeze_weights=False, st=False, mode='fan_in', nonlinearity='relu', bn_type='LearnedBatchNorm', init='kaiming_normal', no_bn_decay=False, scale_fan=False, first_layer_dense=False, last_layer_dense=True, approx=False, zero=False, flip=False, bs=False, gumbel_sample=False, multiply_prob=False, no_multiply=False, multiply_cont=False, multiply_prob_bs=False, indiv=False, label_smoothing=None, first_layer_type=None, trainer='default', score_init_constant=1.0, K=1, update_freq=20, D=0.01, T=1, TA=True, TA2=False, TA_grow=False, center=False, straight_through=False, PLA_factor=0.1, PLA_patience=10, gradient_loss_para=0, abs_loss_para=0, thres=0.9, runs_name='name_random', resume_compare_loss1='', resume_compare_loss2='', init_weights='', trained_mask='', weight_rescaling=False, constrain_by_layer=False, weight_rescaling_data=False, use_running_stats=False, not_clipping=False, rescaling_para=False, lasso_para=0, dont_freeze_weights=False, iterative=True, prob_by_weight=False, rescale_at_fix_subnet=False, train_weights_at_the_same_time=False, sample_from_training_set=False, load_true_para=False, distill=False, finetune=False, stablize=False, prev_best=0, weight_opt_lr=0.0006, n=500, ts=0.28, te=0.6, d=20000, s=80, c=0.75, init_prob=False, thres_before=0.001, wide_ratio=0.001, noise=1, cal_p_q=False, just_finetune=False, snip=False, envs_num=2, l2_regularizer_weight=0.001, data_num=50000, env_type='linear', irm_type='irmv1', hidden_dim=390, penalty_anneal_iters=400, penalty_weight=10000.0, grayscale_model=0, weight_lr_schedule=False, fix_subnet=False, freeze_weight=False, step='ours', prior_sd_coef=0, dim_inv=2, variance_gamma=1.0, dim_spu=10, image_scale=32, cons_ratio='0.999_0.7_0.1', noise_ratio=0.2, step_gamma=0.1, step_round=3, inner_steps=1, use_pgd=False, z=15.0, pgd_anneal_iters=600, pgd_skip_steps=50, fraction_z=0.95)
=> Creating model 'ResNet18'
Here!!!!!!!!
==> Conv Type: DenseConv
==> BN Type: LearnedBatchNorm
<class 'torch.nn.modules.conv.Conv2d'>
<class 'torch.nn.modules.batchnorm.BatchNorm2d'>
==> Building first layer with <class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
ResNet(
  (conv1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
  (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (relu): ReLU(inplace=True)
  (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
  (layer1): Sequential(
    (0): BasicBlock(
      (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (1): BasicBlock(
      (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (layer2): Sequential(
    (0): BasicBlock(
      (conv1): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (downsample): Sequential(
        (0): Conv2d(64, 128, kernel_size=(1, 1), stride=(2, 2), bias=False)
        (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (1): BasicBlock(
      (conv1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (layer3): Sequential(
    (0): BasicBlock(
      (conv1): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (downsample): Sequential(
        (0): Conv2d(128, 256, kernel_size=(1, 1), stride=(2, 2), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (1): BasicBlock(
      (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (layer4): Sequential(
    (0): BasicBlock(
      (conv1): Conv2d(256, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (downsample): Sequential(
        (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (1): BasicBlock(
      (conv1): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (avgpool): AdaptiveAvgPool2d(output_size=1)
  (fc): Conv2d(512, 1, kernel_size=(1, 1), stride=(1, 1), bias=False)
)
=> Parallelizing on [0] gpus
<DEBUG> gradient to module.conv1.weight
<DEBUG> gradient to module.bn1.weight
<DEBUG> gradient to module.bn1.bias
<DEBUG> gradient to module.layer1.0.conv1.weight
<DEBUG> gradient to module.layer1.0.bn1.weight
<DEBUG> gradient to module.layer1.0.bn1.bias
<DEBUG> gradient to module.layer1.0.conv2.weight
<DEBUG> gradient to module.layer1.0.bn2.weight
<DEBUG> gradient to module.layer1.0.bn2.bias
<DEBUG> gradient to module.layer1.1.conv1.weight
<DEBUG> gradient to module.layer1.1.bn1.weight
<DEBUG> gradient to module.layer1.1.bn1.bias
<DEBUG> gradient to module.layer1.1.conv2.weight
<DEBUG> gradient to module.layer1.1.bn2.weight
<DEBUG> gradient to module.layer1.1.bn2.bias
<DEBUG> gradient to module.layer2.0.conv1.weight
<DEBUG> gradient to module.layer2.0.bn1.weight
<DEBUG> gradient to module.layer2.0.bn1.bias
<DEBUG> gradient to module.layer2.0.conv2.weight
<DEBUG> gradient to module.layer2.0.bn2.weight
<DEBUG> gradient to module.layer2.0.bn2.bias
<DEBUG> gradient to module.layer2.0.downsample.0.weight
<DEBUG> gradient to module.layer2.0.downsample.1.weight
<DEBUG> gradient to module.layer2.0.downsample.1.bias
<DEBUG> gradient to module.layer2.1.conv1.weight
<DEBUG> gradient to module.layer2.1.bn1.weight
<DEBUG> gradient to module.layer2.1.bn1.bias
<DEBUG> gradient to module.layer2.1.conv2.weight
<DEBUG> gradient to module.layer2.1.bn2.weight
<DEBUG> gradient to module.layer2.1.bn2.bias
<DEBUG> gradient to module.layer3.0.conv1.weight
<DEBUG> gradient to module.layer3.0.bn1.weight
<DEBUG> gradient to module.layer3.0.bn1.bias
<DEBUG> gradient to module.layer3.0.conv2.weight
<DEBUG> gradient to module.layer3.0.bn2.weight
<DEBUG> gradient to module.layer3.0.bn2.bias
<DEBUG> gradient to module.layer3.0.downsample.0.weight
<DEBUG> gradient to module.layer3.0.downsample.1.weight
<DEBUG> gradient to module.layer3.0.downsample.1.bias
<DEBUG> gradient to module.layer3.1.conv1.weight
<DEBUG> gradient to module.layer3.1.bn1.weight
<DEBUG> gradient to module.layer3.1.bn1.bias
<DEBUG> gradient to module.layer3.1.conv2.weight
<DEBUG> gradient to module.layer3.1.bn2.weight
<DEBUG> gradient to module.layer3.1.bn2.bias
<DEBUG> gradient to module.layer4.0.conv1.weight
<DEBUG> gradient to module.layer4.0.bn1.weight
<DEBUG> gradient to module.layer4.0.bn1.bias
<DEBUG> gradient to module.layer4.0.conv2.weight
<DEBUG> gradient to module.layer4.0.bn2.weight
<DEBUG> gradient to module.layer4.0.bn2.bias
<DEBUG> gradient to module.layer4.0.downsample.0.weight
<DEBUG> gradient to module.layer4.0.downsample.1.weight
<DEBUG> gradient to module.layer4.0.downsample.1.bias
<DEBUG> gradient to module.layer4.1.conv1.weight
<DEBUG> gradient to module.layer4.1.bn1.weight
<DEBUG> gradient to module.layer4.1.bn1.bias
<DEBUG> gradient to module.layer4.1.conv2.weight
<DEBUG> gradient to module.layer4.1.bn2.weight
<DEBUG> gradient to module.layer4.1.bn2.bias
<DEBUG> gradient to module.fc.weight
Files already downloaded and verified
Files already downloaded and verified
Adding Noise to Label, len(Y)=12000, Label_noise=1174
Xmp (7877, 3, 32, 32) (6903, 3, 32, 32)
Xcp (6036, 3, 32, 32) (5964, 3, 32, 32)
env=0 2497 2497 3 3
xn 2500 xp 2500
env=1 1750 1750 750 750
xn 2500 xp 2500
env=2 50 50 450 450
xn 500 xp 500
=> Creating model 'EBD'
EBD(
  (embedings): Embedding(2, 1)
)
=> Parallelizing on [0] gpus
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:01<00:39,  1.57s/it] 23%|##3       | 6/26 [00:01<00:04,  4.66it/s] 38%|###8      | 10/26 [00:01<00:01,  8.32it/s] 54%|#####3    | 14/26 [00:01<00:00, 12.33it/s] 73%|#######3  | 19/26 [00:02<00:00, 17.43it/s] 88%|########8 | 23/26 [00:02<00:00, 21.37it/s]100%|##########| 26/26 [00:03<00:00,  7.37it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 0 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 2 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 3 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 4 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 5 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 6 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 7 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 8 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 9 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 10 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 11 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 12 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 13 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 14 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 15 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 16 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 17 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 18 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 19 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 20 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 21 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 22 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 23 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 24 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 25 400
penalty weights 0.0
Epoch: [0][  26/  26]	Loss 0.470 (0.530)	train_nll   0.47 (  0.53)	train_penalty   0.09 (  0.20)	weight_norm  20.91 ( 18.14)	train_acc   0.82 (  0.81)	train_minacc   0.02 (  0.07)	train_majacc   1.00 (  0.95)	train_corr   0.00 (  0.00)	l1 7.4778 (7.7295)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.68it/s] 12%|#1        | 3/26 [00:00<00:02, 11.32it/s] 31%|###       | 8/26 [00:00<00:00, 25.46it/s]                                               31%|###       | 8/26 [00:00<00:00, 25.46it/s] 50%|#####     | 13/26 [00:00<00:00, 33.12it/s] 69%|######9   | 18/26 [00:00<00:00, 34.82it/s]                                                69%|######9   | 18/26 [00:00<00:00, 34.82it/s] 88%|########8 | 23/26 [00:00<00:00, 38.48it/s]100%|##########| 26/26 [00:00<00:00, 27.77it/s]
Test: [   0/  26]	Loss 0.459 (0.459)	test_acc   0.83 (  0.83)	test_minacc   0.05 (  0.05)	test_majacc   0.98 (  0.98)	Loss_d 0.459 (0.459)	test_acc_d   0.83 (  0.83)	test_minacc_d   0.05 (  0.05)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.96 (  0.96)
Test: [  10/  26]	Loss 0.415 (0.428)	test_acc   0.85 (  0.84)	test_minacc   0.02 (  0.02)	test_majacc   0.99 (  0.99)	Loss_d 0.415 (0.428)	test_acc_d   0.85 (  0.84)	test_minacc_d   0.02 (  0.02)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.97 (  0.97)
Test: [  20/  26]	Loss 0.404 (0.415)	test_acc   0.85 (  0.85)	test_minacc   0.02 (  0.02)	test_majacc   0.99 (  0.99)	Loss_d 0.404 (0.415)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.02 (  0.02)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.97 (  0.97)
Test: [  26/  26]	Loss 0.468 (0.418)	test_acc   0.82 (  0.84)	test_minacc   0.02 (  0.03)	test_majacc   0.99 (  0.99)	Loss_d 0.468 (0.418)	test_acc_d   0.82 (  0.84)	test_minacc_d   0.02 (  0.03)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.97 (  0.97)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00,  2.50it/s]100%|##########| 1/1 [00:00<00:00,  2.50it/s]
Test: [  0/  1]	Loss 1.693 (1.693)	test_acc   0.12 (  0.12)	test_minacc   0.03 (  0.03)	test_majacc   0.99 (  0.99)	Loss_d 1.693 (1.693)	test_acc_d   0.12 (  0.12)	test_minacc_d   0.03 (  0.03)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.96 (  0.96)
Test: [  1/  1]	Loss 1.693 (1.693)	test_acc   0.12 (  0.12)	test_minacc   0.03 (  0.03)	test_majacc   0.99 (  0.99)	Loss_d 1.693 (1.693)	test_acc_d   0.12 (  0.12)	test_minacc_d   0.03 (  0.03)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.96 (  0.96)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/142/checkpoints/model_best.pth
Overall Timing[  0/  1]	epoch_time 0.0912 (0.0912)	validation_time 0.0070 (0.0070)	train_time 0.0826 (0.0826)
record: (train_acc, test_acc) (0.8446000277400016, 0.12200000882148743)
last accs (train_acc, test_acc) (0.8446000277400016, 0.12200000882148743)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.40it/s] 15%|#5        | 4/26 [00:00<00:01, 18.04it/s] 31%|###       | 8/26 [00:00<00:00, 25.22it/s] 46%|####6     | 12/26 [00:00<00:00, 29.37it/s] 65%|######5   | 17/26 [00:00<00:00, 33.31it/s] 85%|########4 | 22/26 [00:00<00:00, 36.11it/s]100%|##########| 26/26 [00:00<00:00, 30.10it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 26 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 27 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 28 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 29 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 30 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 31 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 32 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 33 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 34 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 35 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 36 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 37 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 38 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 39 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 40 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 41 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 42 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 43 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 44 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 45 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 46 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 47 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 48 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 49 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 50 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 51 400
penalty weights 0.0
Epoch: [1][  26/  26]	Loss 0.447 (0.409)	train_nll   0.45 (  0.41)	train_penalty   0.07 (  0.06)	weight_norm  22.01 ( 21.67)	train_acc   0.82 (  0.85)	train_minacc   0.05 (  0.02)	train_majacc   0.99 (  0.99)	train_corr   0.00 (  0.00)	l1 7.7835 (7.6857)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.70it/s] 27%|##6       | 7/26 [00:00<00:00, 35.06it/s]                                               27%|##6       | 7/26 [00:00<00:00, 35.06it/s] 50%|#####     | 13/26 [00:00<00:00, 43.06it/s] 69%|######9   | 18/26 [00:00<00:00, 43.34it/s]                                                69%|######9   | 18/26 [00:00<00:00, 43.34it/s] 92%|#########2| 24/26 [00:00<00:00, 48.12it/s]100%|##########| 26/26 [00:00<00:00, 40.99it/s]
Test: [   0/  26]	Loss 0.442 (0.442)	test_acc   0.83 (  0.83)	test_minacc   0.05 (  0.05)	test_majacc   0.98 (  0.98)	Loss_d 0.442 (0.442)	test_acc_d   0.83 (  0.83)	test_minacc_d   0.05 (  0.05)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.94 (  0.94)
Test: [  10/  26]	Loss 0.399 (0.410)	test_acc   0.85 (  0.84)	test_minacc   0.02 (  0.03)	test_majacc   0.99 (  0.98)	Loss_d 0.399 (0.410)	test_acc_d   0.85 (  0.84)	test_minacc_d   0.02 (  0.03)	test_majacc_d   0.99 (  0.98)	test_corr_d   0.95 (  0.95)
Test: [  20/  26]	Loss 0.387 (0.396)	test_acc   0.86 (  0.85)	test_minacc   0.05 (  0.05)	test_majacc   0.99 (  0.99)	Loss_d 0.387 (0.396)	test_acc_d   0.86 (  0.85)	test_minacc_d   0.05 (  0.05)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.95 (  0.95)
Test: [  26/  26]	Loss 0.446 (0.397)	test_acc   0.82 (  0.84)	test_minacc   0.05 (  0.05)	test_majacc   0.99 (  0.99)	Loss_d 0.446 (0.397)	test_acc_d   0.82 (  0.84)	test_minacc_d   0.05 (  0.05)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.94 (  0.95)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.76it/s]
Test: [  0/  1]	Loss 1.626 (1.626)	test_acc   0.14 (  0.14)	test_minacc   0.05 (  0.05)	test_majacc   1.00 (  1.00)	Loss_d 1.626 (1.626)	test_acc_d   0.14 (  0.14)	test_minacc_d   0.05 (  0.05)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.92 (  0.92)
Test: [  1/  1]	Loss 1.626 (1.626)	test_acc   0.14 (  0.14)	test_minacc   0.05 (  0.05)	test_majacc   1.00 (  1.00)	Loss_d 1.626 (1.626)	test_acc_d   0.14 (  0.14)	test_minacc_d   0.05 (  0.05)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.92 (  0.92)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/142/checkpoints/model_best.pth
Overall Timing[  1/  1]	epoch_time 0.0358 (0.0635)	validation_time 0.0003 (0.0037)	train_time 0.0354 (0.0590)
record: (train_acc, test_acc) (0.8446000198125839, 0.14400000870227814)
last accs (train_acc, test_acc) (0.8446000198125839, 0.14400000870227814)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.35it/s]  8%|7         | 2/26 [00:00<00:03,  6.98it/s] 23%|##3       | 6/26 [00:00<00:01, 17.54it/s] 38%|###8      | 10/26 [00:00<00:00, 23.81it/s] 54%|#####3    | 14/26 [00:00<00:00, 28.75it/s] 69%|######9   | 18/26 [00:00<00:00, 31.85it/s] 85%|########4 | 22/26 [00:00<00:00, 33.31it/s]100%|##########| 26/26 [00:00<00:00, 34.89it/s]100%|##########| 26/26 [00:00<00:00, 26.16it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 52 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 53 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 54 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 55 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 56 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 57 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 58 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 59 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 60 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 61 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 62 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 63 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 64 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 65 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 66 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 67 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 68 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 69 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 70 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 71 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 72 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 73 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 74 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 75 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 76 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 77 400
penalty weights 0.0
Epoch: [2][  26/  26]	Loss 0.439 (0.393)	train_nll   0.44 (  0.39)	train_penalty   0.06 (  0.05)	weight_norm  22.14 ( 22.09)	train_acc   0.83 (  0.85)	train_minacc   0.18 (  0.05)	train_majacc   0.97 (  0.99)	train_corr   0.00 (  0.00)	l1 7.8281 (7.7882)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 19.10it/s] 27%|##6       | 7/26 [00:00<00:00, 35.79it/s]                                               27%|##6       | 7/26 [00:00<00:00, 35.79it/s] 46%|####6     | 12/26 [00:00<00:00, 40.43it/s] 65%|######5   | 17/26 [00:00<00:00, 39.19it/s]                                                65%|######5   | 17/26 [00:00<00:00, 39.19it/s] 85%|########4 | 22/26 [00:00<00:00, 42.06it/s]100%|##########| 26/26 [00:00<00:00, 37.11it/s]
Test: [   0/  26]	Loss 0.400 (0.400)	test_acc   0.83 (  0.83)	test_minacc   0.28 (  0.28)	test_majacc   0.94 (  0.94)	Loss_d 0.400 (0.400)	test_acc_d   0.83 (  0.83)	test_minacc_d   0.28 (  0.28)	test_majacc_d   0.94 (  0.94)	test_corr_d   0.84 (  0.84)
Test: [  10/  26]	Loss 0.367 (0.381)	test_acc   0.86 (  0.84)	test_minacc   0.20 (  0.24)	test_majacc   0.97 (  0.95)	Loss_d 0.367 (0.381)	test_acc_d   0.86 (  0.84)	test_minacc_d   0.20 (  0.24)	test_majacc_d   0.97 (  0.95)	test_corr_d   0.87 (  0.87)
Test: [  20/  26]	Loss 0.375 (0.372)	test_acc   0.85 (  0.85)	test_minacc   0.18 (  0.24)	test_majacc   0.96 (  0.95)	Loss_d 0.375 (0.372)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.18 (  0.24)	test_majacc_d   0.96 (  0.95)	test_corr_d   0.87 (  0.87)
Test: [  26/  26]	Loss 0.412 (0.371)	test_acc   0.82 (  0.85)	test_minacc   0.23 (  0.24)	test_majacc   0.95 (  0.95)	Loss_d 0.412 (0.371)	test_acc_d   0.82 (  0.85)	test_minacc_d   0.23 (  0.24)	test_majacc_d   0.95 (  0.95)	test_corr_d   0.87 (  0.87)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.64it/s]
Test: [  0/  1]	Loss 1.359 (1.359)	test_acc   0.28 (  0.28)	test_minacc   0.20 (  0.20)	test_majacc   0.98 (  0.98)	Loss_d 1.359 (1.359)	test_acc_d   0.28 (  0.28)	test_minacc_d   0.20 (  0.20)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.68 (  0.68)
Test: [  1/  1]	Loss 1.359 (1.359)	test_acc   0.28 (  0.28)	test_minacc   0.20 (  0.20)	test_majacc   0.98 (  0.98)	Loss_d 1.359 (1.359)	test_acc_d   0.28 (  0.28)	test_minacc_d   0.20 (  0.20)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.68 (  0.68)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/142/checkpoints/model_best.pth
Overall Timing[  2/  1]	epoch_time 0.0397 (0.0556)	validation_time 0.0004 (0.0026)	train_time 0.0392 (0.0524)
record: (train_acc, test_acc) (0.84620002669096, 0.27800002694129944)
last accs (train_acc, test_acc) (0.84620002669096, 0.27800002694129944)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 18.22it/s] 23%|##3       | 6/26 [00:00<00:00, 27.86it/s] 38%|###8      | 10/26 [00:00<00:00, 30.64it/s] 54%|#####3    | 14/26 [00:00<00:00, 32.51it/s] 69%|######9   | 18/26 [00:00<00:00, 33.41it/s] 85%|########4 | 22/26 [00:00<00:00, 34.14it/s]100%|##########| 26/26 [00:00<00:00, 35.06it/s]100%|##########| 26/26 [00:00<00:00, 30.65it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 78 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 79 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 80 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 81 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 82 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 83 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 84 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 85 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 86 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 87 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 88 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 89 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 90 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 91 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 92 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 93 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 94 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 95 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 96 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 97 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 98 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 99 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 100 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 101 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 102 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 103 400
penalty weights 0.0
Epoch: [3][  26/  26]	Loss 0.396 (0.370)	train_nll   0.40 (  0.37)	train_penalty   0.05 (  0.04)	weight_norm  22.20 ( 22.17)	train_acc   0.84 (  0.85)	train_minacc   0.16 (  0.11)	train_majacc   0.99 (  0.98)	train_corr   0.00 (  0.00)	l1 7.7823 (7.7734)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.82it/s] 15%|#5        | 4/26 [00:00<00:01, 19.32it/s] 35%|###4      | 9/26 [00:00<00:00, 32.04it/s]                                               35%|###4      | 9/26 [00:00<00:00, 32.04it/s] 54%|#####3    | 14/26 [00:00<00:00, 37.18it/s] 73%|#######3  | 19/26 [00:00<00:00, 36.93it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 36.93it/s] 96%|#########6| 25/26 [00:00<00:00, 41.98it/s]100%|##########| 26/26 [00:00<00:00, 34.59it/s]
Test: [   0/  26]	Loss 0.354 (0.354)	test_acc   0.84 (  0.84)	test_minacc   0.23 (  0.23)	test_majacc   0.96 (  0.96)	Loss_d 0.354 (0.354)	test_acc_d   0.84 (  0.84)	test_minacc_d   0.23 (  0.23)	test_majacc_d   0.96 (  0.96)	test_corr_d   0.89 (  0.89)
Test: [  10/  26]	Loss 0.342 (0.348)	test_acc   0.88 (  0.85)	test_minacc   0.23 (  0.18)	test_majacc   0.99 (  0.98)	Loss_d 0.342 (0.348)	test_acc_d   0.88 (  0.85)	test_minacc_d   0.23 (  0.18)	test_majacc_d   0.99 (  0.98)	test_corr_d   0.91 (  0.91)
Test: [  20/  26]	Loss 0.317 (0.336)	test_acc   0.86 (  0.86)	test_minacc   0.18 (  0.18)	test_majacc   0.97 (  0.98)	Loss_d 0.317 (0.336)	test_acc_d   0.86 (  0.86)	test_minacc_d   0.18 (  0.18)	test_majacc_d   0.97 (  0.98)	test_corr_d   0.91 (  0.91)
Test: [  26/  26]	Loss 0.368 (0.336)	test_acc   0.83 (  0.86)	test_minacc   0.14 (  0.18)	test_majacc   0.98 (  0.98)	Loss_d 0.368 (0.336)	test_acc_d   0.83 (  0.86)	test_minacc_d   0.14 (  0.18)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.90 (  0.91)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 60.63it/s]
Test: [  0/  1]	Loss 1.455 (1.455)	test_acc   0.23 (  0.23)	test_minacc   0.14 (  0.14)	test_majacc   1.00 (  1.00)	Loss_d 1.455 (1.455)	test_acc_d   0.23 (  0.23)	test_minacc_d   0.14 (  0.14)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.77 (  0.77)
Test: [  1/  1]	Loss 1.455 (1.455)	test_acc   0.23 (  0.23)	test_minacc   0.14 (  0.14)	test_majacc   1.00 (  1.00)	Loss_d 1.455 (1.455)	test_acc_d   0.23 (  0.23)	test_minacc_d   0.14 (  0.14)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.77 (  0.77)
Overall Timing[  3/  1]	epoch_time 0.0415 (0.0521)	validation_time 0.0005 (0.0021)	train_time 0.0411 (0.0496)
record: (train_acc, test_acc) (0.84620002669096, 0.27800002694129944)
last accs (train_acc, test_acc) (0.8566000251173973, 0.2290000170469284)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.82it/s] 19%|#9        | 5/26 [00:00<00:00, 23.13it/s] 35%|###4      | 9/26 [00:00<00:00, 28.55it/s] 50%|#####     | 13/26 [00:00<00:00, 31.17it/s] 65%|######5   | 17/26 [00:00<00:00, 33.04it/s] 81%|########  | 21/26 [00:00<00:00, 35.18it/s] 96%|#########6| 25/26 [00:00<00:00, 36.28it/s]100%|##########| 26/26 [00:00<00:00, 30.48it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 104 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 105 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 106 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 107 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 108 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 109 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 110 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 111 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 112 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 113 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 114 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 115 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 116 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 117 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 118 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 119 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 120 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 121 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 122 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 123 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 124 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 125 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 126 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 127 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 128 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 129 400
penalty weights 0.0
Epoch: [4][  26/  26]	Loss 0.340 (0.343)	train_nll   0.34 (  0.34)	train_penalty   0.02 (  0.03)	weight_norm  22.27 ( 22.24)	train_acc   0.86 (  0.86)	train_minacc   0.45 (  0.22)	train_majacc   0.94 (  0.97)	train_corr   0.00 (  0.00)	l1 7.8807 (7.7433)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 17.73it/s] 31%|###       | 8/26 [00:00<00:00, 38.57it/s]                                               31%|###       | 8/26 [00:00<00:00, 38.57it/s] 50%|#####     | 13/26 [00:00<00:00, 38.33it/s] 69%|######9   | 18/26 [00:00<00:00, 41.56it/s]                                                69%|######9   | 18/26 [00:00<00:00, 41.56it/s] 88%|########8 | 23/26 [00:00<00:00, 44.24it/s]100%|##########| 26/26 [00:00<00:00, 38.74it/s]
Test: [   0/  26]	Loss 0.314 (0.314)	test_acc   0.86 (  0.86)	test_minacc   0.45 (  0.45)	test_majacc   0.94 (  0.94)	Loss_d 0.314 (0.314)	test_acc_d   0.86 (  0.86)	test_minacc_d   0.45 (  0.45)	test_majacc_d   0.94 (  0.94)	test_corr_d   0.83 (  0.83)
Test: [  10/  26]	Loss 0.323 (0.315)	test_acc   0.86 (  0.87)	test_minacc   0.38 (  0.39)	test_majacc   0.95 (  0.95)	Loss_d 0.323 (0.315)	test_acc_d   0.86 (  0.87)	test_minacc_d   0.38 (  0.39)	test_majacc_d   0.95 (  0.95)	test_corr_d   0.86 (  0.86)
Test: [  20/  26]	Loss 0.289 (0.306)	test_acc   0.89 (  0.87)	test_minacc   0.47 (  0.39)	test_majacc   0.96 (  0.96)	Loss_d 0.289 (0.306)	test_acc_d   0.89 (  0.87)	test_minacc_d   0.47 (  0.39)	test_majacc_d   0.96 (  0.96)	test_corr_d   0.86 (  0.86)
Test: [  26/  26]	Loss 0.315 (0.305)	test_acc   0.86 (  0.87)	test_minacc   0.48 (  0.40)	test_majacc   0.94 (  0.96)	Loss_d 0.315 (0.305)	test_acc_d   0.86 (  0.87)	test_minacc_d   0.48 (  0.40)	test_majacc_d   0.94 (  0.96)	test_corr_d   0.83 (  0.86)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 67.40it/s]
Test: [  0/  1]	Loss 1.405 (1.405)	test_acc   0.40 (  0.40)	test_minacc   0.34 (  0.34)	test_majacc   0.94 (  0.94)	Loss_d 1.405 (1.405)	test_acc_d   0.40 (  0.40)	test_minacc_d   0.34 (  0.34)	test_majacc_d   0.94 (  0.94)	test_corr_d   0.53 (  0.53)
Test: [  1/  1]	Loss 1.405 (1.405)	test_acc   0.40 (  0.40)	test_minacc   0.34 (  0.34)	test_majacc   0.94 (  0.94)	Loss_d 1.405 (1.405)	test_acc_d   0.40 (  0.40)	test_minacc_d   0.34 (  0.34)	test_majacc_d   0.94 (  0.94)	test_corr_d   0.53 (  0.53)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/142/checkpoints/model_best.pth
Overall Timing[  4/  1]	epoch_time 0.0385 (0.0493)	validation_time 0.0003 (0.0017)	train_time 0.0382 (0.0473)
record: (train_acc, test_acc) (0.8721000217199325, 0.39900001883506775)
last accs (train_acc, test_acc) (0.8721000217199325, 0.39900001883506775)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.80it/s] 19%|#9        | 5/26 [00:00<00:01, 20.87it/s] 35%|###4      | 9/26 [00:00<00:00, 26.93it/s] 50%|#####     | 13/26 [00:00<00:00, 30.93it/s] 65%|######5   | 17/26 [00:00<00:00, 33.54it/s] 81%|########  | 21/26 [00:00<00:00, 35.07it/s] 96%|#########6| 25/26 [00:00<00:00, 36.37it/s]100%|##########| 26/26 [00:00<00:00, 29.68it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 130 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 131 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 132 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 133 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 134 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 135 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 136 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 137 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 138 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 139 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 140 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 141 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 142 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 143 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 144 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 145 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 146 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 147 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 148 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 149 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 150 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 151 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 152 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 153 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 154 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 155 400
penalty weights 0.0
Epoch: [5][  26/  26]	Loss 0.317 (0.321)	train_nll   0.32 (  0.32)	train_penalty   0.01 (  0.02)	weight_norm  22.36 ( 22.31)	train_acc   0.87 (  0.86)	train_minacc   0.48 (  0.29)	train_majacc   0.96 (  0.97)	train_corr   0.00 (  0.00)	l1 7.8361 (7.7264)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.79it/s] 27%|##6       | 7/26 [00:00<00:00, 32.12it/s]                                               27%|##6       | 7/26 [00:00<00:00, 32.12it/s] 46%|####6     | 12/26 [00:00<00:00, 38.73it/s] 65%|######5   | 17/26 [00:00<00:00, 38.02it/s]                                                65%|######5   | 17/26 [00:00<00:00, 38.02it/s] 88%|########8 | 23/26 [00:00<00:00, 43.94it/s]100%|##########| 26/26 [00:00<00:00, 36.78it/s]
Test: [   0/  26]	Loss 0.311 (0.311)	test_acc   0.87 (  0.87)	test_minacc   0.61 (  0.61)	test_majacc   0.92 (  0.92)	Loss_d 0.311 (0.311)	test_acc_d   0.87 (  0.87)	test_minacc_d   0.61 (  0.61)	test_majacc_d   0.92 (  0.92)	test_corr_d   0.79 (  0.79)
Test: [  10/  26]	Loss 0.320 (0.302)	test_acc   0.88 (  0.87)	test_minacc   0.52 (  0.51)	test_majacc   0.94 (  0.94)	Loss_d 0.320 (0.302)	test_acc_d   0.88 (  0.87)	test_minacc_d   0.52 (  0.51)	test_majacc_d   0.94 (  0.94)	test_corr_d   0.82 (  0.82)
Test: [  20/  26]	Loss 0.264 (0.292)	test_acc   0.90 (  0.88)	test_minacc   0.62 (  0.52)	test_majacc   0.95 (  0.94)	Loss_d 0.264 (0.292)	test_acc_d   0.90 (  0.88)	test_minacc_d   0.62 (  0.52)	test_majacc_d   0.95 (  0.94)	test_corr_d   0.82 (  0.82)
Test: [  26/  26]	Loss 0.290 (0.291)	test_acc   0.90 (  0.88)	test_minacc   0.64 (  0.52)	test_majacc   0.95 (  0.94)	Loss_d 0.290 (0.291)	test_acc_d   0.90 (  0.88)	test_minacc_d   0.64 (  0.52)	test_majacc_d   0.95 (  0.94)	test_corr_d   0.78 (  0.82)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.97it/s]
Test: [  0/  1]	Loss 1.299 (1.299)	test_acc   0.47 (  0.47)	test_minacc   0.42 (  0.42)	test_majacc   0.95 (  0.95)	Loss_d 1.299 (1.299)	test_acc_d   0.47 (  0.47)	test_minacc_d   0.42 (  0.42)	test_majacc_d   0.95 (  0.95)	test_corr_d   0.37 (  0.37)
Test: [  1/  1]	Loss 1.299 (1.299)	test_acc   0.47 (  0.47)	test_minacc   0.42 (  0.42)	test_majacc   0.95 (  0.95)	Loss_d 1.299 (1.299)	test_acc_d   0.47 (  0.47)	test_minacc_d   0.42 (  0.42)	test_majacc_d   0.95 (  0.95)	test_corr_d   0.37 (  0.37)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/142/checkpoints/model_best.pth
Overall Timing[  5/  1]	epoch_time 0.0418 (0.0481)	validation_time 0.0006 (0.0015)	train_time 0.0411 (0.0463)
record: (train_acc, test_acc) (0.8780000217556954, 0.47200003266334534)
last accs (train_acc, test_acc) (0.8780000217556954, 0.47200003266334534)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 17.86it/s] 27%|##6       | 7/26 [00:00<00:00, 31.46it/s] 42%|####2     | 11/26 [00:00<00:00, 33.87it/s] 58%|#####7    | 15/26 [00:00<00:00, 35.25it/s] 77%|#######6  | 20/26 [00:00<00:00, 37.39it/s] 92%|#########2| 24/26 [00:00<00:00, 37.34it/s]100%|##########| 26/26 [00:00<00:00, 33.26it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 156 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 157 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 158 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 159 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 160 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 161 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 162 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 163 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 164 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 165 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 166 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 167 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 168 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 169 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 170 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 171 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 172 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 173 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 174 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 175 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 176 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 177 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 178 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 179 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 180 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 181 400
penalty weights 0.0
Epoch: [6][  26/  26]	Loss 0.312 (0.311)	train_nll   0.31 (  0.31)	train_penalty   0.01 (  0.02)	weight_norm  22.46 ( 22.41)	train_acc   0.89 (  0.87)	train_minacc   0.55 (  0.36)	train_majacc   0.96 (  0.96)	train_corr   0.00 (  0.00)	l1 7.8093 (7.8052)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.96it/s] 27%|##6       | 7/26 [00:00<00:00, 36.93it/s]                                               27%|##6       | 7/26 [00:00<00:00, 36.93it/s] 42%|####2     | 11/26 [00:00<00:00, 33.77it/s] 65%|######5   | 17/26 [00:00<00:00, 42.33it/s]                                                65%|######5   | 17/26 [00:00<00:00, 42.33it/s] 92%|#########2| 24/26 [00:00<00:00, 46.20it/s]100%|##########| 26/26 [00:00<00:00, 39.39it/s]
Test: [   0/  26]	Loss 0.279 (0.279)	test_acc   0.88 (  0.88)	test_minacc   0.56 (  0.56)	test_majacc   0.94 (  0.94)	Loss_d 0.279 (0.279)	test_acc_d   0.88 (  0.88)	test_minacc_d   0.56 (  0.56)	test_majacc_d   0.94 (  0.94)	test_corr_d   0.81 (  0.81)
Test: [  10/  26]	Loss 0.311 (0.286)	test_acc   0.87 (  0.88)	test_minacc   0.54 (  0.52)	test_majacc   0.93 (  0.95)	Loss_d 0.311 (0.286)	test_acc_d   0.87 (  0.88)	test_minacc_d   0.54 (  0.52)	test_majacc_d   0.93 (  0.95)	test_corr_d   0.83 (  0.83)
Test: [  20/  26]	Loss 0.248 (0.277)	test_acc   0.90 (  0.88)	test_minacc   0.56 (  0.52)	test_majacc   0.96 (  0.95)	Loss_d 0.248 (0.277)	test_acc_d   0.90 (  0.88)	test_minacc_d   0.56 (  0.52)	test_majacc_d   0.96 (  0.95)	test_corr_d   0.84 (  0.84)
Test: [  26/  26]	Loss 0.267 (0.274)	test_acc   0.89 (  0.88)	test_minacc   0.66 (  0.53)	test_majacc   0.94 (  0.95)	Loss_d 0.267 (0.274)	test_acc_d   0.89 (  0.88)	test_minacc_d   0.66 (  0.53)	test_majacc_d   0.94 (  0.95)	test_corr_d   0.81 (  0.84)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 58.57it/s]
Test: [  0/  1]	Loss 1.383 (1.383)	test_acc   0.47 (  0.47)	test_minacc   0.42 (  0.42)	test_majacc   0.93 (  0.93)	Loss_d 1.383 (1.383)	test_acc_d   0.47 (  0.47)	test_minacc_d   0.42 (  0.42)	test_majacc_d   0.93 (  0.93)	test_corr_d   0.41 (  0.41)
Test: [  1/  1]	Loss 1.383 (1.383)	test_acc   0.47 (  0.47)	test_minacc   0.42 (  0.42)	test_majacc   0.93 (  0.93)	Loss_d 1.383 (1.383)	test_acc_d   0.47 (  0.47)	test_minacc_d   0.42 (  0.42)	test_majacc_d   0.93 (  0.93)	test_corr_d   0.41 (  0.41)
Overall Timing[  6/  1]	epoch_time 0.0393 (0.0468)	validation_time 0.0004 (0.0014)	train_time 0.0389 (0.0452)
record: (train_acc, test_acc) (0.8780000217556954, 0.47200003266334534)
last accs (train_acc, test_acc) (0.8844000200033187, 0.46800002455711365)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:06,  3.63it/s] 15%|#5        | 4/26 [00:00<00:01, 12.54it/s] 31%|###       | 8/26 [00:00<00:00, 20.41it/s] 46%|####6     | 12/26 [00:00<00:00, 25.38it/s] 62%|######1   | 16/26 [00:00<00:00, 28.69it/s] 77%|#######6  | 20/26 [00:00<00:00, 30.90it/s] 92%|#########2| 24/26 [00:00<00:00, 32.26it/s]100%|##########| 26/26 [00:01<00:00, 24.85it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 182 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 183 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 184 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 185 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 186 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 187 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 188 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 189 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 190 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 191 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 192 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 193 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 194 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 195 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 196 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 197 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 198 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 199 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 200 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 201 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 202 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 203 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 204 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 205 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 206 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 207 400
penalty weights 0.0
Epoch: [7][  26/  26]	Loss 0.265 (0.295)	train_nll   0.27 (  0.29)	train_penalty   0.00 (  0.02)	weight_norm  22.60 ( 22.53)	train_acc   0.90 (  0.87)	train_minacc   0.77 (  0.40)	train_majacc   0.92 (  0.96)	train_corr   0.00 (  0.00)	l1 7.6082 (7.5824)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s] 15%|#5        | 4/26 [00:00<00:01, 17.93it/s] 35%|###4      | 9/26 [00:00<00:00, 29.50it/s]                                               35%|###4      | 9/26 [00:00<00:00, 29.50it/s] 58%|#####7    | 15/26 [00:00<00:00, 39.51it/s] 77%|#######6  | 20/26 [00:00<00:00, 41.15it/s]                                                77%|#######6  | 20/26 [00:00<00:00, 41.15it/s]100%|##########| 26/26 [00:00<00:00, 46.05it/s]100%|##########| 26/26 [00:00<00:00, 36.22it/s]
Test: [   0/  26]	Loss 0.274 (0.274)	test_acc   0.89 (  0.89)	test_minacc   0.70 (  0.70)	test_majacc   0.93 (  0.93)	Loss_d 0.274 (0.274)	test_acc_d   0.89 (  0.89)	test_minacc_d   0.70 (  0.70)	test_majacc_d   0.93 (  0.93)	test_corr_d   0.77 (  0.77)
Test: [  10/  26]	Loss 0.318 (0.283)	test_acc   0.86 (  0.88)	test_minacc   0.61 (  0.61)	test_majacc   0.91 (  0.93)	Loss_d 0.318 (0.283)	test_acc_d   0.86 (  0.88)	test_minacc_d   0.61 (  0.61)	test_majacc_d   0.91 (  0.93)	test_corr_d   0.77 (  0.78)
Test: [  20/  26]	Loss 0.247 (0.275)	test_acc   0.91 (  0.88)	test_minacc   0.64 (  0.61)	test_majacc   0.95 (  0.93)	Loss_d 0.247 (0.275)	test_acc_d   0.91 (  0.88)	test_minacc_d   0.64 (  0.61)	test_majacc_d   0.95 (  0.93)	test_corr_d   0.80 (  0.79)
Test: [  26/  26]	Loss 0.231 (0.271)	test_acc   0.91 (  0.89)	test_minacc   0.80 (  0.63)	test_majacc   0.93 (  0.93)	Loss_d 0.231 (0.271)	test_acc_d   0.91 (  0.89)	test_minacc_d   0.80 (  0.63)	test_majacc_d   0.93 (  0.93)	test_corr_d   0.74 (  0.79)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.26it/s]
Test: [  0/  1]	Loss 1.314 (1.314)	test_acc   0.53 (  0.53)	test_minacc   0.49 (  0.49)	test_majacc   0.94 (  0.94)	Loss_d 1.314 (1.314)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.49 (  0.49)	test_majacc_d   0.94 (  0.94)	test_corr_d   0.22 (  0.22)
Test: [  1/  1]	Loss 1.314 (1.314)	test_acc   0.53 (  0.53)	test_minacc   0.49 (  0.49)	test_majacc   0.94 (  0.94)	Loss_d 1.314 (1.314)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.49 (  0.49)	test_majacc_d   0.94 (  0.94)	test_corr_d   0.22 (  0.22)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/142/checkpoints/model_best.pth
Overall Timing[  7/  1]	epoch_time 0.0456 (0.0467)	validation_time 0.0004 (0.0013)	train_time 0.0451 (0.0452)
record: (train_acc, test_acc) (0.887100024163723, 0.531000018119812)
last accs (train_acc, test_acc) (0.887100024163723, 0.531000018119812)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.53it/s] 19%|#9        | 5/26 [00:00<00:01, 19.40it/s] 31%|###       | 8/26 [00:00<00:00, 23.18it/s] 46%|####6     | 12/26 [00:00<00:00, 27.87it/s] 62%|######1   | 16/26 [00:00<00:00, 30.44it/s] 77%|#######6  | 20/26 [00:00<00:00, 32.61it/s] 92%|#########2| 24/26 [00:00<00:00, 34.07it/s]100%|##########| 26/26 [00:00<00:00, 27.32it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 208 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 209 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 210 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 211 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 212 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 213 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 214 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 215 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 216 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 217 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 218 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 219 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 220 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 221 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 222 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 223 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 224 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 225 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 226 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 227 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 228 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 229 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 230 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 231 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 232 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 233 400
penalty weights 0.0
Epoch: [8][  26/  26]	Loss 0.263 (0.289)	train_nll   0.26 (  0.29)	train_penalty   0.00 (  0.02)	weight_norm  22.78 ( 22.68)	train_acc   0.90 (  0.88)	train_minacc   0.73 (  0.42)	train_majacc   0.93 (  0.96)	train_corr   0.00 (  0.00)	l1 7.6147 (7.5372)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.13it/s] 23%|##3       | 6/26 [00:00<00:00, 32.23it/s]                                               23%|##3       | 6/26 [00:00<00:00, 32.23it/s] 42%|####2     | 11/26 [00:00<00:00, 37.90it/s] 62%|######1   | 16/26 [00:00<00:00, 40.69it/s]                                                62%|######1   | 16/26 [00:00<00:00, 40.69it/s] 81%|########  | 21/26 [00:00<00:00, 40.57it/s]100%|##########| 26/26 [00:00<00:00, 43.26it/s]100%|##########| 26/26 [00:00<00:00, 36.71it/s]
Test: [   0/  26]	Loss 0.253 (0.253)	test_acc   0.90 (  0.90)	test_minacc   0.70 (  0.70)	test_majacc   0.94 (  0.94)	Loss_d 0.253 (0.253)	test_acc_d   0.90 (  0.90)	test_minacc_d   0.70 (  0.70)	test_majacc_d   0.94 (  0.94)	test_corr_d   0.75 (  0.75)
Test: [  10/  26]	Loss 0.266 (0.261)	test_acc   0.87 (  0.89)	test_minacc   0.61 (  0.66)	test_majacc   0.91 (  0.93)	Loss_d 0.266 (0.261)	test_acc_d   0.87 (  0.89)	test_minacc_d   0.61 (  0.66)	test_majacc_d   0.91 (  0.93)	test_corr_d   0.77 (  0.77)
Test: [  20/  26]	Loss 0.199 (0.254)	test_acc   0.92 (  0.89)	test_minacc   0.71 (  0.67)	test_majacc   0.96 (  0.93)	Loss_d 0.199 (0.254)	test_acc_d   0.92 (  0.89)	test_minacc_d   0.71 (  0.67)	test_majacc_d   0.96 (  0.93)	test_corr_d   0.81 (  0.78)
Test: [  26/  26]	Loss 0.228 (0.252)	test_acc   0.92 (  0.89)	test_minacc   0.82 (  0.68)	test_majacc   0.94 (  0.93)	Loss_d 0.228 (0.252)	test_acc_d   0.92 (  0.89)	test_minacc_d   0.82 (  0.68)	test_majacc_d   0.94 (  0.93)	test_corr_d   0.72 (  0.77)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.90it/s]
Test: [  0/  1]	Loss 1.356 (1.356)	test_acc   0.55 (  0.55)	test_minacc   0.51 (  0.51)	test_majacc   0.89 (  0.89)	Loss_d 1.356 (1.356)	test_acc_d   0.55 (  0.55)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.89 (  0.89)	test_corr_d   0.17 (  0.17)
Test: [  1/  1]	Loss 1.356 (1.356)	test_acc   0.55 (  0.55)	test_minacc   0.51 (  0.51)	test_majacc   0.89 (  0.89)	Loss_d 1.356 (1.356)	test_acc_d   0.55 (  0.55)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.89 (  0.89)	test_corr_d   0.17 (  0.17)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/142/checkpoints/model_best.pth
Overall Timing[  8/  1]	epoch_time 0.0443 (0.0464)	validation_time 0.0004 (0.0012)	train_time 0.0438 (0.0451)
record: (train_acc, test_acc) (0.8906000207662582, 0.5509999990463257)
last accs (train_acc, test_acc) (0.8906000207662582, 0.5509999990463257)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 14.57it/s] 23%|##3       | 6/26 [00:00<00:00, 25.66it/s] 38%|###8      | 10/26 [00:00<00:00, 29.59it/s] 54%|#####3    | 14/26 [00:00<00:00, 31.54it/s] 69%|######9   | 18/26 [00:00<00:00, 33.23it/s] 85%|########4 | 22/26 [00:00<00:00, 34.28it/s]100%|##########| 26/26 [00:00<00:00, 34.65it/s]100%|##########| 26/26 [00:00<00:00, 29.84it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 234 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 235 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 236 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 237 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 238 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 239 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 240 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 241 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 242 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 243 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 244 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 245 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 246 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 247 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 248 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 249 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 250 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 251 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 252 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 253 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 254 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 255 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 256 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 257 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 258 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 259 400
penalty weights 0.0
Epoch: [9][  26/  26]	Loss 0.240 (0.265)	train_nll   0.24 (  0.27)	train_penalty   0.00 (  0.01)	weight_norm  22.96 ( 22.87)	train_acc   0.91 (  0.89)	train_minacc   0.73 (  0.50)	train_majacc   0.95 (  0.96)	train_corr   0.00 (  0.00)	l1 7.5270 (7.4404)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.10it/s] 27%|##6       | 7/26 [00:00<00:00, 23.61it/s]                                               27%|##6       | 7/26 [00:00<00:00, 23.61it/s] 46%|####6     | 12/26 [00:00<00:00, 31.02it/s] 65%|######5   | 17/26 [00:00<00:00, 36.53it/s]                                                65%|######5   | 17/26 [00:00<00:00, 36.53it/s] 85%|########4 | 22/26 [00:00<00:00, 39.86it/s]100%|##########| 26/26 [00:00<00:00, 31.87it/s]
Test: [   0/  26]	Loss 0.272 (0.272)	test_acc   0.88 (  0.88)	test_minacc   0.69 (  0.69)	test_majacc   0.92 (  0.92)	Loss_d 0.272 (0.272)	test_acc_d   0.88 (  0.88)	test_minacc_d   0.69 (  0.69)	test_majacc_d   0.92 (  0.92)	test_corr_d   0.72 (  0.72)
Test: [  10/  26]	Loss 0.284 (0.256)	test_acc   0.87 (  0.89)	test_minacc   0.62 (  0.71)	test_majacc   0.92 (  0.93)	Loss_d 0.284 (0.256)	test_acc_d   0.87 (  0.89)	test_minacc_d   0.62 (  0.71)	test_majacc_d   0.92 (  0.93)	test_corr_d   0.75 (  0.74)
Test: [  20/  26]	Loss 0.207 (0.251)	test_acc   0.92 (  0.90)	test_minacc   0.75 (  0.71)	test_majacc   0.95 (  0.93)	Loss_d 0.207 (0.251)	test_acc_d   0.92 (  0.90)	test_minacc_d   0.75 (  0.71)	test_majacc_d   0.95 (  0.93)	test_corr_d   0.76 (  0.74)
Test: [  26/  26]	Loss 0.196 (0.245)	test_acc   0.92 (  0.90)	test_minacc   0.80 (  0.73)	test_majacc   0.95 (  0.93)	Loss_d 0.196 (0.245)	test_acc_d   0.92 (  0.90)	test_minacc_d   0.80 (  0.73)	test_majacc_d   0.95 (  0.93)	test_corr_d   0.71 (  0.74)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 65.29it/s]
Test: [  0/  1]	Loss 1.398 (1.398)	test_acc   0.56 (  0.56)	test_minacc   0.52 (  0.52)	test_majacc   0.89 (  0.89)	Loss_d 1.398 (1.398)	test_acc_d   0.56 (  0.56)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.89 (  0.89)	test_corr_d   0.11 (  0.11)
Test: [  1/  1]	Loss 1.398 (1.398)	test_acc   0.56 (  0.56)	test_minacc   0.52 (  0.52)	test_majacc   0.89 (  0.89)	Loss_d 1.398 (1.398)	test_acc_d   0.56 (  0.56)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.89 (  0.89)	test_corr_d   0.11 (  0.11)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/142/checkpoints/model_best.pth
Overall Timing[  9/  1]	epoch_time 0.0448 (0.0462)	validation_time 0.0004 (0.0011)	train_time 0.0443 (0.0450)
record: (train_acc, test_acc) (0.9003000203967094, 0.5610000491142273)
last accs (train_acc, test_acc) (0.9003000203967094, 0.5610000491142273)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.98it/s] 19%|#9        | 5/26 [00:00<00:01, 20.77it/s] 35%|###4      | 9/26 [00:00<00:00, 26.18it/s] 50%|#####     | 13/26 [00:00<00:00, 29.56it/s] 65%|######5   | 17/26 [00:00<00:00, 31.65it/s] 81%|########  | 21/26 [00:00<00:00, 33.19it/s] 96%|#########6| 25/26 [00:00<00:00, 33.97it/s]100%|##########| 26/26 [00:00<00:00, 28.68it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 260 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 261 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 262 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 263 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 264 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 265 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 266 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 267 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 268 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 269 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 270 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 271 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 272 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 273 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 274 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 275 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 276 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 277 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 278 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 279 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 280 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 281 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 282 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 283 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 284 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 285 400
penalty weights 0.0
Epoch: [10][  26/  26]	Loss 0.220 (0.260)	train_nll   0.22 (  0.26)	train_penalty   0.00 (  0.01)	weight_norm  23.19 ( 23.08)	train_acc   0.92 (  0.89)	train_minacc   0.77 (  0.54)	train_majacc   0.95 (  0.96)	train_corr   0.00 (  0.00)	l1 7.6320 (7.4592)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:00, 25.51it/s] 31%|###       | 8/26 [00:00<00:00, 38.33it/s]                                               31%|###       | 8/26 [00:00<00:00, 38.33it/s] 50%|#####     | 13/26 [00:00<00:00, 39.50it/s] 69%|######9   | 18/26 [00:00<00:00, 43.08it/s]                                                69%|######9   | 18/26 [00:00<00:00, 43.08it/s] 88%|########8 | 23/26 [00:00<00:00, 42.17it/s]100%|##########| 26/26 [00:00<00:00, 38.01it/s]
Test: [   0/  26]	Loss 0.249 (0.249)	test_acc   0.89 (  0.89)	test_minacc   0.66 (  0.66)	test_majacc   0.94 (  0.94)	Loss_d 0.249 (0.249)	test_acc_d   0.89 (  0.89)	test_minacc_d   0.66 (  0.66)	test_majacc_d   0.94 (  0.94)	test_corr_d   0.76 (  0.76)
Test: [  10/  26]	Loss 0.258 (0.261)	test_acc   0.88 (  0.89)	test_minacc   0.62 (  0.65)	test_majacc   0.93 (  0.93)	Loss_d 0.258 (0.261)	test_acc_d   0.88 (  0.89)	test_minacc_d   0.62 (  0.65)	test_majacc_d   0.93 (  0.93)	test_corr_d   0.78 (  0.77)
Test: [  20/  26]	Loss 0.199 (0.255)	test_acc   0.92 (  0.89)	test_minacc   0.76 (  0.66)	test_majacc   0.95 (  0.93)	Loss_d 0.199 (0.255)	test_acc_d   0.92 (  0.89)	test_minacc_d   0.76 (  0.66)	test_majacc_d   0.95 (  0.93)	test_corr_d   0.80 (  0.77)
Test: [  26/  26]	Loss 0.183 (0.246)	test_acc   0.94 (  0.90)	test_minacc   0.91 (  0.68)	test_majacc   0.95 (  0.94)	Loss_d 0.183 (0.246)	test_acc_d   0.94 (  0.90)	test_minacc_d   0.91 (  0.68)	test_majacc_d   0.95 (  0.94)	test_corr_d   0.71 (  0.77)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.57it/s]
Test: [  0/  1]	Loss 1.645 (1.645)	test_acc   0.50 (  0.50)	test_minacc   0.46 (  0.46)	test_majacc   0.89 (  0.89)	Loss_d 1.645 (1.645)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.46 (  0.46)	test_majacc_d   0.89 (  0.89)	test_corr_d   0.27 (  0.27)
Test: [  1/  1]	Loss 1.645 (1.645)	test_acc   0.50 (  0.50)	test_minacc   0.46 (  0.46)	test_majacc   0.89 (  0.89)	Loss_d 1.645 (1.645)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.46 (  0.46)	test_majacc_d   0.89 (  0.89)	test_corr_d   0.27 (  0.27)
Overall Timing[ 10/  1]	epoch_time 0.0426 (0.0459)	validation_time 0.0003 (0.0010)	train_time 0.0422 (0.0447)
record: (train_acc, test_acc) (0.9003000203967094, 0.5610000491142273)
last accs (train_acc, test_acc) (0.8974000216126442, 0.5040000081062317)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:06,  3.88it/s] 19%|#9        | 5/26 [00:00<00:01, 16.15it/s] 35%|###4      | 9/26 [00:00<00:00, 23.36it/s] 50%|#####     | 13/26 [00:00<00:00, 27.67it/s] 65%|######5   | 17/26 [00:00<00:00, 29.90it/s] 81%|########  | 21/26 [00:00<00:00, 31.39it/s] 96%|#########6| 25/26 [00:00<00:00, 32.45it/s]100%|##########| 26/26 [00:01<00:00, 25.56it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 286 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 287 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 288 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 289 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 290 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 291 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 292 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 293 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 294 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 295 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 296 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 297 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 298 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 299 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 300 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 301 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 302 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 303 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 304 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 305 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 306 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 307 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 308 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 309 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 310 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 311 400
penalty weights 0.0
Epoch: [11][  26/  26]	Loss 0.183 (0.243)	train_nll   0.18 (  0.24)	train_penalty   0.00 (  0.01)	weight_norm  23.46 ( 23.33)	train_acc   0.94 (  0.90)	train_minacc   0.73 (  0.58)	train_majacc   0.98 (  0.96)	train_corr   0.00 (  0.00)	l1 7.6643 (7.7097)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:00, 25.16it/s] 31%|###       | 8/26 [00:00<00:00, 37.50it/s]                                               31%|###       | 8/26 [00:00<00:00, 37.50it/s] 50%|#####     | 13/26 [00:00<00:00, 41.42it/s] 69%|######9   | 18/26 [00:00<00:00, 40.07it/s]                                                69%|######9   | 18/26 [00:00<00:00, 40.07it/s] 88%|########8 | 23/26 [00:00<00:00, 42.01it/s]100%|##########| 26/26 [00:00<00:00, 39.11it/s]
Test: [   0/  26]	Loss 0.207 (0.207)	test_acc   0.92 (  0.92)	test_minacc   0.62 (  0.62)	test_majacc   0.98 (  0.98)	Loss_d 0.207 (0.207)	test_acc_d   0.92 (  0.92)	test_minacc_d   0.62 (  0.62)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.81 (  0.81)
Test: [  10/  26]	Loss 0.227 (0.223)	test_acc   0.90 (  0.91)	test_minacc   0.59 (  0.65)	test_majacc   0.95 (  0.95)	Loss_d 0.227 (0.223)	test_acc_d   0.90 (  0.91)	test_minacc_d   0.59 (  0.65)	test_majacc_d   0.95 (  0.95)	test_corr_d   0.82 (  0.80)
Test: [  20/  26]	Loss 0.184 (0.218)	test_acc   0.92 (  0.91)	test_minacc   0.75 (  0.66)	test_majacc   0.95 (  0.95)	Loss_d 0.184 (0.218)	test_acc_d   0.92 (  0.91)	test_minacc_d   0.75 (  0.66)	test_majacc_d   0.95 (  0.95)	test_corr_d   0.80 (  0.80)
Test: [  26/  26]	Loss 0.143 (0.212)	test_acc   0.95 (  0.91)	test_minacc   0.86 (  0.68)	test_majacc   0.97 (  0.95)	Loss_d 0.143 (0.212)	test_acc_d   0.95 (  0.91)	test_minacc_d   0.86 (  0.68)	test_majacc_d   0.97 (  0.95)	test_corr_d   0.74 (  0.79)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 60.77it/s]
Test: [  0/  1]	Loss 1.779 (1.779)	test_acc   0.47 (  0.47)	test_minacc   0.43 (  0.43)	test_majacc   0.88 (  0.88)	Loss_d 1.779 (1.779)	test_acc_d   0.47 (  0.47)	test_minacc_d   0.43 (  0.43)	test_majacc_d   0.88 (  0.88)	test_corr_d   0.33 (  0.33)
Test: [  1/  1]	Loss 1.779 (1.779)	test_acc   0.47 (  0.47)	test_minacc   0.43 (  0.43)	test_majacc   0.88 (  0.88)	Loss_d 1.779 (1.779)	test_acc_d   0.47 (  0.47)	test_minacc_d   0.43 (  0.43)	test_majacc_d   0.88 (  0.88)	test_corr_d   0.33 (  0.33)
Overall Timing[ 11/  1]	epoch_time 0.0384 (0.0453)	validation_time 0.0004 (0.0010)	train_time 0.0379 (0.0442)
record: (train_acc, test_acc) (0.9003000203967094, 0.5610000491142273)
last accs (train_acc, test_acc) (0.9116000220179558, 0.4740000367164612)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.75it/s] 15%|#5        | 4/26 [00:00<00:01, 14.66it/s] 31%|###       | 8/26 [00:00<00:00, 22.60it/s] 46%|####6     | 12/26 [00:00<00:00, 27.11it/s] 62%|######1   | 16/26 [00:00<00:00, 29.98it/s] 77%|#######6  | 20/26 [00:00<00:00, 31.68it/s] 92%|#########2| 24/26 [00:00<00:00, 33.23it/s]100%|##########| 26/26 [00:00<00:00, 26.54it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 312 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 313 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 314 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 315 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 316 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 317 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 318 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 319 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 320 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 321 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 322 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 323 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 324 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 325 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 326 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 327 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 328 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 329 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 330 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 331 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 332 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 333 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 334 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 335 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 336 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 337 400
penalty weights 0.0
Epoch: [12][  26/  26]	Loss 0.179 (0.222)	train_nll   0.18 (  0.22)	train_penalty   0.00 (  0.01)	weight_norm  23.75 ( 23.61)	train_acc   0.95 (  0.91)	train_minacc   0.77 (  0.62)	train_majacc   0.99 (  0.96)	train_corr   0.00 (  0.00)	l1 8.0009 (7.7974)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:00, 25.30it/s] 31%|###       | 8/26 [00:00<00:00, 32.26it/s]                                               31%|###       | 8/26 [00:00<00:00, 32.26it/s] 50%|#####     | 13/26 [00:00<00:00, 38.37it/s] 69%|######9   | 18/26 [00:00<00:00, 41.07it/s]                                                69%|######9   | 18/26 [00:00<00:00, 41.07it/s] 88%|########8 | 23/26 [00:00<00:00, 42.05it/s]100%|##########| 26/26 [00:00<00:00, 36.62it/s]
Test: [   0/  26]	Loss 0.188 (0.188)	test_acc   0.92 (  0.92)	test_minacc   0.62 (  0.62)	test_majacc   0.98 (  0.98)	Loss_d 0.188 (0.188)	test_acc_d   0.92 (  0.92)	test_minacc_d   0.62 (  0.62)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.82 (  0.82)
Test: [  10/  26]	Loss 0.195 (0.207)	test_acc   0.92 (  0.92)	test_minacc   0.68 (  0.63)	test_majacc   0.96 (  0.97)	Loss_d 0.195 (0.207)	test_acc_d   0.92 (  0.92)	test_minacc_d   0.68 (  0.63)	test_majacc_d   0.96 (  0.97)	test_corr_d   0.81 (  0.81)
Test: [  20/  26]	Loss 0.133 (0.197)	test_acc   0.95 (  0.92)	test_minacc   0.82 (  0.65)	test_majacc   0.97 (  0.97)	Loss_d 0.133 (0.197)	test_acc_d   0.95 (  0.92)	test_minacc_d   0.82 (  0.65)	test_majacc_d   0.97 (  0.97)	test_corr_d   0.82 (  0.82)
Test: [  26/  26]	Loss 0.112 (0.188)	test_acc   0.96 (  0.93)	test_minacc   0.86 (  0.67)	test_majacc   0.98 (  0.97)	Loss_d 0.112 (0.188)	test_acc_d   0.96 (  0.93)	test_minacc_d   0.86 (  0.67)	test_majacc_d   0.98 (  0.97)	test_corr_d   0.74 (  0.81)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 60.97it/s]
Test: [  0/  1]	Loss 2.203 (2.203)	test_acc   0.40 (  0.40)	test_minacc   0.34 (  0.34)	test_majacc   0.92 (  0.92)	Loss_d 2.203 (2.203)	test_acc_d   0.40 (  0.40)	test_minacc_d   0.34 (  0.34)	test_majacc_d   0.92 (  0.92)	test_corr_d   0.49 (  0.49)
Test: [  1/  1]	Loss 2.203 (2.203)	test_acc   0.40 (  0.40)	test_minacc   0.34 (  0.34)	test_majacc   0.92 (  0.92)	Loss_d 2.203 (2.203)	test_acc_d   0.40 (  0.40)	test_minacc_d   0.34 (  0.34)	test_majacc_d   0.92 (  0.92)	test_corr_d   0.49 (  0.49)
Overall Timing[ 12/  1]	epoch_time 0.0410 (0.0450)	validation_time 0.0004 (0.0009)	train_time 0.0405 (0.0439)
record: (train_acc, test_acc) (0.9003000203967094, 0.5610000491142273)
last accs (train_acc, test_acc) (0.9253000204563141, 0.4010000228881836)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.09it/s] 19%|#9        | 5/26 [00:00<00:00, 22.97it/s] 35%|###4      | 9/26 [00:00<00:00, 28.40it/s] 54%|#####3    | 14/26 [00:00<00:00, 33.39it/s] 69%|######9   | 18/26 [00:00<00:00, 35.20it/s] 85%|########4 | 22/26 [00:00<00:00, 35.36it/s]100%|##########| 26/26 [00:00<00:00, 36.44it/s]100%|##########| 26/26 [00:00<00:00, 30.43it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 338 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 339 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 340 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 341 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 342 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 343 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 344 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 345 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 346 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 347 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 348 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 349 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 350 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 351 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 352 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 353 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 354 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 355 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 356 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 357 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 358 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 359 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 360 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 361 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 362 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 363 400
penalty weights 0.0
Epoch: [13][  26/  26]	Loss 0.175 (0.218)	train_nll   0.17 (  0.22)	train_penalty   0.00 (  0.01)	weight_norm  24.14 ( 23.94)	train_acc   0.92 (  0.91)	train_minacc   0.70 (  0.60)	train_majacc   0.97 (  0.96)	train_corr   0.00 (  0.00)	l1 8.2104 (8.0003)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.84it/s] 23%|##3       | 6/26 [00:00<00:00, 31.76it/s]                                               23%|##3       | 6/26 [00:00<00:00, 31.76it/s] 42%|####2     | 11/26 [00:00<00:00, 38.61it/s] 62%|######1   | 16/26 [00:00<00:00, 41.86it/s]                                                62%|######1   | 16/26 [00:00<00:00, 41.86it/s] 81%|########  | 21/26 [00:00<00:00, 43.36it/s]100%|##########| 26/26 [00:00<00:00, 38.11it/s]
Test: [   0/  26]	Loss 0.180 (0.180)	test_acc   0.93 (  0.93)	test_minacc   0.80 (  0.80)	test_majacc   0.96 (  0.96)	Loss_d 0.180 (0.180)	test_acc_d   0.93 (  0.93)	test_minacc_d   0.80 (  0.80)	test_majacc_d   0.96 (  0.96)	test_corr_d   0.73 (  0.73)
Test: [  10/  26]	Loss 0.158 (0.195)	test_acc   0.94 (  0.92)	test_minacc   0.80 (  0.73)	test_majacc   0.97 (  0.96)	Loss_d 0.158 (0.195)	test_acc_d   0.94 (  0.92)	test_minacc_d   0.80 (  0.73)	test_majacc_d   0.97 (  0.96)	test_corr_d   0.76 (  0.75)
Test: [  20/  26]	Loss 0.129 (0.185)	test_acc   0.95 (  0.92)	test_minacc   0.82 (  0.75)	test_majacc   0.97 (  0.96)	Loss_d 0.129 (0.185)	test_acc_d   0.95 (  0.92)	test_minacc_d   0.82 (  0.75)	test_majacc_d   0.97 (  0.96)	test_corr_d   0.77 (  0.76)
Test: [  26/  26]	Loss 0.111 (0.174)	test_acc   0.96 (  0.93)	test_minacc   0.89 (  0.77)	test_majacc   0.98 (  0.96)	Loss_d 0.111 (0.174)	test_acc_d   0.96 (  0.93)	test_minacc_d   0.89 (  0.77)	test_majacc_d   0.98 (  0.96)	test_corr_d   0.72 (  0.75)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 59.96it/s]
Test: [  0/  1]	Loss 2.038 (2.038)	test_acc   0.46 (  0.46)	test_minacc   0.41 (  0.41)	test_majacc   0.92 (  0.92)	Loss_d 2.038 (2.038)	test_acc_d   0.46 (  0.46)	test_minacc_d   0.41 (  0.41)	test_majacc_d   0.92 (  0.92)	test_corr_d   0.30 (  0.30)
Test: [  1/  1]	Loss 2.038 (2.038)	test_acc   0.46 (  0.46)	test_minacc   0.41 (  0.41)	test_majacc   0.92 (  0.92)	Loss_d 2.038 (2.038)	test_acc_d   0.46 (  0.46)	test_minacc_d   0.41 (  0.41)	test_majacc_d   0.92 (  0.92)	test_corr_d   0.30 (  0.30)
Overall Timing[ 13/  1]	epoch_time 0.0421 (0.0447)	validation_time 0.0007 (0.0009)	train_time 0.0413 (0.0437)
record: (train_acc, test_acc) (0.9003000203967094, 0.5610000491142273)
last accs (train_acc, test_acc) (0.9304000166654587, 0.46300002932548523)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:05,  4.69it/s] 19%|#9        | 5/26 [00:00<00:01, 17.86it/s] 35%|###4      | 9/26 [00:00<00:00, 24.13it/s] 50%|#####     | 13/26 [00:00<00:00, 27.86it/s] 65%|######5   | 17/26 [00:00<00:00, 29.70it/s] 81%|########  | 21/26 [00:00<00:00, 31.72it/s] 96%|#########6| 25/26 [00:00<00:00, 33.00it/s]100%|##########| 26/26 [00:00<00:00, 26.26it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 364 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 365 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 366 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 367 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 368 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 369 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 370 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 371 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 372 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 373 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 374 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 375 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 376 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 377 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 378 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 379 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 380 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 381 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 382 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 383 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 384 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 385 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 386 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 387 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 388 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 389 400
penalty weights 0.0
Epoch: [14][  26/  26]	Loss 0.159 (0.206)	train_nll   0.16 (  0.21)	train_penalty   0.01 (  0.01)	weight_norm  24.57 ( 24.36)	train_acc   0.94 (  0.91)	train_minacc   0.89 (  0.64)	train_majacc   0.96 (  0.96)	train_corr   0.00 (  0.00)	l1 7.9083 (8.5637)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.03it/s] 23%|##3       | 6/26 [00:00<00:00, 28.12it/s]                                               23%|##3       | 6/26 [00:00<00:00, 28.12it/s] 42%|####2     | 11/26 [00:00<00:00, 35.27it/s] 62%|######1   | 16/26 [00:00<00:00, 39.03it/s]                                                62%|######1   | 16/26 [00:00<00:00, 39.03it/s] 81%|########  | 21/26 [00:00<00:00, 37.19it/s]100%|##########| 26/26 [00:00<00:00, 40.76it/s]100%|##########| 26/26 [00:00<00:00, 33.67it/s]
Test: [   0/  26]	Loss 0.146 (0.146)	test_acc   0.95 (  0.95)	test_minacc   0.88 (  0.88)	test_majacc   0.96 (  0.96)	Loss_d 0.146 (0.146)	test_acc_d   0.95 (  0.95)	test_minacc_d   0.88 (  0.88)	test_majacc_d   0.96 (  0.96)	test_corr_d   0.72 (  0.72)
Test: [  10/  26]	Loss 0.192 (0.179)	test_acc   0.93 (  0.93)	test_minacc   0.70 (  0.78)	test_majacc   0.96 (  0.96)	Loss_d 0.192 (0.179)	test_acc_d   0.93 (  0.93)	test_minacc_d   0.70 (  0.78)	test_majacc_d   0.96 (  0.96)	test_corr_d   0.77 (  0.74)
Test: [  20/  26]	Loss 0.149 (0.174)	test_acc   0.94 (  0.93)	test_minacc   0.91 (  0.79)	test_majacc   0.95 (  0.96)	Loss_d 0.149 (0.174)	test_acc_d   0.94 (  0.93)	test_minacc_d   0.91 (  0.79)	test_majacc_d   0.95 (  0.96)	test_corr_d   0.73 (  0.75)
Test: [  26/  26]	Loss 0.112 (0.167)	test_acc   0.98 (  0.94)	test_minacc   0.95 (  0.81)	test_majacc   0.99 (  0.96)	Loss_d 0.112 (0.167)	test_acc_d   0.98 (  0.94)	test_minacc_d   0.95 (  0.81)	test_majacc_d   0.99 (  0.96)	test_corr_d   0.70 (  0.74)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.44it/s]
Test: [  0/  1]	Loss 1.841 (1.841)	test_acc   0.47 (  0.47)	test_minacc   0.42 (  0.42)	test_majacc   0.91 (  0.91)	Loss_d 1.841 (1.841)	test_acc_d   0.47 (  0.47)	test_minacc_d   0.42 (  0.42)	test_majacc_d   0.91 (  0.91)	test_corr_d   0.30 (  0.30)
Test: [  1/  1]	Loss 1.841 (1.841)	test_acc   0.47 (  0.47)	test_minacc   0.42 (  0.42)	test_majacc   0.91 (  0.91)	Loss_d 1.841 (1.841)	test_acc_d   0.47 (  0.47)	test_minacc_d   0.42 (  0.42)	test_majacc_d   0.91 (  0.91)	test_corr_d   0.30 (  0.30)
Overall Timing[ 14/  1]	epoch_time 0.0417 (0.0445)	validation_time 0.0004 (0.0009)	train_time 0.0413 (0.0435)
record: (train_acc, test_acc) (0.9003000203967094, 0.5610000491142273)
last accs (train_acc, test_acc) (0.9376000192761421, 0.4700000286102295)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.33it/s] 19%|#9        | 5/26 [00:00<00:01, 18.80it/s] 35%|###4      | 9/26 [00:00<00:00, 25.24it/s] 50%|#####     | 13/26 [00:00<00:00, 28.97it/s] 65%|######5   | 17/26 [00:00<00:00, 31.04it/s] 81%|########  | 21/26 [00:00<00:00, 32.02it/s] 96%|#########6| 25/26 [00:00<00:00, 33.11it/s]100%|##########| 26/26 [00:00<00:00, 27.15it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 390 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 391 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 392 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 393 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 394 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 395 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 396 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 397 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 398 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 399 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 400 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 401 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 402 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 403 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 404 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 405 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 406 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 407 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 408 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 409 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 410 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 411 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 412 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 413 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 414 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 415 400
penalty weights 10000.0
Epoch: [15][  26/  26]	Loss 0.005 (0.064)	train_nll   0.15 (  0.19)	train_penalty   0.00 (  0.01)	weight_norm  24.87 ( 24.74)	train_acc   0.94 (  0.93)	train_minacc   0.80 (  0.77)	train_majacc   0.97 (  0.96)	train_corr   0.00 (  0.00)	l1 8.1425 (9.1109)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.46it/s] 23%|##3       | 6/26 [00:00<00:00, 27.17it/s]                                               23%|##3       | 6/26 [00:00<00:00, 27.17it/s] 42%|####2     | 11/26 [00:00<00:00, 34.45it/s] 62%|######1   | 16/26 [00:00<00:00, 39.00it/s]                                                62%|######1   | 16/26 [00:00<00:00, 39.00it/s] 81%|########  | 21/26 [00:00<00:00, 38.37it/s]100%|##########| 26/26 [00:00<00:00, 41.11it/s]100%|##########| 26/26 [00:00<00:00, 33.34it/s]
Test: [   0/  26]	Loss 0.220 (0.220)	test_acc   0.91 (  0.91)	test_minacc   0.75 (  0.75)	test_majacc   0.94 (  0.94)	Loss_d 0.220 (0.220)	test_acc_d   0.91 (  0.91)	test_minacc_d   0.75 (  0.75)	test_majacc_d   0.94 (  0.94)	test_corr_d   0.72 (  0.72)
Test: [  10/  26]	Loss 0.206 (0.171)	test_acc   0.92 (  0.94)	test_minacc   0.70 (  0.84)	test_majacc   0.96 (  0.96)	Loss_d 0.206 (0.171)	test_acc_d   0.92 (  0.94)	test_minacc_d   0.70 (  0.84)	test_majacc_d   0.96 (  0.96)	test_corr_d   0.76 (  0.72)
Test: [  20/  26]	Loss 0.201 (0.172)	test_acc   0.92 (  0.94)	test_minacc   0.80 (  0.84)	test_majacc   0.93 (  0.95)	Loss_d 0.201 (0.172)	test_acc_d   0.92 (  0.94)	test_minacc_d   0.80 (  0.84)	test_majacc_d   0.93 (  0.95)	test_corr_d   0.72 (  0.72)
Test: [  26/  26]	Loss 0.168 (0.180)	test_acc   0.94 (  0.93)	test_minacc   0.80 (  0.84)	test_majacc   0.97 (  0.95)	Loss_d 0.168 (0.180)	test_acc_d   0.94 (  0.93)	test_minacc_d   0.80 (  0.84)	test_majacc_d   0.97 (  0.95)	test_corr_d   0.68 (  0.72)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.06it/s]
Test: [  0/  1]	Loss 2.024 (2.024)	test_acc   0.47 (  0.47)	test_minacc   0.42 (  0.42)	test_majacc   0.91 (  0.91)	Loss_d 2.024 (2.024)	test_acc_d   0.47 (  0.47)	test_minacc_d   0.42 (  0.42)	test_majacc_d   0.91 (  0.91)	test_corr_d   0.29 (  0.29)
Test: [  1/  1]	Loss 2.024 (2.024)	test_acc   0.47 (  0.47)	test_minacc   0.42 (  0.42)	test_majacc   0.91 (  0.91)	Loss_d 2.024 (2.024)	test_acc_d   0.47 (  0.47)	test_minacc_d   0.42 (  0.42)	test_majacc_d   0.91 (  0.91)	test_corr_d   0.29 (  0.29)
Overall Timing[ 15/  1]	epoch_time 0.0401 (0.0443)	validation_time 0.0004 (0.0008)	train_time 0.0396 (0.0433)
record: (train_acc, test_acc) (0.9003000203967094, 0.5610000491142273)
last accs (train_acc, test_acc) (0.931600021481514, 0.47200003266334534)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:05,  4.96it/s] 19%|#9        | 5/26 [00:00<00:01, 17.72it/s] 35%|###4      | 9/26 [00:00<00:00, 23.79it/s] 50%|#####     | 13/26 [00:00<00:00, 27.41it/s] 65%|######5   | 17/26 [00:00<00:00, 29.66it/s] 81%|########  | 21/26 [00:00<00:00, 31.84it/s] 96%|#########6| 25/26 [00:00<00:00, 33.18it/s]100%|##########| 26/26 [00:00<00:00, 26.66it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 416 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 417 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 418 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 419 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 420 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 421 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 422 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 423 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 424 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 425 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 426 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 427 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 428 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 429 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 430 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 431 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 432 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 433 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 434 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 435 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 436 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 437 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 438 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 439 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 440 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 441 400
penalty weights 10000.0
Epoch: [16][  26/  26]	Loss 0.002 (0.003)	train_nll   0.30 (  0.26)	train_penalty   0.00 (  0.00)	weight_norm  24.94 ( 24.92)	train_acc   0.87 (  0.88)	train_minacc   0.75 (  0.83)	train_majacc   0.90 (  0.89)	train_corr   0.00 (  0.00)	l1 7.3515 (7.6529)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s] 15%|#5        | 4/26 [00:00<00:00, 35.00it/s] 35%|###4      | 9/26 [00:00<00:00, 40.91it/s]                                               35%|###4      | 9/26 [00:00<00:00, 40.91it/s] 54%|#####3    | 14/26 [00:00<00:00, 40.21it/s] 73%|#######3  | 19/26 [00:00<00:00, 42.46it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 42.46it/s] 92%|#########2| 24/26 [00:00<00:00, 44.01it/s]100%|##########| 26/26 [00:00<00:00, 39.23it/s]
Test: [   0/  26]	Loss 0.302 (0.302)	test_acc   0.86 (  0.86)	test_minacc   0.75 (  0.75)	test_majacc   0.89 (  0.89)	Loss_d 0.302 (0.302)	test_acc_d   0.86 (  0.86)	test_minacc_d   0.75 (  0.75)	test_majacc_d   0.89 (  0.89)	test_corr_d   0.66 (  0.66)
Test: [  10/  26]	Loss 0.204 (0.240)	test_acc   0.93 (  0.90)	test_minacc   0.82 (  0.83)	test_majacc   0.95 (  0.91)	Loss_d 0.204 (0.240)	test_acc_d   0.93 (  0.90)	test_minacc_d   0.82 (  0.83)	test_majacc_d   0.95 (  0.91)	test_corr_d   0.72 (  0.67)
Test: [  20/  26]	Loss 0.255 (0.245)	test_acc   0.87 (  0.89)	test_minacc   0.82 (  0.82)	test_majacc   0.87 (  0.91)	Loss_d 0.255 (0.245)	test_acc_d   0.87 (  0.89)	test_minacc_d   0.82 (  0.82)	test_majacc_d   0.87 (  0.91)	test_corr_d   0.68 (  0.68)
Test: [  26/  26]	Loss 0.291 (0.251)	test_acc   0.87 (  0.89)	test_minacc   0.75 (  0.81)	test_majacc   0.90 (  0.90)	Loss_d 0.291 (0.251)	test_acc_d   0.87 (  0.89)	test_minacc_d   0.75 (  0.81)	test_majacc_d   0.90 (  0.90)	test_corr_d   0.64 (  0.68)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 60.43it/s]
Test: [  0/  1]	Loss 1.697 (1.697)	test_acc   0.53 (  0.53)	test_minacc   0.49 (  0.49)	test_majacc   0.87 (  0.87)	Loss_d 1.697 (1.697)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.49 (  0.49)	test_majacc_d   0.87 (  0.87)	test_corr_d   0.19 (  0.19)
Test: [  1/  1]	Loss 1.697 (1.697)	test_acc   0.53 (  0.53)	test_minacc   0.49 (  0.49)	test_majacc   0.87 (  0.87)	Loss_d 1.697 (1.697)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.49 (  0.49)	test_majacc_d   0.87 (  0.87)	test_corr_d   0.19 (  0.19)
Overall Timing[ 16/  1]	epoch_time 0.0418 (0.0441)	validation_time 0.0004 (0.0008)	train_time 0.0414 (0.0432)
record: (train_acc, test_acc) (0.9003000203967094, 0.5610000491142273)
last accs (train_acc, test_acc) (0.8890000213384628, 0.5260000228881836)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.28it/s] 19%|#9        | 5/26 [00:00<00:00, 24.06it/s] 35%|###4      | 9/26 [00:00<00:00, 29.94it/s] 54%|#####3    | 14/26 [00:00<00:00, 34.34it/s] 69%|######9   | 18/26 [00:00<00:00, 35.71it/s] 85%|########4 | 22/26 [00:00<00:00, 36.65it/s]100%|##########| 26/26 [00:00<00:00, 36.25it/s]100%|##########| 26/26 [00:00<00:00, 30.88it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 442 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 443 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 444 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 445 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 446 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 447 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 448 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 449 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 450 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 451 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 452 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 453 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 454 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 455 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 456 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 457 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 458 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 459 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 460 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 461 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 462 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 463 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 464 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 465 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 466 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 467 400
penalty weights 10000.0
Epoch: [17][  26/  26]	Loss 0.002 (0.003)	train_nll   0.23 (  0.26)	train_penalty   0.00 (  0.00)	weight_norm  24.96 ( 24.95)	train_acc   0.92 (  0.89)	train_minacc   0.73 (  0.80)	train_majacc   0.96 (  0.90)	train_corr   0.00 (  0.00)	l1 7.1588 (7.4012)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 18.07it/s] 27%|##6       | 7/26 [00:00<00:00, 35.42it/s]                                               27%|##6       | 7/26 [00:00<00:00, 35.42it/s] 46%|####6     | 12/26 [00:00<00:00, 40.58it/s] 65%|######5   | 17/26 [00:00<00:00, 42.38it/s]                                                65%|######5   | 17/26 [00:00<00:00, 42.38it/s] 85%|########4 | 22/26 [00:00<00:00, 41.10it/s]100%|##########| 26/26 [00:00<00:00, 38.36it/s]
Test: [   0/  26]	Loss 0.246 (0.246)	test_acc   0.90 (  0.90)	test_minacc   0.73 (  0.73)	test_majacc   0.93 (  0.93)	Loss_d 0.246 (0.246)	test_acc_d   0.90 (  0.90)	test_minacc_d   0.73 (  0.73)	test_majacc_d   0.93 (  0.93)	test_corr_d   0.77 (  0.77)
Test: [  10/  26]	Loss 0.203 (0.222)	test_acc   0.93 (  0.91)	test_minacc   0.70 (  0.73)	test_majacc   0.97 (  0.95)	Loss_d 0.203 (0.222)	test_acc_d   0.93 (  0.91)	test_minacc_d   0.70 (  0.73)	test_majacc_d   0.97 (  0.95)	test_corr_d   0.81 (  0.78)
Test: [  20/  26]	Loss 0.215 (0.212)	test_acc   0.90 (  0.92)	test_minacc   0.71 (  0.73)	test_majacc   0.93 (  0.95)	Loss_d 0.215 (0.212)	test_acc_d   0.90 (  0.92)	test_minacc_d   0.71 (  0.73)	test_majacc_d   0.93 (  0.95)	test_corr_d   0.80 (  0.79)
Test: [  26/  26]	Loss 0.232 (0.216)	test_acc   0.92 (  0.92)	test_minacc   0.73 (  0.73)	test_majacc   0.96 (  0.95)	Loss_d 0.232 (0.216)	test_acc_d   0.92 (  0.92)	test_minacc_d   0.73 (  0.73)	test_majacc_d   0.96 (  0.95)	test_corr_d   0.75 (  0.79)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.72it/s]
Test: [  0/  1]	Loss 1.886 (1.886)	test_acc   0.44 (  0.44)	test_minacc   0.39 (  0.39)	test_majacc   0.90 (  0.90)	Loss_d 1.886 (1.886)	test_acc_d   0.44 (  0.44)	test_minacc_d   0.39 (  0.39)	test_majacc_d   0.90 (  0.90)	test_corr_d   0.41 (  0.41)
Test: [  1/  1]	Loss 1.886 (1.886)	test_acc   0.44 (  0.44)	test_minacc   0.39 (  0.39)	test_majacc   0.90 (  0.90)	Loss_d 1.886 (1.886)	test_acc_d   0.44 (  0.44)	test_minacc_d   0.39 (  0.39)	test_majacc_d   0.90 (  0.90)	test_corr_d   0.41 (  0.41)
Overall Timing[ 17/  1]	epoch_time 0.0378 (0.0438)	validation_time 0.0004 (0.0008)	train_time 0.0374 (0.0429)
record: (train_acc, test_acc) (0.9003000203967094, 0.5610000491142273)
last accs (train_acc, test_acc) (0.9164000216722489, 0.4440000355243683)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:05,  4.73it/s] 19%|#9        | 5/26 [00:00<00:01, 17.79it/s] 35%|###4      | 9/26 [00:00<00:00, 24.19it/s] 50%|#####     | 13/26 [00:00<00:00, 27.69it/s] 65%|######5   | 17/26 [00:00<00:00, 28.48it/s] 81%|########  | 21/26 [00:00<00:00, 30.39it/s] 96%|#########6| 25/26 [00:00<00:00, 31.98it/s]100%|##########| 26/26 [00:00<00:00, 26.15it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 468 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 469 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 470 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 471 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 472 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 473 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 474 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 475 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 476 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 477 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 478 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 479 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 480 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 481 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 482 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 483 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 484 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 485 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 486 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 487 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 488 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 489 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 490 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 491 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 492 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 493 400
penalty weights 10000.0
Epoch: [18][  26/  26]	Loss 0.000 (0.002)	train_nll   0.24 (  0.24)	train_penalty   0.00 (  0.00)	weight_norm  24.97 ( 24.97)	train_acc   0.89 (  0.90)	train_minacc   0.80 (  0.80)	train_majacc   0.91 (  0.91)	train_corr   0.00 (  0.00)	l1 7.5727 (7.6882)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.08it/s] 23%|##3       | 6/26 [00:00<00:00, 28.49it/s]                                               23%|##3       | 6/26 [00:00<00:00, 28.49it/s] 42%|####2     | 11/26 [00:00<00:00, 36.12it/s] 62%|######1   | 16/26 [00:00<00:00, 40.42it/s]                                                62%|######1   | 16/26 [00:00<00:00, 40.42it/s] 81%|########  | 21/26 [00:00<00:00, 38.10it/s]100%|##########| 26/26 [00:00<00:00, 41.38it/s]100%|##########| 26/26 [00:00<00:00, 34.12it/s]
Test: [   0/  26]	Loss 0.252 (0.252)	test_acc   0.88 (  0.88)	test_minacc   0.83 (  0.83)	test_majacc   0.90 (  0.90)	Loss_d 0.252 (0.252)	test_acc_d   0.88 (  0.88)	test_minacc_d   0.83 (  0.83)	test_majacc_d   0.90 (  0.90)	test_corr_d   0.70 (  0.70)
Test: [  10/  26]	Loss 0.218 (0.224)	test_acc   0.92 (  0.91)	test_minacc   0.77 (  0.82)	test_majacc   0.95 (  0.92)	Loss_d 0.218 (0.224)	test_acc_d   0.92 (  0.91)	test_minacc_d   0.77 (  0.82)	test_majacc_d   0.95 (  0.92)	test_corr_d   0.76 (  0.72)
Test: [  20/  26]	Loss 0.208 (0.210)	test_acc   0.92 (  0.91)	test_minacc   0.87 (  0.83)	test_majacc   0.92 (  0.93)	Loss_d 0.208 (0.210)	test_acc_d   0.92 (  0.91)	test_minacc_d   0.87 (  0.83)	test_majacc_d   0.92 (  0.93)	test_corr_d   0.74 (  0.73)
Test: [  26/  26]	Loss 0.232 (0.214)	test_acc   0.90 (  0.91)	test_minacc   0.82 (  0.82)	test_majacc   0.92 (  0.93)	Loss_d 0.232 (0.214)	test_acc_d   0.90 (  0.91)	test_minacc_d   0.82 (  0.82)	test_majacc_d   0.92 (  0.93)	test_corr_d   0.69 (  0.73)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.61it/s]
Test: [  0/  1]	Loss 1.796 (1.796)	test_acc   0.53 (  0.53)	test_minacc   0.49 (  0.49)	test_majacc   0.88 (  0.88)	Loss_d 1.796 (1.796)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.49 (  0.49)	test_majacc_d   0.88 (  0.88)	test_corr_d   0.23 (  0.23)
Test: [  1/  1]	Loss 1.796 (1.796)	test_acc   0.53 (  0.53)	test_minacc   0.49 (  0.49)	test_majacc   0.88 (  0.88)	Loss_d 1.796 (1.796)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.49 (  0.49)	test_majacc_d   0.88 (  0.88)	test_corr_d   0.23 (  0.23)
Overall Timing[ 18/  1]	epoch_time 0.0401 (0.0436)	validation_time 0.0003 (0.0008)	train_time 0.0398 (0.0427)
record: (train_acc, test_acc) (0.9003000203967094, 0.5610000491142273)
last accs (train_acc, test_acc) (0.91100002348423, 0.5320000052452087)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:05,  4.91it/s] 19%|#9        | 5/26 [00:00<00:01, 17.65it/s] 35%|###4      | 9/26 [00:00<00:00, 24.17it/s] 50%|#####     | 13/26 [00:00<00:00, 28.00it/s] 65%|######5   | 17/26 [00:00<00:00, 29.88it/s] 81%|########  | 21/26 [00:00<00:00, 31.60it/s] 96%|#########6| 25/26 [00:00<00:00, 32.94it/s]100%|##########| 26/26 [00:00<00:00, 26.47it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 494 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 495 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 496 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 497 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 498 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 499 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 500 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 501 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 502 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 503 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 504 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 505 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 506 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 507 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 508 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 509 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 510 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 511 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 512 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 513 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 514 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 515 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 516 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 517 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 518 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 519 400
penalty weights 10000.0
Epoch: [19][  26/  26]	Loss 0.008 (0.002)	train_nll   0.28 (  0.22)	train_penalty   0.01 (  0.00)	weight_norm  24.98 ( 24.98)	train_acc   0.88 (  0.91)	train_minacc   0.77 (  0.80)	train_majacc   0.91 (  0.93)	train_corr   0.00 (  0.00)	l1 8.4008 (7.7881)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:01, 22.62it/s] 31%|###       | 8/26 [00:00<00:00, 36.02it/s]                                               31%|###       | 8/26 [00:00<00:00, 36.02it/s] 50%|#####     | 13/26 [00:00<00:00, 40.82it/s] 69%|######9   | 18/26 [00:00<00:00, 42.38it/s]                                                69%|######9   | 18/26 [00:00<00:00, 42.38it/s] 88%|########8 | 23/26 [00:00<00:00, 39.58it/s]100%|##########| 26/26 [00:00<00:00, 36.97it/s]
Test: [   0/  26]	Loss 0.276 (0.276)	test_acc   0.88 (  0.88)	test_minacc   0.84 (  0.84)	test_majacc   0.89 (  0.89)	Loss_d 0.276 (0.276)	test_acc_d   0.88 (  0.88)	test_minacc_d   0.84 (  0.84)	test_majacc_d   0.89 (  0.89)	test_corr_d   0.67 (  0.67)
Test: [  10/  26]	Loss 0.267 (0.265)	test_acc   0.89 (  0.89)	test_minacc   0.75 (  0.80)	test_majacc   0.91 (  0.91)	Loss_d 0.267 (0.265)	test_acc_d   0.89 (  0.89)	test_minacc_d   0.75 (  0.80)	test_majacc_d   0.91 (  0.91)	test_corr_d   0.73 (  0.70)
Test: [  20/  26]	Loss 0.207 (0.243)	test_acc   0.90 (  0.90)	test_minacc   0.85 (  0.81)	test_majacc   0.91 (  0.91)	Loss_d 0.207 (0.243)	test_acc_d   0.90 (  0.90)	test_minacc_d   0.85 (  0.81)	test_majacc_d   0.91 (  0.91)	test_corr_d   0.72 (  0.71)
Test: [  26/  26]	Loss 0.241 (0.241)	test_acc   0.90 (  0.90)	test_minacc   0.82 (  0.81)	test_majacc   0.91 (  0.91)	Loss_d 0.241 (0.241)	test_acc_d   0.90 (  0.90)	test_minacc_d   0.82 (  0.81)	test_majacc_d   0.91 (  0.91)	test_corr_d   0.66 (  0.71)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 65.80it/s]
Test: [  0/  1]	Loss 2.003 (2.003)	test_acc   0.55 (  0.55)	test_minacc   0.51 (  0.51)	test_majacc   0.87 (  0.87)	Loss_d 2.003 (2.003)	test_acc_d   0.55 (  0.55)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.87 (  0.87)	test_corr_d   0.18 (  0.18)
Test: [  1/  1]	Loss 2.003 (2.003)	test_acc   0.55 (  0.55)	test_minacc   0.51 (  0.51)	test_majacc   0.87 (  0.87)	Loss_d 2.003 (2.003)	test_acc_d   0.55 (  0.55)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.87 (  0.87)	test_corr_d   0.18 (  0.18)
Overall Timing[ 19/  1]	epoch_time 0.0390 (0.0433)	validation_time 0.0003 (0.0007)	train_time 0.0387 (0.0425)
record: (train_acc, test_acc) (0.9003000203967094, 0.5610000491142273)
last accs (train_acc, test_acc) (0.8958000230193138, 0.5450000166893005)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.92it/s] 12%|#1        | 3/26 [00:00<00:01, 12.08it/s] 27%|##6       | 7/26 [00:00<00:00, 21.43it/s] 42%|####2     | 11/26 [00:00<00:00, 25.43it/s] 58%|#####7    | 15/26 [00:00<00:00, 27.97it/s] 73%|#######3  | 19/26 [00:00<00:00, 29.27it/s] 88%|########8 | 23/26 [00:00<00:00, 31.21it/s]100%|##########| 26/26 [00:01<00:00, 25.71it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 520 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 521 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 522 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 523 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 524 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 525 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 526 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 527 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 528 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 529 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 530 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 531 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 532 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 533 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 534 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 535 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 536 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 537 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 538 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 539 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 540 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 541 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 542 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 543 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 544 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 545 400
penalty weights 10000.0
Epoch: [20][  26/  26]	Loss 0.003 (0.001)	train_nll   0.18 (  0.23)	train_penalty   0.00 (  0.00)	weight_norm  24.99 ( 24.99)	train_acc   0.93 (  0.90)	train_minacc   0.93 (  0.80)	train_majacc   0.93 (  0.92)	train_corr   0.00 (  0.00)	l1 7.9121 (7.7678)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 12.65it/s] 27%|##6       | 7/26 [00:00<00:00, 29.45it/s]                                               27%|##6       | 7/26 [00:00<00:00, 29.45it/s] 46%|####6     | 12/26 [00:00<00:00, 36.78it/s] 65%|######5   | 17/26 [00:00<00:00, 40.20it/s]                                                65%|######5   | 17/26 [00:00<00:00, 40.20it/s] 85%|########4 | 22/26 [00:00<00:00, 39.24it/s]100%|##########| 26/26 [00:00<00:00, 35.17it/s]
Test: [   0/  26]	Loss 0.219 (0.219)	test_acc   0.91 (  0.91)	test_minacc   0.83 (  0.83)	test_majacc   0.93 (  0.93)	Loss_d 0.219 (0.219)	test_acc_d   0.91 (  0.91)	test_minacc_d   0.83 (  0.83)	test_majacc_d   0.93 (  0.93)	test_corr_d   0.68 (  0.68)
Test: [  10/  26]	Loss 0.325 (0.260)	test_acc   0.87 (  0.89)	test_minacc   0.75 (  0.80)	test_majacc   0.89 (  0.91)	Loss_d 0.325 (0.260)	test_acc_d   0.87 (  0.89)	test_minacc_d   0.75 (  0.80)	test_majacc_d   0.89 (  0.91)	test_corr_d   0.68 (  0.68)
Test: [  20/  26]	Loss 0.248 (0.256)	test_acc   0.89 (  0.89)	test_minacc   0.80 (  0.80)	test_majacc   0.91 (  0.91)	Loss_d 0.248 (0.256)	test_acc_d   0.89 (  0.89)	test_minacc_d   0.80 (  0.80)	test_majacc_d   0.91 (  0.91)	test_corr_d   0.70 (  0.69)
Test: [  26/  26]	Loss 0.180 (0.252)	test_acc   0.93 (  0.89)	test_minacc   0.93 (  0.81)	test_majacc   0.93 (  0.91)	Loss_d 0.180 (0.252)	test_acc_d   0.93 (  0.89)	test_minacc_d   0.93 (  0.81)	test_majacc_d   0.93 (  0.91)	test_corr_d   0.63 (  0.69)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 65.20it/s]
Test: [  0/  1]	Loss 1.698 (1.698)	test_acc   0.56 (  0.56)	test_minacc   0.53 (  0.53)	test_majacc   0.88 (  0.88)	Loss_d 1.698 (1.698)	test_acc_d   0.56 (  0.56)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.88 (  0.88)	test_corr_d   0.12 (  0.12)
Test: [  1/  1]	Loss 1.698 (1.698)	test_acc   0.56 (  0.56)	test_minacc   0.53 (  0.53)	test_majacc   0.88 (  0.88)	Loss_d 1.698 (1.698)	test_acc_d   0.56 (  0.56)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.88 (  0.88)	test_corr_d   0.12 (  0.12)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/142/checkpoints/model_best.pth
Overall Timing[ 20/  1]	epoch_time 0.0421 (0.0433)	validation_time 0.0004 (0.0007)	train_time 0.0417 (0.0425)
record: (train_acc, test_acc) (0.8928000200986862, 0.5649999976158142)
last accs (train_acc, test_acc) (0.8928000200986862, 0.5649999976158142)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:06,  3.69it/s] 19%|#9        | 5/26 [00:00<00:01, 15.39it/s] 35%|###4      | 9/26 [00:00<00:00, 22.23it/s] 50%|#####     | 13/26 [00:00<00:00, 26.19it/s] 65%|######5   | 17/26 [00:00<00:00, 28.81it/s] 81%|########  | 21/26 [00:00<00:00, 30.57it/s] 96%|#########6| 25/26 [00:00<00:00, 31.70it/s]100%|##########| 26/26 [00:01<00:00, 24.85it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 546 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 547 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 548 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 549 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 550 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 551 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 552 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 553 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 554 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 555 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 556 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 557 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 558 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 559 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 560 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 561 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 562 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 563 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 564 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 565 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 566 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 567 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 568 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 569 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 570 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 571 400
penalty weights 10000.0
Epoch: [21][  26/  26]	Loss 0.002 (0.001)	train_nll   0.18 (  0.22)	train_penalty   0.00 (  0.00)	weight_norm  25.00 ( 25.00)	train_acc   0.92 (  0.91)	train_minacc   0.95 (  0.85)	train_majacc   0.91 (  0.92)	train_corr   0.00 (  0.00)	l1 8.2283 (7.8637)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 17.47it/s] 27%|##6       | 7/26 [00:00<00:00, 33.21it/s]                                               27%|##6       | 7/26 [00:00<00:00, 33.21it/s] 46%|####6     | 12/26 [00:00<00:00, 38.81it/s] 65%|######5   | 17/26 [00:00<00:00, 41.69it/s]                                                65%|######5   | 17/26 [00:00<00:00, 41.69it/s] 85%|########4 | 22/26 [00:00<00:00, 41.51it/s]100%|##########| 26/26 [00:00<00:00, 37.56it/s]
Test: [   0/  26]	Loss 0.209 (0.209)	test_acc   0.92 (  0.92)	test_minacc   0.91 (  0.91)	test_majacc   0.92 (  0.92)	Loss_d 0.209 (0.209)	test_acc_d   0.92 (  0.92)	test_minacc_d   0.91 (  0.91)	test_majacc_d   0.92 (  0.92)	test_corr_d   0.65 (  0.65)
Test: [  10/  26]	Loss 0.286 (0.233)	test_acc   0.87 (  0.90)	test_minacc   0.75 (  0.86)	test_majacc   0.89 (  0.91)	Loss_d 0.286 (0.233)	test_acc_d   0.87 (  0.90)	test_minacc_d   0.75 (  0.86)	test_majacc_d   0.89 (  0.91)	test_corr_d   0.68 (  0.67)
Test: [  20/  26]	Loss 0.238 (0.239)	test_acc   0.89 (  0.90)	test_minacc   0.85 (  0.85)	test_majacc   0.90 (  0.91)	Loss_d 0.238 (0.239)	test_acc_d   0.89 (  0.90)	test_minacc_d   0.85 (  0.85)	test_majacc_d   0.90 (  0.91)	test_corr_d   0.68 (  0.68)
Test: [  26/  26]	Loss 0.184 (0.236)	test_acc   0.92 (  0.90)	test_minacc   0.95 (  0.86)	test_majacc   0.91 (  0.91)	Loss_d 0.184 (0.236)	test_acc_d   0.92 (  0.90)	test_minacc_d   0.95 (  0.86)	test_majacc_d   0.91 (  0.91)	test_corr_d   0.60 (  0.67)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 64.01it/s]
Test: [  0/  1]	Loss 1.694 (1.694)	test_acc   0.61 (  0.61)	test_minacc   0.57 (  0.57)	test_majacc   0.88 (  0.88)	Loss_d 1.694 (1.694)	test_acc_d   0.61 (  0.61)	test_minacc_d   0.57 (  0.57)	test_majacc_d   0.88 (  0.88)	test_corr_d   0.02 (  0.02)
Test: [  1/  1]	Loss 1.694 (1.694)	test_acc   0.61 (  0.61)	test_minacc   0.57 (  0.57)	test_majacc   0.88 (  0.88)	Loss_d 1.694 (1.694)	test_acc_d   0.61 (  0.61)	test_minacc_d   0.57 (  0.57)	test_majacc_d   0.88 (  0.88)	test_corr_d   0.02 (  0.02)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/142/checkpoints/model_best.pth
Overall Timing[ 21/  1]	epoch_time 0.0447 (0.0434)	validation_time 0.0006 (0.0007)	train_time 0.0441 (0.0425)
record: (train_acc, test_acc) (0.8996000180244446, 0.6050000190734863)
last accs (train_acc, test_acc) (0.8996000180244446, 0.6050000190734863)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.00it/s] 19%|#9        | 5/26 [00:00<00:00, 22.23it/s] 35%|###4      | 9/26 [00:00<00:00, 28.66it/s] 50%|#####     | 13/26 [00:00<00:00, 30.51it/s] 65%|######5   | 17/26 [00:00<00:00, 31.60it/s] 81%|########  | 21/26 [00:00<00:00, 32.54it/s] 96%|#########6| 25/26 [00:00<00:00, 33.49it/s]100%|##########| 26/26 [00:00<00:00, 28.96it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 572 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 573 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 574 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 575 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 576 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 577 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 578 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 579 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 580 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 581 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 582 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 583 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 584 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 585 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 586 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 587 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 588 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 589 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 590 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 591 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 592 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 593 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 594 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 595 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 596 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 597 400
penalty weights 10000.0
Epoch: [22][  26/  26]	Loss 0.003 (0.001)	train_nll   0.16 (  0.22)	train_penalty   0.00 (  0.00)	weight_norm  25.00 ( 25.00)	train_acc   0.93 (  0.91)	train_minacc   0.91 (  0.85)	train_majacc   0.94 (  0.92)	train_corr   0.00 (  0.00)	l1 8.0851 (8.2112)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:05,  4.95it/s] 27%|##6       | 7/26 [00:00<00:00, 26.48it/s]                                               27%|##6       | 7/26 [00:00<00:00, 26.48it/s] 46%|####6     | 12/26 [00:00<00:00, 33.98it/s] 65%|######5   | 17/26 [00:00<00:00, 36.36it/s]                                                65%|######5   | 17/26 [00:00<00:00, 36.36it/s] 85%|########4 | 22/26 [00:00<00:00, 40.24it/s]100%|##########| 26/26 [00:00<00:00, 32.55it/s]
Test: [   0/  26]	Loss 0.205 (0.205)	test_acc   0.93 (  0.93)	test_minacc   0.88 (  0.88)	test_majacc   0.94 (  0.94)	Loss_d 0.205 (0.205)	test_acc_d   0.93 (  0.93)	test_minacc_d   0.88 (  0.88)	test_majacc_d   0.94 (  0.94)	test_corr_d   0.71 (  0.71)
Test: [  10/  26]	Loss 0.185 (0.179)	test_acc   0.93 (  0.93)	test_minacc   0.80 (  0.87)	test_majacc   0.95 (  0.94)	Loss_d 0.185 (0.179)	test_acc_d   0.93 (  0.93)	test_minacc_d   0.80 (  0.87)	test_majacc_d   0.95 (  0.94)	test_corr_d   0.76 (  0.73)
Test: [  20/  26]	Loss 0.213 (0.191)	test_acc   0.90 (  0.92)	test_minacc   0.87 (  0.86)	test_majacc   0.90 (  0.93)	Loss_d 0.213 (0.191)	test_acc_d   0.90 (  0.92)	test_minacc_d   0.87 (  0.86)	test_majacc_d   0.90 (  0.93)	test_corr_d   0.72 (  0.73)
Test: [  26/  26]	Loss 0.169 (0.194)	test_acc   0.93 (  0.92)	test_minacc   0.91 (  0.86)	test_majacc   0.94 (  0.93)	Loss_d 0.169 (0.194)	test_acc_d   0.93 (  0.92)	test_minacc_d   0.91 (  0.86)	test_majacc_d   0.94 (  0.93)	test_corr_d   0.67 (  0.72)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.53it/s]
Test: [  0/  1]	Loss 1.816 (1.816)	test_acc   0.57 (  0.57)	test_minacc   0.54 (  0.54)	test_majacc   0.89 (  0.89)	Loss_d 1.816 (1.816)	test_acc_d   0.57 (  0.57)	test_minacc_d   0.54 (  0.54)	test_majacc_d   0.89 (  0.89)	test_corr_d   0.15 (  0.15)
Test: [  1/  1]	Loss 1.816 (1.816)	test_acc   0.57 (  0.57)	test_minacc   0.54 (  0.54)	test_majacc   0.89 (  0.89)	Loss_d 1.816 (1.816)	test_acc_d   0.57 (  0.57)	test_minacc_d   0.54 (  0.54)	test_majacc_d   0.89 (  0.89)	test_corr_d   0.15 (  0.15)
Overall Timing[ 22/  1]	epoch_time 0.0425 (0.0433)	validation_time 0.0004 (0.0007)	train_time 0.0421 (0.0425)
record: (train_acc, test_acc) (0.8996000180244446, 0.6050000190734863)
last accs (train_acc, test_acc) (0.920000020802021, 0.5720000267028809)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.39it/s] 19%|#9        | 5/26 [00:00<00:00, 21.80it/s] 35%|###4      | 9/26 [00:00<00:00, 27.93it/s] 50%|#####     | 13/26 [00:00<00:00, 31.02it/s] 65%|######5   | 17/26 [00:00<00:00, 33.02it/s] 81%|########  | 21/26 [00:00<00:00, 34.34it/s] 96%|#########6| 25/26 [00:00<00:00, 34.50it/s]100%|##########| 26/26 [00:00<00:00, 29.35it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 598 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 599 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 600 400
penalty weights 10000.0
l1 at pgd_anneal_iters 8.284065246582031
set z to 7.869861984252929
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 601 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 602 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 603 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 604 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 605 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 606 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 607 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 608 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 609 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 610 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 611 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 612 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 613 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 614 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 615 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 616 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 617 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 618 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 619 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 620 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 621 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 622 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 623 400
penalty weights 10000.0
Epoch: [23][  26/  26]	Loss 0.001 (0.001)	train_nll   0.21 (  0.21)	train_penalty   0.00 (  0.00)	weight_norm  25.01 ( 25.01)	train_acc   0.92 (  0.91)	train_minacc   0.80 (  0.85)	train_majacc   0.95 (  0.92)	train_corr   0.00 (  0.00)	l1 8.2591 (8.6232)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:06,  4.02it/s] 23%|##3       | 6/26 [00:00<00:00, 20.35it/s]                                               23%|##3       | 6/26 [00:00<00:00, 20.35it/s] 42%|####2     | 11/26 [00:00<00:00, 28.10it/s] 62%|######1   | 16/26 [00:00<00:00, 34.42it/s]                                                62%|######1   | 16/26 [00:00<00:00, 34.42it/s] 81%|########  | 21/26 [00:00<00:00, 36.61it/s]100%|##########| 26/26 [00:00<00:00, 39.89it/s]100%|##########| 26/26 [00:00<00:00, 29.95it/s]
Test: [   0/  26]	Loss 0.233 (0.233)	test_acc   0.92 (  0.92)	test_minacc   0.78 (  0.78)	test_majacc   0.94 (  0.94)	Loss_d 0.233 (0.233)	test_acc_d   0.92 (  0.92)	test_minacc_d   0.78 (  0.78)	test_majacc_d   0.94 (  0.94)	test_corr_d   0.76 (  0.76)
Test: [  10/  26]	Loss 0.178 (0.188)	test_acc   0.93 (  0.93)	test_minacc   0.75 (  0.80)	test_majacc   0.96 (  0.95)	Loss_d 0.178 (0.188)	test_acc_d   0.93 (  0.93)	test_minacc_d   0.75 (  0.80)	test_majacc_d   0.96 (  0.95)	test_corr_d   0.79 (  0.77)
Test: [  20/  26]	Loss 0.205 (0.183)	test_acc   0.92 (  0.93)	test_minacc   0.82 (  0.80)	test_majacc   0.94 (  0.96)	Loss_d 0.205 (0.183)	test_acc_d   0.92 (  0.93)	test_minacc_d   0.82 (  0.80)	test_majacc_d   0.94 (  0.96)	test_corr_d   0.77 (  0.77)
Test: [  26/  26]	Loss 0.205 (0.188)	test_acc   0.93 (  0.93)	test_minacc   0.80 (  0.80)	test_majacc   0.96 (  0.95)	Loss_d 0.205 (0.188)	test_acc_d   0.93 (  0.93)	test_minacc_d   0.80 (  0.80)	test_majacc_d   0.96 (  0.95)	test_corr_d   0.71 (  0.77)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 60.95it/s]
Test: [  0/  1]	Loss 2.073 (2.073)	test_acc   0.49 (  0.49)	test_minacc   0.45 (  0.45)	test_majacc   0.90 (  0.90)	Loss_d 2.073 (2.073)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.45 (  0.45)	test_majacc_d   0.90 (  0.90)	test_corr_d   0.33 (  0.33)
Test: [  1/  1]	Loss 2.073 (2.073)	test_acc   0.49 (  0.49)	test_minacc   0.45 (  0.45)	test_majacc   0.90 (  0.90)	Loss_d 2.073 (2.073)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.45 (  0.45)	test_majacc_d   0.90 (  0.90)	test_corr_d   0.33 (  0.33)
Overall Timing[ 23/  1]	epoch_time 0.0448 (0.0434)	validation_time 0.0005 (0.0007)	train_time 0.0443 (0.0426)
record: (train_acc, test_acc) (0.8996000180244446, 0.6050000190734863)
last accs (train_acc, test_acc) (0.930600018799305, 0.4910000264644623)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:08,  3.01it/s] 19%|#9        | 5/26 [00:00<00:01, 13.54it/s] 35%|###4      | 9/26 [00:00<00:00, 19.80it/s] 50%|#####     | 13/26 [00:00<00:00, 23.59it/s] 65%|######5   | 17/26 [00:00<00:00, 26.48it/s] 81%|########  | 21/26 [00:00<00:00, 28.98it/s] 96%|#########6| 25/26 [00:01<00:00, 31.80it/s]100%|##########| 26/26 [00:01<00:00, 23.28it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 624 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 625 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 626 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 627 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 628 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 629 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 630 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 631 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 632 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 633 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 634 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 635 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 636 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 637 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 638 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 639 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 640 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 641 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 642 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 643 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 644 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 645 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 646 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 647 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 648 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 649 400
penalty weights 10000.0
Epoch: [24][  26/  26]	Loss 0.000 (0.001)	train_nll   0.18 (  0.19)	train_penalty   0.00 (  0.00)	weight_norm  25.02 ( 25.01)	train_acc   0.93 (  0.93)	train_minacc   0.80 (  0.80)	train_majacc   0.96 (  0.95)	train_corr   0.00 (  0.00)	l1 8.9434 (8.4753)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.78it/s]  8%|7         | 2/26 [00:00<00:02,  8.40it/s] 27%|##6       | 7/26 [00:00<00:00, 24.72it/s]                                               27%|##6       | 7/26 [00:00<00:00, 24.72it/s] 46%|####6     | 12/26 [00:00<00:00, 33.72it/s] 65%|######5   | 17/26 [00:00<00:00, 38.56it/s]                                                65%|######5   | 17/26 [00:00<00:00, 38.56it/s] 85%|########4 | 22/26 [00:00<00:00, 37.73it/s]100%|##########| 26/26 [00:00<00:00, 31.90it/s]
Test: [   0/  26]	Loss 0.246 (0.246)	test_acc   0.91 (  0.91)	test_minacc   0.81 (  0.81)	test_majacc   0.92 (  0.92)	Loss_d 0.246 (0.246)	test_acc_d   0.91 (  0.91)	test_minacc_d   0.81 (  0.81)	test_majacc_d   0.92 (  0.92)	test_corr_d   0.71 (  0.71)
Test: [  10/  26]	Loss 0.249 (0.243)	test_acc   0.91 (  0.90)	test_minacc   0.73 (  0.77)	test_majacc   0.94 (  0.93)	Loss_d 0.249 (0.243)	test_acc_d   0.91 (  0.90)	test_minacc_d   0.73 (  0.77)	test_majacc_d   0.94 (  0.93)	test_corr_d   0.75 (  0.73)
Test: [  20/  26]	Loss 0.210 (0.226)	test_acc   0.92 (  0.91)	test_minacc   0.82 (  0.78)	test_majacc   0.93 (  0.93)	Loss_d 0.210 (0.226)	test_acc_d   0.92 (  0.91)	test_minacc_d   0.82 (  0.78)	test_majacc_d   0.93 (  0.93)	test_corr_d   0.74 (  0.74)
Test: [  26/  26]	Loss 0.184 (0.223)	test_acc   0.93 (  0.91)	test_minacc   0.80 (  0.78)	test_majacc   0.96 (  0.93)	Loss_d 0.184 (0.223)	test_acc_d   0.93 (  0.91)	test_minacc_d   0.80 (  0.78)	test_majacc_d   0.96 (  0.93)	test_corr_d   0.69 (  0.74)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.63it/s]
Test: [  0/  1]	Loss 2.220 (2.220)	test_acc   0.53 (  0.53)	test_minacc   0.48 (  0.48)	test_majacc   0.89 (  0.89)	Loss_d 2.220 (2.220)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.48 (  0.48)	test_majacc_d   0.89 (  0.89)	test_corr_d   0.22 (  0.22)
Test: [  1/  1]	Loss 2.220 (2.220)	test_acc   0.53 (  0.53)	test_minacc   0.48 (  0.48)	test_majacc   0.89 (  0.89)	Loss_d 2.220 (2.220)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.48 (  0.48)	test_majacc_d   0.89 (  0.89)	test_corr_d   0.22 (  0.22)
Overall Timing[ 24/  1]	epoch_time 0.0428 (0.0434)	validation_time 0.0005 (0.0007)	train_time 0.0423 (0.0426)
record: (train_acc, test_acc) (0.8996000180244446, 0.6050000190734863)
last accs (train_acc, test_acc) (0.9111000164747238, 0.5250000357627869)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.67it/s] 15%|#5        | 4/26 [00:00<00:01, 17.60it/s] 31%|###       | 8/26 [00:00<00:00, 24.64it/s] 46%|####6     | 12/26 [00:00<00:00, 27.51it/s] 62%|######1   | 16/26 [00:00<00:00, 29.65it/s] 77%|#######6  | 20/26 [00:00<00:00, 30.67it/s] 92%|#########2| 24/26 [00:00<00:00, 31.83it/s]100%|##########| 26/26 [00:00<00:00, 27.05it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 650 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 651 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 652 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 653 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 654 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 655 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 656 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 657 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 658 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 659 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 660 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 661 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 662 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 663 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 664 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 665 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 666 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 667 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 668 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 669 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 670 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 671 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 672 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 673 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 674 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 675 400
penalty weights 10000.0
Epoch: [25][  26/  26]	Loss 0.000 (0.001)	train_nll   0.20 (  0.21)	train_penalty   0.00 (  0.00)	weight_norm  25.02 ( 25.02)	train_acc   0.92 (  0.92)	train_minacc   0.91 (  0.82)	train_majacc   0.92 (  0.94)	train_corr   0.00 (  0.00)	l1 8.4585 (8.4264)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.32it/s] 23%|##3       | 6/26 [00:00<00:00, 30.78it/s]                                               23%|##3       | 6/26 [00:00<00:00, 30.78it/s] 42%|####2     | 11/26 [00:00<00:00, 37.24it/s] 65%|######5   | 17/26 [00:00<00:00, 39.75it/s]                                                65%|######5   | 17/26 [00:00<00:00, 39.75it/s] 85%|########4 | 22/26 [00:00<00:00, 42.48it/s]100%|##########| 26/26 [00:00<00:00, 35.96it/s]
Test: [   0/  26]	Loss 0.201 (0.201)	test_acc   0.89 (  0.89)	test_minacc   0.81 (  0.81)	test_majacc   0.91 (  0.91)	Loss_d 0.201 (0.201)	test_acc_d   0.89 (  0.89)	test_minacc_d   0.81 (  0.81)	test_majacc_d   0.91 (  0.91)	test_corr_d   0.70 (  0.70)
Test: [  10/  26]	Loss 0.249 (0.212)	test_acc   0.88 (  0.91)	test_minacc   0.79 (  0.84)	test_majacc   0.90 (  0.92)	Loss_d 0.249 (0.212)	test_acc_d   0.88 (  0.91)	test_minacc_d   0.79 (  0.84)	test_majacc_d   0.90 (  0.92)	test_corr_d   0.71 (  0.70)
Test: [  20/  26]	Loss 0.216 (0.220)	test_acc   0.91 (  0.90)	test_minacc   0.85 (  0.83)	test_majacc   0.92 (  0.92)	Loss_d 0.216 (0.220)	test_acc_d   0.91 (  0.90)	test_minacc_d   0.85 (  0.83)	test_majacc_d   0.92 (  0.92)	test_corr_d   0.72 (  0.71)
Test: [  26/  26]	Loss 0.198 (0.221)	test_acc   0.92 (  0.90)	test_minacc   0.91 (  0.83)	test_majacc   0.92 (  0.92)	Loss_d 0.198 (0.221)	test_acc_d   0.92 (  0.90)	test_minacc_d   0.91 (  0.83)	test_majacc_d   0.92 (  0.92)	test_corr_d   0.64 (  0.70)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 64.69it/s]
Test: [  0/  1]	Loss 2.007 (2.007)	test_acc   0.56 (  0.56)	test_minacc   0.52 (  0.52)	test_majacc   0.90 (  0.90)	Loss_d 2.007 (2.007)	test_acc_d   0.56 (  0.56)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.90 (  0.90)	test_corr_d   0.16 (  0.16)
Test: [  1/  1]	Loss 2.007 (2.007)	test_acc   0.56 (  0.56)	test_minacc   0.52 (  0.52)	test_majacc   0.90 (  0.90)	Loss_d 2.007 (2.007)	test_acc_d   0.56 (  0.56)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.90 (  0.90)	test_corr_d   0.16 (  0.16)
Overall Timing[ 25/  1]	epoch_time 0.0431 (0.0433)	validation_time 0.0003 (0.0007)	train_time 0.0428 (0.0426)
record: (train_acc, test_acc) (0.8996000180244446, 0.6050000190734863)
last accs (train_acc, test_acc) (0.9038000224232674, 0.5610000491142273)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.31it/s] 19%|#9        | 5/26 [00:00<00:01, 19.60it/s] 35%|###4      | 9/26 [00:00<00:00, 26.76it/s] 50%|#####     | 13/26 [00:00<00:00, 29.55it/s] 65%|######5   | 17/26 [00:00<00:00, 31.90it/s] 81%|########  | 21/26 [00:00<00:00, 33.77it/s] 96%|#########6| 25/26 [00:00<00:00, 34.54it/s]100%|##########| 26/26 [00:00<00:00, 28.11it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 676 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 677 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 678 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 679 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 680 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 681 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 682 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 683 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 684 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 685 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 686 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 687 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 688 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 689 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 690 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 691 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 692 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 693 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 694 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 695 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 696 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 697 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 698 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 699 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 700 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 701 400
penalty weights 10000.0
Epoch: [26][  26/  26]	Loss 0.001 (0.001)	train_nll   0.19 (  0.21)	train_penalty   0.00 (  0.00)	weight_norm  25.03 ( 25.03)	train_acc   0.92 (  0.91)	train_minacc   0.86 (  0.85)	train_majacc   0.93 (  0.92)	train_corr   0.00 (  0.00)	l1 8.2260 (8.3969)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.80it/s]  8%|7         | 2/26 [00:00<00:02,  8.33it/s] 27%|##6       | 7/26 [00:00<00:00, 24.91it/s]                                               27%|##6       | 7/26 [00:00<00:00, 24.91it/s] 46%|####6     | 12/26 [00:00<00:00, 33.20it/s] 65%|######5   | 17/26 [00:00<00:00, 37.96it/s]                                                65%|######5   | 17/26 [00:00<00:00, 37.96it/s] 85%|########4 | 22/26 [00:00<00:00, 38.03it/s]100%|##########| 26/26 [00:00<00:00, 32.33it/s]
Test: [   0/  26]	Loss 0.192 (0.192)	test_acc   0.92 (  0.92)	test_minacc   0.88 (  0.88)	test_majacc   0.93 (  0.93)	Loss_d 0.192 (0.192)	test_acc_d   0.92 (  0.92)	test_minacc_d   0.88 (  0.88)	test_majacc_d   0.93 (  0.93)	test_corr_d   0.70 (  0.70)
Test: [  10/  26]	Loss 0.200 (0.184)	test_acc   0.92 (  0.92)	test_minacc   0.77 (  0.87)	test_majacc   0.95 (  0.93)	Loss_d 0.200 (0.184)	test_acc_d   0.92 (  0.92)	test_minacc_d   0.77 (  0.87)	test_majacc_d   0.95 (  0.93)	test_corr_d   0.75 (  0.72)
Test: [  20/  26]	Loss 0.214 (0.190)	test_acc   0.89 (  0.92)	test_minacc   0.89 (  0.87)	test_majacc   0.90 (  0.93)	Loss_d 0.214 (0.190)	test_acc_d   0.89 (  0.92)	test_minacc_d   0.89 (  0.87)	test_majacc_d   0.90 (  0.93)	test_corr_d   0.72 (  0.73)
Test: [  26/  26]	Loss 0.194 (0.195)	test_acc   0.92 (  0.92)	test_minacc   0.86 (  0.86)	test_majacc   0.93 (  0.93)	Loss_d 0.194 (0.195)	test_acc_d   0.92 (  0.92)	test_minacc_d   0.86 (  0.86)	test_majacc_d   0.93 (  0.93)	test_corr_d   0.66 (  0.72)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 60.54it/s]
Test: [  0/  1]	Loss 1.892 (1.892)	test_acc   0.58 (  0.58)	test_minacc   0.54 (  0.54)	test_majacc   0.92 (  0.92)	Loss_d 1.892 (1.892)	test_acc_d   0.58 (  0.58)	test_minacc_d   0.54 (  0.54)	test_majacc_d   0.92 (  0.92)	test_corr_d   0.13 (  0.13)
Test: [  1/  1]	Loss 1.892 (1.892)	test_acc   0.58 (  0.58)	test_minacc   0.54 (  0.54)	test_majacc   0.92 (  0.92)	Loss_d 1.892 (1.892)	test_acc_d   0.58 (  0.58)	test_minacc_d   0.54 (  0.54)	test_majacc_d   0.92 (  0.92)	test_corr_d   0.13 (  0.13)
Overall Timing[ 26/  1]	epoch_time 0.0430 (0.0433)	validation_time 0.0005 (0.0007)	train_time 0.0425 (0.0426)
record: (train_acc, test_acc) (0.8996000180244446, 0.6050000190734863)
last accs (train_acc, test_acc) (0.916300025165081, 0.5770000219345093)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.72it/s] 15%|#5        | 4/26 [00:00<00:01, 20.41it/s] 31%|###       | 8/26 [00:00<00:00, 26.86it/s] 46%|####6     | 12/26 [00:00<00:00, 29.78it/s] 62%|######1   | 16/26 [00:00<00:00, 31.45it/s] 77%|#######6  | 20/26 [00:00<00:00, 32.61it/s] 92%|#########2| 24/26 [00:00<00:00, 33.54it/s]100%|##########| 26/26 [00:00<00:00, 28.73it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 702 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 703 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 704 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 705 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 706 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 707 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 708 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 709 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 710 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 711 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 712 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 713 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 714 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 715 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 716 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 717 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 718 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 719 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 720 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 721 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 722 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 723 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 724 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 725 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 726 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 727 400
penalty weights 10000.0
Epoch: [27][  26/  26]	Loss 0.001 (0.001)	train_nll   0.22 (  0.22)	train_penalty   0.00 (  0.00)	weight_norm  25.03 ( 25.03)	train_acc   0.92 (  0.90)	train_minacc   0.82 (  0.84)	train_majacc   0.94 (  0.91)	train_corr   0.00 (  0.00)	l1 8.3373 (8.6192)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:05,  4.37it/s] 12%|#1        | 3/26 [00:00<00:03,  6.00it/s] 31%|###       | 8/26 [00:00<00:01, 16.20it/s]                                               31%|###       | 8/26 [00:00<00:01, 16.20it/s] 50%|#####     | 13/26 [00:00<00:00, 24.14it/s] 69%|######9   | 18/26 [00:00<00:00, 29.98it/s]                                                69%|######9   | 18/26 [00:00<00:00, 29.98it/s] 88%|########8 | 23/26 [00:00<00:00, 32.57it/s]100%|##########| 26/26 [00:01<00:00, 23.94it/s]
Test: [   0/  26]	Loss 0.224 (0.224)	test_acc   0.92 (  0.92)	test_minacc   0.81 (  0.81)	test_majacc   0.94 (  0.94)	Loss_d 0.224 (0.224)	test_acc_d   0.92 (  0.92)	test_minacc_d   0.81 (  0.81)	test_majacc_d   0.94 (  0.94)	test_corr_d   0.74 (  0.74)
Test: [  10/  26]	Loss 0.180 (0.192)	test_acc   0.94 (  0.92)	test_minacc   0.82 (  0.83)	test_majacc   0.96 (  0.94)	Loss_d 0.180 (0.192)	test_acc_d   0.94 (  0.92)	test_minacc_d   0.82 (  0.83)	test_majacc_d   0.96 (  0.94)	test_corr_d   0.77 (  0.75)
Test: [  20/  26]	Loss 0.211 (0.188)	test_acc   0.93 (  0.93)	test_minacc   0.85 (  0.83)	test_majacc   0.94 (  0.94)	Loss_d 0.211 (0.188)	test_acc_d   0.93 (  0.93)	test_minacc_d   0.85 (  0.83)	test_majacc_d   0.94 (  0.94)	test_corr_d   0.76 (  0.76)
Test: [  26/  26]	Loss 0.216 (0.193)	test_acc   0.92 (  0.92)	test_minacc   0.82 (  0.83)	test_majacc   0.94 (  0.94)	Loss_d 0.216 (0.193)	test_acc_d   0.92 (  0.92)	test_minacc_d   0.82 (  0.83)	test_majacc_d   0.94 (  0.94)	test_corr_d   0.70 (  0.76)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.44it/s]
Test: [  0/  1]	Loss 2.026 (2.026)	test_acc   0.52 (  0.52)	test_minacc   0.48 (  0.48)	test_majacc   0.90 (  0.90)	Loss_d 2.026 (2.026)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.48 (  0.48)	test_majacc_d   0.90 (  0.90)	test_corr_d   0.28 (  0.28)
Test: [  1/  1]	Loss 2.026 (2.026)	test_acc   0.52 (  0.52)	test_minacc   0.48 (  0.48)	test_majacc   0.90 (  0.90)	Loss_d 2.026 (2.026)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.48 (  0.48)	test_majacc_d   0.90 (  0.90)	test_corr_d   0.28 (  0.28)
Overall Timing[ 27/  1]	epoch_time 0.0446 (0.0434)	validation_time 0.0004 (0.0007)	train_time 0.0441 (0.0426)
record: (train_acc, test_acc) (0.8996000180244446, 0.6050000190734863)
last accs (train_acc, test_acc) (0.9242000212073326, 0.5210000276565552)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:05,  4.89it/s] 19%|#9        | 5/26 [00:00<00:01, 18.54it/s] 35%|###4      | 9/26 [00:00<00:00, 25.25it/s] 50%|#####     | 13/26 [00:00<00:00, 27.82it/s] 65%|######5   | 17/26 [00:00<00:00, 28.98it/s] 85%|########4 | 22/26 [00:00<00:00, 32.80it/s]100%|##########| 26/26 [00:00<00:00, 33.61it/s]100%|##########| 26/26 [00:00<00:00, 26.70it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 728 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 729 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 730 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 731 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 732 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 733 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 734 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 735 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 736 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 737 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 738 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 739 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 740 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 741 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 742 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 743 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 744 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 745 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 746 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 747 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 748 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 749 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 750 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 751 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 752 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 753 400
penalty weights 10000.0
Epoch: [28][  26/  26]	Loss 0.001 (0.001)	train_nll   0.22 (  0.20)	train_penalty   0.00 (  0.00)	weight_norm  25.04 ( 25.04)	train_acc   0.90 (  0.92)	train_minacc   0.80 (  0.81)	train_majacc   0.92 (  0.94)	train_corr   0.00 (  0.00)	l1 9.0962 (8.5562)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.19it/s] 23%|##3       | 6/26 [00:00<00:00, 30.31it/s]                                               23%|##3       | 6/26 [00:00<00:00, 30.31it/s] 42%|####2     | 11/26 [00:00<00:00, 37.51it/s] 62%|######1   | 16/26 [00:00<00:00, 41.69it/s]                                                62%|######1   | 16/26 [00:00<00:00, 41.69it/s] 81%|########  | 21/26 [00:00<00:00, 38.96it/s]100%|##########| 26/26 [00:00<00:00, 41.65it/s]100%|##########| 26/26 [00:00<00:00, 34.91it/s]
Test: [   0/  26]	Loss 0.262 (0.262)	test_acc   0.89 (  0.89)	test_minacc   0.80 (  0.80)	test_majacc   0.91 (  0.91)	Loss_d 0.262 (0.262)	test_acc_d   0.89 (  0.89)	test_minacc_d   0.80 (  0.80)	test_majacc_d   0.91 (  0.91)	test_corr_d   0.71 (  0.71)
Test: [  10/  26]	Loss 0.234 (0.233)	test_acc   0.90 (  0.90)	test_minacc   0.80 (  0.82)	test_majacc   0.92 (  0.92)	Loss_d 0.234 (0.233)	test_acc_d   0.90 (  0.90)	test_minacc_d   0.80 (  0.82)	test_majacc_d   0.92 (  0.92)	test_corr_d   0.74 (  0.72)
Test: [  20/  26]	Loss 0.211 (0.221)	test_acc   0.92 (  0.91)	test_minacc   0.87 (  0.82)	test_majacc   0.93 (  0.92)	Loss_d 0.211 (0.221)	test_acc_d   0.92 (  0.91)	test_minacc_d   0.87 (  0.82)	test_majacc_d   0.93 (  0.92)	test_corr_d   0.73 (  0.73)
Test: [  26/  26]	Loss 0.205 (0.219)	test_acc   0.90 (  0.91)	test_minacc   0.80 (  0.82)	test_majacc   0.93 (  0.92)	Loss_d 0.205 (0.219)	test_acc_d   0.90 (  0.91)	test_minacc_d   0.80 (  0.82)	test_majacc_d   0.93 (  0.92)	test_corr_d   0.68 (  0.73)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 59.05it/s]
Test: [  0/  1]	Loss 2.253 (2.253)	test_acc   0.57 (  0.57)	test_minacc   0.53 (  0.53)	test_majacc   0.86 (  0.86)	Loss_d 2.253 (2.253)	test_acc_d   0.57 (  0.57)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.86 (  0.86)	test_corr_d   0.18 (  0.18)
Test: [  1/  1]	Loss 2.253 (2.253)	test_acc   0.57 (  0.57)	test_minacc   0.53 (  0.53)	test_majacc   0.86 (  0.86)	Loss_d 2.253 (2.253)	test_acc_d   0.57 (  0.57)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.86 (  0.86)	test_corr_d   0.18 (  0.18)
Overall Timing[ 28/  1]	epoch_time 0.0407 (0.0433)	validation_time 0.0010 (0.0007)	train_time 0.0396 (0.0425)
record: (train_acc, test_acc) (0.8996000180244446, 0.6050000190734863)
last accs (train_acc, test_acc) (0.9053000217080116, 0.5660000443458557)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.18it/s] 19%|#9        | 5/26 [00:00<00:00, 23.99it/s] 35%|###4      | 9/26 [00:00<00:00, 29.42it/s] 50%|#####     | 13/26 [00:00<00:00, 31.17it/s] 65%|######5   | 17/26 [00:00<00:00, 32.39it/s] 81%|########  | 21/26 [00:00<00:00, 32.85it/s] 96%|#########6| 25/26 [00:00<00:00, 33.64it/s]100%|##########| 26/26 [00:00<00:00, 29.39it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 754 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 755 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 756 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 757 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 758 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 759 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 760 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 761 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 762 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 763 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 764 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 765 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 766 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 767 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 768 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 769 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 770 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 771 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 772 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 773 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 774 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 775 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 776 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 777 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 778 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 779 400
penalty weights 10000.0
Epoch: [29][  26/  26]	Loss 0.002 (0.001)	train_nll   0.15 (  0.20)	train_penalty   0.00 (  0.00)	weight_norm  25.04 ( 25.04)	train_acc   0.94 (  0.92)	train_minacc   0.93 (  0.84)	train_majacc   0.94 (  0.94)	train_corr   0.00 (  0.00)	l1 8.6727 (8.6991)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.32it/s] 15%|#5        | 4/26 [00:00<00:02, 10.90it/s] 35%|###4      | 9/26 [00:00<00:00, 21.98it/s]                                               35%|###4      | 9/26 [00:00<00:00, 21.98it/s] 58%|#####7    | 15/26 [00:00<00:00, 31.65it/s] 77%|#######6  | 20/26 [00:00<00:00, 35.16it/s]                                                77%|#######6  | 20/26 [00:00<00:00, 35.16it/s]100%|##########| 26/26 [00:00<00:00, 41.55it/s]100%|##########| 26/26 [00:00<00:00, 29.33it/s]
Test: [   0/  26]	Loss 0.188 (0.188)	test_acc   0.91 (  0.91)	test_minacc   0.81 (  0.81)	test_majacc   0.92 (  0.92)	Loss_d 0.188 (0.188)	test_acc_d   0.91 (  0.91)	test_minacc_d   0.81 (  0.81)	test_majacc_d   0.92 (  0.92)	test_corr_d   0.72 (  0.72)
Test: [  10/  26]	Loss 0.229 (0.210)	test_acc   0.90 (  0.91)	test_minacc   0.80 (  0.81)	test_majacc   0.92 (  0.93)	Loss_d 0.229 (0.210)	test_acc_d   0.90 (  0.91)	test_minacc_d   0.80 (  0.81)	test_majacc_d   0.92 (  0.93)	test_corr_d   0.73 (  0.72)
Test: [  20/  26]	Loss 0.219 (0.213)	test_acc   0.90 (  0.91)	test_minacc   0.78 (  0.81)	test_majacc   0.92 (  0.93)	Loss_d 0.219 (0.213)	test_acc_d   0.90 (  0.91)	test_minacc_d   0.78 (  0.81)	test_majacc_d   0.92 (  0.93)	test_corr_d   0.73 (  0.73)
Test: [  26/  26]	Loss 0.160 (0.211)	test_acc   0.94 (  0.91)	test_minacc   0.93 (  0.82)	test_majacc   0.94 (  0.93)	Loss_d 0.160 (0.211)	test_acc_d   0.94 (  0.91)	test_minacc_d   0.93 (  0.82)	test_majacc_d   0.94 (  0.93)	test_corr_d   0.66 (  0.73)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 64.09it/s]
Test: [  0/  1]	Loss 2.063 (2.063)	test_acc   0.53 (  0.53)	test_minacc   0.49 (  0.49)	test_majacc   0.90 (  0.90)	Loss_d 2.063 (2.063)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.49 (  0.49)	test_majacc_d   0.90 (  0.90)	test_corr_d   0.20 (  0.20)
Test: [  1/  1]	Loss 2.063 (2.063)	test_acc   0.53 (  0.53)	test_minacc   0.49 (  0.49)	test_majacc   0.90 (  0.90)	Loss_d 2.063 (2.063)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.49 (  0.49)	test_majacc_d   0.90 (  0.90)	test_corr_d   0.20 (  0.20)
Overall Timing[ 29/  1]	epoch_time 0.0394 (0.0431)	validation_time 0.0003 (0.0007)	train_time 0.0390 (0.0424)
record: (train_acc, test_acc) (0.8996000180244446, 0.6050000190734863)
last accs (train_acc, test_acc) (0.911400025010109, 0.5300000309944153)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.74it/s] 12%|#1        | 3/26 [00:00<00:01, 13.15it/s] 27%|##6       | 7/26 [00:00<00:00, 21.82it/s] 42%|####2     | 11/26 [00:00<00:00, 28.10it/s] 58%|#####7    | 15/26 [00:00<00:00, 31.19it/s] 73%|#######3  | 19/26 [00:00<00:00, 33.30it/s] 88%|########8 | 23/26 [00:00<00:00, 35.21it/s]100%|##########| 26/26 [00:00<00:00, 28.59it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 780 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 781 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 782 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 783 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 784 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 785 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 786 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 787 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 788 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 789 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 790 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 791 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 792 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 793 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 794 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 795 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 796 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 797 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 798 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 799 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 800 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 801 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 802 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 803 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 804 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 805 400
penalty weights 10000.0
Epoch: [30][  26/  26]	Loss 0.001 (0.000)	train_nll   0.16 (  0.21)	train_penalty   0.00 (  0.00)	weight_norm  25.05 ( 25.04)	train_acc   0.94 (  0.91)	train_minacc   0.93 (  0.84)	train_majacc   0.94 (  0.93)	train_corr   0.00 (  0.00)	l1 8.5644 (8.6807)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:00, 25.67it/s] 31%|###       | 8/26 [00:00<00:00, 38.41it/s]                                               31%|###       | 8/26 [00:00<00:00, 38.41it/s] 50%|#####     | 13/26 [00:00<00:00, 42.04it/s] 69%|######9   | 18/26 [00:00<00:00, 43.17it/s]                                                69%|######9   | 18/26 [00:00<00:00, 43.17it/s] 88%|########8 | 23/26 [00:00<00:00, 43.01it/s]100%|##########| 26/26 [00:00<00:00, 39.42it/s]
Test: [   0/  26]	Loss 0.178 (0.178)	test_acc   0.92 (  0.92)	test_minacc   0.86 (  0.86)	test_majacc   0.93 (  0.93)	Loss_d 0.178 (0.178)	test_acc_d   0.92 (  0.92)	test_minacc_d   0.86 (  0.86)	test_majacc_d   0.93 (  0.93)	test_corr_d   0.71 (  0.71)
Test: [  10/  26]	Loss 0.189 (0.178)	test_acc   0.92 (  0.93)	test_minacc   0.88 (  0.88)	test_majacc   0.93 (  0.94)	Loss_d 0.189 (0.178)	test_acc_d   0.92 (  0.93)	test_minacc_d   0.88 (  0.88)	test_majacc_d   0.93 (  0.94)	test_corr_d   0.74 (  0.73)
Test: [  20/  26]	Loss 0.205 (0.185)	test_acc   0.92 (  0.93)	test_minacc   0.85 (  0.87)	test_majacc   0.93 (  0.94)	Loss_d 0.205 (0.185)	test_acc_d   0.92 (  0.93)	test_minacc_d   0.85 (  0.87)	test_majacc_d   0.93 (  0.94)	test_corr_d   0.73 (  0.73)
Test: [  26/  26]	Loss 0.169 (0.188)	test_acc   0.93 (  0.92)	test_minacc   0.93 (  0.87)	test_majacc   0.93 (  0.93)	Loss_d 0.169 (0.188)	test_acc_d   0.93 (  0.92)	test_minacc_d   0.93 (  0.87)	test_majacc_d   0.93 (  0.93)	test_corr_d   0.67 (  0.73)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.95it/s]
Test: [  0/  1]	Loss 2.007 (2.007)	test_acc   0.55 (  0.55)	test_minacc   0.51 (  0.51)	test_majacc   0.90 (  0.90)	Loss_d 2.007 (2.007)	test_acc_d   0.55 (  0.55)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.90 (  0.90)	test_corr_d   0.17 (  0.17)
Test: [  1/  1]	Loss 2.007 (2.007)	test_acc   0.55 (  0.55)	test_minacc   0.51 (  0.51)	test_majacc   0.90 (  0.90)	Loss_d 2.007 (2.007)	test_acc_d   0.55 (  0.55)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.90 (  0.90)	test_corr_d   0.17 (  0.17)
Overall Timing[ 30/  1]	epoch_time 0.0405 (0.0431)	validation_time 0.0004 (0.0007)	train_time 0.0401 (0.0423)
record: (train_acc, test_acc) (0.8996000180244446, 0.6050000190734863)
last accs (train_acc, test_acc) (0.9245000216960907, 0.5520000457763672)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.82it/s] 12%|#1        | 3/26 [00:00<00:02, 10.98it/s] 27%|##6       | 7/26 [00:00<00:00, 20.46it/s] 42%|####2     | 11/26 [00:00<00:00, 25.33it/s] 58%|#####7    | 15/26 [00:00<00:00, 27.84it/s] 73%|#######3  | 19/26 [00:00<00:00, 30.57it/s] 88%|########8 | 23/26 [00:00<00:00, 32.58it/s]100%|##########| 26/26 [00:00<00:00, 26.02it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 806 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 807 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 808 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 809 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 810 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 811 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 812 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 813 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 814 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 815 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 816 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 817 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 818 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 819 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 820 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 821 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 822 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 823 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 824 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 825 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 826 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 827 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 828 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 829 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 830 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 831 400
penalty weights 10000.0
Epoch: [31][  26/  26]	Loss 0.000 (0.001)	train_nll   0.19 (  0.20)	train_penalty   0.00 (  0.00)	weight_norm  25.05 ( 25.05)	train_acc   0.93 (  0.92)	train_minacc   0.89 (  0.85)	train_majacc   0.94 (  0.93)	train_corr   0.00 (  0.00)	l1 8.5632 (8.9095)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 17.86it/s] 27%|##6       | 7/26 [00:00<00:00, 33.89it/s]                                               27%|##6       | 7/26 [00:00<00:00, 33.89it/s] 46%|####6     | 12/26 [00:00<00:00, 38.92it/s] 65%|######5   | 17/26 [00:00<00:00, 38.58it/s]                                                65%|######5   | 17/26 [00:00<00:00, 38.58it/s] 85%|########4 | 22/26 [00:00<00:00, 40.82it/s]100%|##########| 26/26 [00:00<00:00, 36.03it/s]
Test: [   0/  26]	Loss 0.197 (0.197)	test_acc   0.92 (  0.92)	test_minacc   0.83 (  0.83)	test_majacc   0.94 (  0.94)	Loss_d 0.197 (0.197)	test_acc_d   0.92 (  0.92)	test_minacc_d   0.83 (  0.83)	test_majacc_d   0.94 (  0.94)	test_corr_d   0.75 (  0.75)
Test: [  10/  26]	Loss 0.179 (0.184)	test_acc   0.93 (  0.93)	test_minacc   0.79 (  0.83)	test_majacc   0.95 (  0.95)	Loss_d 0.179 (0.184)	test_acc_d   0.93 (  0.93)	test_minacc_d   0.79 (  0.83)	test_majacc_d   0.95 (  0.95)	test_corr_d   0.79 (  0.76)
Test: [  20/  26]	Loss 0.194 (0.177)	test_acc   0.92 (  0.93)	test_minacc   0.84 (  0.84)	test_majacc   0.94 (  0.95)	Loss_d 0.194 (0.177)	test_acc_d   0.92 (  0.93)	test_minacc_d   0.84 (  0.84)	test_majacc_d   0.94 (  0.95)	test_corr_d   0.77 (  0.78)
Test: [  26/  26]	Loss 0.191 (0.181)	test_acc   0.93 (  0.93)	test_minacc   0.89 (  0.84)	test_majacc   0.94 (  0.95)	Loss_d 0.191 (0.181)	test_acc_d   0.93 (  0.93)	test_minacc_d   0.89 (  0.84)	test_majacc_d   0.94 (  0.95)	test_corr_d   0.70 (  0.77)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 60.52it/s]
Test: [  0/  1]	Loss 2.178 (2.178)	test_acc   0.53 (  0.53)	test_minacc   0.48 (  0.48)	test_majacc   0.93 (  0.93)	Loss_d 2.178 (2.178)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.48 (  0.48)	test_majacc_d   0.93 (  0.93)	test_corr_d   0.30 (  0.30)
Test: [  1/  1]	Loss 2.178 (2.178)	test_acc   0.53 (  0.53)	test_minacc   0.48 (  0.48)	test_majacc   0.93 (  0.93)	Loss_d 2.178 (2.178)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.48 (  0.48)	test_majacc_d   0.93 (  0.93)	test_corr_d   0.30 (  0.30)
Overall Timing[ 31/  1]	epoch_time 0.0426 (0.0430)	validation_time 0.0004 (0.0006)	train_time 0.0421 (0.0423)
record: (train_acc, test_acc) (0.8996000180244446, 0.6050000190734863)
last accs (train_acc, test_acc) (0.9316000201106072, 0.5260000228881836)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.73it/s] 15%|#5        | 4/26 [00:00<00:01, 16.67it/s] 31%|###       | 8/26 [00:00<00:00, 23.52it/s] 46%|####6     | 12/26 [00:00<00:00, 26.93it/s] 62%|######1   | 16/26 [00:00<00:00, 28.96it/s] 77%|#######6  | 20/26 [00:00<00:00, 29.51it/s] 92%|#########2| 24/26 [00:00<00:00, 30.93it/s]100%|##########| 26/26 [00:00<00:00, 26.09it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 832 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 833 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 834 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 835 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 836 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 837 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 838 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 839 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 840 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 841 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 842 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 843 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 844 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 845 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 846 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 847 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 848 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 849 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 850 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 851 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 852 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 853 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 854 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 855 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 856 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 857 400
penalty weights 10000.0
Epoch: [32][  26/  26]	Loss 0.001 (0.001)	train_nll   0.22 (  0.20)	train_penalty   0.00 (  0.00)	weight_norm  25.06 ( 25.05)	train_acc   0.90 (  0.91)	train_minacc   0.80 (  0.81)	train_majacc   0.92 (  0.93)	train_corr   0.00 (  0.00)	l1 9.0549 (8.7172)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:05,  4.48it/s] 23%|##3       | 6/26 [00:00<00:00, 21.75it/s]                                               23%|##3       | 6/26 [00:00<00:00, 21.75it/s] 42%|####2     | 11/26 [00:00<00:00, 31.14it/s] 62%|######1   | 16/26 [00:00<00:00, 36.62it/s]                                                62%|######1   | 16/26 [00:00<00:00, 36.62it/s] 81%|########  | 21/26 [00:00<00:00, 36.28it/s]100%|##########| 26/26 [00:00<00:00, 39.76it/s]100%|##########| 26/26 [00:00<00:00, 30.83it/s]
Test: [   0/  26]	Loss 0.254 (0.254)	test_acc   0.88 (  0.88)	test_minacc   0.78 (  0.78)	test_majacc   0.90 (  0.90)	Loss_d 0.254 (0.254)	test_acc_d   0.88 (  0.88)	test_minacc_d   0.78 (  0.78)	test_majacc_d   0.90 (  0.90)	test_corr_d   0.72 (  0.72)
Test: [  10/  26]	Loss 0.233 (0.229)	test_acc   0.90 (  0.90)	test_minacc   0.82 (  0.82)	test_majacc   0.92 (  0.91)	Loss_d 0.233 (0.229)	test_acc_d   0.90 (  0.90)	test_minacc_d   0.82 (  0.82)	test_majacc_d   0.92 (  0.91)	test_corr_d   0.75 (  0.73)
Test: [  20/  26]	Loss 0.215 (0.215)	test_acc   0.92 (  0.90)	test_minacc   0.91 (  0.82)	test_majacc   0.92 (  0.92)	Loss_d 0.215 (0.215)	test_acc_d   0.92 (  0.90)	test_minacc_d   0.91 (  0.82)	test_majacc_d   0.92 (  0.92)	test_corr_d   0.74 (  0.74)
Test: [  26/  26]	Loss 0.215 (0.214)	test_acc   0.91 (  0.90)	test_minacc   0.82 (  0.82)	test_majacc   0.93 (  0.92)	Loss_d 0.215 (0.214)	test_acc_d   0.91 (  0.90)	test_minacc_d   0.82 (  0.82)	test_majacc_d   0.93 (  0.92)	test_corr_d   0.68 (  0.74)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.58it/s]
Test: [  0/  1]	Loss 2.314 (2.314)	test_acc   0.56 (  0.56)	test_minacc   0.52 (  0.52)	test_majacc   0.89 (  0.89)	Loss_d 2.314 (2.314)	test_acc_d   0.56 (  0.56)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.89 (  0.89)	test_corr_d   0.22 (  0.22)
Test: [  1/  1]	Loss 2.314 (2.314)	test_acc   0.56 (  0.56)	test_minacc   0.52 (  0.52)	test_majacc   0.89 (  0.89)	Loss_d 2.314 (2.314)	test_acc_d   0.56 (  0.56)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.89 (  0.89)	test_corr_d   0.22 (  0.22)
Overall Timing[ 32/  1]	epoch_time 0.0450 (0.0431)	validation_time 0.0003 (0.0006)	train_time 0.0446 (0.0424)
record: (train_acc, test_acc) (0.8996000180244446, 0.6050000190734863)
last accs (train_acc, test_acc) (0.9025000255703927, 0.5570000410079956)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:06,  3.75it/s] 19%|#9        | 5/26 [00:00<00:01, 15.57it/s] 35%|###4      | 9/26 [00:00<00:00, 21.90it/s] 50%|#####     | 13/26 [00:00<00:00, 25.85it/s] 65%|######5   | 17/26 [00:00<00:00, 28.94it/s] 81%|########  | 21/26 [00:00<00:00, 31.29it/s] 96%|#########6| 25/26 [00:00<00:00, 32.87it/s]100%|##########| 26/26 [00:01<00:00, 25.20it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 858 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 859 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 860 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 861 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 862 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 863 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 864 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 865 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 866 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 867 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 868 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 869 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 870 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 871 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 872 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 873 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 874 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 875 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 876 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 877 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 878 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 879 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 880 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 881 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 882 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 883 400
penalty weights 10000.0
Epoch: [33][  26/  26]	Loss 0.000 (0.000)	train_nll   0.17 (  0.19)	train_penalty   0.00 (  0.00)	weight_norm  25.06 ( 25.06)	train_acc   0.94 (  0.92)	train_minacc   0.91 (  0.84)	train_majacc   0.95 (  0.94)	train_corr   0.00 (  0.00)	l1 9.0193 (8.7767)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.71it/s] 23%|##3       | 6/26 [00:00<00:00, 29.10it/s]                                               23%|##3       | 6/26 [00:00<00:00, 29.10it/s] 42%|####2     | 11/26 [00:00<00:00, 35.62it/s] 62%|######1   | 16/26 [00:00<00:00, 40.64it/s]                                                62%|######1   | 16/26 [00:00<00:00, 40.64it/s] 81%|########  | 21/26 [00:00<00:00, 39.15it/s]100%|##########| 26/26 [00:00<00:00, 41.69it/s]100%|##########| 26/26 [00:00<00:00, 34.63it/s]
Test: [   0/  26]	Loss 0.200 (0.200)	test_acc   0.93 (  0.93)	test_minacc   0.84 (  0.84)	test_majacc   0.94 (  0.94)	Loss_d 0.200 (0.200)	test_acc_d   0.93 (  0.93)	test_minacc_d   0.84 (  0.84)	test_majacc_d   0.94 (  0.94)	test_corr_d   0.72 (  0.72)
Test: [  10/  26]	Loss 0.243 (0.213)	test_acc   0.90 (  0.92)	test_minacc   0.71 (  0.79)	test_majacc   0.93 (  0.94)	Loss_d 0.243 (0.213)	test_acc_d   0.90 (  0.92)	test_minacc_d   0.71 (  0.79)	test_majacc_d   0.93 (  0.94)	test_corr_d   0.76 (  0.74)
Test: [  20/  26]	Loss 0.203 (0.210)	test_acc   0.92 (  0.92)	test_minacc   0.82 (  0.79)	test_majacc   0.93 (  0.94)	Loss_d 0.203 (0.210)	test_acc_d   0.92 (  0.92)	test_minacc_d   0.82 (  0.79)	test_majacc_d   0.93 (  0.94)	test_corr_d   0.75 (  0.75)
Test: [  26/  26]	Loss 0.167 (0.206)	test_acc   0.94 (  0.92)	test_minacc   0.91 (  0.80)	test_majacc   0.95 (  0.94)	Loss_d 0.167 (0.206)	test_acc_d   0.94 (  0.92)	test_minacc_d   0.91 (  0.80)	test_majacc_d   0.95 (  0.94)	test_corr_d   0.69 (  0.75)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 60.93it/s]
Test: [  0/  1]	Loss 2.119 (2.119)	test_acc   0.55 (  0.55)	test_minacc   0.51 (  0.51)	test_majacc   0.88 (  0.88)	Loss_d 2.119 (2.119)	test_acc_d   0.55 (  0.55)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.88 (  0.88)	test_corr_d   0.18 (  0.18)
Test: [  1/  1]	Loss 2.119 (2.119)	test_acc   0.55 (  0.55)	test_minacc   0.51 (  0.51)	test_majacc   0.88 (  0.88)	Loss_d 2.119 (2.119)	test_acc_d   0.55 (  0.55)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.88 (  0.88)	test_corr_d   0.18 (  0.18)
Overall Timing[ 33/  1]	epoch_time 0.0438 (0.0431)	validation_time 0.0005 (0.0006)	train_time 0.0433 (0.0424)
record: (train_acc, test_acc) (0.8996000180244446, 0.6050000190734863)
last accs (train_acc, test_acc) (0.9196000179648399, 0.5460000038146973)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.50it/s] 19%|#9        | 5/26 [00:00<00:01, 20.55it/s] 35%|###4      | 9/26 [00:00<00:00, 25.43it/s] 50%|#####     | 13/26 [00:00<00:00, 28.54it/s] 65%|######5   | 17/26 [00:00<00:00, 30.51it/s] 81%|########  | 21/26 [00:00<00:00, 31.93it/s] 96%|#########6| 25/26 [00:00<00:00, 32.92it/s]100%|##########| 26/26 [00:00<00:00, 27.48it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 884 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 885 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 886 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 887 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 888 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 889 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 890 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 891 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 892 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 893 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 894 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 895 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 896 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 897 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 898 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 899 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 900 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 901 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 902 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 903 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 904 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 905 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 906 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 907 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 908 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 909 400
penalty weights 10000.0
Epoch: [34][  26/  26]	Loss 0.000 (0.001)	train_nll   0.18 (  0.20)	train_penalty   0.00 (  0.00)	weight_norm  25.07 ( 25.06)	train_acc   0.94 (  0.92)	train_minacc   0.93 (  0.84)	train_majacc   0.94 (  0.94)	train_corr   0.00 (  0.00)	l1 8.7821 (8.8850)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 19.46it/s] 19%|#9        | 5/26 [00:00<00:00, 24.50it/s] 38%|###8      | 10/26 [00:00<00:00, 34.91it/s]                                                38%|###8      | 10/26 [00:00<00:00, 34.91it/s] 58%|#####7    | 15/26 [00:00<00:00, 39.91it/s] 77%|#######6  | 20/26 [00:00<00:00, 42.79it/s]                                                77%|#######6  | 20/26 [00:00<00:00, 42.79it/s]100%|##########| 26/26 [00:00<00:00, 47.04it/s]100%|##########| 26/26 [00:00<00:00, 37.45it/s]
Test: [   0/  26]	Loss 0.181 (0.181)	test_acc   0.91 (  0.91)	test_minacc   0.88 (  0.88)	test_majacc   0.92 (  0.92)	Loss_d 0.181 (0.181)	test_acc_d   0.91 (  0.91)	test_minacc_d   0.88 (  0.88)	test_majacc_d   0.92 (  0.92)	test_corr_d   0.69 (  0.69)
Test: [  10/  26]	Loss 0.176 (0.176)	test_acc   0.94 (  0.93)	test_minacc   0.91 (  0.90)	test_majacc   0.94 (  0.93)	Loss_d 0.176 (0.176)	test_acc_d   0.94 (  0.93)	test_minacc_d   0.91 (  0.90)	test_majacc_d   0.94 (  0.93)	test_corr_d   0.73 (  0.71)
Test: [  20/  26]	Loss 0.205 (0.182)	test_acc   0.90 (  0.92)	test_minacc   0.89 (  0.89)	test_majacc   0.90 (  0.93)	Loss_d 0.205 (0.182)	test_acc_d   0.90 (  0.92)	test_minacc_d   0.89 (  0.89)	test_majacc_d   0.90 (  0.93)	test_corr_d   0.71 (  0.72)
Test: [  26/  26]	Loss 0.177 (0.185)	test_acc   0.94 (  0.92)	test_minacc   0.93 (  0.89)	test_majacc   0.94 (  0.93)	Loss_d 0.177 (0.185)	test_acc_d   0.94 (  0.92)	test_minacc_d   0.93 (  0.89)	test_majacc_d   0.94 (  0.93)	test_corr_d   0.66 (  0.71)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 64.18it/s]
Test: [  0/  1]	Loss 2.001 (2.001)	test_acc   0.59 (  0.59)	test_minacc   0.55 (  0.55)	test_majacc   0.91 (  0.91)	Loss_d 2.001 (2.001)	test_acc_d   0.59 (  0.59)	test_minacc_d   0.55 (  0.55)	test_majacc_d   0.91 (  0.91)	test_corr_d   0.13 (  0.13)
Test: [  1/  1]	Loss 2.001 (2.001)	test_acc   0.59 (  0.59)	test_minacc   0.55 (  0.55)	test_majacc   0.91 (  0.91)	Loss_d 2.001 (2.001)	test_acc_d   0.59 (  0.59)	test_minacc_d   0.55 (  0.55)	test_majacc_d   0.91 (  0.91)	test_corr_d   0.13 (  0.13)
Overall Timing[ 34/  1]	epoch_time 0.0410 (0.0431)	validation_time 0.0004 (0.0006)	train_time 0.0406 (0.0424)
record: (train_acc, test_acc) (0.8996000180244446, 0.6050000190734863)
last accs (train_acc, test_acc) (0.9231000185012818, 0.5860000252723694)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.62it/s] 19%|#9        | 5/26 [00:00<00:00, 23.32it/s] 35%|###4      | 9/26 [00:00<00:00, 27.93it/s] 50%|#####     | 13/26 [00:00<00:00, 30.43it/s] 65%|######5   | 17/26 [00:00<00:00, 32.04it/s] 81%|########  | 21/26 [00:00<00:00, 33.32it/s] 96%|#########6| 25/26 [00:00<00:00, 33.45it/s]100%|##########| 26/26 [00:00<00:00, 28.82it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 910 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 911 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 912 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 913 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 914 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 915 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 916 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 917 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 918 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 919 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 920 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 921 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 922 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 923 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 924 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 925 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 926 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 927 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 928 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 929 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 930 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 931 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 932 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 933 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 934 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 935 400
penalty weights 10000.0
Epoch: [35][  26/  26]	Loss 0.000 (0.001)	train_nll   0.18 (  0.20)	train_penalty   0.00 (  0.00)	weight_norm  25.07 ( 25.07)	train_acc   0.94 (  0.91)	train_minacc   0.86 (  0.87)	train_majacc   0.95 (  0.92)	train_corr   0.00 (  0.00)	l1 8.6599 (9.1267)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 17.56it/s] 27%|##6       | 7/26 [00:00<00:00, 34.18it/s]                                               27%|##6       | 7/26 [00:00<00:00, 34.18it/s] 46%|####6     | 12/26 [00:00<00:00, 40.13it/s] 65%|######5   | 17/26 [00:00<00:00, 38.66it/s]                                                65%|######5   | 17/26 [00:00<00:00, 38.66it/s] 85%|########4 | 22/26 [00:00<00:00, 41.17it/s]100%|##########| 26/26 [00:00<00:00, 36.50it/s]
Test: [   0/  26]	Loss 0.192 (0.192)	test_acc   0.92 (  0.92)	test_minacc   0.81 (  0.81)	test_majacc   0.94 (  0.94)	Loss_d 0.192 (0.192)	test_acc_d   0.92 (  0.92)	test_minacc_d   0.81 (  0.81)	test_majacc_d   0.94 (  0.94)	test_corr_d   0.76 (  0.76)
Test: [  10/  26]	Loss 0.178 (0.177)	test_acc   0.93 (  0.93)	test_minacc   0.79 (  0.85)	test_majacc   0.96 (  0.95)	Loss_d 0.178 (0.177)	test_acc_d   0.93 (  0.93)	test_minacc_d   0.79 (  0.85)	test_majacc_d   0.96 (  0.95)	test_corr_d   0.79 (  0.77)
Test: [  20/  26]	Loss 0.187 (0.172)	test_acc   0.94 (  0.94)	test_minacc   0.87 (  0.85)	test_majacc   0.95 (  0.95)	Loss_d 0.187 (0.172)	test_acc_d   0.94 (  0.94)	test_minacc_d   0.87 (  0.85)	test_majacc_d   0.95 (  0.95)	test_corr_d   0.78 (  0.78)
Test: [  26/  26]	Loss 0.178 (0.176)	test_acc   0.94 (  0.94)	test_minacc   0.89 (  0.85)	test_majacc   0.96 (  0.95)	Loss_d 0.178 (0.176)	test_acc_d   0.94 (  0.94)	test_minacc_d   0.89 (  0.85)	test_majacc_d   0.96 (  0.95)	test_corr_d   0.72 (  0.78)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.93it/s]
Test: [  0/  1]	Loss 2.209 (2.209)	test_acc   0.51 (  0.51)	test_minacc   0.47 (  0.47)	test_majacc   0.93 (  0.93)	Loss_d 2.209 (2.209)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.47 (  0.47)	test_majacc_d   0.93 (  0.93)	test_corr_d   0.32 (  0.32)
Test: [  1/  1]	Loss 2.209 (2.209)	test_acc   0.51 (  0.51)	test_minacc   0.47 (  0.47)	test_majacc   0.93 (  0.93)	Loss_d 2.209 (2.209)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.47 (  0.47)	test_majacc_d   0.93 (  0.93)	test_corr_d   0.32 (  0.32)
Overall Timing[ 35/  1]	epoch_time 0.0405 (0.0430)	validation_time 0.0004 (0.0006)	train_time 0.0400 (0.0423)
record: (train_acc, test_acc) (0.8996000180244446, 0.6050000190734863)
last accs (train_acc, test_acc) (0.9363000181317329, 0.5120000243186951)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.67it/s] 12%|#1        | 3/26 [00:00<00:01, 11.63it/s] 27%|##6       | 7/26 [00:00<00:00, 21.05it/s] 42%|####2     | 11/26 [00:00<00:00, 25.67it/s] 58%|#####7    | 15/26 [00:00<00:00, 28.88it/s] 73%|#######3  | 19/26 [00:00<00:00, 30.36it/s] 88%|########8 | 23/26 [00:00<00:00, 32.11it/s]100%|##########| 26/26 [00:01<00:00, 25.89it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 936 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 937 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 938 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 939 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 940 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 941 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 942 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 943 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 944 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 945 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 946 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 947 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 948 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 949 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 950 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 951 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 952 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 953 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 954 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 955 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 956 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 957 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 958 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 959 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 960 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 961 400
penalty weights 10000.0
Epoch: [36][  26/  26]	Loss 0.001 (0.001)	train_nll   0.23 (  0.19)	train_penalty   0.00 (  0.00)	weight_norm  25.08 ( 25.07)	train_acc   0.91 (  0.93)	train_minacc   0.80 (  0.82)	train_majacc   0.93 (  0.94)	train_corr   0.00 (  0.00)	l1 9.4050 (8.7824)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.82it/s] 23%|##3       | 6/26 [00:00<00:00, 27.35it/s]                                               23%|##3       | 6/26 [00:00<00:00, 27.35it/s] 42%|####2     | 11/26 [00:00<00:00, 34.52it/s] 62%|######1   | 16/26 [00:00<00:00, 39.31it/s]                                                62%|######1   | 16/26 [00:00<00:00, 39.31it/s] 81%|########  | 21/26 [00:00<00:00, 38.28it/s]100%|##########| 26/26 [00:00<00:00, 41.34it/s]100%|##########| 26/26 [00:00<00:00, 33.85it/s]
Test: [   0/  26]	Loss 0.253 (0.253)	test_acc   0.90 (  0.90)	test_minacc   0.78 (  0.78)	test_majacc   0.92 (  0.92)	Loss_d 0.253 (0.253)	test_acc_d   0.90 (  0.90)	test_minacc_d   0.78 (  0.78)	test_majacc_d   0.92 (  0.92)	test_corr_d   0.74 (  0.74)
Test: [  10/  26]	Loss 0.249 (0.238)	test_acc   0.90 (  0.90)	test_minacc   0.77 (  0.80)	test_majacc   0.92 (  0.92)	Loss_d 0.249 (0.238)	test_acc_d   0.90 (  0.90)	test_minacc_d   0.77 (  0.80)	test_majacc_d   0.92 (  0.92)	test_corr_d   0.75 (  0.74)
Test: [  20/  26]	Loss 0.219 (0.226)	test_acc   0.91 (  0.90)	test_minacc   0.84 (  0.79)	test_majacc   0.92 (  0.92)	Loss_d 0.219 (0.226)	test_acc_d   0.91 (  0.90)	test_minacc_d   0.84 (  0.79)	test_majacc_d   0.92 (  0.92)	test_corr_d   0.76 (  0.75)
Test: [  26/  26]	Loss 0.221 (0.223)	test_acc   0.91 (  0.90)	test_minacc   0.80 (  0.80)	test_majacc   0.94 (  0.92)	Loss_d 0.221 (0.223)	test_acc_d   0.91 (  0.90)	test_minacc_d   0.80 (  0.80)	test_majacc_d   0.94 (  0.92)	test_corr_d   0.70 (  0.75)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 60.07it/s]
Test: [  0/  1]	Loss 2.525 (2.525)	test_acc   0.51 (  0.51)	test_minacc   0.47 (  0.47)	test_majacc   0.87 (  0.87)	Loss_d 2.525 (2.525)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.47 (  0.47)	test_majacc_d   0.87 (  0.87)	test_corr_d   0.30 (  0.30)
Test: [  1/  1]	Loss 2.525 (2.525)	test_acc   0.51 (  0.51)	test_minacc   0.47 (  0.47)	test_majacc   0.87 (  0.87)	Loss_d 2.525 (2.525)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.47 (  0.47)	test_majacc_d   0.87 (  0.87)	test_corr_d   0.30 (  0.30)
Overall Timing[ 36/  1]	epoch_time 0.0384 (0.0429)	validation_time 0.0004 (0.0006)	train_time 0.0380 (0.0422)
record: (train_acc, test_acc) (0.8996000180244446, 0.6050000190734863)
last accs (train_acc, test_acc) (0.9036000210642815, 0.5060000419616699)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 18.22it/s] 19%|#9        | 5/26 [00:00<00:00, 23.96it/s] 35%|###4      | 9/26 [00:00<00:00, 29.04it/s] 50%|#####     | 13/26 [00:00<00:00, 31.67it/s] 65%|######5   | 17/26 [00:00<00:00, 32.83it/s] 81%|########  | 21/26 [00:00<00:00, 34.12it/s] 96%|#########6| 25/26 [00:00<00:00, 34.74it/s]100%|##########| 26/26 [00:00<00:00, 30.04it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 962 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 963 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 964 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 965 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 966 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 967 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 968 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 969 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 970 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 971 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 972 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 973 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 974 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 975 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 976 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 977 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 978 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 979 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 980 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 981 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 982 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 983 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 984 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 985 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 986 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 987 400
penalty weights 10000.0
Epoch: [37][  26/  26]	Loss 0.002 (0.001)	train_nll   0.15 (  0.19)	train_penalty   0.00 (  0.00)	weight_norm  25.08 ( 25.08)	train_acc   0.96 (  0.92)	train_minacc   0.95 (  0.85)	train_majacc   0.96 (  0.94)	train_corr   0.00 (  0.00)	l1 8.9470 (8.9661)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.78it/s] 23%|##3       | 6/26 [00:00<00:00, 27.96it/s]                                               23%|##3       | 6/26 [00:00<00:00, 27.96it/s] 42%|####2     | 11/26 [00:00<00:00, 36.27it/s] 65%|######5   | 17/26 [00:00<00:00, 40.09it/s]                                                65%|######5   | 17/26 [00:00<00:00, 40.09it/s] 85%|########4 | 22/26 [00:00<00:00, 43.04it/s]100%|##########| 26/26 [00:00<00:00, 35.77it/s]
Test: [   0/  26]	Loss 0.200 (0.200)	test_acc   0.94 (  0.94)	test_minacc   0.88 (  0.88)	test_majacc   0.95 (  0.95)	Loss_d 0.200 (0.200)	test_acc_d   0.94 (  0.94)	test_minacc_d   0.88 (  0.88)	test_majacc_d   0.95 (  0.95)	test_corr_d   0.72 (  0.72)
Test: [  10/  26]	Loss 0.230 (0.199)	test_acc   0.89 (  0.92)	test_minacc   0.71 (  0.84)	test_majacc   0.93 (  0.94)	Loss_d 0.230 (0.199)	test_acc_d   0.89 (  0.92)	test_minacc_d   0.71 (  0.84)	test_majacc_d   0.93 (  0.94)	test_corr_d   0.77 (  0.74)
Test: [  20/  26]	Loss 0.201 (0.201)	test_acc   0.91 (  0.92)	test_minacc   0.84 (  0.83)	test_majacc   0.92 (  0.94)	Loss_d 0.201 (0.201)	test_acc_d   0.91 (  0.92)	test_minacc_d   0.84 (  0.83)	test_majacc_d   0.92 (  0.94)	test_corr_d   0.74 (  0.75)
Test: [  26/  26]	Loss 0.151 (0.199)	test_acc   0.96 (  0.92)	test_minacc   0.95 (  0.84)	test_majacc   0.96 (  0.94)	Loss_d 0.151 (0.199)	test_acc_d   0.96 (  0.92)	test_minacc_d   0.95 (  0.84)	test_majacc_d   0.96 (  0.94)	test_corr_d   0.69 (  0.74)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 59.88it/s]
Test: [  0/  1]	Loss 2.081 (2.081)	test_acc   0.56 (  0.56)	test_minacc   0.52 (  0.52)	test_majacc   0.88 (  0.88)	Loss_d 2.081 (2.081)	test_acc_d   0.56 (  0.56)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.88 (  0.88)	test_corr_d   0.18 (  0.18)
Test: [  1/  1]	Loss 2.081 (2.081)	test_acc   0.56 (  0.56)	test_minacc   0.52 (  0.52)	test_majacc   0.88 (  0.88)	Loss_d 2.081 (2.081)	test_acc_d   0.56 (  0.56)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.88 (  0.88)	test_corr_d   0.18 (  0.18)
Overall Timing[ 37/  1]	epoch_time 0.0412 (0.0428)	validation_time 0.0005 (0.0006)	train_time 0.0407 (0.0422)
record: (train_acc, test_acc) (0.8996000180244446, 0.6050000190734863)
last accs (train_acc, test_acc) (0.9235000182390213, 0.5590000152587891)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  6.19it/s] 19%|#9        | 5/26 [00:00<00:01, 20.86it/s] 35%|###4      | 9/26 [00:00<00:00, 26.83it/s] 46%|####6     | 12/26 [00:00<00:00, 27.80it/s] 62%|######1   | 16/26 [00:00<00:00, 30.48it/s] 77%|#######6  | 20/26 [00:00<00:00, 31.58it/s] 92%|#########2| 24/26 [00:00<00:00, 32.36it/s]100%|##########| 26/26 [00:00<00:00, 26.99it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 988 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 989 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 990 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 991 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 992 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 993 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 994 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 995 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 996 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 997 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 998 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 999 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1000 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1001 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1002 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1003 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1004 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1005 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1006 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1007 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1008 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1009 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1010 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1011 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1012 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1013 400
penalty weights 10000.0
Epoch: [38][  26/  26]	Loss 0.000 (0.000)	train_nll   0.17 (  0.20)	train_penalty   0.00 (  0.00)	weight_norm  25.09 ( 25.09)	train_acc   0.95 (  0.92)	train_minacc   0.91 (  0.85)	train_majacc   0.96 (  0.94)	train_corr   0.00 (  0.00)	l1 8.9118 (9.0454)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:11,  2.09it/s] 23%|##3       | 6/26 [00:00<00:01, 13.11it/s]                                               23%|##3       | 6/26 [00:00<00:01, 13.11it/s] 42%|####2     | 11/26 [00:00<00:00, 21.69it/s] 62%|######1   | 16/26 [00:00<00:00, 28.57it/s]                                                62%|######1   | 16/26 [00:00<00:00, 28.57it/s] 81%|########  | 21/26 [00:00<00:00, 31.54it/s]100%|##########| 26/26 [00:01<00:00, 35.92it/s]100%|##########| 26/26 [00:01<00:00, 23.72it/s]
Test: [   0/  26]	Loss 0.190 (0.190)	test_acc   0.92 (  0.92)	test_minacc   0.89 (  0.89)	test_majacc   0.93 (  0.93)	Loss_d 0.190 (0.190)	test_acc_d   0.92 (  0.92)	test_minacc_d   0.89 (  0.89)	test_majacc_d   0.93 (  0.93)	test_corr_d   0.70 (  0.70)
Test: [  10/  26]	Loss 0.165 (0.170)	test_acc   0.94 (  0.93)	test_minacc   0.91 (  0.90)	test_majacc   0.95 (  0.94)	Loss_d 0.165 (0.170)	test_acc_d   0.94 (  0.93)	test_minacc_d   0.91 (  0.90)	test_majacc_d   0.95 (  0.94)	test_corr_d   0.75 (  0.72)
Test: [  20/  26]	Loss 0.200 (0.176)	test_acc   0.93 (  0.93)	test_minacc   0.91 (  0.89)	test_majacc   0.93 (  0.94)	Loss_d 0.200 (0.176)	test_acc_d   0.93 (  0.93)	test_minacc_d   0.91 (  0.89)	test_majacc_d   0.93 (  0.94)	test_corr_d   0.72 (  0.73)
Test: [  26/  26]	Loss 0.171 (0.180)	test_acc   0.94 (  0.93)	test_minacc   0.91 (  0.89)	test_majacc   0.95 (  0.94)	Loss_d 0.171 (0.180)	test_acc_d   0.94 (  0.93)	test_minacc_d   0.91 (  0.89)	test_majacc_d   0.95 (  0.94)	test_corr_d   0.67 (  0.73)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.23it/s]
Test: [  0/  1]	Loss 2.093 (2.093)	test_acc   0.57 (  0.57)	test_minacc   0.53 (  0.53)	test_majacc   0.90 (  0.90)	Loss_d 2.093 (2.093)	test_acc_d   0.57 (  0.57)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.90 (  0.90)	test_corr_d   0.17 (  0.17)
Test: [  1/  1]	Loss 2.093 (2.093)	test_acc   0.57 (  0.57)	test_minacc   0.53 (  0.53)	test_majacc   0.90 (  0.90)	Loss_d 2.093 (2.093)	test_acc_d   0.57 (  0.57)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.90 (  0.90)	test_corr_d   0.17 (  0.17)
Overall Timing[ 38/  1]	epoch_time 0.0426 (0.0428)	validation_time 0.0004 (0.0006)	train_time 0.0421 (0.0422)
record: (train_acc, test_acc) (0.8996000180244446, 0.6050000190734863)
last accs (train_acc, test_acc) (0.9280000128149987, 0.5670000314712524)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:01, 21.63it/s] 27%|##6       | 7/26 [00:00<00:00, 28.58it/s] 42%|####2     | 11/26 [00:00<00:00, 29.92it/s] 58%|#####7    | 15/26 [00:00<00:00, 31.55it/s] 73%|#######3  | 19/26 [00:00<00:00, 32.63it/s] 88%|########8 | 23/26 [00:00<00:00, 33.26it/s]100%|##########| 26/26 [00:00<00:00, 29.56it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1014 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1015 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1016 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1017 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1018 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1019 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1020 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1021 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1022 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1023 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1024 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1025 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1026 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1027 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1028 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1029 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1030 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1031 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1032 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1033 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1034 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1035 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1036 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1037 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1038 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1039 400
penalty weights 10000.0
Epoch: [39][  26/  26]	Loss 0.002 (0.001)	train_nll   0.20 (  0.20)	train_penalty   0.00 (  0.00)	weight_norm  25.09 ( 25.10)	train_acc   0.93 (  0.92)	train_minacc   0.82 (  0.87)	train_majacc   0.96 (  0.93)	train_corr   0.00 (  0.00)	l1 9.1676 (9.3846)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.95it/s] 15%|#5        | 4/26 [00:00<00:01, 20.66it/s] 35%|###4      | 9/26 [00:00<00:00, 32.58it/s]                                               35%|###4      | 9/26 [00:00<00:00, 32.58it/s] 54%|#####3    | 14/26 [00:00<00:00, 37.89it/s] 73%|#######3  | 19/26 [00:00<00:00, 37.55it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 37.55it/s] 92%|#########2| 24/26 [00:00<00:00, 40.51it/s]100%|##########| 26/26 [00:00<00:00, 34.13it/s]
Test: [   0/  26]	Loss 0.201 (0.201)	test_acc   0.92 (  0.92)	test_minacc   0.78 (  0.78)	test_majacc   0.95 (  0.95)	Loss_d 0.201 (0.201)	test_acc_d   0.92 (  0.92)	test_minacc_d   0.78 (  0.78)	test_majacc_d   0.95 (  0.95)	test_corr_d   0.76 (  0.76)
Test: [  10/  26]	Loss 0.186 (0.186)	test_acc   0.93 (  0.93)	test_minacc   0.80 (  0.83)	test_majacc   0.95 (  0.95)	Loss_d 0.186 (0.186)	test_acc_d   0.93 (  0.93)	test_minacc_d   0.80 (  0.83)	test_majacc_d   0.95 (  0.95)	test_corr_d   0.79 (  0.78)
Test: [  20/  26]	Loss 0.187 (0.179)	test_acc   0.93 (  0.93)	test_minacc   0.87 (  0.83)	test_majacc   0.94 (  0.95)	Loss_d 0.187 (0.179)	test_acc_d   0.93 (  0.93)	test_minacc_d   0.87 (  0.83)	test_majacc_d   0.94 (  0.95)	test_corr_d   0.79 (  0.79)
Test: [  26/  26]	Loss 0.187 (0.182)	test_acc   0.94 (  0.93)	test_minacc   0.84 (  0.83)	test_majacc   0.96 (  0.95)	Loss_d 0.187 (0.182)	test_acc_d   0.94 (  0.93)	test_minacc_d   0.84 (  0.83)	test_majacc_d   0.96 (  0.95)	test_corr_d   0.72 (  0.78)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.81it/s]
Test: [  0/  1]	Loss 2.428 (2.428)	test_acc   0.50 (  0.50)	test_minacc   0.45 (  0.45)	test_majacc   0.94 (  0.94)	Loss_d 2.428 (2.428)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.45 (  0.45)	test_majacc_d   0.94 (  0.94)	test_corr_d   0.34 (  0.34)
Test: [  1/  1]	Loss 2.428 (2.428)	test_acc   0.50 (  0.50)	test_minacc   0.45 (  0.45)	test_majacc   0.94 (  0.94)	Loss_d 2.428 (2.428)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.45 (  0.45)	test_majacc_d   0.94 (  0.94)	test_corr_d   0.34 (  0.34)
Overall Timing[ 39/  1]	epoch_time 0.0430 (0.0428)	validation_time 0.0004 (0.0006)	train_time 0.0426 (0.0422)
record: (train_acc, test_acc) (0.8996000180244446, 0.6050000190734863)
last accs (train_acc, test_acc) (0.9327000216245651, 0.5010000467300415)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.48it/s] 15%|#5        | 4/26 [00:00<00:01, 15.86it/s] 31%|###       | 8/26 [00:00<00:00, 23.43it/s] 46%|####6     | 12/26 [00:00<00:00, 27.52it/s] 62%|######1   | 16/26 [00:00<00:00, 30.06it/s] 77%|#######6  | 20/26 [00:00<00:00, 31.88it/s] 92%|#########2| 24/26 [00:00<00:00, 33.20it/s]100%|##########| 26/26 [00:00<00:00, 26.85it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1040 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1041 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1042 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1043 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1044 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1045 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1046 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1047 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1048 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1049 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1050 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1051 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1052 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1053 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1054 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1055 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1056 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1057 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1058 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1059 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1060 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1061 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1062 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1063 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1064 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1065 400
penalty weights 10000.0
Epoch: [40][  26/  26]	Loss 0.002 (0.001)	train_nll   0.17 (  0.18)	train_penalty   0.00 (  0.00)	weight_norm  25.11 ( 25.10)	train_acc   0.94 (  0.93)	train_minacc   0.91 (  0.84)	train_majacc   0.95 (  0.95)	train_corr   0.00 (  0.00)	l1 9.3567 (8.8574)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 19.14it/s] 27%|##6       | 7/26 [00:00<00:00, 35.49it/s]                                               27%|##6       | 7/26 [00:00<00:00, 35.49it/s] 46%|####6     | 12/26 [00:00<00:00, 41.38it/s] 65%|######5   | 17/26 [00:00<00:00, 39.31it/s]                                                65%|######5   | 17/26 [00:00<00:00, 39.31it/s] 85%|########4 | 22/26 [00:00<00:00, 41.60it/s]100%|##########| 26/26 [00:00<00:00, 36.51it/s]
Test: [   0/  26]	Loss 0.222 (0.222)	test_acc   0.92 (  0.92)	test_minacc   0.94 (  0.94)	test_majacc   0.91 (  0.91)	Loss_d 0.222 (0.222)	test_acc_d   0.92 (  0.92)	test_minacc_d   0.94 (  0.94)	test_majacc_d   0.91 (  0.91)	test_corr_d   0.70 (  0.70)
Test: [  10/  26]	Loss 0.241 (0.219)	test_acc   0.90 (  0.91)	test_minacc   0.79 (  0.84)	test_majacc   0.92 (  0.93)	Loss_d 0.241 (0.219)	test_acc_d   0.90 (  0.91)	test_minacc_d   0.79 (  0.84)	test_majacc_d   0.92 (  0.93)	test_corr_d   0.75 (  0.74)
Test: [  20/  26]	Loss 0.218 (0.216)	test_acc   0.91 (  0.91)	test_minacc   0.84 (  0.83)	test_majacc   0.92 (  0.93)	Loss_d 0.218 (0.216)	test_acc_d   0.91 (  0.91)	test_minacc_d   0.84 (  0.83)	test_majacc_d   0.92 (  0.93)	test_corr_d   0.75 (  0.75)
Test: [  26/  26]	Loss 0.170 (0.213)	test_acc   0.94 (  0.91)	test_minacc   0.89 (  0.83)	test_majacc   0.95 (  0.93)	Loss_d 0.170 (0.213)	test_acc_d   0.94 (  0.91)	test_minacc_d   0.89 (  0.83)	test_majacc_d   0.95 (  0.93)	test_corr_d   0.70 (  0.74)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.30it/s]
Test: [  0/  1]	Loss 2.375 (2.375)	test_acc   0.54 (  0.54)	test_minacc   0.51 (  0.51)	test_majacc   0.87 (  0.87)	Loss_d 2.375 (2.375)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.87 (  0.87)	test_corr_d   0.23 (  0.23)
Test: [  1/  1]	Loss 2.375 (2.375)	test_acc   0.54 (  0.54)	test_minacc   0.51 (  0.51)	test_majacc   0.87 (  0.87)	Loss_d 2.375 (2.375)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.87 (  0.87)	test_corr_d   0.23 (  0.23)
Overall Timing[ 40/  1]	epoch_time 0.0378 (0.0427)	validation_time 0.0003 (0.0006)	train_time 0.0374 (0.0420)
record: (train_acc, test_acc) (0.8996000180244446, 0.6050000190734863)
last accs (train_acc, test_acc) (0.9116000180244446, 0.5440000295639038)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.31it/s] 12%|#1        | 3/26 [00:00<00:01, 13.52it/s] 27%|##6       | 7/26 [00:00<00:00, 23.14it/s] 42%|####2     | 11/26 [00:00<00:00, 27.72it/s] 58%|#####7    | 15/26 [00:00<00:00, 30.41it/s] 73%|#######3  | 19/26 [00:00<00:00, 33.34it/s] 88%|########8 | 23/26 [00:00<00:00, 35.04it/s]100%|##########| 26/26 [00:00<00:00, 28.26it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1066 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1067 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1068 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1069 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1070 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1071 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1072 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1073 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1074 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1075 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1076 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1077 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1078 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1079 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1080 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1081 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1082 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1083 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1084 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1085 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1086 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1087 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1088 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1089 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1090 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1091 400
penalty weights 10000.0
Epoch: [41][  26/  26]	Loss 0.000 (0.001)	train_nll   0.18 (  0.20)	train_penalty   0.00 (  0.00)	weight_norm  25.12 ( 25.11)	train_acc   0.94 (  0.92)	train_minacc   0.95 (  0.85)	train_majacc   0.94 (  0.93)	train_corr   0.00 (  0.00)	l1 8.8738 (9.1392)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 16.81it/s] 27%|##6       | 7/26 [00:00<00:00, 33.89it/s]                                               27%|##6       | 7/26 [00:00<00:00, 33.89it/s] 46%|####6     | 12/26 [00:00<00:00, 39.02it/s] 65%|######5   | 17/26 [00:00<00:00, 41.06it/s]                                                65%|######5   | 17/26 [00:00<00:00, 41.06it/s] 85%|########4 | 22/26 [00:00<00:00, 39.39it/s]100%|##########| 26/26 [00:00<00:00, 36.77it/s]
Test: [   0/  26]	Loss 0.199 (0.199)	test_acc   0.91 (  0.91)	test_minacc   0.91 (  0.91)	test_majacc   0.91 (  0.91)	Loss_d 0.199 (0.199)	test_acc_d   0.91 (  0.91)	test_minacc_d   0.91 (  0.91)	test_majacc_d   0.91 (  0.91)	test_corr_d   0.68 (  0.68)
Test: [  10/  26]	Loss 0.190 (0.181)	test_acc   0.94 (  0.93)	test_minacc   0.91 (  0.92)	test_majacc   0.94 (  0.93)	Loss_d 0.190 (0.181)	test_acc_d   0.94 (  0.93)	test_minacc_d   0.91 (  0.92)	test_majacc_d   0.94 (  0.93)	test_corr_d   0.73 (  0.70)
Test: [  20/  26]	Loss 0.217 (0.186)	test_acc   0.90 (  0.92)	test_minacc   0.95 (  0.91)	test_majacc   0.90 (  0.93)	Loss_d 0.217 (0.186)	test_acc_d   0.90 (  0.92)	test_minacc_d   0.95 (  0.91)	test_majacc_d   0.90 (  0.93)	test_corr_d   0.69 (  0.71)
Test: [  26/  26]	Loss 0.180 (0.189)	test_acc   0.94 (  0.92)	test_minacc   0.95 (  0.91)	test_majacc   0.94 (  0.92)	Loss_d 0.180 (0.189)	test_acc_d   0.94 (  0.92)	test_minacc_d   0.95 (  0.91)	test_majacc_d   0.94 (  0.92)	test_corr_d   0.65 (  0.70)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.84it/s]
Test: [  0/  1]	Loss 1.954 (1.954)	test_acc   0.60 (  0.60)	test_minacc   0.58 (  0.58)	test_majacc   0.83 (  0.83)	Loss_d 1.954 (1.954)	test_acc_d   0.60 (  0.60)	test_minacc_d   0.58 (  0.58)	test_majacc_d   0.83 (  0.83)	test_corr_d   0.08 (  0.08)
Test: [  1/  1]	Loss 1.954 (1.954)	test_acc   0.60 (  0.60)	test_minacc   0.58 (  0.58)	test_majacc   0.83 (  0.83)	Loss_d 1.954 (1.954)	test_acc_d   0.60 (  0.60)	test_minacc_d   0.58 (  0.58)	test_majacc_d   0.83 (  0.83)	test_corr_d   0.08 (  0.08)
Overall Timing[ 41/  1]	epoch_time 0.0488 (0.0428)	validation_time 0.0003 (0.0006)	train_time 0.0485 (0.0422)
record: (train_acc, test_acc) (0.8996000180244446, 0.6050000190734863)
last accs (train_acc, test_acc) (0.9214000234603882, 0.6030000448226929)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.74it/s] 19%|#9        | 5/26 [00:00<00:00, 23.30it/s] 35%|###4      | 9/26 [00:00<00:00, 27.94it/s] 50%|#####     | 13/26 [00:00<00:00, 30.62it/s] 65%|######5   | 17/26 [00:00<00:00, 31.54it/s] 81%|########  | 21/26 [00:00<00:00, 32.69it/s] 96%|#########6| 25/26 [00:00<00:00, 34.31it/s]100%|##########| 26/26 [00:00<00:00, 29.04it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1092 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1093 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1094 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1095 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1096 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1097 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1098 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1099 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1100 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1101 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1102 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1103 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1104 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1105 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1106 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1107 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1108 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1109 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1110 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1111 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1112 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1113 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1114 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1115 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1116 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1117 400
penalty weights 10000.0
Epoch: [42][  26/  26]	Loss 0.000 (0.001)	train_nll   0.17 (  0.20)	train_penalty   0.00 (  0.00)	weight_norm  25.12 ( 25.12)	train_acc   0.94 (  0.92)	train_minacc   0.91 (  0.91)	train_majacc   0.95 (  0.92)	train_corr   0.00 (  0.00)	l1 8.9017 (9.2218)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 15.00it/s] 27%|##6       | 7/26 [00:00<00:00, 31.99it/s]                                               27%|##6       | 7/26 [00:00<00:00, 31.99it/s] 46%|####6     | 12/26 [00:00<00:00, 38.47it/s] 65%|######5   | 17/26 [00:00<00:00, 42.08it/s]                                                65%|######5   | 17/26 [00:00<00:00, 42.08it/s] 85%|########4 | 22/26 [00:00<00:00, 39.42it/s]100%|##########| 26/26 [00:00<00:00, 36.13it/s]
Test: [   0/  26]	Loss 0.203 (0.203)	test_acc   0.91 (  0.91)	test_minacc   0.83 (  0.83)	test_majacc   0.93 (  0.93)	Loss_d 0.203 (0.203)	test_acc_d   0.91 (  0.91)	test_minacc_d   0.83 (  0.83)	test_majacc_d   0.93 (  0.93)	test_corr_d   0.76 (  0.76)
Test: [  10/  26]	Loss 0.187 (0.183)	test_acc   0.93 (  0.93)	test_minacc   0.77 (  0.86)	test_majacc   0.95 (  0.94)	Loss_d 0.187 (0.183)	test_acc_d   0.93 (  0.93)	test_minacc_d   0.77 (  0.86)	test_majacc_d   0.95 (  0.94)	test_corr_d   0.80 (  0.76)
Test: [  20/  26]	Loss 0.200 (0.178)	test_acc   0.92 (  0.93)	test_minacc   0.84 (  0.85)	test_majacc   0.94 (  0.95)	Loss_d 0.200 (0.178)	test_acc_d   0.92 (  0.93)	test_minacc_d   0.84 (  0.85)	test_majacc_d   0.94 (  0.95)	test_corr_d   0.77 (  0.78)
Test: [  26/  26]	Loss 0.176 (0.181)	test_acc   0.94 (  0.93)	test_minacc   0.91 (  0.85)	test_majacc   0.95 (  0.94)	Loss_d 0.176 (0.181)	test_acc_d   0.94 (  0.93)	test_minacc_d   0.91 (  0.85)	test_majacc_d   0.95 (  0.94)	test_corr_d   0.73 (  0.77)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.05it/s]
Test: [  0/  1]	Loss 2.342 (2.342)	test_acc   0.51 (  0.51)	test_minacc   0.47 (  0.47)	test_majacc   0.89 (  0.89)	Loss_d 2.342 (2.342)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.47 (  0.47)	test_majacc_d   0.89 (  0.89)	test_corr_d   0.31 (  0.31)
Test: [  1/  1]	Loss 2.342 (2.342)	test_acc   0.51 (  0.51)	test_minacc   0.47 (  0.47)	test_majacc   0.89 (  0.89)	Loss_d 2.342 (2.342)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.47 (  0.47)	test_majacc_d   0.89 (  0.89)	test_corr_d   0.31 (  0.31)
Overall Timing[ 42/  1]	epoch_time 0.0376 (0.0427)	validation_time 0.0004 (0.0006)	train_time 0.0371 (0.0421)
record: (train_acc, test_acc) (0.8996000180244446, 0.6050000190734863)
last accs (train_acc, test_acc) (0.9310000219345093, 0.5080000162124634)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 19.33it/s] 23%|##3       | 6/26 [00:00<00:00, 28.41it/s] 38%|###8      | 10/26 [00:00<00:00, 31.07it/s] 54%|#####3    | 14/26 [00:00<00:00, 31.79it/s] 69%|######9   | 18/26 [00:00<00:00, 31.89it/s] 85%|########4 | 22/26 [00:00<00:00, 32.81it/s]100%|##########| 26/26 [00:00<00:00, 33.69it/s]100%|##########| 26/26 [00:00<00:00, 29.91it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1118 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1119 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1120 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1121 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1122 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1123 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1124 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1125 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1126 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1127 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1128 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1129 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1130 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1131 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1132 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1133 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1134 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1135 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1136 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1137 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1138 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1139 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1140 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1141 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1142 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1143 400
penalty weights 10000.0
Epoch: [43][  26/  26]	Loss 0.001 (0.001)	train_nll   0.21 (  0.19)	train_penalty   0.00 (  0.00)	weight_norm  25.14 ( 25.13)	train_acc   0.91 (  0.92)	train_minacc   0.86 (  0.85)	train_majacc   0.92 (  0.93)	train_corr   0.00 (  0.00)	l1 9.5402 (9.1232)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 17.67it/s] 27%|##6       | 7/26 [00:00<00:00, 33.73it/s]                                               27%|##6       | 7/26 [00:00<00:00, 33.73it/s] 46%|####6     | 12/26 [00:00<00:00, 39.96it/s] 65%|######5   | 17/26 [00:00<00:00, 42.70it/s]                                                65%|######5   | 17/26 [00:00<00:00, 42.70it/s] 85%|########4 | 22/26 [00:00<00:00, 40.56it/s]100%|##########| 26/26 [00:00<00:00, 37.68it/s]
Test: [   0/  26]	Loss 0.221 (0.221)	test_acc   0.89 (  0.89)	test_minacc   0.83 (  0.83)	test_majacc   0.90 (  0.90)	Loss_d 0.221 (0.221)	test_acc_d   0.89 (  0.89)	test_minacc_d   0.83 (  0.83)	test_majacc_d   0.90 (  0.90)	test_corr_d   0.71 (  0.71)
Test: [  10/  26]	Loss 0.205 (0.219)	test_acc   0.90 (  0.90)	test_minacc   0.79 (  0.85)	test_majacc   0.92 (  0.91)	Loss_d 0.205 (0.219)	test_acc_d   0.90 (  0.90)	test_minacc_d   0.79 (  0.85)	test_majacc_d   0.92 (  0.91)	test_corr_d   0.76 (  0.73)
Test: [  20/  26]	Loss 0.203 (0.209)	test_acc   0.92 (  0.91)	test_minacc   0.93 (  0.84)	test_majacc   0.91 (  0.92)	Loss_d 0.203 (0.209)	test_acc_d   0.92 (  0.91)	test_minacc_d   0.93 (  0.84)	test_majacc_d   0.91 (  0.92)	test_corr_d   0.75 (  0.74)
Test: [  26/  26]	Loss 0.205 (0.208)	test_acc   0.92 (  0.91)	test_minacc   0.89 (  0.85)	test_majacc   0.93 (  0.92)	Loss_d 0.205 (0.208)	test_acc_d   0.92 (  0.91)	test_minacc_d   0.89 (  0.85)	test_majacc_d   0.93 (  0.92)	test_corr_d   0.70 (  0.74)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 65.13it/s]
Test: [  0/  1]	Loss 2.595 (2.595)	test_acc   0.52 (  0.52)	test_minacc   0.48 (  0.48)	test_majacc   0.88 (  0.88)	Loss_d 2.595 (2.595)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.48 (  0.48)	test_majacc_d   0.88 (  0.88)	test_corr_d   0.29 (  0.29)
Test: [  1/  1]	Loss 2.595 (2.595)	test_acc   0.52 (  0.52)	test_minacc   0.48 (  0.48)	test_majacc   0.88 (  0.88)	Loss_d 2.595 (2.595)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.48 (  0.48)	test_majacc_d   0.88 (  0.88)	test_corr_d   0.29 (  0.29)
Overall Timing[ 43/  1]	epoch_time 0.0451 (0.0428)	validation_time 0.0006 (0.0006)	train_time 0.0445 (0.0421)
record: (train_acc, test_acc) (0.8996000180244446, 0.6050000190734863)
last accs (train_acc, test_acc) (0.9077000222802162, 0.5240000486373901)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:06,  4.02it/s] 19%|#9        | 5/26 [00:00<00:01, 15.62it/s] 35%|###4      | 9/26 [00:00<00:00, 21.90it/s] 50%|#####     | 13/26 [00:00<00:00, 26.17it/s] 65%|######5   | 17/26 [00:00<00:00, 29.10it/s] 81%|########  | 21/26 [00:00<00:00, 30.66it/s] 96%|#########6| 25/26 [00:00<00:00, 32.24it/s]100%|##########| 26/26 [00:01<00:00, 25.36it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1144 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1145 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1146 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1147 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1148 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1149 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1150 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1151 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1152 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1153 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1154 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1155 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1156 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1157 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1158 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1159 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1160 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1161 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1162 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1163 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1164 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1165 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1166 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1167 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1168 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1169 400
penalty weights 10000.0
Epoch: [44][  26/  26]	Loss 0.000 (0.000)	train_nll   0.16 (  0.19)	train_penalty   0.00 (  0.00)	weight_norm  25.14 ( 25.13)	train_acc   0.96 (  0.93)	train_minacc   0.93 (  0.87)	train_majacc   0.96 (  0.93)	train_corr   0.00 (  0.00)	l1 9.2328 (9.0810)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:06,  3.60it/s] 19%|#9        | 5/26 [00:00<00:01, 15.27it/s] 38%|###8      | 10/26 [00:00<00:00, 23.90it/s]                                                38%|###8      | 10/26 [00:00<00:00, 23.90it/s] 58%|#####7    | 15/26 [00:00<00:00, 30.42it/s] 77%|#######6  | 20/26 [00:00<00:00, 35.59it/s]                                                77%|#######6  | 20/26 [00:00<00:00, 35.59it/s] 96%|#########6| 25/26 [00:00<00:00, 38.53it/s]100%|##########| 26/26 [00:00<00:00, 28.26it/s]
Test: [   0/  26]	Loss 0.186 (0.186)	test_acc   0.93 (  0.93)	test_minacc   0.94 (  0.94)	test_majacc   0.93 (  0.93)	Loss_d 0.186 (0.186)	test_acc_d   0.93 (  0.93)	test_minacc_d   0.94 (  0.94)	test_majacc_d   0.93 (  0.93)	test_corr_d   0.70 (  0.70)
Test: [  10/  26]	Loss 0.203 (0.188)	test_acc   0.92 (  0.93)	test_minacc   0.84 (  0.90)	test_majacc   0.93 (  0.94)	Loss_d 0.203 (0.188)	test_acc_d   0.92 (  0.93)	test_minacc_d   0.84 (  0.90)	test_majacc_d   0.93 (  0.94)	test_corr_d   0.75 (  0.73)
Test: [  20/  26]	Loss 0.204 (0.193)	test_acc   0.93 (  0.93)	test_minacc   0.93 (  0.89)	test_majacc   0.93 (  0.93)	Loss_d 0.204 (0.193)	test_acc_d   0.93 (  0.93)	test_minacc_d   0.93 (  0.89)	test_majacc_d   0.93 (  0.93)	test_corr_d   0.73 (  0.74)
Test: [  26/  26]	Loss 0.160 (0.192)	test_acc   0.95 (  0.93)	test_minacc   0.93 (  0.89)	test_majacc   0.96 (  0.93)	Loss_d 0.160 (0.192)	test_acc_d   0.95 (  0.93)	test_minacc_d   0.93 (  0.89)	test_majacc_d   0.96 (  0.93)	test_corr_d   0.69 (  0.73)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 64.84it/s]
Test: [  0/  1]	Loss 2.097 (2.097)	test_acc   0.58 (  0.58)	test_minacc   0.55 (  0.55)	test_majacc   0.88 (  0.88)	Loss_d 2.097 (2.097)	test_acc_d   0.58 (  0.58)	test_minacc_d   0.55 (  0.55)	test_majacc_d   0.88 (  0.88)	test_corr_d   0.15 (  0.15)
Test: [  1/  1]	Loss 2.097 (2.097)	test_acc   0.58 (  0.58)	test_minacc   0.55 (  0.55)	test_majacc   0.88 (  0.88)	Loss_d 2.097 (2.097)	test_acc_d   0.58 (  0.58)	test_minacc_d   0.55 (  0.55)	test_majacc_d   0.88 (  0.88)	test_corr_d   0.15 (  0.15)
Overall Timing[ 44/  1]	epoch_time 0.0434 (0.0428)	validation_time 0.0004 (0.0006)	train_time 0.0429 (0.0422)
record: (train_acc, test_acc) (0.8996000180244446, 0.6050000190734863)
last accs (train_acc, test_acc) (0.9270000164508819, 0.5830000042915344)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:05,  4.22it/s] 19%|#9        | 5/26 [00:00<00:01, 16.66it/s] 31%|###       | 8/26 [00:00<00:00, 20.90it/s] 46%|####6     | 12/26 [00:00<00:00, 25.64it/s] 62%|######1   | 16/26 [00:00<00:00, 27.87it/s] 77%|#######6  | 20/26 [00:00<00:00, 29.83it/s] 92%|#########2| 24/26 [00:00<00:00, 31.66it/s]100%|##########| 26/26 [00:01<00:00, 24.98it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1170 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1171 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1172 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1173 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1174 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1175 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1176 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1177 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1178 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1179 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1180 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1181 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1182 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1183 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1184 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1185 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1186 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1187 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1188 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1189 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1190 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1191 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1192 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1193 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1194 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1195 400
penalty weights 10000.0
Epoch: [45][  26/  26]	Loss 0.000 (0.000)	train_nll   0.18 (  0.20)	train_penalty   0.00 (  0.00)	weight_norm  25.14 ( 25.14)	train_acc   0.95 (  0.93)	train_minacc   0.95 (  0.89)	train_majacc   0.95 (  0.93)	train_corr   0.00 (  0.00)	l1 8.9172 (9.2888)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 15.95it/s] 27%|##6       | 7/26 [00:00<00:00, 32.59it/s]                                               27%|##6       | 7/26 [00:00<00:00, 32.59it/s] 46%|####6     | 12/26 [00:00<00:00, 38.70it/s] 65%|######5   | 17/26 [00:00<00:00, 41.23it/s]                                                65%|######5   | 17/26 [00:00<00:00, 41.23it/s] 85%|########4 | 22/26 [00:00<00:00, 40.48it/s]100%|##########| 26/26 [00:00<00:00, 37.53it/s]
Test: [   0/  26]	Loss 0.188 (0.188)	test_acc   0.92 (  0.92)	test_minacc   0.92 (  0.92)	test_majacc   0.92 (  0.92)	Loss_d 0.188 (0.188)	test_acc_d   0.92 (  0.92)	test_minacc_d   0.92 (  0.92)	test_majacc_d   0.92 (  0.92)	test_corr_d   0.71 (  0.71)
Test: [  10/  26]	Loss 0.167 (0.176)	test_acc   0.94 (  0.93)	test_minacc   0.91 (  0.91)	test_majacc   0.95 (  0.93)	Loss_d 0.167 (0.176)	test_acc_d   0.94 (  0.93)	test_minacc_d   0.91 (  0.91)	test_majacc_d   0.95 (  0.93)	test_corr_d   0.77 (  0.73)
Test: [  20/  26]	Loss 0.204 (0.177)	test_acc   0.91 (  0.93)	test_minacc   0.95 (  0.91)	test_majacc   0.90 (  0.93)	Loss_d 0.204 (0.177)	test_acc_d   0.91 (  0.93)	test_minacc_d   0.95 (  0.91)	test_majacc_d   0.90 (  0.93)	test_corr_d   0.73 (  0.74)
Test: [  26/  26]	Loss 0.178 (0.181)	test_acc   0.95 (  0.93)	test_minacc   0.95 (  0.91)	test_majacc   0.95 (  0.93)	Loss_d 0.178 (0.181)	test_acc_d   0.95 (  0.93)	test_minacc_d   0.95 (  0.91)	test_majacc_d   0.95 (  0.93)	test_corr_d   0.69 (  0.74)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.80it/s]
Test: [  0/  1]	Loss 2.033 (2.033)	test_acc   0.60 (  0.60)	test_minacc   0.57 (  0.57)	test_majacc   0.85 (  0.85)	Loss_d 2.033 (2.033)	test_acc_d   0.60 (  0.60)	test_minacc_d   0.57 (  0.57)	test_majacc_d   0.85 (  0.85)	test_corr_d   0.15 (  0.15)
Test: [  1/  1]	Loss 2.033 (2.033)	test_acc   0.60 (  0.60)	test_minacc   0.57 (  0.57)	test_majacc   0.85 (  0.85)	Loss_d 2.033 (2.033)	test_acc_d   0.60 (  0.60)	test_minacc_d   0.57 (  0.57)	test_majacc_d   0.85 (  0.85)	test_corr_d   0.15 (  0.15)
Overall Timing[ 45/  1]	epoch_time 0.0423 (0.0428)	validation_time 0.0003 (0.0006)	train_time 0.0420 (0.0422)
record: (train_acc, test_acc) (0.8996000180244446, 0.6050000190734863)
last accs (train_acc, test_acc) (0.9275000153779983, 0.597000002861023)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.85it/s] 19%|#9        | 5/26 [00:00<00:01, 20.70it/s] 35%|###4      | 9/26 [00:00<00:00, 27.51it/s] 50%|#####     | 13/26 [00:00<00:00, 30.51it/s] 65%|######5   | 17/26 [00:00<00:00, 31.93it/s] 81%|########  | 21/26 [00:00<00:00, 32.74it/s] 96%|#########6| 25/26 [00:00<00:00, 33.48it/s]100%|##########| 26/26 [00:00<00:00, 28.38it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1196 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1197 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1198 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1199 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1200 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1201 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1202 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1203 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1204 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1205 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1206 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1207 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1208 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1209 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1210 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1211 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1212 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1213 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1214 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1215 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1216 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1217 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1218 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1219 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1220 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1221 400
penalty weights 10000.0
Epoch: [46][  26/  26]	Loss 0.000 (0.001)	train_nll   0.19 (  0.19)	train_penalty   0.00 (  0.00)	weight_norm  25.15 ( 25.15)	train_acc   0.94 (  0.92)	train_minacc   0.89 (  0.90)	train_majacc   0.95 (  0.92)	train_corr   0.00 (  0.00)	l1 9.3931 (9.3485)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.06it/s] 15%|#5        | 4/26 [00:00<00:01, 20.70it/s] 38%|###8      | 10/26 [00:00<00:00, 36.77it/s]                                                38%|###8      | 10/26 [00:00<00:00, 36.77it/s] 58%|#####7    | 15/26 [00:00<00:00, 36.86it/s] 77%|#######6  | 20/26 [00:00<00:00, 39.70it/s]                                                77%|#######6  | 20/26 [00:00<00:00, 39.70it/s] 96%|#########6| 25/26 [00:00<00:00, 41.66it/s]100%|##########| 26/26 [00:00<00:00, 34.68it/s]
Test: [   0/  26]	Loss 0.203 (0.203)	test_acc   0.93 (  0.93)	test_minacc   0.89 (  0.89)	test_majacc   0.93 (  0.93)	Loss_d 0.203 (0.203)	test_acc_d   0.93 (  0.93)	test_minacc_d   0.89 (  0.89)	test_majacc_d   0.93 (  0.93)	test_corr_d   0.74 (  0.74)
Test: [  10/  26]	Loss 0.194 (0.194)	test_acc   0.93 (  0.93)	test_minacc   0.75 (  0.86)	test_majacc   0.96 (  0.94)	Loss_d 0.194 (0.194)	test_acc_d   0.93 (  0.93)	test_minacc_d   0.75 (  0.86)	test_majacc_d   0.96 (  0.94)	test_corr_d   0.81 (  0.77)
Test: [  20/  26]	Loss 0.201 (0.187)	test_acc   0.93 (  0.93)	test_minacc   0.89 (  0.85)	test_majacc   0.94 (  0.95)	Loss_d 0.201 (0.187)	test_acc_d   0.93 (  0.93)	test_minacc_d   0.89 (  0.85)	test_majacc_d   0.94 (  0.95)	test_corr_d   0.77 (  0.78)
Test: [  26/  26]	Loss 0.187 (0.188)	test_acc   0.95 (  0.93)	test_minacc   0.91 (  0.85)	test_majacc   0.96 (  0.94)	Loss_d 0.187 (0.188)	test_acc_d   0.95 (  0.93)	test_minacc_d   0.91 (  0.85)	test_majacc_d   0.96 (  0.94)	test_corr_d   0.72 (  0.77)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.74it/s]
Test: [  0/  1]	Loss 2.364 (2.364)	test_acc   0.53 (  0.53)	test_minacc   0.49 (  0.49)	test_majacc   0.88 (  0.88)	Loss_d 2.364 (2.364)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.49 (  0.49)	test_majacc_d   0.88 (  0.88)	test_corr_d   0.29 (  0.29)
Test: [  1/  1]	Loss 2.364 (2.364)	test_acc   0.53 (  0.53)	test_minacc   0.49 (  0.49)	test_majacc   0.88 (  0.88)	Loss_d 2.364 (2.364)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.49 (  0.49)	test_majacc_d   0.88 (  0.88)	test_corr_d   0.29 (  0.29)
Overall Timing[ 46/  1]	epoch_time 0.0400 (0.0427)	validation_time 0.0004 (0.0006)	train_time 0.0395 (0.0421)
record: (train_acc, test_acc) (0.8996000180244446, 0.6050000190734863)
last accs (train_acc, test_acc) (0.9308000256419182, 0.5250000357627869)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:06,  3.90it/s] 19%|#9        | 5/26 [00:00<00:01, 15.75it/s] 35%|###4      | 9/26 [00:00<00:00, 21.89it/s] 50%|#####     | 13/26 [00:00<00:00, 26.24it/s] 65%|######5   | 17/26 [00:00<00:00, 28.82it/s] 81%|########  | 21/26 [00:00<00:00, 30.92it/s] 96%|#########6| 25/26 [00:00<00:00, 32.01it/s]100%|##########| 26/26 [00:01<00:00, 24.88it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1222 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1223 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1224 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1225 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1226 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1227 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1228 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1229 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1230 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1231 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1232 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1233 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1234 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1235 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1236 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1237 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1238 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1239 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1240 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1241 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1242 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1243 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1244 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1245 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1246 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1247 400
penalty weights 10000.0
Epoch: [47][  26/  26]	Loss 0.000 (0.001)	train_nll   0.18 (  0.18)	train_penalty   0.00 (  0.00)	weight_norm  25.16 ( 25.15)	train_acc   0.93 (  0.93)	train_minacc   0.91 (  0.85)	train_majacc   0.94 (  0.94)	train_corr   0.00 (  0.00)	l1 9.3326 (9.0336)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.35it/s] 23%|##3       | 6/26 [00:00<00:00, 24.24it/s]                                               23%|##3       | 6/26 [00:00<00:00, 24.24it/s] 42%|####2     | 11/26 [00:00<00:00, 32.56it/s] 62%|######1   | 16/26 [00:00<00:00, 37.55it/s]                                                62%|######1   | 16/26 [00:00<00:00, 37.55it/s] 81%|########  | 21/26 [00:00<00:00, 37.04it/s]100%|##########| 26/26 [00:00<00:00, 40.42it/s]100%|##########| 26/26 [00:00<00:00, 32.01it/s]
Test: [   0/  26]	Loss 0.214 (0.214)	test_acc   0.90 (  0.90)	test_minacc   0.89 (  0.89)	test_majacc   0.90 (  0.90)	Loss_d 0.214 (0.214)	test_acc_d   0.90 (  0.90)	test_minacc_d   0.89 (  0.89)	test_majacc_d   0.90 (  0.90)	test_corr_d   0.70 (  0.70)
Test: [  10/  26]	Loss 0.192 (0.197)	test_acc   0.91 (  0.91)	test_minacc   0.82 (  0.89)	test_majacc   0.93 (  0.92)	Loss_d 0.192 (0.197)	test_acc_d   0.91 (  0.91)	test_minacc_d   0.82 (  0.89)	test_majacc_d   0.93 (  0.92)	test_corr_d   0.76 (  0.73)
Test: [  20/  26]	Loss 0.206 (0.197)	test_acc   0.89 (  0.91)	test_minacc   0.87 (  0.87)	test_majacc   0.89 (  0.92)	Loss_d 0.206 (0.197)	test_acc_d   0.89 (  0.91)	test_minacc_d   0.87 (  0.87)	test_majacc_d   0.89 (  0.92)	test_corr_d   0.74 (  0.74)
Test: [  26/  26]	Loss 0.184 (0.196)	test_acc   0.92 (  0.91)	test_minacc   0.91 (  0.87)	test_majacc   0.93 (  0.92)	Loss_d 0.184 (0.196)	test_acc_d   0.92 (  0.91)	test_minacc_d   0.91 (  0.87)	test_majacc_d   0.93 (  0.92)	test_corr_d   0.69 (  0.74)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 64.20it/s]
Test: [  0/  1]	Loss 2.398 (2.398)	test_acc   0.56 (  0.56)	test_minacc   0.53 (  0.53)	test_majacc   0.86 (  0.86)	Loss_d 2.398 (2.398)	test_acc_d   0.56 (  0.56)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.86 (  0.86)	test_corr_d   0.23 (  0.23)
Test: [  1/  1]	Loss 2.398 (2.398)	test_acc   0.56 (  0.56)	test_minacc   0.53 (  0.53)	test_majacc   0.86 (  0.86)	Loss_d 2.398 (2.398)	test_acc_d   0.56 (  0.56)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.86 (  0.86)	test_corr_d   0.23 (  0.23)
Overall Timing[ 47/  1]	epoch_time 0.0403 (0.0427)	validation_time 0.0003 (0.0006)	train_time 0.0399 (0.0420)
record: (train_acc, test_acc) (0.8996000180244446, 0.6050000190734863)
last accs (train_acc, test_acc) (0.9094000186920166, 0.5590000152587891)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.82it/s] 19%|#9        | 5/26 [00:00<00:00, 25.59it/s] 35%|###4      | 9/26 [00:00<00:00, 30.56it/s] 50%|#####     | 13/26 [00:00<00:00, 32.92it/s] 65%|######5   | 17/26 [00:00<00:00, 34.03it/s] 81%|########  | 21/26 [00:00<00:00, 34.59it/s] 96%|#########6| 25/26 [00:00<00:00, 34.48it/s]100%|##########| 26/26 [00:00<00:00, 29.82it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1248 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1249 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1250 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1251 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1252 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1253 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1254 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1255 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1256 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1257 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1258 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1259 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1260 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1261 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1262 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1263 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1264 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1265 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1266 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1267 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1268 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1269 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1270 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1271 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1272 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1273 400
penalty weights 10000.0
Epoch: [48][  26/  26]	Loss 0.000 (0.000)	train_nll   0.17 (  0.19)	train_penalty   0.00 (  0.00)	weight_norm  25.16 ( 25.16)	train_acc   0.95 (  0.92)	train_minacc   0.93 (  0.87)	train_majacc   0.96 (  0.93)	train_corr   0.00 (  0.00)	l1 9.1583 (9.3320)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 17.33it/s] 27%|##6       | 7/26 [00:00<00:00, 33.84it/s]                                               27%|##6       | 7/26 [00:00<00:00, 33.84it/s] 46%|####6     | 12/26 [00:00<00:00, 39.70it/s] 65%|######5   | 17/26 [00:00<00:00, 38.93it/s]                                                65%|######5   | 17/26 [00:00<00:00, 38.93it/s] 85%|########4 | 22/26 [00:00<00:00, 41.08it/s]100%|##########| 26/26 [00:00<00:00, 36.68it/s]
Test: [   0/  26]	Loss 0.183 (0.183)	test_acc   0.92 (  0.92)	test_minacc   0.91 (  0.91)	test_majacc   0.93 (  0.93)	Loss_d 0.183 (0.183)	test_acc_d   0.92 (  0.92)	test_minacc_d   0.91 (  0.91)	test_majacc_d   0.93 (  0.93)	test_corr_d   0.73 (  0.73)
Test: [  10/  26]	Loss 0.168 (0.171)	test_acc   0.94 (  0.94)	test_minacc   0.88 (  0.90)	test_majacc   0.95 (  0.94)	Loss_d 0.168 (0.171)	test_acc_d   0.94 (  0.94)	test_minacc_d   0.88 (  0.90)	test_majacc_d   0.95 (  0.94)	test_corr_d   0.78 (  0.75)
Test: [  20/  26]	Loss 0.191 (0.173)	test_acc   0.91 (  0.93)	test_minacc   0.85 (  0.89)	test_majacc   0.92 (  0.94)	Loss_d 0.191 (0.173)	test_acc_d   0.91 (  0.93)	test_minacc_d   0.85 (  0.89)	test_majacc_d   0.92 (  0.94)	test_corr_d   0.76 (  0.76)
Test: [  26/  26]	Loss 0.169 (0.175)	test_acc   0.95 (  0.93)	test_minacc   0.93 (  0.89)	test_majacc   0.96 (  0.94)	Loss_d 0.169 (0.175)	test_acc_d   0.95 (  0.93)	test_minacc_d   0.93 (  0.89)	test_majacc_d   0.96 (  0.94)	test_corr_d   0.71 (  0.76)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.02it/s]
Test: [  0/  1]	Loss 2.279 (2.279)	test_acc   0.56 (  0.56)	test_minacc   0.53 (  0.53)	test_majacc   0.88 (  0.88)	Loss_d 2.279 (2.279)	test_acc_d   0.56 (  0.56)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.88 (  0.88)	test_corr_d   0.23 (  0.23)
Test: [  1/  1]	Loss 2.279 (2.279)	test_acc   0.56 (  0.56)	test_minacc   0.53 (  0.53)	test_majacc   0.88 (  0.88)	Loss_d 2.279 (2.279)	test_acc_d   0.56 (  0.56)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.88 (  0.88)	test_corr_d   0.23 (  0.23)
Overall Timing[ 48/  1]	epoch_time 0.0420 (0.0427)	validation_time 0.0006 (0.0006)	train_time 0.0413 (0.0420)
record: (train_acc, test_acc) (0.8996000180244446, 0.6050000190734863)
last accs (train_acc, test_acc) (0.9298000186085701, 0.5649999976158142)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:07,  3.33it/s] 19%|#9        | 5/26 [00:00<00:01, 14.20it/s] 35%|###4      | 9/26 [00:00<00:00, 20.71it/s] 50%|#####     | 13/26 [00:00<00:00, 24.77it/s] 65%|######5   | 17/26 [00:00<00:00, 27.47it/s] 81%|########  | 21/26 [00:00<00:00, 29.74it/s] 96%|#########6| 25/26 [00:01<00:00, 31.13it/s]100%|##########| 26/26 [00:01<00:00, 23.65it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1274 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1275 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1276 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1277 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1278 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1279 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1280 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1281 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1282 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1283 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1284 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1285 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1286 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1287 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1288 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1289 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1290 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1291 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1292 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1293 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1294 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1295 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1296 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1297 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1298 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1299 400
penalty weights 10000.0
Epoch: [49][  26/  26]	Loss 0.000 (0.000)	train_nll   0.19 (  0.18)	train_penalty   0.00 (  0.00)	weight_norm  25.16 ( 25.16)	train_acc   0.94 (  0.92)	train_minacc   0.89 (  0.90)	train_majacc   0.96 (  0.93)	train_corr   0.00 (  0.00)	l1 9.5816 (9.5041)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.46it/s] 15%|#5        | 4/26 [00:00<00:01, 18.29it/s] 35%|###4      | 9/26 [00:00<00:00, 30.77it/s]                                               35%|###4      | 9/26 [00:00<00:00, 30.77it/s] 54%|#####3    | 14/26 [00:00<00:00, 36.95it/s] 73%|#######3  | 19/26 [00:00<00:00, 36.67it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 36.67it/s] 92%|#########2| 24/26 [00:00<00:00, 40.57it/s]100%|##########| 26/26 [00:00<00:00, 33.73it/s]
Test: [   0/  26]	Loss 0.201 (0.201)	test_acc   0.92 (  0.92)	test_minacc   0.91 (  0.91)	test_majacc   0.92 (  0.92)	Loss_d 0.201 (0.201)	test_acc_d   0.92 (  0.92)	test_minacc_d   0.91 (  0.91)	test_majacc_d   0.92 (  0.92)	test_corr_d   0.73 (  0.73)
Test: [  10/  26]	Loss 0.182 (0.187)	test_acc   0.94 (  0.93)	test_minacc   0.82 (  0.89)	test_majacc   0.96 (  0.94)	Loss_d 0.182 (0.187)	test_acc_d   0.94 (  0.93)	test_minacc_d   0.82 (  0.89)	test_majacc_d   0.96 (  0.94)	test_corr_d   0.79 (  0.75)
Test: [  20/  26]	Loss 0.196 (0.184)	test_acc   0.92 (  0.93)	test_minacc   0.87 (  0.87)	test_majacc   0.93 (  0.94)	Loss_d 0.196 (0.184)	test_acc_d   0.92 (  0.93)	test_minacc_d   0.87 (  0.87)	test_majacc_d   0.93 (  0.94)	test_corr_d   0.77 (  0.77)
Test: [  26/  26]	Loss 0.186 (0.185)	test_acc   0.94 (  0.93)	test_minacc   0.89 (  0.87)	test_majacc   0.96 (  0.94)	Loss_d 0.186 (0.185)	test_acc_d   0.94 (  0.93)	test_minacc_d   0.89 (  0.87)	test_majacc_d   0.96 (  0.94)	test_corr_d   0.71 (  0.76)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.78it/s]
Test: [  0/  1]	Loss 2.380 (2.380)	test_acc   0.57 (  0.57)	test_minacc   0.54 (  0.54)	test_majacc   0.88 (  0.88)	Loss_d 2.380 (2.380)	test_acc_d   0.57 (  0.57)	test_minacc_d   0.54 (  0.54)	test_majacc_d   0.88 (  0.88)	test_corr_d   0.23 (  0.23)
Test: [  1/  1]	Loss 2.380 (2.380)	test_acc   0.57 (  0.57)	test_minacc   0.54 (  0.54)	test_majacc   0.88 (  0.88)	Loss_d 2.380 (2.380)	test_acc_d   0.57 (  0.57)	test_minacc_d   0.54 (  0.54)	test_majacc_d   0.88 (  0.88)	test_corr_d   0.23 (  0.23)
Overall Timing[ 49/  1]	epoch_time 0.0422 (0.0426)	validation_time 0.0005 (0.0006)	train_time 0.0416 (0.0420)
record: (train_acc, test_acc) (0.8996000180244446, 0.6050000190734863)
last accs (train_acc, test_acc) (0.927500020980835, 0.5700000524520874)
done saving aggregate.csv to ./aggregate.csv
wandb: - 0.164 MB of 0.164 MB uploadedwandb: \ 0.164 MB of 0.164 MB uploadedwandb: | 0.164 MB of 0.164 MB uploadedwandb: / 0.164 MB of 0.164 MB uploadedwandb: - 0.164 MB of 0.164 MB uploadedwandb: \ 0.043 MB of 0.471 MB uploaded (0.003 MB deduped)wandb: 
wandb: Run history:
wandb:                                                                            global_step ▁▁▁▁▂▂▂▂▂▃▃▃▃▃▃▄▄▄▄▄▅▅▅▅▅▅▆▆▆▆▆▆▇▇▇▇▇███
wandb:      resnet18-usc-unsigned/baseline/prune_rate=1.0/142/logs/diagnostics/epoch_time_val █▁▁▂▂▁▂▂▂▁▂▂▂▂▁▂▂▂▂▂▂▂▂▂▂▂▂▂▂▁▂▂▁▃▁▂▂▂▂▂
wandb:      resnet18-usc-unsigned/baseline/prune_rate=1.0/142/logs/diagnostics/train_time_val █▁▂▂▂▂▂▂▂▁▂▂▂▂▁▂▂▂▂▂▂▂▂▂▂▂▂▂▂▁▂▂▁▃▁▂▂▂▂▂
wandb: resnet18-usc-unsigned/baseline/prune_rate=1.0/142/logs/diagnostics/validation_time_val █▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:                     resnet18-usc-unsigned/baseline/prune_rate=1.0/142/logs/global_step ▁▁▁▁▂▂▂▂▂▃▃▃▃▃▃▄▄▄▄▄▅▅▅▅▅▅▆▆▆▆▆▆▇▇▇▇▇███
wandb:                   resnet18-usc-unsigned/baseline/prune_rate=1.0/142/logs/test/Loss_avg ▃▃▁▂▁▁▁▁▃▄▆▅▅▃▄▄▃▃▄▅▅▄▅▆▅▆▆▅▆█▅▅▇▅▇█▅▇▇▇
wandb:                 resnet18-usc-unsigned/baseline/prune_rate=1.0/142/logs/test/Loss_d_avg ▃▃▁▂▁▁▁▁▃▄▆▅▅▃▄▄▃▃▄▅▅▄▅▆▅▆▆▅▆█▅▅▇▅▇█▅▇▇▇
wandb:                 resnet18-usc-unsigned/baseline/prune_rate=1.0/142/logs/test/Loss_d_val ▃▃▁▂▁▁▁▁▃▄▆▅▅▃▄▄▃▃▄▅▅▄▅▆▅▆▆▅▆█▅▅▇▅▇█▅▇▇▇
wandb:                   resnet18-usc-unsigned/baseline/prune_rate=1.0/142/logs/test/Loss_val ▃▃▁▂▁▁▁▁▃▄▆▅▅▃▄▄▃▃▄▅▅▄▅▆▅▆▆▅▆█▅▅▇▅▇█▅▇▇▇
wandb:               resnet18-usc-unsigned/baseline/prune_rate=1.0/142/logs/test/test_acc_avg ▁▁▃▃▆▆▇▇▇▆▅▆▆▇▆▇▇██▆▇█▇▇▇▇▇▇▇▇▇▇▇█▇▇█▇▇▇
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/142/logs/test/test_acc_d_avg ▁▁▃▃▆▆▇▇▇▆▅▆▆▇▆▇▇██▆▇█▇▇▇▇▇▇▇▇▇▇▇█▇▇█▇▇▇
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/142/logs/test/test_acc_d_val ▁▁▃▃▆▆▇▇▇▆▅▆▆▇▆▇▇██▆▇█▇▇▇▇▇▇▇▇▇▇▇█▇▇█▇▇▇
wandb:               resnet18-usc-unsigned/baseline/prune_rate=1.0/142/logs/test/test_acc_val ▁▁▃▃▆▆▇▇▇▆▅▆▆▇▆▇▇██▆▇█▇▇▇▇▇▇▇▇▇▇▇█▇▇█▇▇▇
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/142/logs/test/test_corr_d_avg ██▆▇▄▄▃▂▃▃▄▃▃▂▄▃▂▁▂▃▂▂▃▂▂▃▃▂▃▃▂▂▃▁▃▃▂▃▃▃
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/142/logs/test/test_corr_d_val ██▆▇▄▄▃▂▃▃▄▃▃▂▄▃▂▁▂▃▂▂▃▂▂▃▃▂▃▃▂▂▃▁▃▃▂▃▃▃
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/142/logs/test/test_majacc_avg ██▇█▆▅▆▃▃▃▅▅▄▃▄▃▃▃▃▄▄▅▄▂▄▅▃▃▅▃▃▄▃▁▃▃▂▃▂▃
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/142/logs/test/test_majacc_d_avg ██▇█▆▅▆▃▃▃▅▅▄▃▄▃▃▃▃▄▄▅▄▂▄▅▃▃▅▃▃▄▃▁▃▃▂▃▂▃
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/142/logs/test/test_majacc_d_val ██▇█▆▅▆▃▃▃▅▅▄▃▄▃▃▃▃▄▄▅▄▂▄▅▃▃▅▃▃▄▃▁▃▃▂▃▂▃
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/142/logs/test/test_majacc_val ██▇█▆▅▆▃▃▃▅▅▄▃▄▃▃▃▃▄▄▅▄▂▄▅▃▃▅▃▃▄▃▁▃▃▂▃▂▃
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/142/logs/test/test_minacc_avg ▁▁▃▂▆▆▇▇▇▆▅▆▆▇▆▇▇█▇▆▇█▇▇▇▇▇▇▇▇▇▇▇█▇▇█▇▇▇
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/142/logs/test/test_minacc_d_avg ▁▁▃▂▆▆▇▇▇▆▅▆▆▇▆▇▇█▇▆▇█▇▇▇▇▇▇▇▇▇▇▇█▇▇█▇▇▇
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/142/logs/test/test_minacc_d_val ▁▁▃▂▆▆▇▇▇▆▅▆▆▇▆▇▇█▇▆▇█▇▇▇▇▇▇▇▇▇▇▇█▇▇█▇▇▇
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/142/logs/test/test_minacc_val ▁▁▃▂▆▆▇▇▇▆▅▆▆▇▆▇▇█▇▆▇█▇▇▇▇▇▇▇▇▇▇▇█▇▇█▇▇▇
wandb:                  resnet18-usc-unsigned/baseline/prune_rate=1.0/142/logs/train/Loss_avg █▆▆▆▅▅▅▅▄▄▄▄▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:                  resnet18-usc-unsigned/baseline/prune_rate=1.0/142/logs/train/Loss_val ███▇▆▆▅▅▄▄▄▄▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:                    resnet18-usc-unsigned/baseline/prune_rate=1.0/142/logs/train/l1_avg ▂▂▂▂▂▂▂▁▁▂▂▃▇▂▁▂▂▃▄▅▄▄▅▅▅▆▅▆▇▆▆▆▆▇▇▇▇▇▆█
wandb:                    resnet18-usc-unsigned/baseline/prune_rate=1.0/142/logs/train/l1_val ▂▃▃▃▃▃▂▂▂▂▃▄▄▂▁▂▃▄▄▄▅▄▄▇▅▅▆▆▅▇▆▆▇▆▆█▆▇▇█
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/142/logs/train/train_acc_avg ▁▃▃▃▄▄▅▅▆▆▇▇█▅▅▆▆▇▇▇▇▆▆▇▇▇▇█▇██▇█▇▇▇█▇██
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/142/logs/train/train_acc_val ▁▁▁▂▄▄▅▅▆▇▇▆▇▄▆▄▇▆▇▆▆▆▆▅▇▆▅▇▇▅█▇▇▇▇▆█▇▇▇
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/142/logs/train/train_corr_avg ▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/142/logs/train/train_corr_val ▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/142/logs/train/train_majacc_avg ▅██▇▆▆▆▆▆▅▆▆▆▁▂▃▃▃▃▃▄▃▂▄▃▃▄▄▃▅▄▄▅▄▃▄▄▃▅▄
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/142/logs/train/train_majacc_val █▇▆▇▅▆▃▃▅▇▇▆▆▁▅▂▃▂▄▅▃▃▄▃▄▄▂▅▅▃▆▅▅▄▅▃▅▅▄▅
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/142/logs/train/train_minacc_avg ▁▁▁▂▃▄▄▄▅▅▆▆▇▇▇▇▇███▇█▇▇▇█▇▇█▇██▇███████
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/142/logs/train/train_minacc_val ▁▁▂▂▄▅▇▆▇▆▇▆▇▆▆▇███▇█▇▇▇█▇▇█▇▇█████▇█▇█▇
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/142/logs/train/train_nll_avg █▆▅▅▄▄▃▃▃▂▂▂▁▃▃▂▂▂▂▂▂▂▂▁▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/142/logs/train/train_nll_val ██▇▆▅▅▄▄▃▂▂▂▁▄▃▃▂▂▁▂▂▂▃▃▁▂▃▁▂▃▁▁▁▂▂▂▂▂▂▂
wandb:         resnet18-usc-unsigned/baseline/prune_rate=1.0/142/logs/train/train_penalty_avg █▃▃▂▂▂▂▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:         resnet18-usc-unsigned/baseline/prune_rate=1.0/142/logs/train/train_penalty_val █▆▆▅▂▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:           resnet18-usc-unsigned/baseline/prune_rate=1.0/142/logs/train/weight_norm_avg ▁▅▅▅▅▅▅▆▆▆▆▇████████████████████████████
wandb:           resnet18-usc-unsigned/baseline/prune_rate=1.0/142/logs/train/weight_norm_val ▁▃▃▃▃▄▄▄▅▅▆▆████████████████████████████
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/142/logs/train/zero_count_avg ▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/142/logs/train/zero_count_val ▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb: 
wandb: Run summary:
wandb:                                                                            global_step 49
wandb:      resnet18-usc-unsigned/baseline/prune_rate=1.0/142/logs/diagnostics/epoch_time_val 0.04217
wandb:      resnet18-usc-unsigned/baseline/prune_rate=1.0/142/logs/diagnostics/train_time_val 0.04165
wandb: resnet18-usc-unsigned/baseline/prune_rate=1.0/142/logs/diagnostics/validation_time_val 0.00051
wandb:                     resnet18-usc-unsigned/baseline/prune_rate=1.0/142/logs/global_step 49
wandb:                   resnet18-usc-unsigned/baseline/prune_rate=1.0/142/logs/test/Loss_avg 2.38017
wandb:                 resnet18-usc-unsigned/baseline/prune_rate=1.0/142/logs/test/Loss_d_avg 2.38017
wandb:                 resnet18-usc-unsigned/baseline/prune_rate=1.0/142/logs/test/Loss_d_val 2.38017
wandb:                   resnet18-usc-unsigned/baseline/prune_rate=1.0/142/logs/test/Loss_val 2.38017
wandb:               resnet18-usc-unsigned/baseline/prune_rate=1.0/142/logs/test/test_acc_avg 0.57
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/142/logs/test/test_acc_d_avg 0.57
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/142/logs/test/test_acc_d_val 0.57
wandb:               resnet18-usc-unsigned/baseline/prune_rate=1.0/142/logs/test/test_acc_val 0.57
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/142/logs/test/test_corr_d_avg 0.2253
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/142/logs/test/test_corr_d_val 0.2253
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/142/logs/test/test_majacc_avg 0.88
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/142/logs/test/test_majacc_d_avg 0.88
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/142/logs/test/test_majacc_d_val 0.88
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/142/logs/test/test_majacc_val 0.88
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/142/logs/test/test_minacc_avg 0.53556
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/142/logs/test/test_minacc_d_avg 0.53556
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/142/logs/test/test_minacc_d_val 0.53556
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/142/logs/test/test_minacc_val 0.53556
wandb:                  resnet18-usc-unsigned/baseline/prune_rate=1.0/142/logs/train/Loss_avg 0.00026
wandb:                  resnet18-usc-unsigned/baseline/prune_rate=1.0/142/logs/train/Loss_val 0.00045
wandb:                    resnet18-usc-unsigned/baseline/prune_rate=1.0/142/logs/train/l1_avg 9.50409
wandb:                    resnet18-usc-unsigned/baseline/prune_rate=1.0/142/logs/train/l1_val 9.58155
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/142/logs/train/train_acc_avg 0.9242
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/142/logs/train/train_acc_val 0.944
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/142/logs/train/train_corr_avg 0.0
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/142/logs/train/train_corr_val 0.0
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/142/logs/train/train_majacc_avg 0.92892
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/142/logs/train/train_majacc_val 0.95631
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/142/logs/train/train_minacc_avg 0.89594
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/142/logs/train/train_minacc_val 0.88636
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/142/logs/train/train_nll_avg 0.18181
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/142/logs/train/train_nll_val 0.1888
wandb:         resnet18-usc-unsigned/baseline/prune_rate=1.0/142/logs/train/train_penalty_avg 0.00024
wandb:         resnet18-usc-unsigned/baseline/prune_rate=1.0/142/logs/train/train_penalty_val 0.00044
wandb:           resnet18-usc-unsigned/baseline/prune_rate=1.0/142/logs/train/weight_norm_avg 25.16231
wandb:           resnet18-usc-unsigned/baseline/prune_rate=1.0/142/logs/train/weight_norm_val 25.16229
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/142/logs/train/zero_count_avg 0.0
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/142/logs/train/zero_count_val 0.0
wandb: 
wandb: 🚀 View run name_random at: https://wandb.ai/janezdu-uiuc/irm/runs/bfjqie3r
wandb: ⭐️ View project at: https://wandb.ai/janezdu-uiuc/irm
wandb: Synced 5 W&B file(s), 0 media file(s), 2 artifact file(s) and 1 other file(s)
wandb: Find logs at: ./wandb/run-20240907_201718-bfjqie3r/logs
wandb: WARNING The new W&B backend becomes opt-out in version 0.18.0; try it out with `wandb.require("core")`! See https://wandb.me/wandb-core for more information.
wandb: Currently logged in as: janezdu (janezdu-uiuc). Use `wandb login --relogin` to force relogin
wandb: wandb version 0.17.9 is available!  To upgrade, please run:
wandb:  $ pip install wandb --upgrade
wandb: Tracking run with wandb version 0.17.7
wandb: Run data is saved locally in /scratch/users/zd16/sparseIRM-resnet-ver/wandb/run-20240907_202001-am8dxep5
wandb: Run `wandb offline` to turn off syncing.
wandb: Syncing run name_random
wandb: ⭐️ View project at https://wandb.ai/janezdu-uiuc/irm
wandb: 🚀 View run at https://wandb.ai/janezdu-uiuc/irm/runs/am8dxep5
=> Reading YAML config from configs/smallscale/resnet18/resnet18-usc-unsigned.yaml
Namespace(data='dataset/', optimizer='adam', weight_opt='adam', set='mnistcifar', arch='ResNet18', config='configs/smallscale/resnet18/resnet18-usc-unsigned.yaml', log_dir=None, workers=4, epochs=50, start_epoch=None, batch_size=390, lr=0.006, warmup_length=0, momentum=0.9, weight_decay=0.0, print_freq=10, num_classes=1, resume='', resume_train_weights='', evaluate=False, pretrained=None, pretrained_distill=None, alpha_distill=0.95, T_distill=2, seed=0, multigpu=[0], lr_policy='cosine_lr', lr_adjust=30, lr_gamma=0.1, name='baseline', save_every=-1, prune_rate=1.0, param_prune_rate=0.0, pr_start=1.0, low_data=1, width_mult=1.0, nesterov=False, threetimes=False, random_subnet=False, one_batch=False, conv_type='DenseConv', freeze_weights=False, st=False, mode='fan_in', nonlinearity='relu', bn_type='LearnedBatchNorm', init='kaiming_normal', no_bn_decay=False, scale_fan=False, first_layer_dense=False, last_layer_dense=True, approx=False, zero=False, flip=False, bs=False, gumbel_sample=False, multiply_prob=False, no_multiply=False, multiply_cont=False, multiply_prob_bs=False, indiv=False, label_smoothing=None, first_layer_type=None, trainer='default', score_init_constant=1.0, K=1, update_freq=20, D=0.01, T=1, TA=True, TA2=False, TA_grow=False, center=False, straight_through=False, PLA_factor=0.1, PLA_patience=10, gradient_loss_para=0, abs_loss_para=0, thres=0.9, runs_name='name_random', resume_compare_loss1='', resume_compare_loss2='', init_weights='', trained_mask='', weight_rescaling=False, constrain_by_layer=False, weight_rescaling_data=False, use_running_stats=False, not_clipping=False, rescaling_para=False, lasso_para=0, dont_freeze_weights=False, iterative=True, prob_by_weight=False, rescale_at_fix_subnet=False, train_weights_at_the_same_time=False, sample_from_training_set=False, load_true_para=False, distill=False, finetune=False, stablize=False, prev_best=0, weight_opt_lr=0.0006, n=500, ts=0.28, te=0.6, d=20000, s=80, c=0.75, init_prob=False, thres_before=0.001, wide_ratio=0.001, noise=1, cal_p_q=False, just_finetune=False, snip=False, envs_num=2, l2_regularizer_weight=0.001, data_num=50000, env_type='linear', irm_type='irmv1', hidden_dim=390, penalty_anneal_iters=400, penalty_weight=10000.0, grayscale_model=0, weight_lr_schedule=False, fix_subnet=False, freeze_weight=False, step='ours', prior_sd_coef=0, dim_inv=2, variance_gamma=1.0, dim_spu=10, image_scale=32, cons_ratio='0.999_0.7_0.1', noise_ratio=0.2, step_gamma=0.1, step_round=3, inner_steps=1, use_pgd=False, z=15.0, pgd_anneal_iters=600, pgd_skip_steps=50, fraction_z=0.95)
=> Creating model 'ResNet18'
Here!!!!!!!!
==> Conv Type: DenseConv
==> BN Type: LearnedBatchNorm
<class 'torch.nn.modules.conv.Conv2d'>
<class 'torch.nn.modules.batchnorm.BatchNorm2d'>
==> Building first layer with <class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
ResNet(
  (conv1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
  (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (relu): ReLU(inplace=True)
  (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
  (layer1): Sequential(
    (0): BasicBlock(
      (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (1): BasicBlock(
      (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (layer2): Sequential(
    (0): BasicBlock(
      (conv1): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (downsample): Sequential(
        (0): Conv2d(64, 128, kernel_size=(1, 1), stride=(2, 2), bias=False)
        (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (1): BasicBlock(
      (conv1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (layer3): Sequential(
    (0): BasicBlock(
      (conv1): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (downsample): Sequential(
        (0): Conv2d(128, 256, kernel_size=(1, 1), stride=(2, 2), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (1): BasicBlock(
      (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (layer4): Sequential(
    (0): BasicBlock(
      (conv1): Conv2d(256, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (downsample): Sequential(
        (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (1): BasicBlock(
      (conv1): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (avgpool): AdaptiveAvgPool2d(output_size=1)
  (fc): Conv2d(512, 1, kernel_size=(1, 1), stride=(1, 1), bias=False)
)
=> Parallelizing on [0] gpus
<DEBUG> gradient to module.conv1.weight
<DEBUG> gradient to module.bn1.weight
<DEBUG> gradient to module.bn1.bias
<DEBUG> gradient to module.layer1.0.conv1.weight
<DEBUG> gradient to module.layer1.0.bn1.weight
<DEBUG> gradient to module.layer1.0.bn1.bias
<DEBUG> gradient to module.layer1.0.conv2.weight
<DEBUG> gradient to module.layer1.0.bn2.weight
<DEBUG> gradient to module.layer1.0.bn2.bias
<DEBUG> gradient to module.layer1.1.conv1.weight
<DEBUG> gradient to module.layer1.1.bn1.weight
<DEBUG> gradient to module.layer1.1.bn1.bias
<DEBUG> gradient to module.layer1.1.conv2.weight
<DEBUG> gradient to module.layer1.1.bn2.weight
<DEBUG> gradient to module.layer1.1.bn2.bias
<DEBUG> gradient to module.layer2.0.conv1.weight
<DEBUG> gradient to module.layer2.0.bn1.weight
<DEBUG> gradient to module.layer2.0.bn1.bias
<DEBUG> gradient to module.layer2.0.conv2.weight
<DEBUG> gradient to module.layer2.0.bn2.weight
<DEBUG> gradient to module.layer2.0.bn2.bias
<DEBUG> gradient to module.layer2.0.downsample.0.weight
<DEBUG> gradient to module.layer2.0.downsample.1.weight
<DEBUG> gradient to module.layer2.0.downsample.1.bias
<DEBUG> gradient to module.layer2.1.conv1.weight
<DEBUG> gradient to module.layer2.1.bn1.weight
<DEBUG> gradient to module.layer2.1.bn1.bias
<DEBUG> gradient to module.layer2.1.conv2.weight
<DEBUG> gradient to module.layer2.1.bn2.weight
<DEBUG> gradient to module.layer2.1.bn2.bias
<DEBUG> gradient to module.layer3.0.conv1.weight
<DEBUG> gradient to module.layer3.0.bn1.weight
<DEBUG> gradient to module.layer3.0.bn1.bias
<DEBUG> gradient to module.layer3.0.conv2.weight
<DEBUG> gradient to module.layer3.0.bn2.weight
<DEBUG> gradient to module.layer3.0.bn2.bias
<DEBUG> gradient to module.layer3.0.downsample.0.weight
<DEBUG> gradient to module.layer3.0.downsample.1.weight
<DEBUG> gradient to module.layer3.0.downsample.1.bias
<DEBUG> gradient to module.layer3.1.conv1.weight
<DEBUG> gradient to module.layer3.1.bn1.weight
<DEBUG> gradient to module.layer3.1.bn1.bias
<DEBUG> gradient to module.layer3.1.conv2.weight
<DEBUG> gradient to module.layer3.1.bn2.weight
<DEBUG> gradient to module.layer3.1.bn2.bias
<DEBUG> gradient to module.layer4.0.conv1.weight
<DEBUG> gradient to module.layer4.0.bn1.weight
<DEBUG> gradient to module.layer4.0.bn1.bias
<DEBUG> gradient to module.layer4.0.conv2.weight
<DEBUG> gradient to module.layer4.0.bn2.weight
<DEBUG> gradient to module.layer4.0.bn2.bias
<DEBUG> gradient to module.layer4.0.downsample.0.weight
<DEBUG> gradient to module.layer4.0.downsample.1.weight
<DEBUG> gradient to module.layer4.0.downsample.1.bias
<DEBUG> gradient to module.layer4.1.conv1.weight
<DEBUG> gradient to module.layer4.1.bn1.weight
<DEBUG> gradient to module.layer4.1.bn1.bias
<DEBUG> gradient to module.layer4.1.conv2.weight
<DEBUG> gradient to module.layer4.1.bn2.weight
<DEBUG> gradient to module.layer4.1.bn2.bias
<DEBUG> gradient to module.fc.weight
Files already downloaded and verified
Files already downloaded and verified
Adding Noise to Label, len(Y)=12000, Label_noise=1157
Xmp (7877, 3, 32, 32) (6903, 3, 32, 32)
Xcp (6015, 3, 32, 32) (5985, 3, 32, 32)
env=0 2497 2497 3 3
xn 2500 xp 2500
env=1 1750 1750 750 750
xn 2500 xp 2500
env=2 50 50 450 450
xn 500 xp 500
=> Creating model 'EBD'
EBD(
  (embedings): Embedding(2, 1)
)
=> Parallelizing on [0] gpus
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:01<00:38,  1.54s/it] 19%|#9        | 5/26 [00:01<00:05,  3.98it/s] 38%|###8      | 10/26 [00:01<00:01,  8.75it/s] 54%|#####3    | 14/26 [00:01<00:00, 12.79it/s] 69%|######9   | 18/26 [00:01<00:00, 16.35it/s] 85%|########4 | 22/26 [00:02<00:00, 20.26it/s]100%|##########| 26/26 [00:02<00:00, 14.72it/s]100%|##########| 26/26 [00:02<00:00, 10.09it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 0 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 2 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 3 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 4 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 5 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 6 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 7 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 8 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 9 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 10 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 11 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 12 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 13 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 14 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 15 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 16 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 17 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 18 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 19 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 20 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 21 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 22 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 23 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 24 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 25 400
penalty weights 0.0
Epoch: [0][  26/  26]	Loss 0.394 (0.522)	train_nll   0.39 (  0.52)	train_penalty   0.04 (  0.25)	weight_norm  20.86 ( 18.14)	train_acc   0.86 (  0.82)	train_minacc   0.00 (  0.05)	train_majacc   1.00 (  0.95)	train_corr   0.00 (  0.00)	l1 6.8455 (7.8168)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.90it/s] 23%|##3       | 6/26 [00:00<00:00, 32.63it/s]                                               23%|##3       | 6/26 [00:00<00:00, 32.63it/s] 46%|####6     | 12/26 [00:00<00:00, 42.79it/s] 65%|######5   | 17/26 [00:00<00:00, 42.97it/s]                                                65%|######5   | 17/26 [00:00<00:00, 42.97it/s] 88%|########8 | 23/26 [00:00<00:00, 48.10it/s]100%|##########| 26/26 [00:00<00:00, 39.86it/s]
Test: [   0/  26]	Loss 0.394 (0.394)	test_acc   0.86 (  0.86)	test_minacc   0.00 (  0.00)	test_majacc   0.99 (  0.99)	Loss_d 0.394 (0.394)	test_acc_d   0.86 (  0.86)	test_minacc_d   0.00 (  0.00)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.98 (  0.98)
Test: [  10/  26]	Loss 0.403 (0.399)	test_acc   0.84 (  0.85)	test_minacc   0.02 (  0.01)	test_majacc   1.00 (  1.00)	Loss_d 0.403 (0.399)	test_acc_d   0.84 (  0.85)	test_minacc_d   0.02 (  0.01)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.99 (  0.99)
Test: [  20/  26]	Loss 0.462 (0.411)	test_acc   0.82 (  0.85)	test_minacc   0.01 (  0.01)	test_majacc   1.00 (  1.00)	Loss_d 0.462 (0.411)	test_acc_d   0.82 (  0.85)	test_minacc_d   0.01 (  0.01)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.98 (  0.99)
Test: [  26/  26]	Loss 0.389 (0.411)	test_acc   0.86 (  0.85)	test_minacc   0.00 (  0.01)	test_majacc   1.00 (  1.00)	Loss_d 0.389 (0.411)	test_acc_d   0.86 (  0.85)	test_minacc_d   0.00 (  0.01)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.99 (  0.99)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00,  2.54it/s]100%|##########| 1/1 [00:00<00:00,  2.54it/s]
Test: [  0/  1]	Loss 1.869 (1.869)	test_acc   0.10 (  0.10)	test_minacc   0.01 (  0.01)	test_majacc   0.99 (  0.99)	Loss_d 1.869 (1.869)	test_acc_d   0.10 (  0.10)	test_minacc_d   0.01 (  0.01)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.98 (  0.98)
Test: [  1/  1]	Loss 1.869 (1.869)	test_acc   0.10 (  0.10)	test_minacc   0.01 (  0.01)	test_majacc   0.99 (  0.99)	Loss_d 1.869 (1.869)	test_acc_d   0.10 (  0.10)	test_minacc_d   0.01 (  0.01)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.98 (  0.98)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/144/checkpoints/model_best.pth
Overall Timing[  0/  1]	epoch_time 0.0831 (0.0831)	validation_time 0.0067 (0.0067)	train_time 0.0672 (0.0672)
record: (train_acc, test_acc) (0.8478000289797782, 0.10400000214576721)
last accs (train_acc, test_acc) (0.8478000289797782, 0.10400000214576721)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.81it/s] 19%|#9        | 5/26 [00:00<00:00, 21.84it/s] 35%|###4      | 9/26 [00:00<00:00, 27.71it/s] 50%|#####     | 13/26 [00:00<00:00, 31.16it/s] 65%|######5   | 17/26 [00:00<00:00, 33.31it/s] 81%|########  | 21/26 [00:00<00:00, 34.49it/s] 96%|#########6| 25/26 [00:00<00:00, 35.08it/s]100%|##########| 26/26 [00:00<00:00, 29.31it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 26 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 27 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 28 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 29 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 30 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 31 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 32 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 33 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 34 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 35 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 36 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 37 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 38 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 39 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 40 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 41 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 42 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 43 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 44 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 45 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 46 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 47 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 48 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 49 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 50 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 51 400
penalty weights 0.0
Epoch: [1][  26/  26]	Loss 0.370 (0.400)	train_nll   0.37 (  0.40)	train_penalty   0.04 (  0.05)	weight_norm  21.96 ( 21.62)	train_acc   0.86 (  0.85)	train_minacc   0.03 (  0.02)	train_majacc   1.00 (  0.99)	train_corr   0.00 (  0.00)	l1 6.6092 (6.7300)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 14.25it/s] 27%|##6       | 7/26 [00:00<00:00, 31.96it/s]                                               27%|##6       | 7/26 [00:00<00:00, 31.96it/s] 50%|#####     | 13/26 [00:00<00:00, 41.34it/s] 69%|######9   | 18/26 [00:00<00:00, 39.92it/s]                                                69%|######9   | 18/26 [00:00<00:00, 39.92it/s] 88%|########8 | 23/26 [00:00<00:00, 41.96it/s]100%|##########| 26/26 [00:00<00:00, 37.51it/s]
Test: [   0/  26]	Loss 0.376 (0.376)	test_acc   0.86 (  0.86)	test_minacc   0.02 (  0.02)	test_majacc   0.99 (  0.99)	Loss_d 0.376 (0.376)	test_acc_d   0.86 (  0.86)	test_minacc_d   0.02 (  0.02)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.96 (  0.96)
Test: [  10/  26]	Loss 0.379 (0.376)	test_acc   0.84 (  0.86)	test_minacc   0.03 (  0.02)	test_majacc   1.00 (  1.00)	Loss_d 0.379 (0.376)	test_acc_d   0.84 (  0.86)	test_minacc_d   0.03 (  0.02)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.97 (  0.97)
Test: [  20/  26]	Loss 0.441 (0.389)	test_acc   0.83 (  0.85)	test_minacc   0.03 (  0.02)	test_majacc   1.00 (  1.00)	Loss_d 0.441 (0.389)	test_acc_d   0.83 (  0.85)	test_minacc_d   0.03 (  0.02)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.97 (  0.97)
Test: [  26/  26]	Loss 0.362 (0.387)	test_acc   0.86 (  0.85)	test_minacc   0.03 (  0.02)	test_majacc   1.00 (  1.00)	Loss_d 0.362 (0.387)	test_acc_d   0.86 (  0.85)	test_minacc_d   0.03 (  0.02)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.97 (  0.97)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 60.28it/s]
Test: [  0/  1]	Loss 1.801 (1.801)	test_acc   0.11 (  0.11)	test_minacc   0.01 (  0.01)	test_majacc   1.00 (  1.00)	Loss_d 1.801 (1.801)	test_acc_d   0.11 (  0.11)	test_minacc_d   0.01 (  0.01)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.96 (  0.96)
Test: [  1/  1]	Loss 1.801 (1.801)	test_acc   0.11 (  0.11)	test_minacc   0.01 (  0.01)	test_majacc   1.00 (  1.00)	Loss_d 1.801 (1.801)	test_acc_d   0.11 (  0.11)	test_minacc_d   0.01 (  0.01)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.96 (  0.96)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/144/checkpoints/model_best.pth
Overall Timing[  1/  1]	epoch_time 0.0405 (0.0618)	validation_time 0.0005 (0.0036)	train_time 0.0400 (0.0536)
record: (train_acc, test_acc) (0.8494000232815743, 0.10900000482797623)
last accs (train_acc, test_acc) (0.8494000232815743, 0.10900000482797623)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.67it/s]  8%|7         | 2/26 [00:00<00:05,  4.70it/s] 23%|##3       | 6/26 [00:00<00:01, 14.25it/s] 38%|###8      | 10/26 [00:00<00:00, 20.24it/s] 54%|#####3    | 14/26 [00:00<00:00, 25.34it/s] 69%|######9   | 18/26 [00:00<00:00, 28.86it/s] 88%|########8 | 23/26 [00:00<00:00, 32.87it/s]100%|##########| 26/26 [00:01<00:00, 23.94it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 52 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 53 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 54 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 55 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 56 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 57 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 58 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 59 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 60 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 61 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 62 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 63 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 64 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 65 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 66 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 67 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 68 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 69 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 70 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 71 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 72 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 73 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 74 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 75 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 76 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 77 400
penalty weights 0.0
Epoch: [2][  26/  26]	Loss 0.360 (0.380)	train_nll   0.36 (  0.38)	train_penalty   0.03 (  0.04)	weight_norm  22.10 ( 22.05)	train_acc   0.86 (  0.85)	train_minacc   0.06 (  0.09)	train_majacc   1.00 (  0.98)	train_corr   0.00 (  0.00)	l1 6.2781 (6.5697)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.61it/s] 27%|##6       | 7/26 [00:00<00:00, 35.20it/s]                                               27%|##6       | 7/26 [00:00<00:00, 35.20it/s] 46%|####6     | 12/26 [00:00<00:00, 41.03it/s] 65%|######5   | 17/26 [00:00<00:00, 42.12it/s]                                                65%|######5   | 17/26 [00:00<00:00, 42.12it/s] 88%|########8 | 23/26 [00:00<00:00, 46.50it/s]100%|##########| 26/26 [00:00<00:00, 38.60it/s]
Test: [   0/  26]	Loss 0.364 (0.364)	test_acc   0.86 (  0.86)	test_minacc   0.09 (  0.09)	test_majacc   0.99 (  0.99)	Loss_d 0.364 (0.364)	test_acc_d   0.86 (  0.86)	test_minacc_d   0.09 (  0.09)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.93 (  0.93)
Test: [  10/  26]	Loss 0.371 (0.364)	test_acc   0.85 (  0.86)	test_minacc   0.11 (  0.08)	test_majacc   0.99 (  0.99)	Loss_d 0.371 (0.364)	test_acc_d   0.85 (  0.86)	test_minacc_d   0.11 (  0.08)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.93 (  0.94)
Test: [  20/  26]	Loss 0.410 (0.374)	test_acc   0.83 (  0.85)	test_minacc   0.09 (  0.07)	test_majacc   0.99 (  0.99)	Loss_d 0.410 (0.374)	test_acc_d   0.83 (  0.85)	test_minacc_d   0.09 (  0.07)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.94 (  0.93)
Test: [  26/  26]	Loss 0.351 (0.373)	test_acc   0.86 (  0.85)	test_minacc   0.03 (  0.07)	test_majacc   1.00 (  0.99)	Loss_d 0.351 (0.373)	test_acc_d   0.86 (  0.85)	test_minacc_d   0.03 (  0.07)	test_majacc_d   1.00 (  0.99)	test_corr_d   0.95 (  0.94)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.23it/s]
Test: [  0/  1]	Loss 1.665 (1.665)	test_acc   0.16 (  0.16)	test_minacc   0.07 (  0.07)	test_majacc   0.99 (  0.99)	Loss_d 1.665 (1.665)	test_acc_d   0.16 (  0.16)	test_minacc_d   0.07 (  0.07)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.88 (  0.88)
Test: [  1/  1]	Loss 1.665 (1.665)	test_acc   0.16 (  0.16)	test_minacc   0.07 (  0.07)	test_majacc   0.99 (  0.99)	Loss_d 1.665 (1.665)	test_acc_d   0.16 (  0.16)	test_minacc_d   0.07 (  0.07)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.88 (  0.88)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/144/checkpoints/model_best.pth
Overall Timing[  2/  1]	epoch_time 0.0422 (0.0553)	validation_time 0.0004 (0.0025)	train_time 0.0418 (0.0497)
record: (train_acc, test_acc) (0.8511000229716301, 0.15800000727176666)
last accs (train_acc, test_acc) (0.8511000229716301, 0.15800000727176666)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.21it/s] 19%|#9        | 5/26 [00:00<00:00, 22.06it/s] 35%|###4      | 9/26 [00:00<00:00, 29.04it/s] 50%|#####     | 13/26 [00:00<00:00, 32.11it/s] 65%|######5   | 17/26 [00:00<00:00, 33.37it/s] 81%|########  | 21/26 [00:00<00:00, 34.10it/s] 96%|#########6| 25/26 [00:00<00:00, 34.53it/s]100%|##########| 26/26 [00:00<00:00, 29.45it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 78 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 79 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 80 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 81 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 82 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 83 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 84 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 85 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 86 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 87 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 88 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 89 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 90 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 91 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 92 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 93 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 94 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 95 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 96 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 97 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 98 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 99 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 100 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 101 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 102 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 103 400
penalty weights 0.0
Epoch: [3][  26/  26]	Loss 0.336 (0.357)	train_nll   0.34 (  0.36)	train_penalty   0.03 (  0.03)	weight_norm  22.18 ( 22.15)	train_acc   0.86 (  0.85)	train_minacc   0.03 (  0.14)	train_majacc   1.00 (  0.98)	train_corr   0.00 (  0.00)	l1 6.3182 (6.4075)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:00, 28.81it/s] 31%|###       | 8/26 [00:00<00:00, 39.96it/s]                                               31%|###       | 8/26 [00:00<00:00, 39.96it/s] 50%|#####     | 13/26 [00:00<00:00, 43.56it/s] 69%|######9   | 18/26 [00:00<00:00, 41.01it/s]                                                69%|######9   | 18/26 [00:00<00:00, 41.01it/s] 88%|########8 | 23/26 [00:00<00:00, 43.63it/s]100%|##########| 26/26 [00:00<00:00, 39.71it/s]
Test: [   0/  26]	Loss 0.328 (0.328)	test_acc   0.87 (  0.87)	test_minacc   0.13 (  0.13)	test_majacc   0.99 (  0.99)	Loss_d 0.328 (0.328)	test_acc_d   0.87 (  0.87)	test_minacc_d   0.13 (  0.13)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.93 (  0.93)
Test: [  10/  26]	Loss 0.346 (0.338)	test_acc   0.85 (  0.86)	test_minacc   0.15 (  0.12)	test_majacc   0.98 (  0.98)	Loss_d 0.346 (0.338)	test_acc_d   0.85 (  0.86)	test_minacc_d   0.15 (  0.12)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.92 (  0.92)
Test: [  20/  26]	Loss 0.393 (0.348)	test_acc   0.84 (  0.85)	test_minacc   0.12 (  0.13)	test_majacc   0.99 (  0.98)	Loss_d 0.393 (0.348)	test_acc_d   0.84 (  0.85)	test_minacc_d   0.12 (  0.13)	test_majacc_d   0.99 (  0.98)	test_corr_d   0.92 (  0.92)
Test: [  26/  26]	Loss 0.325 (0.346)	test_acc   0.86 (  0.86)	test_minacc   0.09 (  0.13)	test_majacc   0.99 (  0.98)	Loss_d 0.325 (0.346)	test_acc_d   0.86 (  0.86)	test_minacc_d   0.09 (  0.13)	test_majacc_d   0.99 (  0.98)	test_corr_d   0.94 (  0.92)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.46it/s]
Test: [  0/  1]	Loss 1.776 (1.776)	test_acc   0.18 (  0.18)	test_minacc   0.09 (  0.09)	test_majacc   0.99 (  0.99)	Loss_d 1.776 (1.776)	test_acc_d   0.18 (  0.18)	test_minacc_d   0.09 (  0.09)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.84 (  0.84)
Test: [  1/  1]	Loss 1.776 (1.776)	test_acc   0.18 (  0.18)	test_minacc   0.09 (  0.09)	test_majacc   0.99 (  0.99)	Loss_d 1.776 (1.776)	test_acc_d   0.18 (  0.18)	test_minacc_d   0.09 (  0.09)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.84 (  0.84)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/144/checkpoints/model_best.pth
Overall Timing[  3/  1]	epoch_time 0.0399 (0.0514)	validation_time 0.0004 (0.0020)	train_time 0.0394 (0.0471)
record: (train_acc, test_acc) (0.8557000263929367, 0.17800000309944153)
last accs (train_acc, test_acc) (0.8557000263929367, 0.17800000309944153)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.52it/s] 19%|#9        | 5/26 [00:00<00:00, 22.34it/s] 35%|###4      | 9/26 [00:00<00:00, 27.39it/s] 50%|#####     | 13/26 [00:00<00:00, 29.28it/s] 65%|######5   | 17/26 [00:00<00:00, 30.57it/s] 81%|########  | 21/26 [00:00<00:00, 31.88it/s] 96%|#########6| 25/26 [00:00<00:00, 33.49it/s]100%|##########| 26/26 [00:00<00:00, 28.42it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 104 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 105 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 106 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 107 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 108 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 109 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 110 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 111 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 112 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 113 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 114 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 115 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 116 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 117 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 118 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 119 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 120 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 121 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 122 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 123 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 124 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 125 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 126 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 127 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 128 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 129 400
penalty weights 0.0
Epoch: [4][  26/  26]	Loss 0.316 (0.334)	train_nll   0.32 (  0.33)	train_penalty   0.02 (  0.02)	weight_norm  22.26 ( 22.22)	train_acc   0.86 (  0.86)	train_minacc   0.23 (  0.25)	train_majacc   0.96 (  0.97)	train_corr   0.00 (  0.00)	l1 6.3233 (6.3464)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.54it/s] 15%|#5        | 4/26 [00:00<00:01, 17.56it/s] 38%|###8      | 10/26 [00:00<00:00, 34.29it/s]                                                38%|###8      | 10/26 [00:00<00:00, 34.29it/s] 62%|######1   | 16/26 [00:00<00:00, 40.09it/s]                                                62%|######1   | 16/26 [00:00<00:00, 40.09it/s] 85%|########4 | 22/26 [00:00<00:00, 45.40it/s]100%|##########| 26/26 [00:00<00:00, 35.61it/s]
Test: [   0/  26]	Loss 0.327 (0.327)	test_acc   0.86 (  0.86)	test_minacc   0.23 (  0.23)	test_majacc   0.96 (  0.96)	Loss_d 0.327 (0.327)	test_acc_d   0.86 (  0.86)	test_minacc_d   0.23 (  0.23)	test_majacc_d   0.96 (  0.96)	test_corr_d   0.90 (  0.90)
Test: [  10/  26]	Loss 0.319 (0.318)	test_acc   0.87 (  0.87)	test_minacc   0.32 (  0.26)	test_majacc   0.98 (  0.97)	Loss_d 0.319 (0.318)	test_acc_d   0.87 (  0.87)	test_minacc_d   0.32 (  0.26)	test_majacc_d   0.98 (  0.97)	test_corr_d   0.89 (  0.90)
Test: [  20/  26]	Loss 0.344 (0.327)	test_acc   0.86 (  0.86)	test_minacc   0.28 (  0.26)	test_majacc   0.98 (  0.97)	Loss_d 0.344 (0.327)	test_acc_d   0.86 (  0.86)	test_minacc_d   0.28 (  0.26)	test_majacc_d   0.98 (  0.97)	test_corr_d   0.90 (  0.90)
Test: [  26/  26]	Loss 0.302 (0.325)	test_acc   0.87 (  0.86)	test_minacc   0.20 (  0.26)	test_majacc   0.98 (  0.97)	Loss_d 0.302 (0.325)	test_acc_d   0.87 (  0.86)	test_minacc_d   0.20 (  0.26)	test_majacc_d   0.98 (  0.97)	test_corr_d   0.91 (  0.90)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.46it/s]
Test: [  0/  1]	Loss 1.844 (1.844)	test_acc   0.28 (  0.28)	test_minacc   0.20 (  0.20)	test_majacc   0.99 (  0.99)	Loss_d 1.844 (1.844)	test_acc_d   0.28 (  0.28)	test_minacc_d   0.20 (  0.20)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.73 (  0.73)
Test: [  1/  1]	Loss 1.844 (1.844)	test_acc   0.28 (  0.28)	test_minacc   0.20 (  0.20)	test_majacc   0.99 (  0.99)	Loss_d 1.844 (1.844)	test_acc_d   0.28 (  0.28)	test_minacc_d   0.20 (  0.20)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.73 (  0.73)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/144/checkpoints/model_best.pth
Overall Timing[  4/  1]	epoch_time 0.0377 (0.0487)	validation_time 0.0004 (0.0017)	train_time 0.0372 (0.0451)
record: (train_acc, test_acc) (0.8634000251889229, 0.2750000059604645)
last accs (train_acc, test_acc) (0.8634000251889229, 0.2750000059604645)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.64it/s] 15%|#5        | 4/26 [00:00<00:01, 14.89it/s] 31%|###       | 8/26 [00:00<00:00, 22.96it/s] 46%|####6     | 12/26 [00:00<00:00, 27.44it/s] 62%|######1   | 16/26 [00:00<00:00, 29.89it/s] 77%|#######6  | 20/26 [00:00<00:00, 31.69it/s] 92%|#########2| 24/26 [00:00<00:00, 32.38it/s]100%|##########| 26/26 [00:00<00:00, 26.58it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 130 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 131 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 132 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 133 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 134 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 135 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 136 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 137 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 138 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 139 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 140 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 141 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 142 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 143 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 144 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 145 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 146 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 147 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 148 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 149 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 150 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 151 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 152 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 153 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 154 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 155 400
penalty weights 0.0
Epoch: [5][  26/  26]	Loss 0.295 (0.317)	train_nll   0.30 (  0.32)	train_penalty   0.01 (  0.02)	weight_norm  22.37 ( 22.31)	train_acc   0.90 (  0.86)	train_minacc   0.46 (  0.31)	train_majacc   0.97 (  0.96)	train_corr   0.00 (  0.00)	l1 5.9883 (6.4226)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.90it/s] 27%|##6       | 7/26 [00:00<00:00, 29.35it/s]                                               27%|##6       | 7/26 [00:00<00:00, 29.35it/s] 46%|####6     | 12/26 [00:00<00:00, 37.18it/s] 69%|######9   | 18/26 [00:00<00:00, 43.13it/s]                                                69%|######9   | 18/26 [00:00<00:00, 43.13it/s] 88%|########8 | 23/26 [00:00<00:00, 42.64it/s]100%|##########| 26/26 [00:00<00:00, 37.08it/s]
Test: [   0/  26]	Loss 0.294 (0.294)	test_acc   0.89 (  0.89)	test_minacc   0.40 (  0.40)	test_majacc   0.97 (  0.97)	Loss_d 0.294 (0.294)	test_acc_d   0.89 (  0.89)	test_minacc_d   0.40 (  0.40)	test_majacc_d   0.97 (  0.97)	test_corr_d   0.89 (  0.89)
Test: [  10/  26]	Loss 0.309 (0.300)	test_acc   0.85 (  0.87)	test_minacc   0.29 (  0.33)	test_majacc   0.95 (  0.96)	Loss_d 0.309 (0.300)	test_acc_d   0.85 (  0.87)	test_minacc_d   0.29 (  0.33)	test_majacc_d   0.95 (  0.96)	test_corr_d   0.87 (  0.88)
Test: [  20/  26]	Loss 0.325 (0.307)	test_acc   0.87 (  0.87)	test_minacc   0.38 (  0.34)	test_majacc   0.97 (  0.96)	Loss_d 0.325 (0.307)	test_acc_d   0.87 (  0.87)	test_minacc_d   0.38 (  0.34)	test_majacc_d   0.97 (  0.96)	test_corr_d   0.87 (  0.88)
Test: [  26/  26]	Loss 0.277 (0.305)	test_acc   0.89 (  0.87)	test_minacc   0.37 (  0.35)	test_majacc   0.98 (  0.96)	Loss_d 0.277 (0.305)	test_acc_d   0.89 (  0.87)	test_minacc_d   0.37 (  0.35)	test_majacc_d   0.98 (  0.96)	test_corr_d   0.90 (  0.88)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.19it/s]
Test: [  0/  1]	Loss 1.682 (1.682)	test_acc   0.30 (  0.30)	test_minacc   0.22 (  0.22)	test_majacc   0.98 (  0.98)	Loss_d 1.682 (1.682)	test_acc_d   0.30 (  0.30)	test_minacc_d   0.22 (  0.22)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.68 (  0.68)
Test: [  1/  1]	Loss 1.682 (1.682)	test_acc   0.30 (  0.30)	test_minacc   0.22 (  0.22)	test_majacc   0.98 (  0.98)	Loss_d 1.682 (1.682)	test_acc_d   0.30 (  0.30)	test_minacc_d   0.22 (  0.22)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.68 (  0.68)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/144/checkpoints/model_best.pth
Overall Timing[  5/  1]	epoch_time 0.0371 (0.0467)	validation_time 0.0003 (0.0015)	train_time 0.0367 (0.0437)
record: (train_acc, test_acc) (0.8701000289916992, 0.2980000078678131)
last accs (train_acc, test_acc) (0.8701000289916992, 0.2980000078678131)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 17.66it/s] 23%|##3       | 6/26 [00:00<00:00, 28.68it/s] 38%|###8      | 10/26 [00:00<00:00, 32.32it/s] 54%|#####3    | 14/26 [00:00<00:00, 33.99it/s] 69%|######9   | 18/26 [00:00<00:00, 34.08it/s] 85%|########4 | 22/26 [00:00<00:00, 34.82it/s]100%|##########| 26/26 [00:00<00:00, 35.54it/s]100%|##########| 26/26 [00:00<00:00, 31.39it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 156 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 157 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 158 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 159 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 160 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 161 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 162 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 163 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 164 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 165 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 166 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 167 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 168 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 169 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 170 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 171 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 172 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 173 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 174 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 175 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 176 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 177 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 178 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 179 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 180 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 181 400
penalty weights 0.0
Epoch: [6][  26/  26]	Loss 0.286 (0.310)	train_nll   0.29 (  0.31)	train_penalty   0.01 (  0.02)	weight_norm  22.51 ( 22.44)	train_acc   0.88 (  0.86)	train_minacc   0.40 (  0.33)	train_majacc   0.96 (  0.96)	train_corr   0.00 (  0.00)	l1 5.9935 (6.3200)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.22it/s] 23%|##3       | 6/26 [00:00<00:00, 28.76it/s]                                               23%|##3       | 6/26 [00:00<00:00, 28.76it/s] 42%|####2     | 11/26 [00:00<00:00, 36.66it/s] 62%|######1   | 16/26 [00:00<00:00, 40.42it/s]                                                62%|######1   | 16/26 [00:00<00:00, 40.42it/s] 81%|########  | 21/26 [00:00<00:00, 39.38it/s]100%|##########| 26/26 [00:00<00:00, 41.75it/s]100%|##########| 26/26 [00:00<00:00, 34.56it/s]
Test: [   0/  26]	Loss 0.293 (0.293)	test_acc   0.88 (  0.88)	test_minacc   0.43 (  0.43)	test_majacc   0.96 (  0.96)	Loss_d 0.293 (0.293)	test_acc_d   0.88 (  0.88)	test_minacc_d   0.43 (  0.43)	test_majacc_d   0.96 (  0.96)	test_corr_d   0.88 (  0.88)
Test: [  10/  26]	Loss 0.296 (0.289)	test_acc   0.88 (  0.88)	test_minacc   0.42 (  0.38)	test_majacc   0.96 (  0.96)	Loss_d 0.296 (0.289)	test_acc_d   0.88 (  0.88)	test_minacc_d   0.42 (  0.38)	test_majacc_d   0.96 (  0.96)	test_corr_d   0.87 (  0.88)
Test: [  20/  26]	Loss 0.329 (0.300)	test_acc   0.87 (  0.87)	test_minacc   0.43 (  0.39)	test_majacc   0.97 (  0.96)	Loss_d 0.329 (0.300)	test_acc_d   0.87 (  0.87)	test_minacc_d   0.43 (  0.39)	test_majacc_d   0.97 (  0.96)	test_corr_d   0.86 (  0.88)
Test: [  26/  26]	Loss 0.267 (0.299)	test_acc   0.88 (  0.87)	test_minacc   0.40 (  0.39)	test_majacc   0.96 (  0.96)	Loss_d 0.267 (0.299)	test_acc_d   0.88 (  0.87)	test_minacc_d   0.40 (  0.39)	test_majacc_d   0.96 (  0.96)	test_corr_d   0.89 (  0.88)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.67it/s]
Test: [  0/  1]	Loss 1.733 (1.733)	test_acc   0.31 (  0.31)	test_minacc   0.24 (  0.24)	test_majacc   0.98 (  0.98)	Loss_d 1.733 (1.733)	test_acc_d   0.31 (  0.31)	test_minacc_d   0.24 (  0.24)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.68 (  0.68)
Test: [  1/  1]	Loss 1.733 (1.733)	test_acc   0.31 (  0.31)	test_minacc   0.24 (  0.24)	test_majacc   0.98 (  0.98)	Loss_d 1.733 (1.733)	test_acc_d   0.31 (  0.31)	test_minacc_d   0.24 (  0.24)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.68 (  0.68)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/144/checkpoints/model_best.pth
Overall Timing[  6/  1]	epoch_time 0.0456 (0.0466)	validation_time 0.0004 (0.0013)	train_time 0.0451 (0.0439)
record: (train_acc, test_acc) (0.8737000168561936, 0.31300002336502075)
last accs (train_acc, test_acc) (0.8737000168561936, 0.31300002336502075)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.17it/s] 19%|#9        | 5/26 [00:00<00:00, 24.00it/s] 35%|###4      | 9/26 [00:00<00:00, 29.67it/s] 50%|#####     | 13/26 [00:00<00:00, 31.69it/s] 65%|######5   | 17/26 [00:00<00:00, 32.61it/s] 81%|########  | 21/26 [00:00<00:00, 33.48it/s] 96%|#########6| 25/26 [00:00<00:00, 34.65it/s]100%|##########| 26/26 [00:00<00:00, 29.70it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 182 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 183 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 184 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 185 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 186 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 187 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 188 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 189 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 190 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 191 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 192 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 193 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 194 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 195 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 196 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 197 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 198 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 199 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 200 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 201 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 202 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 203 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 204 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 205 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 206 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 207 400
penalty weights 0.0
Epoch: [7][  26/  26]	Loss 0.271 (0.294)	train_nll   0.27 (  0.29)	train_penalty   0.01 (  0.01)	weight_norm  22.69 ( 22.60)	train_acc   0.88 (  0.88)	train_minacc   0.40 (  0.44)	train_majacc   0.95 (  0.95)	train_corr   0.00 (  0.00)	l1 6.1950 (6.4026)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.98it/s] 23%|##3       | 6/26 [00:00<00:00, 30.33it/s]                                               23%|##3       | 6/26 [00:00<00:00, 30.33it/s] 42%|####2     | 11/26 [00:00<00:00, 36.25it/s] 62%|######1   | 16/26 [00:00<00:00, 40.87it/s]                                                62%|######1   | 16/26 [00:00<00:00, 40.87it/s] 81%|########  | 21/26 [00:00<00:00, 39.77it/s]100%|##########| 26/26 [00:00<00:00, 42.15it/s]100%|##########| 26/26 [00:00<00:00, 35.24it/s]
Test: [   0/  26]	Loss 0.283 (0.283)	test_acc   0.90 (  0.90)	test_minacc   0.42 (  0.42)	test_majacc   0.97 (  0.97)	Loss_d 0.283 (0.283)	test_acc_d   0.90 (  0.90)	test_minacc_d   0.42 (  0.42)	test_majacc_d   0.97 (  0.97)	test_corr_d   0.90 (  0.90)
Test: [  10/  26]	Loss 0.267 (0.272)	test_acc   0.89 (  0.89)	test_minacc   0.52 (  0.42)	test_majacc   0.96 (  0.96)	Loss_d 0.267 (0.272)	test_acc_d   0.89 (  0.89)	test_minacc_d   0.52 (  0.42)	test_majacc_d   0.96 (  0.96)	test_corr_d   0.88 (  0.89)
Test: [  20/  26]	Loss 0.312 (0.280)	test_acc   0.87 (  0.88)	test_minacc   0.43 (  0.43)	test_majacc   0.97 (  0.97)	Loss_d 0.312 (0.280)	test_acc_d   0.87 (  0.88)	test_minacc_d   0.43 (  0.43)	test_majacc_d   0.97 (  0.97)	test_corr_d   0.87 (  0.88)
Test: [  26/  26]	Loss 0.253 (0.278)	test_acc   0.89 (  0.88)	test_minacc   0.40 (  0.43)	test_majacc   0.97 (  0.96)	Loss_d 0.253 (0.278)	test_acc_d   0.89 (  0.88)	test_minacc_d   0.40 (  0.43)	test_majacc_d   0.97 (  0.96)	test_corr_d   0.89 (  0.88)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 59.99it/s]
Test: [  0/  1]	Loss 1.881 (1.881)	test_acc   0.34 (  0.34)	test_minacc   0.26 (  0.26)	test_majacc   0.98 (  0.98)	Loss_d 1.881 (1.881)	test_acc_d   0.34 (  0.34)	test_minacc_d   0.26 (  0.26)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.67 (  0.67)
Test: [  1/  1]	Loss 1.881 (1.881)	test_acc   0.34 (  0.34)	test_minacc   0.26 (  0.26)	test_majacc   0.98 (  0.98)	Loss_d 1.881 (1.881)	test_acc_d   0.34 (  0.34)	test_minacc_d   0.26 (  0.26)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.67 (  0.67)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/144/checkpoints/model_best.pth
Overall Timing[  7/  1]	epoch_time 0.0397 (0.0457)	validation_time 0.0004 (0.0012)	train_time 0.0393 (0.0433)
record: (train_acc, test_acc) (0.8846000247597694, 0.33500000834465027)
last accs (train_acc, test_acc) (0.8846000247597694, 0.33500000834465027)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:05,  4.66it/s] 15%|#5        | 4/26 [00:00<00:01, 14.66it/s] 31%|###       | 8/26 [00:00<00:00, 22.37it/s] 46%|####6     | 12/26 [00:00<00:00, 26.33it/s] 62%|######1   | 16/26 [00:00<00:00, 29.02it/s] 77%|#######6  | 20/26 [00:00<00:00, 30.75it/s] 92%|#########2| 24/26 [00:00<00:00, 31.97it/s]100%|##########| 26/26 [00:01<00:00, 25.49it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 208 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 209 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 210 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 211 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 212 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 213 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 214 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 215 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 216 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 217 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 218 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 219 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 220 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 221 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 222 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 223 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 224 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 225 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 226 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 227 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 228 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 229 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 230 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 231 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 232 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 233 400
penalty weights 0.0
Epoch: [8][  26/  26]	Loss 0.241 (0.269)	train_nll   0.24 (  0.27)	train_penalty   0.01 (  0.01)	weight_norm  22.90 ( 22.79)	train_acc   0.90 (  0.89)	train_minacc   0.57 (  0.53)	train_majacc   0.96 (  0.95)	train_corr   0.00 (  0.00)	l1 6.2303 (6.5088)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.18it/s] 15%|#5        | 4/26 [00:00<00:01, 13.20it/s] 35%|###4      | 9/26 [00:00<00:00, 24.74it/s]                                               35%|###4      | 9/26 [00:00<00:00, 24.74it/s] 54%|#####3    | 14/26 [00:00<00:00, 31.89it/s] 73%|#######3  | 19/26 [00:00<00:00, 36.83it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 36.83it/s] 92%|#########2| 24/26 [00:00<00:00, 38.47it/s]100%|##########| 26/26 [00:00<00:00, 29.78it/s]
Test: [   0/  26]	Loss 0.258 (0.258)	test_acc   0.88 (  0.88)	test_minacc   0.30 (  0.30)	test_majacc   0.97 (  0.97)	Loss_d 0.258 (0.258)	test_acc_d   0.88 (  0.88)	test_minacc_d   0.30 (  0.30)	test_majacc_d   0.97 (  0.97)	test_corr_d   0.91 (  0.91)
Test: [  10/  26]	Loss 0.287 (0.277)	test_acc   0.88 (  0.89)	test_minacc   0.39 (  0.35)	test_majacc   0.97 (  0.98)	Loss_d 0.287 (0.277)	test_acc_d   0.88 (  0.89)	test_minacc_d   0.39 (  0.35)	test_majacc_d   0.97 (  0.98)	test_corr_d   0.90 (  0.91)
Test: [  20/  26]	Loss 0.295 (0.278)	test_acc   0.88 (  0.88)	test_minacc   0.43 (  0.38)	test_majacc   0.98 (  0.97)	Loss_d 0.295 (0.278)	test_acc_d   0.88 (  0.88)	test_minacc_d   0.43 (  0.38)	test_majacc_d   0.98 (  0.97)	test_corr_d   0.88 (  0.90)
Test: [  26/  26]	Loss 0.213 (0.272)	test_acc   0.92 (  0.89)	test_minacc   0.51 (  0.39)	test_majacc   0.99 (  0.98)	Loss_d 0.213 (0.272)	test_acc_d   0.92 (  0.89)	test_minacc_d   0.51 (  0.39)	test_majacc_d   0.99 (  0.98)	test_corr_d   0.91 (  0.90)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 64.27it/s]
Test: [  0/  1]	Loss 2.085 (2.085)	test_acc   0.30 (  0.30)	test_minacc   0.23 (  0.23)	test_majacc   0.97 (  0.97)	Loss_d 2.085 (2.085)	test_acc_d   0.30 (  0.30)	test_minacc_d   0.23 (  0.23)	test_majacc_d   0.97 (  0.97)	test_corr_d   0.72 (  0.72)
Test: [  1/  1]	Loss 2.085 (2.085)	test_acc   0.30 (  0.30)	test_minacc   0.23 (  0.23)	test_majacc   0.97 (  0.97)	Loss_d 2.085 (2.085)	test_acc_d   0.30 (  0.30)	test_minacc_d   0.23 (  0.23)	test_majacc_d   0.97 (  0.97)	test_corr_d   0.72 (  0.72)
Overall Timing[  8/  1]	epoch_time 0.0432 (0.0454)	validation_time 0.0006 (0.0011)	train_time 0.0426 (0.0433)
record: (train_acc, test_acc) (0.8846000247597694, 0.33500000834465027)
last accs (train_acc, test_acc) (0.8876000232696534, 0.30300000309944153)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 19.75it/s] 23%|##3       | 6/26 [00:00<00:00, 29.37it/s] 38%|###8      | 10/26 [00:00<00:00, 31.92it/s] 54%|#####3    | 14/26 [00:00<00:00, 33.33it/s] 69%|######9   | 18/26 [00:00<00:00, 34.07it/s] 85%|########4 | 22/26 [00:00<00:00, 34.57it/s]100%|##########| 26/26 [00:00<00:00, 35.00it/s]100%|##########| 26/26 [00:00<00:00, 31.00it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 234 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 235 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 236 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 237 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 238 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 239 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 240 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 241 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 242 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 243 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 244 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 245 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 246 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 247 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 248 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 249 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 250 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 251 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 252 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 253 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 254 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 255 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 256 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 257 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 258 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 259 400
penalty weights 0.0
Epoch: [9][  26/  26]	Loss 0.224 (0.262)	train_nll   0.22 (  0.26)	train_penalty   0.00 (  0.01)	weight_norm  23.18 ( 23.04)	train_acc   0.91 (  0.89)	train_minacc   0.57 (  0.57)	train_majacc   0.97 (  0.95)	train_corr   0.00 (  0.00)	l1 6.2867 (6.4410)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:06,  4.13it/s] 19%|#9        | 5/26 [00:00<00:01, 16.86it/s] 38%|###8      | 10/26 [00:00<00:00, 28.04it/s]                                                38%|###8      | 10/26 [00:00<00:00, 28.04it/s] 58%|#####7    | 15/26 [00:00<00:00, 31.93it/s] 77%|#######6  | 20/26 [00:00<00:00, 36.82it/s]                                                77%|#######6  | 20/26 [00:00<00:00, 36.82it/s] 96%|#########6| 25/26 [00:00<00:00, 39.87it/s]100%|##########| 26/26 [00:00<00:00, 30.12it/s]
Test: [   0/  26]	Loss 0.217 (0.217)	test_acc   0.91 (  0.91)	test_minacc   0.49 (  0.49)	test_majacc   0.98 (  0.98)	Loss_d 0.217 (0.217)	test_acc_d   0.91 (  0.91)	test_minacc_d   0.49 (  0.49)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.88 (  0.88)
Test: [  10/  26]	Loss 0.251 (0.256)	test_acc   0.89 (  0.89)	test_minacc   0.45 (  0.42)	test_majacc   0.98 (  0.97)	Loss_d 0.251 (0.256)	test_acc_d   0.89 (  0.89)	test_minacc_d   0.45 (  0.42)	test_majacc_d   0.98 (  0.97)	test_corr_d   0.88 (  0.88)
Test: [  20/  26]	Loss 0.256 (0.256)	test_acc   0.90 (  0.89)	test_minacc   0.52 (  0.45)	test_majacc   0.98 (  0.97)	Loss_d 0.256 (0.256)	test_acc_d   0.90 (  0.89)	test_minacc_d   0.52 (  0.45)	test_majacc_d   0.98 (  0.97)	test_corr_d   0.86 (  0.88)
Test: [  26/  26]	Loss 0.194 (0.248)	test_acc   0.93 (  0.90)	test_minacc   0.60 (  0.47)	test_majacc   0.98 (  0.97)	Loss_d 0.194 (0.248)	test_acc_d   0.93 (  0.90)	test_minacc_d   0.60 (  0.47)	test_majacc_d   0.98 (  0.97)	test_corr_d   0.88 (  0.88)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.86it/s]
Test: [  0/  1]	Loss 2.098 (2.098)	test_acc   0.32 (  0.32)	test_minacc   0.25 (  0.25)	test_majacc   0.98 (  0.98)	Loss_d 2.098 (2.098)	test_acc_d   0.32 (  0.32)	test_minacc_d   0.25 (  0.25)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.64 (  0.64)
Test: [  1/  1]	Loss 2.098 (2.098)	test_acc   0.32 (  0.32)	test_minacc   0.25 (  0.25)	test_majacc   0.98 (  0.98)	Loss_d 2.098 (2.098)	test_acc_d   0.32 (  0.32)	test_minacc_d   0.25 (  0.25)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.64 (  0.64)
Overall Timing[  9/  1]	epoch_time 0.0407 (0.0450)	validation_time 0.0005 (0.0011)	train_time 0.0402 (0.0429)
record: (train_acc, test_acc) (0.8846000247597694, 0.33500000834465027)
last accs (train_acc, test_acc) (0.8973000242710113, 0.3240000009536743)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.98it/s] 15%|#5        | 4/26 [00:00<00:01, 18.25it/s] 31%|###       | 8/26 [00:00<00:00, 24.48it/s] 46%|####6     | 12/26 [00:00<00:00, 27.74it/s] 62%|######1   | 16/26 [00:00<00:00, 29.80it/s] 77%|#######6  | 20/26 [00:00<00:00, 31.22it/s] 92%|#########2| 24/26 [00:00<00:00, 32.56it/s]100%|##########| 26/26 [00:00<00:00, 27.43it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 260 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 261 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 262 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 263 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 264 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 265 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 266 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 267 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 268 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 269 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 270 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 271 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 272 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 273 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 274 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 275 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 276 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 277 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 278 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 279 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 280 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 281 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 282 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 283 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 284 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 285 400
penalty weights 0.0
Epoch: [10][  26/  26]	Loss 0.205 (0.247)	train_nll   0.20 (  0.25)	train_penalty   0.00 (  0.01)	weight_norm  23.52 ( 23.35)	train_acc   0.92 (  0.90)	train_minacc   0.69 (  0.59)	train_majacc   0.96 (  0.95)	train_corr   0.00 (  0.00)	l1 6.0411 (6.4200)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.40it/s] 15%|#5        | 4/26 [00:00<00:01, 14.49it/s] 35%|###4      | 9/26 [00:00<00:00, 26.66it/s]                                               35%|###4      | 9/26 [00:00<00:00, 26.66it/s] 54%|#####3    | 14/26 [00:00<00:00, 34.42it/s] 73%|#######3  | 19/26 [00:00<00:00, 37.49it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 37.49it/s] 92%|#########2| 24/26 [00:00<00:00, 37.61it/s]100%|##########| 26/26 [00:00<00:00, 30.41it/s]
Test: [   0/  26]	Loss 0.230 (0.230)	test_acc   0.91 (  0.91)	test_minacc   0.45 (  0.45)	test_majacc   0.98 (  0.98)	Loss_d 0.230 (0.230)	test_acc_d   0.91 (  0.91)	test_minacc_d   0.45 (  0.45)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.89 (  0.89)
Test: [  10/  26]	Loss 0.241 (0.236)	test_acc   0.89 (  0.90)	test_minacc   0.55 (  0.51)	test_majacc   0.96 (  0.97)	Loss_d 0.241 (0.236)	test_acc_d   0.89 (  0.90)	test_minacc_d   0.55 (  0.51)	test_majacc_d   0.96 (  0.97)	test_corr_d   0.86 (  0.87)
Test: [  20/  26]	Loss 0.266 (0.239)	test_acc   0.89 (  0.90)	test_minacc   0.58 (  0.53)	test_majacc   0.95 (  0.97)	Loss_d 0.266 (0.239)	test_acc_d   0.89 (  0.90)	test_minacc_d   0.58 (  0.53)	test_majacc_d   0.95 (  0.97)	test_corr_d   0.83 (  0.86)
Test: [  26/  26]	Loss 0.168 (0.232)	test_acc   0.94 (  0.91)	test_minacc   0.69 (  0.54)	test_majacc   0.98 (  0.97)	Loss_d 0.168 (0.232)	test_acc_d   0.94 (  0.91)	test_minacc_d   0.69 (  0.54)	test_majacc_d   0.98 (  0.97)	test_corr_d   0.85 (  0.86)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 65.12it/s]
Test: [  0/  1]	Loss 2.158 (2.158)	test_acc   0.34 (  0.34)	test_minacc   0.27 (  0.27)	test_majacc   0.97 (  0.97)	Loss_d 2.158 (2.158)	test_acc_d   0.34 (  0.34)	test_minacc_d   0.27 (  0.27)	test_majacc_d   0.97 (  0.97)	test_corr_d   0.63 (  0.63)
Test: [  1/  1]	Loss 2.158 (2.158)	test_acc   0.34 (  0.34)	test_minacc   0.27 (  0.27)	test_majacc   0.97 (  0.97)	Loss_d 2.158 (2.158)	test_acc_d   0.34 (  0.34)	test_minacc_d   0.27 (  0.27)	test_majacc_d   0.97 (  0.97)	test_corr_d   0.63 (  0.63)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/144/checkpoints/model_best.pth
Overall Timing[ 10/  1]	epoch_time 0.0437 (0.0448)	validation_time 0.0003 (0.0010)	train_time 0.0434 (0.0430)
record: (train_acc, test_acc) (0.9064000253081321, 0.3440000116825104)
last accs (train_acc, test_acc) (0.9064000253081321, 0.3440000116825104)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.49it/s] 19%|#9        | 5/26 [00:00<00:00, 22.56it/s] 35%|###4      | 9/26 [00:00<00:00, 28.24it/s] 50%|#####     | 13/26 [00:00<00:00, 31.06it/s] 65%|######5   | 17/26 [00:00<00:00, 32.74it/s] 81%|########  | 21/26 [00:00<00:00, 33.85it/s] 96%|#########6| 25/26 [00:00<00:00, 34.41it/s]100%|##########| 26/26 [00:00<00:00, 29.62it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 286 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 287 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 288 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 289 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 290 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 291 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 292 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 293 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 294 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 295 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 296 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 297 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 298 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 299 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 300 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 301 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 302 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 303 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 304 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 305 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 306 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 307 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 308 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 309 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 310 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 311 400
penalty weights 0.0
Epoch: [11][  26/  26]	Loss 0.217 (0.228)	train_nll   0.22 (  0.23)	train_penalty   0.00 (  0.01)	weight_norm  23.91 ( 23.71)	train_acc   0.92 (  0.91)	train_minacc   0.77 (  0.65)	train_majacc   0.95 (  0.96)	train_corr   0.00 (  0.00)	l1 5.6373 (6.6810)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:02,  8.35it/s] 31%|###       | 8/26 [00:00<00:00, 26.98it/s]                                               31%|###       | 8/26 [00:00<00:00, 26.98it/s] 54%|#####3    | 14/26 [00:00<00:00, 35.29it/s] 77%|#######6  | 20/26 [00:00<00:00, 41.56it/s]                                                77%|#######6  | 20/26 [00:00<00:00, 41.56it/s]100%|##########| 26/26 [00:00<00:00, 45.53it/s]100%|##########| 26/26 [00:00<00:00, 34.58it/s]
Test: [   0/  26]	Loss 0.232 (0.232)	test_acc   0.91 (  0.91)	test_minacc   0.60 (  0.60)	test_majacc   0.95 (  0.95)	Loss_d 0.232 (0.232)	test_acc_d   0.91 (  0.91)	test_minacc_d   0.60 (  0.60)	test_majacc_d   0.95 (  0.95)	test_corr_d   0.83 (  0.83)
Test: [  10/  26]	Loss 0.248 (0.254)	test_acc   0.89 (  0.89)	test_minacc   0.63 (  0.60)	test_majacc   0.94 (  0.94)	Loss_d 0.248 (0.254)	test_acc_d   0.89 (  0.89)	test_minacc_d   0.63 (  0.60)	test_majacc_d   0.94 (  0.94)	test_corr_d   0.80 (  0.81)
Test: [  20/  26]	Loss 0.245 (0.253)	test_acc   0.91 (  0.89)	test_minacc   0.71 (  0.61)	test_majacc   0.95 (  0.94)	Loss_d 0.245 (0.253)	test_acc_d   0.91 (  0.89)	test_minacc_d   0.71 (  0.61)	test_majacc_d   0.95 (  0.94)	test_corr_d   0.78 (  0.81)
Test: [  26/  26]	Loss 0.192 (0.247)	test_acc   0.94 (  0.90)	test_minacc   0.80 (  0.63)	test_majacc   0.96 (  0.94)	Loss_d 0.192 (0.247)	test_acc_d   0.94 (  0.90)	test_minacc_d   0.80 (  0.63)	test_majacc_d   0.96 (  0.94)	test_corr_d   0.82 (  0.81)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 65.13it/s]
Test: [  0/  1]	Loss 1.831 (1.831)	test_acc   0.40 (  0.40)	test_minacc   0.34 (  0.34)	test_majacc   0.93 (  0.93)	Loss_d 1.831 (1.831)	test_acc_d   0.40 (  0.40)	test_minacc_d   0.34 (  0.34)	test_majacc_d   0.93 (  0.93)	test_corr_d   0.53 (  0.53)
Test: [  1/  1]	Loss 1.831 (1.831)	test_acc   0.40 (  0.40)	test_minacc   0.34 (  0.34)	test_majacc   0.93 (  0.93)	Loss_d 1.831 (1.831)	test_acc_d   0.40 (  0.40)	test_minacc_d   0.34 (  0.34)	test_majacc_d   0.93 (  0.93)	test_corr_d   0.53 (  0.53)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/144/checkpoints/model_best.pth
Overall Timing[ 11/  1]	epoch_time 0.0414 (0.0446)	validation_time 0.0006 (0.0010)	train_time 0.0408 (0.0428)
record: (train_acc, test_acc) (0.8965000270605087, 0.40300002694129944)
last accs (train_acc, test_acc) (0.8965000270605087, 0.40300002694129944)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.13it/s] 19%|#9        | 5/26 [00:00<00:00, 23.47it/s] 35%|###4      | 9/26 [00:00<00:00, 29.41it/s] 50%|#####     | 13/26 [00:00<00:00, 32.40it/s] 65%|######5   | 17/26 [00:00<00:00, 33.57it/s] 81%|########  | 21/26 [00:00<00:00, 34.59it/s] 96%|#########6| 25/26 [00:00<00:00, 35.18it/s]100%|##########| 26/26 [00:00<00:00, 30.19it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 312 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 313 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 314 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 315 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 316 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 317 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 318 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 319 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 320 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 321 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 322 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 323 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 324 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 325 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 326 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 327 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 328 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 329 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 330 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 331 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 332 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 333 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 334 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 335 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 336 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 337 400
penalty weights 0.0
Epoch: [12][  26/  26]	Loss 0.237 (0.222)	train_nll   0.24 (  0.22)	train_penalty   0.00 (  0.01)	weight_norm  24.34 ( 24.13)	train_acc   0.91 (  0.91)	train_minacc   0.66 (  0.66)	train_majacc   0.95 (  0.96)	train_corr   0.00 (  0.00)	l1 6.2717 (6.8145)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 19.62it/s] 27%|##6       | 7/26 [00:00<00:00, 36.93it/s]                                               27%|##6       | 7/26 [00:00<00:00, 36.93it/s] 46%|####6     | 12/26 [00:00<00:00, 41.50it/s] 65%|######5   | 17/26 [00:00<00:00, 43.52it/s]                                                65%|######5   | 17/26 [00:00<00:00, 43.52it/s] 85%|########4 | 22/26 [00:00<00:00, 41.46it/s]100%|##########| 26/26 [00:00<00:00, 38.92it/s]
Test: [   0/  26]	Loss 0.196 (0.196)	test_acc   0.92 (  0.92)	test_minacc   0.64 (  0.64)	test_majacc   0.96 (  0.96)	Loss_d 0.196 (0.196)	test_acc_d   0.92 (  0.92)	test_minacc_d   0.64 (  0.64)	test_majacc_d   0.96 (  0.96)	test_corr_d   0.85 (  0.85)
Test: [  10/  26]	Loss 0.193 (0.213)	test_acc   0.92 (  0.91)	test_minacc   0.71 (  0.63)	test_majacc   0.96 (  0.96)	Loss_d 0.193 (0.213)	test_acc_d   0.92 (  0.91)	test_minacc_d   0.71 (  0.63)	test_majacc_d   0.96 (  0.96)	test_corr_d   0.81 (  0.82)
Test: [  20/  26]	Loss 0.178 (0.206)	test_acc   0.94 (  0.92)	test_minacc   0.75 (  0.65)	test_majacc   0.98 (  0.97)	Loss_d 0.178 (0.206)	test_acc_d   0.94 (  0.92)	test_minacc_d   0.75 (  0.65)	test_majacc_d   0.98 (  0.97)	test_corr_d   0.78 (  0.82)
Test: [  26/  26]	Loss 0.182 (0.202)	test_acc   0.95 (  0.92)	test_minacc   0.77 (  0.66)	test_majacc   0.98 (  0.97)	Loss_d 0.182 (0.202)	test_acc_d   0.95 (  0.92)	test_minacc_d   0.77 (  0.66)	test_majacc_d   0.98 (  0.97)	test_corr_d   0.82 (  0.82)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.10it/s]
Test: [  0/  1]	Loss 1.976 (1.976)	test_acc   0.37 (  0.37)	test_minacc   0.31 (  0.31)	test_majacc   0.97 (  0.97)	Loss_d 1.976 (1.976)	test_acc_d   0.37 (  0.37)	test_minacc_d   0.31 (  0.31)	test_majacc_d   0.97 (  0.97)	test_corr_d   0.57 (  0.57)
Test: [  1/  1]	Loss 1.976 (1.976)	test_acc   0.37 (  0.37)	test_minacc   0.31 (  0.31)	test_majacc   0.97 (  0.97)	Loss_d 1.976 (1.976)	test_acc_d   0.37 (  0.37)	test_minacc_d   0.31 (  0.31)	test_majacc_d   0.97 (  0.97)	test_corr_d   0.57 (  0.57)
Overall Timing[ 12/  1]	epoch_time 0.0383 (0.0441)	validation_time 0.0003 (0.0009)	train_time 0.0380 (0.0424)
record: (train_acc, test_acc) (0.8965000270605087, 0.40300002694129944)
last accs (train_acc, test_acc) (0.9220000215172768, 0.37300002574920654)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 18.87it/s] 23%|##3       | 6/26 [00:00<00:00, 28.78it/s] 38%|###8      | 10/26 [00:00<00:00, 31.87it/s] 54%|#####3    | 14/26 [00:00<00:00, 32.97it/s] 69%|######9   | 18/26 [00:00<00:00, 34.21it/s] 85%|########4 | 22/26 [00:00<00:00, 34.78it/s]100%|##########| 26/26 [00:00<00:00, 35.06it/s]100%|##########| 26/26 [00:00<00:00, 31.25it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 338 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 339 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 340 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 341 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 342 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 343 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 344 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 345 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 346 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 347 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 348 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 349 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 350 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 351 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 352 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 353 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 354 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 355 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 356 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 357 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 358 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 359 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 360 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 361 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 362 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 363 400
penalty weights 0.0
Epoch: [13][  26/  26]	Loss 0.236 (0.201)	train_nll   0.24 (  0.20)	train_penalty   0.00 (  0.01)	weight_norm  24.78 ( 24.56)	train_acc   0.92 (  0.92)	train_minacc   0.69 (  0.68)	train_majacc   0.96 (  0.96)	train_corr   0.00 (  0.00)	l1 6.7709 (7.1199)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.33it/s] 23%|##3       | 6/26 [00:00<00:00, 24.30it/s]                                               23%|##3       | 6/26 [00:00<00:00, 24.30it/s] 42%|####2     | 11/26 [00:00<00:00, 32.75it/s] 62%|######1   | 16/26 [00:00<00:00, 37.72it/s]                                                62%|######1   | 16/26 [00:00<00:00, 37.72it/s] 81%|########  | 21/26 [00:00<00:00, 37.52it/s]100%|##########| 26/26 [00:00<00:00, 40.85it/s]100%|##########| 26/26 [00:00<00:00, 32.36it/s]
Test: [   0/  26]	Loss 0.186 (0.186)	test_acc   0.93 (  0.93)	test_minacc   0.72 (  0.72)	test_majacc   0.96 (  0.96)	Loss_d 0.186 (0.186)	test_acc_d   0.93 (  0.93)	test_minacc_d   0.72 (  0.72)	test_majacc_d   0.96 (  0.96)	test_corr_d   0.82 (  0.82)
Test: [  10/  26]	Loss 0.201 (0.211)	test_acc   0.92 (  0.91)	test_minacc   0.74 (  0.66)	test_majacc   0.95 (  0.95)	Loss_d 0.201 (0.211)	test_acc_d   0.92 (  0.91)	test_minacc_d   0.74 (  0.66)	test_majacc_d   0.95 (  0.95)	test_corr_d   0.76 (  0.80)
Test: [  20/  26]	Loss 0.201 (0.200)	test_acc   0.92 (  0.92)	test_minacc   0.74 (  0.68)	test_majacc   0.96 (  0.96)	Loss_d 0.201 (0.200)	test_acc_d   0.92 (  0.92)	test_minacc_d   0.74 (  0.68)	test_majacc_d   0.96 (  0.96)	test_corr_d   0.75 (  0.80)
Test: [  26/  26]	Loss 0.157 (0.192)	test_acc   0.95 (  0.92)	test_minacc   0.80 (  0.70)	test_majacc   0.97 (  0.96)	Loss_d 0.157 (0.192)	test_acc_d   0.95 (  0.92)	test_minacc_d   0.80 (  0.70)	test_majacc_d   0.97 (  0.96)	test_corr_d   0.80 (  0.79)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.54it/s]
Test: [  0/  1]	Loss 2.077 (2.077)	test_acc   0.42 (  0.42)	test_minacc   0.36 (  0.36)	test_majacc   0.94 (  0.94)	Loss_d 2.077 (2.077)	test_acc_d   0.42 (  0.42)	test_minacc_d   0.36 (  0.36)	test_majacc_d   0.94 (  0.94)	test_corr_d   0.46 (  0.46)
Test: [  1/  1]	Loss 2.077 (2.077)	test_acc   0.42 (  0.42)	test_minacc   0.36 (  0.36)	test_majacc   0.94 (  0.94)	Loss_d 2.077 (2.077)	test_acc_d   0.42 (  0.42)	test_minacc_d   0.36 (  0.36)	test_majacc_d   0.94 (  0.94)	test_corr_d   0.46 (  0.46)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/144/checkpoints/model_best.pth
Overall Timing[ 13/  1]	epoch_time 0.0418 (0.0439)	validation_time 0.0004 (0.0009)	train_time 0.0414 (0.0424)
record: (train_acc, test_acc) (0.9222000191807747, 0.41700002551078796)
last accs (train_acc, test_acc) (0.9222000191807747, 0.41700002551078796)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.30it/s] 19%|#9        | 5/26 [00:00<00:01, 20.05it/s] 35%|###4      | 9/26 [00:00<00:00, 25.50it/s] 50%|#####     | 13/26 [00:00<00:00, 28.52it/s] 65%|######5   | 17/26 [00:00<00:00, 30.28it/s] 81%|########  | 21/26 [00:00<00:00, 31.63it/s] 96%|#########6| 25/26 [00:00<00:00, 32.72it/s]100%|##########| 26/26 [00:00<00:00, 27.05it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 364 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 365 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 366 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 367 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 368 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 369 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 370 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 371 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 372 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 373 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 374 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 375 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 376 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 377 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 378 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 379 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 380 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 381 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 382 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 383 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 384 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 385 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 386 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 387 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 388 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 389 400
penalty weights 0.0
Epoch: [14][  26/  26]	Loss 0.139 (0.180)	train_nll   0.14 (  0.18)	train_penalty   0.00 (  0.00)	weight_norm  25.26 ( 25.03)	train_acc   0.96 (  0.93)	train_minacc   0.77 (  0.72)	train_majacc   0.99 (  0.96)	train_corr   0.00 (  0.00)	l1 7.7500 (7.5078)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:06,  3.86it/s] 23%|##3       | 6/26 [00:00<00:01, 19.65it/s]                                               23%|##3       | 6/26 [00:00<00:01, 19.65it/s] 42%|####2     | 11/26 [00:00<00:00, 28.00it/s] 62%|######1   | 16/26 [00:00<00:00, 33.85it/s]                                                62%|######1   | 16/26 [00:00<00:00, 33.85it/s] 81%|########  | 21/26 [00:00<00:00, 36.14it/s]100%|##########| 26/26 [00:00<00:00, 39.73it/s]100%|##########| 26/26 [00:00<00:00, 29.43it/s]
Test: [   0/  26]	Loss 0.164 (0.164)	test_acc   0.93 (  0.93)	test_minacc   0.64 (  0.64)	test_majacc   0.98 (  0.98)	Loss_d 0.164 (0.164)	test_acc_d   0.93 (  0.93)	test_minacc_d   0.64 (  0.64)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.83 (  0.83)
Test: [  10/  26]	Loss 0.168 (0.188)	test_acc   0.93 (  0.92)	test_minacc   0.69 (  0.64)	test_majacc   0.97 (  0.97)	Loss_d 0.168 (0.188)	test_acc_d   0.93 (  0.92)	test_minacc_d   0.69 (  0.64)	test_majacc_d   0.97 (  0.97)	test_corr_d   0.78 (  0.82)
Test: [  20/  26]	Loss 0.142 (0.170)	test_acc   0.96 (  0.93)	test_minacc   0.83 (  0.68)	test_majacc   0.98 (  0.97)	Loss_d 0.142 (0.170)	test_acc_d   0.96 (  0.93)	test_minacc_d   0.83 (  0.68)	test_majacc_d   0.98 (  0.97)	test_corr_d   0.75 (  0.81)
Test: [  26/  26]	Loss 0.100 (0.162)	test_acc   0.97 (  0.94)	test_minacc   0.80 (  0.71)	test_majacc   1.00 (  0.98)	Loss_d 0.100 (0.162)	test_acc_d   0.97 (  0.94)	test_minacc_d   0.80 (  0.71)	test_majacc_d   1.00 (  0.98)	test_corr_d   0.82 (  0.81)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 60.68it/s]
Test: [  0/  1]	Loss 2.571 (2.571)	test_acc   0.38 (  0.38)	test_minacc   0.32 (  0.32)	test_majacc   0.97 (  0.97)	Loss_d 2.571 (2.571)	test_acc_d   0.38 (  0.38)	test_minacc_d   0.32 (  0.32)	test_majacc_d   0.97 (  0.97)	test_corr_d   0.52 (  0.52)
Test: [  1/  1]	Loss 2.571 (2.571)	test_acc   0.38 (  0.38)	test_minacc   0.32 (  0.32)	test_majacc   0.97 (  0.97)	Loss_d 2.571 (2.571)	test_acc_d   0.38 (  0.38)	test_minacc_d   0.32 (  0.32)	test_majacc_d   0.97 (  0.97)	test_corr_d   0.52 (  0.52)
Overall Timing[ 14/  1]	epoch_time 0.0402 (0.0437)	validation_time 0.0005 (0.0009)	train_time 0.0397 (0.0422)
record: (train_acc, test_acc) (0.9222000191807747, 0.41700002551078796)
last accs (train_acc, test_acc) (0.9358000214099884, 0.38100001215934753)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.42it/s] 15%|#5        | 4/26 [00:00<00:01, 17.72it/s] 31%|###       | 8/26 [00:00<00:00, 25.37it/s] 46%|####6     | 12/26 [00:00<00:00, 29.08it/s] 62%|######1   | 16/26 [00:00<00:00, 31.12it/s] 77%|#######6  | 20/26 [00:00<00:00, 32.22it/s] 92%|#########2| 24/26 [00:00<00:00, 33.31it/s]100%|##########| 26/26 [00:00<00:00, 28.16it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 390 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 391 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 392 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 393 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 394 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 395 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 396 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 397 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 398 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 399 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 400 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 401 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 402 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 403 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 404 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 405 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 406 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 407 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 408 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 409 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 410 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 411 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 412 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 413 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 414 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 415 400
penalty weights 10000.0
Epoch: [15][  26/  26]	Loss 0.002 (0.071)	train_nll   0.22 (  0.20)	train_penalty   0.00 (  0.00)	weight_norm  25.66 ( 25.50)	train_acc   0.90 (  0.92)	train_minacc   0.83 (  0.74)	train_majacc   0.91 (  0.95)	train_corr   0.00 (  0.00)	l1 6.7852 (7.4256)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.56it/s] 27%|##6       | 7/26 [00:00<00:00, 28.26it/s]                                               27%|##6       | 7/26 [00:00<00:00, 28.26it/s] 50%|#####     | 13/26 [00:00<00:00, 35.47it/s] 69%|######9   | 18/26 [00:00<00:00, 39.47it/s]                                                69%|######9   | 18/26 [00:00<00:00, 39.47it/s] 88%|########8 | 23/26 [00:00<00:00, 41.45it/s]100%|##########| 26/26 [00:00<00:00, 32.99it/s]
Test: [   0/  26]	Loss 0.221 (0.221)	test_acc   0.90 (  0.90)	test_minacc   0.91 (  0.91)	test_majacc   0.90 (  0.90)	Loss_d 0.221 (0.221)	test_acc_d   0.90 (  0.90)	test_minacc_d   0.91 (  0.91)	test_majacc_d   0.90 (  0.90)	test_corr_d   0.68 (  0.68)
Test: [  10/  26]	Loss 0.256 (0.241)	test_acc   0.89 (  0.89)	test_minacc   0.82 (  0.87)	test_majacc   0.90 (  0.90)	Loss_d 0.256 (0.241)	test_acc_d   0.89 (  0.89)	test_minacc_d   0.82 (  0.87)	test_majacc_d   0.90 (  0.90)	test_corr_d   0.69 (  0.66)
Test: [  20/  26]	Loss 0.249 (0.244)	test_acc   0.91 (  0.89)	test_minacc   0.83 (  0.86)	test_majacc   0.93 (  0.90)	Loss_d 0.249 (0.244)	test_acc_d   0.91 (  0.89)	test_minacc_d   0.83 (  0.86)	test_majacc_d   0.93 (  0.90)	test_corr_d   0.67 (  0.66)
Test: [  26/  26]	Loss 0.233 (0.246)	test_acc   0.90 (  0.89)	test_minacc   0.86 (  0.86)	test_majacc   0.91 (  0.90)	Loss_d 0.233 (0.246)	test_acc_d   0.90 (  0.89)	test_minacc_d   0.86 (  0.86)	test_majacc_d   0.91 (  0.90)	test_corr_d   0.67 (  0.66)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.21it/s]
Test: [  0/  1]	Loss 1.776 (1.776)	test_acc   0.53 (  0.53)	test_minacc   0.49 (  0.49)	test_majacc   0.90 (  0.90)	Loss_d 1.776 (1.776)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.49 (  0.49)	test_majacc_d   0.90 (  0.90)	test_corr_d   0.19 (  0.19)
Test: [  1/  1]	Loss 1.776 (1.776)	test_acc   0.53 (  0.53)	test_minacc   0.49 (  0.49)	test_majacc   0.90 (  0.90)	Loss_d 1.776 (1.776)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.49 (  0.49)	test_majacc_d   0.90 (  0.90)	test_corr_d   0.19 (  0.19)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/144/checkpoints/model_best.pth
Overall Timing[ 15/  1]	epoch_time 0.0399 (0.0434)	validation_time 0.0003 (0.0008)	train_time 0.0396 (0.0420)
record: (train_acc, test_acc) (0.8906000223755837, 0.5330000519752502)
last accs (train_acc, test_acc) (0.8906000223755837, 0.5330000519752502)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:05,  4.64it/s] 15%|#5        | 4/26 [00:00<00:01, 14.47it/s] 31%|###       | 8/26 [00:00<00:00, 22.42it/s] 46%|####6     | 12/26 [00:00<00:00, 27.17it/s] 62%|######1   | 16/26 [00:00<00:00, 29.54it/s] 77%|#######6  | 20/26 [00:00<00:00, 31.45it/s] 92%|#########2| 24/26 [00:00<00:00, 32.87it/s]100%|##########| 26/26 [00:01<00:00, 25.93it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 416 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 417 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 418 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 419 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 420 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 421 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 422 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 423 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 424 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 425 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 426 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 427 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 428 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 429 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 430 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 431 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 432 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 433 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 434 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 435 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 436 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 437 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 438 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 439 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 440 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 441 400
penalty weights 10000.0
Epoch: [16][  26/  26]	Loss 0.001 (0.001)	train_nll   0.32 (  0.29)	train_penalty   0.00 (  0.00)	weight_norm  25.73 ( 25.71)	train_acc   0.86 (  0.86)	train_minacc   0.77 (  0.86)	train_majacc   0.87 (  0.86)	train_corr   0.00 (  0.00)	l1 6.0281 (6.2707)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:06,  3.81it/s] 19%|#9        | 5/26 [00:00<00:01, 16.02it/s] 38%|###8      | 10/26 [00:00<00:00, 26.74it/s]                                                38%|###8      | 10/26 [00:00<00:00, 26.74it/s] 58%|#####7    | 15/26 [00:00<00:00, 33.99it/s] 77%|#######6  | 20/26 [00:00<00:00, 36.71it/s]                                                77%|#######6  | 20/26 [00:00<00:00, 36.71it/s] 96%|#########6| 25/26 [00:00<00:00, 39.76it/s]100%|##########| 26/26 [00:00<00:00, 29.67it/s]
Test: [   0/  26]	Loss 0.298 (0.298)	test_acc   0.85 (  0.85)	test_minacc   0.87 (  0.87)	test_majacc   0.84 (  0.84)	Loss_d 0.298 (0.298)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.87 (  0.87)	test_majacc_d   0.84 (  0.84)	test_corr_d   0.63 (  0.63)
Test: [  10/  26]	Loss 0.301 (0.295)	test_acc   0.86 (  0.86)	test_minacc   0.76 (  0.84)	test_majacc   0.88 (  0.86)	Loss_d 0.301 (0.295)	test_acc_d   0.86 (  0.86)	test_minacc_d   0.76 (  0.84)	test_majacc_d   0.88 (  0.86)	test_corr_d   0.67 (  0.64)
Test: [  20/  26]	Loss 0.298 (0.298)	test_acc   0.85 (  0.86)	test_minacc   0.78 (  0.84)	test_majacc   0.86 (  0.86)	Loss_d 0.298 (0.298)	test_acc_d   0.85 (  0.86)	test_minacc_d   0.78 (  0.84)	test_majacc_d   0.86 (  0.86)	test_corr_d   0.62 (  0.63)
Test: [  26/  26]	Loss 0.313 (0.298)	test_acc   0.86 (  0.86)	test_minacc   0.77 (  0.83)	test_majacc   0.87 (  0.86)	Loss_d 0.313 (0.298)	test_acc_d   0.86 (  0.86)	test_minacc_d   0.77 (  0.83)	test_majacc_d   0.87 (  0.86)	test_corr_d   0.66 (  0.63)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.01it/s]
Test: [  0/  1]	Loss 1.569 (1.569)	test_acc   0.53 (  0.53)	test_minacc   0.49 (  0.49)	test_majacc   0.90 (  0.90)	Loss_d 1.569 (1.569)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.49 (  0.49)	test_majacc_d   0.90 (  0.90)	test_corr_d   0.20 (  0.20)
Test: [  1/  1]	Loss 1.569 (1.569)	test_acc   0.53 (  0.53)	test_minacc   0.49 (  0.49)	test_majacc   0.90 (  0.90)	Loss_d 1.569 (1.569)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.49 (  0.49)	test_majacc_d   0.90 (  0.90)	test_corr_d   0.20 (  0.20)
Overall Timing[ 16/  1]	epoch_time 0.0411 (0.0433)	validation_time 0.0004 (0.0008)	train_time 0.0406 (0.0419)
record: (train_acc, test_acc) (0.8906000223755837, 0.5330000519752502)
last accs (train_acc, test_acc) (0.8557000274658203, 0.5330000519752502)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.53it/s] 19%|#9        | 5/26 [00:00<00:00, 21.25it/s] 31%|###       | 8/26 [00:00<00:00, 24.54it/s] 46%|####6     | 12/26 [00:00<00:00, 28.55it/s] 62%|######1   | 16/26 [00:00<00:00, 30.21it/s] 77%|#######6  | 20/26 [00:00<00:00, 32.41it/s] 92%|#########2| 24/26 [00:00<00:00, 33.43it/s]100%|##########| 26/26 [00:00<00:00, 26.92it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 442 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 443 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 444 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 445 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 446 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 447 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 448 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 449 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 450 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 451 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 452 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 453 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 454 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 455 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 456 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 457 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 458 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 459 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 460 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 461 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 462 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 463 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 464 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 465 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 466 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 467 400
penalty weights 10000.0
Epoch: [17][  26/  26]	Loss 0.000 (0.000)	train_nll   0.31 (  0.31)	train_penalty   0.00 (  0.00)	weight_norm  25.74 ( 25.74)	train_acc   0.86 (  0.85)	train_minacc   0.83 (  0.83)	train_majacc   0.87 (  0.85)	train_corr   0.00 (  0.00)	l1 5.8759 (5.9626)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:06,  3.93it/s] 23%|##3       | 6/26 [00:00<00:00, 20.40it/s]                                               23%|##3       | 6/26 [00:00<00:00, 20.40it/s] 42%|####2     | 11/26 [00:00<00:00, 27.61it/s] 62%|######1   | 16/26 [00:00<00:00, 33.65it/s]                                                62%|######1   | 16/26 [00:00<00:00, 33.65it/s] 81%|########  | 21/26 [00:00<00:00, 36.20it/s]100%|##########| 26/26 [00:00<00:00, 39.80it/s]100%|##########| 26/26 [00:00<00:00, 29.64it/s]
Test: [   0/  26]	Loss 0.320 (0.320)	test_acc   0.83 (  0.83)	test_minacc   0.89 (  0.89)	test_majacc   0.82 (  0.82)	Loss_d 0.320 (0.320)	test_acc_d   0.83 (  0.83)	test_minacc_d   0.89 (  0.89)	test_majacc_d   0.82 (  0.82)	test_corr_d   0.61 (  0.61)
Test: [  10/  26]	Loss 0.304 (0.298)	test_acc   0.85 (  0.86)	test_minacc   0.77 (  0.86)	test_majacc   0.87 (  0.86)	Loss_d 0.304 (0.298)	test_acc_d   0.85 (  0.86)	test_minacc_d   0.77 (  0.86)	test_majacc_d   0.87 (  0.86)	test_corr_d   0.65 (  0.63)
Test: [  20/  26]	Loss 0.305 (0.305)	test_acc   0.85 (  0.85)	test_minacc   0.81 (  0.84)	test_majacc   0.85 (  0.85)	Loss_d 0.305 (0.305)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.81 (  0.84)	test_majacc_d   0.85 (  0.85)	test_corr_d   0.61 (  0.62)
Test: [  26/  26]	Loss 0.309 (0.306)	test_acc   0.86 (  0.85)	test_minacc   0.83 (  0.84)	test_majacc   0.87 (  0.85)	Loss_d 0.309 (0.306)	test_acc_d   0.86 (  0.85)	test_minacc_d   0.83 (  0.84)	test_majacc_d   0.87 (  0.85)	test_corr_d   0.64 (  0.62)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 57.87it/s]
Test: [  0/  1]	Loss 1.493 (1.493)	test_acc   0.55 (  0.55)	test_minacc   0.51 (  0.51)	test_majacc   0.88 (  0.88)	Loss_d 1.493 (1.493)	test_acc_d   0.55 (  0.55)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.88 (  0.88)	test_corr_d   0.18 (  0.18)
Test: [  1/  1]	Loss 1.493 (1.493)	test_acc   0.55 (  0.55)	test_minacc   0.51 (  0.51)	test_majacc   0.88 (  0.88)	Loss_d 1.493 (1.493)	test_acc_d   0.55 (  0.55)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.88 (  0.88)	test_corr_d   0.18 (  0.18)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/144/checkpoints/model_best.pth
Overall Timing[ 17/  1]	epoch_time 0.0439 (0.0433)	validation_time 0.0004 (0.0008)	train_time 0.0436 (0.0420)
record: (train_acc, test_acc) (0.8485000231266022, 0.5509999990463257)
last accs (train_acc, test_acc) (0.8485000231266022, 0.5509999990463257)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.66it/s] 15%|#5        | 4/26 [00:00<00:01, 15.59it/s] 31%|###       | 8/26 [00:00<00:00, 23.57it/s] 46%|####6     | 12/26 [00:00<00:00, 27.45it/s] 62%|######1   | 16/26 [00:00<00:00, 29.44it/s] 77%|#######6  | 20/26 [00:00<00:00, 31.05it/s] 92%|#########2| 24/26 [00:00<00:00, 32.15it/s]100%|##########| 26/26 [00:00<00:00, 26.40it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 468 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 469 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 470 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 471 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 472 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 473 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 474 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 475 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 476 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 477 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 478 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 479 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 480 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 481 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 482 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 483 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 484 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 485 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 486 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 487 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 488 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 489 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 490 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 491 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 492 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 493 400
penalty weights 10000.0
Epoch: [18][  26/  26]	Loss 0.002 (0.001)	train_nll   0.33 (  0.31)	train_penalty   0.00 (  0.00)	weight_norm  25.74 ( 25.74)	train_acc   0.85 (  0.85)	train_minacc   0.80 (  0.83)	train_majacc   0.86 (  0.85)	train_corr   0.00 (  0.00)	l1 6.1399 (5.9178)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 17.33it/s] 27%|##6       | 7/26 [00:00<00:00, 31.37it/s]                                               27%|##6       | 7/26 [00:00<00:00, 31.37it/s] 46%|####6     | 12/26 [00:00<00:00, 37.70it/s] 65%|######5   | 17/26 [00:00<00:00, 39.17it/s]                                                65%|######5   | 17/26 [00:00<00:00, 39.17it/s] 85%|########4 | 22/26 [00:00<00:00, 41.44it/s]100%|##########| 26/26 [00:00<00:00, 35.30it/s]
Test: [   0/  26]	Loss 0.338 (0.338)	test_acc   0.83 (  0.83)	test_minacc   0.92 (  0.92)	test_majacc   0.81 (  0.81)	Loss_d 0.338 (0.338)	test_acc_d   0.83 (  0.83)	test_minacc_d   0.92 (  0.92)	test_majacc_d   0.81 (  0.81)	test_corr_d   0.59 (  0.59)
Test: [  10/  26]	Loss 0.302 (0.318)	test_acc   0.87 (  0.85)	test_minacc   0.81 (  0.85)	test_majacc   0.88 (  0.84)	Loss_d 0.302 (0.318)	test_acc_d   0.87 (  0.85)	test_minacc_d   0.81 (  0.85)	test_majacc_d   0.88 (  0.84)	test_corr_d   0.65 (  0.62)
Test: [  20/  26]	Loss 0.341 (0.327)	test_acc   0.83 (  0.84)	test_minacc   0.80 (  0.83)	test_majacc   0.83 (  0.84)	Loss_d 0.341 (0.327)	test_acc_d   0.83 (  0.84)	test_minacc_d   0.80 (  0.83)	test_majacc_d   0.83 (  0.84)	test_corr_d   0.58 (  0.60)
Test: [  26/  26]	Loss 0.324 (0.327)	test_acc   0.86 (  0.84)	test_minacc   0.83 (  0.83)	test_majacc   0.86 (  0.84)	Loss_d 0.324 (0.327)	test_acc_d   0.86 (  0.84)	test_minacc_d   0.83 (  0.83)	test_majacc_d   0.86 (  0.84)	test_corr_d   0.63 (  0.60)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.97it/s]
Test: [  0/  1]	Loss 1.585 (1.585)	test_acc   0.56 (  0.56)	test_minacc   0.53 (  0.53)	test_majacc   0.88 (  0.88)	Loss_d 1.585 (1.585)	test_acc_d   0.56 (  0.56)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.88 (  0.88)	test_corr_d   0.14 (  0.14)
Test: [  1/  1]	Loss 1.585 (1.585)	test_acc   0.56 (  0.56)	test_minacc   0.53 (  0.53)	test_majacc   0.88 (  0.88)	Loss_d 1.585 (1.585)	test_acc_d   0.56 (  0.56)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.88 (  0.88)	test_corr_d   0.14 (  0.14)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/144/checkpoints/model_best.pth
Overall Timing[ 18/  1]	epoch_time 0.0428 (0.0433)	validation_time 0.0004 (0.0008)	train_time 0.0424 (0.0420)
record: (train_acc, test_acc) (0.8364000204801559, 0.5640000104904175)
last accs (train_acc, test_acc) (0.8364000204801559, 0.5640000104904175)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:05,  4.45it/s] 19%|#9        | 5/26 [00:00<00:01, 16.78it/s] 35%|###4      | 9/26 [00:00<00:00, 23.58it/s] 50%|#####     | 13/26 [00:00<00:00, 27.58it/s] 65%|######5   | 17/26 [00:00<00:00, 29.73it/s] 81%|########  | 21/26 [00:00<00:00, 31.55it/s] 96%|#########6| 25/26 [00:00<00:00, 32.28it/s]100%|##########| 26/26 [00:01<00:00, 25.65it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 494 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 495 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 496 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 497 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 498 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 499 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 500 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 501 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 502 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 503 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 504 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 505 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 506 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 507 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 508 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 509 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 510 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 511 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 512 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 513 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 514 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 515 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 516 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 517 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 518 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 519 400
penalty weights 10000.0
Epoch: [19][  26/  26]	Loss 0.003 (0.002)	train_nll   0.22 (  0.29)	train_penalty   0.00 (  0.00)	weight_norm  25.75 ( 25.75)	train_acc   0.90 (  0.86)	train_minacc   0.83 (  0.83)	train_majacc   0.92 (  0.86)	train_corr   0.00 (  0.00)	l1 5.9933 (6.0259)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.50it/s] 23%|##3       | 6/26 [00:00<00:00, 30.52it/s]                                               23%|##3       | 6/26 [00:00<00:00, 30.52it/s] 42%|####2     | 11/26 [00:00<00:00, 33.73it/s] 62%|######1   | 16/26 [00:00<00:00, 39.08it/s]                                                62%|######1   | 16/26 [00:00<00:00, 39.08it/s] 81%|########  | 21/26 [00:00<00:00, 39.58it/s]100%|##########| 26/26 [00:00<00:00, 42.30it/s]100%|##########| 26/26 [00:00<00:00, 34.74it/s]
Test: [   0/  26]	Loss 0.251 (0.251)	test_acc   0.87 (  0.87)	test_minacc   0.92 (  0.92)	test_majacc   0.86 (  0.86)	Loss_d 0.251 (0.251)	test_acc_d   0.87 (  0.87)	test_minacc_d   0.92 (  0.92)	test_majacc_d   0.86 (  0.86)	test_corr_d   0.68 (  0.68)
Test: [  10/  26]	Loss 0.263 (0.261)	test_acc   0.88 (  0.88)	test_minacc   0.81 (  0.84)	test_majacc   0.90 (  0.88)	Loss_d 0.263 (0.261)	test_acc_d   0.88 (  0.88)	test_minacc_d   0.81 (  0.84)	test_majacc_d   0.90 (  0.88)	test_corr_d   0.70 (  0.69)
Test: [  20/  26]	Loss 0.286 (0.261)	test_acc   0.87 (  0.88)	test_minacc   0.84 (  0.85)	test_majacc   0.88 (  0.88)	Loss_d 0.286 (0.261)	test_acc_d   0.87 (  0.88)	test_minacc_d   0.84 (  0.85)	test_majacc_d   0.88 (  0.88)	test_corr_d   0.65 (  0.68)
Test: [  26/  26]	Loss 0.232 (0.261)	test_acc   0.90 (  0.88)	test_minacc   0.83 (  0.85)	test_majacc   0.91 (  0.88)	Loss_d 0.232 (0.261)	test_acc_d   0.90 (  0.88)	test_minacc_d   0.83 (  0.85)	test_majacc_d   0.91 (  0.88)	test_corr_d   0.72 (  0.68)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.33it/s]
Test: [  0/  1]	Loss 1.637 (1.637)	test_acc   0.55 (  0.55)	test_minacc   0.51 (  0.51)	test_majacc   0.92 (  0.92)	Loss_d 1.637 (1.637)	test_acc_d   0.55 (  0.55)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.92 (  0.92)	test_corr_d   0.23 (  0.23)
Test: [  1/  1]	Loss 1.637 (1.637)	test_acc   0.55 (  0.55)	test_minacc   0.51 (  0.51)	test_majacc   0.92 (  0.92)	Loss_d 1.637 (1.637)	test_acc_d   0.55 (  0.55)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.92 (  0.92)	test_corr_d   0.23 (  0.23)
Overall Timing[ 19/  1]	epoch_time 0.0416 (0.0432)	validation_time 0.0004 (0.0007)	train_time 0.0412 (0.0420)
record: (train_acc, test_acc) (0.8364000204801559, 0.5640000104904175)
last accs (train_acc, test_acc) (0.8791000251770019, 0.5520000457763672)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:05,  4.88it/s] 19%|#9        | 5/26 [00:00<00:01, 16.99it/s] 35%|###4      | 9/26 [00:00<00:00, 22.57it/s] 50%|#####     | 13/26 [00:00<00:00, 25.84it/s] 65%|######5   | 17/26 [00:00<00:00, 28.50it/s] 81%|########  | 21/26 [00:00<00:00, 29.83it/s] 96%|#########6| 25/26 [00:00<00:00, 31.58it/s]100%|##########| 26/26 [00:01<00:00, 25.37it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 520 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 521 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 522 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 523 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 524 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 525 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 526 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 527 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 528 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 529 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 530 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 531 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 532 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 533 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 534 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 535 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 536 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 537 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 538 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 539 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 540 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 541 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 542 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 543 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 544 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 545 400
penalty weights 10000.0
Epoch: [20][  26/  26]	Loss 0.001 (0.001)	train_nll   0.27 (  0.27)	train_penalty   0.00 (  0.00)	weight_norm  25.76 ( 25.75)	train_acc   0.87 (  0.87)	train_minacc   0.74 (  0.84)	train_majacc   0.89 (  0.88)	train_corr   0.00 (  0.00)	l1 6.3717 (6.4607)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.46it/s] 23%|##3       | 6/26 [00:00<00:00, 21.95it/s]                                               23%|##3       | 6/26 [00:00<00:00, 21.95it/s] 42%|####2     | 11/26 [00:00<00:00, 30.96it/s] 62%|######1   | 16/26 [00:00<00:00, 36.94it/s]                                                62%|######1   | 16/26 [00:00<00:00, 36.94it/s] 81%|########  | 21/26 [00:00<00:00, 39.78it/s]100%|##########| 26/26 [00:00<00:00, 42.42it/s]100%|##########| 26/26 [00:00<00:00, 32.67it/s]
Test: [   0/  26]	Loss 0.256 (0.256)	test_acc   0.87 (  0.87)	test_minacc   0.89 (  0.89)	test_majacc   0.87 (  0.87)	Loss_d 0.256 (0.256)	test_acc_d   0.87 (  0.87)	test_minacc_d   0.89 (  0.89)	test_majacc_d   0.87 (  0.87)	test_corr_d   0.69 (  0.69)
Test: [  10/  26]	Loss 0.258 (0.237)	test_acc   0.86 (  0.89)	test_minacc   0.71 (  0.85)	test_majacc   0.89 (  0.89)	Loss_d 0.258 (0.237)	test_acc_d   0.86 (  0.89)	test_minacc_d   0.71 (  0.85)	test_majacc_d   0.89 (  0.89)	test_corr_d   0.72 (  0.71)
Test: [  20/  26]	Loss 0.242 (0.238)	test_acc   0.87 (  0.88)	test_minacc   0.78 (  0.84)	test_majacc   0.89 (  0.89)	Loss_d 0.242 (0.238)	test_acc_d   0.87 (  0.88)	test_minacc_d   0.78 (  0.84)	test_majacc_d   0.89 (  0.89)	test_corr_d   0.70 (  0.71)
Test: [  26/  26]	Loss 0.260 (0.242)	test_acc   0.88 (  0.88)	test_minacc   0.74 (  0.83)	test_majacc   0.90 (  0.89)	Loss_d 0.260 (0.242)	test_acc_d   0.88 (  0.88)	test_minacc_d   0.74 (  0.83)	test_majacc_d   0.90 (  0.89)	test_corr_d   0.73 (  0.70)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.55it/s]
Test: [  0/  1]	Loss 1.743 (1.743)	test_acc   0.52 (  0.52)	test_minacc   0.48 (  0.48)	test_majacc   0.91 (  0.91)	Loss_d 1.743 (1.743)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.48 (  0.48)	test_majacc_d   0.91 (  0.91)	test_corr_d   0.29 (  0.29)
Test: [  1/  1]	Loss 1.743 (1.743)	test_acc   0.52 (  0.52)	test_minacc   0.48 (  0.48)	test_majacc   0.91 (  0.91)	Loss_d 1.743 (1.743)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.48 (  0.48)	test_majacc_d   0.91 (  0.91)	test_corr_d   0.29 (  0.29)
Overall Timing[ 20/  1]	epoch_time 0.0417 (0.0431)	validation_time 0.0003 (0.0007)	train_time 0.0413 (0.0420)
record: (train_acc, test_acc) (0.8364000204801559, 0.5640000104904175)
last accs (train_acc, test_acc) (0.8822000254392623, 0.5230000019073486)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  6.06it/s] 19%|#9        | 5/26 [00:00<00:01, 20.60it/s] 35%|###4      | 9/26 [00:00<00:00, 26.89it/s] 50%|#####     | 13/26 [00:00<00:00, 30.47it/s] 65%|######5   | 17/26 [00:00<00:00, 32.45it/s] 81%|########  | 21/26 [00:00<00:00, 34.02it/s] 96%|#########6| 25/26 [00:00<00:00, 34.33it/s]100%|##########| 26/26 [00:00<00:00, 28.28it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 546 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 547 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 548 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 549 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 550 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 551 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 552 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 553 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 554 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 555 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 556 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 557 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 558 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 559 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 560 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 561 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 562 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 563 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 564 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 565 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 566 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 567 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 568 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 569 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 570 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 571 400
penalty weights 10000.0
Epoch: [21][  26/  26]	Loss 0.000 (0.001)	train_nll   0.25 (  0.26)	train_penalty   0.00 (  0.00)	weight_norm  25.77 ( 25.76)	train_acc   0.88 (  0.87)	train_minacc   0.89 (  0.87)	train_majacc   0.88 (  0.87)	train_corr   0.00 (  0.00)	l1 6.5733 (6.4808)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:00, 28.29it/s] 23%|##3       | 6/26 [00:00<00:00, 29.05it/s]                                               23%|##3       | 6/26 [00:00<00:00, 29.05it/s] 42%|####2     | 11/26 [00:00<00:00, 36.56it/s] 62%|######1   | 16/26 [00:00<00:00, 38.28it/s]                                                62%|######1   | 16/26 [00:00<00:00, 38.28it/s] 81%|########  | 21/26 [00:00<00:00, 41.58it/s]100%|##########| 26/26 [00:00<00:00, 43.76it/s]100%|##########| 26/26 [00:00<00:00, 36.55it/s]
Test: [   0/  26]	Loss 0.269 (0.269)	test_acc   0.86 (  0.86)	test_minacc   0.91 (  0.91)	test_majacc   0.85 (  0.85)	Loss_d 0.269 (0.269)	test_acc_d   0.86 (  0.86)	test_minacc_d   0.91 (  0.91)	test_majacc_d   0.85 (  0.85)	test_corr_d   0.65 (  0.65)
Test: [  10/  26]	Loss 0.250 (0.253)	test_acc   0.88 (  0.88)	test_minacc   0.89 (  0.89)	test_majacc   0.87 (  0.87)	Loss_d 0.250 (0.253)	test_acc_d   0.88 (  0.88)	test_minacc_d   0.89 (  0.89)	test_majacc_d   0.87 (  0.87)	test_corr_d   0.67 (  0.67)
Test: [  20/  26]	Loss 0.259 (0.250)	test_acc   0.86 (  0.88)	test_minacc   0.86 (  0.88)	test_majacc   0.86 (  0.87)	Loss_d 0.259 (0.250)	test_acc_d   0.86 (  0.88)	test_minacc_d   0.86 (  0.88)	test_majacc_d   0.86 (  0.87)	test_corr_d   0.64 (  0.66)
Test: [  26/  26]	Loss 0.247 (0.252)	test_acc   0.89 (  0.87)	test_minacc   0.86 (  0.88)	test_majacc   0.89 (  0.87)	Loss_d 0.247 (0.252)	test_acc_d   0.89 (  0.87)	test_minacc_d   0.86 (  0.88)	test_majacc_d   0.89 (  0.87)	test_corr_d   0.69 (  0.66)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.77it/s]
Test: [  0/  1]	Loss 1.695 (1.695)	test_acc   0.58 (  0.58)	test_minacc   0.54 (  0.54)	test_majacc   0.91 (  0.91)	Loss_d 1.695 (1.695)	test_acc_d   0.58 (  0.58)	test_minacc_d   0.54 (  0.54)	test_majacc_d   0.91 (  0.91)	test_corr_d   0.16 (  0.16)
Test: [  1/  1]	Loss 1.695 (1.695)	test_acc   0.58 (  0.58)	test_minacc   0.54 (  0.54)	test_majacc   0.91 (  0.91)	Loss_d 1.695 (1.695)	test_acc_d   0.58 (  0.58)	test_minacc_d   0.54 (  0.54)	test_majacc_d   0.91 (  0.91)	test_corr_d   0.16 (  0.16)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/144/checkpoints/model_best.pth
Overall Timing[ 21/  1]	epoch_time 0.0411 (0.0431)	validation_time 0.0004 (0.0007)	train_time 0.0407 (0.0419)
record: (train_acc, test_acc) (0.8739000195860863, 0.581000030040741)
last accs (train_acc, test_acc) (0.8739000195860863, 0.581000030040741)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:07,  3.51it/s] 15%|#5        | 4/26 [00:00<00:01, 11.45it/s] 31%|###       | 8/26 [00:00<00:00, 19.58it/s] 46%|####6     | 12/26 [00:00<00:00, 24.78it/s] 62%|######1   | 16/26 [00:00<00:00, 28.25it/s] 77%|#######6  | 20/26 [00:00<00:00, 30.58it/s] 92%|#########2| 24/26 [00:00<00:00, 31.93it/s]100%|##########| 26/26 [00:01<00:00, 24.15it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 572 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 573 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 574 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 575 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 576 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 577 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 578 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 579 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 580 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 581 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 582 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 583 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 584 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 585 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 586 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 587 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 588 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 589 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 590 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 591 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 592 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 593 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 594 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 595 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 596 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 597 400
penalty weights 10000.0
Epoch: [22][  26/  26]	Loss 0.000 (0.000)	train_nll   0.25 (  0.25)	train_penalty   0.00 (  0.00)	weight_norm  25.77 ( 25.77)	train_acc   0.90 (  0.87)	train_minacc   0.80 (  0.86)	train_majacc   0.91 (  0.87)	train_corr   0.00 (  0.00)	l1 6.6955 (6.7300)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.76it/s] 15%|#5        | 4/26 [00:00<00:01, 14.17it/s]                                               15%|#5        | 4/26 [00:00<00:01, 14.17it/s] 42%|####2     | 11/26 [00:00<00:00, 32.00it/s] 62%|######1   | 16/26 [00:00<00:00, 34.21it/s]                                                62%|######1   | 16/26 [00:00<00:00, 34.21it/s] 81%|########  | 21/26 [00:00<00:00, 38.07it/s]100%|##########| 26/26 [00:00<00:00, 31.43it/s]
Test: [   0/  26]	Loss 0.251 (0.251)	test_acc   0.87 (  0.87)	test_minacc   0.87 (  0.87)	test_majacc   0.87 (  0.87)	Loss_d 0.251 (0.251)	test_acc_d   0.87 (  0.87)	test_minacc_d   0.87 (  0.87)	test_majacc_d   0.87 (  0.87)	test_corr_d   0.69 (  0.69)
Test: [  10/  26]	Loss 0.245 (0.245)	test_acc   0.88 (  0.88)	test_minacc   0.82 (  0.85)	test_majacc   0.89 (  0.89)	Loss_d 0.245 (0.245)	test_acc_d   0.88 (  0.88)	test_minacc_d   0.82 (  0.85)	test_majacc_d   0.89 (  0.89)	test_corr_d   0.71 (  0.70)
Test: [  20/  26]	Loss 0.243 (0.238)	test_acc   0.87 (  0.89)	test_minacc   0.80 (  0.86)	test_majacc   0.89 (  0.89)	Loss_d 0.243 (0.238)	test_acc_d   0.87 (  0.89)	test_minacc_d   0.80 (  0.86)	test_majacc_d   0.89 (  0.89)	test_corr_d   0.69 (  0.70)
Test: [  26/  26]	Loss 0.244 (0.239)	test_acc   0.89 (  0.89)	test_minacc   0.77 (  0.85)	test_majacc   0.91 (  0.89)	Loss_d 0.244 (0.239)	test_acc_d   0.89 (  0.89)	test_minacc_d   0.77 (  0.85)	test_majacc_d   0.91 (  0.89)	test_corr_d   0.72 (  0.70)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 65.47it/s]
Test: [  0/  1]	Loss 1.834 (1.834)	test_acc   0.54 (  0.54)	test_minacc   0.50 (  0.50)	test_majacc   0.91 (  0.91)	Loss_d 1.834 (1.834)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.91 (  0.91)	test_corr_d   0.26 (  0.26)
Test: [  1/  1]	Loss 1.834 (1.834)	test_acc   0.54 (  0.54)	test_minacc   0.50 (  0.50)	test_majacc   0.91 (  0.91)	Loss_d 1.834 (1.834)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.91 (  0.91)	test_corr_d   0.26 (  0.26)
Overall Timing[ 22/  1]	epoch_time 0.0426 (0.0430)	validation_time 0.0004 (0.0007)	train_time 0.0422 (0.0419)
record: (train_acc, test_acc) (0.8739000195860863, 0.581000030040741)
last accs (train_acc, test_acc) (0.8850000246167183, 0.5430000424385071)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  6.11it/s] 12%|#1        | 3/26 [00:00<00:01, 12.48it/s] 27%|##6       | 7/26 [00:00<00:00, 22.04it/s] 42%|####2     | 11/26 [00:00<00:00, 26.41it/s] 58%|#####7    | 15/26 [00:00<00:00, 29.16it/s] 73%|#######3  | 19/26 [00:00<00:00, 30.49it/s] 88%|########8 | 23/26 [00:00<00:00, 32.11it/s]100%|##########| 26/26 [00:00<00:00, 26.41it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 598 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 599 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 600 400
penalty weights 10000.0
l1 at pgd_anneal_iters 6.621128082275391
set z to 6.29007167816162
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 601 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 602 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 603 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 604 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 605 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 606 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 607 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 608 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 609 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 610 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 611 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 612 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 613 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 614 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 615 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 616 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 617 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 618 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 619 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 620 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 621 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 622 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 623 400
penalty weights 10000.0
Epoch: [23][  26/  26]	Loss 0.000 (0.000)	train_nll   0.26 (  0.25)	train_penalty   0.00 (  0.00)	weight_norm  25.77 ( 25.77)	train_acc   0.88 (  0.87)	train_minacc   0.80 (  0.87)	train_majacc   0.90 (  0.88)	train_corr   0.00 (  0.00)	l1 6.9055 (6.8378)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.00it/s] 15%|#5        | 4/26 [00:00<00:01, 14.61it/s] 35%|###4      | 9/26 [00:00<00:00, 26.62it/s]                                               35%|###4      | 9/26 [00:00<00:00, 26.62it/s] 54%|#####3    | 14/26 [00:00<00:00, 30.87it/s] 73%|#######3  | 19/26 [00:00<00:00, 35.78it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 35.78it/s] 92%|#########2| 24/26 [00:00<00:00, 38.79it/s]100%|##########| 26/26 [00:00<00:00, 30.42it/s]
Test: [   0/  26]	Loss 0.256 (0.256)	test_acc   0.86 (  0.86)	test_minacc   0.87 (  0.87)	test_majacc   0.86 (  0.86)	Loss_d 0.256 (0.256)	test_acc_d   0.86 (  0.86)	test_minacc_d   0.87 (  0.87)	test_majacc_d   0.86 (  0.86)	test_corr_d   0.70 (  0.70)
Test: [  10/  26]	Loss 0.261 (0.254)	test_acc   0.86 (  0.87)	test_minacc   0.73 (  0.82)	test_majacc   0.88 (  0.88)	Loss_d 0.261 (0.254)	test_acc_d   0.86 (  0.87)	test_minacc_d   0.73 (  0.82)	test_majacc_d   0.88 (  0.88)	test_corr_d   0.71 (  0.71)
Test: [  20/  26]	Loss 0.230 (0.243)	test_acc   0.88 (  0.88)	test_minacc   0.81 (  0.83)	test_majacc   0.89 (  0.89)	Loss_d 0.230 (0.243)	test_acc_d   0.88 (  0.88)	test_minacc_d   0.81 (  0.83)	test_majacc_d   0.89 (  0.89)	test_corr_d   0.71 (  0.71)
Test: [  26/  26]	Loss 0.247 (0.243)	test_acc   0.88 (  0.88)	test_minacc   0.77 (  0.84)	test_majacc   0.90 (  0.89)	Loss_d 0.247 (0.243)	test_acc_d   0.88 (  0.88)	test_minacc_d   0.77 (  0.84)	test_majacc_d   0.90 (  0.89)	test_corr_d   0.73 (  0.71)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 60.69it/s]
Test: [  0/  1]	Loss 1.954 (1.954)	test_acc   0.53 (  0.53)	test_minacc   0.49 (  0.49)	test_majacc   0.91 (  0.91)	Loss_d 1.954 (1.954)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.49 (  0.49)	test_majacc_d   0.91 (  0.91)	test_corr_d   0.30 (  0.30)
Test: [  1/  1]	Loss 1.954 (1.954)	test_acc   0.53 (  0.53)	test_minacc   0.49 (  0.49)	test_majacc   0.91 (  0.91)	Loss_d 1.954 (1.954)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.49 (  0.49)	test_majacc_d   0.91 (  0.91)	test_corr_d   0.30 (  0.30)
Overall Timing[ 23/  1]	epoch_time 0.0421 (0.0430)	validation_time 0.0004 (0.0007)	train_time 0.0417 (0.0419)
record: (train_acc, test_acc) (0.8739000195860863, 0.581000030040741)
last accs (train_acc, test_acc) (0.8815000224113464, 0.5300000309944153)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:07,  3.37it/s] 19%|#9        | 5/26 [00:00<00:01, 14.73it/s] 35%|###4      | 9/26 [00:00<00:00, 21.49it/s] 50%|#####     | 13/26 [00:00<00:00, 25.56it/s] 65%|######5   | 17/26 [00:00<00:00, 28.45it/s] 81%|########  | 21/26 [00:00<00:00, 30.54it/s] 96%|#########6| 25/26 [00:00<00:00, 32.01it/s]100%|##########| 26/26 [00:01<00:00, 24.44it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 624 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 625 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 626 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 627 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 628 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 629 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 630 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 631 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 632 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 633 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 634 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 635 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 636 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 637 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 638 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 639 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 640 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 641 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 642 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 643 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 644 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 645 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 646 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 647 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 648 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 649 400
penalty weights 10000.0
Epoch: [24][  26/  26]	Loss 0.001 (0.001)	train_nll   0.25 (  0.24)	train_penalty   0.00 (  0.00)	weight_norm  25.78 ( 25.78)	train_acc   0.88 (  0.89)	train_minacc   0.83 (  0.84)	train_majacc   0.89 (  0.89)	train_corr   0.00 (  0.00)	l1 7.4356 (6.9860)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:07,  3.38it/s] 23%|##3       | 6/26 [00:00<00:01, 18.39it/s]                                               23%|##3       | 6/26 [00:00<00:01, 18.39it/s] 42%|####2     | 11/26 [00:00<00:00, 27.44it/s] 62%|######1   | 16/26 [00:00<00:00, 31.86it/s]                                                62%|######1   | 16/26 [00:00<00:00, 31.86it/s] 81%|########  | 21/26 [00:00<00:00, 36.11it/s]100%|##########| 26/26 [00:00<00:00, 39.18it/s]100%|##########| 26/26 [00:00<00:00, 28.67it/s]
Test: [   0/  26]	Loss 0.271 (0.271)	test_acc   0.85 (  0.85)	test_minacc   0.89 (  0.89)	test_majacc   0.84 (  0.84)	Loss_d 0.271 (0.271)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.89 (  0.89)	test_majacc_d   0.84 (  0.84)	test_corr_d   0.65 (  0.65)
Test: [  10/  26]	Loss 0.290 (0.274)	test_acc   0.84 (  0.86)	test_minacc   0.77 (  0.85)	test_majacc   0.86 (  0.86)	Loss_d 0.290 (0.274)	test_acc_d   0.84 (  0.86)	test_minacc_d   0.77 (  0.85)	test_majacc_d   0.86 (  0.86)	test_corr_d   0.66 (  0.67)
Test: [  20/  26]	Loss 0.237 (0.263)	test_acc   0.89 (  0.87)	test_minacc   0.87 (  0.86)	test_majacc   0.89 (  0.87)	Loss_d 0.237 (0.263)	test_acc_d   0.89 (  0.87)	test_minacc_d   0.87 (  0.86)	test_majacc_d   0.89 (  0.87)	test_corr_d   0.66 (  0.67)
Test: [  26/  26]	Loss 0.242 (0.260)	test_acc   0.89 (  0.87)	test_minacc   0.83 (  0.86)	test_majacc   0.90 (  0.87)	Loss_d 0.242 (0.260)	test_acc_d   0.89 (  0.87)	test_minacc_d   0.83 (  0.86)	test_majacc_d   0.90 (  0.87)	test_corr_d   0.70 (  0.67)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 64.66it/s]
Test: [  0/  1]	Loss 2.042 (2.042)	test_acc   0.56 (  0.56)	test_minacc   0.53 (  0.53)	test_majacc   0.91 (  0.91)	Loss_d 2.042 (2.042)	test_acc_d   0.56 (  0.56)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.91 (  0.91)	test_corr_d   0.18 (  0.18)
Test: [  1/  1]	Loss 2.042 (2.042)	test_acc   0.56 (  0.56)	test_minacc   0.53 (  0.53)	test_majacc   0.91 (  0.91)	Loss_d 2.042 (2.042)	test_acc_d   0.56 (  0.56)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.91 (  0.91)	test_corr_d   0.18 (  0.18)
Overall Timing[ 24/  1]	epoch_time 0.0426 (0.0430)	validation_time 0.0004 (0.0007)	train_time 0.0422 (0.0419)
record: (train_acc, test_acc) (0.8739000195860863, 0.581000030040741)
last accs (train_acc, test_acc) (0.8697000268101692, 0.5640000104904175)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.50it/s] 19%|#9        | 5/26 [00:00<00:01, 19.29it/s] 35%|###4      | 9/26 [00:00<00:00, 25.16it/s] 50%|#####     | 13/26 [00:00<00:00, 28.01it/s] 65%|######5   | 17/26 [00:00<00:00, 30.55it/s] 81%|########  | 21/26 [00:00<00:00, 31.80it/s] 96%|#########6| 25/26 [00:00<00:00, 33.08it/s]100%|##########| 26/26 [00:00<00:00, 26.93it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 650 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 651 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 652 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 653 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 654 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 655 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 656 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 657 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 658 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 659 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 660 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 661 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 662 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 663 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 664 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 665 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 666 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 667 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 668 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 669 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 670 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 671 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 672 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 673 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 674 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 675 400
penalty weights 10000.0
Epoch: [25][  26/  26]	Loss 0.000 (0.001)	train_nll   0.20 (  0.22)	train_penalty   0.00 (  0.00)	weight_norm  25.79 ( 25.79)	train_acc   0.92 (  0.90)	train_minacc   0.89 (  0.84)	train_majacc   0.92 (  0.91)	train_corr   0.00 (  0.00)	l1 7.7088 (7.1439)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.31it/s] 23%|##3       | 6/26 [00:00<00:00, 24.49it/s]                                               23%|##3       | 6/26 [00:00<00:00, 24.49it/s] 42%|####2     | 11/26 [00:00<00:00, 31.34it/s] 62%|######1   | 16/26 [00:00<00:00, 37.17it/s]                                                62%|######1   | 16/26 [00:00<00:00, 37.17it/s] 81%|########  | 21/26 [00:00<00:00, 37.77it/s]100%|##########| 26/26 [00:00<00:00, 32.74it/s]
Test: [   0/  26]	Loss 0.238 (0.238)	test_acc   0.88 (  0.88)	test_minacc   0.91 (  0.91)	test_majacc   0.88 (  0.88)	Loss_d 0.238 (0.238)	test_acc_d   0.88 (  0.88)	test_minacc_d   0.91 (  0.91)	test_majacc_d   0.88 (  0.88)	test_corr_d   0.70 (  0.70)
Test: [  10/  26]	Loss 0.279 (0.246)	test_acc   0.86 (  0.88)	test_minacc   0.81 (  0.84)	test_majacc   0.87 (  0.88)	Loss_d 0.279 (0.246)	test_acc_d   0.86 (  0.88)	test_minacc_d   0.81 (  0.84)	test_majacc_d   0.87 (  0.88)	test_corr_d   0.69 (  0.70)
Test: [  20/  26]	Loss 0.260 (0.252)	test_acc   0.87 (  0.87)	test_minacc   0.78 (  0.83)	test_majacc   0.88 (  0.88)	Loss_d 0.260 (0.252)	test_acc_d   0.87 (  0.87)	test_minacc_d   0.78 (  0.83)	test_majacc_d   0.88 (  0.88)	test_corr_d   0.68 (  0.70)
Test: [  26/  26]	Loss 0.205 (0.247)	test_acc   0.90 (  0.88)	test_minacc   0.89 (  0.83)	test_majacc   0.90 (  0.88)	Loss_d 0.205 (0.247)	test_acc_d   0.90 (  0.88)	test_minacc_d   0.89 (  0.83)	test_majacc_d   0.90 (  0.88)	test_corr_d   0.73 (  0.70)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 64.85it/s]
Test: [  0/  1]	Loss 2.194 (2.194)	test_acc   0.56 (  0.56)	test_minacc   0.53 (  0.53)	test_majacc   0.88 (  0.88)	Loss_d 2.194 (2.194)	test_acc_d   0.56 (  0.56)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.88 (  0.88)	test_corr_d   0.19 (  0.19)
Test: [  1/  1]	Loss 2.194 (2.194)	test_acc   0.56 (  0.56)	test_minacc   0.53 (  0.53)	test_majacc   0.88 (  0.88)	Loss_d 2.194 (2.194)	test_acc_d   0.56 (  0.56)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.88 (  0.88)	test_corr_d   0.19 (  0.19)
Overall Timing[ 25/  1]	epoch_time 0.0470 (0.0431)	validation_time 0.0004 (0.0007)	train_time 0.0466 (0.0421)
record: (train_acc, test_acc) (0.8739000195860863, 0.581000030040741)
last accs (train_acc, test_acc) (0.8760000185966492, 0.5630000233650208)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.75it/s] 15%|#5        | 4/26 [00:00<00:01, 19.30it/s] 31%|###       | 8/26 [00:00<00:00, 26.86it/s] 46%|####6     | 12/26 [00:00<00:00, 29.63it/s] 65%|######5   | 17/26 [00:00<00:00, 33.67it/s] 81%|########  | 21/26 [00:00<00:00, 34.15it/s] 96%|#########6| 25/26 [00:00<00:00, 34.41it/s]100%|##########| 26/26 [00:00<00:00, 29.27it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 676 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 677 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 678 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 679 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 680 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 681 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 682 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 683 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 684 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 685 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 686 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 687 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 688 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 689 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 690 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 691 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 692 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 693 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 694 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 695 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 696 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 697 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 698 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 699 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 700 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 701 400
penalty weights 10000.0
Epoch: [26][  26/  26]	Loss 0.003 (0.001)	train_nll   0.17 (  0.23)	train_penalty   0.00 (  0.00)	weight_norm  25.80 ( 25.80)	train_acc   0.92 (  0.89)	train_minacc   0.83 (  0.84)	train_majacc   0.94 (  0.90)	train_corr   0.00 (  0.00)	l1 7.2962 (7.4708)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 16.79it/s] 27%|##6       | 7/26 [00:00<00:00, 33.26it/s]                                               27%|##6       | 7/26 [00:00<00:00, 33.26it/s] 46%|####6     | 12/26 [00:00<00:00, 39.60it/s] 65%|######5   | 17/26 [00:00<00:00, 42.87it/s]                                                65%|######5   | 17/26 [00:00<00:00, 42.87it/s] 85%|########4 | 22/26 [00:00<00:00, 39.75it/s]100%|##########| 26/26 [00:00<00:00, 37.13it/s]
Test: [   0/  26]	Loss 0.213 (0.213)	test_acc   0.89 (  0.89)	test_minacc   0.89 (  0.89)	test_majacc   0.89 (  0.89)	Loss_d 0.213 (0.213)	test_acc_d   0.89 (  0.89)	test_minacc_d   0.89 (  0.89)	test_majacc_d   0.89 (  0.89)	test_corr_d   0.75 (  0.75)
Test: [  10/  26]	Loss 0.228 (0.198)	test_acc   0.89 (  0.90)	test_minacc   0.84 (  0.88)	test_majacc   0.90 (  0.91)	Loss_d 0.228 (0.198)	test_acc_d   0.89 (  0.90)	test_minacc_d   0.84 (  0.88)	test_majacc_d   0.90 (  0.91)	test_corr_d   0.73 (  0.74)
Test: [  20/  26]	Loss 0.249 (0.213)	test_acc   0.87 (  0.90)	test_minacc   0.83 (  0.87)	test_majacc   0.88 (  0.90)	Loss_d 0.249 (0.213)	test_acc_d   0.87 (  0.90)	test_minacc_d   0.83 (  0.87)	test_majacc_d   0.88 (  0.90)	test_corr_d   0.71 (  0.74)
Test: [  26/  26]	Loss 0.180 (0.212)	test_acc   0.92 (  0.90)	test_minacc   0.83 (  0.86)	test_majacc   0.93 (  0.91)	Loss_d 0.180 (0.212)	test_acc_d   0.92 (  0.90)	test_minacc_d   0.83 (  0.86)	test_majacc_d   0.93 (  0.91)	test_corr_d   0.77 (  0.74)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 64.88it/s]
Test: [  0/  1]	Loss 2.059 (2.059)	test_acc   0.56 (  0.56)	test_minacc   0.52 (  0.52)	test_majacc   0.90 (  0.90)	Loss_d 2.059 (2.059)	test_acc_d   0.56 (  0.56)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.90 (  0.90)	test_corr_d   0.25 (  0.25)
Test: [  1/  1]	Loss 2.059 (2.059)	test_acc   0.56 (  0.56)	test_minacc   0.52 (  0.52)	test_majacc   0.90 (  0.90)	Loss_d 2.059 (2.059)	test_acc_d   0.56 (  0.56)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.90 (  0.90)	test_corr_d   0.25 (  0.25)
Overall Timing[ 26/  1]	epoch_time 0.0445 (0.0432)	validation_time 0.0003 (0.0006)	train_time 0.0442 (0.0422)
record: (train_acc, test_acc) (0.8739000195860863, 0.581000030040741)
last accs (train_acc, test_acc) (0.8989000191092491, 0.5600000023841858)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.30it/s] 19%|#9        | 5/26 [00:00<00:00, 24.29it/s] 35%|###4      | 9/26 [00:00<00:00, 28.89it/s] 50%|#####     | 13/26 [00:00<00:00, 30.61it/s] 65%|######5   | 17/26 [00:00<00:00, 32.28it/s] 81%|########  | 21/26 [00:00<00:00, 33.39it/s] 96%|#########6| 25/26 [00:00<00:00, 34.28it/s]100%|##########| 26/26 [00:00<00:00, 29.36it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 702 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 703 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 704 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 705 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 706 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 707 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 708 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 709 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 710 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 711 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 712 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 713 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 714 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 715 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 716 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 717 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 718 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 719 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 720 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 721 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 722 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 723 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 724 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 725 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 726 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 727 400
penalty weights 10000.0
Epoch: [27][  26/  26]	Loss 0.001 (0.001)	train_nll   0.20 (  0.22)	train_penalty   0.00 (  0.00)	weight_norm  25.81 ( 25.80)	train_acc   0.91 (  0.89)	train_minacc   0.86 (  0.85)	train_majacc   0.92 (  0.90)	train_corr   0.00 (  0.00)	l1 7.2376 (7.6567)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:05,  4.69it/s] 23%|##3       | 6/26 [00:00<00:00, 22.19it/s]                                               23%|##3       | 6/26 [00:00<00:00, 22.19it/s] 42%|####2     | 11/26 [00:00<00:00, 31.71it/s] 62%|######1   | 16/26 [00:00<00:00, 36.55it/s]                                                62%|######1   | 16/26 [00:00<00:00, 36.55it/s] 81%|########  | 21/26 [00:00<00:00, 39.28it/s]100%|##########| 26/26 [00:00<00:00, 32.15it/s]
Test: [   0/  26]	Loss 0.209 (0.209)	test_acc   0.90 (  0.90)	test_minacc   0.91 (  0.91)	test_majacc   0.90 (  0.90)	Loss_d 0.209 (0.209)	test_acc_d   0.90 (  0.90)	test_minacc_d   0.91 (  0.91)	test_majacc_d   0.90 (  0.90)	test_corr_d   0.77 (  0.77)
Test: [  10/  26]	Loss 0.203 (0.203)	test_acc   0.91 (  0.91)	test_minacc   0.90 (  0.88)	test_majacc   0.91 (  0.91)	Loss_d 0.203 (0.203)	test_acc_d   0.91 (  0.91)	test_minacc_d   0.90 (  0.88)	test_majacc_d   0.91 (  0.91)	test_corr_d   0.75 (  0.76)
Test: [  20/  26]	Loss 0.212 (0.202)	test_acc   0.90 (  0.91)	test_minacc   0.86 (  0.89)	test_majacc   0.91 (  0.91)	Loss_d 0.212 (0.202)	test_acc_d   0.90 (  0.91)	test_minacc_d   0.86 (  0.89)	test_majacc_d   0.91 (  0.91)	test_corr_d   0.74 (  0.76)
Test: [  26/  26]	Loss 0.205 (0.202)	test_acc   0.91 (  0.91)	test_minacc   0.89 (  0.88)	test_majacc   0.92 (  0.91)	Loss_d 0.205 (0.202)	test_acc_d   0.91 (  0.91)	test_minacc_d   0.89 (  0.88)	test_majacc_d   0.92 (  0.91)	test_corr_d   0.78 (  0.76)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.29it/s]
Test: [  0/  1]	Loss 2.121 (2.121)	test_acc   0.53 (  0.53)	test_minacc   0.48 (  0.48)	test_majacc   0.94 (  0.94)	Loss_d 2.121 (2.121)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.48 (  0.48)	test_majacc_d   0.94 (  0.94)	test_corr_d   0.37 (  0.37)
Test: [  1/  1]	Loss 2.121 (2.121)	test_acc   0.53 (  0.53)	test_minacc   0.48 (  0.48)	test_majacc   0.94 (  0.94)	Loss_d 2.121 (2.121)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.48 (  0.48)	test_majacc_d   0.94 (  0.94)	test_corr_d   0.37 (  0.37)
Overall Timing[ 27/  1]	epoch_time 0.0455 (0.0433)	validation_time 0.0004 (0.0006)	train_time 0.0450 (0.0423)
record: (train_acc, test_acc) (0.8739000195860863, 0.581000030040741)
last accs (train_acc, test_acc) (0.9090000230669976, 0.5260000228881836)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.24it/s] 19%|#9        | 5/26 [00:00<00:00, 22.89it/s] 35%|###4      | 9/26 [00:00<00:00, 27.96it/s] 50%|#####     | 13/26 [00:00<00:00, 30.57it/s] 65%|######5   | 17/26 [00:00<00:00, 32.26it/s] 81%|########  | 21/26 [00:00<00:00, 33.72it/s] 96%|#########6| 25/26 [00:00<00:00, 34.53it/s]100%|##########| 26/26 [00:00<00:00, 28.60it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 728 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 729 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 730 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 731 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 732 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 733 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 734 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 735 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 736 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 737 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 738 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 739 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 740 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 741 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 742 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 743 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 744 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 745 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 746 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 747 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 748 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 749 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 750 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 751 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 752 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 753 400
penalty weights 10000.0
Epoch: [28][  26/  26]	Loss 0.001 (0.001)	train_nll   0.26 (  0.23)	train_penalty   0.00 (  0.00)	weight_norm  25.82 ( 25.81)	train_acc   0.87 (  0.88)	train_minacc   0.83 (  0.88)	train_majacc   0.88 (  0.88)	train_corr   0.00 (  0.00)	l1 7.6595 (7.5799)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 12.52it/s] 27%|##6       | 7/26 [00:00<00:00, 28.35it/s]                                               27%|##6       | 7/26 [00:00<00:00, 28.35it/s] 46%|####6     | 12/26 [00:00<00:00, 35.43it/s] 65%|######5   | 17/26 [00:00<00:00, 38.89it/s]                                                65%|######5   | 17/26 [00:00<00:00, 38.89it/s] 85%|########4 | 22/26 [00:00<00:00, 38.13it/s]100%|##########| 26/26 [00:00<00:00, 34.69it/s]
Test: [   0/  26]	Loss 0.245 (0.245)	test_acc   0.87 (  0.87)	test_minacc   0.87 (  0.87)	test_majacc   0.87 (  0.87)	Loss_d 0.245 (0.245)	test_acc_d   0.87 (  0.87)	test_minacc_d   0.87 (  0.87)	test_majacc_d   0.87 (  0.87)	test_corr_d   0.73 (  0.73)
Test: [  10/  26]	Loss 0.236 (0.240)	test_acc   0.88 (  0.88)	test_minacc   0.87 (  0.87)	test_majacc   0.88 (  0.88)	Loss_d 0.236 (0.240)	test_acc_d   0.88 (  0.88)	test_minacc_d   0.87 (  0.87)	test_majacc_d   0.88 (  0.88)	test_corr_d   0.72 (  0.72)
Test: [  20/  26]	Loss 0.231 (0.234)	test_acc   0.88 (  0.88)	test_minacc   0.86 (  0.87)	test_majacc   0.89 (  0.88)	Loss_d 0.231 (0.234)	test_acc_d   0.88 (  0.88)	test_minacc_d   0.86 (  0.87)	test_majacc_d   0.89 (  0.88)	test_corr_d   0.71 (  0.72)
Test: [  26/  26]	Loss 0.250 (0.234)	test_acc   0.88 (  0.88)	test_minacc   0.83 (  0.87)	test_majacc   0.89 (  0.88)	Loss_d 0.250 (0.234)	test_acc_d   0.88 (  0.88)	test_minacc_d   0.83 (  0.87)	test_majacc_d   0.89 (  0.88)	test_corr_d   0.74 (  0.72)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 58.76it/s]
Test: [  0/  1]	Loss 2.214 (2.214)	test_acc   0.56 (  0.56)	test_minacc   0.52 (  0.52)	test_majacc   0.94 (  0.94)	Loss_d 2.214 (2.214)	test_acc_d   0.56 (  0.56)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.94 (  0.94)	test_corr_d   0.29 (  0.29)
Test: [  1/  1]	Loss 2.214 (2.214)	test_acc   0.56 (  0.56)	test_minacc   0.52 (  0.52)	test_majacc   0.94 (  0.94)	Loss_d 2.214 (2.214)	test_acc_d   0.56 (  0.56)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.94 (  0.94)	test_corr_d   0.29 (  0.29)
Overall Timing[ 28/  1]	epoch_time 0.0390 (0.0431)	validation_time 0.0005 (0.0006)	train_time 0.0386 (0.0422)
record: (train_acc, test_acc) (0.8739000195860863, 0.581000030040741)
last accs (train_acc, test_acc) (0.8819000223875045, 0.5590000152587891)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 16.30it/s] 23%|##3       | 6/26 [00:00<00:00, 27.11it/s] 38%|###8      | 10/26 [00:00<00:00, 30.80it/s] 54%|#####3    | 14/26 [00:00<00:00, 32.82it/s] 69%|######9   | 18/26 [00:00<00:00, 34.67it/s] 85%|########4 | 22/26 [00:00<00:00, 36.05it/s]100%|##########| 26/26 [00:00<00:00, 35.97it/s]100%|##########| 26/26 [00:00<00:00, 30.75it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 754 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 755 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 756 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 757 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 758 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 759 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 760 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 761 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 762 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 763 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 764 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 765 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 766 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 767 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 768 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 769 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 770 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 771 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 772 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 773 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 774 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 775 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 776 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 777 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 778 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 779 400
penalty weights 10000.0
Epoch: [29][  26/  26]	Loss 0.001 (0.001)	train_nll   0.23 (  0.23)	train_penalty   0.00 (  0.00)	weight_norm  25.82 ( 25.82)	train_acc   0.90 (  0.89)	train_minacc   0.91 (  0.88)	train_majacc   0.89 (  0.89)	train_corr   0.00 (  0.00)	l1 7.7209 (7.5235)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.61it/s]  8%|7         | 2/26 [00:00<00:03,  6.43it/s] 27%|##6       | 7/26 [00:00<00:00, 20.65it/s]                                               27%|##6       | 7/26 [00:00<00:00, 20.65it/s] 42%|####2     | 11/26 [00:00<00:00, 26.51it/s] 62%|######1   | 16/26 [00:00<00:00, 33.39it/s]                                                62%|######1   | 16/26 [00:00<00:00, 33.39it/s] 81%|########  | 21/26 [00:00<00:00, 37.08it/s]100%|##########| 26/26 [00:00<00:00, 40.22it/s]100%|##########| 26/26 [00:00<00:00, 28.52it/s]
Test: [   0/  26]	Loss 0.236 (0.236)	test_acc   0.86 (  0.86)	test_minacc   0.83 (  0.83)	test_majacc   0.86 (  0.86)	Loss_d 0.236 (0.236)	test_acc_d   0.86 (  0.86)	test_minacc_d   0.83 (  0.83)	test_majacc_d   0.86 (  0.86)	test_corr_d   0.72 (  0.72)
Test: [  10/  26]	Loss 0.254 (0.248)	test_acc   0.87 (  0.87)	test_minacc   0.84 (  0.87)	test_majacc   0.87 (  0.87)	Loss_d 0.254 (0.248)	test_acc_d   0.87 (  0.87)	test_minacc_d   0.84 (  0.87)	test_majacc_d   0.87 (  0.87)	test_corr_d   0.71 (  0.71)
Test: [  20/  26]	Loss 0.237 (0.244)	test_acc   0.89 (  0.87)	test_minacc   0.86 (  0.87)	test_majacc   0.90 (  0.87)	Loss_d 0.237 (0.244)	test_acc_d   0.89 (  0.87)	test_minacc_d   0.86 (  0.87)	test_majacc_d   0.90 (  0.87)	test_corr_d   0.70 (  0.71)
Test: [  26/  26]	Loss 0.229 (0.241)	test_acc   0.89 (  0.88)	test_minacc   0.91 (  0.88)	test_majacc   0.89 (  0.88)	Loss_d 0.229 (0.241)	test_acc_d   0.89 (  0.88)	test_minacc_d   0.91 (  0.88)	test_majacc_d   0.89 (  0.88)	test_corr_d   0.72 (  0.71)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 60.76it/s]
Test: [  0/  1]	Loss 2.206 (2.206)	test_acc   0.58 (  0.58)	test_minacc   0.54 (  0.54)	test_majacc   0.91 (  0.91)	Loss_d 2.206 (2.206)	test_acc_d   0.58 (  0.58)	test_minacc_d   0.54 (  0.54)	test_majacc_d   0.91 (  0.91)	test_corr_d   0.25 (  0.25)
Test: [  1/  1]	Loss 2.206 (2.206)	test_acc   0.58 (  0.58)	test_minacc   0.54 (  0.54)	test_majacc   0.91 (  0.91)	Loss_d 2.206 (2.206)	test_acc_d   0.58 (  0.58)	test_minacc_d   0.54 (  0.54)	test_majacc_d   0.91 (  0.91)	test_corr_d   0.25 (  0.25)
Overall Timing[ 29/  1]	epoch_time 0.0491 (0.0433)	validation_time 0.0003 (0.0006)	train_time 0.0487 (0.0424)
record: (train_acc, test_acc) (0.8739000195860863, 0.581000030040741)
last accs (train_acc, test_acc) (0.8771000192761421, 0.5770000219345093)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.62it/s] 19%|#9        | 5/26 [00:00<00:01, 19.35it/s] 35%|###4      | 9/26 [00:00<00:00, 25.62it/s] 50%|#####     | 13/26 [00:00<00:00, 29.29it/s] 65%|######5   | 17/26 [00:00<00:00, 30.91it/s] 81%|########  | 21/26 [00:00<00:00, 31.94it/s] 96%|#########6| 25/26 [00:00<00:00, 32.50it/s]100%|##########| 26/26 [00:00<00:00, 26.86it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 780 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 781 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 782 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 783 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 784 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 785 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 786 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 787 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 788 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 789 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 790 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 791 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 792 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 793 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 794 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 795 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 796 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 797 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 798 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 799 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 800 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 801 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 802 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 803 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 804 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 805 400
penalty weights 10000.0
Epoch: [30][  26/  26]	Loss 0.001 (0.000)	train_nll   0.24 (  0.23)	train_penalty   0.00 (  0.00)	weight_norm  25.82 ( 25.82)	train_acc   0.90 (  0.89)	train_minacc   0.86 (  0.87)	train_majacc   0.90 (  0.89)	train_corr   0.00 (  0.00)	l1 7.8858 (7.6430)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.27it/s] 23%|##3       | 6/26 [00:00<00:00, 30.86it/s]                                               23%|##3       | 6/26 [00:00<00:00, 30.86it/s] 42%|####2     | 11/26 [00:00<00:00, 34.61it/s] 62%|######1   | 16/26 [00:00<00:00, 38.55it/s]                                                62%|######1   | 16/26 [00:00<00:00, 38.55it/s] 81%|########  | 21/26 [00:00<00:00, 40.06it/s]100%|##########| 26/26 [00:00<00:00, 35.27it/s]
Test: [   0/  26]	Loss 0.229 (0.229)	test_acc   0.87 (  0.87)	test_minacc   0.85 (  0.85)	test_majacc   0.88 (  0.88)	Loss_d 0.229 (0.229)	test_acc_d   0.87 (  0.87)	test_minacc_d   0.85 (  0.85)	test_majacc_d   0.88 (  0.88)	test_corr_d   0.73 (  0.73)
Test: [  10/  26]	Loss 0.255 (0.236)	test_acc   0.86 (  0.88)	test_minacc   0.79 (  0.87)	test_majacc   0.87 (  0.88)	Loss_d 0.255 (0.236)	test_acc_d   0.86 (  0.88)	test_minacc_d   0.79 (  0.87)	test_majacc_d   0.87 (  0.88)	test_corr_d   0.73 (  0.73)
Test: [  20/  26]	Loss 0.241 (0.239)	test_acc   0.89 (  0.88)	test_minacc   0.84 (  0.86)	test_majacc   0.90 (  0.88)	Loss_d 0.241 (0.239)	test_acc_d   0.89 (  0.88)	test_minacc_d   0.84 (  0.86)	test_majacc_d   0.90 (  0.88)	test_corr_d   0.72 (  0.73)
Test: [  26/  26]	Loss 0.232 (0.238)	test_acc   0.90 (  0.88)	test_minacc   0.86 (  0.86)	test_majacc   0.90 (  0.88)	Loss_d 0.232 (0.238)	test_acc_d   0.90 (  0.88)	test_minacc_d   0.86 (  0.86)	test_majacc_d   0.90 (  0.88)	test_corr_d   0.74 (  0.73)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.06it/s]
Test: [  0/  1]	Loss 2.320 (2.320)	test_acc   0.56 (  0.56)	test_minacc   0.52 (  0.52)	test_majacc   0.91 (  0.91)	Loss_d 2.320 (2.320)	test_acc_d   0.56 (  0.56)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.91 (  0.91)	test_corr_d   0.27 (  0.27)
Test: [  1/  1]	Loss 2.320 (2.320)	test_acc   0.56 (  0.56)	test_minacc   0.52 (  0.52)	test_majacc   0.91 (  0.91)	Loss_d 2.320 (2.320)	test_acc_d   0.56 (  0.56)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.91 (  0.91)	test_corr_d   0.27 (  0.27)
Overall Timing[ 30/  1]	epoch_time 0.0406 (0.0432)	validation_time 0.0005 (0.0006)	train_time 0.0401 (0.0423)
record: (train_acc, test_acc) (0.8739000195860863, 0.581000030040741)
last accs (train_acc, test_acc) (0.8807000204324722, 0.5630000233650208)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:05,  4.61it/s] 19%|#9        | 5/26 [00:00<00:01, 17.22it/s] 35%|###4      | 9/26 [00:00<00:00, 23.35it/s] 50%|#####     | 13/26 [00:00<00:00, 26.75it/s] 65%|######5   | 17/26 [00:00<00:00, 28.61it/s] 81%|########  | 21/26 [00:00<00:00, 30.40it/s] 96%|#########6| 25/26 [00:00<00:00, 31.50it/s]100%|##########| 26/26 [00:01<00:00, 25.41it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 806 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 807 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 808 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 809 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 810 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 811 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 812 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 813 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 814 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 815 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 816 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 817 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 818 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 819 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 820 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 821 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 822 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 823 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 824 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 825 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 826 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 827 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 828 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 829 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 830 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 831 400
penalty weights 10000.0
Epoch: [31][  26/  26]	Loss 0.001 (0.000)	train_nll   0.19 (  0.22)	train_penalty   0.00 (  0.00)	weight_norm  25.83 ( 25.82)	train_acc   0.92 (  0.89)	train_minacc   0.94 (  0.88)	train_majacc   0.91 (  0.89)	train_corr   0.00 (  0.00)	l1 7.7700 (7.7713)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.34it/s] 19%|#9        | 5/26 [00:00<00:00, 23.47it/s] 38%|###8      | 10/26 [00:00<00:00, 32.87it/s]                                                38%|###8      | 10/26 [00:00<00:00, 32.87it/s] 58%|#####7    | 15/26 [00:00<00:00, 38.36it/s] 77%|#######6  | 20/26 [00:00<00:00, 39.01it/s]                                                77%|#######6  | 20/26 [00:00<00:00, 39.01it/s] 96%|#########6| 25/26 [00:00<00:00, 40.89it/s]100%|##########| 26/26 [00:00<00:00, 33.72it/s]
Test: [   0/  26]	Loss 0.210 (0.210)	test_acc   0.88 (  0.88)	test_minacc   0.89 (  0.89)	test_majacc   0.88 (  0.88)	Loss_d 0.210 (0.210)	test_acc_d   0.88 (  0.88)	test_minacc_d   0.89 (  0.89)	test_majacc_d   0.88 (  0.88)	test_corr_d   0.74 (  0.74)
Test: [  10/  26]	Loss 0.222 (0.204)	test_acc   0.88 (  0.90)	test_minacc   0.89 (  0.91)	test_majacc   0.88 (  0.90)	Loss_d 0.222 (0.204)	test_acc_d   0.88 (  0.90)	test_minacc_d   0.89 (  0.91)	test_majacc_d   0.88 (  0.90)	test_corr_d   0.73 (  0.74)
Test: [  20/  26]	Loss 0.239 (0.214)	test_acc   0.88 (  0.89)	test_minacc   0.84 (  0.90)	test_majacc   0.88 (  0.89)	Loss_d 0.239 (0.214)	test_acc_d   0.88 (  0.89)	test_minacc_d   0.84 (  0.90)	test_majacc_d   0.88 (  0.89)	test_corr_d   0.71 (  0.73)
Test: [  26/  26]	Loss 0.196 (0.214)	test_acc   0.92 (  0.89)	test_minacc   0.94 (  0.90)	test_majacc   0.91 (  0.89)	Loss_d 0.196 (0.214)	test_acc_d   0.92 (  0.89)	test_minacc_d   0.94 (  0.90)	test_majacc_d   0.91 (  0.89)	test_corr_d   0.75 (  0.73)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.04it/s]
Test: [  0/  1]	Loss 2.226 (2.226)	test_acc   0.57 (  0.57)	test_minacc   0.54 (  0.54)	test_majacc   0.92 (  0.92)	Loss_d 2.226 (2.226)	test_acc_d   0.57 (  0.57)	test_minacc_d   0.54 (  0.54)	test_majacc_d   0.92 (  0.92)	test_corr_d   0.25 (  0.25)
Test: [  1/  1]	Loss 2.226 (2.226)	test_acc   0.57 (  0.57)	test_minacc   0.54 (  0.54)	test_majacc   0.92 (  0.92)	Loss_d 2.226 (2.226)	test_acc_d   0.57 (  0.57)	test_minacc_d   0.54 (  0.54)	test_majacc_d   0.92 (  0.92)	test_corr_d   0.25 (  0.25)
Overall Timing[ 31/  1]	epoch_time 0.0523 (0.0435)	validation_time 0.0004 (0.0006)	train_time 0.0518 (0.0426)
record: (train_acc, test_acc) (0.8739000195860863, 0.581000030040741)
last accs (train_acc, test_acc) (0.8942000206708908, 0.5740000009536743)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 13.60it/s] 23%|##3       | 6/26 [00:00<00:00, 23.64it/s] 38%|###8      | 10/26 [00:00<00:00, 28.37it/s] 54%|#####3    | 14/26 [00:00<00:00, 31.00it/s] 69%|######9   | 18/26 [00:00<00:00, 32.77it/s] 85%|########4 | 22/26 [00:00<00:00, 34.24it/s]100%|##########| 26/26 [00:00<00:00, 35.89it/s]100%|##########| 26/26 [00:00<00:00, 29.58it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 832 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 833 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 834 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 835 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 836 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 837 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 838 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 839 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 840 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 841 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 842 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 843 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 844 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 845 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 846 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 847 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 848 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 849 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 850 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 851 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 852 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 853 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 854 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 855 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 856 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 857 400
penalty weights 10000.0
Epoch: [32][  26/  26]	Loss 0.001 (0.000)	train_nll   0.20 (  0.22)	train_penalty   0.00 (  0.00)	weight_norm  25.83 ( 25.83)	train_acc   0.92 (  0.89)	train_minacc   0.91 (  0.88)	train_majacc   0.92 (  0.89)	train_corr   0.00 (  0.00)	l1 7.6356 (7.9870)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 13.89it/s] 27%|##6       | 7/26 [00:00<00:00, 29.86it/s]                                               27%|##6       | 7/26 [00:00<00:00, 29.86it/s] 46%|####6     | 12/26 [00:00<00:00, 36.51it/s] 65%|######5   | 17/26 [00:00<00:00, 39.36it/s]                                                65%|######5   | 17/26 [00:00<00:00, 39.36it/s] 85%|########4 | 22/26 [00:00<00:00, 38.11it/s]100%|##########| 26/26 [00:00<00:00, 35.23it/s]
Test: [   0/  26]	Loss 0.211 (0.211)	test_acc   0.89 (  0.89)	test_minacc   0.91 (  0.91)	test_majacc   0.88 (  0.88)	Loss_d 0.211 (0.211)	test_acc_d   0.89 (  0.89)	test_minacc_d   0.91 (  0.91)	test_majacc_d   0.88 (  0.88)	test_corr_d   0.76 (  0.76)
Test: [  10/  26]	Loss 0.204 (0.199)	test_acc   0.91 (  0.90)	test_minacc   0.94 (  0.90)	test_majacc   0.91 (  0.90)	Loss_d 0.204 (0.199)	test_acc_d   0.91 (  0.90)	test_minacc_d   0.94 (  0.90)	test_majacc_d   0.91 (  0.90)	test_corr_d   0.74 (  0.75)
Test: [  20/  26]	Loss 0.223 (0.202)	test_acc   0.89 (  0.90)	test_minacc   0.88 (  0.91)	test_majacc   0.89 (  0.90)	Loss_d 0.223 (0.202)	test_acc_d   0.89 (  0.90)	test_minacc_d   0.88 (  0.91)	test_majacc_d   0.89 (  0.90)	test_corr_d   0.72 (  0.75)
Test: [  26/  26]	Loss 0.198 (0.203)	test_acc   0.91 (  0.90)	test_minacc   0.89 (  0.91)	test_majacc   0.91 (  0.90)	Loss_d 0.198 (0.203)	test_acc_d   0.91 (  0.90)	test_minacc_d   0.89 (  0.91)	test_majacc_d   0.91 (  0.90)	test_corr_d   0.77 (  0.75)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.36it/s]
Test: [  0/  1]	Loss 2.148 (2.148)	test_acc   0.57 (  0.57)	test_minacc   0.53 (  0.53)	test_majacc   0.91 (  0.91)	Loss_d 2.148 (2.148)	test_acc_d   0.57 (  0.57)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.91 (  0.91)	test_corr_d   0.27 (  0.27)
Test: [  1/  1]	Loss 2.148 (2.148)	test_acc   0.57 (  0.57)	test_minacc   0.53 (  0.53)	test_majacc   0.91 (  0.91)	Loss_d 2.148 (2.148)	test_acc_d   0.57 (  0.57)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.91 (  0.91)	test_corr_d   0.27 (  0.27)
Overall Timing[ 32/  1]	epoch_time 0.0395 (0.0434)	validation_time 0.0004 (0.0006)	train_time 0.0391 (0.0425)
record: (train_acc, test_acc) (0.8739000195860863, 0.581000030040741)
last accs (train_acc, test_acc) (0.9040000219941139, 0.5670000314712524)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.47it/s] 19%|#9        | 5/26 [00:00<00:01, 20.90it/s] 35%|###4      | 9/26 [00:00<00:00, 25.89it/s] 50%|#####     | 13/26 [00:00<00:00, 29.76it/s] 65%|######5   | 17/26 [00:00<00:00, 32.13it/s] 81%|########  | 21/26 [00:00<00:00, 32.96it/s] 96%|#########6| 25/26 [00:00<00:00, 33.26it/s]100%|##########| 26/26 [00:00<00:00, 28.07it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 858 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 859 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 860 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 861 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 862 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 863 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 864 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 865 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 866 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 867 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 868 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 869 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 870 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 871 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 872 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 873 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 874 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 875 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 876 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 877 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 878 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 879 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 880 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 881 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 882 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 883 400
penalty weights 10000.0
Epoch: [33][  26/  26]	Loss 0.002 (0.001)	train_nll   0.25 (  0.22)	train_penalty   0.00 (  0.00)	weight_norm  25.83 ( 25.83)	train_acc   0.89 (  0.89)	train_minacc   0.86 (  0.91)	train_majacc   0.90 (  0.88)	train_corr   0.00 (  0.00)	l1 8.1296 (7.9444)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.39it/s] 19%|#9        | 5/26 [00:00<00:00, 23.26it/s] 38%|###8      | 10/26 [00:00<00:00, 33.34it/s]                                                38%|###8      | 10/26 [00:00<00:00, 33.34it/s] 58%|#####7    | 15/26 [00:00<00:00, 38.24it/s] 77%|#######6  | 20/26 [00:00<00:00, 37.31it/s]                                                77%|#######6  | 20/26 [00:00<00:00, 37.31it/s] 96%|#########6| 25/26 [00:00<00:00, 39.90it/s]100%|##########| 26/26 [00:00<00:00, 33.24it/s]
Test: [   0/  26]	Loss 0.221 (0.221)	test_acc   0.89 (  0.89)	test_minacc   0.89 (  0.89)	test_majacc   0.89 (  0.89)	Loss_d 0.221 (0.221)	test_acc_d   0.89 (  0.89)	test_minacc_d   0.89 (  0.89)	test_majacc_d   0.89 (  0.89)	test_corr_d   0.74 (  0.74)
Test: [  10/  26]	Loss 0.245 (0.232)	test_acc   0.87 (  0.88)	test_minacc   0.82 (  0.87)	test_majacc   0.88 (  0.88)	Loss_d 0.245 (0.232)	test_acc_d   0.87 (  0.88)	test_minacc_d   0.82 (  0.87)	test_majacc_d   0.88 (  0.88)	test_corr_d   0.73 (  0.73)
Test: [  20/  26]	Loss 0.225 (0.226)	test_acc   0.89 (  0.89)	test_minacc   0.87 (  0.88)	test_majacc   0.89 (  0.89)	Loss_d 0.225 (0.226)	test_acc_d   0.89 (  0.89)	test_minacc_d   0.87 (  0.88)	test_majacc_d   0.89 (  0.89)	test_corr_d   0.71 (  0.73)
Test: [  26/  26]	Loss 0.227 (0.225)	test_acc   0.90 (  0.89)	test_minacc   0.89 (  0.89)	test_majacc   0.90 (  0.89)	Loss_d 0.227 (0.225)	test_acc_d   0.90 (  0.89)	test_minacc_d   0.89 (  0.89)	test_majacc_d   0.90 (  0.89)	test_corr_d   0.75 (  0.73)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.31it/s]
Test: [  0/  1]	Loss 2.366 (2.366)	test_acc   0.56 (  0.56)	test_minacc   0.52 (  0.52)	test_majacc   0.91 (  0.91)	Loss_d 2.366 (2.366)	test_acc_d   0.56 (  0.56)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.91 (  0.91)	test_corr_d   0.28 (  0.28)
Test: [  1/  1]	Loss 2.366 (2.366)	test_acc   0.56 (  0.56)	test_minacc   0.52 (  0.52)	test_majacc   0.91 (  0.91)	Loss_d 2.366 (2.366)	test_acc_d   0.56 (  0.56)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.91 (  0.91)	test_corr_d   0.28 (  0.28)
Overall Timing[ 33/  1]	epoch_time 0.0384 (0.0433)	validation_time 0.0004 (0.0006)	train_time 0.0379 (0.0424)
record: (train_acc, test_acc) (0.8739000195860863, 0.581000030040741)
last accs (train_acc, test_acc) (0.8889000199437141, 0.5590000152587891)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:05,  4.63it/s] 15%|#5        | 4/26 [00:00<00:01, 14.20it/s] 31%|###       | 8/26 [00:00<00:00, 22.22it/s] 46%|####6     | 12/26 [00:00<00:00, 26.66it/s] 62%|######1   | 16/26 [00:00<00:00, 29.23it/s] 77%|#######6  | 20/26 [00:00<00:00, 30.84it/s] 92%|#########2| 24/26 [00:00<00:00, 32.23it/s]100%|##########| 26/26 [00:01<00:00, 25.48it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 884 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 885 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 886 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 887 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 888 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 889 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 890 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 891 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 892 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 893 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 894 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 895 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 896 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 897 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 898 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 899 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 900 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 901 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 902 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 903 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 904 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 905 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 906 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 907 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 908 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 909 400
penalty weights 10000.0
Epoch: [34][  26/  26]	Loss 0.000 (0.000)	train_nll   0.23 (  0.23)	train_penalty   0.00 (  0.00)	weight_norm  25.84 ( 25.84)	train_acc   0.88 (  0.89)	train_minacc   0.89 (  0.89)	train_majacc   0.88 (  0.89)	train_corr   0.00 (  0.00)	l1 7.9803 (7.8412)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:11,  2.27it/s] 23%|##3       | 6/26 [00:00<00:01, 13.71it/s]                                               23%|##3       | 6/26 [00:00<00:01, 13.71it/s] 42%|####2     | 11/26 [00:00<00:00, 22.31it/s] 62%|######1   | 16/26 [00:00<00:00, 28.95it/s] 77%|#######6  | 20/26 [00:00<00:00, 31.44it/s]                                                77%|#######6  | 20/26 [00:00<00:00, 31.44it/s] 96%|#########6| 25/26 [00:01<00:00, 33.12it/s]100%|##########| 26/26 [00:01<00:00, 23.96it/s]
Test: [   0/  26]	Loss 0.257 (0.257)	test_acc   0.85 (  0.85)	test_minacc   0.87 (  0.87)	test_majacc   0.85 (  0.85)	Loss_d 0.257 (0.257)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.87 (  0.87)	test_majacc_d   0.85 (  0.85)	test_corr_d   0.70 (  0.70)
Test: [  10/  26]	Loss 0.268 (0.255)	test_acc   0.85 (  0.86)	test_minacc   0.81 (  0.87)	test_majacc   0.86 (  0.86)	Loss_d 0.268 (0.255)	test_acc_d   0.85 (  0.86)	test_minacc_d   0.81 (  0.87)	test_majacc_d   0.86 (  0.86)	test_corr_d   0.71 (  0.71)
Test: [  20/  26]	Loss 0.254 (0.256)	test_acc   0.87 (  0.86)	test_minacc   0.84 (  0.87)	test_majacc   0.88 (  0.86)	Loss_d 0.254 (0.256)	test_acc_d   0.87 (  0.86)	test_minacc_d   0.84 (  0.87)	test_majacc_d   0.88 (  0.86)	test_corr_d   0.69 (  0.71)
Test: [  26/  26]	Loss 0.234 (0.254)	test_acc   0.88 (  0.87)	test_minacc   0.89 (  0.87)	test_majacc   0.88 (  0.87)	Loss_d 0.234 (0.254)	test_acc_d   0.88 (  0.87)	test_minacc_d   0.89 (  0.87)	test_majacc_d   0.88 (  0.87)	test_corr_d   0.73 (  0.71)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 64.05it/s]
Test: [  0/  1]	Loss 2.295 (2.295)	test_acc   0.59 (  0.59)	test_minacc   0.55 (  0.55)	test_majacc   0.93 (  0.93)	Loss_d 2.295 (2.295)	test_acc_d   0.59 (  0.59)	test_minacc_d   0.55 (  0.55)	test_majacc_d   0.93 (  0.93)	test_corr_d   0.23 (  0.23)
Test: [  1/  1]	Loss 2.295 (2.295)	test_acc   0.59 (  0.59)	test_minacc   0.55 (  0.55)	test_majacc   0.93 (  0.93)	Loss_d 2.295 (2.295)	test_acc_d   0.59 (  0.59)	test_minacc_d   0.55 (  0.55)	test_majacc_d   0.93 (  0.93)	test_corr_d   0.23 (  0.23)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/144/checkpoints/model_best.pth
Overall Timing[ 34/  1]	epoch_time 0.0454 (0.0433)	validation_time 0.0005 (0.0006)	train_time 0.0449 (0.0424)
record: (train_acc, test_acc) (0.8664000244736672, 0.5879999995231628)
last accs (train_acc, test_acc) (0.8664000244736672, 0.5879999995231628)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 17.33it/s] 23%|##3       | 6/26 [00:00<00:00, 27.43it/s] 38%|###8      | 10/26 [00:00<00:00, 31.84it/s] 54%|#####3    | 14/26 [00:00<00:00, 32.77it/s] 69%|######9   | 18/26 [00:00<00:00, 33.38it/s] 85%|########4 | 22/26 [00:00<00:00, 34.05it/s]100%|##########| 26/26 [00:00<00:00, 34.53it/s]100%|##########| 26/26 [00:00<00:00, 30.22it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 910 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 911 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 912 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 913 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 914 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 915 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 916 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 917 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 918 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 919 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 920 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 921 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 922 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 923 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 924 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 925 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 926 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 927 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 928 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 929 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 930 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 931 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 932 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 933 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 934 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 935 400
penalty weights 10000.0
Epoch: [35][  26/  26]	Loss 0.000 (0.000)	train_nll   0.20 (  0.23)	train_penalty   0.00 (  0.00)	weight_norm  25.84 ( 25.84)	train_acc   0.90 (  0.88)	train_minacc   0.91 (  0.88)	train_majacc   0.90 (  0.88)	train_corr   0.00 (  0.00)	l1 7.8797 (7.7887)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.83it/s] 23%|##3       | 6/26 [00:00<00:00, 27.75it/s]                                               23%|##3       | 6/26 [00:00<00:00, 27.75it/s] 42%|####2     | 11/26 [00:00<00:00, 35.37it/s] 62%|######1   | 16/26 [00:00<00:00, 37.93it/s]                                                62%|######1   | 16/26 [00:00<00:00, 37.93it/s] 81%|########  | 21/26 [00:00<00:00, 39.38it/s]100%|##########| 26/26 [00:00<00:00, 42.23it/s]100%|##########| 26/26 [00:00<00:00, 33.95it/s]
Test: [   0/  26]	Loss 0.228 (0.228)	test_acc   0.87 (  0.87)	test_minacc   0.92 (  0.92)	test_majacc   0.86 (  0.86)	Loss_d 0.228 (0.228)	test_acc_d   0.87 (  0.87)	test_minacc_d   0.92 (  0.92)	test_majacc_d   0.86 (  0.86)	test_corr_d   0.73 (  0.73)
Test: [  10/  26]	Loss 0.232 (0.216)	test_acc   0.88 (  0.89)	test_minacc   0.87 (  0.91)	test_majacc   0.89 (  0.89)	Loss_d 0.232 (0.216)	test_acc_d   0.88 (  0.89)	test_minacc_d   0.87 (  0.91)	test_majacc_d   0.89 (  0.89)	test_corr_d   0.73 (  0.73)
Test: [  20/  26]	Loss 0.249 (0.224)	test_acc   0.87 (  0.89)	test_minacc   0.83 (  0.90)	test_majacc   0.88 (  0.88)	Loss_d 0.249 (0.224)	test_acc_d   0.87 (  0.89)	test_minacc_d   0.83 (  0.90)	test_majacc_d   0.88 (  0.88)	test_corr_d   0.71 (  0.73)
Test: [  26/  26]	Loss 0.204 (0.224)	test_acc   0.90 (  0.89)	test_minacc   0.91 (  0.89)	test_majacc   0.89 (  0.88)	Loss_d 0.204 (0.224)	test_acc_d   0.90 (  0.89)	test_minacc_d   0.91 (  0.89)	test_majacc_d   0.89 (  0.88)	test_corr_d   0.74 (  0.73)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 54.48it/s]
Test: [  0/  1]	Loss 2.237 (2.237)	test_acc   0.60 (  0.60)	test_minacc   0.56 (  0.56)	test_majacc   0.92 (  0.92)	Loss_d 2.237 (2.237)	test_acc_d   0.60 (  0.60)	test_minacc_d   0.56 (  0.56)	test_majacc_d   0.92 (  0.92)	test_corr_d   0.22 (  0.22)
Test: [  1/  1]	Loss 2.237 (2.237)	test_acc   0.60 (  0.60)	test_minacc   0.56 (  0.56)	test_majacc   0.92 (  0.92)	Loss_d 2.237 (2.237)	test_acc_d   0.60 (  0.60)	test_minacc_d   0.56 (  0.56)	test_majacc_d   0.92 (  0.92)	test_corr_d   0.22 (  0.22)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/144/checkpoints/model_best.pth
Overall Timing[ 35/  1]	epoch_time 0.0421 (0.0433)	validation_time 0.0005 (0.0006)	train_time 0.0416 (0.0424)
record: (train_acc, test_acc) (0.8854000236392021, 0.5980000495910645)
last accs (train_acc, test_acc) (0.8854000236392021, 0.5980000495910645)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:00, 27.67it/s] 27%|##6       | 7/26 [00:00<00:00, 31.74it/s] 42%|####2     | 11/26 [00:00<00:00, 32.98it/s] 58%|#####7    | 15/26 [00:00<00:00, 32.94it/s] 73%|#######3  | 19/26 [00:00<00:00, 33.18it/s] 88%|########8 | 23/26 [00:00<00:00, 34.00it/s]100%|##########| 26/26 [00:00<00:00, 31.32it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 936 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 937 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 938 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 939 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 940 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 941 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 942 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 943 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 944 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 945 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 946 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 947 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 948 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 949 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 950 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 951 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 952 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 953 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 954 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 955 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 956 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 957 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 958 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 959 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 960 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 961 400
penalty weights 10000.0
Epoch: [36][  26/  26]	Loss 0.001 (0.000)	train_nll   0.20 (  0.23)	train_penalty   0.00 (  0.00)	weight_norm  25.85 ( 25.84)	train_acc   0.91 (  0.88)	train_minacc   0.91 (  0.89)	train_majacc   0.91 (  0.88)	train_corr   0.00 (  0.00)	l1 7.6869 (8.0511)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 14.77it/s] 23%|##3       | 6/26 [00:00<00:00, 27.47it/s]                                               23%|##3       | 6/26 [00:00<00:00, 27.47it/s] 42%|####2     | 11/26 [00:00<00:00, 35.10it/s] 62%|######1   | 16/26 [00:00<00:00, 36.25it/s]                                                62%|######1   | 16/26 [00:00<00:00, 36.25it/s] 81%|########  | 21/26 [00:00<00:00, 39.61it/s]100%|##########| 26/26 [00:00<00:00, 42.41it/s]100%|##########| 26/26 [00:00<00:00, 34.61it/s]
Test: [   0/  26]	Loss 0.219 (0.219)	test_acc   0.87 (  0.87)	test_minacc   0.91 (  0.91)	test_majacc   0.87 (  0.87)	Loss_d 0.219 (0.219)	test_acc_d   0.87 (  0.87)	test_minacc_d   0.91 (  0.91)	test_majacc_d   0.87 (  0.87)	test_corr_d   0.75 (  0.75)
Test: [  10/  26]	Loss 0.211 (0.205)	test_acc   0.91 (  0.90)	test_minacc   0.94 (  0.91)	test_majacc   0.90 (  0.90)	Loss_d 0.211 (0.205)	test_acc_d   0.91 (  0.90)	test_minacc_d   0.94 (  0.91)	test_majacc_d   0.90 (  0.90)	test_corr_d   0.75 (  0.75)
Test: [  20/  26]	Loss 0.226 (0.207)	test_acc   0.89 (  0.90)	test_minacc   0.88 (  0.91)	test_majacc   0.89 (  0.90)	Loss_d 0.226 (0.207)	test_acc_d   0.89 (  0.90)	test_minacc_d   0.88 (  0.91)	test_majacc_d   0.89 (  0.90)	test_corr_d   0.72 (  0.75)
Test: [  26/  26]	Loss 0.198 (0.208)	test_acc   0.91 (  0.90)	test_minacc   0.94 (  0.91)	test_majacc   0.91 (  0.90)	Loss_d 0.198 (0.208)	test_acc_d   0.91 (  0.90)	test_minacc_d   0.94 (  0.91)	test_majacc_d   0.91 (  0.90)	test_corr_d   0.76 (  0.75)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.06it/s]
Test: [  0/  1]	Loss 2.128 (2.128)	test_acc   0.59 (  0.59)	test_minacc   0.55 (  0.55)	test_majacc   0.91 (  0.91)	Loss_d 2.128 (2.128)	test_acc_d   0.59 (  0.59)	test_minacc_d   0.55 (  0.55)	test_majacc_d   0.91 (  0.91)	test_corr_d   0.26 (  0.26)
Test: [  1/  1]	Loss 2.128 (2.128)	test_acc   0.59 (  0.59)	test_minacc   0.55 (  0.55)	test_majacc   0.91 (  0.91)	Loss_d 2.128 (2.128)	test_acc_d   0.59 (  0.59)	test_minacc_d   0.55 (  0.55)	test_majacc_d   0.91 (  0.91)	test_corr_d   0.26 (  0.26)
Overall Timing[ 36/  1]	epoch_time 0.0465 (0.0434)	validation_time 0.0003 (0.0006)	train_time 0.0461 (0.0425)
record: (train_acc, test_acc) (0.8854000236392021, 0.5980000495910645)
last accs (train_acc, test_acc) (0.8992000236511231, 0.5860000252723694)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:07,  3.36it/s] 19%|#9        | 5/26 [00:00<00:01, 14.63it/s] 35%|###4      | 9/26 [00:00<00:00, 21.42it/s] 50%|#####     | 13/26 [00:00<00:00, 25.68it/s] 65%|######5   | 17/26 [00:00<00:00, 28.44it/s] 81%|########  | 21/26 [00:00<00:00, 30.88it/s] 96%|#########6| 25/26 [00:00<00:00, 32.10it/s]100%|##########| 26/26 [00:01<00:00, 24.48it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 962 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 963 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 964 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 965 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 966 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 967 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 968 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 969 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 970 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 971 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 972 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 973 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 974 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 975 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 976 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 977 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 978 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 979 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 980 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 981 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 982 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 983 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 984 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 985 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 986 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 987 400
penalty weights 10000.0
Epoch: [37][  26/  26]	Loss 0.000 (0.000)	train_nll   0.21 (  0.22)	train_penalty   0.00 (  0.00)	weight_norm  25.85 ( 25.85)	train_acc   0.91 (  0.89)	train_minacc   0.91 (  0.92)	train_majacc   0.91 (  0.88)	train_corr   0.00 (  0.00)	l1 8.2979 (8.0586)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:08,  3.06it/s] 23%|##3       | 6/26 [00:00<00:01, 17.17it/s]                                               23%|##3       | 6/26 [00:00<00:01, 17.17it/s] 42%|####2     | 11/26 [00:00<00:00, 25.98it/s] 62%|######1   | 16/26 [00:00<00:00, 32.77it/s]                                                62%|######1   | 16/26 [00:00<00:00, 32.77it/s] 81%|########  | 21/26 [00:00<00:00, 34.00it/s]100%|##########| 26/26 [00:00<00:00, 38.18it/s]100%|##########| 26/26 [00:00<00:00, 27.40it/s]
Test: [   0/  26]	Loss 0.228 (0.228)	test_acc   0.86 (  0.86)	test_minacc   0.89 (  0.89)	test_majacc   0.86 (  0.86)	Loss_d 0.228 (0.228)	test_acc_d   0.86 (  0.86)	test_minacc_d   0.89 (  0.89)	test_majacc_d   0.86 (  0.86)	test_corr_d   0.72 (  0.72)
Test: [  10/  26]	Loss 0.261 (0.242)	test_acc   0.87 (  0.87)	test_minacc   0.84 (  0.87)	test_majacc   0.88 (  0.87)	Loss_d 0.261 (0.242)	test_acc_d   0.87 (  0.87)	test_minacc_d   0.84 (  0.87)	test_majacc_d   0.88 (  0.87)	test_corr_d   0.72 (  0.72)
Test: [  20/  26]	Loss 0.237 (0.237)	test_acc   0.88 (  0.88)	test_minacc   0.87 (  0.89)	test_majacc   0.88 (  0.87)	Loss_d 0.237 (0.237)	test_acc_d   0.88 (  0.88)	test_minacc_d   0.87 (  0.89)	test_majacc_d   0.88 (  0.87)	test_corr_d   0.69 (  0.71)
Test: [  26/  26]	Loss 0.212 (0.235)	test_acc   0.91 (  0.88)	test_minacc   0.91 (  0.89)	test_majacc   0.91 (  0.88)	Loss_d 0.212 (0.235)	test_acc_d   0.91 (  0.88)	test_minacc_d   0.91 (  0.89)	test_majacc_d   0.91 (  0.88)	test_corr_d   0.74 (  0.71)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.50it/s]
Test: [  0/  1]	Loss 2.338 (2.338)	test_acc   0.59 (  0.59)	test_minacc   0.55 (  0.55)	test_majacc   0.89 (  0.89)	Loss_d 2.338 (2.338)	test_acc_d   0.59 (  0.59)	test_minacc_d   0.55 (  0.55)	test_majacc_d   0.89 (  0.89)	test_corr_d   0.21 (  0.21)
Test: [  1/  1]	Loss 2.338 (2.338)	test_acc   0.59 (  0.59)	test_minacc   0.55 (  0.55)	test_majacc   0.89 (  0.89)	Loss_d 2.338 (2.338)	test_acc_d   0.59 (  0.59)	test_minacc_d   0.55 (  0.55)	test_majacc_d   0.89 (  0.89)	test_corr_d   0.21 (  0.21)
Overall Timing[ 37/  1]	epoch_time 0.0456 (0.0434)	validation_time 0.0004 (0.0006)	train_time 0.0451 (0.0426)
record: (train_acc, test_acc) (0.8854000236392021, 0.5980000495910645)
last accs (train_acc, test_acc) (0.8797000190019607, 0.5850000381469727)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.53it/s] 19%|#9        | 5/26 [00:00<00:00, 24.01it/s] 35%|###4      | 9/26 [00:00<00:00, 27.64it/s] 50%|#####     | 13/26 [00:00<00:00, 29.68it/s] 65%|######5   | 17/26 [00:00<00:00, 31.00it/s] 81%|########  | 21/26 [00:00<00:00, 31.72it/s] 96%|#########6| 25/26 [00:00<00:00, 33.34it/s]100%|##########| 26/26 [00:00<00:00, 28.79it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 988 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 989 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 990 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 991 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 992 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 993 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 994 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 995 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 996 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 997 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 998 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 999 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1000 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1001 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1002 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1003 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1004 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1005 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1006 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1007 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1008 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1009 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1010 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1011 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1012 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1013 400
penalty weights 10000.0
Epoch: [38][  26/  26]	Loss 0.000 (0.001)	train_nll   0.23 (  0.23)	train_penalty   0.00 (  0.00)	weight_norm  25.86 ( 25.85)	train_acc   0.88 (  0.89)	train_minacc   0.91 (  0.90)	train_majacc   0.88 (  0.88)	train_corr   0.00 (  0.00)	l1 8.2418 (7.9573)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.85it/s] 23%|##3       | 6/26 [00:00<00:00, 29.66it/s]                                               23%|##3       | 6/26 [00:00<00:00, 29.66it/s] 42%|####2     | 11/26 [00:00<00:00, 37.17it/s] 62%|######1   | 16/26 [00:00<00:00, 40.80it/s]                                                62%|######1   | 16/26 [00:00<00:00, 40.80it/s] 81%|########  | 21/26 [00:00<00:00, 38.81it/s]100%|##########| 26/26 [00:00<00:00, 41.62it/s]100%|##########| 26/26 [00:00<00:00, 34.83it/s]
Test: [   0/  26]	Loss 0.248 (0.248)	test_acc   0.86 (  0.86)	test_minacc   0.92 (  0.92)	test_majacc   0.85 (  0.85)	Loss_d 0.248 (0.248)	test_acc_d   0.86 (  0.86)	test_minacc_d   0.92 (  0.92)	test_majacc_d   0.85 (  0.85)	test_corr_d   0.69 (  0.69)
Test: [  10/  26]	Loss 0.256 (0.247)	test_acc   0.86 (  0.87)	test_minacc   0.89 (  0.91)	test_majacc   0.86 (  0.86)	Loss_d 0.256 (0.247)	test_acc_d   0.86 (  0.87)	test_minacc_d   0.89 (  0.91)	test_majacc_d   0.86 (  0.86)	test_corr_d   0.69 (  0.70)
Test: [  20/  26]	Loss 0.248 (0.248)	test_acc   0.87 (  0.87)	test_minacc   0.90 (  0.91)	test_majacc   0.87 (  0.86)	Loss_d 0.248 (0.248)	test_acc_d   0.87 (  0.87)	test_minacc_d   0.90 (  0.91)	test_majacc_d   0.87 (  0.86)	test_corr_d   0.68 (  0.69)
Test: [  26/  26]	Loss 0.233 (0.245)	test_acc   0.89 (  0.87)	test_minacc   0.91 (  0.91)	test_majacc   0.88 (  0.87)	Loss_d 0.233 (0.245)	test_acc_d   0.89 (  0.87)	test_minacc_d   0.91 (  0.91)	test_majacc_d   0.88 (  0.87)	test_corr_d   0.72 (  0.69)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.31it/s]
Test: [  0/  1]	Loss 2.302 (2.302)	test_acc   0.61 (  0.61)	test_minacc   0.57 (  0.57)	test_majacc   0.93 (  0.93)	Loss_d 2.302 (2.302)	test_acc_d   0.61 (  0.61)	test_minacc_d   0.57 (  0.57)	test_majacc_d   0.93 (  0.93)	test_corr_d   0.20 (  0.20)
Test: [  1/  1]	Loss 2.302 (2.302)	test_acc   0.61 (  0.61)	test_minacc   0.57 (  0.57)	test_majacc   0.93 (  0.93)	Loss_d 2.302 (2.302)	test_acc_d   0.61 (  0.61)	test_minacc_d   0.57 (  0.57)	test_majacc_d   0.93 (  0.93)	test_corr_d   0.20 (  0.20)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/144/checkpoints/model_best.pth
Overall Timing[ 38/  1]	epoch_time 0.0413 (0.0434)	validation_time 0.0003 (0.0006)	train_time 0.0409 (0.0425)
record: (train_acc, test_acc) (0.872200025498867, 0.609000027179718)
last accs (train_acc, test_acc) (0.872200025498867, 0.609000027179718)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.14it/s] 19%|#9        | 5/26 [00:00<00:00, 21.02it/s] 35%|###4      | 9/26 [00:00<00:00, 25.86it/s] 50%|#####     | 13/26 [00:00<00:00, 28.14it/s] 65%|######5   | 17/26 [00:00<00:00, 30.20it/s] 81%|########  | 21/26 [00:00<00:00, 31.76it/s] 96%|#########6| 25/26 [00:00<00:00, 33.06it/s]100%|##########| 26/26 [00:00<00:00, 27.48it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1014 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1015 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1016 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1017 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1018 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1019 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1020 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1021 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1022 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1023 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1024 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1025 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1026 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1027 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1028 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1029 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1030 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1031 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1032 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1033 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1034 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1035 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1036 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1037 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1038 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1039 400
penalty weights 10000.0
Epoch: [39][  26/  26]	Loss 0.000 (0.000)	train_nll   0.21 (  0.23)	train_penalty   0.00 (  0.00)	weight_norm  25.86 ( 25.86)	train_acc   0.90 (  0.88)	train_minacc   0.89 (  0.90)	train_majacc   0.90 (  0.88)	train_corr   0.00 (  0.00)	l1 8.0429 (8.1451)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:05,  4.30it/s] 15%|#5        | 4/26 [00:00<00:01, 12.20it/s] 35%|###4      | 9/26 [00:00<00:00, 24.24it/s]                                               35%|###4      | 9/26 [00:00<00:00, 24.24it/s] 58%|#####7    | 15/26 [00:00<00:00, 35.00it/s] 77%|#######6  | 20/26 [00:00<00:00, 37.97it/s]                                                77%|#######6  | 20/26 [00:00<00:00, 37.97it/s] 96%|#########6| 25/26 [00:00<00:00, 40.77it/s]100%|##########| 26/26 [00:00<00:00, 29.53it/s]
Test: [   0/  26]	Loss 0.223 (0.223)	test_acc   0.87 (  0.87)	test_minacc   0.87 (  0.87)	test_majacc   0.87 (  0.87)	Loss_d 0.223 (0.223)	test_acc_d   0.87 (  0.87)	test_minacc_d   0.87 (  0.87)	test_majacc_d   0.87 (  0.87)	test_corr_d   0.75 (  0.75)
Test: [  10/  26]	Loss 0.223 (0.208)	test_acc   0.90 (  0.90)	test_minacc   0.94 (  0.92)	test_majacc   0.89 (  0.89)	Loss_d 0.223 (0.208)	test_acc_d   0.90 (  0.90)	test_minacc_d   0.94 (  0.92)	test_majacc_d   0.89 (  0.89)	test_corr_d   0.74 (  0.75)
Test: [  20/  26]	Loss 0.234 (0.216)	test_acc   0.87 (  0.89)	test_minacc   0.86 (  0.91)	test_majacc   0.87 (  0.89)	Loss_d 0.234 (0.216)	test_acc_d   0.87 (  0.89)	test_minacc_d   0.86 (  0.91)	test_majacc_d   0.87 (  0.89)	test_corr_d   0.72 (  0.74)
Test: [  26/  26]	Loss 0.209 (0.217)	test_acc   0.89 (  0.89)	test_minacc   0.89 (  0.91)	test_majacc   0.89 (  0.89)	Loss_d 0.209 (0.217)	test_acc_d   0.89 (  0.89)	test_minacc_d   0.89 (  0.91)	test_majacc_d   0.89 (  0.89)	test_corr_d   0.76 (  0.74)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.65it/s]
Test: [  0/  1]	Loss 2.259 (2.259)	test_acc   0.59 (  0.59)	test_minacc   0.56 (  0.56)	test_majacc   0.89 (  0.89)	Loss_d 2.259 (2.259)	test_acc_d   0.59 (  0.59)	test_minacc_d   0.56 (  0.56)	test_majacc_d   0.89 (  0.89)	test_corr_d   0.25 (  0.25)
Test: [  1/  1]	Loss 2.259 (2.259)	test_acc   0.59 (  0.59)	test_minacc   0.56 (  0.56)	test_majacc   0.89 (  0.89)	Loss_d 2.259 (2.259)	test_acc_d   0.59 (  0.59)	test_minacc_d   0.56 (  0.56)	test_majacc_d   0.89 (  0.89)	test_corr_d   0.25 (  0.25)
Overall Timing[ 39/  1]	epoch_time 0.0499 (0.0435)	validation_time 0.0004 (0.0006)	train_time 0.0495 (0.0427)
record: (train_acc, test_acc) (0.872200025498867, 0.609000027179718)
last accs (train_acc, test_acc) (0.8905000208020211, 0.593000054359436)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 15.69it/s] 23%|##3       | 6/26 [00:00<00:00, 26.72it/s] 38%|###8      | 10/26 [00:00<00:00, 30.41it/s] 54%|#####3    | 14/26 [00:00<00:00, 32.36it/s] 69%|######9   | 18/26 [00:00<00:00, 33.53it/s] 85%|########4 | 22/26 [00:00<00:00, 34.15it/s]100%|##########| 26/26 [00:00<00:00, 34.94it/s]100%|##########| 26/26 [00:00<00:00, 30.07it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1040 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1041 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1042 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1043 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1044 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1045 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1046 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1047 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1048 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1049 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1050 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1051 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1052 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1053 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1054 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1055 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1056 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1057 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1058 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1059 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1060 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1061 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1062 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1063 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1064 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1065 400
penalty weights 10000.0
Epoch: [40][  26/  26]	Loss 0.000 (0.000)	train_nll   0.21 (  0.22)	train_penalty   0.00 (  0.00)	weight_norm  25.86 ( 25.86)	train_acc   0.89 (  0.88)	train_minacc   0.91 (  0.91)	train_majacc   0.88 (  0.88)	train_corr   0.00 (  0.00)	l1 8.1671 (8.3268)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 15.74it/s] 27%|##6       | 7/26 [00:00<00:00, 28.57it/s]                                               27%|##6       | 7/26 [00:00<00:00, 28.57it/s] 46%|####6     | 12/26 [00:00<00:00, 36.00it/s] 65%|######5   | 17/26 [00:00<00:00, 39.37it/s]                                                65%|######5   | 17/26 [00:00<00:00, 39.37it/s] 85%|########4 | 22/26 [00:00<00:00, 40.93it/s]100%|##########| 26/26 [00:00<00:00, 35.06it/s]
Test: [   0/  26]	Loss 0.226 (0.226)	test_acc   0.86 (  0.86)	test_minacc   0.87 (  0.87)	test_majacc   0.86 (  0.86)	Loss_d 0.226 (0.226)	test_acc_d   0.86 (  0.86)	test_minacc_d   0.87 (  0.87)	test_majacc_d   0.86 (  0.86)	test_corr_d   0.75 (  0.75)
Test: [  10/  26]	Loss 0.221 (0.216)	test_acc   0.90 (  0.89)	test_minacc   0.92 (  0.91)	test_majacc   0.90 (  0.89)	Loss_d 0.221 (0.216)	test_acc_d   0.90 (  0.89)	test_minacc_d   0.92 (  0.91)	test_majacc_d   0.90 (  0.89)	test_corr_d   0.75 (  0.75)
Test: [  20/  26]	Loss 0.230 (0.218)	test_acc   0.88 (  0.89)	test_minacc   0.90 (  0.91)	test_majacc   0.88 (  0.89)	Loss_d 0.230 (0.218)	test_acc_d   0.88 (  0.89)	test_minacc_d   0.90 (  0.91)	test_majacc_d   0.88 (  0.89)	test_corr_d   0.72 (  0.75)
Test: [  26/  26]	Loss 0.208 (0.218)	test_acc   0.89 (  0.89)	test_minacc   0.91 (  0.91)	test_majacc   0.88 (  0.89)	Loss_d 0.208 (0.218)	test_acc_d   0.89 (  0.89)	test_minacc_d   0.91 (  0.91)	test_majacc_d   0.88 (  0.89)	test_corr_d   0.76 (  0.75)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 60.26it/s]
Test: [  0/  1]	Loss 2.290 (2.290)	test_acc   0.59 (  0.59)	test_minacc   0.55 (  0.55)	test_majacc   0.89 (  0.89)	Loss_d 2.290 (2.290)	test_acc_d   0.59 (  0.59)	test_minacc_d   0.55 (  0.55)	test_majacc_d   0.89 (  0.89)	test_corr_d   0.26 (  0.26)
Test: [  1/  1]	Loss 2.290 (2.290)	test_acc   0.59 (  0.59)	test_minacc   0.55 (  0.55)	test_majacc   0.89 (  0.89)	Loss_d 2.290 (2.290)	test_acc_d   0.59 (  0.59)	test_minacc_d   0.55 (  0.55)	test_majacc_d   0.89 (  0.89)	test_corr_d   0.26 (  0.26)
Overall Timing[ 40/  1]	epoch_time 0.0434 (0.0435)	validation_time 0.0004 (0.0006)	train_time 0.0430 (0.0427)
record: (train_acc, test_acc) (0.872200025498867, 0.609000027179718)
last accs (train_acc, test_acc) (0.8900000244379044, 0.5879999995231628)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:01, 22.83it/s] 27%|##6       | 7/26 [00:00<00:00, 29.42it/s] 42%|####2     | 11/26 [00:00<00:00, 31.37it/s] 58%|#####7    | 15/26 [00:00<00:00, 32.35it/s] 73%|#######3  | 19/26 [00:00<00:00, 33.49it/s] 88%|########8 | 23/26 [00:00<00:00, 33.89it/s]100%|##########| 26/26 [00:00<00:00, 30.41it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1066 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1067 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1068 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1069 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1070 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1071 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1072 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1073 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1074 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1075 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1076 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1077 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1078 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1079 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1080 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1081 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1082 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1083 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1084 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1085 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1086 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1087 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1088 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1089 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1090 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1091 400
penalty weights 10000.0
Epoch: [41][  26/  26]	Loss 0.000 (0.000)	train_nll   0.22 (  0.22)	train_penalty   0.00 (  0.00)	weight_norm  25.87 ( 25.87)	train_acc   0.89 (  0.89)	train_minacc   0.97 (  0.92)	train_majacc   0.88 (  0.88)	train_corr   0.00 (  0.00)	l1 8.3697 (8.1209)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:00, 26.54it/s] 27%|##6       | 7/26 [00:00<00:00, 31.60it/s]                                               27%|##6       | 7/26 [00:00<00:00, 31.60it/s] 46%|####6     | 12/26 [00:00<00:00, 37.09it/s] 69%|######9   | 18/26 [00:00<00:00, 43.75it/s]                                                69%|######9   | 18/26 [00:00<00:00, 43.75it/s] 88%|########8 | 23/26 [00:00<00:00, 44.51it/s]100%|##########| 26/26 [00:00<00:00, 39.10it/s]
Test: [   0/  26]	Loss 0.229 (0.229)	test_acc   0.87 (  0.87)	test_minacc   0.94 (  0.94)	test_majacc   0.86 (  0.86)	Loss_d 0.229 (0.229)	test_acc_d   0.87 (  0.87)	test_minacc_d   0.94 (  0.94)	test_majacc_d   0.86 (  0.86)	test_corr_d   0.71 (  0.71)
Test: [  10/  26]	Loss 0.252 (0.243)	test_acc   0.86 (  0.87)	test_minacc   0.89 (  0.91)	test_majacc   0.86 (  0.86)	Loss_d 0.252 (0.243)	test_acc_d   0.86 (  0.87)	test_minacc_d   0.89 (  0.91)	test_majacc_d   0.86 (  0.86)	test_corr_d   0.70 (  0.71)
Test: [  20/  26]	Loss 0.246 (0.243)	test_acc   0.87 (  0.87)	test_minacc   0.88 (  0.92)	test_majacc   0.86 (  0.86)	Loss_d 0.246 (0.243)	test_acc_d   0.87 (  0.87)	test_minacc_d   0.88 (  0.92)	test_majacc_d   0.86 (  0.86)	test_corr_d   0.69 (  0.70)
Test: [  26/  26]	Loss 0.222 (0.240)	test_acc   0.89 (  0.87)	test_minacc   0.97 (  0.92)	test_majacc   0.88 (  0.86)	Loss_d 0.222 (0.240)	test_acc_d   0.89 (  0.87)	test_minacc_d   0.97 (  0.92)	test_majacc_d   0.88 (  0.86)	test_corr_d   0.73 (  0.70)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 60.37it/s]
Test: [  0/  1]	Loss 2.330 (2.330)	test_acc   0.61 (  0.61)	test_minacc   0.58 (  0.58)	test_majacc   0.92 (  0.92)	Loss_d 2.330 (2.330)	test_acc_d   0.61 (  0.61)	test_minacc_d   0.58 (  0.58)	test_majacc_d   0.92 (  0.92)	test_corr_d   0.20 (  0.20)
Test: [  1/  1]	Loss 2.330 (2.330)	test_acc   0.61 (  0.61)	test_minacc   0.58 (  0.58)	test_majacc   0.92 (  0.92)	Loss_d 2.330 (2.330)	test_acc_d   0.61 (  0.61)	test_minacc_d   0.58 (  0.58)	test_majacc_d   0.92 (  0.92)	test_corr_d   0.20 (  0.20)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/144/checkpoints/model_best.pth
Overall Timing[ 41/  1]	epoch_time 0.0407 (0.0435)	validation_time 0.0008 (0.0006)	train_time 0.0398 (0.0427)
record: (train_acc, test_acc) (0.8733000218272209, 0.6110000014305115)
last accs (train_acc, test_acc) (0.8733000218272209, 0.6110000014305115)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  6.09it/s] 19%|#9        | 5/26 [00:00<00:01, 20.00it/s] 35%|###4      | 9/26 [00:00<00:00, 25.84it/s] 50%|#####     | 13/26 [00:00<00:00, 28.72it/s] 65%|######5   | 17/26 [00:00<00:00, 30.69it/s] 81%|########  | 21/26 [00:00<00:00, 32.03it/s] 96%|#########6| 25/26 [00:00<00:00, 33.04it/s]100%|##########| 26/26 [00:00<00:00, 27.33it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1092 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1093 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1094 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1095 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1096 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1097 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1098 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1099 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1100 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1101 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1102 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1103 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1104 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1105 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1106 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1107 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1108 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1109 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1110 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1111 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1112 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1113 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1114 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1115 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1116 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1117 400
penalty weights 10000.0
Epoch: [42][  26/  26]	Loss 0.000 (0.000)	train_nll   0.21 (  0.23)	train_penalty   0.00 (  0.00)	weight_norm  25.87 ( 25.87)	train_acc   0.90 (  0.88)	train_minacc   0.94 (  0.91)	train_majacc   0.89 (  0.88)	train_corr   0.00 (  0.00)	l1 8.1044 (8.1806)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.16it/s] 12%|#1        | 3/26 [00:00<00:01, 14.82it/s] 31%|###       | 8/26 [00:00<00:00, 29.53it/s]                                               31%|###       | 8/26 [00:00<00:00, 29.53it/s] 50%|#####     | 13/26 [00:00<00:00, 36.01it/s] 69%|######9   | 18/26 [00:00<00:00, 36.67it/s]                                                69%|######9   | 18/26 [00:00<00:00, 36.67it/s] 88%|########8 | 23/26 [00:00<00:00, 39.68it/s]100%|##########| 26/26 [00:00<00:00, 33.56it/s]
Test: [   0/  26]	Loss 0.223 (0.223)	test_acc   0.88 (  0.88)	test_minacc   0.92 (  0.92)	test_majacc   0.87 (  0.87)	Loss_d 0.223 (0.223)	test_acc_d   0.88 (  0.88)	test_minacc_d   0.92 (  0.92)	test_majacc_d   0.87 (  0.87)	test_corr_d   0.74 (  0.74)
Test: [  10/  26]	Loss 0.226 (0.216)	test_acc   0.88 (  0.89)	test_minacc   0.92 (  0.93)	test_majacc   0.88 (  0.88)	Loss_d 0.226 (0.216)	test_acc_d   0.88 (  0.89)	test_minacc_d   0.92 (  0.93)	test_majacc_d   0.88 (  0.88)	test_corr_d   0.73 (  0.74)
Test: [  20/  26]	Loss 0.236 (0.221)	test_acc   0.87 (  0.89)	test_minacc   0.87 (  0.93)	test_majacc   0.87 (  0.88)	Loss_d 0.236 (0.221)	test_acc_d   0.87 (  0.89)	test_minacc_d   0.87 (  0.93)	test_majacc_d   0.87 (  0.88)	test_corr_d   0.71 (  0.73)
Test: [  26/  26]	Loss 0.215 (0.221)	test_acc   0.90 (  0.89)	test_minacc   0.94 (  0.93)	test_majacc   0.89 (  0.88)	Loss_d 0.215 (0.221)	test_acc_d   0.90 (  0.89)	test_minacc_d   0.94 (  0.93)	test_majacc_d   0.89 (  0.88)	test_corr_d   0.75 (  0.73)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 64.21it/s]
Test: [  0/  1]	Loss 2.232 (2.232)	test_acc   0.60 (  0.60)	test_minacc   0.57 (  0.57)	test_majacc   0.90 (  0.90)	Loss_d 2.232 (2.232)	test_acc_d   0.60 (  0.60)	test_minacc_d   0.57 (  0.57)	test_majacc_d   0.90 (  0.90)	test_corr_d   0.23 (  0.23)
Test: [  1/  1]	Loss 2.232 (2.232)	test_acc   0.60 (  0.60)	test_minacc   0.57 (  0.57)	test_majacc   0.90 (  0.90)	Loss_d 2.232 (2.232)	test_acc_d   0.60 (  0.60)	test_minacc_d   0.57 (  0.57)	test_majacc_d   0.90 (  0.90)	test_corr_d   0.23 (  0.23)
Overall Timing[ 42/  1]	epoch_time 0.0395 (0.0434)	validation_time 0.0003 (0.0006)	train_time 0.0392 (0.0426)
record: (train_acc, test_acc) (0.8733000218272209, 0.6110000014305115)
last accs (train_acc, test_acc) (0.8866000235676765, 0.6040000319480896)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.16it/s] 12%|#1        | 3/26 [00:00<00:01, 14.02it/s] 27%|##6       | 7/26 [00:00<00:00, 23.35it/s] 42%|####2     | 11/26 [00:00<00:00, 27.64it/s] 58%|#####7    | 15/26 [00:00<00:00, 30.19it/s] 73%|#######3  | 19/26 [00:00<00:00, 32.05it/s] 88%|########8 | 23/26 [00:00<00:00, 33.18it/s]100%|##########| 26/26 [00:00<00:00, 27.36it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1118 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1119 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1120 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1121 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1122 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1123 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1124 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1125 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1126 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1127 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1128 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1129 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1130 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1131 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1132 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1133 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1134 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1135 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1136 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1137 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1138 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1139 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1140 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1141 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1142 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1143 400
penalty weights 10000.0
Epoch: [43][  26/  26]	Loss 0.000 (0.000)	train_nll   0.21 (  0.23)	train_penalty   0.00 (  0.00)	weight_norm  25.87 ( 25.87)	train_acc   0.90 (  0.88)	train_minacc   0.91 (  0.93)	train_majacc   0.89 (  0.88)	train_corr   0.00 (  0.00)	l1 8.3229 (8.3903)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.89it/s] 23%|##3       | 6/26 [00:00<00:00, 29.47it/s]                                               23%|##3       | 6/26 [00:00<00:00, 29.47it/s] 42%|####2     | 11/26 [00:00<00:00, 36.78it/s] 62%|######1   | 16/26 [00:00<00:00, 40.66it/s]                                                62%|######1   | 16/26 [00:00<00:00, 40.66it/s] 81%|########  | 21/26 [00:00<00:00, 38.28it/s]100%|##########| 26/26 [00:00<00:00, 41.47it/s]100%|##########| 26/26 [00:00<00:00, 34.76it/s]
Test: [   0/  26]	Loss 0.229 (0.229)	test_acc   0.87 (  0.87)	test_minacc   0.89 (  0.89)	test_majacc   0.86 (  0.86)	Loss_d 0.229 (0.229)	test_acc_d   0.87 (  0.87)	test_minacc_d   0.89 (  0.89)	test_majacc_d   0.86 (  0.86)	test_corr_d   0.75 (  0.75)
Test: [  10/  26]	Loss 0.220 (0.218)	test_acc   0.90 (  0.89)	test_minacc   0.92 (  0.92)	test_majacc   0.90 (  0.88)	Loss_d 0.220 (0.218)	test_acc_d   0.90 (  0.89)	test_minacc_d   0.92 (  0.92)	test_majacc_d   0.90 (  0.88)	test_corr_d   0.75 (  0.75)
Test: [  20/  26]	Loss 0.237 (0.221)	test_acc   0.87 (  0.89)	test_minacc   0.90 (  0.91)	test_majacc   0.87 (  0.88)	Loss_d 0.237 (0.221)	test_acc_d   0.87 (  0.89)	test_minacc_d   0.90 (  0.91)	test_majacc_d   0.87 (  0.88)	test_corr_d   0.72 (  0.75)
Test: [  26/  26]	Loss 0.210 (0.221)	test_acc   0.90 (  0.89)	test_minacc   0.91 (  0.91)	test_majacc   0.89 (  0.88)	Loss_d 0.210 (0.221)	test_acc_d   0.90 (  0.89)	test_minacc_d   0.91 (  0.91)	test_majacc_d   0.89 (  0.88)	test_corr_d   0.76 (  0.75)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 60.10it/s]
Test: [  0/  1]	Loss 2.320 (2.320)	test_acc   0.60 (  0.60)	test_minacc   0.56 (  0.56)	test_majacc   0.90 (  0.90)	Loss_d 2.320 (2.320)	test_acc_d   0.60 (  0.60)	test_minacc_d   0.56 (  0.56)	test_majacc_d   0.90 (  0.90)	test_corr_d   0.24 (  0.24)
Test: [  1/  1]	Loss 2.320 (2.320)	test_acc   0.60 (  0.60)	test_minacc   0.56 (  0.56)	test_majacc   0.90 (  0.90)	Loss_d 2.320 (2.320)	test_acc_d   0.60 (  0.60)	test_minacc_d   0.56 (  0.56)	test_majacc_d   0.90 (  0.90)	test_corr_d   0.24 (  0.24)
Overall Timing[ 43/  1]	epoch_time 0.0443 (0.0434)	validation_time 0.0004 (0.0006)	train_time 0.0438 (0.0426)
record: (train_acc, test_acc) (0.8733000218272209, 0.6110000014305115)
last accs (train_acc, test_acc) (0.8893000268936158, 0.597000002861023)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:05,  4.84it/s] 15%|#5        | 4/26 [00:00<00:01, 14.85it/s] 31%|###       | 8/26 [00:00<00:00, 22.60it/s] 46%|####6     | 12/26 [00:00<00:00, 27.23it/s] 62%|######1   | 16/26 [00:00<00:00, 29.64it/s] 77%|#######6  | 20/26 [00:00<00:00, 31.51it/s] 92%|#########2| 24/26 [00:00<00:00, 33.66it/s]100%|##########| 26/26 [00:00<00:00, 26.64it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1144 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1145 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1146 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1147 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1148 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1149 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1150 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1151 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1152 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1153 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1154 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1155 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1156 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1157 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1158 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1159 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1160 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1161 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1162 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1163 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1164 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1165 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1166 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1167 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1168 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1169 400
penalty weights 10000.0
Epoch: [44][  26/  26]	Loss 0.000 (0.000)	train_nll   0.22 (  0.22)	train_penalty   0.00 (  0.00)	weight_norm  25.87 ( 25.87)	train_acc   0.90 (  0.89)	train_minacc   0.97 (  0.93)	train_majacc   0.89 (  0.88)	train_corr   0.00 (  0.00)	l1 8.3553 (8.2184)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 18.73it/s] 27%|##6       | 7/26 [00:00<00:00, 29.54it/s]                                               27%|##6       | 7/26 [00:00<00:00, 29.54it/s] 46%|####6     | 12/26 [00:00<00:00, 36.00it/s] 65%|######5   | 17/26 [00:00<00:00, 40.08it/s]                                                65%|######5   | 17/26 [00:00<00:00, 40.08it/s] 85%|########4 | 22/26 [00:00<00:00, 41.88it/s]100%|##########| 26/26 [00:00<00:00, 36.00it/s]
Test: [   0/  26]	Loss 0.228 (0.228)	test_acc   0.86 (  0.86)	test_minacc   0.96 (  0.96)	test_majacc   0.85 (  0.85)	Loss_d 0.228 (0.228)	test_acc_d   0.86 (  0.86)	test_minacc_d   0.96 (  0.96)	test_majacc_d   0.85 (  0.85)	test_corr_d   0.71 (  0.71)
Test: [  10/  26]	Loss 0.243 (0.231)	test_acc   0.87 (  0.87)	test_minacc   0.92 (  0.94)	test_majacc   0.86 (  0.86)	Loss_d 0.243 (0.231)	test_acc_d   0.87 (  0.87)	test_minacc_d   0.92 (  0.94)	test_majacc_d   0.86 (  0.86)	test_corr_d   0.70 (  0.71)
Test: [  20/  26]	Loss 0.246 (0.234)	test_acc   0.87 (  0.88)	test_minacc   0.90 (  0.93)	test_majacc   0.86 (  0.86)	Loss_d 0.246 (0.234)	test_acc_d   0.87 (  0.88)	test_minacc_d   0.90 (  0.93)	test_majacc_d   0.86 (  0.86)	test_corr_d   0.68 (  0.70)
Test: [  26/  26]	Loss 0.219 (0.233)	test_acc   0.90 (  0.88)	test_minacc   0.97 (  0.94)	test_majacc   0.89 (  0.86)	Loss_d 0.219 (0.233)	test_acc_d   0.90 (  0.88)	test_minacc_d   0.97 (  0.94)	test_majacc_d   0.89 (  0.86)	test_corr_d   0.73 (  0.70)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.12it/s]
Test: [  0/  1]	Loss 2.247 (2.247)	test_acc   0.62 (  0.62)	test_minacc   0.59 (  0.59)	test_majacc   0.89 (  0.89)	Loss_d 2.247 (2.247)	test_acc_d   0.62 (  0.62)	test_minacc_d   0.59 (  0.59)	test_majacc_d   0.89 (  0.89)	test_corr_d   0.17 (  0.17)
Test: [  1/  1]	Loss 2.247 (2.247)	test_acc   0.62 (  0.62)	test_minacc   0.59 (  0.59)	test_majacc   0.89 (  0.89)	Loss_d 2.247 (2.247)	test_acc_d   0.62 (  0.62)	test_minacc_d   0.59 (  0.59)	test_majacc_d   0.89 (  0.89)	test_corr_d   0.17 (  0.17)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/144/checkpoints/model_best.pth
Overall Timing[ 44/  1]	epoch_time 0.0423 (0.0434)	validation_time 0.0003 (0.0006)	train_time 0.0420 (0.0426)
record: (train_acc, test_acc) (0.8757000197768211, 0.6180000305175781)
last accs (train_acc, test_acc) (0.8757000197768211, 0.6180000305175781)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.39it/s] 19%|#9        | 5/26 [00:00<00:00, 21.45it/s] 35%|###4      | 9/26 [00:00<00:00, 26.87it/s] 50%|#####     | 13/26 [00:00<00:00, 30.22it/s] 65%|######5   | 17/26 [00:00<00:00, 31.84it/s] 81%|########  | 21/26 [00:00<00:00, 32.81it/s] 96%|#########6| 25/26 [00:00<00:00, 33.30it/s]100%|##########| 26/26 [00:00<00:00, 28.34it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1170 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1171 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1172 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1173 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1174 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1175 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1176 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1177 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1178 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1179 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1180 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1181 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1182 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1183 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1184 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1185 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1186 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1187 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1188 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1189 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1190 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1191 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1192 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1193 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1194 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1195 400
penalty weights 10000.0
Epoch: [45][  26/  26]	Loss 0.000 (0.000)	train_nll   0.21 (  0.23)	train_penalty   0.00 (  0.00)	weight_norm  25.87 ( 25.87)	train_acc   0.90 (  0.88)	train_minacc   0.97 (  0.93)	train_majacc   0.89 (  0.87)	train_corr   0.00 (  0.00)	l1 8.1779 (8.2534)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.27it/s] 23%|##3       | 6/26 [00:00<00:00, 21.03it/s]                                               23%|##3       | 6/26 [00:00<00:00, 21.03it/s] 42%|####2     | 11/26 [00:00<00:00, 30.27it/s] 62%|######1   | 16/26 [00:00<00:00, 36.13it/s]                                                62%|######1   | 16/26 [00:00<00:00, 36.13it/s] 81%|########  | 21/26 [00:00<00:00, 39.59it/s]100%|##########| 26/26 [00:00<00:00, 42.38it/s]100%|##########| 26/26 [00:00<00:00, 32.07it/s]
Test: [   0/  26]	Loss 0.222 (0.222)	test_acc   0.87 (  0.87)	test_minacc   0.94 (  0.94)	test_majacc   0.86 (  0.86)	Loss_d 0.222 (0.222)	test_acc_d   0.87 (  0.87)	test_minacc_d   0.94 (  0.94)	test_majacc_d   0.86 (  0.86)	test_corr_d   0.74 (  0.74)
Test: [  10/  26]	Loss 0.233 (0.223)	test_acc   0.88 (  0.88)	test_minacc   0.92 (  0.94)	test_majacc   0.87 (  0.87)	Loss_d 0.233 (0.223)	test_acc_d   0.88 (  0.88)	test_minacc_d   0.92 (  0.94)	test_majacc_d   0.87 (  0.87)	test_corr_d   0.72 (  0.73)
Test: [  20/  26]	Loss 0.238 (0.226)	test_acc   0.86 (  0.88)	test_minacc   0.90 (  0.93)	test_majacc   0.86 (  0.87)	Loss_d 0.238 (0.226)	test_acc_d   0.86 (  0.88)	test_minacc_d   0.90 (  0.93)	test_majacc_d   0.86 (  0.87)	test_corr_d   0.71 (  0.73)
Test: [  26/  26]	Loss 0.215 (0.226)	test_acc   0.90 (  0.88)	test_minacc   0.97 (  0.93)	test_majacc   0.89 (  0.87)	Loss_d 0.215 (0.226)	test_acc_d   0.90 (  0.88)	test_minacc_d   0.97 (  0.93)	test_majacc_d   0.89 (  0.87)	test_corr_d   0.75 (  0.73)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.78it/s]
Test: [  0/  1]	Loss 2.236 (2.236)	test_acc   0.61 (  0.61)	test_minacc   0.58 (  0.58)	test_majacc   0.89 (  0.89)	Loss_d 2.236 (2.236)	test_acc_d   0.61 (  0.61)	test_minacc_d   0.58 (  0.58)	test_majacc_d   0.89 (  0.89)	test_corr_d   0.21 (  0.21)
Test: [  1/  1]	Loss 2.236 (2.236)	test_acc   0.61 (  0.61)	test_minacc   0.58 (  0.58)	test_majacc   0.89 (  0.89)	Loss_d 2.236 (2.236)	test_acc_d   0.61 (  0.61)	test_minacc_d   0.58 (  0.58)	test_majacc_d   0.89 (  0.89)	test_corr_d   0.21 (  0.21)
Overall Timing[ 45/  1]	epoch_time 0.0416 (0.0433)	validation_time 0.0004 (0.0006)	train_time 0.0412 (0.0426)
record: (train_acc, test_acc) (0.8757000197768211, 0.6180000305175781)
last accs (train_acc, test_acc) (0.881000018298626, 0.612000048160553)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.92it/s] 19%|#9        | 5/26 [00:00<00:00, 24.39it/s] 35%|###4      | 9/26 [00:00<00:00, 28.69it/s] 50%|#####     | 13/26 [00:00<00:00, 30.69it/s] 65%|######5   | 17/26 [00:00<00:00, 32.18it/s] 81%|########  | 21/26 [00:00<00:00, 33.51it/s] 96%|#########6| 25/26 [00:00<00:00, 33.80it/s]100%|##########| 26/26 [00:00<00:00, 29.23it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1196 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1197 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1198 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1199 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1200 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1201 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1202 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1203 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1204 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1205 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1206 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1207 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1208 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1209 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1210 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1211 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1212 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1213 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1214 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1215 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1216 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1217 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1218 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1219 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1220 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1221 400
penalty weights 10000.0
Epoch: [46][  26/  26]	Loss 0.000 (0.000)	train_nll   0.21 (  0.23)	train_penalty   0.00 (  0.00)	weight_norm  25.88 ( 25.88)	train_acc   0.90 (  0.88)	train_minacc   0.97 (  0.93)	train_majacc   0.89 (  0.87)	train_corr   0.00 (  0.00)	l1 8.2924 (8.3109)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.84it/s] 23%|##3       | 6/26 [00:00<00:00, 24.72it/s]                                               23%|##3       | 6/26 [00:00<00:00, 24.72it/s] 42%|####2     | 11/26 [00:00<00:00, 32.95it/s] 62%|######1   | 16/26 [00:00<00:00, 38.12it/s]                                                62%|######1   | 16/26 [00:00<00:00, 38.12it/s] 81%|########  | 21/26 [00:00<00:00, 39.46it/s]100%|##########| 26/26 [00:00<00:00, 42.45it/s]100%|##########| 26/26 [00:00<00:00, 33.41it/s]
Test: [   0/  26]	Loss 0.227 (0.227)	test_acc   0.86 (  0.86)	test_minacc   0.92 (  0.92)	test_majacc   0.85 (  0.85)	Loss_d 0.227 (0.227)	test_acc_d   0.86 (  0.86)	test_minacc_d   0.92 (  0.92)	test_majacc_d   0.85 (  0.85)	test_corr_d   0.74 (  0.74)
Test: [  10/  26]	Loss 0.227 (0.221)	test_acc   0.89 (  0.89)	test_minacc   0.94 (  0.94)	test_majacc   0.88 (  0.88)	Loss_d 0.227 (0.221)	test_acc_d   0.89 (  0.89)	test_minacc_d   0.94 (  0.94)	test_majacc_d   0.88 (  0.88)	test_corr_d   0.74 (  0.74)
Test: [  20/  26]	Loss 0.237 (0.224)	test_acc   0.87 (  0.89)	test_minacc   0.88 (  0.93)	test_majacc   0.87 (  0.88)	Loss_d 0.237 (0.224)	test_acc_d   0.87 (  0.89)	test_minacc_d   0.88 (  0.93)	test_majacc_d   0.87 (  0.88)	test_corr_d   0.71 (  0.74)
Test: [  26/  26]	Loss 0.213 (0.224)	test_acc   0.90 (  0.89)	test_minacc   0.97 (  0.93)	test_majacc   0.89 (  0.88)	Loss_d 0.213 (0.224)	test_acc_d   0.90 (  0.89)	test_minacc_d   0.97 (  0.93)	test_majacc_d   0.89 (  0.88)	test_corr_d   0.75 (  0.74)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.64it/s]
Test: [  0/  1]	Loss 2.292 (2.292)	test_acc   0.60 (  0.60)	test_minacc   0.57 (  0.57)	test_majacc   0.89 (  0.89)	Loss_d 2.292 (2.292)	test_acc_d   0.60 (  0.60)	test_minacc_d   0.57 (  0.57)	test_majacc_d   0.89 (  0.89)	test_corr_d   0.22 (  0.22)
Test: [  1/  1]	Loss 2.292 (2.292)	test_acc   0.60 (  0.60)	test_minacc   0.57 (  0.57)	test_majacc   0.89 (  0.89)	Loss_d 2.292 (2.292)	test_acc_d   0.60 (  0.60)	test_minacc_d   0.57 (  0.57)	test_majacc_d   0.89 (  0.89)	test_corr_d   0.22 (  0.22)
Overall Timing[ 46/  1]	epoch_time 0.0389 (0.0432)	validation_time 0.0003 (0.0006)	train_time 0.0385 (0.0425)
record: (train_acc, test_acc) (0.8757000197768211, 0.6180000305175781)
last accs (train_acc, test_acc) (0.8874000225663186, 0.6010000109672546)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:09,  2.50it/s] 19%|#9        | 5/26 [00:00<00:01, 11.96it/s] 35%|###4      | 9/26 [00:00<00:00, 19.01it/s] 50%|#####     | 13/26 [00:00<00:00, 23.72it/s] 65%|######5   | 17/26 [00:00<00:00, 26.40it/s] 81%|########  | 21/26 [00:00<00:00, 28.84it/s] 96%|#########6| 25/26 [00:01<00:00, 31.01it/s]100%|##########| 26/26 [00:01<00:00, 22.34it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1222 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1223 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1224 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1225 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1226 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1227 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1228 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1229 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1230 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1231 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1232 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1233 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1234 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1235 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1236 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1237 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1238 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1239 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1240 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1241 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1242 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1243 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1244 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1245 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1246 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1247 400
penalty weights 10000.0
Epoch: [47][  26/  26]	Loss 0.000 (0.000)	train_nll   0.22 (  0.23)	train_penalty   0.00 (  0.00)	weight_norm  25.88 ( 25.88)	train_acc   0.90 (  0.89)	train_minacc   0.97 (  0.93)	train_majacc   0.88 (  0.88)	train_corr   0.00 (  0.00)	l1 8.3249 (8.2904)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 18.45it/s] 27%|##6       | 7/26 [00:00<00:00, 35.10it/s]                                               27%|##6       | 7/26 [00:00<00:00, 35.10it/s] 42%|####2     | 11/26 [00:00<00:00, 35.24it/s] 65%|######5   | 17/26 [00:00<00:00, 40.55it/s]                                                65%|######5   | 17/26 [00:00<00:00, 40.55it/s] 85%|########4 | 22/26 [00:00<00:00, 41.99it/s]100%|##########| 26/26 [00:00<00:00, 36.97it/s]
Test: [   0/  26]	Loss 0.229 (0.229)	test_acc   0.85 (  0.85)	test_minacc   0.92 (  0.92)	test_majacc   0.84 (  0.84)	Loss_d 0.229 (0.229)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.92 (  0.92)	test_majacc_d   0.84 (  0.84)	test_corr_d   0.73 (  0.73)
Test: [  10/  26]	Loss 0.233 (0.226)	test_acc   0.88 (  0.88)	test_minacc   0.94 (  0.94)	test_majacc   0.87 (  0.87)	Loss_d 0.233 (0.226)	test_acc_d   0.88 (  0.88)	test_minacc_d   0.94 (  0.94)	test_majacc_d   0.87 (  0.87)	test_corr_d   0.72 (  0.72)
Test: [  20/  26]	Loss 0.241 (0.228)	test_acc   0.87 (  0.88)	test_minacc   0.90 (  0.93)	test_majacc   0.87 (  0.87)	Loss_d 0.241 (0.228)	test_acc_d   0.87 (  0.88)	test_minacc_d   0.90 (  0.93)	test_majacc_d   0.87 (  0.87)	test_corr_d   0.70 (  0.72)
Test: [  26/  26]	Loss 0.217 (0.228)	test_acc   0.90 (  0.88)	test_minacc   0.97 (  0.94)	test_majacc   0.88 (  0.87)	Loss_d 0.217 (0.228)	test_acc_d   0.90 (  0.88)	test_minacc_d   0.97 (  0.94)	test_majacc_d   0.88 (  0.87)	test_corr_d   0.74 (  0.72)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 59.96it/s]
Test: [  0/  1]	Loss 2.252 (2.252)	test_acc   0.61 (  0.61)	test_minacc   0.58 (  0.58)	test_majacc   0.89 (  0.89)	Loss_d 2.252 (2.252)	test_acc_d   0.61 (  0.61)	test_minacc_d   0.58 (  0.58)	test_majacc_d   0.89 (  0.89)	test_corr_d   0.18 (  0.18)
Test: [  1/  1]	Loss 2.252 (2.252)	test_acc   0.61 (  0.61)	test_minacc   0.58 (  0.58)	test_majacc   0.89 (  0.89)	Loss_d 2.252 (2.252)	test_acc_d   0.61 (  0.61)	test_minacc_d   0.58 (  0.58)	test_majacc_d   0.89 (  0.89)	test_corr_d   0.18 (  0.18)
Overall Timing[ 47/  1]	epoch_time 0.0409 (0.0432)	validation_time 0.0004 (0.0006)	train_time 0.0405 (0.0424)
record: (train_acc, test_acc) (0.8757000197768211, 0.6180000305175781)
last accs (train_acc, test_acc) (0.8819000203609466, 0.6130000352859497)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  6.02it/s] 19%|#9        | 5/26 [00:00<00:01, 19.60it/s] 35%|###4      | 9/26 [00:00<00:00, 25.95it/s] 50%|#####     | 13/26 [00:00<00:00, 29.30it/s] 65%|######5   | 17/26 [00:00<00:00, 31.31it/s] 81%|########  | 21/26 [00:00<00:00, 32.80it/s] 96%|#########6| 25/26 [00:00<00:00, 33.50it/s]100%|##########| 26/26 [00:00<00:00, 27.80it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1248 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1249 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1250 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1251 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1252 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1253 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1254 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1255 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1256 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1257 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1258 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1259 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1260 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1261 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1262 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1263 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1264 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1265 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1266 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1267 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1268 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1269 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1270 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1271 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1272 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1273 400
penalty weights 10000.0
Epoch: [48][  26/  26]	Loss 0.000 (0.000)	train_nll   0.21 (  0.23)	train_penalty   0.00 (  0.00)	weight_norm  25.88 ( 25.88)	train_acc   0.90 (  0.88)	train_minacc   0.97 (  0.93)	train_majacc   0.89 (  0.88)	train_corr   0.00 (  0.00)	l1 8.3060 (8.2747)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.69it/s] 23%|##3       | 6/26 [00:00<00:00, 28.96it/s]                                               23%|##3       | 6/26 [00:00<00:00, 28.96it/s] 42%|####2     | 11/26 [00:00<00:00, 36.49it/s] 62%|######1   | 16/26 [00:00<00:00, 40.16it/s]                                                62%|######1   | 16/26 [00:00<00:00, 40.16it/s] 81%|########  | 21/26 [00:00<00:00, 38.86it/s]100%|##########| 26/26 [00:00<00:00, 41.87it/s]100%|##########| 26/26 [00:00<00:00, 34.57it/s]
Test: [   0/  26]	Loss 0.226 (0.226)	test_acc   0.86 (  0.86)	test_minacc   0.92 (  0.92)	test_majacc   0.85 (  0.85)	Loss_d 0.226 (0.226)	test_acc_d   0.86 (  0.86)	test_minacc_d   0.92 (  0.92)	test_majacc_d   0.85 (  0.85)	test_corr_d   0.73 (  0.73)
Test: [  10/  26]	Loss 0.235 (0.225)	test_acc   0.88 (  0.88)	test_minacc   0.94 (  0.94)	test_majacc   0.87 (  0.87)	Loss_d 0.235 (0.225)	test_acc_d   0.88 (  0.88)	test_minacc_d   0.94 (  0.94)	test_majacc_d   0.87 (  0.87)	test_corr_d   0.72 (  0.73)
Test: [  20/  26]	Loss 0.239 (0.228)	test_acc   0.87 (  0.88)	test_minacc   0.90 (  0.93)	test_majacc   0.86 (  0.87)	Loss_d 0.239 (0.228)	test_acc_d   0.87 (  0.88)	test_minacc_d   0.90 (  0.93)	test_majacc_d   0.86 (  0.87)	test_corr_d   0.70 (  0.72)
Test: [  26/  26]	Loss 0.214 (0.227)	test_acc   0.90 (  0.88)	test_minacc   0.97 (  0.93)	test_majacc   0.89 (  0.87)	Loss_d 0.214 (0.227)	test_acc_d   0.90 (  0.88)	test_minacc_d   0.97 (  0.93)	test_majacc_d   0.89 (  0.87)	test_corr_d   0.74 (  0.72)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.02it/s]
Test: [  0/  1]	Loss 2.268 (2.268)	test_acc   0.61 (  0.61)	test_minacc   0.58 (  0.58)	test_majacc   0.89 (  0.89)	Loss_d 2.268 (2.268)	test_acc_d   0.61 (  0.61)	test_minacc_d   0.58 (  0.58)	test_majacc_d   0.89 (  0.89)	test_corr_d   0.20 (  0.20)
Test: [  1/  1]	Loss 2.268 (2.268)	test_acc   0.61 (  0.61)	test_minacc   0.58 (  0.58)	test_majacc   0.89 (  0.89)	Loss_d 2.268 (2.268)	test_acc_d   0.61 (  0.61)	test_minacc_d   0.58 (  0.58)	test_majacc_d   0.89 (  0.89)	test_corr_d   0.20 (  0.20)
Overall Timing[ 48/  1]	epoch_time 0.0399 (0.0431)	validation_time 0.0005 (0.0005)	train_time 0.0393 (0.0424)
record: (train_acc, test_acc) (0.8757000197768211, 0.6180000305175781)
last accs (train_acc, test_acc) (0.8822000265717507, 0.6110000014305115)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:00, 26.32it/s] 27%|##6       | 7/26 [00:00<00:00, 30.39it/s] 42%|####2     | 11/26 [00:00<00:00, 32.52it/s] 58%|#####7    | 15/26 [00:00<00:00, 34.25it/s] 73%|#######3  | 19/26 [00:00<00:00, 34.39it/s] 88%|########8 | 23/26 [00:00<00:00, 34.75it/s]100%|##########| 26/26 [00:00<00:00, 31.45it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1274 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1275 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1276 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1277 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1278 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1279 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1280 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1281 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1282 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1283 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1284 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1285 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1286 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1287 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1288 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1289 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1290 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1291 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1292 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1293 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1294 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1295 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1296 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1297 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1298 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1299 400
penalty weights 10000.0
Epoch: [49][  26/  26]	Loss 0.000 (0.000)	train_nll   0.21 (  0.23)	train_penalty   0.00 (  0.00)	weight_norm  25.88 ( 25.88)	train_acc   0.90 (  0.88)	train_minacc   0.97 (  0.93)	train_majacc   0.89 (  0.87)	train_corr   0.00 (  0.00)	l1 8.2627 (8.2885)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 12.71it/s] 27%|##6       | 7/26 [00:00<00:00, 29.50it/s]                                               27%|##6       | 7/26 [00:00<00:00, 29.50it/s] 46%|####6     | 12/26 [00:00<00:00, 36.52it/s] 65%|######5   | 17/26 [00:00<00:00, 40.70it/s]                                                65%|######5   | 17/26 [00:00<00:00, 40.70it/s] 85%|########4 | 22/26 [00:00<00:00, 39.37it/s]100%|##########| 26/26 [00:00<00:00, 35.46it/s]
Test: [   0/  26]	Loss 0.225 (0.225)	test_acc   0.86 (  0.86)	test_minacc   0.92 (  0.92)	test_majacc   0.85 (  0.85)	Loss_d 0.225 (0.225)	test_acc_d   0.86 (  0.86)	test_minacc_d   0.92 (  0.92)	test_majacc_d   0.85 (  0.85)	test_corr_d   0.74 (  0.74)
Test: [  10/  26]	Loss 0.231 (0.222)	test_acc   0.88 (  0.88)	test_minacc   0.94 (  0.94)	test_majacc   0.87 (  0.87)	Loss_d 0.231 (0.222)	test_acc_d   0.88 (  0.88)	test_minacc_d   0.94 (  0.94)	test_majacc_d   0.87 (  0.87)	test_corr_d   0.72 (  0.73)
Test: [  20/  26]	Loss 0.238 (0.225)	test_acc   0.87 (  0.88)	test_minacc   0.90 (  0.93)	test_majacc   0.86 (  0.87)	Loss_d 0.238 (0.225)	test_acc_d   0.87 (  0.88)	test_minacc_d   0.90 (  0.93)	test_majacc_d   0.86 (  0.87)	test_corr_d   0.71 (  0.73)
Test: [  26/  26]	Loss 0.214 (0.225)	test_acc   0.90 (  0.88)	test_minacc   0.97 (  0.93)	test_majacc   0.89 (  0.87)	Loss_d 0.214 (0.225)	test_acc_d   0.90 (  0.88)	test_minacc_d   0.97 (  0.93)	test_majacc_d   0.89 (  0.87)	test_corr_d   0.75 (  0.73)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.29it/s]
Test: [  0/  1]	Loss 2.263 (2.263)	test_acc   0.61 (  0.61)	test_minacc   0.58 (  0.58)	test_majacc   0.89 (  0.89)	Loss_d 2.263 (2.263)	test_acc_d   0.61 (  0.61)	test_minacc_d   0.58 (  0.58)	test_majacc_d   0.89 (  0.89)	test_corr_d   0.21 (  0.21)
Test: [  1/  1]	Loss 2.263 (2.263)	test_acc   0.61 (  0.61)	test_minacc   0.58 (  0.58)	test_majacc   0.89 (  0.89)	Loss_d 2.263 (2.263)	test_acc_d   0.61 (  0.61)	test_minacc_d   0.58 (  0.58)	test_majacc_d   0.89 (  0.89)	test_corr_d   0.21 (  0.21)
Overall Timing[ 49/  1]	epoch_time 0.0419 (0.0431)	validation_time 0.0004 (0.0005)	train_time 0.0415 (0.0423)
record: (train_acc, test_acc) (0.8757000197768211, 0.6180000305175781)
last accs (train_acc, test_acc) (0.8834000228047371, 0.612000048160553)
done saving aggregate.csv to ./aggregate.csv
wandb: - 0.163 MB of 0.163 MB uploadedwandb: \ 0.163 MB of 0.163 MB uploadedwandb: | 0.163 MB of 0.163 MB uploadedwandb: / 0.163 MB of 0.163 MB uploadedwandb: - 0.163 MB of 0.163 MB uploadedwandb: \ 0.163 MB of 0.163 MB uploadedwandb: | 0.163 MB of 0.163 MB uploadedwandb: / 0.163 MB of 0.163 MB uploadedwandb: - 0.163 MB of 0.163 MB uploadedwandb: \ 0.163 MB of 0.163 MB uploadedwandb: | 0.163 MB of 0.163 MB uploadedwandb: / 0.037 MB of 0.471 MB uploaded (0.003 MB deduped)wandb: 
wandb: Run history:
wandb:                                                                            global_step ▁▁▁▁▂▂▂▂▂▃▃▃▃▃▃▄▄▄▄▄▅▅▅▅▅▅▆▆▆▆▆▆▇▇▇▇▇███
wandb:      resnet18-usc-unsigned/baseline/prune_rate=1.0/144/logs/diagnostics/epoch_time_val █▂▂▁▁▂▁▂▂▂▁▂▁▂▂▂▂▂▂▂▃▂▂▁▂▃▁▁▂▂▂▂▂▂▁▂▂▁▂▂
wandb:      resnet18-usc-unsigned/baseline/prune_rate=1.0/144/logs/diagnostics/train_time_val █▂▂▂▁▃▂▂▃▂▁▂▂▂▃▂▂▂▂▂▃▃▃▁▂▄▂▁▂▃▃▂▂▂▂▃▂▁▂▂
wandb: resnet18-usc-unsigned/baseline/prune_rate=1.0/144/logs/diagnostics/validation_time_val █▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▂▁▁▁▁▁▁
wandb:                     resnet18-usc-unsigned/baseline/prune_rate=1.0/144/logs/global_step ▁▁▁▁▂▂▂▂▂▃▃▃▃▃▃▄▄▄▄▄▅▅▅▅▅▅▆▆▆▆▆▆▇▇▇▇▇███
wandb:                   resnet18-usc-unsigned/baseline/prune_rate=1.0/144/logs/test/Loss_avg ▄▃▂▃▃▃▄▆▆▄▅▆▃▂▁▂▃▃▄▅▇▆▆▇█▇▆█▇▆█▇▇█▇█▇▇▇▇
wandb:                 resnet18-usc-unsigned/baseline/prune_rate=1.0/144/logs/test/Loss_d_avg ▄▃▂▃▃▃▄▆▆▄▅▆▃▂▁▂▃▃▄▅▇▆▆▇█▇▆█▇▆█▇▇█▇█▇▇▇▇
wandb:                 resnet18-usc-unsigned/baseline/prune_rate=1.0/144/logs/test/Loss_d_val ▄▃▂▃▃▃▄▆▆▄▅▆▃▂▁▂▃▃▄▅▇▆▆▇█▇▆█▇▆█▇▇█▇█▇▇▇▇
wandb:                   resnet18-usc-unsigned/baseline/prune_rate=1.0/144/logs/test/Loss_val ▄▃▂▃▃▃▄▆▆▄▅▆▃▂▁▂▃▃▄▅▇▆▆▇█▇▆█▇▆█▇▇█▇█▇▇▇▇
wandb:               resnet18-usc-unsigned/baseline/prune_rate=1.0/144/logs/test/test_acc_avg ▁▁▂▂▄▄▄▄▄▅▅▅▇▇▇▇▇█▇▇▇▇▇▇▇▇▇▇████████████
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/144/logs/test/test_acc_d_avg ▁▁▂▂▄▄▄▄▄▅▅▅▇▇▇▇▇█▇▇▇▇▇▇▇▇▇▇████████████
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/144/logs/test/test_acc_d_val ▁▁▂▂▄▄▄▄▄▅▅▅▇▇▇▇▇█▇▇▇▇▇▇▇▇▇▇████████████
wandb:               resnet18-usc-unsigned/baseline/prune_rate=1.0/144/logs/test/test_acc_val ▁▁▂▂▄▄▄▄▄▅▅▅▇▇▇▇▇█▇▇▇▇▇▇▇▇▇▇████████████
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/144/logs/test/test_corr_d_avg ██▇▇▆▆▅▆▅▄▅▄▁▂▁▁▂▁▂▂▁▂▃▂▂▂▂▂▂▂▂▂▂▁▂▂▂▂▁▂
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/144/logs/test/test_corr_d_val ██▇▇▆▆▅▆▅▄▅▄▁▂▁▁▂▁▂▂▁▂▃▂▂▂▂▂▂▂▂▂▂▁▂▂▂▂▁▂
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/144/logs/test/test_majacc_avg ▇█▇▇▇▇▇▆▆▄▆▅▂▂▁▁▃▃▃▃▁▂▅▅▃▃▃▃▃▃▂▄▂▃▂▂▂▂▂▂
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/144/logs/test/test_majacc_d_avg ▇█▇▇▇▇▇▆▆▄▆▅▂▂▁▁▃▃▃▃▁▂▅▅▃▃▃▃▃▃▂▄▂▃▂▂▂▂▂▂
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/144/logs/test/test_majacc_d_val ▇█▇▇▇▇▇▆▆▄▆▅▂▂▁▁▃▃▃▃▁▂▅▅▃▃▃▃▃▃▂▄▂▃▂▂▂▂▂▂
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/144/logs/test/test_majacc_val ▇█▇▇▇▇▇▆▆▄▆▅▂▂▁▁▃▃▃▃▁▂▅▅▃▃▃▃▃▃▂▄▂▃▂▂▂▂▂▂
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/144/logs/test/test_minacc_avg ▁▁▂▂▄▄▄▄▄▅▅▅▇▇▇▇▇█▇▇▇▇▇▇▇▇▇▇████████████
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/144/logs/test/test_minacc_d_avg ▁▁▂▂▄▄▄▄▄▅▅▅▇▇▇▇▇█▇▇▇▇▇▇▇▇▇▇████████████
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/144/logs/test/test_minacc_d_val ▁▁▂▂▄▄▄▄▄▅▅▅▇▇▇▇▇█▇▇▇▇▇▇▇▇▇▇████████████
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/144/logs/test/test_minacc_val ▁▁▂▂▄▄▄▄▄▅▅▅▇▇▇▇▇█▇▇▇▇▇▇▇▇▇▇████████████
wandb:                  resnet18-usc-unsigned/baseline/prune_rate=1.0/144/logs/train/Loss_avg █▆▆▆▅▅▅▅▄▄▄▄▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:                  resnet18-usc-unsigned/baseline/prune_rate=1.0/144/logs/train/Loss_val ██▇▇▆▆▆▅▅▅▅▅▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:                    resnet18-usc-unsigned/baseline/prune_rate=1.0/144/logs/train/l1_avg ▆▃▃▂▂▂▂▃▂▃▄▄▅▂▁▁▃▃▃▄▄▅▆▆▆▆▇▇▆▇▇▇█▇▇█████
wandb:                    resnet18-usc-unsigned/baseline/prune_rate=1.0/144/logs/train/l1_val ▄▃▃▃▂▂▂▃▂▁▃▄▄▂▂▂▃▃▄▄▆▅▅▆▇▆▆▇▇▆██▇█▇█████
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/144/logs/train/train_acc_avg ▁▃▃▃▄▄▅▆▆▇▇██▄▃▃▅▅▅▅▆▆▆▆▆▆▆▆▅▅▆▆▅▆▆▆▅▅▆▅
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/144/logs/train/train_acc_val ▂▂▂▂▆▄▃▆██▇█▆▁▂▁▃▄▅▄▇█▇▃▅▇▇▅▆▆▆▄▅▅▅▅▆▆▅▆
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/144/logs/train/train_corr_avg ▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/144/logs/train/train_corr_val ▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/144/logs/train/train_majacc_avg ▆██▇▇▆▆▆▆▆▆▆▆▂▁▁▂▂▂▂▄▄▄▃▃▃▃▃▃▃▃▃▃▃▃▂▂▂▂▂
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/144/logs/train/train_majacc_val ████▇▆▆▆▆▅▆▆▄▁▁▁▃▂▄▃▄▅▄▂▃▄▄▃▃▃▃▂▂▂▂▃▂▂▂▂
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/144/logs/train/train_minacc_avg ▁▁▂▂▃▃▄▅▅▆▆▆▇▇▇▇▇▇▇▇▇▇▇█████████████████
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/144/logs/train/train_minacc_val ▁▁▁▁▄▄▄▅▆▇▆▆▇▇▇▇▆▇▇▇▇▇▇▇▇██▇████████████
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/144/logs/train/train_nll_avg █▅▅▄▄▃▃▂▂▂▁▁▁▃▃▃▂▂▂▂▂▂▁▂▂▁▁▁▂▂▁▂▂▁▂▂▂▂▂▂
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/144/logs/train/train_nll_val █▇▇▆▅▅▄▃▂▂▃▃▂▆▅▆▄▃▃▄▂▁▂▄▃▂▂▃▂▂▂▃▂▂▂▂▂▂▂▂
wandb:         resnet18-usc-unsigned/baseline/prune_rate=1.0/144/logs/train/train_penalty_avg █▂▂▂▂▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:         resnet18-usc-unsigned/baseline/prune_rate=1.0/144/logs/train/train_penalty_val █▇▅▅▃▃▂▂▂▂▂▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:           resnet18-usc-unsigned/baseline/prune_rate=1.0/144/logs/train/weight_norm_avg ▁▄▅▅▅▅▅▅▆▆▆▇████████████████████████████
wandb:           resnet18-usc-unsigned/baseline/prune_rate=1.0/144/logs/train/weight_norm_val ▁▃▃▃▃▃▄▄▅▅▆▆████████████████████████████
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/144/logs/train/zero_count_avg ▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/144/logs/train/zero_count_val ▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb: 
wandb: Run summary:
wandb:                                                                            global_step 49
wandb:      resnet18-usc-unsigned/baseline/prune_rate=1.0/144/logs/diagnostics/epoch_time_val 0.04191
wandb:      resnet18-usc-unsigned/baseline/prune_rate=1.0/144/logs/diagnostics/train_time_val 0.04147
wandb: resnet18-usc-unsigned/baseline/prune_rate=1.0/144/logs/diagnostics/validation_time_val 0.00043
wandb:                     resnet18-usc-unsigned/baseline/prune_rate=1.0/144/logs/global_step 49
wandb:                   resnet18-usc-unsigned/baseline/prune_rate=1.0/144/logs/test/Loss_avg 2.26303
wandb:                 resnet18-usc-unsigned/baseline/prune_rate=1.0/144/logs/test/Loss_d_avg 2.26303
wandb:                 resnet18-usc-unsigned/baseline/prune_rate=1.0/144/logs/test/Loss_d_val 2.26303
wandb:                   resnet18-usc-unsigned/baseline/prune_rate=1.0/144/logs/test/Loss_val 2.26303
wandb:               resnet18-usc-unsigned/baseline/prune_rate=1.0/144/logs/test/test_acc_avg 0.612
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/144/logs/test/test_acc_d_avg 0.612
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/144/logs/test/test_acc_d_val 0.612
wandb:               resnet18-usc-unsigned/baseline/prune_rate=1.0/144/logs/test/test_acc_val 0.612
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/144/logs/test/test_corr_d_avg 0.206
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/144/logs/test/test_corr_d_val 0.206
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/144/logs/test/test_majacc_avg 0.89
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/144/logs/test/test_majacc_d_avg 0.89
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/144/logs/test/test_majacc_d_val 0.89
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/144/logs/test/test_majacc_val 0.89
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/144/logs/test/test_minacc_avg 0.58111
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/144/logs/test/test_minacc_d_avg 0.58111
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/144/logs/test/test_minacc_d_val 0.58111
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/144/logs/test/test_minacc_val 0.58111
wandb:                  resnet18-usc-unsigned/baseline/prune_rate=1.0/144/logs/train/Loss_avg 3e-05
wandb:                  resnet18-usc-unsigned/baseline/prune_rate=1.0/144/logs/train/Loss_val 3e-05
wandb:                    resnet18-usc-unsigned/baseline/prune_rate=1.0/144/logs/train/l1_avg 8.28848
wandb:                    resnet18-usc-unsigned/baseline/prune_rate=1.0/144/logs/train/l1_val 8.26265
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/144/logs/train/train_acc_avg 0.8824
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/144/logs/train/train_acc_val 0.9
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/144/logs/train/train_corr_avg 0.0
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/144/logs/train/train_corr_val 0.0
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/144/logs/train/train_majacc_avg 0.87334
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/144/logs/train/train_majacc_val 0.88837
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/144/logs/train/train_minacc_avg 0.93286
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/144/logs/train/train_minacc_val 0.97143
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/144/logs/train/train_nll_avg 0.22613
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/144/logs/train/train_nll_val 0.21353
wandb:         resnet18-usc-unsigned/baseline/prune_rate=1.0/144/logs/train/train_penalty_avg 0.0
wandb:         resnet18-usc-unsigned/baseline/prune_rate=1.0/144/logs/train/train_penalty_val 1e-05
wandb:           resnet18-usc-unsigned/baseline/prune_rate=1.0/144/logs/train/weight_norm_avg 25.87577
wandb:           resnet18-usc-unsigned/baseline/prune_rate=1.0/144/logs/train/weight_norm_val 25.87565
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/144/logs/train/zero_count_avg 0.0
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/144/logs/train/zero_count_val 0.0
wandb: 
wandb: 🚀 View run name_random at: https://wandb.ai/janezdu-uiuc/irm/runs/am8dxep5
wandb: ⭐️ View project at: https://wandb.ai/janezdu-uiuc/irm
wandb: Synced 5 W&B file(s), 0 media file(s), 2 artifact file(s) and 1 other file(s)
wandb: Find logs at: ./wandb/run-20240907_202001-am8dxep5/logs
wandb: WARNING The new W&B backend becomes opt-out in version 0.18.0; try it out with `wandb.require("core")`! See https://wandb.me/wandb-core for more information.
wandb: Currently logged in as: janezdu (janezdu-uiuc). Use `wandb login --relogin` to force relogin
wandb: wandb version 0.17.9 is available!  To upgrade, please run:
wandb:  $ pip install wandb --upgrade
wandb: Tracking run with wandb version 0.17.7
wandb: Run data is saved locally in /scratch/users/zd16/sparseIRM-resnet-ver/wandb/run-20240907_202303-a0uxfwwz
wandb: Run `wandb offline` to turn off syncing.
wandb: Syncing run name_random
wandb: ⭐️ View project at https://wandb.ai/janezdu-uiuc/irm
wandb: 🚀 View run at https://wandb.ai/janezdu-uiuc/irm/runs/a0uxfwwz
=> Reading YAML config from configs/smallscale/resnet18/resnet18-usc-unsigned.yaml
Namespace(data='dataset/', optimizer='adam', weight_opt='adam', set='mnistcifar', arch='ResNet18', config='configs/smallscale/resnet18/resnet18-usc-unsigned.yaml', log_dir=None, workers=4, epochs=50, start_epoch=None, batch_size=390, lr=0.006, warmup_length=0, momentum=0.9, weight_decay=0.0, print_freq=10, num_classes=1, resume='', resume_train_weights='', evaluate=False, pretrained=None, pretrained_distill=None, alpha_distill=0.95, T_distill=2, seed=0, multigpu=[0], lr_policy='cosine_lr', lr_adjust=30, lr_gamma=0.1, name='baseline', save_every=-1, prune_rate=1.0, param_prune_rate=0.0, pr_start=1.0, low_data=1, width_mult=1.0, nesterov=False, threetimes=False, random_subnet=False, one_batch=False, conv_type='DenseConv', freeze_weights=False, st=False, mode='fan_in', nonlinearity='relu', bn_type='LearnedBatchNorm', init='kaiming_normal', no_bn_decay=False, scale_fan=False, first_layer_dense=False, last_layer_dense=True, approx=False, zero=False, flip=False, bs=False, gumbel_sample=False, multiply_prob=False, no_multiply=False, multiply_cont=False, multiply_prob_bs=False, indiv=False, label_smoothing=None, first_layer_type=None, trainer='default', score_init_constant=1.0, K=1, update_freq=20, D=0.01, T=1, TA=True, TA2=False, TA_grow=False, center=False, straight_through=False, PLA_factor=0.1, PLA_patience=10, gradient_loss_para=0, abs_loss_para=0, thres=0.9, runs_name='name_random', resume_compare_loss1='', resume_compare_loss2='', init_weights='', trained_mask='', weight_rescaling=False, constrain_by_layer=False, weight_rescaling_data=False, use_running_stats=False, not_clipping=False, rescaling_para=False, lasso_para=0, dont_freeze_weights=False, iterative=True, prob_by_weight=False, rescale_at_fix_subnet=False, train_weights_at_the_same_time=False, sample_from_training_set=False, load_true_para=False, distill=False, finetune=False, stablize=False, prev_best=0, weight_opt_lr=0.0006, n=500, ts=0.28, te=0.6, d=20000, s=80, c=0.75, init_prob=False, thres_before=0.001, wide_ratio=0.001, noise=1, cal_p_q=False, just_finetune=False, snip=False, envs_num=2, l2_regularizer_weight=0.001, data_num=50000, env_type='linear', irm_type='irmv1', hidden_dim=390, penalty_anneal_iters=400, penalty_weight=10000.0, grayscale_model=0, weight_lr_schedule=False, fix_subnet=False, freeze_weight=False, step='ours', prior_sd_coef=0, dim_inv=2, variance_gamma=1.0, dim_spu=10, image_scale=32, cons_ratio='0.999_0.7_0.1', noise_ratio=0.2, step_gamma=0.1, step_round=3, inner_steps=1, use_pgd=False, z=15.0, pgd_anneal_iters=600, pgd_skip_steps=50, fraction_z=0.95)
=> Creating model 'ResNet18'
Here!!!!!!!!
==> Conv Type: DenseConv
==> BN Type: LearnedBatchNorm
<class 'torch.nn.modules.conv.Conv2d'>
<class 'torch.nn.modules.batchnorm.BatchNorm2d'>
==> Building first layer with <class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
ResNet(
  (conv1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
  (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (relu): ReLU(inplace=True)
  (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
  (layer1): Sequential(
    (0): BasicBlock(
      (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (1): BasicBlock(
      (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (layer2): Sequential(
    (0): BasicBlock(
      (conv1): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (downsample): Sequential(
        (0): Conv2d(64, 128, kernel_size=(1, 1), stride=(2, 2), bias=False)
        (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (1): BasicBlock(
      (conv1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (layer3): Sequential(
    (0): BasicBlock(
      (conv1): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (downsample): Sequential(
        (0): Conv2d(128, 256, kernel_size=(1, 1), stride=(2, 2), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (1): BasicBlock(
      (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (layer4): Sequential(
    (0): BasicBlock(
      (conv1): Conv2d(256, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (downsample): Sequential(
        (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (1): BasicBlock(
      (conv1): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (avgpool): AdaptiveAvgPool2d(output_size=1)
  (fc): Conv2d(512, 1, kernel_size=(1, 1), stride=(1, 1), bias=False)
)
=> Parallelizing on [0] gpus
<DEBUG> gradient to module.conv1.weight
<DEBUG> gradient to module.bn1.weight
<DEBUG> gradient to module.bn1.bias
<DEBUG> gradient to module.layer1.0.conv1.weight
<DEBUG> gradient to module.layer1.0.bn1.weight
<DEBUG> gradient to module.layer1.0.bn1.bias
<DEBUG> gradient to module.layer1.0.conv2.weight
<DEBUG> gradient to module.layer1.0.bn2.weight
<DEBUG> gradient to module.layer1.0.bn2.bias
<DEBUG> gradient to module.layer1.1.conv1.weight
<DEBUG> gradient to module.layer1.1.bn1.weight
<DEBUG> gradient to module.layer1.1.bn1.bias
<DEBUG> gradient to module.layer1.1.conv2.weight
<DEBUG> gradient to module.layer1.1.bn2.weight
<DEBUG> gradient to module.layer1.1.bn2.bias
<DEBUG> gradient to module.layer2.0.conv1.weight
<DEBUG> gradient to module.layer2.0.bn1.weight
<DEBUG> gradient to module.layer2.0.bn1.bias
<DEBUG> gradient to module.layer2.0.conv2.weight
<DEBUG> gradient to module.layer2.0.bn2.weight
<DEBUG> gradient to module.layer2.0.bn2.bias
<DEBUG> gradient to module.layer2.0.downsample.0.weight
<DEBUG> gradient to module.layer2.0.downsample.1.weight
<DEBUG> gradient to module.layer2.0.downsample.1.bias
<DEBUG> gradient to module.layer2.1.conv1.weight
<DEBUG> gradient to module.layer2.1.bn1.weight
<DEBUG> gradient to module.layer2.1.bn1.bias
<DEBUG> gradient to module.layer2.1.conv2.weight
<DEBUG> gradient to module.layer2.1.bn2.weight
<DEBUG> gradient to module.layer2.1.bn2.bias
<DEBUG> gradient to module.layer3.0.conv1.weight
<DEBUG> gradient to module.layer3.0.bn1.weight
<DEBUG> gradient to module.layer3.0.bn1.bias
<DEBUG> gradient to module.layer3.0.conv2.weight
<DEBUG> gradient to module.layer3.0.bn2.weight
<DEBUG> gradient to module.layer3.0.bn2.bias
<DEBUG> gradient to module.layer3.0.downsample.0.weight
<DEBUG> gradient to module.layer3.0.downsample.1.weight
<DEBUG> gradient to module.layer3.0.downsample.1.bias
<DEBUG> gradient to module.layer3.1.conv1.weight
<DEBUG> gradient to module.layer3.1.bn1.weight
<DEBUG> gradient to module.layer3.1.bn1.bias
<DEBUG> gradient to module.layer3.1.conv2.weight
<DEBUG> gradient to module.layer3.1.bn2.weight
<DEBUG> gradient to module.layer3.1.bn2.bias
<DEBUG> gradient to module.layer4.0.conv1.weight
<DEBUG> gradient to module.layer4.0.bn1.weight
<DEBUG> gradient to module.layer4.0.bn1.bias
<DEBUG> gradient to module.layer4.0.conv2.weight
<DEBUG> gradient to module.layer4.0.bn2.weight
<DEBUG> gradient to module.layer4.0.bn2.bias
<DEBUG> gradient to module.layer4.0.downsample.0.weight
<DEBUG> gradient to module.layer4.0.downsample.1.weight
<DEBUG> gradient to module.layer4.0.downsample.1.bias
<DEBUG> gradient to module.layer4.1.conv1.weight
<DEBUG> gradient to module.layer4.1.bn1.weight
<DEBUG> gradient to module.layer4.1.bn1.bias
<DEBUG> gradient to module.layer4.1.conv2.weight
<DEBUG> gradient to module.layer4.1.bn2.weight
<DEBUG> gradient to module.layer4.1.bn2.bias
<DEBUG> gradient to module.fc.weight
Files already downloaded and verified
Files already downloaded and verified
Adding Noise to Label, len(Y)=12000, Label_noise=1242
Xmp (7877, 3, 32, 32) (6903, 3, 32, 32)
Xcp (5964, 3, 32, 32) (6036, 3, 32, 32)
env=0 2497 2497 3 3
xn 2500 xp 2500
env=1 1750 1750 750 750
xn 2500 xp 2500
env=2 50 50 450 450
xn 500 xp 500
=> Creating model 'EBD'
EBD(
  (embedings): Embedding(2, 1)
)
=> Parallelizing on [0] gpus
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:01<00:39,  1.57s/it] 19%|#9        | 5/26 [00:01<00:05,  3.89it/s] 35%|###4      | 9/26 [00:01<00:02,  7.51it/s] 50%|#####     | 13/26 [00:01<00:01, 11.44it/s] 65%|######5   | 17/26 [00:02<00:00, 15.26it/s] 81%|########  | 21/26 [00:02<00:00, 19.05it/s] 96%|#########6| 25/26 [00:02<00:00, 22.71it/s]100%|##########| 26/26 [00:02<00:00,  9.81it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 0 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 2 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 3 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 4 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 5 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 6 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 7 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 8 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 9 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 10 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 11 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 12 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 13 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 14 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 15 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 16 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 17 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 18 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 19 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 20 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 21 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 22 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 23 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 24 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 25 400
penalty weights 0.0
Epoch: [0][  26/  26]	Loss 0.391 (0.551)	train_nll   0.39 (  0.55)	train_penalty   0.03 (  0.20)	weight_norm  20.92 ( 18.13)	train_acc   0.84 (  0.79)	train_minacc   0.18 (  0.11)	train_majacc   0.94 (  0.90)	train_corr   0.00 (  0.00)	l1 7.9552 (7.7243)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 18.39it/s] 27%|##6       | 7/26 [00:00<00:00, 35.51it/s]                                               27%|##6       | 7/26 [00:00<00:00, 35.51it/s] 46%|####6     | 12/26 [00:00<00:00, 40.86it/s] 65%|######5   | 17/26 [00:00<00:00, 43.41it/s]                                                65%|######5   | 17/26 [00:00<00:00, 43.41it/s] 85%|########4 | 22/26 [00:00<00:00, 41.34it/s]100%|##########| 26/26 [00:00<00:00, 38.42it/s]
Test: [   0/  26]	Loss 0.439 (0.439)	test_acc   0.83 (  0.83)	test_minacc   0.06 (  0.06)	test_majacc   0.98 (  0.98)	Loss_d 0.439 (0.439)	test_acc_d   0.83 (  0.83)	test_minacc_d   0.06 (  0.06)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.96 (  0.96)
Test: [  10/  26]	Loss 0.411 (0.417)	test_acc   0.85 (  0.84)	test_minacc   0.09 (  0.07)	test_majacc   0.98 (  0.98)	Loss_d 0.411 (0.417)	test_acc_d   0.85 (  0.84)	test_minacc_d   0.09 (  0.07)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.95 (  0.95)
Test: [  20/  26]	Loss 0.405 (0.417)	test_acc   0.84 (  0.84)	test_minacc   0.05 (  0.06)	test_majacc   0.99 (  0.98)	Loss_d 0.405 (0.417)	test_acc_d   0.84 (  0.84)	test_minacc_d   0.05 (  0.06)	test_majacc_d   0.99 (  0.98)	test_corr_d   0.96 (  0.95)
Test: [  26/  26]	Loss 0.375 (0.414)	test_acc   0.85 (  0.84)	test_minacc   0.09 (  0.06)	test_majacc   0.97 (  0.98)	Loss_d 0.375 (0.414)	test_acc_d   0.85 (  0.84)	test_minacc_d   0.09 (  0.06)	test_majacc_d   0.97 (  0.98)	test_corr_d   0.95 (  0.95)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00,  2.48it/s]100%|##########| 1/1 [00:00<00:00,  2.48it/s]
Test: [  0/  1]	Loss 1.646 (1.646)	test_acc   0.13 (  0.13)	test_minacc   0.04 (  0.04)	test_majacc   0.95 (  0.95)	Loss_d 1.646 (1.646)	test_acc_d   0.13 (  0.13)	test_minacc_d   0.04 (  0.04)	test_majacc_d   0.95 (  0.95)	test_corr_d   0.93 (  0.93)
Test: [  1/  1]	Loss 1.646 (1.646)	test_acc   0.13 (  0.13)	test_minacc   0.04 (  0.04)	test_majacc   0.95 (  0.95)	Loss_d 1.646 (1.646)	test_acc_d   0.13 (  0.13)	test_minacc_d   0.04 (  0.04)	test_majacc_d   0.95 (  0.95)	test_corr_d   0.93 (  0.93)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/146/checkpoints/model_best.pth
Overall Timing[  0/  1]	epoch_time 0.0781 (0.0781)	validation_time 0.0068 (0.0068)	train_time 0.0696 (0.0696)
record: (train_acc, test_acc) (0.8420000234246254, 0.13199999928474426)
last accs (train_acc, test_acc) (0.8420000234246254, 0.13199999928474426)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.15it/s] 19%|#9        | 5/26 [00:00<00:00, 23.61it/s] 35%|###4      | 9/26 [00:00<00:00, 28.94it/s] 50%|#####     | 13/26 [00:00<00:00, 31.83it/s] 65%|######5   | 17/26 [00:00<00:00, 33.47it/s] 81%|########  | 21/26 [00:00<00:00, 34.53it/s] 96%|#########6| 25/26 [00:00<00:00, 35.30it/s]100%|##########| 26/26 [00:00<00:00, 30.03it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 26 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 27 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 28 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 29 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 30 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 31 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 32 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 33 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 34 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 35 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 36 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 37 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 38 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 39 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 40 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 41 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 42 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 43 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 44 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 45 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 46 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 47 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 48 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 49 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 50 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 51 400
penalty weights 0.0
Epoch: [1][  26/  26]	Loss 0.359 (0.410)	train_nll   0.36 (  0.41)	train_penalty   0.03 (  0.06)	weight_norm  22.05 ( 21.70)	train_acc   0.86 (  0.85)	train_minacc   0.15 (  0.02)	train_majacc   0.97 (  0.99)	train_corr   0.00 (  0.00)	l1 8.5740 (8.4279)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.81it/s] 23%|##3       | 6/26 [00:00<00:00, 29.64it/s]                                               23%|##3       | 6/26 [00:00<00:00, 29.64it/s] 42%|####2     | 11/26 [00:00<00:00, 36.65it/s] 62%|######1   | 16/26 [00:00<00:00, 40.33it/s]                                                62%|######1   | 16/26 [00:00<00:00, 40.33it/s] 81%|########  | 21/26 [00:00<00:00, 38.51it/s]100%|##########| 26/26 [00:00<00:00, 41.40it/s]100%|##########| 26/26 [00:00<00:00, 34.54it/s]
Test: [   0/  26]	Loss 0.423 (0.423)	test_acc   0.83 (  0.83)	test_minacc   0.06 (  0.06)	test_majacc   0.99 (  0.99)	Loss_d 0.423 (0.423)	test_acc_d   0.83 (  0.83)	test_minacc_d   0.06 (  0.06)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.97 (  0.97)
Test: [  10/  26]	Loss 0.383 (0.398)	test_acc   0.85 (  0.85)	test_minacc   0.04 (  0.04)	test_majacc   0.99 (  0.99)	Loss_d 0.383 (0.398)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.04 (  0.04)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.97 (  0.97)
Test: [  20/  26]	Loss 0.392 (0.397)	test_acc   0.84 (  0.85)	test_minacc   0.02 (  0.03)	test_majacc   1.00 (  0.99)	Loss_d 0.392 (0.397)	test_acc_d   0.84 (  0.85)	test_minacc_d   0.02 (  0.03)	test_majacc_d   1.00 (  0.99)	test_corr_d   0.98 (  0.97)
Test: [  26/  26]	Loss 0.352 (0.394)	test_acc   0.86 (  0.85)	test_minacc   0.03 (  0.03)	test_majacc   0.99 (  0.99)	Loss_d 0.352 (0.394)	test_acc_d   0.86 (  0.85)	test_minacc_d   0.03 (  0.03)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.96 (  0.97)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.76it/s]
Test: [  0/  1]	Loss 1.725 (1.725)	test_acc   0.12 (  0.12)	test_minacc   0.02 (  0.02)	test_majacc   0.96 (  0.96)	Loss_d 1.725 (1.725)	test_acc_d   0.12 (  0.12)	test_minacc_d   0.02 (  0.02)	test_majacc_d   0.96 (  0.96)	test_corr_d   0.94 (  0.94)
Test: [  1/  1]	Loss 1.725 (1.725)	test_acc   0.12 (  0.12)	test_minacc   0.02 (  0.02)	test_majacc   0.96 (  0.96)	Loss_d 1.725 (1.725)	test_acc_d   0.12 (  0.12)	test_minacc_d   0.02 (  0.02)	test_majacc_d   0.96 (  0.96)	test_corr_d   0.94 (  0.94)
Overall Timing[  1/  1]	epoch_time 0.0398 (0.0589)	validation_time 0.0004 (0.0036)	train_time 0.0394 (0.0545)
record: (train_acc, test_acc) (0.8420000234246254, 0.13199999928474426)
last accs (train_acc, test_acc) (0.8476000266671181, 0.11800000816583633)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:06,  3.74it/s] 19%|#9        | 5/26 [00:00<00:01, 15.05it/s] 35%|###4      | 9/26 [00:00<00:00, 21.84it/s] 50%|#####     | 13/26 [00:00<00:00, 26.19it/s] 65%|######5   | 17/26 [00:00<00:00, 29.26it/s] 81%|########  | 21/26 [00:00<00:00, 31.20it/s] 96%|#########6| 25/26 [00:00<00:00, 32.77it/s]100%|##########| 26/26 [00:01<00:00, 24.94it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 52 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 53 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 54 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 55 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 56 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 57 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 58 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 59 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 60 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 61 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 62 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 63 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 64 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 65 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 66 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 67 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 68 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 69 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 70 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 71 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 72 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 73 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 74 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 75 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 76 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 77 400
penalty weights 0.0
Epoch: [2][  26/  26]	Loss 0.350 (0.389)	train_nll   0.35 (  0.39)	train_penalty   0.02 (  0.05)	weight_norm  22.17 ( 22.13)	train_acc   0.87 (  0.85)	train_minacc   0.32 (  0.07)	train_majacc   0.96 (  0.99)	train_corr   0.00 (  0.00)	l1 8.5759 (8.6872)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.38it/s] 23%|##3       | 6/26 [00:00<00:00, 30.79it/s]                                               23%|##3       | 6/26 [00:00<00:00, 30.79it/s] 42%|####2     | 11/26 [00:00<00:00, 37.68it/s] 62%|######1   | 16/26 [00:00<00:00, 41.26it/s]                                                62%|######1   | 16/26 [00:00<00:00, 41.26it/s] 81%|########  | 21/26 [00:00<00:00, 40.12it/s]100%|##########| 26/26 [00:00<00:00, 42.07it/s]100%|##########| 26/26 [00:00<00:00, 35.68it/s]
Test: [   0/  26]	Loss 0.388 (0.388)	test_acc   0.83 (  0.83)	test_minacc   0.03 (  0.03)	test_majacc   0.99 (  0.99)	Loss_d 0.388 (0.388)	test_acc_d   0.83 (  0.83)	test_minacc_d   0.03 (  0.03)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.96 (  0.96)
Test: [  10/  26]	Loss 0.345 (0.365)	test_acc   0.86 (  0.85)	test_minacc   0.07 (  0.06)	test_majacc   0.99 (  0.99)	Loss_d 0.345 (0.365)	test_acc_d   0.86 (  0.85)	test_minacc_d   0.07 (  0.06)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.96 (  0.95)
Test: [  20/  26]	Loss 0.340 (0.362)	test_acc   0.86 (  0.85)	test_minacc   0.10 (  0.05)	test_majacc   1.00 (  0.99)	Loss_d 0.340 (0.362)	test_acc_d   0.86 (  0.85)	test_minacc_d   0.10 (  0.05)	test_majacc_d   1.00 (  0.99)	test_corr_d   0.96 (  0.96)
Test: [  26/  26]	Loss 0.328 (0.360)	test_acc   0.87 (  0.85)	test_minacc   0.09 (  0.05)	test_majacc   1.00 (  0.99)	Loss_d 0.328 (0.360)	test_acc_d   0.87 (  0.85)	test_minacc_d   0.09 (  0.05)	test_majacc_d   1.00 (  0.99)	test_corr_d   0.95 (  0.96)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 55.03it/s]
Test: [  0/  1]	Loss 1.682 (1.682)	test_acc   0.14 (  0.14)	test_minacc   0.05 (  0.05)	test_majacc   0.98 (  0.98)	Loss_d 1.682 (1.682)	test_acc_d   0.14 (  0.14)	test_minacc_d   0.05 (  0.05)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.90 (  0.90)
Test: [  1/  1]	Loss 1.682 (1.682)	test_acc   0.14 (  0.14)	test_minacc   0.05 (  0.05)	test_majacc   0.98 (  0.98)	Loss_d 1.682 (1.682)	test_acc_d   0.14 (  0.14)	test_minacc_d   0.05 (  0.05)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.90 (  0.90)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/146/checkpoints/model_best.pth
Overall Timing[  2/  1]	epoch_time 0.0446 (0.0541)	validation_time 0.0004 (0.0025)	train_time 0.0441 (0.0511)
record: (train_acc, test_acc) (0.8511000224351883, 0.13900001347064972)
last accs (train_acc, test_acc) (0.8511000224351883, 0.13900001347064972)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.56it/s] 19%|#9        | 5/26 [00:00<00:00, 21.86it/s] 35%|###4      | 9/26 [00:00<00:00, 28.36it/s] 50%|#####     | 13/26 [00:00<00:00, 31.07it/s] 65%|######5   | 17/26 [00:00<00:00, 32.65it/s] 81%|########  | 21/26 [00:00<00:00, 33.83it/s] 96%|#########6| 25/26 [00:00<00:00, 34.47it/s]100%|##########| 26/26 [00:00<00:00, 28.93it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 78 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 79 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 80 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 81 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 82 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 83 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 84 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 85 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 86 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 87 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 88 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 89 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 90 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 91 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 92 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 93 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 94 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 95 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 96 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 97 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 98 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 99 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 100 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 101 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 102 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 103 400
penalty weights 0.0
Epoch: [3][  26/  26]	Loss 0.315 (0.362)	train_nll   0.32 (  0.36)	train_penalty   0.03 (  0.04)	weight_norm  22.22 ( 22.20)	train_acc   0.89 (  0.85)	train_minacc   0.29 (  0.13)	train_majacc   0.98 (  0.98)	train_corr   0.00 (  0.00)	l1 8.6858 (8.6149)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 15.57it/s] 27%|##6       | 7/26 [00:00<00:00, 32.12it/s]                                               27%|##6       | 7/26 [00:00<00:00, 32.12it/s] 46%|####6     | 12/26 [00:00<00:00, 37.82it/s] 69%|######9   | 18/26 [00:00<00:00, 42.17it/s]                                                69%|######9   | 18/26 [00:00<00:00, 42.17it/s] 92%|#########2| 24/26 [00:00<00:00, 46.24it/s]100%|##########| 26/26 [00:00<00:00, 38.65it/s]
Test: [   0/  26]	Loss 0.371 (0.371)	test_acc   0.83 (  0.83)	test_minacc   0.04 (  0.04)	test_majacc   0.99 (  0.99)	Loss_d 0.371 (0.371)	test_acc_d   0.83 (  0.83)	test_minacc_d   0.04 (  0.04)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.95 (  0.95)
Test: [  10/  26]	Loss 0.321 (0.347)	test_acc   0.87 (  0.85)	test_minacc   0.11 (  0.10)	test_majacc   1.00 (  0.99)	Loss_d 0.321 (0.347)	test_acc_d   0.87 (  0.85)	test_minacc_d   0.11 (  0.10)	test_majacc_d   1.00 (  0.99)	test_corr_d   0.95 (  0.94)
Test: [  20/  26]	Loss 0.314 (0.343)	test_acc   0.85 (  0.85)	test_minacc   0.08 (  0.09)	test_majacc   1.00 (  0.99)	Loss_d 0.314 (0.343)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.08 (  0.09)	test_majacc_d   1.00 (  0.99)	test_corr_d   0.95 (  0.95)
Test: [  26/  26]	Loss 0.306 (0.341)	test_acc   0.88 (  0.85)	test_minacc   0.18 (  0.09)	test_majacc   0.99 (  0.99)	Loss_d 0.306 (0.341)	test_acc_d   0.88 (  0.85)	test_minacc_d   0.18 (  0.09)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.94 (  0.95)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 64.98it/s]
Test: [  0/  1]	Loss 1.762 (1.762)	test_acc   0.17 (  0.17)	test_minacc   0.08 (  0.08)	test_majacc   0.97 (  0.97)	Loss_d 1.762 (1.762)	test_acc_d   0.17 (  0.17)	test_minacc_d   0.08 (  0.08)	test_majacc_d   0.97 (  0.97)	test_corr_d   0.85 (  0.85)
Test: [  1/  1]	Loss 1.762 (1.762)	test_acc   0.17 (  0.17)	test_minacc   0.08 (  0.08)	test_majacc   0.97 (  0.97)	Loss_d 1.762 (1.762)	test_acc_d   0.17 (  0.17)	test_minacc_d   0.08 (  0.08)	test_majacc_d   0.97 (  0.97)	test_corr_d   0.85 (  0.85)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/146/checkpoints/model_best.pth
Overall Timing[  3/  1]	epoch_time 0.0404 (0.0507)	validation_time 0.0004 (0.0020)	train_time 0.0400 (0.0483)
record: (train_acc, test_acc) (0.8542000215053558, 0.16500000655651093)
last accs (train_acc, test_acc) (0.8542000215053558, 0.16500000655651093)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.04it/s] 19%|#9        | 5/26 [00:00<00:00, 22.15it/s] 35%|###4      | 9/26 [00:00<00:00, 28.03it/s] 50%|#####     | 13/26 [00:00<00:00, 30.49it/s] 65%|######5   | 17/26 [00:00<00:00, 31.17it/s] 81%|########  | 21/26 [00:00<00:00, 32.42it/s] 96%|#########6| 25/26 [00:00<00:00, 33.23it/s]100%|##########| 26/26 [00:00<00:00, 28.25it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 104 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 105 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 106 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 107 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 108 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 109 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 110 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 111 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 112 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 113 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 114 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 115 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 116 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 117 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 118 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 119 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 120 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 121 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 122 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 123 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 124 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 125 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 126 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 127 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 128 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 129 400
penalty weights 0.0
Epoch: [4][  26/  26]	Loss 0.310 (0.345)	train_nll   0.31 (  0.34)	train_penalty   0.02 (  0.03)	weight_norm  22.27 ( 22.24)	train_acc   0.90 (  0.85)	train_minacc   0.47 (  0.19)	train_majacc   0.97 (  0.97)	train_corr   0.00 (  0.00)	l1 8.4575 (8.5897)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.00it/s] 27%|##6       | 7/26 [00:00<00:00, 36.29it/s]                                               27%|##6       | 7/26 [00:00<00:00, 36.29it/s] 50%|#####     | 13/26 [00:00<00:00, 41.27it/s] 73%|#######3  | 19/26 [00:00<00:00, 44.67it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 44.67it/s] 92%|#########2| 24/26 [00:00<00:00, 45.76it/s]100%|##########| 26/26 [00:00<00:00, 39.55it/s]
Test: [   0/  26]	Loss 0.337 (0.337)	test_acc   0.83 (  0.83)	test_minacc   0.16 (  0.16)	test_majacc   0.96 (  0.96)	Loss_d 0.337 (0.337)	test_acc_d   0.83 (  0.83)	test_minacc_d   0.16 (  0.16)	test_majacc_d   0.96 (  0.96)	test_corr_d   0.91 (  0.91)
Test: [  10/  26]	Loss 0.283 (0.321)	test_acc   0.88 (  0.86)	test_minacc   0.32 (  0.24)	test_majacc   0.98 (  0.97)	Loss_d 0.283 (0.321)	test_acc_d   0.88 (  0.86)	test_minacc_d   0.32 (  0.24)	test_majacc_d   0.98 (  0.97)	test_corr_d   0.90 (  0.90)
Test: [  20/  26]	Loss 0.274 (0.317)	test_acc   0.88 (  0.86)	test_minacc   0.32 (  0.24)	test_majacc   0.99 (  0.97)	Loss_d 0.274 (0.317)	test_acc_d   0.88 (  0.86)	test_minacc_d   0.32 (  0.24)	test_majacc_d   0.99 (  0.97)	test_corr_d   0.91 (  0.91)
Test: [  26/  26]	Loss 0.294 (0.315)	test_acc   0.89 (  0.86)	test_minacc   0.29 (  0.24)	test_majacc   0.98 (  0.98)	Loss_d 0.294 (0.315)	test_acc_d   0.89 (  0.86)	test_minacc_d   0.29 (  0.24)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.91 (  0.91)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.23it/s]
Test: [  0/  1]	Loss 1.534 (1.534)	test_acc   0.29 (  0.29)	test_minacc   0.21 (  0.21)	test_majacc   0.95 (  0.95)	Loss_d 1.534 (1.534)	test_acc_d   0.29 (  0.29)	test_minacc_d   0.21 (  0.21)	test_majacc_d   0.95 (  0.95)	test_corr_d   0.71 (  0.71)
Test: [  1/  1]	Loss 1.534 (1.534)	test_acc   0.29 (  0.29)	test_minacc   0.21 (  0.21)	test_majacc   0.95 (  0.95)	Loss_d 1.534 (1.534)	test_acc_d   0.29 (  0.29)	test_minacc_d   0.21 (  0.21)	test_majacc_d   0.95 (  0.95)	test_corr_d   0.71 (  0.71)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/146/checkpoints/model_best.pth
Overall Timing[  4/  1]	epoch_time 0.0376 (0.0481)	validation_time 0.0004 (0.0017)	train_time 0.0372 (0.0461)
record: (train_acc, test_acc) (0.8640000259876252, 0.28700000047683716)
last accs (train_acc, test_acc) (0.8640000259876252, 0.28700000047683716)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.60it/s] 19%|#9        | 5/26 [00:00<00:01, 18.99it/s] 35%|###4      | 9/26 [00:00<00:00, 24.91it/s] 50%|#####     | 13/26 [00:00<00:00, 27.98it/s] 65%|######5   | 17/26 [00:00<00:00, 30.77it/s] 81%|########  | 21/26 [00:00<00:00, 32.79it/s] 96%|#########6| 25/26 [00:00<00:00, 33.78it/s]100%|##########| 26/26 [00:00<00:00, 27.29it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 130 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 131 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 132 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 133 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 134 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 135 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 136 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 137 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 138 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 139 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 140 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 141 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 142 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 143 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 144 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 145 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 146 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 147 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 148 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 149 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 150 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 151 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 152 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 153 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 154 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 155 400
penalty weights 0.0
Epoch: [5][  26/  26]	Loss 0.290 (0.325)	train_nll   0.29 (  0.32)	train_penalty   0.02 (  0.02)	weight_norm  22.33 ( 22.30)	train_acc   0.89 (  0.86)	train_minacc   0.41 (  0.29)	train_majacc   0.97 (  0.96)	train_corr   0.00 (  0.00)	l1 8.5204 (8.5652)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.47it/s] 27%|##6       | 7/26 [00:00<00:00, 32.10it/s]                                               27%|##6       | 7/26 [00:00<00:00, 32.10it/s] 46%|####6     | 12/26 [00:00<00:00, 37.96it/s] 65%|######5   | 17/26 [00:00<00:00, 41.46it/s]                                                65%|######5   | 17/26 [00:00<00:00, 41.46it/s] 85%|########4 | 22/26 [00:00<00:00, 43.57it/s]100%|##########| 26/26 [00:00<00:00, 36.31it/s]
Test: [   0/  26]	Loss 0.313 (0.313)	test_acc   0.82 (  0.82)	test_minacc   0.13 (  0.13)	test_majacc   0.96 (  0.96)	Loss_d 0.313 (0.313)	test_acc_d   0.82 (  0.82)	test_minacc_d   0.13 (  0.13)	test_majacc_d   0.96 (  0.96)	test_corr_d   0.91 (  0.91)
Test: [  10/  26]	Loss 0.284 (0.304)	test_acc   0.88 (  0.87)	test_minacc   0.30 (  0.27)	test_majacc   0.98 (  0.97)	Loss_d 0.284 (0.304)	test_acc_d   0.88 (  0.87)	test_minacc_d   0.30 (  0.27)	test_majacc_d   0.98 (  0.97)	test_corr_d   0.90 (  0.90)
Test: [  20/  26]	Loss 0.257 (0.299)	test_acc   0.88 (  0.87)	test_minacc   0.32 (  0.27)	test_majacc   0.99 (  0.98)	Loss_d 0.257 (0.299)	test_acc_d   0.88 (  0.87)	test_minacc_d   0.32 (  0.27)	test_majacc_d   0.99 (  0.98)	test_corr_d   0.90 (  0.90)
Test: [  26/  26]	Loss 0.273 (0.297)	test_acc   0.90 (  0.87)	test_minacc   0.32 (  0.27)	test_majacc   0.99 (  0.98)	Loss_d 0.273 (0.297)	test_acc_d   0.90 (  0.87)	test_minacc_d   0.32 (  0.27)	test_majacc_d   0.99 (  0.98)	test_corr_d   0.91 (  0.90)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.43it/s]
Test: [  0/  1]	Loss 1.538 (1.538)	test_acc   0.30 (  0.30)	test_minacc   0.23 (  0.23)	test_majacc   0.95 (  0.95)	Loss_d 1.538 (1.538)	test_acc_d   0.30 (  0.30)	test_minacc_d   0.23 (  0.23)	test_majacc_d   0.95 (  0.95)	test_corr_d   0.68 (  0.68)
Test: [  1/  1]	Loss 1.538 (1.538)	test_acc   0.30 (  0.30)	test_minacc   0.23 (  0.23)	test_majacc   0.95 (  0.95)	Loss_d 1.538 (1.538)	test_acc_d   0.30 (  0.30)	test_minacc_d   0.23 (  0.23)	test_majacc_d   0.95 (  0.95)	test_corr_d   0.68 (  0.68)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/146/checkpoints/model_best.pth
Overall Timing[  5/  1]	epoch_time 0.0391 (0.0466)	validation_time 0.0004 (0.0015)	train_time 0.0387 (0.0449)
record: (train_acc, test_acc) (0.8702000222206115, 0.30300000309944153)
last accs (train_acc, test_acc) (0.8702000222206115, 0.30300000309944153)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 18.13it/s] 23%|##3       | 6/26 [00:00<00:00, 28.54it/s] 38%|###8      | 10/26 [00:00<00:00, 31.75it/s] 54%|#####3    | 14/26 [00:00<00:00, 33.38it/s] 69%|######9   | 18/26 [00:00<00:00, 33.35it/s] 85%|########4 | 22/26 [00:00<00:00, 34.14it/s]100%|##########| 26/26 [00:00<00:00, 35.48it/s]100%|##########| 26/26 [00:00<00:00, 30.86it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 156 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 157 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 158 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 159 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 160 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 161 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 162 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 163 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 164 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 165 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 166 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 167 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 168 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 169 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 170 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 171 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 172 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 173 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 174 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 175 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 176 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 177 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 178 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 179 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 180 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 181 400
penalty weights 0.0
Epoch: [6][  26/  26]	Loss 0.277 (0.308)	train_nll   0.28 (  0.31)	train_penalty   0.02 (  0.02)	weight_norm  22.40 ( 22.37)	train_acc   0.88 (  0.87)	train_minacc   0.41 (  0.36)	train_majacc   0.96 (  0.96)	train_corr   0.00 (  0.00)	l1 8.4350 (8.5172)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:05,  4.59it/s] 23%|##3       | 6/26 [00:00<00:00, 22.44it/s]                                               23%|##3       | 6/26 [00:00<00:00, 22.44it/s] 42%|####2     | 11/26 [00:00<00:00, 31.05it/s] 62%|######1   | 16/26 [00:00<00:00, 37.15it/s]                                                62%|######1   | 16/26 [00:00<00:00, 37.15it/s] 81%|########  | 21/26 [00:00<00:00, 39.90it/s]100%|##########| 26/26 [00:00<00:00, 32.59it/s]
Test: [   0/  26]	Loss 0.315 (0.315)	test_acc   0.84 (  0.84)	test_minacc   0.19 (  0.19)	test_majacc   0.97 (  0.97)	Loss_d 0.315 (0.315)	test_acc_d   0.84 (  0.84)	test_minacc_d   0.19 (  0.19)	test_majacc_d   0.97 (  0.97)	test_corr_d   0.91 (  0.91)
Test: [  10/  26]	Loss 0.276 (0.308)	test_acc   0.88 (  0.86)	test_minacc   0.26 (  0.24)	test_majacc   0.98 (  0.98)	Loss_d 0.276 (0.308)	test_acc_d   0.88 (  0.86)	test_minacc_d   0.26 (  0.24)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.92 (  0.91)
Test: [  20/  26]	Loss 0.269 (0.304)	test_acc   0.87 (  0.87)	test_minacc   0.31 (  0.24)	test_majacc   0.98 (  0.98)	Loss_d 0.269 (0.304)	test_acc_d   0.87 (  0.87)	test_minacc_d   0.31 (  0.24)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.90 (  0.92)
Test: [  26/  26]	Loss 0.266 (0.302)	test_acc   0.90 (  0.87)	test_minacc   0.32 (  0.25)	test_majacc   1.00 (  0.98)	Loss_d 0.266 (0.302)	test_acc_d   0.90 (  0.87)	test_minacc_d   0.32 (  0.25)	test_majacc_d   1.00 (  0.98)	test_corr_d   0.92 (  0.92)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.19it/s]
Test: [  0/  1]	Loss 1.671 (1.671)	test_acc   0.25 (  0.25)	test_minacc   0.17 (  0.17)	test_majacc   0.97 (  0.97)	Loss_d 1.671 (1.671)	test_acc_d   0.25 (  0.25)	test_minacc_d   0.17 (  0.17)	test_majacc_d   0.97 (  0.97)	test_corr_d   0.74 (  0.74)
Test: [  1/  1]	Loss 1.671 (1.671)	test_acc   0.25 (  0.25)	test_minacc   0.17 (  0.17)	test_majacc   0.97 (  0.97)	Loss_d 1.671 (1.671)	test_acc_d   0.25 (  0.25)	test_minacc_d   0.17 (  0.17)	test_majacc_d   0.97 (  0.97)	test_corr_d   0.74 (  0.74)
Overall Timing[  6/  1]	epoch_time 0.0447 (0.0463)	validation_time 0.0005 (0.0013)	train_time 0.0442 (0.0448)
record: (train_acc, test_acc) (0.8702000222206115, 0.30300000309944153)
last accs (train_acc, test_acc) (0.8701000238060951, 0.25200000405311584)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 17.89it/s] 23%|##3       | 6/26 [00:00<00:00, 27.86it/s] 38%|###8      | 10/26 [00:00<00:00, 30.59it/s] 54%|#####3    | 14/26 [00:00<00:00, 31.57it/s] 69%|######9   | 18/26 [00:00<00:00, 32.60it/s] 85%|########4 | 22/26 [00:00<00:00, 33.58it/s]100%|##########| 26/26 [00:00<00:00, 34.26it/s]100%|##########| 26/26 [00:00<00:00, 30.00it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 182 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 183 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 184 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 185 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 186 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 187 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 188 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 189 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 190 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 191 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 192 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 193 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 194 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 195 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 196 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 197 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 198 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 199 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 200 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 201 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 202 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 203 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 204 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 205 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 206 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 207 400
penalty weights 0.0
Epoch: [7][  26/  26]	Loss 0.251 (0.292)	train_nll   0.25 (  0.29)	train_penalty   0.01 (  0.02)	weight_norm  22.50 ( 22.45)	train_acc   0.89 (  0.87)	train_minacc   0.50 (  0.45)	train_majacc   0.95 (  0.95)	train_corr   0.00 (  0.00)	l1 8.5507 (8.5171)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 17.29it/s] 27%|##6       | 7/26 [00:00<00:00, 32.66it/s]                                               27%|##6       | 7/26 [00:00<00:00, 32.66it/s] 46%|####6     | 12/26 [00:00<00:00, 39.10it/s] 65%|######5   | 17/26 [00:00<00:00, 42.12it/s]                                                65%|######5   | 17/26 [00:00<00:00, 42.12it/s] 85%|########4 | 22/26 [00:00<00:00, 41.54it/s]100%|##########| 26/26 [00:00<00:00, 37.57it/s]
Test: [   0/  26]	Loss 0.305 (0.305)	test_acc   0.84 (  0.84)	test_minacc   0.27 (  0.27)	test_majacc   0.96 (  0.96)	Loss_d 0.305 (0.305)	test_acc_d   0.84 (  0.84)	test_minacc_d   0.27 (  0.27)	test_majacc_d   0.96 (  0.96)	test_corr_d   0.88 (  0.88)
Test: [  10/  26]	Loss 0.270 (0.306)	test_acc   0.89 (  0.87)	test_minacc   0.32 (  0.31)	test_majacc   0.98 (  0.97)	Loss_d 0.270 (0.306)	test_acc_d   0.89 (  0.87)	test_minacc_d   0.32 (  0.31)	test_majacc_d   0.98 (  0.97)	test_corr_d   0.90 (  0.89)
Test: [  20/  26]	Loss 0.256 (0.298)	test_acc   0.89 (  0.88)	test_minacc   0.39 (  0.33)	test_majacc   0.98 (  0.97)	Loss_d 0.256 (0.298)	test_acc_d   0.89 (  0.88)	test_minacc_d   0.39 (  0.33)	test_majacc_d   0.98 (  0.97)	test_corr_d   0.88 (  0.89)
Test: [  26/  26]	Loss 0.238 (0.295)	test_acc   0.90 (  0.88)	test_minacc   0.35 (  0.33)	test_majacc   0.98 (  0.97)	Loss_d 0.238 (0.295)	test_acc_d   0.90 (  0.88)	test_minacc_d   0.35 (  0.33)	test_majacc_d   0.98 (  0.97)	test_corr_d   0.90 (  0.89)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 55.17it/s]
Test: [  0/  1]	Loss 1.760 (1.760)	test_acc   0.25 (  0.25)	test_minacc   0.17 (  0.17)	test_majacc   0.98 (  0.98)	Loss_d 1.760 (1.760)	test_acc_d   0.25 (  0.25)	test_minacc_d   0.17 (  0.17)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.72 (  0.72)
Test: [  1/  1]	Loss 1.760 (1.760)	test_acc   0.25 (  0.25)	test_minacc   0.17 (  0.17)	test_majacc   0.98 (  0.98)	Loss_d 1.760 (1.760)	test_acc_d   0.25 (  0.25)	test_minacc_d   0.17 (  0.17)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.72 (  0.72)
Overall Timing[  7/  1]	epoch_time 0.0371 (0.0452)	validation_time 0.0004 (0.0012)	train_time 0.0367 (0.0438)
record: (train_acc, test_acc) (0.8702000222206115, 0.30300000309944153)
last accs (train_acc, test_acc) (0.8774000217914582, 0.24700000882148743)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.09it/s] 19%|#9        | 5/26 [00:00<00:00, 23.40it/s] 35%|###4      | 9/26 [00:00<00:00, 28.50it/s] 50%|#####     | 13/26 [00:00<00:00, 31.56it/s] 65%|######5   | 17/26 [00:00<00:00, 32.64it/s] 81%|########  | 21/26 [00:00<00:00, 33.11it/s] 96%|#########6| 25/26 [00:00<00:00, 33.31it/s]100%|##########| 26/26 [00:00<00:00, 29.12it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 208 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 209 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 210 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 211 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 212 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 213 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 214 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 215 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 216 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 217 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 218 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 219 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 220 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 221 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 222 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 223 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 224 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 225 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 226 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 227 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 228 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 229 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 230 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 231 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 232 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 233 400
penalty weights 0.0
Epoch: [8][  26/  26]	Loss 0.228 (0.286)	train_nll   0.23 (  0.29)	train_penalty   0.01 (  0.02)	weight_norm  22.61 ( 22.55)	train_acc   0.90 (  0.88)	train_minacc   0.59 (  0.46)	train_majacc   0.95 (  0.95)	train_corr   0.00 (  0.00)	l1 8.5698 (8.4701)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.08it/s] 23%|##3       | 6/26 [00:00<00:00, 30.05it/s]                                               23%|##3       | 6/26 [00:00<00:00, 30.05it/s] 42%|####2     | 11/26 [00:00<00:00, 38.58it/s] 62%|######1   | 16/26 [00:00<00:00, 42.92it/s]                                                62%|######1   | 16/26 [00:00<00:00, 42.92it/s] 81%|########  | 21/26 [00:00<00:00, 39.47it/s]100%|##########| 26/26 [00:00<00:00, 35.98it/s]
Test: [   0/  26]	Loss 0.267 (0.267)	test_acc   0.86 (  0.86)	test_minacc   0.37 (  0.37)	test_majacc   0.96 (  0.96)	Loss_d 0.267 (0.267)	test_acc_d   0.86 (  0.86)	test_minacc_d   0.37 (  0.37)	test_majacc_d   0.96 (  0.96)	test_corr_d   0.86 (  0.86)
Test: [  10/  26]	Loss 0.285 (0.286)	test_acc   0.87 (  0.88)	test_minacc   0.26 (  0.36)	test_majacc   0.98 (  0.97)	Loss_d 0.285 (0.286)	test_acc_d   0.87 (  0.88)	test_minacc_d   0.26 (  0.36)	test_majacc_d   0.98 (  0.97)	test_corr_d   0.90 (  0.88)
Test: [  20/  26]	Loss 0.231 (0.279)	test_acc   0.89 (  0.88)	test_minacc   0.42 (  0.37)	test_majacc   0.98 (  0.97)	Loss_d 0.231 (0.279)	test_acc_d   0.89 (  0.88)	test_minacc_d   0.42 (  0.37)	test_majacc_d   0.98 (  0.97)	test_corr_d   0.88 (  0.88)
Test: [  26/  26]	Loss 0.207 (0.274)	test_acc   0.92 (  0.88)	test_minacc   0.50 (  0.38)	test_majacc   0.99 (  0.97)	Loss_d 0.207 (0.274)	test_acc_d   0.92 (  0.88)	test_minacc_d   0.50 (  0.38)	test_majacc_d   0.99 (  0.97)	test_corr_d   0.89 (  0.88)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.07it/s]
Test: [  0/  1]	Loss 1.776 (1.776)	test_acc   0.28 (  0.28)	test_minacc   0.21 (  0.21)	test_majacc   0.96 (  0.96)	Loss_d 1.776 (1.776)	test_acc_d   0.28 (  0.28)	test_minacc_d   0.21 (  0.21)	test_majacc_d   0.96 (  0.96)	test_corr_d   0.69 (  0.69)
Test: [  1/  1]	Loss 1.776 (1.776)	test_acc   0.28 (  0.28)	test_minacc   0.21 (  0.21)	test_majacc   0.96 (  0.96)	Loss_d 1.776 (1.776)	test_acc_d   0.28 (  0.28)	test_minacc_d   0.21 (  0.21)	test_majacc_d   0.96 (  0.96)	test_corr_d   0.69 (  0.69)
Overall Timing[  8/  1]	epoch_time 0.0428 (0.0449)	validation_time 0.0004 (0.0011)	train_time 0.0423 (0.0436)
record: (train_acc, test_acc) (0.8702000222206115, 0.30300000309944153)
last accs (train_acc, test_acc) (0.8842000234723091, 0.2840000092983246)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.13it/s] 19%|#9        | 5/26 [00:00<00:00, 22.57it/s] 35%|###4      | 9/26 [00:00<00:00, 27.45it/s] 50%|#####     | 13/26 [00:00<00:00, 30.24it/s] 65%|######5   | 17/26 [00:00<00:00, 31.90it/s] 81%|########  | 21/26 [00:00<00:00, 33.16it/s] 96%|#########6| 25/26 [00:00<00:00, 33.97it/s]100%|##########| 26/26 [00:00<00:00, 28.70it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 234 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 235 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 236 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 237 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 238 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 239 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 240 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 241 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 242 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 243 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 244 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 245 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 246 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 247 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 248 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 249 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 250 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 251 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 252 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 253 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 254 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 255 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 256 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 257 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 258 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 259 400
penalty weights 0.0
Epoch: [9][  26/  26]	Loss 0.209 (0.281)	train_nll   0.21 (  0.28)	train_penalty   0.01 (  0.01)	weight_norm  22.75 ( 22.68)	train_acc   0.92 (  0.88)	train_minacc   0.68 (  0.46)	train_majacc   0.96 (  0.96)	train_corr   0.00 (  0.00)	l1 8.4919 (8.5250)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:01, 19.03it/s] 31%|###       | 8/26 [00:00<00:00, 32.79it/s]                                               31%|###       | 8/26 [00:00<00:00, 32.79it/s] 50%|#####     | 13/26 [00:00<00:00, 38.27it/s] 69%|######9   | 18/26 [00:00<00:00, 41.64it/s]                                                69%|######9   | 18/26 [00:00<00:00, 41.64it/s] 88%|########8 | 23/26 [00:00<00:00, 40.12it/s]100%|##########| 26/26 [00:00<00:00, 36.41it/s]
Test: [   0/  26]	Loss 0.265 (0.265)	test_acc   0.88 (  0.88)	test_minacc   0.45 (  0.45)	test_majacc   0.97 (  0.97)	Loss_d 0.265 (0.265)	test_acc_d   0.88 (  0.88)	test_minacc_d   0.45 (  0.45)	test_majacc_d   0.97 (  0.97)	test_corr_d   0.87 (  0.87)
Test: [  10/  26]	Loss 0.244 (0.261)	test_acc   0.91 (  0.89)	test_minacc   0.46 (  0.44)	test_majacc   0.98 (  0.98)	Loss_d 0.244 (0.261)	test_acc_d   0.91 (  0.89)	test_minacc_d   0.46 (  0.44)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.88 (  0.88)
Test: [  20/  26]	Loss 0.212 (0.255)	test_acc   0.90 (  0.90)	test_minacc   0.48 (  0.44)	test_majacc   0.98 (  0.98)	Loss_d 0.212 (0.255)	test_acc_d   0.90 (  0.90)	test_minacc_d   0.48 (  0.44)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.88 (  0.88)
Test: [  26/  26]	Loss 0.180 (0.250)	test_acc   0.94 (  0.90)	test_minacc   0.59 (  0.45)	test_majacc   0.99 (  0.98)	Loss_d 0.180 (0.250)	test_acc_d   0.94 (  0.90)	test_minacc_d   0.59 (  0.45)	test_majacc_d   0.99 (  0.98)	test_corr_d   0.89 (  0.88)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.23it/s]
Test: [  0/  1]	Loss 1.787 (1.787)	test_acc   0.31 (  0.31)	test_minacc   0.24 (  0.24)	test_majacc   0.95 (  0.95)	Loss_d 1.787 (1.787)	test_acc_d   0.31 (  0.31)	test_minacc_d   0.24 (  0.24)	test_majacc_d   0.95 (  0.95)	test_corr_d   0.65 (  0.65)
Test: [  1/  1]	Loss 1.787 (1.787)	test_acc   0.31 (  0.31)	test_minacc   0.24 (  0.24)	test_majacc   0.95 (  0.95)	Loss_d 1.787 (1.787)	test_acc_d   0.31 (  0.31)	test_minacc_d   0.24 (  0.24)	test_majacc_d   0.95 (  0.95)	test_corr_d   0.65 (  0.65)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/146/checkpoints/model_best.pth
Overall Timing[  9/  1]	epoch_time 0.0428 (0.0447)	validation_time 0.0004 (0.0010)	train_time 0.0424 (0.0435)
record: (train_acc, test_acc) (0.8977000200152397, 0.31300002336502075)
last accs (train_acc, test_acc) (0.8977000200152397, 0.31300002336502075)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 15.69it/s] 23%|##3       | 6/26 [00:00<00:00, 26.25it/s] 38%|###8      | 10/26 [00:00<00:00, 29.91it/s] 54%|#####3    | 14/26 [00:00<00:00, 32.07it/s] 69%|######9   | 18/26 [00:00<00:00, 33.43it/s] 85%|########4 | 22/26 [00:00<00:00, 34.20it/s]100%|##########| 26/26 [00:00<00:00, 35.51it/s]100%|##########| 26/26 [00:00<00:00, 30.31it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 260 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 261 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 262 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 263 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 264 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 265 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 266 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 267 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 268 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 269 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 270 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 271 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 272 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 273 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 274 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 275 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 276 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 277 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 278 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 279 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 280 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 281 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 282 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 283 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 284 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 285 400
penalty weights 0.0
Epoch: [10][  26/  26]	Loss 0.242 (0.271)	train_nll   0.24 (  0.27)	train_penalty   0.01 (  0.01)	weight_norm  22.91 ( 22.83)	train_acc   0.91 (  0.89)	train_minacc   0.68 (  0.50)	train_majacc   0.95 (  0.96)	train_corr   0.00 (  0.00)	l1 8.4215 (8.6614)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.23it/s] 15%|#5        | 4/26 [00:00<00:01, 17.81it/s] 35%|###4      | 9/26 [00:00<00:00, 30.11it/s]                                               35%|###4      | 9/26 [00:00<00:00, 30.11it/s] 58%|#####7    | 15/26 [00:00<00:00, 38.76it/s] 77%|#######6  | 20/26 [00:00<00:00, 39.32it/s]                                                77%|#######6  | 20/26 [00:00<00:00, 39.32it/s] 96%|#########6| 25/26 [00:00<00:00, 41.79it/s]100%|##########| 26/26 [00:00<00:00, 33.69it/s]
Test: [   0/  26]	Loss 0.295 (0.295)	test_acc   0.87 (  0.87)	test_minacc   0.34 (  0.34)	test_majacc   0.98 (  0.98)	Loss_d 0.295 (0.295)	test_acc_d   0.87 (  0.87)	test_minacc_d   0.34 (  0.34)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.89 (  0.89)
Test: [  10/  26]	Loss 0.236 (0.272)	test_acc   0.91 (  0.89)	test_minacc   0.40 (  0.40)	test_majacc   0.99 (  0.97)	Loss_d 0.236 (0.272)	test_acc_d   0.91 (  0.89)	test_minacc_d   0.40 (  0.40)	test_majacc_d   0.99 (  0.97)	test_corr_d   0.89 (  0.88)
Test: [  20/  26]	Loss 0.229 (0.262)	test_acc   0.90 (  0.89)	test_minacc   0.44 (  0.42)	test_majacc   0.99 (  0.98)	Loss_d 0.229 (0.262)	test_acc_d   0.90 (  0.89)	test_minacc_d   0.44 (  0.42)	test_majacc_d   0.99 (  0.98)	test_corr_d   0.89 (  0.88)
Test: [  26/  26]	Loss 0.208 (0.257)	test_acc   0.93 (  0.89)	test_minacc   0.53 (  0.42)	test_majacc   1.00 (  0.98)	Loss_d 0.208 (0.257)	test_acc_d   0.93 (  0.89)	test_minacc_d   0.53 (  0.42)	test_majacc_d   1.00 (  0.98)	test_corr_d   0.90 (  0.89)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.90it/s]
Test: [  0/  1]	Loss 1.804 (1.804)	test_acc   0.32 (  0.32)	test_minacc   0.25 (  0.25)	test_majacc   0.95 (  0.95)	Loss_d 1.804 (1.804)	test_acc_d   0.32 (  0.32)	test_minacc_d   0.25 (  0.25)	test_majacc_d   0.95 (  0.95)	test_corr_d   0.65 (  0.65)
Test: [  1/  1]	Loss 1.804 (1.804)	test_acc   0.32 (  0.32)	test_minacc   0.25 (  0.25)	test_majacc   0.95 (  0.95)	Loss_d 1.804 (1.804)	test_acc_d   0.32 (  0.32)	test_minacc_d   0.25 (  0.25)	test_majacc_d   0.95 (  0.95)	test_corr_d   0.65 (  0.65)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/146/checkpoints/model_best.pth
Overall Timing[ 10/  1]	epoch_time 0.0438 (0.0446)	validation_time 0.0004 (0.0010)	train_time 0.0434 (0.0435)
record: (train_acc, test_acc) (0.8940000246763229, 0.32100000977516174)
last accs (train_acc, test_acc) (0.8940000246763229, 0.32100000977516174)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:06,  3.84it/s] 19%|#9        | 5/26 [00:00<00:01, 15.80it/s] 35%|###4      | 9/26 [00:00<00:00, 22.44it/s] 50%|#####     | 13/26 [00:00<00:00, 26.62it/s] 65%|######5   | 17/26 [00:00<00:00, 29.49it/s] 81%|########  | 21/26 [00:00<00:00, 31.60it/s] 96%|#########6| 25/26 [00:00<00:00, 32.86it/s]100%|##########| 26/26 [00:01<00:00, 24.88it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 286 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 287 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 288 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 289 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 290 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 291 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 292 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 293 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 294 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 295 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 296 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 297 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 298 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 299 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 300 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 301 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 302 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 303 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 304 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 305 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 306 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 307 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 308 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 309 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 310 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 311 400
penalty weights 0.0
Epoch: [11][  26/  26]	Loss 0.234 (0.264)	train_nll   0.23 (  0.26)	train_penalty   0.01 (  0.01)	weight_norm  23.10 ( 23.00)	train_acc   0.92 (  0.89)	train_minacc   0.68 (  0.53)	train_majacc   0.95 (  0.96)	train_corr   0.00 (  0.00)	l1 8.4011 (8.5874)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.81it/s] 27%|##6       | 7/26 [00:00<00:00, 33.88it/s]                                               27%|##6       | 7/26 [00:00<00:00, 33.88it/s] 50%|#####     | 13/26 [00:00<00:00, 39.94it/s] 69%|######9   | 18/26 [00:00<00:00, 42.33it/s]                                                69%|######9   | 18/26 [00:00<00:00, 42.33it/s] 88%|########8 | 23/26 [00:00<00:00, 43.60it/s]100%|##########| 26/26 [00:00<00:00, 37.18it/s]
Test: [   0/  26]	Loss 0.271 (0.271)	test_acc   0.86 (  0.86)	test_minacc   0.45 (  0.45)	test_majacc   0.95 (  0.95)	Loss_d 0.271 (0.271)	test_acc_d   0.86 (  0.86)	test_minacc_d   0.45 (  0.45)	test_majacc_d   0.95 (  0.95)	test_corr_d   0.84 (  0.84)
Test: [  10/  26]	Loss 0.229 (0.274)	test_acc   0.92 (  0.89)	test_minacc   0.65 (  0.52)	test_majacc   0.97 (  0.96)	Loss_d 0.229 (0.274)	test_acc_d   0.92 (  0.89)	test_minacc_d   0.65 (  0.52)	test_majacc_d   0.97 (  0.96)	test_corr_d   0.86 (  0.85)
Test: [  20/  26]	Loss 0.217 (0.261)	test_acc   0.91 (  0.89)	test_minacc   0.60 (  0.54)	test_majacc   0.97 (  0.96)	Loss_d 0.217 (0.261)	test_acc_d   0.91 (  0.89)	test_minacc_d   0.60 (  0.54)	test_majacc_d   0.97 (  0.96)	test_corr_d   0.85 (  0.85)
Test: [  26/  26]	Loss 0.220 (0.258)	test_acc   0.92 (  0.89)	test_minacc   0.68 (  0.53)	test_majacc   0.96 (  0.96)	Loss_d 0.220 (0.258)	test_acc_d   0.92 (  0.89)	test_minacc_d   0.68 (  0.53)	test_majacc_d   0.96 (  0.96)	test_corr_d   0.86 (  0.85)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 65.14it/s]
Test: [  0/  1]	Loss 1.663 (1.663)	test_acc   0.40 (  0.40)	test_minacc   0.35 (  0.35)	test_majacc   0.92 (  0.92)	Loss_d 1.663 (1.663)	test_acc_d   0.40 (  0.40)	test_minacc_d   0.35 (  0.35)	test_majacc_d   0.92 (  0.92)	test_corr_d   0.53 (  0.53)
Test: [  1/  1]	Loss 1.663 (1.663)	test_acc   0.40 (  0.40)	test_minacc   0.35 (  0.35)	test_majacc   0.92 (  0.92)	Loss_d 1.663 (1.663)	test_acc_d   0.40 (  0.40)	test_minacc_d   0.35 (  0.35)	test_majacc_d   0.92 (  0.92)	test_corr_d   0.53 (  0.53)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/146/checkpoints/model_best.pth
Overall Timing[ 11/  1]	epoch_time 0.0422 (0.0444)	validation_time 0.0004 (0.0009)	train_time 0.0418 (0.0433)
record: (train_acc, test_acc) (0.8949000207185746, 0.40300002694129944)
last accs (train_acc, test_acc) (0.8949000207185746, 0.40300002694129944)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.36it/s] 19%|#9        | 5/26 [00:00<00:00, 23.96it/s] 35%|###4      | 9/26 [00:00<00:00, 28.32it/s] 50%|#####     | 13/26 [00:00<00:00, 30.16it/s] 65%|######5   | 17/26 [00:00<00:00, 31.71it/s] 81%|########  | 21/26 [00:00<00:00, 33.75it/s] 96%|#########6| 25/26 [00:00<00:00, 34.47it/s]100%|##########| 26/26 [00:00<00:00, 29.33it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 312 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 313 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 314 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 315 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 316 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 317 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 318 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 319 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 320 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 321 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 322 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 323 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 324 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 325 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 326 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 327 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 328 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 329 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 330 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 331 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 332 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 333 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 334 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 335 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 336 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 337 400
penalty weights 0.0
Epoch: [12][  26/  26]	Loss 0.200 (0.246)	train_nll   0.20 (  0.25)	train_penalty   0.00 (  0.01)	weight_norm  23.31 ( 23.20)	train_acc   0.92 (  0.90)	train_minacc   0.74 (  0.57)	train_majacc   0.95 (  0.96)	train_corr   0.00 (  0.00)	l1 8.4311 (8.7113)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:00, 25.72it/s] 35%|###4      | 9/26 [00:00<00:00, 41.38it/s]                                               35%|###4      | 9/26 [00:00<00:00, 41.38it/s] 58%|#####7    | 15/26 [00:00<00:00, 45.82it/s] 77%|#######6  | 20/26 [00:00<00:00, 42.88it/s]                                                77%|#######6  | 20/26 [00:00<00:00, 42.88it/s] 96%|#########6| 25/26 [00:00<00:00, 44.28it/s]100%|##########| 26/26 [00:00<00:00, 39.60it/s]
Test: [   0/  26]	Loss 0.263 (0.263)	test_acc   0.87 (  0.87)	test_minacc   0.55 (  0.55)	test_majacc   0.94 (  0.94)	Loss_d 0.263 (0.263)	test_acc_d   0.87 (  0.87)	test_minacc_d   0.55 (  0.55)	test_majacc_d   0.94 (  0.94)	test_corr_d   0.81 (  0.81)
Test: [  10/  26]	Loss 0.206 (0.248)	test_acc   0.94 (  0.90)	test_minacc   0.79 (  0.61)	test_majacc   0.96 (  0.95)	Loss_d 0.206 (0.248)	test_acc_d   0.94 (  0.90)	test_minacc_d   0.79 (  0.61)	test_majacc_d   0.96 (  0.95)	test_corr_d   0.81 (  0.81)
Test: [  20/  26]	Loss 0.210 (0.237)	test_acc   0.91 (  0.91)	test_minacc   0.68 (  0.64)	test_majacc   0.95 (  0.95)	Loss_d 0.210 (0.237)	test_acc_d   0.91 (  0.91)	test_minacc_d   0.68 (  0.64)	test_majacc_d   0.95 (  0.95)	test_corr_d   0.80 (  0.81)
Test: [  26/  26]	Loss 0.181 (0.234)	test_acc   0.94 (  0.91)	test_minacc   0.65 (  0.64)	test_majacc   0.99 (  0.96)	Loss_d 0.181 (0.234)	test_acc_d   0.94 (  0.91)	test_minacc_d   0.65 (  0.64)	test_majacc_d   0.99 (  0.96)	test_corr_d   0.82 (  0.81)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 60.05it/s]
Test: [  0/  1]	Loss 1.610 (1.610)	test_acc   0.44 (  0.44)	test_minacc   0.39 (  0.39)	test_majacc   0.93 (  0.93)	Loss_d 1.610 (1.610)	test_acc_d   0.44 (  0.44)	test_minacc_d   0.39 (  0.39)	test_majacc_d   0.93 (  0.93)	test_corr_d   0.45 (  0.45)
Test: [  1/  1]	Loss 1.610 (1.610)	test_acc   0.44 (  0.44)	test_minacc   0.39 (  0.39)	test_majacc   0.93 (  0.93)	Loss_d 1.610 (1.610)	test_acc_d   0.44 (  0.44)	test_minacc_d   0.39 (  0.39)	test_majacc_d   0.93 (  0.93)	test_corr_d   0.45 (  0.45)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/146/checkpoints/model_best.pth
Overall Timing[ 12/  1]	epoch_time 0.0390 (0.0440)	validation_time 0.0004 (0.0009)	train_time 0.0386 (0.0430)
record: (train_acc, test_acc) (0.9082000209689141, 0.4440000355243683)
last accs (train_acc, test_acc) (0.9082000209689141, 0.4440000355243683)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.37it/s] 19%|#9        | 5/26 [00:00<00:00, 22.87it/s] 35%|###4      | 9/26 [00:00<00:00, 27.19it/s] 50%|#####     | 13/26 [00:00<00:00, 29.86it/s] 65%|######5   | 17/26 [00:00<00:00, 31.21it/s] 81%|########  | 21/26 [00:00<00:00, 31.82it/s] 96%|#########6| 25/26 [00:00<00:00, 32.55it/s]100%|##########| 26/26 [00:00<00:00, 28.32it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 338 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 339 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 340 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 341 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 342 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 343 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 344 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 345 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 346 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 347 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 348 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 349 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 350 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 351 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 352 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 353 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 354 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 355 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 356 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 357 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 358 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 359 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 360 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 361 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 362 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 363 400
penalty weights 0.0
Epoch: [13][  26/  26]	Loss 0.181 (0.228)	train_nll   0.18 (  0.23)	train_penalty   0.01 (  0.01)	weight_norm  23.54 ( 23.43)	train_acc   0.93 (  0.91)	train_minacc   0.53 (  0.60)	train_majacc   1.00 (  0.96)	train_corr   0.00 (  0.00)	l1 8.7660 (8.8431)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.69it/s] 27%|##6       | 7/26 [00:00<00:00, 29.67it/s]                                               27%|##6       | 7/26 [00:00<00:00, 29.67it/s] 46%|####6     | 12/26 [00:00<00:00, 36.61it/s] 65%|######5   | 17/26 [00:00<00:00, 40.76it/s]                                                65%|######5   | 17/26 [00:00<00:00, 40.76it/s] 85%|########4 | 22/26 [00:00<00:00, 43.55it/s]100%|##########| 26/26 [00:00<00:00, 34.66it/s]
Test: [   0/  26]	Loss 0.297 (0.297)	test_acc   0.87 (  0.87)	test_minacc   0.40 (  0.40)	test_majacc   0.96 (  0.96)	Loss_d 0.297 (0.297)	test_acc_d   0.87 (  0.87)	test_minacc_d   0.40 (  0.40)	test_majacc_d   0.96 (  0.96)	test_corr_d   0.86 (  0.86)
Test: [  10/  26]	Loss 0.210 (0.255)	test_acc   0.92 (  0.90)	test_minacc   0.63 (  0.50)	test_majacc   0.97 (  0.97)	Loss_d 0.210 (0.255)	test_acc_d   0.92 (  0.90)	test_minacc_d   0.63 (  0.50)	test_majacc_d   0.97 (  0.97)	test_corr_d   0.84 (  0.85)
Test: [  20/  26]	Loss 0.187 (0.238)	test_acc   0.92 (  0.91)	test_minacc   0.53 (  0.54)	test_majacc   0.99 (  0.97)	Loss_d 0.187 (0.238)	test_acc_d   0.92 (  0.91)	test_minacc_d   0.53 (  0.54)	test_majacc_d   0.99 (  0.97)	test_corr_d   0.85 (  0.85)
Test: [  26/  26]	Loss 0.164 (0.232)	test_acc   0.96 (  0.91)	test_minacc   0.74 (  0.54)	test_majacc   1.00 (  0.97)	Loss_d 0.164 (0.232)	test_acc_d   0.96 (  0.91)	test_minacc_d   0.74 (  0.54)	test_majacc_d   1.00 (  0.97)	test_corr_d   0.85 (  0.85)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.23it/s]
Test: [  0/  1]	Loss 1.937 (1.937)	test_acc   0.36 (  0.36)	test_minacc   0.30 (  0.30)	test_majacc   0.93 (  0.93)	Loss_d 1.937 (1.937)	test_acc_d   0.36 (  0.36)	test_minacc_d   0.30 (  0.30)	test_majacc_d   0.93 (  0.93)	test_corr_d   0.55 (  0.55)
Test: [  1/  1]	Loss 1.937 (1.937)	test_acc   0.36 (  0.36)	test_minacc   0.30 (  0.30)	test_majacc   0.93 (  0.93)	Loss_d 1.937 (1.937)	test_acc_d   0.36 (  0.36)	test_minacc_d   0.30 (  0.30)	test_majacc_d   0.93 (  0.93)	test_corr_d   0.55 (  0.55)
Overall Timing[ 13/  1]	epoch_time 0.0393 (0.0437)	validation_time 0.0003 (0.0008)	train_time 0.0389 (0.0427)
record: (train_acc, test_acc) (0.9082000209689141, 0.4440000355243683)
last accs (train_acc, test_acc) (0.9098000202178955, 0.359000027179718)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.46it/s] 19%|#9        | 5/26 [00:00<00:00, 23.83it/s] 35%|###4      | 9/26 [00:00<00:00, 28.12it/s] 50%|#####     | 13/26 [00:00<00:00, 29.40it/s] 65%|######5   | 17/26 [00:00<00:00, 31.53it/s] 81%|########  | 21/26 [00:00<00:00, 33.02it/s] 96%|#########6| 25/26 [00:00<00:00, 33.59it/s]100%|##########| 26/26 [00:00<00:00, 27.92it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 364 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 365 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 366 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 367 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 368 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 369 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 370 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 371 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 372 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 373 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 374 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 375 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 376 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 377 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 378 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 379 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 380 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 381 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 382 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 383 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 384 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 385 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 386 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 387 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 388 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 389 400
penalty weights 0.0
Epoch: [14][  26/  26]	Loss 0.191 (0.237)	train_nll   0.19 (  0.24)	train_penalty   0.00 (  0.01)	weight_norm  23.82 ( 23.69)	train_acc   0.94 (  0.91)	train_minacc   0.74 (  0.59)	train_majacc   0.97 (  0.96)	train_corr   0.00 (  0.00)	l1 9.1685 (8.8241)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.67it/s] 27%|##6       | 7/26 [00:00<00:00, 36.26it/s]                                               27%|##6       | 7/26 [00:00<00:00, 36.26it/s] 46%|####6     | 12/26 [00:00<00:00, 40.53it/s] 65%|######5   | 17/26 [00:00<00:00, 40.23it/s]                                                65%|######5   | 17/26 [00:00<00:00, 40.23it/s] 85%|########4 | 22/26 [00:00<00:00, 42.38it/s]100%|##########| 26/26 [00:00<00:00, 36.93it/s]
Test: [   0/  26]	Loss 0.252 (0.252)	test_acc   0.88 (  0.88)	test_minacc   0.52 (  0.52)	test_majacc   0.96 (  0.96)	Loss_d 0.252 (0.252)	test_acc_d   0.88 (  0.88)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.96 (  0.96)	test_corr_d   0.83 (  0.83)
Test: [  10/  26]	Loss 0.167 (0.221)	test_acc   0.95 (  0.91)	test_minacc   0.74 (  0.57)	test_majacc   0.99 (  0.98)	Loss_d 0.167 (0.221)	test_acc_d   0.95 (  0.91)	test_minacc_d   0.74 (  0.57)	test_majacc_d   0.99 (  0.98)	test_corr_d   0.83 (  0.84)
Test: [  20/  26]	Loss 0.126 (0.193)	test_acc   0.95 (  0.92)	test_minacc   0.73 (  0.61)	test_majacc   0.99 (  0.98)	Loss_d 0.126 (0.193)	test_acc_d   0.95 (  0.92)	test_minacc_d   0.73 (  0.61)	test_majacc_d   0.99 (  0.98)	test_corr_d   0.81 (  0.83)
Test: [  26/  26]	Loss 0.142 (0.189)	test_acc   0.95 (  0.93)	test_minacc   0.74 (  0.61)	test_majacc   0.98 (  0.98)	Loss_d 0.142 (0.189)	test_acc_d   0.95 (  0.93)	test_minacc_d   0.74 (  0.61)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.84 (  0.84)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 64.83it/s]
Test: [  0/  1]	Loss 2.141 (2.141)	test_acc   0.35 (  0.35)	test_minacc   0.28 (  0.28)	test_majacc   0.95 (  0.95)	Loss_d 2.141 (2.141)	test_acc_d   0.35 (  0.35)	test_minacc_d   0.28 (  0.28)	test_majacc_d   0.95 (  0.95)	test_corr_d   0.56 (  0.56)
Test: [  1/  1]	Loss 2.141 (2.141)	test_acc   0.35 (  0.35)	test_minacc   0.28 (  0.28)	test_majacc   0.95 (  0.95)	Loss_d 2.141 (2.141)	test_acc_d   0.35 (  0.35)	test_minacc_d   0.28 (  0.28)	test_majacc_d   0.95 (  0.95)	test_corr_d   0.56 (  0.56)
Overall Timing[ 14/  1]	epoch_time 0.0428 (0.0436)	validation_time 0.0004 (0.0008)	train_time 0.0424 (0.0427)
record: (train_acc, test_acc) (0.9082000209689141, 0.4440000355243683)
last accs (train_acc, test_acc) (0.9265000247359276, 0.3460000157356262)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:01, 22.15it/s] 27%|##6       | 7/26 [00:00<00:00, 27.60it/s] 42%|####2     | 11/26 [00:00<00:00, 30.32it/s] 58%|#####7    | 15/26 [00:00<00:00, 31.89it/s] 73%|#######3  | 19/26 [00:00<00:00, 32.71it/s] 88%|########8 | 23/26 [00:00<00:00, 33.63it/s]100%|##########| 26/26 [00:00<00:00, 30.13it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 390 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 391 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 392 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 393 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 394 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 395 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 396 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 397 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 398 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 399 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 400 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 401 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 402 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 403 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 404 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 405 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 406 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 407 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 408 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 409 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 410 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 411 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 412 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 413 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 414 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 415 400
penalty weights 10000.0
Epoch: [15][  26/  26]	Loss 0.001 (0.096)	train_nll   0.34 (  0.27)	train_penalty   0.00 (  0.01)	weight_norm  24.06 ( 23.96)	train_acc   0.86 (  0.89)	train_minacc   0.91 (  0.66)	train_majacc   0.85 (  0.93)	train_corr   0.00 (  0.00)	l1 8.3088 (8.6596)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 17.66it/s] 19%|#9        | 5/26 [00:00<00:00, 23.20it/s] 38%|###8      | 10/26 [00:00<00:00, 34.07it/s]                                                38%|###8      | 10/26 [00:00<00:00, 34.07it/s] 58%|#####7    | 15/26 [00:00<00:00, 39.11it/s] 77%|#######6  | 20/26 [00:00<00:00, 38.95it/s]                                                77%|#######6  | 20/26 [00:00<00:00, 38.95it/s] 96%|#########6| 25/26 [00:00<00:00, 41.66it/s]100%|##########| 26/26 [00:00<00:00, 35.15it/s]
Test: [   0/  26]	Loss 0.370 (0.370)	test_acc   0.85 (  0.85)	test_minacc   0.88 (  0.88)	test_majacc   0.84 (  0.84)	Loss_d 0.370 (0.370)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.88 (  0.88)	test_majacc_d   0.84 (  0.84)	test_corr_d   0.47 (  0.47)
Test: [  10/  26]	Loss 0.403 (0.398)	test_acc   0.83 (  0.83)	test_minacc   0.88 (  0.85)	test_majacc   0.82 (  0.82)	Loss_d 0.403 (0.398)	test_acc_d   0.83 (  0.83)	test_minacc_d   0.88 (  0.85)	test_majacc_d   0.82 (  0.82)	test_corr_d   0.50 (  0.50)
Test: [  20/  26]	Loss 0.354 (0.382)	test_acc   0.86 (  0.83)	test_minacc   0.92 (  0.87)	test_majacc   0.84 (  0.83)	Loss_d 0.354 (0.382)	test_acc_d   0.86 (  0.83)	test_minacc_d   0.92 (  0.87)	test_majacc_d   0.84 (  0.83)	test_corr_d   0.51 (  0.50)
Test: [  26/  26]	Loss 0.361 (0.380)	test_acc   0.84 (  0.83)	test_minacc   0.91 (  0.87)	test_majacc   0.83 (  0.83)	Loss_d 0.361 (0.380)	test_acc_d   0.84 (  0.83)	test_minacc_d   0.91 (  0.87)	test_majacc_d   0.83 (  0.83)	test_corr_d   0.53 (  0.51)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.81it/s]
Test: [  0/  1]	Loss 1.019 (1.019)	test_acc   0.67 (  0.67)	test_minacc   0.65 (  0.65)	test_majacc   0.81 (  0.81)	Loss_d 1.019 (1.019)	test_acc_d   0.67 (  0.67)	test_minacc_d   0.65 (  0.65)	test_majacc_d   0.81 (  0.81)	test_corr_d  -0.18 ( -0.18)
Test: [  1/  1]	Loss 1.019 (1.019)	test_acc   0.67 (  0.67)	test_minacc   0.65 (  0.65)	test_majacc   0.81 (  0.81)	Loss_d 1.019 (1.019)	test_acc_d   0.67 (  0.67)	test_minacc_d   0.65 (  0.65)	test_majacc_d   0.81 (  0.81)	test_corr_d  -0.18 ( -0.18)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/146/checkpoints/model_best.pth
Overall Timing[ 15/  1]	epoch_time 0.0466 (0.0438)	validation_time 0.0003 (0.0008)	train_time 0.0462 (0.0429)
record: (train_acc, test_acc) (0.8345000269412994, 0.6670000553131104)
last accs (train_acc, test_acc) (0.8345000269412994, 0.6670000553131104)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:07,  3.35it/s] 19%|#9        | 5/26 [00:00<00:01, 14.45it/s] 35%|###4      | 9/26 [00:00<00:00, 21.09it/s] 50%|#####     | 13/26 [00:00<00:00, 25.29it/s] 65%|######5   | 17/26 [00:00<00:00, 28.28it/s] 81%|########  | 21/26 [00:00<00:00, 30.48it/s] 96%|#########6| 25/26 [00:00<00:00, 32.28it/s]100%|##########| 26/26 [00:01<00:00, 24.24it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 416 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 417 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 418 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 419 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 420 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 421 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 422 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 423 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 424 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 425 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 426 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 427 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 428 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 429 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 430 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 431 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 432 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 433 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 434 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 435 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 436 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 437 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 438 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 439 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 440 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 441 400
penalty weights 10000.0
Epoch: [16][  26/  26]	Loss 0.003 (0.004)	train_nll   0.38 (  0.40)	train_penalty   0.00 (  0.00)	weight_norm  24.12 ( 24.10)	train_acc   0.82 (  0.83)	train_minacc   0.85 (  0.85)	train_majacc   0.82 (  0.82)	train_corr   0.00 (  0.00)	l1 7.6409 (7.8458)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.56it/s] 27%|##6       | 7/26 [00:00<00:00, 29.13it/s]                                               27%|##6       | 7/26 [00:00<00:00, 29.13it/s] 46%|####6     | 12/26 [00:00<00:00, 36.06it/s] 65%|######5   | 17/26 [00:00<00:00, 39.31it/s]                                                65%|######5   | 17/26 [00:00<00:00, 39.31it/s] 85%|########4 | 22/26 [00:00<00:00, 41.34it/s]100%|##########| 26/26 [00:00<00:00, 34.35it/s]
Test: [   0/  26]	Loss 0.329 (0.329)	test_acc   0.87 (  0.87)	test_minacc   0.87 (  0.87)	test_majacc   0.87 (  0.87)	Loss_d 0.329 (0.329)	test_acc_d   0.87 (  0.87)	test_minacc_d   0.87 (  0.87)	test_majacc_d   0.87 (  0.87)	test_corr_d   0.58 (  0.58)
Test: [  10/  26]	Loss 0.373 (0.372)	test_acc   0.83 (  0.83)	test_minacc   0.77 (  0.80)	test_majacc   0.84 (  0.84)	Loss_d 0.373 (0.372)	test_acc_d   0.83 (  0.83)	test_minacc_d   0.77 (  0.80)	test_majacc_d   0.84 (  0.84)	test_corr_d   0.60 (  0.57)
Test: [  20/  26]	Loss 0.340 (0.363)	test_acc   0.84 (  0.84)	test_minacc   0.79 (  0.81)	test_majacc   0.85 (  0.84)	Loss_d 0.340 (0.363)	test_acc_d   0.84 (  0.84)	test_minacc_d   0.79 (  0.81)	test_majacc_d   0.85 (  0.84)	test_corr_d   0.59 (  0.58)
Test: [  26/  26]	Loss 0.341 (0.361)	test_acc   0.85 (  0.84)	test_minacc   0.85 (  0.81)	test_majacc   0.85 (  0.84)	Loss_d 0.341 (0.361)	test_acc_d   0.85 (  0.84)	test_minacc_d   0.85 (  0.81)	test_majacc_d   0.85 (  0.84)	test_corr_d   0.57 (  0.58)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 64.86it/s]
Test: [  0/  1]	Loss 1.005 (1.005)	test_acc   0.59 (  0.59)	test_minacc   0.57 (  0.57)	test_majacc   0.77 (  0.77)	Loss_d 1.005 (1.005)	test_acc_d   0.59 (  0.59)	test_minacc_d   0.57 (  0.57)	test_majacc_d   0.77 (  0.77)	test_corr_d  -0.03 ( -0.03)
Test: [  1/  1]	Loss 1.005 (1.005)	test_acc   0.59 (  0.59)	test_minacc   0.57 (  0.57)	test_majacc   0.77 (  0.77)	Loss_d 1.005 (1.005)	test_acc_d   0.59 (  0.59)	test_minacc_d   0.57 (  0.57)	test_majacc_d   0.77 (  0.77)	test_corr_d  -0.03 ( -0.03)
Overall Timing[ 16/  1]	epoch_time 0.0400 (0.0436)	validation_time 0.0004 (0.0008)	train_time 0.0396 (0.0427)
record: (train_acc, test_acc) (0.8345000269412994, 0.6670000553131104)
last accs (train_acc, test_acc) (0.8372000260353089, 0.5920000076293945)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.47it/s] 15%|#5        | 4/26 [00:00<00:01, 20.18it/s] 31%|###       | 8/26 [00:00<00:00, 26.68it/s] 46%|####6     | 12/26 [00:00<00:00, 29.83it/s] 62%|######1   | 16/26 [00:00<00:00, 31.96it/s] 77%|#######6  | 20/26 [00:00<00:00, 32.76it/s] 92%|#########2| 24/26 [00:00<00:00, 33.57it/s]100%|##########| 26/26 [00:00<00:00, 28.75it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 442 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 443 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 444 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 445 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 446 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 447 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 448 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 449 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 450 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 451 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 452 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 453 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 454 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 455 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 456 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 457 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 458 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 459 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 460 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 461 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 462 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 463 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 464 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 465 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 466 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 467 400
penalty weights 10000.0
Epoch: [17][  26/  26]	Loss 0.002 (0.002)	train_nll   0.29 (  0.33)	train_penalty   0.00 (  0.00)	weight_norm  24.13 ( 24.13)	train_acc   0.88 (  0.85)	train_minacc   0.85 (  0.82)	train_majacc   0.89 (  0.86)	train_corr   0.00 (  0.00)	l1 7.6727 (7.6339)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.74it/s] 23%|##3       | 6/26 [00:00<00:00, 27.59it/s]                                               23%|##3       | 6/26 [00:00<00:00, 27.59it/s] 42%|####2     | 11/26 [00:00<00:00, 35.12it/s] 62%|######1   | 16/26 [00:00<00:00, 38.93it/s]                                                62%|######1   | 16/26 [00:00<00:00, 38.93it/s] 81%|########  | 21/26 [00:00<00:00, 37.64it/s]100%|##########| 26/26 [00:00<00:00, 40.72it/s]100%|##########| 26/26 [00:00<00:00, 33.60it/s]
Test: [   0/  26]	Loss 0.361 (0.361)	test_acc   0.83 (  0.83)	test_minacc   0.87 (  0.87)	test_majacc   0.83 (  0.83)	Loss_d 0.361 (0.361)	test_acc_d   0.83 (  0.83)	test_minacc_d   0.87 (  0.87)	test_majacc_d   0.83 (  0.83)	test_corr_d   0.53 (  0.53)
Test: [  10/  26]	Loss 0.358 (0.386)	test_acc   0.84 (  0.83)	test_minacc   0.86 (  0.82)	test_majacc   0.84 (  0.83)	Loss_d 0.358 (0.386)	test_acc_d   0.84 (  0.83)	test_minacc_d   0.86 (  0.82)	test_majacc_d   0.84 (  0.83)	test_corr_d   0.58 (  0.55)
Test: [  20/  26]	Loss 0.342 (0.364)	test_acc   0.85 (  0.83)	test_minacc   0.82 (  0.83)	test_majacc   0.85 (  0.84)	Loss_d 0.342 (0.364)	test_acc_d   0.85 (  0.83)	test_minacc_d   0.82 (  0.83)	test_majacc_d   0.85 (  0.84)	test_corr_d   0.56 (  0.56)
Test: [  26/  26]	Loss 0.307 (0.361)	test_acc   0.88 (  0.84)	test_minacc   0.85 (  0.83)	test_majacc   0.88 (  0.84)	Loss_d 0.307 (0.361)	test_acc_d   0.88 (  0.84)	test_minacc_d   0.85 (  0.83)	test_majacc_d   0.88 (  0.84)	test_corr_d   0.62 (  0.56)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 65.45it/s]
Test: [  0/  1]	Loss 1.100 (1.100)	test_acc   0.65 (  0.65)	test_minacc   0.63 (  0.63)	test_majacc   0.81 (  0.81)	Loss_d 1.100 (1.100)	test_acc_d   0.65 (  0.65)	test_minacc_d   0.63 (  0.63)	test_majacc_d   0.81 (  0.81)	test_corr_d  -0.10 ( -0.10)
Test: [  1/  1]	Loss 1.100 (1.100)	test_acc   0.65 (  0.65)	test_minacc   0.63 (  0.63)	test_majacc   0.81 (  0.81)	Loss_d 1.100 (1.100)	test_acc_d   0.65 (  0.65)	test_minacc_d   0.63 (  0.63)	test_majacc_d   0.81 (  0.81)	test_corr_d  -0.10 ( -0.10)
Overall Timing[ 17/  1]	epoch_time 0.0421 (0.0435)	validation_time 0.0004 (0.0007)	train_time 0.0417 (0.0426)
record: (train_acc, test_acc) (0.8345000269412994, 0.6670000553131104)
last accs (train_acc, test_acc) (0.8370000234842301, 0.6510000228881836)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.28it/s] 19%|#9        | 5/26 [00:00<00:00, 24.45it/s] 35%|###4      | 9/26 [00:00<00:00, 28.66it/s] 50%|#####     | 13/26 [00:00<00:00, 30.48it/s] 65%|######5   | 17/26 [00:00<00:00, 32.24it/s] 81%|########  | 21/26 [00:00<00:00, 33.25it/s] 96%|#########6| 25/26 [00:00<00:00, 34.05it/s]100%|##########| 26/26 [00:00<00:00, 29.20it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 468 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 469 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 470 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 471 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 472 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 473 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 474 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 475 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 476 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 477 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 478 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 479 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 480 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 481 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 482 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 483 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 484 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 485 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 486 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 487 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 488 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 489 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 490 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 491 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 492 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 493 400
penalty weights 10000.0
Epoch: [18][  26/  26]	Loss 0.002 (0.003)	train_nll   0.30 (  0.35)	train_penalty   0.00 (  0.00)	weight_norm  24.15 ( 24.14)	train_acc   0.87 (  0.85)	train_minacc   0.79 (  0.83)	train_majacc   0.88 (  0.85)	train_corr   0.00 (  0.00)	l1 7.5953 (7.6250)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:00, 24.35it/s] 31%|###       | 8/26 [00:00<00:00, 37.65it/s]                                               31%|###       | 8/26 [00:00<00:00, 37.65it/s] 50%|#####     | 13/26 [00:00<00:00, 42.05it/s] 69%|######9   | 18/26 [00:00<00:00, 44.63it/s]                                                69%|######9   | 18/26 [00:00<00:00, 44.63it/s] 88%|########8 | 23/26 [00:00<00:00, 41.94it/s]100%|##########| 26/26 [00:00<00:00, 38.62it/s]
Test: [   0/  26]	Loss 0.365 (0.365)	test_acc   0.82 (  0.82)	test_minacc   0.81 (  0.81)	test_majacc   0.82 (  0.82)	Loss_d 0.365 (0.365)	test_acc_d   0.82 (  0.82)	test_minacc_d   0.81 (  0.81)	test_majacc_d   0.82 (  0.82)	test_corr_d   0.61 (  0.61)
Test: [  10/  26]	Loss 0.361 (0.368)	test_acc   0.86 (  0.84)	test_minacc   0.84 (  0.79)	test_majacc   0.86 (  0.85)	Loss_d 0.361 (0.368)	test_acc_d   0.86 (  0.84)	test_minacc_d   0.84 (  0.79)	test_majacc_d   0.86 (  0.85)	test_corr_d   0.63 (  0.62)
Test: [  20/  26]	Loss 0.343 (0.351)	test_acc   0.86 (  0.85)	test_minacc   0.82 (  0.80)	test_majacc   0.86 (  0.85)	Loss_d 0.343 (0.351)	test_acc_d   0.86 (  0.85)	test_minacc_d   0.82 (  0.80)	test_majacc_d   0.86 (  0.85)	test_corr_d   0.62 (  0.63)
Test: [  26/  26]	Loss 0.321 (0.351)	test_acc   0.87 (  0.85)	test_minacc   0.79 (  0.80)	test_majacc   0.88 (  0.85)	Loss_d 0.321 (0.351)	test_acc_d   0.87 (  0.85)	test_minacc_d   0.79 (  0.80)	test_majacc_d   0.88 (  0.85)	test_corr_d   0.67 (  0.63)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.77it/s]
Test: [  0/  1]	Loss 1.341 (1.341)	test_acc   0.59 (  0.59)	test_minacc   0.56 (  0.56)	test_majacc   0.87 (  0.87)	Loss_d 1.341 (1.341)	test_acc_d   0.59 (  0.59)	test_minacc_d   0.56 (  0.56)	test_majacc_d   0.87 (  0.87)	test_corr_d   0.08 (  0.08)
Test: [  1/  1]	Loss 1.341 (1.341)	test_acc   0.59 (  0.59)	test_minacc   0.56 (  0.56)	test_majacc   0.87 (  0.87)	Loss_d 1.341 (1.341)	test_acc_d   0.59 (  0.59)	test_minacc_d   0.56 (  0.56)	test_majacc_d   0.87 (  0.87)	test_corr_d   0.08 (  0.08)
Overall Timing[ 18/  1]	epoch_time 0.0408 (0.0433)	validation_time 0.0003 (0.0007)	train_time 0.0404 (0.0425)
record: (train_acc, test_acc) (0.8345000269412994, 0.6670000553131104)
last accs (train_acc, test_acc) (0.8457000237107277, 0.5890000462532043)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:01, 21.43it/s] 27%|##6       | 7/26 [00:00<00:00, 28.94it/s] 42%|####2     | 11/26 [00:00<00:00, 31.31it/s] 58%|#####7    | 15/26 [00:00<00:00, 32.76it/s] 73%|#######3  | 19/26 [00:00<00:00, 33.53it/s] 88%|########8 | 23/26 [00:00<00:00, 34.41it/s]100%|##########| 26/26 [00:00<00:00, 30.55it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 494 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 495 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 496 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 497 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 498 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 499 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 500 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 501 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 502 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 503 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 504 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 505 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 506 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 507 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 508 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 509 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 510 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 511 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 512 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 513 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 514 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 515 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 516 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 517 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 518 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 519 400
penalty weights 10000.0
Epoch: [19][  26/  26]	Loss 0.002 (0.003)	train_nll   0.26 (  0.33)	train_penalty   0.00 (  0.00)	weight_norm  24.16 ( 24.15)	train_acc   0.88 (  0.85)	train_minacc   0.82 (  0.81)	train_majacc   0.89 (  0.86)	train_corr   0.00 (  0.00)	l1 7.5675 (7.6530)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.96it/s] 19%|#9        | 5/26 [00:00<00:00, 27.29it/s] 38%|###8      | 10/26 [00:00<00:00, 37.02it/s]                                                38%|###8      | 10/26 [00:00<00:00, 37.02it/s] 58%|#####7    | 15/26 [00:00<00:00, 37.09it/s]                                                58%|#####7    | 15/26 [00:00<00:00, 37.09it/s] 81%|########  | 21/26 [00:00<00:00, 42.48it/s]100%|##########| 26/26 [00:00<00:00, 44.54it/s]100%|##########| 26/26 [00:00<00:00, 36.16it/s]
Test: [   0/  26]	Loss 0.287 (0.287)	test_acc   0.89 (  0.89)	test_minacc   0.81 (  0.81)	test_majacc   0.91 (  0.91)	Loss_d 0.287 (0.287)	test_acc_d   0.89 (  0.89)	test_minacc_d   0.81 (  0.81)	test_majacc_d   0.91 (  0.91)	test_corr_d   0.65 (  0.65)
Test: [  10/  26]	Loss 0.309 (0.290)	test_acc   0.86 (  0.87)	test_minacc   0.82 (  0.81)	test_majacc   0.87 (  0.88)	Loss_d 0.309 (0.290)	test_acc_d   0.86 (  0.87)	test_minacc_d   0.82 (  0.81)	test_majacc_d   0.87 (  0.88)	test_corr_d   0.66 (  0.66)
Test: [  20/  26]	Loss 0.252 (0.284)	test_acc   0.90 (  0.88)	test_minacc   0.85 (  0.82)	test_majacc   0.91 (  0.89)	Loss_d 0.252 (0.284)	test_acc_d   0.90 (  0.88)	test_minacc_d   0.85 (  0.82)	test_majacc_d   0.91 (  0.89)	test_corr_d   0.67 (  0.66)
Test: [  26/  26]	Loss 0.260 (0.282)	test_acc   0.88 (  0.88)	test_minacc   0.82 (  0.82)	test_majacc   0.89 (  0.89)	Loss_d 0.260 (0.282)	test_acc_d   0.88 (  0.88)	test_minacc_d   0.82 (  0.82)	test_majacc_d   0.89 (  0.89)	test_corr_d   0.69 (  0.67)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.56it/s]
Test: [  0/  1]	Loss 1.307 (1.307)	test_acc   0.57 (  0.57)	test_minacc   0.54 (  0.54)	test_majacc   0.89 (  0.89)	Loss_d 1.307 (1.307)	test_acc_d   0.57 (  0.57)	test_minacc_d   0.54 (  0.54)	test_majacc_d   0.89 (  0.89)	test_corr_d   0.14 (  0.14)
Test: [  1/  1]	Loss 1.307 (1.307)	test_acc   0.57 (  0.57)	test_minacc   0.54 (  0.54)	test_majacc   0.89 (  0.89)	Loss_d 1.307 (1.307)	test_acc_d   0.57 (  0.57)	test_minacc_d   0.54 (  0.54)	test_majacc_d   0.89 (  0.89)	test_corr_d   0.14 (  0.14)
Overall Timing[ 19/  1]	epoch_time 0.0429 (0.0433)	validation_time 0.0005 (0.0007)	train_time 0.0424 (0.0425)
record: (train_acc, test_acc) (0.8345000269412994, 0.6670000553131104)
last accs (train_acc, test_acc) (0.8771000259518623, 0.5730000138282776)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 15.80it/s] 23%|##3       | 6/26 [00:00<00:00, 26.55it/s] 38%|###8      | 10/26 [00:00<00:00, 29.55it/s] 54%|#####3    | 14/26 [00:00<00:00, 30.98it/s] 69%|######9   | 18/26 [00:00<00:00, 32.25it/s] 85%|########4 | 22/26 [00:00<00:00, 33.42it/s]100%|##########| 26/26 [00:00<00:00, 34.59it/s]100%|##########| 26/26 [00:00<00:00, 29.74it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 520 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 521 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 522 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 523 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 524 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 525 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 526 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 527 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 528 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 529 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 530 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 531 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 532 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 533 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 534 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 535 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 536 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 537 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 538 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 539 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 540 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 541 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 542 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 543 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 544 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 545 400
penalty weights 10000.0
Epoch: [20][  26/  26]	Loss 0.005 (0.004)	train_nll   0.33 (  0.30)	train_penalty   0.00 (  0.00)	weight_norm  24.18 ( 24.17)	train_acc   0.84 (  0.86)	train_minacc   0.76 (  0.79)	train_majacc   0.85 (  0.88)	train_corr   0.00 (  0.00)	l1 8.0592 (7.5293)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 15.42it/s] 27%|##6       | 7/26 [00:00<00:00, 32.25it/s]                                               27%|##6       | 7/26 [00:00<00:00, 32.25it/s] 46%|####6     | 12/26 [00:00<00:00, 38.36it/s] 65%|######5   | 17/26 [00:00<00:00, 41.35it/s]                                                65%|######5   | 17/26 [00:00<00:00, 41.35it/s] 85%|########4 | 22/26 [00:00<00:00, 40.62it/s]100%|##########| 26/26 [00:00<00:00, 37.37it/s]
Test: [   0/  26]	Loss 0.349 (0.349)	test_acc   0.83 (  0.83)	test_minacc   0.81 (  0.81)	test_majacc   0.83 (  0.83)	Loss_d 0.349 (0.349)	test_acc_d   0.83 (  0.83)	test_minacc_d   0.81 (  0.81)	test_majacc_d   0.83 (  0.83)	test_corr_d   0.56 (  0.56)
Test: [  10/  26]	Loss 0.333 (0.325)	test_acc   0.85 (  0.84)	test_minacc   0.82 (  0.83)	test_majacc   0.85 (  0.84)	Loss_d 0.333 (0.325)	test_acc_d   0.85 (  0.84)	test_minacc_d   0.82 (  0.83)	test_majacc_d   0.85 (  0.84)	test_corr_d   0.61 (  0.59)
Test: [  20/  26]	Loss 0.279 (0.329)	test_acc   0.86 (  0.84)	test_minacc   0.85 (  0.82)	test_majacc   0.87 (  0.84)	Loss_d 0.279 (0.329)	test_acc_d   0.86 (  0.84)	test_minacc_d   0.85 (  0.82)	test_majacc_d   0.87 (  0.84)	test_corr_d   0.61 (  0.59)
Test: [  26/  26]	Loss 0.315 (0.326)	test_acc   0.85 (  0.84)	test_minacc   0.79 (  0.82)	test_majacc   0.86 (  0.85)	Loss_d 0.315 (0.326)	test_acc_d   0.85 (  0.84)	test_minacc_d   0.79 (  0.82)	test_majacc_d   0.86 (  0.85)	test_corr_d   0.64 (  0.60)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 64.83it/s]
Test: [  0/  1]	Loss 1.378 (1.378)	test_acc   0.62 (  0.62)	test_minacc   0.60 (  0.60)	test_majacc   0.83 (  0.83)	Loss_d 1.378 (1.378)	test_acc_d   0.62 (  0.62)	test_minacc_d   0.60 (  0.60)	test_majacc_d   0.83 (  0.83)	test_corr_d  -0.00 ( -0.00)
Test: [  1/  1]	Loss 1.378 (1.378)	test_acc   0.62 (  0.62)	test_minacc   0.60 (  0.60)	test_majacc   0.83 (  0.83)	Loss_d 1.378 (1.378)	test_acc_d   0.62 (  0.62)	test_minacc_d   0.60 (  0.60)	test_majacc_d   0.83 (  0.83)	test_corr_d  -0.00 ( -0.00)
Overall Timing[ 20/  1]	epoch_time 0.0410 (0.0432)	validation_time 0.0004 (0.0007)	train_time 0.0406 (0.0424)
record: (train_acc, test_acc) (0.8345000269412994, 0.6670000553131104)
last accs (train_acc, test_acc) (0.8430000196695328, 0.6210000514984131)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.33it/s] 19%|#9        | 5/26 [00:00<00:01, 20.52it/s] 35%|###4      | 9/26 [00:00<00:00, 26.04it/s] 50%|#####     | 13/26 [00:00<00:00, 29.30it/s] 65%|######5   | 17/26 [00:00<00:00, 31.30it/s] 81%|########  | 21/26 [00:00<00:00, 32.61it/s] 96%|#########6| 25/26 [00:00<00:00, 33.58it/s]100%|##########| 26/26 [00:00<00:00, 27.69it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 546 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 547 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 548 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 549 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 550 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 551 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 552 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 553 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 554 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 555 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 556 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 557 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 558 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 559 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 560 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 561 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 562 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 563 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 564 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 565 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 566 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 567 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 568 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 569 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 570 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 571 400
penalty weights 10000.0
Epoch: [21][  26/  26]	Loss 0.001 (0.002)	train_nll   0.34 (  0.31)	train_penalty   0.00 (  0.00)	weight_norm  24.20 ( 24.19)	train_acc   0.84 (  0.86)	train_minacc   0.85 (  0.81)	train_majacc   0.84 (  0.87)	train_corr   0.00 (  0.00)	l1 7.6791 (7.5324)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.29it/s] 23%|##3       | 6/26 [00:00<00:00, 23.85it/s]                                               23%|##3       | 6/26 [00:00<00:00, 23.85it/s] 42%|####2     | 11/26 [00:00<00:00, 32.30it/s] 62%|######1   | 16/26 [00:00<00:00, 37.67it/s]                                                62%|######1   | 16/26 [00:00<00:00, 37.67it/s] 81%|########  | 21/26 [00:00<00:00, 36.98it/s]100%|##########| 26/26 [00:00<00:00, 40.49it/s]100%|##########| 26/26 [00:00<00:00, 32.23it/s]
Test: [   0/  26]	Loss 0.321 (0.321)	test_acc   0.87 (  0.87)	test_minacc   0.85 (  0.85)	test_majacc   0.88 (  0.88)	Loss_d 0.321 (0.321)	test_acc_d   0.87 (  0.87)	test_minacc_d   0.85 (  0.85)	test_majacc_d   0.88 (  0.88)	test_corr_d   0.61 (  0.61)
Test: [  10/  26]	Loss 0.393 (0.364)	test_acc   0.80 (  0.83)	test_minacc   0.75 (  0.80)	test_majacc   0.81 (  0.84)	Loss_d 0.393 (0.364)	test_acc_d   0.80 (  0.83)	test_minacc_d   0.75 (  0.80)	test_majacc_d   0.81 (  0.84)	test_corr_d   0.59 (  0.59)
Test: [  20/  26]	Loss 0.328 (0.370)	test_acc   0.85 (  0.83)	test_minacc   0.84 (  0.80)	test_majacc   0.85 (  0.84)	Loss_d 0.328 (0.370)	test_acc_d   0.85 (  0.83)	test_minacc_d   0.84 (  0.80)	test_majacc_d   0.85 (  0.84)	test_corr_d   0.60 (  0.59)
Test: [  26/  26]	Loss 0.346 (0.365)	test_acc   0.84 (  0.83)	test_minacc   0.85 (  0.80)	test_majacc   0.84 (  0.84)	Loss_d 0.346 (0.365)	test_acc_d   0.84 (  0.83)	test_minacc_d   0.85 (  0.80)	test_majacc_d   0.84 (  0.84)	test_corr_d   0.59 (  0.60)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.47it/s]
Test: [  0/  1]	Loss 1.249 (1.249)	test_acc   0.59 (  0.59)	test_minacc   0.56 (  0.56)	test_majacc   0.82 (  0.82)	Loss_d 1.249 (1.249)	test_acc_d   0.59 (  0.59)	test_minacc_d   0.56 (  0.56)	test_majacc_d   0.82 (  0.82)	test_corr_d   0.02 (  0.02)
Test: [  1/  1]	Loss 1.249 (1.249)	test_acc   0.59 (  0.59)	test_minacc   0.56 (  0.56)	test_majacc   0.82 (  0.82)	Loss_d 1.249 (1.249)	test_acc_d   0.59 (  0.59)	test_minacc_d   0.56 (  0.56)	test_majacc_d   0.82 (  0.82)	test_corr_d   0.02 (  0.02)
Overall Timing[ 21/  1]	epoch_time 0.0409 (0.0431)	validation_time 0.0003 (0.0007)	train_time 0.0406 (0.0423)
record: (train_acc, test_acc) (0.8345000269412994, 0.6670000553131104)
last accs (train_acc, test_acc) (0.8343000255823135, 0.5860000252723694)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:00, 25.11it/s] 27%|##6       | 7/26 [00:00<00:00, 32.84it/s] 42%|####2     | 11/26 [00:00<00:00, 32.44it/s] 58%|#####7    | 15/26 [00:00<00:00, 33.51it/s] 73%|#######3  | 19/26 [00:00<00:00, 34.58it/s] 88%|########8 | 23/26 [00:00<00:00, 34.88it/s]100%|##########| 26/26 [00:00<00:00, 31.46it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 572 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 573 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 574 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 575 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 576 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 577 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 578 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 579 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 580 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 581 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 582 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 583 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 584 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 585 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 586 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 587 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 588 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 589 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 590 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 591 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 592 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 593 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 594 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 595 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 596 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 597 400
penalty weights 10000.0
Epoch: [22][  26/  26]	Loss 0.001 (0.001)	train_nll   0.26 (  0.31)	train_penalty   0.00 (  0.00)	weight_norm  24.21 ( 24.20)	train_acc   0.89 (  0.86)	train_minacc   0.88 (  0.83)	train_majacc   0.89 (  0.86)	train_corr   0.00 (  0.00)	l1 7.7331 (7.6157)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.98it/s] 19%|#9        | 5/26 [00:00<00:00, 21.67it/s] 35%|###4      | 9/26 [00:00<00:00, 28.93it/s]                                               35%|###4      | 9/26 [00:00<00:00, 28.93it/s] 54%|#####3    | 14/26 [00:00<00:00, 32.72it/s] 77%|#######6  | 20/26 [00:00<00:00, 39.69it/s]                                                77%|#######6  | 20/26 [00:00<00:00, 39.69it/s] 96%|#########6| 25/26 [00:00<00:00, 41.63it/s]100%|##########| 26/26 [00:00<00:00, 33.08it/s]
Test: [   0/  26]	Loss 0.278 (0.278)	test_acc   0.87 (  0.87)	test_minacc   0.90 (  0.90)	test_majacc   0.87 (  0.87)	Loss_d 0.278 (0.278)	test_acc_d   0.87 (  0.87)	test_minacc_d   0.90 (  0.90)	test_majacc_d   0.87 (  0.87)	test_corr_d   0.59 (  0.59)
Test: [  10/  26]	Loss 0.328 (0.311)	test_acc   0.86 (  0.86)	test_minacc   0.88 (  0.88)	test_majacc   0.85 (  0.85)	Loss_d 0.328 (0.311)	test_acc_d   0.86 (  0.86)	test_minacc_d   0.88 (  0.88)	test_majacc_d   0.85 (  0.85)	test_corr_d   0.61 (  0.60)
Test: [  20/  26]	Loss 0.291 (0.316)	test_acc   0.87 (  0.85)	test_minacc   0.84 (  0.86)	test_majacc   0.87 (  0.85)	Loss_d 0.291 (0.316)	test_acc_d   0.87 (  0.85)	test_minacc_d   0.84 (  0.86)	test_majacc_d   0.87 (  0.85)	test_corr_d   0.60 (  0.60)
Test: [  26/  26]	Loss 0.264 (0.311)	test_acc   0.88 (  0.85)	test_minacc   0.88 (  0.86)	test_majacc   0.88 (  0.85)	Loss_d 0.264 (0.311)	test_acc_d   0.88 (  0.85)	test_minacc_d   0.88 (  0.86)	test_majacc_d   0.88 (  0.85)	test_corr_d   0.65 (  0.60)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.27it/s]
Test: [  0/  1]	Loss 1.269 (1.269)	test_acc   0.63 (  0.63)	test_minacc   0.61 (  0.61)	test_majacc   0.81 (  0.81)	Loss_d 1.269 (1.269)	test_acc_d   0.63 (  0.63)	test_minacc_d   0.61 (  0.61)	test_majacc_d   0.81 (  0.81)	test_corr_d  -0.03 ( -0.03)
Test: [  1/  1]	Loss 1.269 (1.269)	test_acc   0.63 (  0.63)	test_minacc   0.61 (  0.61)	test_majacc   0.81 (  0.81)	Loss_d 1.269 (1.269)	test_acc_d   0.63 (  0.63)	test_minacc_d   0.61 (  0.61)	test_majacc_d   0.81 (  0.81)	test_corr_d  -0.03 ( -0.03)
Overall Timing[ 22/  1]	epoch_time 0.0442 (0.0431)	validation_time 0.0004 (0.0007)	train_time 0.0438 (0.0424)
record: (train_acc, test_acc) (0.8345000269412994, 0.6670000553131104)
last accs (train_acc, test_acc) (0.8542000261545182, 0.6320000290870667)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:07,  3.48it/s] 19%|#9        | 5/26 [00:00<00:01, 14.91it/s] 35%|###4      | 9/26 [00:00<00:00, 22.00it/s] 50%|#####     | 13/26 [00:00<00:00, 26.35it/s] 65%|######5   | 17/26 [00:00<00:00, 29.36it/s] 81%|########  | 21/26 [00:00<00:00, 31.87it/s] 96%|#########6| 25/26 [00:00<00:00, 33.59it/s]100%|##########| 26/26 [00:01<00:00, 25.22it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 598 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 599 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 600 400
penalty weights 10000.0
l1 at pgd_anneal_iters 7.900487899780273
set z to 7.505463504791259
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 601 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 602 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 603 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 604 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 605 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 606 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 607 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 608 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 609 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 610 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 611 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 612 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 613 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 614 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 615 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 616 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 617 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 618 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 619 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 620 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 621 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 622 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 623 400
penalty weights 10000.0
Epoch: [23][  26/  26]	Loss 0.000 (0.001)	train_nll   0.26 (  0.29)	train_penalty   0.00 (  0.00)	weight_norm  24.22 ( 24.21)	train_acc   0.88 (  0.86)	train_minacc   0.85 (  0.84)	train_majacc   0.88 (  0.87)	train_corr   0.00 (  0.00)	l1 7.9170 (7.6254)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:08,  2.80it/s] 23%|##3       | 6/26 [00:00<00:01, 15.80it/s]                                               23%|##3       | 6/26 [00:00<00:01, 15.80it/s] 42%|####2     | 11/26 [00:00<00:00, 23.34it/s] 62%|######1   | 16/26 [00:00<00:00, 30.23it/s]                                                62%|######1   | 16/26 [00:00<00:00, 30.23it/s] 81%|########  | 21/26 [00:00<00:00, 35.33it/s]100%|##########| 26/26 [00:00<00:00, 39.14it/s]100%|##########| 26/26 [00:00<00:00, 26.90it/s]
Test: [   0/  26]	Loss 0.276 (0.276)	test_acc   0.88 (  0.88)	test_minacc   0.88 (  0.88)	test_majacc   0.88 (  0.88)	Loss_d 0.276 (0.276)	test_acc_d   0.88 (  0.88)	test_minacc_d   0.88 (  0.88)	test_majacc_d   0.88 (  0.88)	test_corr_d   0.62 (  0.62)
Test: [  10/  26]	Loss 0.308 (0.287)	test_acc   0.85 (  0.87)	test_minacc   0.84 (  0.86)	test_majacc   0.86 (  0.87)	Loss_d 0.308 (0.287)	test_acc_d   0.85 (  0.87)	test_minacc_d   0.84 (  0.86)	test_majacc_d   0.86 (  0.87)	test_corr_d   0.64 (  0.63)
Test: [  20/  26]	Loss 0.283 (0.306)	test_acc   0.87 (  0.86)	test_minacc   0.84 (  0.83)	test_majacc   0.88 (  0.86)	Loss_d 0.283 (0.306)	test_acc_d   0.87 (  0.86)	test_minacc_d   0.84 (  0.83)	test_majacc_d   0.88 (  0.86)	test_corr_d   0.63 (  0.63)
Test: [  26/  26]	Loss 0.265 (0.302)	test_acc   0.87 (  0.86)	test_minacc   0.82 (  0.83)	test_majacc   0.88 (  0.86)	Loss_d 0.265 (0.302)	test_acc_d   0.87 (  0.86)	test_minacc_d   0.82 (  0.83)	test_majacc_d   0.88 (  0.86)	test_corr_d   0.66 (  0.63)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.29it/s]
Test: [  0/  1]	Loss 1.412 (1.412)	test_acc   0.60 (  0.60)	test_minacc   0.57 (  0.57)	test_majacc   0.84 (  0.84)	Loss_d 1.412 (1.412)	test_acc_d   0.60 (  0.60)	test_minacc_d   0.57 (  0.57)	test_majacc_d   0.84 (  0.84)	test_corr_d   0.05 (  0.05)
Test: [  1/  1]	Loss 1.412 (1.412)	test_acc   0.60 (  0.60)	test_minacc   0.57 (  0.57)	test_majacc   0.84 (  0.84)	Loss_d 1.412 (1.412)	test_acc_d   0.60 (  0.60)	test_minacc_d   0.57 (  0.57)	test_majacc_d   0.84 (  0.84)	test_corr_d   0.05 (  0.05)
Overall Timing[ 23/  1]	epoch_time 0.0415 (0.0431)	validation_time 0.0004 (0.0006)	train_time 0.0412 (0.0423)
record: (train_acc, test_acc) (0.8345000269412994, 0.6670000553131104)
last accs (train_acc, test_acc) (0.8596000207662582, 0.5990000367164612)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.88it/s]  8%|7         | 2/26 [00:00<00:03,  6.22it/s] 23%|##3       | 6/26 [00:00<00:01, 16.73it/s] 35%|###4      | 9/26 [00:00<00:00, 20.43it/s] 50%|#####     | 13/26 [00:00<00:00, 24.76it/s] 65%|######5   | 17/26 [00:00<00:00, 28.03it/s] 81%|########  | 21/26 [00:00<00:00, 30.95it/s] 96%|#########6| 25/26 [00:01<00:00, 32.31it/s]100%|##########| 26/26 [00:01<00:00, 23.48it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 624 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 625 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 626 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 627 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 628 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 629 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 630 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 631 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 632 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 633 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 634 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 635 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 636 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 637 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 638 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 639 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 640 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 641 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 642 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 643 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 644 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 645 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 646 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 647 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 648 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 649 400
penalty weights 10000.0
Epoch: [24][  26/  26]	Loss 0.001 (0.001)	train_nll   0.28 (  0.29)	train_penalty   0.00 (  0.00)	weight_norm  24.23 ( 24.22)	train_acc   0.87 (  0.87)	train_minacc   0.82 (  0.83)	train_majacc   0.88 (  0.87)	train_corr   0.00 (  0.00)	l1 7.6190 (7.7678)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 12.83it/s] 27%|##6       | 7/26 [00:00<00:00, 28.13it/s]                                               27%|##6       | 7/26 [00:00<00:00, 28.13it/s] 46%|####6     | 12/26 [00:00<00:00, 36.03it/s] 69%|######9   | 18/26 [00:00<00:00, 38.46it/s]                                                69%|######9   | 18/26 [00:00<00:00, 38.46it/s] 88%|########8 | 23/26 [00:00<00:00, 41.65it/s]100%|##########| 26/26 [00:00<00:00, 35.87it/s]
Test: [   0/  26]	Loss 0.309 (0.309)	test_acc   0.86 (  0.86)	test_minacc   0.79 (  0.79)	test_majacc   0.88 (  0.88)	Loss_d 0.309 (0.309)	test_acc_d   0.86 (  0.86)	test_minacc_d   0.79 (  0.79)	test_majacc_d   0.88 (  0.88)	test_corr_d   0.64 (  0.64)
Test: [  10/  26]	Loss 0.309 (0.297)	test_acc   0.86 (  0.86)	test_minacc   0.81 (  0.82)	test_majacc   0.87 (  0.87)	Loss_d 0.309 (0.297)	test_acc_d   0.86 (  0.86)	test_minacc_d   0.81 (  0.82)	test_majacc_d   0.87 (  0.87)	test_corr_d   0.68 (  0.67)
Test: [  20/  26]	Loss 0.314 (0.313)	test_acc   0.85 (  0.85)	test_minacc   0.77 (  0.80)	test_majacc   0.87 (  0.86)	Loss_d 0.314 (0.313)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.77 (  0.80)	test_majacc_d   0.87 (  0.86)	test_corr_d   0.66 (  0.66)
Test: [  26/  26]	Loss 0.294 (0.315)	test_acc   0.86 (  0.85)	test_minacc   0.82 (  0.80)	test_majacc   0.87 (  0.86)	Loss_d 0.294 (0.315)	test_acc_d   0.86 (  0.85)	test_minacc_d   0.82 (  0.80)	test_majacc_d   0.87 (  0.86)	test_corr_d   0.68 (  0.66)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 65.12it/s]
Test: [  0/  1]	Loss 1.503 (1.503)	test_acc   0.59 (  0.59)	test_minacc   0.57 (  0.57)	test_majacc   0.80 (  0.80)	Loss_d 1.503 (1.503)	test_acc_d   0.59 (  0.59)	test_minacc_d   0.57 (  0.57)	test_majacc_d   0.80 (  0.80)	test_corr_d   0.11 (  0.11)
Test: [  1/  1]	Loss 1.503 (1.503)	test_acc   0.59 (  0.59)	test_minacc   0.57 (  0.57)	test_majacc   0.80 (  0.80)	Loss_d 1.503 (1.503)	test_acc_d   0.59 (  0.59)	test_minacc_d   0.57 (  0.57)	test_majacc_d   0.80 (  0.80)	test_corr_d   0.11 (  0.11)
Overall Timing[ 24/  1]	epoch_time 0.0393 (0.0429)	validation_time 0.0004 (0.0006)	train_time 0.0389 (0.0422)
record: (train_acc, test_acc) (0.8345000269412994, 0.6670000553131104)
last accs (train_acc, test_acc) (0.853500022828579, 0.5910000205039978)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 16.99it/s] 23%|##3       | 6/26 [00:00<00:00, 25.81it/s] 35%|###4      | 9/26 [00:00<00:00, 27.09it/s] 50%|#####     | 13/26 [00:00<00:00, 28.72it/s] 65%|######5   | 17/26 [00:00<00:00, 29.25it/s] 81%|########  | 21/26 [00:00<00:00, 30.41it/s] 96%|#########6| 25/26 [00:00<00:00, 31.62it/s]100%|##########| 26/26 [00:00<00:00, 27.74it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 650 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 651 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 652 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 653 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 654 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 655 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 656 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 657 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 658 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 659 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 660 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 661 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 662 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 663 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 664 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 665 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 666 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 667 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 668 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 669 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 670 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 671 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 672 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 673 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 674 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 675 400
penalty weights 10000.0
Epoch: [25][  26/  26]	Loss 0.003 (0.001)	train_nll   0.24 (  0.29)	train_penalty   0.00 (  0.00)	weight_norm  24.23 ( 24.23)	train_acc   0.89 (  0.86)	train_minacc   0.91 (  0.82)	train_majacc   0.89 (  0.87)	train_corr   0.00 (  0.00)	l1 7.6007 (7.7393)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 19.01it/s] 23%|##3       | 6/26 [00:00<00:00, 29.74it/s]                                               23%|##3       | 6/26 [00:00<00:00, 29.74it/s] 42%|####2     | 11/26 [00:00<00:00, 37.09it/s] 62%|######1   | 16/26 [00:00<00:00, 38.27it/s]                                                62%|######1   | 16/26 [00:00<00:00, 38.27it/s] 81%|########  | 21/26 [00:00<00:00, 40.92it/s]100%|##########| 26/26 [00:00<00:00, 43.46it/s]100%|##########| 26/26 [00:00<00:00, 36.15it/s]
Test: [   0/  26]	Loss 0.270 (0.270)	test_acc   0.88 (  0.88)	test_minacc   0.84 (  0.84)	test_majacc   0.89 (  0.89)	Loss_d 0.270 (0.270)	test_acc_d   0.88 (  0.88)	test_minacc_d   0.84 (  0.84)	test_majacc_d   0.89 (  0.89)	test_corr_d   0.66 (  0.66)
Test: [  10/  26]	Loss 0.270 (0.250)	test_acc   0.89 (  0.89)	test_minacc   0.86 (  0.88)	test_majacc   0.89 (  0.90)	Loss_d 0.270 (0.250)	test_acc_d   0.89 (  0.89)	test_minacc_d   0.86 (  0.88)	test_majacc_d   0.89 (  0.90)	test_corr_d   0.69 (  0.68)
Test: [  20/  26]	Loss 0.284 (0.268)	test_acc   0.87 (  0.88)	test_minacc   0.81 (  0.85)	test_majacc   0.88 (  0.89)	Loss_d 0.284 (0.268)	test_acc_d   0.87 (  0.88)	test_minacc_d   0.81 (  0.85)	test_majacc_d   0.88 (  0.89)	test_corr_d   0.66 (  0.67)
Test: [  26/  26]	Loss 0.249 (0.269)	test_acc   0.89 (  0.88)	test_minacc   0.91 (  0.85)	test_majacc   0.88 (  0.89)	Loss_d 0.249 (0.269)	test_acc_d   0.89 (  0.88)	test_minacc_d   0.91 (  0.85)	test_majacc_d   0.88 (  0.89)	test_corr_d   0.67 (  0.67)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.64it/s]
Test: [  0/  1]	Loss 1.422 (1.422)	test_acc   0.58 (  0.58)	test_minacc   0.55 (  0.55)	test_majacc   0.83 (  0.83)	Loss_d 1.422 (1.422)	test_acc_d   0.58 (  0.58)	test_minacc_d   0.55 (  0.55)	test_majacc_d   0.83 (  0.83)	test_corr_d   0.13 (  0.13)
Test: [  1/  1]	Loss 1.422 (1.422)	test_acc   0.58 (  0.58)	test_minacc   0.55 (  0.55)	test_majacc   0.83 (  0.83)	Loss_d 1.422 (1.422)	test_acc_d   0.58 (  0.58)	test_minacc_d   0.55 (  0.55)	test_majacc_d   0.83 (  0.83)	test_corr_d   0.13 (  0.13)
Overall Timing[ 25/  1]	epoch_time 0.0415 (0.0429)	validation_time 0.0004 (0.0006)	train_time 0.0411 (0.0422)
record: (train_acc, test_acc) (0.8345000269412994, 0.6670000553131104)
last accs (train_acc, test_acc) (0.8797000215649605, 0.5820000171661377)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.57it/s] 19%|#9        | 5/26 [00:00<00:00, 22.94it/s] 35%|###4      | 9/26 [00:00<00:00, 28.85it/s] 50%|#####     | 13/26 [00:00<00:00, 31.33it/s] 65%|######5   | 17/26 [00:00<00:00, 32.11it/s] 81%|########  | 21/26 [00:00<00:00, 33.08it/s] 96%|#########6| 25/26 [00:00<00:00, 33.72it/s]100%|##########| 26/26 [00:00<00:00, 28.87it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 676 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 677 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 678 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 679 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 680 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 681 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 682 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 683 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 684 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 685 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 686 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 687 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 688 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 689 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 690 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 691 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 692 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 693 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 694 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 695 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 696 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 697 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 698 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 699 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 700 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 701 400
penalty weights 10000.0
Epoch: [26][  26/  26]	Loss 0.002 (0.002)	train_nll   0.25 (  0.28)	train_penalty   0.00 (  0.00)	weight_norm  24.25 ( 24.24)	train_acc   0.89 (  0.88)	train_minacc   0.88 (  0.84)	train_majacc   0.89 (  0.88)	train_corr   0.00 (  0.00)	l1 7.5447 (8.0031)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:05,  4.57it/s] 27%|##6       | 7/26 [00:00<00:00, 24.71it/s]                                               27%|##6       | 7/26 [00:00<00:00, 24.71it/s] 46%|####6     | 12/26 [00:00<00:00, 32.58it/s] 65%|######5   | 17/26 [00:00<00:00, 36.61it/s]                                                65%|######5   | 17/26 [00:00<00:00, 36.61it/s] 85%|########4 | 22/26 [00:00<00:00, 37.88it/s]100%|##########| 26/26 [00:00<00:00, 32.09it/s]
Test: [   0/  26]	Loss 0.283 (0.283)	test_acc   0.87 (  0.87)	test_minacc   0.76 (  0.76)	test_majacc   0.89 (  0.89)	Loss_d 0.283 (0.283)	test_acc_d   0.87 (  0.87)	test_minacc_d   0.76 (  0.76)	test_majacc_d   0.89 (  0.89)	test_corr_d   0.71 (  0.71)
Test: [  10/  26]	Loss 0.247 (0.243)	test_acc   0.90 (  0.90)	test_minacc   0.79 (  0.83)	test_majacc   0.92 (  0.91)	Loss_d 0.247 (0.243)	test_acc_d   0.90 (  0.90)	test_minacc_d   0.79 (  0.83)	test_majacc_d   0.92 (  0.91)	test_corr_d   0.76 (  0.73)
Test: [  20/  26]	Loss 0.272 (0.253)	test_acc   0.87 (  0.89)	test_minacc   0.77 (  0.81)	test_majacc   0.89 (  0.91)	Loss_d 0.272 (0.253)	test_acc_d   0.87 (  0.89)	test_minacc_d   0.77 (  0.81)	test_majacc_d   0.89 (  0.91)	test_corr_d   0.71 (  0.73)
Test: [  26/  26]	Loss 0.252 (0.257)	test_acc   0.88 (  0.89)	test_minacc   0.88 (  0.81)	test_majacc   0.88 (  0.90)	Loss_d 0.252 (0.257)	test_acc_d   0.88 (  0.89)	test_minacc_d   0.88 (  0.81)	test_majacc_d   0.88 (  0.90)	test_corr_d   0.71 (  0.73)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 60.91it/s]
Test: [  0/  1]	Loss 1.576 (1.576)	test_acc   0.53 (  0.53)	test_minacc   0.49 (  0.49)	test_majacc   0.85 (  0.85)	Loss_d 1.576 (1.576)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.49 (  0.49)	test_majacc_d   0.85 (  0.85)	test_corr_d   0.30 (  0.30)
Test: [  1/  1]	Loss 1.576 (1.576)	test_acc   0.53 (  0.53)	test_minacc   0.49 (  0.49)	test_majacc   0.85 (  0.85)	Loss_d 1.576 (1.576)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.49 (  0.49)	test_majacc_d   0.85 (  0.85)	test_corr_d   0.30 (  0.30)
Overall Timing[ 26/  1]	epoch_time 0.0408 (0.0428)	validation_time 0.0004 (0.0006)	train_time 0.0404 (0.0421)
record: (train_acc, test_acc) (0.8345000269412994, 0.6670000553131104)
last accs (train_acc, test_acc) (0.8872000255584717, 0.5260000228881836)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:02, 11.57it/s] 23%|##3       | 6/26 [00:00<00:00, 23.18it/s] 38%|###8      | 10/26 [00:00<00:00, 27.63it/s] 54%|#####3    | 14/26 [00:00<00:00, 30.33it/s] 69%|######9   | 18/26 [00:00<00:00, 31.92it/s] 85%|########4 | 22/26 [00:00<00:00, 33.36it/s]100%|##########| 26/26 [00:00<00:00, 34.37it/s]100%|##########| 26/26 [00:00<00:00, 28.64it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 702 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 703 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 704 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 705 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 706 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 707 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 708 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 709 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 710 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 711 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 712 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 713 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 714 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 715 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 716 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 717 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 718 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 719 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 720 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 721 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 722 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 723 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 724 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 725 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 726 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 727 400
penalty weights 10000.0
Epoch: [27][  26/  26]	Loss 0.000 (0.001)	train_nll   0.26 (  0.28)	train_penalty   0.00 (  0.00)	weight_norm  24.26 ( 24.26)	train_acc   0.90 (  0.87)	train_minacc   0.88 (  0.83)	train_majacc   0.90 (  0.88)	train_corr   0.00 (  0.00)	l1 7.8530 (8.0831)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 19.98it/s] 15%|#5        | 4/26 [00:00<00:01, 15.11it/s] 35%|###4      | 9/26 [00:00<00:00, 27.99it/s]                                               35%|###4      | 9/26 [00:00<00:00, 27.99it/s] 54%|#####3    | 14/26 [00:00<00:00, 34.74it/s] 73%|#######3  | 19/26 [00:00<00:00, 35.55it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 35.55it/s] 92%|#########2| 24/26 [00:00<00:00, 38.96it/s]100%|##########| 26/26 [00:00<00:00, 32.41it/s]
Test: [   0/  26]	Loss 0.282 (0.282)	test_acc   0.90 (  0.90)	test_minacc   0.82 (  0.82)	test_majacc   0.91 (  0.91)	Loss_d 0.282 (0.282)	test_acc_d   0.90 (  0.90)	test_minacc_d   0.82 (  0.82)	test_majacc_d   0.91 (  0.91)	test_corr_d   0.70 (  0.70)
Test: [  10/  26]	Loss 0.227 (0.244)	test_acc   0.92 (  0.90)	test_minacc   0.81 (  0.83)	test_majacc   0.93 (  0.92)	Loss_d 0.227 (0.244)	test_acc_d   0.92 (  0.90)	test_minacc_d   0.81 (  0.83)	test_majacc_d   0.93 (  0.92)	test_corr_d   0.77 (  0.73)
Test: [  20/  26]	Loss 0.263 (0.249)	test_acc   0.88 (  0.90)	test_minacc   0.84 (  0.82)	test_majacc   0.89 (  0.91)	Loss_d 0.263 (0.249)	test_acc_d   0.88 (  0.90)	test_minacc_d   0.84 (  0.82)	test_majacc_d   0.89 (  0.91)	test_corr_d   0.71 (  0.73)
Test: [  26/  26]	Loss 0.263 (0.253)	test_acc   0.90 (  0.90)	test_minacc   0.88 (  0.82)	test_majacc   0.90 (  0.91)	Loss_d 0.263 (0.253)	test_acc_d   0.90 (  0.90)	test_minacc_d   0.88 (  0.82)	test_majacc_d   0.90 (  0.91)	test_corr_d   0.70 (  0.73)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 65.06it/s]
Test: [  0/  1]	Loss 1.595 (1.595)	test_acc   0.54 (  0.54)	test_minacc   0.50 (  0.50)	test_majacc   0.88 (  0.88)	Loss_d 1.595 (1.595)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.88 (  0.88)	test_corr_d   0.27 (  0.27)
Test: [  1/  1]	Loss 1.595 (1.595)	test_acc   0.54 (  0.54)	test_minacc   0.50 (  0.50)	test_majacc   0.88 (  0.88)	Loss_d 1.595 (1.595)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.88 (  0.88)	test_corr_d   0.27 (  0.27)
Overall Timing[ 27/  1]	epoch_time 0.0436 (0.0428)	validation_time 0.0004 (0.0006)	train_time 0.0432 (0.0421)
record: (train_acc, test_acc) (0.8345000269412994, 0.6670000553131104)
last accs (train_acc, test_acc) (0.8958000206947326, 0.5350000262260437)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.72it/s] 19%|#9        | 5/26 [00:00<00:00, 22.32it/s] 35%|###4      | 9/26 [00:00<00:00, 26.91it/s] 50%|#####     | 13/26 [00:00<00:00, 29.25it/s] 65%|######5   | 17/26 [00:00<00:00, 31.19it/s] 81%|########  | 21/26 [00:00<00:00, 31.99it/s] 96%|#########6| 25/26 [00:00<00:00, 33.86it/s]100%|##########| 26/26 [00:00<00:00, 28.40it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 728 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 729 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 730 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 731 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 732 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 733 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 734 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 735 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 736 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 737 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 738 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 739 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 740 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 741 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 742 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 743 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 744 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 745 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 746 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 747 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 748 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 749 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 750 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 751 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 752 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 753 400
penalty weights 10000.0
Epoch: [28][  26/  26]	Loss 0.000 (0.001)	train_nll   0.29 (  0.28)	train_penalty   0.00 (  0.00)	weight_norm  24.28 ( 24.27)	train_acc   0.88 (  0.88)	train_minacc   0.85 (  0.82)	train_majacc   0.88 (  0.89)	train_corr   0.00 (  0.00)	l1 7.8708 (8.0444)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:07,  3.31it/s] 23%|##3       | 6/26 [00:00<00:01, 18.20it/s]                                               23%|##3       | 6/26 [00:00<00:01, 18.20it/s] 42%|####2     | 11/26 [00:00<00:00, 27.55it/s] 65%|######5   | 17/26 [00:00<00:00, 34.67it/s]                                                65%|######5   | 17/26 [00:00<00:00, 34.67it/s] 88%|########8 | 23/26 [00:00<00:00, 39.45it/s]100%|##########| 26/26 [00:00<00:00, 29.51it/s]
Test: [   0/  26]	Loss 0.312 (0.312)	test_acc   0.85 (  0.85)	test_minacc   0.82 (  0.82)	test_majacc   0.86 (  0.86)	Loss_d 0.312 (0.312)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.82 (  0.82)	test_majacc_d   0.86 (  0.86)	test_corr_d   0.65 (  0.65)
Test: [  10/  26]	Loss 0.254 (0.283)	test_acc   0.91 (  0.87)	test_minacc   0.88 (  0.85)	test_majacc   0.91 (  0.87)	Loss_d 0.254 (0.283)	test_acc_d   0.91 (  0.87)	test_minacc_d   0.88 (  0.85)	test_majacc_d   0.91 (  0.87)	test_corr_d   0.72 (  0.68)
Test: [  20/  26]	Loss 0.294 (0.274)	test_acc   0.86 (  0.87)	test_minacc   0.81 (  0.85)	test_majacc   0.87 (  0.88)	Loss_d 0.294 (0.274)	test_acc_d   0.86 (  0.87)	test_minacc_d   0.81 (  0.85)	test_majacc_d   0.87 (  0.88)	test_corr_d   0.66 (  0.68)
Test: [  26/  26]	Loss 0.291 (0.279)	test_acc   0.88 (  0.87)	test_minacc   0.85 (  0.85)	test_majacc   0.88 (  0.88)	Loss_d 0.291 (0.279)	test_acc_d   0.88 (  0.87)	test_minacc_d   0.85 (  0.85)	test_majacc_d   0.88 (  0.88)	test_corr_d   0.68 (  0.68)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.60it/s]
Test: [  0/  1]	Loss 1.571 (1.571)	test_acc   0.60 (  0.60)	test_minacc   0.57 (  0.57)	test_majacc   0.88 (  0.88)	Loss_d 1.571 (1.571)	test_acc_d   0.60 (  0.60)	test_minacc_d   0.57 (  0.57)	test_majacc_d   0.88 (  0.88)	test_corr_d   0.16 (  0.16)
Test: [  1/  1]	Loss 1.571 (1.571)	test_acc   0.60 (  0.60)	test_minacc   0.57 (  0.57)	test_majacc   0.88 (  0.88)	Loss_d 1.571 (1.571)	test_acc_d   0.60 (  0.60)	test_minacc_d   0.57 (  0.57)	test_majacc_d   0.88 (  0.88)	test_corr_d   0.16 (  0.16)
Overall Timing[ 28/  1]	epoch_time 0.0412 (0.0428)	validation_time 0.0004 (0.0006)	train_time 0.0408 (0.0421)
record: (train_acc, test_acc) (0.8345000269412994, 0.6670000553131104)
last accs (train_acc, test_acc) (0.8718000283837318, 0.597000002861023)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 15.82it/s] 23%|##3       | 6/26 [00:00<00:00, 26.09it/s] 38%|###8      | 10/26 [00:00<00:00, 29.53it/s] 54%|#####3    | 14/26 [00:00<00:00, 30.63it/s] 69%|######9   | 18/26 [00:00<00:00, 31.71it/s] 85%|########4 | 22/26 [00:00<00:00, 32.57it/s]100%|##########| 26/26 [00:00<00:00, 33.44it/s]100%|##########| 26/26 [00:00<00:00, 28.75it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 754 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 755 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 756 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 757 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 758 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 759 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 760 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 761 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 762 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 763 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 764 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 765 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 766 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 767 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 768 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 769 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 770 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 771 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 772 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 773 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 774 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 775 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 776 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 777 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 778 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 779 400
penalty weights 10000.0
Epoch: [29][  26/  26]	Loss 0.000 (0.001)	train_nll   0.27 (  0.31)	train_penalty   0.00 (  0.00)	weight_norm  24.28 ( 24.28)	train_acc   0.88 (  0.85)	train_minacc   0.91 (  0.83)	train_majacc   0.87 (  0.86)	train_corr   0.00 (  0.00)	l1 7.6134 (7.7945)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.38it/s] 23%|##3       | 6/26 [00:00<00:00, 31.83it/s]                                               23%|##3       | 6/26 [00:00<00:00, 31.83it/s] 42%|####2     | 11/26 [00:00<00:00, 38.48it/s] 62%|######1   | 16/26 [00:00<00:00, 41.04it/s]                                                62%|######1   | 16/26 [00:00<00:00, 41.04it/s] 81%|########  | 21/26 [00:00<00:00, 39.33it/s]100%|##########| 26/26 [00:00<00:00, 42.04it/s]100%|##########| 26/26 [00:00<00:00, 35.87it/s]
Test: [   0/  26]	Loss 0.303 (0.303)	test_acc   0.86 (  0.86)	test_minacc   0.87 (  0.87)	test_majacc   0.86 (  0.86)	Loss_d 0.303 (0.303)	test_acc_d   0.86 (  0.86)	test_minacc_d   0.87 (  0.87)	test_majacc_d   0.86 (  0.86)	test_corr_d   0.64 (  0.64)
Test: [  10/  26]	Loss 0.254 (0.281)	test_acc   0.89 (  0.87)	test_minacc   0.82 (  0.84)	test_majacc   0.90 (  0.87)	Loss_d 0.254 (0.281)	test_acc_d   0.89 (  0.87)	test_minacc_d   0.82 (  0.84)	test_majacc_d   0.90 (  0.87)	test_corr_d   0.72 (  0.67)
Test: [  20/  26]	Loss 0.286 (0.267)	test_acc   0.87 (  0.88)	test_minacc   0.84 (  0.86)	test_majacc   0.87 (  0.88)	Loss_d 0.286 (0.267)	test_acc_d   0.87 (  0.88)	test_minacc_d   0.84 (  0.86)	test_majacc_d   0.87 (  0.88)	test_corr_d   0.66 (  0.68)
Test: [  26/  26]	Loss 0.275 (0.272)	test_acc   0.88 (  0.88)	test_minacc   0.91 (  0.85)	test_majacc   0.88 (  0.88)	Loss_d 0.275 (0.272)	test_acc_d   0.88 (  0.88)	test_minacc_d   0.91 (  0.85)	test_majacc_d   0.88 (  0.88)	test_corr_d   0.67 (  0.68)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.48it/s]
Test: [  0/  1]	Loss 1.433 (1.433)	test_acc   0.60 (  0.60)	test_minacc   0.57 (  0.57)	test_majacc   0.87 (  0.87)	Loss_d 1.433 (1.433)	test_acc_d   0.60 (  0.60)	test_minacc_d   0.57 (  0.57)	test_majacc_d   0.87 (  0.87)	test_corr_d   0.14 (  0.14)
Test: [  1/  1]	Loss 1.433 (1.433)	test_acc   0.60 (  0.60)	test_minacc   0.57 (  0.57)	test_majacc   0.87 (  0.87)	Loss_d 1.433 (1.433)	test_acc_d   0.60 (  0.60)	test_minacc_d   0.57 (  0.57)	test_majacc_d   0.87 (  0.87)	test_corr_d   0.14 (  0.14)
Overall Timing[ 29/  1]	epoch_time 0.0408 (0.0427)	validation_time 0.0004 (0.0006)	train_time 0.0404 (0.0420)
record: (train_acc, test_acc) (0.8345000269412994, 0.6670000553131104)
last accs (train_acc, test_acc) (0.8750000202655792, 0.6030000448226929)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:08,  2.86it/s] 19%|#9        | 5/26 [00:00<00:01, 13.01it/s] 35%|###4      | 9/26 [00:00<00:00, 20.01it/s] 50%|#####     | 13/26 [00:00<00:00, 24.72it/s] 65%|######5   | 17/26 [00:00<00:00, 27.86it/s] 81%|########  | 21/26 [00:00<00:00, 30.19it/s] 96%|#########6| 25/26 [00:01<00:00, 31.16it/s]100%|##########| 26/26 [00:01<00:00, 23.21it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 780 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 781 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 782 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 783 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 784 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 785 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 786 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 787 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 788 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 789 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 790 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 791 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 792 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 793 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 794 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 795 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 796 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 797 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 798 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 799 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 800 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 801 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 802 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 803 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 804 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 805 400
penalty weights 10000.0
Epoch: [30][  26/  26]	Loss 0.000 (0.001)	train_nll   0.26 (  0.29)	train_penalty   0.00 (  0.00)	weight_norm  24.29 ( 24.29)	train_acc   0.88 (  0.87)	train_minacc   0.85 (  0.85)	train_majacc   0.89 (  0.87)	train_corr   0.00 (  0.00)	l1 7.6351 (8.0018)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.01it/s] 23%|##3       | 6/26 [00:00<00:00, 30.54it/s]                                               23%|##3       | 6/26 [00:00<00:00, 30.54it/s] 42%|####2     | 11/26 [00:00<00:00, 34.36it/s] 62%|######1   | 16/26 [00:00<00:00, 38.42it/s]                                                62%|######1   | 16/26 [00:00<00:00, 38.42it/s] 81%|########  | 21/26 [00:00<00:00, 41.04it/s]100%|##########| 26/26 [00:00<00:00, 43.48it/s]100%|##########| 26/26 [00:00<00:00, 34.96it/s]
Test: [   0/  26]	Loss 0.297 (0.297)	test_acc   0.86 (  0.86)	test_minacc   0.82 (  0.82)	test_majacc   0.87 (  0.87)	Loss_d 0.297 (0.297)	test_acc_d   0.86 (  0.86)	test_minacc_d   0.82 (  0.82)	test_majacc_d   0.87 (  0.87)	test_corr_d   0.69 (  0.69)
Test: [  10/  26]	Loss 0.250 (0.275)	test_acc   0.89 (  0.87)	test_minacc   0.81 (  0.80)	test_majacc   0.90 (  0.88)	Loss_d 0.250 (0.275)	test_acc_d   0.89 (  0.87)	test_minacc_d   0.81 (  0.80)	test_majacc_d   0.90 (  0.88)	test_corr_d   0.75 (  0.71)
Test: [  20/  26]	Loss 0.262 (0.259)	test_acc   0.87 (  0.88)	test_minacc   0.81 (  0.82)	test_majacc   0.88 (  0.89)	Loss_d 0.262 (0.259)	test_acc_d   0.87 (  0.88)	test_minacc_d   0.81 (  0.82)	test_majacc_d   0.88 (  0.89)	test_corr_d   0.70 (  0.72)
Test: [  26/  26]	Loss 0.260 (0.262)	test_acc   0.88 (  0.88)	test_minacc   0.82 (  0.82)	test_majacc   0.89 (  0.89)	Loss_d 0.260 (0.262)	test_acc_d   0.88 (  0.88)	test_minacc_d   0.82 (  0.82)	test_majacc_d   0.89 (  0.89)	test_corr_d   0.73 (  0.72)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.92it/s]
Test: [  0/  1]	Loss 1.594 (1.594)	test_acc   0.54 (  0.54)	test_minacc   0.51 (  0.51)	test_majacc   0.88 (  0.88)	Loss_d 1.594 (1.594)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.88 (  0.88)	test_corr_d   0.29 (  0.29)
Test: [  1/  1]	Loss 1.594 (1.594)	test_acc   0.54 (  0.54)	test_minacc   0.51 (  0.51)	test_majacc   0.88 (  0.88)	Loss_d 1.594 (1.594)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.88 (  0.88)	test_corr_d   0.29 (  0.29)
Overall Timing[ 30/  1]	epoch_time 0.0413 (0.0427)	validation_time 0.0003 (0.0006)	train_time 0.0410 (0.0420)
record: (train_acc, test_acc) (0.8345000269412994, 0.6670000553131104)
last accs (train_acc, test_acc) (0.8802000213265418, 0.5440000295639038)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.48it/s] 19%|#9        | 5/26 [00:00<00:00, 24.93it/s] 35%|###4      | 9/26 [00:00<00:00, 29.38it/s] 50%|#####     | 13/26 [00:00<00:00, 30.57it/s] 65%|######5   | 17/26 [00:00<00:00, 31.47it/s] 81%|########  | 21/26 [00:00<00:00, 32.12it/s] 96%|#########6| 25/26 [00:00<00:00, 32.92it/s]100%|##########| 26/26 [00:00<00:00, 28.53it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 806 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 807 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 808 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 809 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 810 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 811 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 812 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 813 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 814 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 815 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 816 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 817 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 818 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 819 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 820 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 821 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 822 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 823 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 824 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 825 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 826 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 827 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 828 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 829 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 830 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 831 400
penalty weights 10000.0
Epoch: [31][  26/  26]	Loss 0.000 (0.001)	train_nll   0.31 (  0.31)	train_penalty   0.00 (  0.00)	weight_norm  24.32 ( 24.31)	train_acc   0.87 (  0.84)	train_minacc   0.85 (  0.82)	train_majacc   0.87 (  0.85)	train_corr   0.00 (  0.00)	l1 7.6196 (7.6412)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.87it/s]  8%|7         | 2/26 [00:00<00:05,  4.57it/s] 27%|##6       | 7/26 [00:00<00:01, 16.66it/s]                                               27%|##6       | 7/26 [00:00<00:01, 16.66it/s] 46%|####6     | 12/26 [00:00<00:00, 25.39it/s] 65%|######5   | 17/26 [00:00<00:00, 31.45it/s]                                                65%|######5   | 17/26 [00:00<00:00, 31.45it/s] 85%|########4 | 22/26 [00:00<00:00, 33.36it/s]100%|##########| 26/26 [00:00<00:00, 26.07it/s]
Test: [   0/  26]	Loss 0.345 (0.345)	test_acc   0.82 (  0.82)	test_minacc   0.84 (  0.84)	test_majacc   0.82 (  0.82)	Loss_d 0.345 (0.345)	test_acc_d   0.82 (  0.82)	test_minacc_d   0.84 (  0.84)	test_majacc_d   0.82 (  0.82)	test_corr_d   0.60 (  0.60)
Test: [  10/  26]	Loss 0.291 (0.328)	test_acc   0.86 (  0.83)	test_minacc   0.86 (  0.83)	test_majacc   0.86 (  0.83)	Loss_d 0.291 (0.328)	test_acc_d   0.86 (  0.83)	test_minacc_d   0.86 (  0.83)	test_majacc_d   0.86 (  0.83)	test_corr_d   0.67 (  0.62)
Test: [  20/  26]	Loss 0.296 (0.304)	test_acc   0.86 (  0.85)	test_minacc   0.89 (  0.86)	test_majacc   0.85 (  0.85)	Loss_d 0.296 (0.304)	test_acc_d   0.86 (  0.85)	test_minacc_d   0.89 (  0.86)	test_majacc_d   0.85 (  0.85)	test_corr_d   0.62 (  0.63)
Test: [  26/  26]	Loss 0.303 (0.306)	test_acc   0.86 (  0.85)	test_minacc   0.85 (  0.86)	test_majacc   0.87 (  0.85)	Loss_d 0.303 (0.306)	test_acc_d   0.86 (  0.85)	test_minacc_d   0.85 (  0.86)	test_majacc_d   0.87 (  0.85)	test_corr_d   0.66 (  0.64)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 58.97it/s]
Test: [  0/  1]	Loss 1.437 (1.437)	test_acc   0.61 (  0.61)	test_minacc   0.59 (  0.59)	test_majacc   0.78 (  0.78)	Loss_d 1.437 (1.437)	test_acc_d   0.61 (  0.61)	test_minacc_d   0.59 (  0.59)	test_majacc_d   0.78 (  0.78)	test_corr_d   0.10 (  0.10)
Test: [  1/  1]	Loss 1.437 (1.437)	test_acc   0.61 (  0.61)	test_minacc   0.59 (  0.59)	test_majacc   0.78 (  0.78)	Loss_d 1.437 (1.437)	test_acc_d   0.61 (  0.61)	test_minacc_d   0.59 (  0.59)	test_majacc_d   0.78 (  0.78)	test_corr_d   0.10 (  0.10)
Overall Timing[ 31/  1]	epoch_time 0.0470 (0.0428)	validation_time 0.0004 (0.0006)	train_time 0.0466 (0.0421)
record: (train_acc, test_acc) (0.8345000269412994, 0.6670000553131104)
last accs (train_acc, test_acc) (0.8477000245451927, 0.609000027179718)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:06,  3.87it/s] 19%|#9        | 5/26 [00:00<00:01, 16.00it/s] 31%|###       | 8/26 [00:00<00:00, 19.96it/s] 46%|####6     | 12/26 [00:00<00:00, 24.15it/s] 62%|######1   | 16/26 [00:00<00:00, 27.60it/s] 77%|#######6  | 20/26 [00:00<00:00, 29.88it/s] 92%|#########2| 24/26 [00:00<00:00, 31.59it/s]100%|##########| 26/26 [00:01<00:00, 24.44it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 832 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 833 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 834 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 835 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 836 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 837 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 838 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 839 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 840 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 841 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 842 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 843 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 844 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 845 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 846 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 847 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 848 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 849 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 850 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 851 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 852 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 853 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 854 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 855 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 856 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 857 400
penalty weights 10000.0
Epoch: [32][  26/  26]	Loss 0.001 (0.001)	train_nll   0.30 (  0.31)	train_penalty   0.00 (  0.00)	weight_norm  24.33 ( 24.32)	train_acc   0.87 (  0.85)	train_minacc   0.82 (  0.85)	train_majacc   0.88 (  0.84)	train_corr   0.00 (  0.00)	l1 7.8916 (7.8228)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  6.05it/s] 23%|##3       | 6/26 [00:00<00:00, 26.32it/s]                                               23%|##3       | 6/26 [00:00<00:00, 26.32it/s] 42%|####2     | 11/26 [00:00<00:00, 35.14it/s] 62%|######1   | 16/26 [00:00<00:00, 39.54it/s]                                                62%|######1   | 16/26 [00:00<00:00, 39.54it/s] 81%|########  | 21/26 [00:00<00:00, 39.26it/s]100%|##########| 26/26 [00:00<00:00, 42.12it/s]100%|##########| 26/26 [00:00<00:00, 33.62it/s]
Test: [   0/  26]	Loss 0.312 (0.312)	test_acc   0.86 (  0.86)	test_minacc   0.84 (  0.84)	test_majacc   0.86 (  0.86)	Loss_d 0.312 (0.312)	test_acc_d   0.86 (  0.86)	test_minacc_d   0.84 (  0.84)	test_majacc_d   0.86 (  0.86)	test_corr_d   0.64 (  0.64)
Test: [  10/  26]	Loss 0.303 (0.321)	test_acc   0.86 (  0.85)	test_minacc   0.79 (  0.80)	test_majacc   0.88 (  0.85)	Loss_d 0.303 (0.321)	test_acc_d   0.86 (  0.85)	test_minacc_d   0.79 (  0.80)	test_majacc_d   0.88 (  0.85)	test_corr_d   0.68 (  0.65)
Test: [  20/  26]	Loss 0.258 (0.297)	test_acc   0.87 (  0.86)	test_minacc   0.85 (  0.84)	test_majacc   0.87 (  0.87)	Loss_d 0.258 (0.297)	test_acc_d   0.87 (  0.86)	test_minacc_d   0.85 (  0.84)	test_majacc_d   0.87 (  0.87)	test_corr_d   0.67 (  0.66)
Test: [  26/  26]	Loss 0.292 (0.295)	test_acc   0.88 (  0.86)	test_minacc   0.82 (  0.84)	test_majacc   0.88 (  0.87)	Loss_d 0.292 (0.295)	test_acc_d   0.88 (  0.86)	test_minacc_d   0.82 (  0.84)	test_majacc_d   0.88 (  0.87)	test_corr_d   0.68 (  0.66)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 60.60it/s]
Test: [  0/  1]	Loss 1.522 (1.522)	test_acc   0.59 (  0.59)	test_minacc   0.56 (  0.56)	test_majacc   0.85 (  0.85)	Loss_d 1.522 (1.522)	test_acc_d   0.59 (  0.59)	test_minacc_d   0.56 (  0.56)	test_majacc_d   0.85 (  0.85)	test_corr_d   0.15 (  0.15)
Test: [  1/  1]	Loss 1.522 (1.522)	test_acc   0.59 (  0.59)	test_minacc   0.56 (  0.56)	test_majacc   0.85 (  0.85)	Loss_d 1.522 (1.522)	test_acc_d   0.59 (  0.59)	test_minacc_d   0.56 (  0.56)	test_majacc_d   0.85 (  0.85)	test_corr_d   0.15 (  0.15)
Overall Timing[ 32/  1]	epoch_time 0.0436 (0.0428)	validation_time 0.0004 (0.0006)	train_time 0.0431 (0.0422)
record: (train_acc, test_acc) (0.8345000269412994, 0.6670000553131104)
last accs (train_acc, test_acc) (0.8626000242829323, 0.593000054359436)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.12it/s] 19%|#9        | 5/26 [00:00<00:00, 21.53it/s] 35%|###4      | 9/26 [00:00<00:00, 27.32it/s] 50%|#####     | 13/26 [00:00<00:00, 30.00it/s] 65%|######5   | 17/26 [00:00<00:00, 31.38it/s] 81%|########  | 21/26 [00:00<00:00, 32.66it/s] 96%|#########6| 25/26 [00:00<00:00, 33.09it/s]100%|##########| 26/26 [00:00<00:00, 27.76it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 858 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 859 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 860 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 861 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 862 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 863 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 864 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 865 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 866 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 867 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 868 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 869 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 870 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 871 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 872 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 873 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 874 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 875 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 876 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 877 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 878 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 879 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 880 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 881 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 882 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 883 400
penalty weights 10000.0
Epoch: [33][  26/  26]	Loss 0.001 (0.001)	train_nll   0.32 (  0.32)	train_penalty   0.00 (  0.00)	weight_norm  24.34 ( 24.34)	train_acc   0.87 (  0.85)	train_minacc   0.85 (  0.78)	train_majacc   0.87 (  0.86)	train_corr   0.00 (  0.00)	l1 7.5413 (7.4585)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  6.10it/s] 15%|#5        | 4/26 [00:00<00:01, 16.41it/s] 35%|###4      | 9/26 [00:00<00:00, 28.50it/s]                                               35%|###4      | 9/26 [00:00<00:00, 28.50it/s] 54%|#####3    | 14/26 [00:00<00:00, 35.29it/s] 73%|#######3  | 19/26 [00:00<00:00, 36.06it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 36.06it/s] 92%|#########2| 24/26 [00:00<00:00, 39.63it/s]100%|##########| 26/26 [00:00<00:00, 31.92it/s]
Test: [   0/  26]	Loss 0.317 (0.317)	test_acc   0.87 (  0.87)	test_minacc   0.78 (  0.78)	test_majacc   0.89 (  0.89)	Loss_d 0.317 (0.317)	test_acc_d   0.87 (  0.87)	test_minacc_d   0.78 (  0.78)	test_majacc_d   0.89 (  0.89)	test_corr_d   0.65 (  0.65)
Test: [  10/  26]	Loss 0.366 (0.344)	test_acc   0.82 (  0.84)	test_minacc   0.72 (  0.76)	test_majacc   0.84 (  0.86)	Loss_d 0.366 (0.344)	test_acc_d   0.82 (  0.84)	test_minacc_d   0.72 (  0.76)	test_majacc_d   0.84 (  0.86)	test_corr_d   0.65 (  0.64)
Test: [  20/  26]	Loss 0.306 (0.331)	test_acc   0.87 (  0.85)	test_minacc   0.85 (  0.78)	test_majacc   0.88 (  0.86)	Loss_d 0.306 (0.331)	test_acc_d   0.87 (  0.85)	test_minacc_d   0.85 (  0.78)	test_majacc_d   0.88 (  0.86)	test_corr_d   0.65 (  0.65)
Test: [  26/  26]	Loss 0.315 (0.327)	test_acc   0.87 (  0.85)	test_minacc   0.85 (  0.78)	test_majacc   0.87 (  0.86)	Loss_d 0.315 (0.327)	test_acc_d   0.87 (  0.85)	test_minacc_d   0.85 (  0.78)	test_majacc_d   0.87 (  0.86)	test_corr_d   0.65 (  0.65)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.01it/s]
Test: [  0/  1]	Loss 1.388 (1.388)	test_acc   0.56 (  0.56)	test_minacc   0.53 (  0.53)	test_majacc   0.85 (  0.85)	Loss_d 1.388 (1.388)	test_acc_d   0.56 (  0.56)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.85 (  0.85)	test_corr_d   0.14 (  0.14)
Test: [  1/  1]	Loss 1.388 (1.388)	test_acc   0.56 (  0.56)	test_minacc   0.53 (  0.53)	test_majacc   0.85 (  0.85)	Loss_d 1.388 (1.388)	test_acc_d   0.56 (  0.56)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.85 (  0.85)	test_corr_d   0.14 (  0.14)
Overall Timing[ 33/  1]	epoch_time 0.0467 (0.0429)	validation_time 0.0004 (0.0006)	train_time 0.0463 (0.0423)
record: (train_acc, test_acc) (0.8345000269412994, 0.6670000553131104)
last accs (train_acc, test_acc) (0.8520000221729278, 0.5610000491142273)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.17it/s] 12%|#1        | 3/26 [00:00<00:02, 10.61it/s] 27%|##6       | 7/26 [00:00<00:00, 20.20it/s] 42%|####2     | 11/26 [00:00<00:00, 25.85it/s] 58%|#####7    | 15/26 [00:00<00:00, 29.24it/s] 73%|#######3  | 19/26 [00:00<00:00, 31.56it/s] 88%|########8 | 23/26 [00:00<00:00, 33.23it/s]100%|##########| 26/26 [00:00<00:00, 26.02it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 884 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 885 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 886 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 887 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 888 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 889 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 890 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 891 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 892 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 893 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 894 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 895 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 896 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 897 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 898 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 899 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 900 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 901 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 902 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 903 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 904 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 905 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 906 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 907 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 908 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 909 400
penalty weights 10000.0
Epoch: [34][  26/  26]	Loss 0.000 (0.001)	train_nll   0.30 (  0.31)	train_penalty   0.00 (  0.00)	weight_norm  24.35 ( 24.35)	train_acc   0.86 (  0.86)	train_minacc   0.85 (  0.82)	train_majacc   0.87 (  0.86)	train_corr   0.00 (  0.00)	l1 7.9697 (7.6583)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:08,  2.80it/s] 23%|##3       | 6/26 [00:00<00:01, 16.17it/s]                                               23%|##3       | 6/26 [00:00<00:01, 16.17it/s] 42%|####2     | 11/26 [00:00<00:00, 24.83it/s] 58%|#####7    | 15/26 [00:00<00:00, 27.16it/s]                                                58%|#####7    | 15/26 [00:00<00:00, 27.16it/s] 81%|########  | 21/26 [00:00<00:00, 32.34it/s]100%|##########| 26/26 [00:00<00:00, 36.39it/s]100%|##########| 26/26 [00:01<00:00, 25.73it/s]
Test: [   0/  26]	Loss 0.301 (0.301)	test_acc   0.87 (  0.87)	test_minacc   0.85 (  0.85)	test_majacc   0.87 (  0.87)	Loss_d 0.301 (0.301)	test_acc_d   0.87 (  0.87)	test_minacc_d   0.85 (  0.85)	test_majacc_d   0.87 (  0.87)	test_corr_d   0.63 (  0.63)
Test: [  10/  26]	Loss 0.344 (0.336)	test_acc   0.83 (  0.84)	test_minacc   0.77 (  0.80)	test_majacc   0.84 (  0.85)	Loss_d 0.344 (0.336)	test_acc_d   0.83 (  0.84)	test_minacc_d   0.77 (  0.80)	test_majacc_d   0.84 (  0.85)	test_corr_d   0.65 (  0.63)
Test: [  20/  26]	Loss 0.271 (0.318)	test_acc   0.89 (  0.85)	test_minacc   0.89 (  0.83)	test_majacc   0.89 (  0.86)	Loss_d 0.271 (0.318)	test_acc_d   0.89 (  0.85)	test_minacc_d   0.89 (  0.83)	test_majacc_d   0.89 (  0.86)	test_corr_d   0.65 (  0.64)
Test: [  26/  26]	Loss 0.294 (0.311)	test_acc   0.88 (  0.86)	test_minacc   0.88 (  0.83)	test_majacc   0.88 (  0.86)	Loss_d 0.294 (0.311)	test_acc_d   0.88 (  0.86)	test_minacc_d   0.88 (  0.83)	test_majacc_d   0.88 (  0.86)	test_corr_d   0.66 (  0.64)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.32it/s]
Test: [  0/  1]	Loss 1.488 (1.488)	test_acc   0.60 (  0.60)	test_minacc   0.57 (  0.57)	test_majacc   0.85 (  0.85)	Loss_d 1.488 (1.488)	test_acc_d   0.60 (  0.60)	test_minacc_d   0.57 (  0.57)	test_majacc_d   0.85 (  0.85)	test_corr_d   0.10 (  0.10)
Test: [  1/  1]	Loss 1.488 (1.488)	test_acc   0.60 (  0.60)	test_minacc   0.57 (  0.57)	test_majacc   0.85 (  0.85)	Loss_d 1.488 (1.488)	test_acc_d   0.60 (  0.60)	test_minacc_d   0.57 (  0.57)	test_majacc_d   0.85 (  0.85)	test_corr_d   0.10 (  0.10)
Overall Timing[ 34/  1]	epoch_time 0.0435 (0.0430)	validation_time 0.0004 (0.0006)	train_time 0.0431 (0.0423)
record: (train_acc, test_acc) (0.8345000269412994, 0.6670000553131104)
last accs (train_acc, test_acc) (0.8583000237941742, 0.597000002861023)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.81it/s] 15%|#5        | 4/26 [00:00<00:01, 17.96it/s] 31%|###       | 8/26 [00:00<00:00, 24.71it/s] 46%|####6     | 12/26 [00:00<00:00, 28.15it/s] 62%|######1   | 16/26 [00:00<00:00, 30.17it/s] 77%|#######6  | 20/26 [00:00<00:00, 31.78it/s] 92%|#########2| 24/26 [00:00<00:00, 32.68it/s]100%|##########| 26/26 [00:00<00:00, 27.31it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 910 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 911 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 912 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 913 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 914 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 915 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 916 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 917 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 918 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 919 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 920 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 921 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 922 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 923 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 924 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 925 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 926 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 927 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 928 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 929 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 930 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 931 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 932 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 933 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 934 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 935 400
penalty weights 10000.0
Epoch: [35][  26/  26]	Loss 0.005 (0.001)	train_nll   0.31 (  0.29)	train_penalty   0.00 (  0.00)	weight_norm  24.37 ( 24.36)	train_acc   0.86 (  0.86)	train_minacc   0.88 (  0.86)	train_majacc   0.86 (  0.86)	train_corr   0.00 (  0.00)	l1 8.6431 (7.8907)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 12.44it/s] 27%|##6       | 7/26 [00:00<00:00, 28.88it/s]                                               27%|##6       | 7/26 [00:00<00:00, 28.88it/s] 46%|####6     | 12/26 [00:00<00:00, 36.10it/s] 65%|######5   | 17/26 [00:00<00:00, 40.09it/s]                                                65%|######5   | 17/26 [00:00<00:00, 40.09it/s] 85%|########4 | 22/26 [00:00<00:00, 40.96it/s]100%|##########| 26/26 [00:00<00:00, 34.51it/s]
Test: [   0/  26]	Loss 0.331 (0.331)	test_acc   0.85 (  0.85)	test_minacc   0.90 (  0.90)	test_majacc   0.84 (  0.84)	Loss_d 0.331 (0.331)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.90 (  0.90)	test_majacc_d   0.84 (  0.84)	test_corr_d   0.56 (  0.56)
Test: [  10/  26]	Loss 0.345 (0.356)	test_acc   0.85 (  0.83)	test_minacc   0.88 (  0.84)	test_majacc   0.85 (  0.83)	Loss_d 0.345 (0.356)	test_acc_d   0.85 (  0.83)	test_minacc_d   0.88 (  0.84)	test_majacc_d   0.85 (  0.83)	test_corr_d   0.60 (  0.58)
Test: [  20/  26]	Loss 0.282 (0.343)	test_acc   0.86 (  0.83)	test_minacc   0.85 (  0.85)	test_majacc   0.86 (  0.83)	Loss_d 0.282 (0.343)	test_acc_d   0.86 (  0.83)	test_minacc_d   0.85 (  0.85)	test_majacc_d   0.86 (  0.83)	test_corr_d   0.60 (  0.58)
Test: [  26/  26]	Loss 0.293 (0.334)	test_acc   0.87 (  0.84)	test_minacc   0.88 (  0.86)	test_majacc   0.87 (  0.83)	Loss_d 0.293 (0.334)	test_acc_d   0.87 (  0.84)	test_minacc_d   0.88 (  0.86)	test_majacc_d   0.87 (  0.83)	test_corr_d   0.64 (  0.59)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.17it/s]
Test: [  0/  1]	Loss 1.620 (1.620)	test_acc   0.64 (  0.64)	test_minacc   0.62 (  0.62)	test_majacc   0.81 (  0.81)	Loss_d 1.620 (1.620)	test_acc_d   0.64 (  0.64)	test_minacc_d   0.62 (  0.62)	test_majacc_d   0.81 (  0.81)	test_corr_d  -0.03 ( -0.03)
Test: [  1/  1]	Loss 1.620 (1.620)	test_acc   0.64 (  0.64)	test_minacc   0.62 (  0.62)	test_majacc   0.81 (  0.81)	Loss_d 1.620 (1.620)	test_acc_d   0.64 (  0.64)	test_minacc_d   0.62 (  0.62)	test_majacc_d   0.81 (  0.81)	test_corr_d  -0.03 ( -0.03)
Overall Timing[ 35/  1]	epoch_time 0.0408 (0.0429)	validation_time 0.0004 (0.0006)	train_time 0.0404 (0.0423)
record: (train_acc, test_acc) (0.8345000269412994, 0.6670000553131104)
last accs (train_acc, test_acc) (0.8379000288248062, 0.6370000243186951)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  6.06it/s]  8%|7         | 2/26 [00:00<00:03,  7.69it/s] 23%|##3       | 6/26 [00:00<00:01, 19.70it/s] 38%|###8      | 10/26 [00:00<00:00, 26.11it/s] 54%|#####3    | 14/26 [00:00<00:00, 30.01it/s] 69%|######9   | 18/26 [00:00<00:00, 32.11it/s] 85%|########4 | 22/26 [00:00<00:00, 33.20it/s]100%|##########| 26/26 [00:00<00:00, 34.07it/s]100%|##########| 26/26 [00:00<00:00, 26.36it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 936 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 937 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 938 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 939 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 940 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 941 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 942 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 943 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 944 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 945 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 946 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 947 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 948 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 949 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 950 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 951 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 952 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 953 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 954 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 955 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 956 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 957 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 958 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 959 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 960 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 961 400
penalty weights 10000.0
Epoch: [36][  26/  26]	Loss 0.000 (0.001)	train_nll   0.32 (  0.31)	train_penalty   0.00 (  0.00)	weight_norm  24.39 ( 24.38)	train_acc   0.84 (  0.85)	train_minacc   0.85 (  0.81)	train_majacc   0.84 (  0.86)	train_corr   0.00 (  0.00)	l1 7.6136 (7.7282)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.24it/s] 15%|#5        | 4/26 [00:00<00:01, 18.18it/s] 35%|###4      | 9/26 [00:00<00:00, 30.35it/s]                                               35%|###4      | 9/26 [00:00<00:00, 30.35it/s] 54%|#####3    | 14/26 [00:00<00:00, 36.63it/s] 73%|#######3  | 19/26 [00:00<00:00, 38.83it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 38.83it/s] 92%|#########2| 24/26 [00:00<00:00, 41.46it/s]100%|##########| 26/26 [00:00<00:00, 33.29it/s]
Test: [   0/  26]	Loss 0.308 (0.308)	test_acc   0.87 (  0.87)	test_minacc   0.84 (  0.84)	test_majacc   0.88 (  0.88)	Loss_d 0.308 (0.308)	test_acc_d   0.87 (  0.87)	test_minacc_d   0.84 (  0.84)	test_majacc_d   0.88 (  0.88)	test_corr_d   0.65 (  0.65)
Test: [  10/  26]	Loss 0.391 (0.347)	test_acc   0.80 (  0.84)	test_minacc   0.65 (  0.77)	test_majacc   0.83 (  0.85)	Loss_d 0.391 (0.347)	test_acc_d   0.80 (  0.84)	test_minacc_d   0.65 (  0.77)	test_majacc_d   0.83 (  0.85)	test_corr_d   0.65 (  0.65)
Test: [  20/  26]	Loss 0.333 (0.354)	test_acc   0.86 (  0.83)	test_minacc   0.82 (  0.77)	test_majacc   0.86 (  0.84)	Loss_d 0.333 (0.354)	test_acc_d   0.86 (  0.83)	test_minacc_d   0.82 (  0.77)	test_majacc_d   0.86 (  0.84)	test_corr_d   0.65 (  0.64)
Test: [  26/  26]	Loss 0.311 (0.348)	test_acc   0.86 (  0.84)	test_minacc   0.85 (  0.78)	test_majacc   0.86 (  0.84)	Loss_d 0.311 (0.348)	test_acc_d   0.86 (  0.84)	test_minacc_d   0.85 (  0.78)	test_majacc_d   0.86 (  0.84)	test_corr_d   0.67 (  0.65)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 51.85it/s]
Test: [  0/  1]	Loss 1.500 (1.500)	test_acc   0.54 (  0.54)	test_minacc   0.50 (  0.50)	test_majacc   0.87 (  0.87)	Loss_d 1.500 (1.500)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.87 (  0.87)	test_corr_d   0.20 (  0.20)
Test: [  1/  1]	Loss 1.500 (1.500)	test_acc   0.54 (  0.54)	test_minacc   0.50 (  0.50)	test_majacc   0.87 (  0.87)	Loss_d 1.500 (1.500)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.87 (  0.87)	test_corr_d   0.20 (  0.20)
Overall Timing[ 36/  1]	epoch_time 0.0412 (0.0428)	validation_time 0.0004 (0.0006)	train_time 0.0408 (0.0422)
record: (train_acc, test_acc) (0.8345000269412994, 0.6670000553131104)
last accs (train_acc, test_acc) (0.8350000228881836, 0.5380000472068787)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.81it/s] 19%|#9        | 5/26 [00:00<00:00, 25.19it/s] 35%|###4      | 9/26 [00:00<00:00, 29.94it/s] 50%|#####     | 13/26 [00:00<00:00, 32.25it/s] 65%|######5   | 17/26 [00:00<00:00, 33.58it/s] 81%|########  | 21/26 [00:00<00:00, 34.48it/s] 96%|#########6| 25/26 [00:00<00:00, 34.41it/s]100%|##########| 26/26 [00:00<00:00, 29.95it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 962 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 963 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 964 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 965 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 966 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 967 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 968 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 969 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 970 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 971 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 972 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 973 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 974 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 975 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 976 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 977 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 978 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 979 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 980 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 981 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 982 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 983 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 984 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 985 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 986 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 987 400
penalty weights 10000.0
Epoch: [37][  26/  26]	Loss 0.001 (0.001)	train_nll   0.30 (  0.31)	train_penalty   0.00 (  0.00)	weight_norm  24.40 ( 24.39)	train_acc   0.86 (  0.85)	train_minacc   0.88 (  0.83)	train_majacc   0.86 (  0.86)	train_corr   0.00 (  0.00)	l1 8.0704 (7.5520)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.81it/s] 19%|#9        | 5/26 [00:00<00:01, 20.60it/s] 38%|###8      | 10/26 [00:00<00:00, 29.51it/s]                                                38%|###8      | 10/26 [00:00<00:00, 29.51it/s] 58%|#####7    | 15/26 [00:00<00:00, 36.05it/s]                                                58%|#####7    | 15/26 [00:00<00:00, 36.05it/s] 81%|########  | 21/26 [00:00<00:00, 41.34it/s]100%|##########| 26/26 [00:00<00:00, 33.14it/s]
Test: [   0/  26]	Loss 0.307 (0.307)	test_acc   0.87 (  0.87)	test_minacc   0.85 (  0.85)	test_majacc   0.87 (  0.87)	Loss_d 0.307 (0.307)	test_acc_d   0.87 (  0.87)	test_minacc_d   0.85 (  0.85)	test_majacc_d   0.87 (  0.87)	test_corr_d   0.63 (  0.63)
Test: [  10/  26]	Loss 0.381 (0.349)	test_acc   0.81 (  0.84)	test_minacc   0.68 (  0.77)	test_majacc   0.83 (  0.85)	Loss_d 0.381 (0.349)	test_acc_d   0.81 (  0.84)	test_minacc_d   0.68 (  0.77)	test_majacc_d   0.83 (  0.85)	test_corr_d   0.65 (  0.64)
Test: [  20/  26]	Loss 0.341 (0.367)	test_acc   0.83 (  0.83)	test_minacc   0.71 (  0.78)	test_majacc   0.85 (  0.84)	Loss_d 0.341 (0.367)	test_acc_d   0.83 (  0.83)	test_minacc_d   0.71 (  0.78)	test_majacc_d   0.85 (  0.84)	test_corr_d   0.65 (  0.63)
Test: [  26/  26]	Loss 0.310 (0.358)	test_acc   0.86 (  0.84)	test_minacc   0.88 (  0.78)	test_majacc   0.86 (  0.85)	Loss_d 0.310 (0.358)	test_acc_d   0.86 (  0.84)	test_minacc_d   0.88 (  0.78)	test_majacc_d   0.86 (  0.85)	test_corr_d   0.67 (  0.64)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 60.52it/s]
Test: [  0/  1]	Loss 1.653 (1.653)	test_acc   0.56 (  0.56)	test_minacc   0.53 (  0.53)	test_majacc   0.81 (  0.81)	Loss_d 1.653 (1.653)	test_acc_d   0.56 (  0.56)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.81 (  0.81)	test_corr_d   0.15 (  0.15)
Test: [  1/  1]	Loss 1.653 (1.653)	test_acc   0.56 (  0.56)	test_minacc   0.53 (  0.53)	test_majacc   0.81 (  0.81)	Loss_d 1.653 (1.653)	test_acc_d   0.56 (  0.56)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.81 (  0.81)	test_corr_d   0.15 (  0.15)
Overall Timing[ 37/  1]	epoch_time 0.0409 (0.0428)	validation_time 0.0005 (0.0006)	train_time 0.0404 (0.0422)
record: (train_acc, test_acc) (0.8345000269412994, 0.6670000553131104)
last accs (train_acc, test_acc) (0.8356000217795372, 0.5580000281333923)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.53it/s] 19%|#9        | 5/26 [00:00<00:00, 24.29it/s] 35%|###4      | 9/26 [00:00<00:00, 29.37it/s] 50%|#####     | 13/26 [00:00<00:00, 30.89it/s] 65%|######5   | 17/26 [00:00<00:00, 31.52it/s] 81%|########  | 21/26 [00:00<00:00, 32.85it/s] 96%|#########6| 25/26 [00:00<00:00, 33.51it/s]100%|##########| 26/26 [00:00<00:00, 29.06it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 988 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 989 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 990 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 991 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 992 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 993 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 994 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 995 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 996 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 997 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 998 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 999 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1000 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1001 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1002 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1003 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1004 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1005 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1006 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1007 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1008 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1009 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1010 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1011 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1012 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1013 400
penalty weights 10000.0
Epoch: [38][  26/  26]	Loss 0.003 (0.001)	train_nll   0.22 (  0.29)	train_penalty   0.00 (  0.00)	weight_norm  24.42 ( 24.41)	train_acc   0.91 (  0.86)	train_minacc   0.88 (  0.83)	train_majacc   0.92 (  0.87)	train_corr   0.00 (  0.00)	l1 7.9264 (7.9279)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.23it/s] 23%|##3       | 6/26 [00:00<00:00, 24.00it/s]                                               23%|##3       | 6/26 [00:00<00:00, 24.00it/s] 42%|####2     | 11/26 [00:00<00:00, 32.85it/s] 62%|######1   | 16/26 [00:00<00:00, 38.14it/s]                                                62%|######1   | 16/26 [00:00<00:00, 38.14it/s] 81%|########  | 21/26 [00:00<00:00, 35.05it/s]100%|##########| 26/26 [00:00<00:00, 39.08it/s]100%|##########| 26/26 [00:00<00:00, 31.57it/s]
Test: [   0/  26]	Loss 0.269 (0.269)	test_acc   0.86 (  0.86)	test_minacc   0.91 (  0.91)	test_majacc   0.85 (  0.85)	Loss_d 0.269 (0.269)	test_acc_d   0.86 (  0.86)	test_minacc_d   0.91 (  0.91)	test_majacc_d   0.85 (  0.85)	test_corr_d   0.64 (  0.64)
Test: [  10/  26]	Loss 0.299 (0.292)	test_acc   0.87 (  0.85)	test_minacc   0.89 (  0.88)	test_majacc   0.86 (  0.85)	Loss_d 0.299 (0.292)	test_acc_d   0.87 (  0.85)	test_minacc_d   0.89 (  0.88)	test_majacc_d   0.86 (  0.85)	test_corr_d   0.66 (  0.64)
Test: [  20/  26]	Loss 0.287 (0.299)	test_acc   0.83 (  0.85)	test_minacc   0.84 (  0.87)	test_majacc   0.83 (  0.84)	Loss_d 0.287 (0.299)	test_acc_d   0.83 (  0.85)	test_minacc_d   0.84 (  0.87)	test_majacc_d   0.83 (  0.84)	test_corr_d   0.64 (  0.64)
Test: [  26/  26]	Loss 0.223 (0.295)	test_acc   0.90 (  0.85)	test_minacc   0.88 (  0.87)	test_majacc   0.91 (  0.85)	Loss_d 0.223 (0.295)	test_acc_d   0.90 (  0.85)	test_minacc_d   0.88 (  0.87)	test_majacc_d   0.91 (  0.85)	test_corr_d   0.72 (  0.65)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 59.39it/s]
Test: [  0/  1]	Loss 1.657 (1.657)	test_acc   0.61 (  0.61)	test_minacc   0.59 (  0.59)	test_majacc   0.80 (  0.80)	Loss_d 1.657 (1.657)	test_acc_d   0.61 (  0.61)	test_minacc_d   0.59 (  0.59)	test_majacc_d   0.80 (  0.80)	test_corr_d   0.10 (  0.10)
Test: [  1/  1]	Loss 1.657 (1.657)	test_acc   0.61 (  0.61)	test_minacc   0.59 (  0.59)	test_majacc   0.80 (  0.80)	Loss_d 1.657 (1.657)	test_acc_d   0.61 (  0.61)	test_minacc_d   0.59 (  0.59)	test_majacc_d   0.80 (  0.80)	test_corr_d   0.10 (  0.10)
Overall Timing[ 38/  1]	epoch_time 0.0496 (0.0430)	validation_time 0.0004 (0.0005)	train_time 0.0492 (0.0424)
record: (train_acc, test_acc) (0.8345000269412994, 0.6670000553131104)
last accs (train_acc, test_acc) (0.849700027346611, 0.6100000143051147)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.08it/s] 19%|#9        | 5/26 [00:00<00:01, 18.89it/s] 35%|###4      | 9/26 [00:00<00:00, 24.66it/s] 50%|#####     | 13/26 [00:00<00:00, 28.63it/s] 65%|######5   | 17/26 [00:00<00:00, 30.23it/s] 81%|########  | 21/26 [00:00<00:00, 31.43it/s] 96%|#########6| 25/26 [00:00<00:00, 31.63it/s]100%|##########| 26/26 [00:00<00:00, 26.44it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1014 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1015 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1016 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1017 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1018 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1019 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1020 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1021 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1022 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1023 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1024 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1025 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1026 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1027 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1028 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1029 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1030 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1031 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1032 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1033 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1034 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1035 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1036 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1037 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1038 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1039 400
penalty weights 10000.0
Epoch: [39][  26/  26]	Loss 0.000 (0.001)	train_nll   0.23 (  0.28)	train_penalty   0.00 (  0.00)	weight_norm  24.43 ( 24.43)	train_acc   0.89 (  0.87)	train_minacc   0.85 (  0.85)	train_majacc   0.90 (  0.87)	train_corr   0.00 (  0.00)	l1 7.8589 (7.8495)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 19.05it/s] 27%|##6       | 7/26 [00:00<00:00, 35.74it/s]                                               27%|##6       | 7/26 [00:00<00:00, 35.74it/s] 46%|####6     | 12/26 [00:00<00:00, 40.40it/s] 65%|######5   | 17/26 [00:00<00:00, 40.63it/s]                                                65%|######5   | 17/26 [00:00<00:00, 40.63it/s] 85%|########4 | 22/26 [00:00<00:00, 42.95it/s]100%|##########| 26/26 [00:00<00:00, 37.54it/s]
Test: [   0/  26]	Loss 0.236 (0.236)	test_acc   0.90 (  0.90)	test_minacc   0.91 (  0.91)	test_majacc   0.89 (  0.89)	Loss_d 0.236 (0.236)	test_acc_d   0.90 (  0.90)	test_minacc_d   0.91 (  0.91)	test_majacc_d   0.89 (  0.89)	test_corr_d   0.69 (  0.69)
Test: [  10/  26]	Loss 0.275 (0.253)	test_acc   0.87 (  0.88)	test_minacc   0.82 (  0.85)	test_majacc   0.88 (  0.89)	Loss_d 0.275 (0.253)	test_acc_d   0.87 (  0.88)	test_minacc_d   0.82 (  0.85)	test_majacc_d   0.88 (  0.89)	test_corr_d   0.72 (  0.72)
Test: [  20/  26]	Loss 0.255 (0.272)	test_acc   0.89 (  0.87)	test_minacc   0.87 (  0.84)	test_majacc   0.89 (  0.88)	Loss_d 0.255 (0.272)	test_acc_d   0.89 (  0.87)	test_minacc_d   0.87 (  0.84)	test_majacc_d   0.89 (  0.88)	test_corr_d   0.71 (  0.70)
Test: [  26/  26]	Loss 0.237 (0.270)	test_acc   0.89 (  0.87)	test_minacc   0.85 (  0.84)	test_majacc   0.89 (  0.88)	Loss_d 0.237 (0.270)	test_acc_d   0.89 (  0.87)	test_minacc_d   0.85 (  0.84)	test_majacc_d   0.89 (  0.88)	test_corr_d   0.73 (  0.71)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 58.10it/s]
Test: [  0/  1]	Loss 1.759 (1.759)	test_acc   0.58 (  0.58)	test_minacc   0.55 (  0.55)	test_majacc   0.84 (  0.84)	Loss_d 1.759 (1.759)	test_acc_d   0.58 (  0.58)	test_minacc_d   0.55 (  0.55)	test_majacc_d   0.84 (  0.84)	test_corr_d   0.21 (  0.21)
Test: [  1/  1]	Loss 1.759 (1.759)	test_acc   0.58 (  0.58)	test_minacc   0.55 (  0.55)	test_majacc   0.84 (  0.84)	Loss_d 1.759 (1.759)	test_acc_d   0.58 (  0.58)	test_minacc_d   0.55 (  0.55)	test_majacc_d   0.84 (  0.84)	test_corr_d   0.21 (  0.21)
Overall Timing[ 39/  1]	epoch_time 0.0433 (0.0430)	validation_time 0.0004 (0.0005)	train_time 0.0429 (0.0424)
record: (train_acc, test_acc) (0.8345000269412994, 0.6670000553131104)
last accs (train_acc, test_acc) (0.8725000243186951, 0.5760000348091125)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:06,  3.93it/s] 19%|#9        | 5/26 [00:00<00:01, 15.91it/s] 35%|###4      | 9/26 [00:00<00:00, 23.00it/s] 50%|#####     | 13/26 [00:00<00:00, 27.07it/s] 65%|######5   | 17/26 [00:00<00:00, 28.82it/s] 81%|########  | 21/26 [00:00<00:00, 30.73it/s] 96%|#########6| 25/26 [00:00<00:00, 31.64it/s]100%|##########| 26/26 [00:01<00:00, 24.87it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1040 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1041 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1042 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1043 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1044 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1045 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1046 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1047 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1048 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1049 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1050 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1051 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1052 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1053 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1054 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1055 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1056 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1057 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1058 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1059 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1060 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1061 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1062 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1063 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1064 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1065 400
penalty weights 10000.0
Epoch: [40][  26/  26]	Loss 0.001 (0.001)	train_nll   0.28 (  0.28)	train_penalty   0.00 (  0.00)	weight_norm  24.45 ( 24.44)	train_acc   0.86 (  0.86)	train_minacc   0.88 (  0.84)	train_majacc   0.85 (  0.87)	train_corr   0.00 (  0.00)	l1 7.6325 (7.9791)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 15.63it/s] 27%|##6       | 7/26 [00:00<00:00, 32.60it/s]                                               27%|##6       | 7/26 [00:00<00:00, 32.60it/s] 46%|####6     | 12/26 [00:00<00:00, 39.41it/s] 65%|######5   | 17/26 [00:00<00:00, 40.98it/s]                                                65%|######5   | 17/26 [00:00<00:00, 40.98it/s] 85%|########4 | 22/26 [00:00<00:00, 43.24it/s]100%|##########| 26/26 [00:00<00:00, 36.53it/s]
Test: [   0/  26]	Loss 0.302 (0.302)	test_acc   0.84 (  0.84)	test_minacc   0.76 (  0.76)	test_majacc   0.85 (  0.85)	Loss_d 0.302 (0.302)	test_acc_d   0.84 (  0.84)	test_minacc_d   0.76 (  0.76)	test_majacc_d   0.85 (  0.85)	test_corr_d   0.68 (  0.68)
Test: [  10/  26]	Loss 0.280 (0.279)	test_acc   0.87 (  0.86)	test_minacc   0.86 (  0.84)	test_majacc   0.88 (  0.87)	Loss_d 0.280 (0.279)	test_acc_d   0.87 (  0.86)	test_minacc_d   0.86 (  0.84)	test_majacc_d   0.88 (  0.87)	test_corr_d   0.72 (  0.70)
Test: [  20/  26]	Loss 0.309 (0.289)	test_acc   0.84 (  0.85)	test_minacc   0.77 (  0.83)	test_majacc   0.85 (  0.86)	Loss_d 0.309 (0.289)	test_acc_d   0.84 (  0.85)	test_minacc_d   0.77 (  0.83)	test_majacc_d   0.85 (  0.86)	test_corr_d   0.70 (  0.70)
Test: [  26/  26]	Loss 0.286 (0.291)	test_acc   0.85 (  0.85)	test_minacc   0.88 (  0.83)	test_majacc   0.84 (  0.85)	Loss_d 0.286 (0.291)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.88 (  0.83)	test_majacc_d   0.84 (  0.85)	test_corr_d   0.70 (  0.70)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.87it/s]
Test: [  0/  1]	Loss 1.735 (1.735)	test_acc   0.57 (  0.57)	test_minacc   0.55 (  0.55)	test_majacc   0.81 (  0.81)	Loss_d 1.735 (1.735)	test_acc_d   0.57 (  0.57)	test_minacc_d   0.55 (  0.55)	test_majacc_d   0.81 (  0.81)	test_corr_d   0.23 (  0.23)
Test: [  1/  1]	Loss 1.735 (1.735)	test_acc   0.57 (  0.57)	test_minacc   0.55 (  0.55)	test_majacc   0.81 (  0.81)	Loss_d 1.735 (1.735)	test_acc_d   0.57 (  0.57)	test_minacc_d   0.55 (  0.55)	test_majacc_d   0.81 (  0.81)	test_corr_d   0.23 (  0.23)
Overall Timing[ 40/  1]	epoch_time 0.0471 (0.0431)	validation_time 0.0005 (0.0005)	train_time 0.0466 (0.0425)
record: (train_acc, test_acc) (0.8345000269412994, 0.6670000553131104)
last accs (train_acc, test_acc) (0.8505000273585319, 0.5730000138282776)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 17.18it/s] 15%|#5        | 4/26 [00:00<00:01, 17.07it/s] 31%|###       | 8/26 [00:00<00:00, 25.71it/s] 46%|####6     | 12/26 [00:00<00:00, 29.75it/s] 62%|######1   | 16/26 [00:00<00:00, 31.80it/s] 77%|#######6  | 20/26 [00:00<00:00, 33.17it/s] 92%|#########2| 24/26 [00:00<00:00, 34.29it/s]100%|##########| 26/26 [00:00<00:00, 28.70it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1066 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1067 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1068 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1069 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1070 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1071 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1072 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1073 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1074 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1075 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1076 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1077 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1078 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1079 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1080 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1081 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1082 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1083 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1084 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1085 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1086 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1087 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1088 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1089 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1090 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1091 400
penalty weights 10000.0
Epoch: [41][  26/  26]	Loss 0.000 (0.001)	train_nll   0.27 (  0.30)	train_penalty   0.00 (  0.00)	weight_norm  24.46 ( 24.45)	train_acc   0.85 (  0.84)	train_minacc   0.88 (  0.84)	train_majacc   0.84 (  0.84)	train_corr   0.00 (  0.00)	l1 7.5789 (7.7466)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:00, 27.39it/s] 31%|###       | 8/26 [00:00<00:00, 39.00it/s]                                               31%|###       | 8/26 [00:00<00:00, 39.00it/s] 50%|#####     | 13/26 [00:00<00:00, 42.02it/s] 69%|######9   | 18/26 [00:00<00:00, 43.96it/s]                                                69%|######9   | 18/26 [00:00<00:00, 43.96it/s] 88%|########8 | 23/26 [00:00<00:00, 40.64it/s]100%|##########| 26/26 [00:00<00:00, 38.24it/s]
Test: [   0/  26]	Loss 0.268 (0.268)	test_acc   0.86 (  0.86)	test_minacc   0.84 (  0.84)	test_majacc   0.87 (  0.87)	Loss_d 0.268 (0.268)	test_acc_d   0.86 (  0.86)	test_minacc_d   0.84 (  0.84)	test_majacc_d   0.87 (  0.87)	test_corr_d   0.68 (  0.68)
Test: [  10/  26]	Loss 0.253 (0.262)	test_acc   0.88 (  0.87)	test_minacc   0.91 (  0.87)	test_majacc   0.88 (  0.88)	Loss_d 0.253 (0.262)	test_acc_d   0.88 (  0.87)	test_minacc_d   0.91 (  0.87)	test_majacc_d   0.88 (  0.88)	test_corr_d   0.72 (  0.70)
Test: [  20/  26]	Loss 0.288 (0.271)	test_acc   0.86 (  0.87)	test_minacc   0.84 (  0.88)	test_majacc   0.87 (  0.87)	Loss_d 0.288 (0.271)	test_acc_d   0.86 (  0.87)	test_minacc_d   0.84 (  0.88)	test_majacc_d   0.87 (  0.87)	test_corr_d   0.69 (  0.69)
Test: [  26/  26]	Loss 0.276 (0.274)	test_acc   0.85 (  0.86)	test_minacc   0.88 (  0.87)	test_majacc   0.84 (  0.86)	Loss_d 0.276 (0.274)	test_acc_d   0.85 (  0.86)	test_minacc_d   0.88 (  0.87)	test_majacc_d   0.84 (  0.86)	test_corr_d   0.68 (  0.69)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.90it/s]
Test: [  0/  1]	Loss 1.639 (1.639)	test_acc   0.60 (  0.60)	test_minacc   0.58 (  0.58)	test_majacc   0.78 (  0.78)	Loss_d 1.639 (1.639)	test_acc_d   0.60 (  0.60)	test_minacc_d   0.58 (  0.58)	test_majacc_d   0.78 (  0.78)	test_corr_d   0.19 (  0.19)
Test: [  1/  1]	Loss 1.639 (1.639)	test_acc   0.60 (  0.60)	test_minacc   0.58 (  0.58)	test_majacc   0.78 (  0.78)	Loss_d 1.639 (1.639)	test_acc_d   0.60 (  0.60)	test_minacc_d   0.58 (  0.58)	test_majacc_d   0.78 (  0.78)	test_corr_d   0.19 (  0.19)
Overall Timing[ 41/  1]	epoch_time 0.0395 (0.0430)	validation_time 0.0003 (0.0005)	train_time 0.0392 (0.0424)
record: (train_acc, test_acc) (0.8345000269412994, 0.6670000553131104)
last accs (train_acc, test_acc) (0.8645000218749046, 0.5960000157356262)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:08,  3.02it/s] 19%|#9        | 5/26 [00:00<00:01, 13.01it/s] 35%|###4      | 9/26 [00:00<00:00, 19.88it/s] 50%|#####     | 13/26 [00:00<00:00, 24.65it/s] 65%|######5   | 17/26 [00:00<00:00, 28.12it/s] 81%|########  | 21/26 [00:00<00:00, 30.75it/s] 96%|#########6| 25/26 [00:01<00:00, 32.66it/s]100%|##########| 26/26 [00:01<00:00, 23.70it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1092 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1093 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1094 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1095 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1096 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1097 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1098 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1099 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1100 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1101 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1102 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1103 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1104 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1105 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1106 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1107 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1108 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1109 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1110 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1111 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1112 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1113 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1114 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1115 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1116 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1117 400
penalty weights 10000.0
Epoch: [42][  26/  26]	Loss 0.000 (0.001)	train_nll   0.26 (  0.28)	train_penalty   0.00 (  0.00)	weight_norm  24.47 ( 24.46)	train_acc   0.86 (  0.86)	train_minacc   0.91 (  0.86)	train_majacc   0.86 (  0.86)	train_corr   0.00 (  0.00)	l1 7.5807 (7.9947)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.43it/s] 27%|##6       | 7/26 [00:00<00:00, 30.43it/s]                                               27%|##6       | 7/26 [00:00<00:00, 30.43it/s] 46%|####6     | 12/26 [00:00<00:00, 37.08it/s] 65%|######5   | 17/26 [00:00<00:00, 40.27it/s]                                                65%|######5   | 17/26 [00:00<00:00, 40.27it/s] 85%|########4 | 22/26 [00:00<00:00, 42.80it/s]100%|##########| 26/26 [00:00<00:00, 35.87it/s]
Test: [   0/  26]	Loss 0.273 (0.273)	test_acc   0.87 (  0.87)	test_minacc   0.79 (  0.79)	test_majacc   0.89 (  0.89)	Loss_d 0.273 (0.273)	test_acc_d   0.87 (  0.87)	test_minacc_d   0.79 (  0.79)	test_majacc_d   0.89 (  0.89)	test_corr_d   0.72 (  0.72)
Test: [  10/  26]	Loss 0.240 (0.257)	test_acc   0.90 (  0.89)	test_minacc   0.91 (  0.86)	test_majacc   0.90 (  0.89)	Loss_d 0.240 (0.257)	test_acc_d   0.90 (  0.89)	test_minacc_d   0.91 (  0.86)	test_majacc_d   0.90 (  0.89)	test_corr_d   0.76 (  0.73)
Test: [  20/  26]	Loss 0.266 (0.256)	test_acc   0.87 (  0.88)	test_minacc   0.81 (  0.87)	test_majacc   0.89 (  0.89)	Loss_d 0.266 (0.256)	test_acc_d   0.87 (  0.88)	test_minacc_d   0.81 (  0.87)	test_majacc_d   0.89 (  0.89)	test_corr_d   0.73 (  0.73)
Test: [  26/  26]	Loss 0.265 (0.259)	test_acc   0.86 (  0.88)	test_minacc   0.91 (  0.86)	test_majacc   0.86 (  0.88)	Loss_d 0.265 (0.259)	test_acc_d   0.86 (  0.88)	test_minacc_d   0.91 (  0.86)	test_majacc_d   0.86 (  0.88)	test_corr_d   0.71 (  0.73)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.05it/s]
Test: [  0/  1]	Loss 1.742 (1.742)	test_acc   0.56 (  0.56)	test_minacc   0.53 (  0.53)	test_majacc   0.85 (  0.85)	Loss_d 1.742 (1.742)	test_acc_d   0.56 (  0.56)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.85 (  0.85)	test_corr_d   0.29 (  0.29)
Test: [  1/  1]	Loss 1.742 (1.742)	test_acc   0.56 (  0.56)	test_minacc   0.53 (  0.53)	test_majacc   0.85 (  0.85)	Loss_d 1.742 (1.742)	test_acc_d   0.56 (  0.56)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.85 (  0.85)	test_corr_d   0.29 (  0.29)
Overall Timing[ 42/  1]	epoch_time 0.0408 (0.0429)	validation_time 0.0004 (0.0005)	train_time 0.0404 (0.0424)
record: (train_acc, test_acc) (0.8345000269412994, 0.6670000553131104)
last accs (train_acc, test_acc) (0.8795000180006027, 0.562000036239624)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:01, 22.25it/s] 27%|##6       | 7/26 [00:00<00:00, 29.07it/s] 42%|####2     | 11/26 [00:00<00:00, 31.85it/s] 58%|#####7    | 15/26 [00:00<00:00, 33.10it/s] 73%|#######3  | 19/26 [00:00<00:00, 34.07it/s] 88%|########8 | 23/26 [00:00<00:00, 34.49it/s]100%|##########| 26/26 [00:00<00:00, 30.71it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1118 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1119 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1120 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1121 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1122 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1123 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1124 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1125 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1126 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1127 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1128 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1129 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1130 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1131 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1132 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1133 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1134 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1135 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1136 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1137 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1138 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1139 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1140 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1141 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1142 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1143 400
penalty weights 10000.0
Epoch: [43][  26/  26]	Loss 0.000 (0.001)	train_nll   0.27 (  0.28)	train_penalty   0.00 (  0.00)	weight_norm  24.48 ( 24.48)	train_acc   0.86 (  0.86)	train_minacc   0.88 (  0.86)	train_majacc   0.86 (  0.86)	train_corr   0.00 (  0.00)	l1 8.2226 (8.1654)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.76it/s] 23%|##3       | 6/26 [00:00<00:00, 31.74it/s]                                               23%|##3       | 6/26 [00:00<00:00, 31.74it/s] 42%|####2     | 11/26 [00:00<00:00, 38.90it/s] 62%|######1   | 16/26 [00:00<00:00, 41.23it/s]                                                62%|######1   | 16/26 [00:00<00:00, 41.23it/s] 81%|########  | 21/26 [00:00<00:00, 39.55it/s]100%|##########| 26/26 [00:00<00:00, 42.57it/s]100%|##########| 26/26 [00:00<00:00, 36.08it/s]
Test: [   0/  26]	Loss 0.278 (0.278)	test_acc   0.86 (  0.86)	test_minacc   0.85 (  0.85)	test_majacc   0.87 (  0.87)	Loss_d 0.278 (0.278)	test_acc_d   0.86 (  0.86)	test_minacc_d   0.85 (  0.85)	test_majacc_d   0.87 (  0.87)	test_corr_d   0.69 (  0.69)
Test: [  10/  26]	Loss 0.264 (0.286)	test_acc   0.88 (  0.86)	test_minacc   0.91 (  0.85)	test_majacc   0.87 (  0.86)	Loss_d 0.264 (0.286)	test_acc_d   0.88 (  0.86)	test_minacc_d   0.91 (  0.85)	test_majacc_d   0.87 (  0.86)	test_corr_d   0.72 (  0.70)
Test: [  20/  26]	Loss 0.262 (0.273)	test_acc   0.87 (  0.87)	test_minacc   0.87 (  0.87)	test_majacc   0.87 (  0.87)	Loss_d 0.262 (0.273)	test_acc_d   0.87 (  0.87)	test_minacc_d   0.87 (  0.87)	test_majacc_d   0.87 (  0.87)	test_corr_d   0.70 (  0.70)
Test: [  26/  26]	Loss 0.269 (0.273)	test_acc   0.86 (  0.86)	test_minacc   0.88 (  0.86)	test_majacc   0.86 (  0.87)	Loss_d 0.269 (0.273)	test_acc_d   0.86 (  0.86)	test_minacc_d   0.88 (  0.86)	test_majacc_d   0.86 (  0.87)	test_corr_d   0.70 (  0.70)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 64.93it/s]
Test: [  0/  1]	Loss 1.890 (1.890)	test_acc   0.60 (  0.60)	test_minacc   0.57 (  0.57)	test_majacc   0.85 (  0.85)	Loss_d 1.890 (1.890)	test_acc_d   0.60 (  0.60)	test_minacc_d   0.57 (  0.57)	test_majacc_d   0.85 (  0.85)	test_corr_d   0.22 (  0.22)
Test: [  1/  1]	Loss 1.890 (1.890)	test_acc   0.60 (  0.60)	test_minacc   0.57 (  0.57)	test_majacc   0.85 (  0.85)	Loss_d 1.890 (1.890)	test_acc_d   0.60 (  0.60)	test_minacc_d   0.57 (  0.57)	test_majacc_d   0.85 (  0.85)	test_corr_d   0.22 (  0.22)
Overall Timing[ 43/  1]	epoch_time 0.0405 (0.0429)	validation_time 0.0004 (0.0005)	train_time 0.0401 (0.0423)
record: (train_acc, test_acc) (0.8345000269412994, 0.6670000553131104)
last accs (train_acc, test_acc) (0.8649000188708306, 0.597000002861023)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.77it/s] 19%|#9        | 5/26 [00:00<00:00, 21.75it/s] 35%|###4      | 9/26 [00:00<00:00, 27.14it/s] 50%|#####     | 13/26 [00:00<00:00, 30.16it/s] 65%|######5   | 17/26 [00:00<00:00, 32.53it/s] 81%|########  | 21/26 [00:00<00:00, 34.09it/s] 96%|#########6| 25/26 [00:00<00:00, 35.05it/s]100%|##########| 26/26 [00:00<00:00, 28.85it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1144 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1145 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1146 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1147 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1148 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1149 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1150 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1151 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1152 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1153 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1154 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1155 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1156 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1157 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1158 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1159 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1160 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1161 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1162 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1163 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1164 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1165 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1166 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1167 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1168 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1169 400
penalty weights 10000.0
Epoch: [44][  26/  26]	Loss 0.001 (0.001)	train_nll   0.28 (  0.28)	train_penalty   0.00 (  0.00)	weight_norm  24.50 ( 24.49)	train_acc   0.86 (  0.86)	train_minacc   0.91 (  0.87)	train_majacc   0.85 (  0.85)	train_corr   0.00 (  0.00)	l1 8.5052 (7.9921)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 17.63it/s] 27%|##6       | 7/26 [00:00<00:00, 33.51it/s]                                               27%|##6       | 7/26 [00:00<00:00, 33.51it/s] 46%|####6     | 12/26 [00:00<00:00, 40.31it/s] 65%|######5   | 17/26 [00:00<00:00, 43.78it/s]                                                65%|######5   | 17/26 [00:00<00:00, 43.78it/s] 85%|########4 | 22/26 [00:00<00:00, 43.86it/s]100%|##########| 26/26 [00:00<00:00, 37.91it/s]
Test: [   0/  26]	Loss 0.314 (0.314)	test_acc   0.84 (  0.84)	test_minacc   0.81 (  0.81)	test_majacc   0.85 (  0.85)	Loss_d 0.314 (0.314)	test_acc_d   0.84 (  0.84)	test_minacc_d   0.81 (  0.81)	test_majacc_d   0.85 (  0.85)	test_corr_d   0.65 (  0.65)
Test: [  10/  26]	Loss 0.342 (0.340)	test_acc   0.83 (  0.83)	test_minacc   0.79 (  0.81)	test_majacc   0.83 (  0.83)	Loss_d 0.342 (0.340)	test_acc_d   0.83 (  0.83)	test_minacc_d   0.79 (  0.81)	test_majacc_d   0.83 (  0.83)	test_corr_d   0.67 (  0.65)
Test: [  20/  26]	Loss 0.299 (0.333)	test_acc   0.86 (  0.83)	test_minacc   0.89 (  0.83)	test_majacc   0.85 (  0.83)	Loss_d 0.299 (0.333)	test_acc_d   0.86 (  0.83)	test_minacc_d   0.89 (  0.83)	test_majacc_d   0.85 (  0.83)	test_corr_d   0.64 (  0.65)
Test: [  26/  26]	Loss 0.274 (0.324)	test_acc   0.86 (  0.84)	test_minacc   0.88 (  0.83)	test_majacc   0.86 (  0.84)	Loss_d 0.274 (0.324)	test_acc_d   0.86 (  0.84)	test_minacc_d   0.88 (  0.83)	test_majacc_d   0.86 (  0.84)	test_corr_d   0.67 (  0.65)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.08it/s]
Test: [  0/  1]	Loss 1.971 (1.971)	test_acc   0.58 (  0.58)	test_minacc   0.55 (  0.55)	test_majacc   0.85 (  0.85)	Loss_d 1.971 (1.971)	test_acc_d   0.58 (  0.58)	test_minacc_d   0.55 (  0.55)	test_majacc_d   0.85 (  0.85)	test_corr_d   0.20 (  0.20)
Test: [  1/  1]	Loss 1.971 (1.971)	test_acc   0.58 (  0.58)	test_minacc   0.55 (  0.55)	test_majacc   0.85 (  0.85)	Loss_d 1.971 (1.971)	test_acc_d   0.58 (  0.58)	test_minacc_d   0.55 (  0.55)	test_majacc_d   0.85 (  0.85)	test_corr_d   0.20 (  0.20)
Overall Timing[ 44/  1]	epoch_time 0.0397 (0.0428)	validation_time 0.0004 (0.0005)	train_time 0.0393 (0.0422)
record: (train_acc, test_acc) (0.8345000269412994, 0.6670000553131104)
last accs (train_acc, test_acc) (0.8376000263094902, 0.5800000429153442)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.83it/s] 19%|#9        | 5/26 [00:00<00:00, 21.03it/s] 35%|###4      | 9/26 [00:00<00:00, 26.82it/s] 50%|#####     | 13/26 [00:00<00:00, 29.18it/s] 65%|######5   | 17/26 [00:00<00:00, 31.15it/s] 81%|########  | 21/26 [00:00<00:00, 32.70it/s] 96%|#########6| 25/26 [00:00<00:00, 33.86it/s]100%|##########| 26/26 [00:00<00:00, 28.09it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1170 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1171 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1172 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1173 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1174 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1175 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1176 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1177 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1178 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1179 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1180 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1181 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1182 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1183 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1184 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1185 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1186 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1187 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1188 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1189 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1190 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1191 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1192 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1193 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1194 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1195 400
penalty weights 10000.0
Epoch: [45][  26/  26]	Loss 0.002 (0.001)	train_nll   0.29 (  0.29)	train_penalty   0.00 (  0.00)	weight_norm  24.53 ( 24.51)	train_acc   0.85 (  0.85)	train_minacc   0.85 (  0.85)	train_majacc   0.85 (  0.85)	train_corr   0.00 (  0.00)	l1 8.3270 (7.9859)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.07it/s] 23%|##3       | 6/26 [00:00<00:00, 29.30it/s]                                               23%|##3       | 6/26 [00:00<00:00, 29.30it/s] 42%|####2     | 11/26 [00:00<00:00, 36.63it/s] 62%|######1   | 16/26 [00:00<00:00, 40.60it/s]                                                62%|######1   | 16/26 [00:00<00:00, 40.60it/s] 81%|########  | 21/26 [00:00<00:00, 36.77it/s]100%|##########| 26/26 [00:00<00:00, 34.53it/s]
Test: [   0/  26]	Loss 0.290 (0.290)	test_acc   0.84 (  0.84)	test_minacc   0.85 (  0.85)	test_majacc   0.84 (  0.84)	Loss_d 0.290 (0.290)	test_acc_d   0.84 (  0.84)	test_minacc_d   0.85 (  0.85)	test_majacc_d   0.84 (  0.84)	test_corr_d   0.65 (  0.65)
Test: [  10/  26]	Loss 0.312 (0.315)	test_acc   0.85 (  0.84)	test_minacc   0.91 (  0.87)	test_majacc   0.84 (  0.83)	Loss_d 0.312 (0.315)	test_acc_d   0.85 (  0.84)	test_minacc_d   0.91 (  0.87)	test_majacc_d   0.84 (  0.83)	test_corr_d   0.66 (  0.65)
Test: [  20/  26]	Loss 0.307 (0.319)	test_acc   0.85 (  0.84)	test_minacc   0.84 (  0.87)	test_majacc   0.85 (  0.83)	Loss_d 0.307 (0.319)	test_acc_d   0.85 (  0.84)	test_minacc_d   0.84 (  0.87)	test_majacc_d   0.85 (  0.83)	test_corr_d   0.65 (  0.64)
Test: [  26/  26]	Loss 0.289 (0.316)	test_acc   0.85 (  0.84)	test_minacc   0.85 (  0.88)	test_majacc   0.85 (  0.83)	Loss_d 0.289 (0.316)	test_acc_d   0.85 (  0.84)	test_minacc_d   0.85 (  0.88)	test_majacc_d   0.85 (  0.83)	test_corr_d   0.70 (  0.65)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.04it/s]
Test: [  0/  1]	Loss 1.896 (1.896)	test_acc   0.61 (  0.61)	test_minacc   0.59 (  0.59)	test_majacc   0.82 (  0.82)	Loss_d 1.896 (1.896)	test_acc_d   0.61 (  0.61)	test_minacc_d   0.59 (  0.59)	test_majacc_d   0.82 (  0.82)	test_corr_d   0.15 (  0.15)
Test: [  1/  1]	Loss 1.896 (1.896)	test_acc   0.61 (  0.61)	test_minacc   0.59 (  0.59)	test_majacc   0.82 (  0.82)	Loss_d 1.896 (1.896)	test_acc_d   0.61 (  0.61)	test_minacc_d   0.59 (  0.59)	test_majacc_d   0.82 (  0.82)	test_corr_d   0.15 (  0.15)
Overall Timing[ 45/  1]	epoch_time 0.0426 (0.0428)	validation_time 0.0004 (0.0005)	train_time 0.0421 (0.0422)
record: (train_acc, test_acc) (0.8345000269412994, 0.6670000553131104)
last accs (train_acc, test_acc) (0.8363000282049179, 0.6140000224113464)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.70it/s] 12%|#1        | 3/26 [00:00<00:01, 13.60it/s] 27%|##6       | 7/26 [00:00<00:00, 23.77it/s] 42%|####2     | 11/26 [00:00<00:00, 28.59it/s] 58%|#####7    | 15/26 [00:00<00:00, 31.51it/s] 73%|#######3  | 19/26 [00:00<00:00, 33.33it/s] 88%|########8 | 23/26 [00:00<00:00, 34.52it/s]100%|##########| 26/26 [00:00<00:00, 28.49it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1196 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1197 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1198 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1199 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1200 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1201 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1202 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1203 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1204 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1205 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1206 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1207 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1208 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1209 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1210 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1211 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1212 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1213 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1214 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1215 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1216 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1217 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1218 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1219 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1220 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1221 400
penalty weights 10000.0
Epoch: [46][  26/  26]	Loss 0.002 (0.001)	train_nll   0.23 (  0.29)	train_penalty   0.00 (  0.00)	weight_norm  24.54 ( 24.53)	train_acc   0.90 (  0.85)	train_minacc   0.91 (  0.88)	train_majacc   0.89 (  0.85)	train_corr   0.00 (  0.00)	l1 7.9529 (7.9734)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.49it/s] 15%|#5        | 4/26 [00:00<00:01, 18.66it/s] 35%|###4      | 9/26 [00:00<00:00, 30.70it/s]                                               35%|###4      | 9/26 [00:00<00:00, 30.70it/s] 54%|#####3    | 14/26 [00:00<00:00, 37.28it/s] 77%|#######6  | 20/26 [00:00<00:00, 39.99it/s]                                                77%|#######6  | 20/26 [00:00<00:00, 39.99it/s] 96%|#########6| 25/26 [00:00<00:00, 42.83it/s]100%|##########| 26/26 [00:00<00:00, 34.29it/s]
Test: [   0/  26]	Loss 0.263 (0.263)	test_acc   0.87 (  0.87)	test_minacc   0.90 (  0.90)	test_majacc   0.87 (  0.87)	Loss_d 0.263 (0.263)	test_acc_d   0.87 (  0.87)	test_minacc_d   0.90 (  0.90)	test_majacc_d   0.87 (  0.87)	test_corr_d   0.68 (  0.68)
Test: [  10/  26]	Loss 0.293 (0.272)	test_acc   0.84 (  0.86)	test_minacc   0.88 (  0.90)	test_majacc   0.83 (  0.86)	Loss_d 0.293 (0.272)	test_acc_d   0.84 (  0.86)	test_minacc_d   0.88 (  0.90)	test_majacc_d   0.83 (  0.86)	test_corr_d   0.68 (  0.69)
Test: [  20/  26]	Loss 0.286 (0.285)	test_acc   0.86 (  0.85)	test_minacc   0.89 (  0.89)	test_majacc   0.85 (  0.85)	Loss_d 0.286 (0.285)	test_acc_d   0.86 (  0.85)	test_minacc_d   0.89 (  0.89)	test_majacc_d   0.85 (  0.85)	test_corr_d   0.67 (  0.68)
Test: [  26/  26]	Loss 0.231 (0.283)	test_acc   0.89 (  0.85)	test_minacc   0.91 (  0.89)	test_majacc   0.88 (  0.85)	Loss_d 0.231 (0.283)	test_acc_d   0.89 (  0.85)	test_minacc_d   0.91 (  0.89)	test_majacc_d   0.88 (  0.85)	test_corr_d   0.72 (  0.68)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 65.13it/s]
Test: [  0/  1]	Loss 1.844 (1.844)	test_acc   0.60 (  0.60)	test_minacc   0.57 (  0.57)	test_majacc   0.87 (  0.87)	Loss_d 1.844 (1.844)	test_acc_d   0.60 (  0.60)	test_minacc_d   0.57 (  0.57)	test_majacc_d   0.87 (  0.87)	test_corr_d   0.22 (  0.22)
Test: [  1/  1]	Loss 1.844 (1.844)	test_acc   0.60 (  0.60)	test_minacc   0.57 (  0.57)	test_majacc   0.87 (  0.87)	Loss_d 1.844 (1.844)	test_acc_d   0.60 (  0.60)	test_minacc_d   0.57 (  0.57)	test_majacc_d   0.87 (  0.87)	test_corr_d   0.22 (  0.22)
Overall Timing[ 46/  1]	epoch_time 0.0440 (0.0428)	validation_time 0.0003 (0.0005)	train_time 0.0437 (0.0423)
record: (train_acc, test_acc) (0.8345000269412994, 0.6670000553131104)
last accs (train_acc, test_acc) (0.8535000254511833, 0.6020000576972961)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.97it/s] 19%|#9        | 5/26 [00:00<00:00, 21.69it/s] 35%|###4      | 9/26 [00:00<00:00, 27.37it/s] 50%|#####     | 13/26 [00:00<00:00, 30.55it/s] 65%|######5   | 17/26 [00:00<00:00, 32.14it/s] 81%|########  | 21/26 [00:00<00:00, 33.92it/s] 96%|#########6| 25/26 [00:00<00:00, 34.50it/s]100%|##########| 26/26 [00:00<00:00, 28.80it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1222 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1223 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1224 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1225 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1226 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1227 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1228 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1229 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1230 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1231 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1232 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1233 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1234 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1235 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1236 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1237 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1238 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1239 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1240 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1241 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1242 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1243 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1244 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1245 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1246 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1247 400
penalty weights 10000.0
Epoch: [47][  26/  26]	Loss 0.001 (0.001)	train_nll   0.24 (  0.28)	train_penalty   0.00 (  0.00)	weight_norm  24.55 ( 24.54)	train_acc   0.88 (  0.86)	train_minacc   0.91 (  0.87)	train_majacc   0.88 (  0.86)	train_corr   0.00 (  0.00)	l1 7.8178 (8.2398)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.31it/s] 19%|#9        | 5/26 [00:00<00:00, 23.94it/s] 38%|###8      | 10/26 [00:00<00:00, 31.24it/s]                                                38%|###8      | 10/26 [00:00<00:00, 31.24it/s] 58%|#####7    | 15/26 [00:00<00:00, 37.07it/s] 77%|#######6  | 20/26 [00:00<00:00, 40.71it/s]                                                77%|#######6  | 20/26 [00:00<00:00, 40.71it/s] 96%|#########6| 25/26 [00:00<00:00, 42.40it/s]100%|##########| 26/26 [00:00<00:00, 34.21it/s]
Test: [   0/  26]	Loss 0.281 (0.281)	test_acc   0.85 (  0.85)	test_minacc   0.81 (  0.81)	test_majacc   0.86 (  0.86)	Loss_d 0.281 (0.281)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.81 (  0.81)	test_majacc_d   0.86 (  0.86)	test_corr_d   0.72 (  0.72)
Test: [  10/  26]	Loss 0.249 (0.254)	test_acc   0.90 (  0.88)	test_minacc   0.91 (  0.86)	test_majacc   0.89 (  0.88)	Loss_d 0.249 (0.254)	test_acc_d   0.90 (  0.88)	test_minacc_d   0.91 (  0.86)	test_majacc_d   0.89 (  0.88)	test_corr_d   0.75 (  0.74)
Test: [  20/  26]	Loss 0.267 (0.258)	test_acc   0.86 (  0.88)	test_minacc   0.79 (  0.86)	test_majacc   0.87 (  0.88)	Loss_d 0.267 (0.258)	test_acc_d   0.86 (  0.88)	test_minacc_d   0.79 (  0.86)	test_majacc_d   0.87 (  0.88)	test_corr_d   0.74 (  0.73)
Test: [  26/  26]	Loss 0.245 (0.261)	test_acc   0.87 (  0.87)	test_minacc   0.91 (  0.86)	test_majacc   0.87 (  0.87)	Loss_d 0.245 (0.261)	test_acc_d   0.87 (  0.87)	test_minacc_d   0.91 (  0.86)	test_majacc_d   0.87 (  0.87)	test_corr_d   0.73 (  0.73)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.36it/s]
Test: [  0/  1]	Loss 1.858 (1.858)	test_acc   0.55 (  0.55)	test_minacc   0.52 (  0.52)	test_majacc   0.81 (  0.81)	Loss_d 1.858 (1.858)	test_acc_d   0.55 (  0.55)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.81 (  0.81)	test_corr_d   0.32 (  0.32)
Test: [  1/  1]	Loss 1.858 (1.858)	test_acc   0.55 (  0.55)	test_minacc   0.52 (  0.52)	test_majacc   0.81 (  0.81)	Loss_d 1.858 (1.858)	test_acc_d   0.55 (  0.55)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.81 (  0.81)	test_corr_d   0.32 (  0.32)
Overall Timing[ 47/  1]	epoch_time 0.0419 (0.0428)	validation_time 0.0004 (0.0005)	train_time 0.0415 (0.0422)
record: (train_acc, test_acc) (0.8345000269412994, 0.6670000553131104)
last accs (train_acc, test_acc) (0.8710000200867652, 0.550000011920929)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.09it/s] 19%|#9        | 5/26 [00:00<00:01, 18.69it/s] 35%|###4      | 9/26 [00:00<00:00, 24.83it/s] 50%|#####     | 13/26 [00:00<00:00, 28.61it/s] 65%|######5   | 17/26 [00:00<00:00, 30.81it/s] 81%|########  | 21/26 [00:00<00:00, 32.16it/s] 96%|#########6| 25/26 [00:00<00:00, 33.18it/s]100%|##########| 26/26 [00:00<00:00, 27.15it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1248 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1249 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1250 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1251 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1252 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1253 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1254 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1255 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1256 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1257 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1258 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1259 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1260 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1261 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1262 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1263 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1264 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1265 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1266 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1267 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1268 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1269 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1270 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1271 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1272 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1273 400
penalty weights 10000.0
Epoch: [48][  26/  26]	Loss 0.000 (0.001)	train_nll   0.27 (  0.28)	train_penalty   0.00 (  0.00)	weight_norm  24.56 ( 24.56)	train_acc   0.85 (  0.85)	train_minacc   0.91 (  0.87)	train_majacc   0.84 (  0.85)	train_corr   0.00 (  0.00)	l1 7.9426 (8.2361)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.86it/s] 23%|##3       | 6/26 [00:00<00:00, 26.20it/s]                                               23%|##3       | 6/26 [00:00<00:00, 26.20it/s] 42%|####2     | 11/26 [00:00<00:00, 34.48it/s] 62%|######1   | 16/26 [00:00<00:00, 35.86it/s]                                                62%|######1   | 16/26 [00:00<00:00, 35.86it/s] 81%|########  | 21/26 [00:00<00:00, 38.60it/s]100%|##########| 26/26 [00:00<00:00, 41.74it/s]100%|##########| 26/26 [00:00<00:00, 33.42it/s]
Test: [   0/  26]	Loss 0.275 (0.275)	test_acc   0.85 (  0.85)	test_minacc   0.81 (  0.81)	test_majacc   0.86 (  0.86)	Loss_d 0.275 (0.275)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.81 (  0.81)	test_majacc_d   0.86 (  0.86)	test_corr_d   0.71 (  0.71)
Test: [  10/  26]	Loss 0.254 (0.272)	test_acc   0.89 (  0.86)	test_minacc   0.93 (  0.87)	test_majacc   0.88 (  0.86)	Loss_d 0.254 (0.272)	test_acc_d   0.89 (  0.86)	test_minacc_d   0.93 (  0.87)	test_majacc_d   0.88 (  0.86)	test_corr_d   0.75 (  0.72)
Test: [  20/  26]	Loss 0.259 (0.265)	test_acc   0.87 (  0.87)	test_minacc   0.84 (  0.88)	test_majacc   0.87 (  0.86)	Loss_d 0.259 (0.265)	test_acc_d   0.87 (  0.87)	test_minacc_d   0.84 (  0.88)	test_majacc_d   0.87 (  0.86)	test_corr_d   0.74 (  0.73)
Test: [  26/  26]	Loss 0.268 (0.266)	test_acc   0.85 (  0.86)	test_minacc   0.91 (  0.88)	test_majacc   0.84 (  0.86)	Loss_d 0.268 (0.266)	test_acc_d   0.85 (  0.86)	test_minacc_d   0.91 (  0.88)	test_majacc_d   0.84 (  0.86)	test_corr_d   0.72 (  0.73)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 57.36it/s]
Test: [  0/  1]	Loss 1.926 (1.926)	test_acc   0.57 (  0.57)	test_minacc   0.55 (  0.55)	test_majacc   0.81 (  0.81)	Loss_d 1.926 (1.926)	test_acc_d   0.57 (  0.57)	test_minacc_d   0.55 (  0.55)	test_majacc_d   0.81 (  0.81)	test_corr_d   0.31 (  0.31)
Test: [  1/  1]	Loss 1.926 (1.926)	test_acc   0.57 (  0.57)	test_minacc   0.55 (  0.55)	test_majacc   0.81 (  0.81)	Loss_d 1.926 (1.926)	test_acc_d   0.57 (  0.57)	test_minacc_d   0.55 (  0.55)	test_majacc_d   0.81 (  0.81)	test_corr_d   0.31 (  0.31)
Overall Timing[ 48/  1]	epoch_time 0.0426 (0.0428)	validation_time 0.0004 (0.0005)	train_time 0.0422 (0.0422)
record: (train_acc, test_acc) (0.8345000269412994, 0.6670000553131104)
last accs (train_acc, test_acc) (0.8644000220894813, 0.5720000267028809)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:01, 22.25it/s] 27%|##6       | 7/26 [00:00<00:00, 28.78it/s] 42%|####2     | 11/26 [00:00<00:00, 31.87it/s] 58%|#####7    | 15/26 [00:00<00:00, 33.05it/s] 73%|#######3  | 19/26 [00:00<00:00, 33.86it/s] 88%|########8 | 23/26 [00:00<00:00, 34.77it/s]100%|##########| 26/26 [00:00<00:00, 31.02it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1274 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1275 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1276 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1277 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1278 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1279 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1280 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1281 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1282 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1283 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1284 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1285 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1286 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1287 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1288 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1289 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1290 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1291 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1292 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1293 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1294 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1295 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1296 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1297 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1298 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1299 400
penalty weights 10000.0
Epoch: [49][  26/  26]	Loss 0.000 (0.001)	train_nll   0.27 (  0.27)	train_penalty   0.00 (  0.00)	weight_norm  24.59 ( 24.57)	train_acc   0.88 (  0.86)	train_minacc   0.94 (  0.89)	train_majacc   0.87 (  0.86)	train_corr   0.00 (  0.00)	l1 8.6406 (8.1152)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 13.00it/s] 31%|###       | 8/26 [00:00<00:00, 33.80it/s]                                               31%|###       | 8/26 [00:00<00:00, 33.80it/s] 50%|#####     | 13/26 [00:00<00:00, 38.29it/s] 69%|######9   | 18/26 [00:00<00:00, 41.54it/s]                                                69%|######9   | 18/26 [00:00<00:00, 41.54it/s] 88%|########8 | 23/26 [00:00<00:00, 40.12it/s]100%|##########| 26/26 [00:00<00:00, 35.92it/s]
Test: [   0/  26]	Loss 0.274 (0.274)	test_acc   0.86 (  0.86)	test_minacc   0.88 (  0.88)	test_majacc   0.85 (  0.85)	Loss_d 0.274 (0.274)	test_acc_d   0.86 (  0.86)	test_minacc_d   0.88 (  0.88)	test_majacc_d   0.85 (  0.85)	test_corr_d   0.66 (  0.66)
Test: [  10/  26]	Loss 0.290 (0.302)	test_acc   0.85 (  0.84)	test_minacc   0.91 (  0.88)	test_majacc   0.84 (  0.84)	Loss_d 0.290 (0.302)	test_acc_d   0.85 (  0.84)	test_minacc_d   0.91 (  0.88)	test_majacc_d   0.84 (  0.84)	test_corr_d   0.69 (  0.67)
Test: [  20/  26]	Loss 0.268 (0.296)	test_acc   0.85 (  0.85)	test_minacc   0.84 (  0.88)	test_majacc   0.86 (  0.84)	Loss_d 0.268 (0.296)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.84 (  0.88)	test_majacc_d   0.86 (  0.84)	test_corr_d   0.68 (  0.67)
Test: [  26/  26]	Loss 0.269 (0.293)	test_acc   0.88 (  0.85)	test_minacc   0.94 (  0.88)	test_majacc   0.87 (  0.84)	Loss_d 0.269 (0.293)	test_acc_d   0.88 (  0.85)	test_minacc_d   0.94 (  0.88)	test_majacc_d   0.87 (  0.84)	test_corr_d   0.69 (  0.67)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.48it/s]
Test: [  0/  1]	Loss 2.017 (2.017)	test_acc   0.63 (  0.63)	test_minacc   0.60 (  0.60)	test_majacc   0.83 (  0.83)	Loss_d 2.017 (2.017)	test_acc_d   0.63 (  0.63)	test_minacc_d   0.60 (  0.60)	test_majacc_d   0.83 (  0.83)	test_corr_d   0.16 (  0.16)
Test: [  1/  1]	Loss 2.017 (2.017)	test_acc   0.63 (  0.63)	test_minacc   0.60 (  0.60)	test_majacc   0.83 (  0.83)	Loss_d 2.017 (2.017)	test_acc_d   0.63 (  0.63)	test_minacc_d   0.60 (  0.60)	test_majacc_d   0.83 (  0.83)	test_corr_d   0.16 (  0.16)
Overall Timing[ 49/  1]	epoch_time 0.0383 (0.0427)	validation_time 0.0004 (0.0005)	train_time 0.0378 (0.0422)
record: (train_acc, test_acc) (0.8345000269412994, 0.6670000553131104)
last accs (train_acc, test_acc) (0.8494000310897827, 0.6260000467300415)
done saving aggregate.csv to ./aggregate.csv
wandb: - 0.166 MB of 0.166 MB uploadedwandb: \ 0.166 MB of 0.166 MB uploadedwandb: | 0.166 MB of 0.166 MB uploadedwandb: / 0.037 MB of 0.302 MB uploaded (0.003 MB deduped)wandb: - 0.302 MB of 0.302 MB uploaded (0.003 MB deduped)wandb: 
wandb: Run history:
wandb:                                                                            global_step ▁▁▁▁▂▂▂▂▂▃▃▃▃▃▃▄▄▄▄▄▅▅▅▅▅▅▆▆▆▆▆▆▇▇▇▇▇███
wandb:      resnet18-usc-unsigned/baseline/prune_rate=1.0/146/logs/diagnostics/epoch_time_val █▁▂▂▁▂▁▂▂▂▁▁▃▂▂▂▂▂▂▂▂▂▂▂▂▃▂▃▂▂▂▃▃▁▂▂▂▂▂▁
wandb:      resnet18-usc-unsigned/baseline/prune_rate=1.0/146/logs/diagnostics/train_time_val █▂▃▂▁▃▁▂▂▂▁▁▃▂▂▂▂▂▃▂▂▂▂▂▂▃▂▃▂▂▂▄▃▂▂▂▂▂▂▁
wandb: resnet18-usc-unsigned/baseline/prune_rate=1.0/146/logs/diagnostics/validation_time_val █▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:                     resnet18-usc-unsigned/baseline/prune_rate=1.0/146/logs/global_step ▁▁▁▁▂▂▂▂▂▃▃▃▃▃▃▄▄▄▄▄▅▅▅▅▅▅▆▆▆▆▆▆▇▇▇▇▇███
wandb:                   resnet18-usc-unsigned/baseline/prune_rate=1.0/146/logs/test/Loss_avg ▅▆▆▆▅▆▆▆▇▆▅▇▁▁▂▃▄▃▃▄▄▅▅▅▅▄▅▄▅▄▅▆▆▅▆▇▇▇▇█
wandb:                 resnet18-usc-unsigned/baseline/prune_rate=1.0/146/logs/test/Loss_d_avg ▅▆▆▆▅▆▆▆▇▆▅▇▁▁▂▃▄▃▃▄▄▅▅▅▅▄▅▄▅▄▅▆▆▅▆▇▇▇▇█
wandb:                 resnet18-usc-unsigned/baseline/prune_rate=1.0/146/logs/test/Loss_d_val ▅▆▆▆▅▆▆▆▇▆▅▇▁▁▂▃▄▃▃▄▄▅▅▅▅▄▅▄▅▄▅▆▆▅▆▇▇▇▇█
wandb:                   resnet18-usc-unsigned/baseline/prune_rate=1.0/146/logs/test/Loss_val ▅▆▆▆▅▆▆▆▇▆▅▇▁▁▂▃▄▃▃▄▄▅▅▅▅▄▅▄▅▄▅▆▆▅▆▇▇▇▇█
wandb:               resnet18-usc-unsigned/baseline/prune_rate=1.0/146/logs/test/test_acc_avg ▁▁▁▂▃▃▃▃▄▅▅▄█▇█▇▇▇█▇▇▆▆▇▆▇▇▇█▆▇▇▇▇▇▇▇▇▇▇
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/146/logs/test/test_acc_d_avg ▁▁▁▂▃▃▃▃▄▅▅▄█▇█▇▇▇█▇▇▆▆▇▆▇▇▇█▆▇▇▇▇▇▇▇▇▇▇
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/146/logs/test/test_acc_d_val ▁▁▁▂▃▃▃▃▄▅▅▄█▇█▇▇▇█▇▇▆▆▇▆▇▇▇█▆▇▇▇▇▇▇▇▇▇▇
wandb:               resnet18-usc-unsigned/baseline/prune_rate=1.0/146/logs/test/test_acc_val ▁▁▁▂▃▃▃▃▄▅▅▄█▇█▇▇▇█▇▇▆▆▇▆▇▇▇█▆▇▇▇▇▇▇▇▇▇▇
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/146/logs/test/test_corr_d_avg ███▇▆▇▇▆▆▅▅▆▁▂▂▃▂▂▂▂▃▄▄▃▄▃▃▃▂▃▃▃▄▃▄▃▃▄▄▃
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/146/logs/test/test_corr_d_val ███▇▆▇▇▆▆▅▅▆▁▂▂▃▂▂▂▂▃▄▄▃▄▃▃▃▂▃▃▃▄▃▄▃▃▄▄▃
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/146/logs/test/test_majacc_avg ▇▇██▇██▇▇▆▆▆▂▁▂▄▃▃▂▃▃▄▅▅▅▁▄▄▂▄▂▂▂▁▄▄▃▄▂▃
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/146/logs/test/test_majacc_d_avg ▇▇██▇██▇▇▆▆▆▂▁▂▄▃▃▂▃▃▄▅▅▅▁▄▄▂▄▂▂▂▁▄▄▃▄▂▃
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/146/logs/test/test_majacc_d_val ▇▇██▇██▇▇▆▆▆▂▁▂▄▃▃▂▃▃▄▅▅▅▁▄▄▂▄▂▂▂▁▄▄▃▄▂▃
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/146/logs/test/test_majacc_val ▇▇██▇██▇▇▆▆▆▂▁▂▄▃▃▂▃▃▄▅▅▅▁▄▄▂▄▂▂▂▁▄▄▃▄▂▃
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/146/logs/test/test_minacc_avg ▁▁▁▂▃▃▃▃▄▅▅▄█▇█▇▇▇█▇▇▆▆▇▆▇▇▇█▆▇▇▇▇▇▇▇▇▇▇
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/146/logs/test/test_minacc_d_avg ▁▁▁▂▃▃▃▃▄▅▅▄█▇█▇▇▇█▇▇▆▆▇▆▇▇▇█▆▇▇▇▇▇▇▇▇▇▇
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/146/logs/test/test_minacc_d_val ▁▁▁▂▃▃▃▃▄▅▅▄█▇█▇▇▇█▇▇▆▆▇▆▇▇▇█▆▇▇▇▇▇▇▇▇▇▇
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/146/logs/test/test_minacc_val ▁▁▁▂▃▃▃▃▄▅▅▄█▇█▇▇▇█▇▇▆▆▇▆▇▇▇█▆▇▇▇▇▇▇▇▇▇▇
wandb:                  resnet18-usc-unsigned/baseline/prune_rate=1.0/146/logs/train/Loss_avg █▆▆▆▅▅▅▅▄▄▄▄▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:                  resnet18-usc-unsigned/baseline/prune_rate=1.0/146/logs/train/Loss_val █▇▇▇▆▆▆▅▅▅▅▄▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:                    resnet18-usc-unsigned/baseline/prune_rate=1.0/146/logs/train/l1_avg ▂▆▇▇▇▆▆▆▇▇▇█▇▃▂▂▁▁▂▂▂▄▄▄▄▂▃▁▃▂▁▃▄▂▄▅▄▄▅▄
wandb:                    resnet18-usc-unsigned/baseline/prune_rate=1.0/146/logs/train/l1_val ▃▇▇█▇▆▇▇▆▆▆█▅▂▂▁▄▂▂▃▁▁▃▃▂▁▃▁▇▁▄▃▂▁▁▅▅▃▃▇
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/146/logs/train/train_acc_avg ▁▄▄▅▅▅▆▆▇▇▇█▇▃▅▄▅▅▅▅▅▆▆▆▆▄▄▅▅▅▅▅▅▄▅▅▅▅▅▅
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/146/logs/train/train_acc_val ▂▃▄▅▅▅▅▆▇▇▇█▃▁▅▄▂▂▅▄▅▅▆▄▅▄▄▄▄▂▃▇▃▃▄▃▃▆▅▅
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/146/logs/train/train_corr_avg ▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/146/logs/train/train_corr_val ▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/146/logs/train/train_majacc_avg ▄██▇▇▇▆▆▇▇▇▇▆▁▃▂▃▃▃▃▃▃▃▄▃▂▂▃▃▂▃▃▃▂▂▃▂▂▃▂
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/146/logs/train/train_majacc_val ▆▇▇▇▇▇▆▆▆▆▆█▂▁▄▄▂▂▄▃▄▄▄▃▄▃▃▃▃▂▂▅▂▂▂▂▂▄▃▃
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/146/logs/train/train_minacc_avg ▂▁▁▂▃▄▄▅▅▅▅▆▆█▇█▇▇██▇██▇█▇█▇█▇██████████
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/146/logs/train/train_minacc_val ▁▁▃▂▃▃▄▅▆▆▆▄█▇▇▇▆▇▇▇█▇▇▇▇▇▇▇▇▇▇▇▇▇█▇▇███
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/146/logs/train/train_nll_avg █▅▄▄▃▃▂▂▂▂▁▁▂▅▃▄▃▃▃▂▂▂▂▂▂▃▃▃▂▃▃▂▂▃▂▂▂▂▂▂
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/146/logs/train/train_nll_val █▇▇▅▅▄▃▃▃▃▂▁▆█▅▅▆▆▄▄▃▃▄▅▄▅▅▆▅▆▅▂▄▄▄▄▅▃▃▄
wandb:         resnet18-usc-unsigned/baseline/prune_rate=1.0/146/logs/train/train_penalty_avg █▃▃▂▂▂▂▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:         resnet18-usc-unsigned/baseline/prune_rate=1.0/146/logs/train/train_penalty_val ▇█▇█▆▅▃▂▃▃▂▃▁▂▂▁▂▁▁▁▂▂▁▁▁▁▁▁▂▁▁▂▁▁▁▁▂▂▁▁
wandb:           resnet18-usc-unsigned/baseline/prune_rate=1.0/146/logs/train/weight_norm_avg ▁▅▅▅▆▆▆▆▆▆▇▇▇▇██████████████████████████
wandb:           resnet18-usc-unsigned/baseline/prune_rate=1.0/146/logs/train/weight_norm_val ▁▃▃▃▄▄▄▄▅▅▆▆▇▇▇▇▇▇▇▇▇▇▇▇▇▇██████████████
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/146/logs/train/zero_count_avg ▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/146/logs/train/zero_count_val ▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb: 
wandb: Run summary:
wandb:                                                                            global_step 49
wandb:      resnet18-usc-unsigned/baseline/prune_rate=1.0/146/logs/diagnostics/epoch_time_val 0.03827
wandb:      resnet18-usc-unsigned/baseline/prune_rate=1.0/146/logs/diagnostics/train_time_val 0.03785
wandb: resnet18-usc-unsigned/baseline/prune_rate=1.0/146/logs/diagnostics/validation_time_val 0.0004
wandb:                     resnet18-usc-unsigned/baseline/prune_rate=1.0/146/logs/global_step 49
wandb:                   resnet18-usc-unsigned/baseline/prune_rate=1.0/146/logs/test/Loss_avg 2.01729
wandb:                 resnet18-usc-unsigned/baseline/prune_rate=1.0/146/logs/test/Loss_d_avg 2.01729
wandb:                 resnet18-usc-unsigned/baseline/prune_rate=1.0/146/logs/test/Loss_d_val 2.01729
wandb:                   resnet18-usc-unsigned/baseline/prune_rate=1.0/146/logs/test/Loss_val 2.01729
wandb:               resnet18-usc-unsigned/baseline/prune_rate=1.0/146/logs/test/test_acc_avg 0.626
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/146/logs/test/test_acc_d_avg 0.626
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/146/logs/test/test_acc_d_val 0.626
wandb:               resnet18-usc-unsigned/baseline/prune_rate=1.0/146/logs/test/test_acc_val 0.626
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/146/logs/test/test_corr_d_avg 0.158
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/146/logs/test/test_corr_d_val 0.158
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/146/logs/test/test_majacc_avg 0.83
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/146/logs/test/test_majacc_d_avg 0.83
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/146/logs/test/test_majacc_d_val 0.83
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/146/logs/test/test_majacc_val 0.83
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/146/logs/test/test_minacc_avg 0.60333
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/146/logs/test/test_minacc_d_avg 0.60333
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/146/logs/test/test_minacc_d_val 0.60333
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/146/logs/test/test_minacc_val 0.60333
wandb:                  resnet18-usc-unsigned/baseline/prune_rate=1.0/146/logs/train/Loss_avg 0.00063
wandb:                  resnet18-usc-unsigned/baseline/prune_rate=1.0/146/logs/train/Loss_val 0.00049
wandb:                    resnet18-usc-unsigned/baseline/prune_rate=1.0/146/logs/train/l1_avg 8.11524
wandb:                    resnet18-usc-unsigned/baseline/prune_rate=1.0/146/logs/train/l1_val 8.64064
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/146/logs/train/train_acc_avg 0.8601
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/146/logs/train/train_acc_val 0.88
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/146/logs/train/train_corr_avg 0.0
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/146/logs/train/train_corr_val 0.0
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/146/logs/train/train_majacc_avg 0.85576
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/146/logs/train/train_majacc_val 0.87037
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/146/logs/train/train_minacc_avg 0.88551
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/146/logs/train/train_minacc_val 0.94118
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/146/logs/train/train_nll_avg 0.27381
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/146/logs/train/train_nll_val 0.27279
wandb:         resnet18-usc-unsigned/baseline/prune_rate=1.0/146/logs/train/train_penalty_avg 0.0006
wandb:         resnet18-usc-unsigned/baseline/prune_rate=1.0/146/logs/train/train_penalty_val 0.00046
wandb:           resnet18-usc-unsigned/baseline/prune_rate=1.0/146/logs/train/weight_norm_avg 24.57363
wandb:           resnet18-usc-unsigned/baseline/prune_rate=1.0/146/logs/train/weight_norm_val 24.5856
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/146/logs/train/zero_count_avg 0.0
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/146/logs/train/zero_count_val 0.0
wandb: 
wandb: 🚀 View run name_random at: https://wandb.ai/janezdu-uiuc/irm/runs/a0uxfwwz
wandb: ⭐️ View project at: https://wandb.ai/janezdu-uiuc/irm
wandb: Synced 5 W&B file(s), 0 media file(s), 2 artifact file(s) and 1 other file(s)
wandb: Find logs at: ./wandb/run-20240907_202303-a0uxfwwz/logs
wandb: WARNING The new W&B backend becomes opt-out in version 0.18.0; try it out with `wandb.require("core")`! See https://wandb.me/wandb-core for more information.
wandb: Currently logged in as: janezdu (janezdu-uiuc). Use `wandb login --relogin` to force relogin
wandb: wandb version 0.17.9 is available!  To upgrade, please run:
wandb:  $ pip install wandb --upgrade
wandb: Tracking run with wandb version 0.17.7
wandb: Run data is saved locally in /scratch/users/zd16/sparseIRM-resnet-ver/wandb/run-20240907_202551-46xyzaxj
wandb: Run `wandb offline` to turn off syncing.
wandb: Syncing run name_random
wandb: ⭐️ View project at https://wandb.ai/janezdu-uiuc/irm
wandb: 🚀 View run at https://wandb.ai/janezdu-uiuc/irm/runs/46xyzaxj
=> Reading YAML config from configs/smallscale/resnet18/resnet18-usc-unsigned.yaml
Namespace(data='dataset/', optimizer='adam', weight_opt='adam', set='mnistcifar', arch='ResNet18', config='configs/smallscale/resnet18/resnet18-usc-unsigned.yaml', log_dir=None, workers=4, epochs=50, start_epoch=None, batch_size=390, lr=0.006, warmup_length=0, momentum=0.9, weight_decay=0.0, print_freq=10, num_classes=1, resume='', resume_train_weights='', evaluate=False, pretrained=None, pretrained_distill=None, alpha_distill=0.95, T_distill=2, seed=0, multigpu=[0], lr_policy='cosine_lr', lr_adjust=30, lr_gamma=0.1, name='baseline', save_every=-1, prune_rate=1.0, param_prune_rate=0.0, pr_start=1.0, low_data=1, width_mult=1.0, nesterov=False, threetimes=False, random_subnet=False, one_batch=False, conv_type='DenseConv', freeze_weights=False, st=False, mode='fan_in', nonlinearity='relu', bn_type='LearnedBatchNorm', init='kaiming_normal', no_bn_decay=False, scale_fan=False, first_layer_dense=False, last_layer_dense=True, approx=False, zero=False, flip=False, bs=False, gumbel_sample=False, multiply_prob=False, no_multiply=False, multiply_cont=False, multiply_prob_bs=False, indiv=False, label_smoothing=None, first_layer_type=None, trainer='default', score_init_constant=1.0, K=1, update_freq=20, D=0.01, T=1, TA=True, TA2=False, TA_grow=False, center=False, straight_through=False, PLA_factor=0.1, PLA_patience=10, gradient_loss_para=0, abs_loss_para=0, thres=0.9, runs_name='name_random', resume_compare_loss1='', resume_compare_loss2='', init_weights='', trained_mask='', weight_rescaling=False, constrain_by_layer=False, weight_rescaling_data=False, use_running_stats=False, not_clipping=False, rescaling_para=False, lasso_para=0, dont_freeze_weights=False, iterative=True, prob_by_weight=False, rescale_at_fix_subnet=False, train_weights_at_the_same_time=False, sample_from_training_set=False, load_true_para=False, distill=False, finetune=False, stablize=False, prev_best=0, weight_opt_lr=0.0006, n=500, ts=0.28, te=0.6, d=20000, s=80, c=0.75, init_prob=False, thres_before=0.001, wide_ratio=0.001, noise=1, cal_p_q=False, just_finetune=False, snip=False, envs_num=2, l2_regularizer_weight=0.001, data_num=50000, env_type='linear', irm_type='irmv1', hidden_dim=390, penalty_anneal_iters=400, penalty_weight=10000.0, grayscale_model=0, weight_lr_schedule=False, fix_subnet=False, freeze_weight=False, step='ours', prior_sd_coef=0, dim_inv=2, variance_gamma=1.0, dim_spu=10, image_scale=32, cons_ratio='0.999_0.7_0.1', noise_ratio=0.2, step_gamma=0.1, step_round=3, inner_steps=1, use_pgd=False, z=15.0, pgd_anneal_iters=600, pgd_skip_steps=50, fraction_z=0.95)
=> Creating model 'ResNet18'
Here!!!!!!!!
==> Conv Type: DenseConv
==> BN Type: LearnedBatchNorm
<class 'torch.nn.modules.conv.Conv2d'>
<class 'torch.nn.modules.batchnorm.BatchNorm2d'>
==> Building first layer with <class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
ResNet(
  (conv1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
  (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (relu): ReLU(inplace=True)
  (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
  (layer1): Sequential(
    (0): BasicBlock(
      (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (1): BasicBlock(
      (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (layer2): Sequential(
    (0): BasicBlock(
      (conv1): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (downsample): Sequential(
        (0): Conv2d(64, 128, kernel_size=(1, 1), stride=(2, 2), bias=False)
        (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (1): BasicBlock(
      (conv1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (layer3): Sequential(
    (0): BasicBlock(
      (conv1): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (downsample): Sequential(
        (0): Conv2d(128, 256, kernel_size=(1, 1), stride=(2, 2), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (1): BasicBlock(
      (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (layer4): Sequential(
    (0): BasicBlock(
      (conv1): Conv2d(256, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (downsample): Sequential(
        (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (1): BasicBlock(
      (conv1): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (avgpool): AdaptiveAvgPool2d(output_size=1)
  (fc): Conv2d(512, 1, kernel_size=(1, 1), stride=(1, 1), bias=False)
)
=> Parallelizing on [0] gpus
<DEBUG> gradient to module.conv1.weight
<DEBUG> gradient to module.bn1.weight
<DEBUG> gradient to module.bn1.bias
<DEBUG> gradient to module.layer1.0.conv1.weight
<DEBUG> gradient to module.layer1.0.bn1.weight
<DEBUG> gradient to module.layer1.0.bn1.bias
<DEBUG> gradient to module.layer1.0.conv2.weight
<DEBUG> gradient to module.layer1.0.bn2.weight
<DEBUG> gradient to module.layer1.0.bn2.bias
<DEBUG> gradient to module.layer1.1.conv1.weight
<DEBUG> gradient to module.layer1.1.bn1.weight
<DEBUG> gradient to module.layer1.1.bn1.bias
<DEBUG> gradient to module.layer1.1.conv2.weight
<DEBUG> gradient to module.layer1.1.bn2.weight
<DEBUG> gradient to module.layer1.1.bn2.bias
<DEBUG> gradient to module.layer2.0.conv1.weight
<DEBUG> gradient to module.layer2.0.bn1.weight
<DEBUG> gradient to module.layer2.0.bn1.bias
<DEBUG> gradient to module.layer2.0.conv2.weight
<DEBUG> gradient to module.layer2.0.bn2.weight
<DEBUG> gradient to module.layer2.0.bn2.bias
<DEBUG> gradient to module.layer2.0.downsample.0.weight
<DEBUG> gradient to module.layer2.0.downsample.1.weight
<DEBUG> gradient to module.layer2.0.downsample.1.bias
<DEBUG> gradient to module.layer2.1.conv1.weight
<DEBUG> gradient to module.layer2.1.bn1.weight
<DEBUG> gradient to module.layer2.1.bn1.bias
<DEBUG> gradient to module.layer2.1.conv2.weight
<DEBUG> gradient to module.layer2.1.bn2.weight
<DEBUG> gradient to module.layer2.1.bn2.bias
<DEBUG> gradient to module.layer3.0.conv1.weight
<DEBUG> gradient to module.layer3.0.bn1.weight
<DEBUG> gradient to module.layer3.0.bn1.bias
<DEBUG> gradient to module.layer3.0.conv2.weight
<DEBUG> gradient to module.layer3.0.bn2.weight
<DEBUG> gradient to module.layer3.0.bn2.bias
<DEBUG> gradient to module.layer3.0.downsample.0.weight
<DEBUG> gradient to module.layer3.0.downsample.1.weight
<DEBUG> gradient to module.layer3.0.downsample.1.bias
<DEBUG> gradient to module.layer3.1.conv1.weight
<DEBUG> gradient to module.layer3.1.bn1.weight
<DEBUG> gradient to module.layer3.1.bn1.bias
<DEBUG> gradient to module.layer3.1.conv2.weight
<DEBUG> gradient to module.layer3.1.bn2.weight
<DEBUG> gradient to module.layer3.1.bn2.bias
<DEBUG> gradient to module.layer4.0.conv1.weight
<DEBUG> gradient to module.layer4.0.bn1.weight
<DEBUG> gradient to module.layer4.0.bn1.bias
<DEBUG> gradient to module.layer4.0.conv2.weight
<DEBUG> gradient to module.layer4.0.bn2.weight
<DEBUG> gradient to module.layer4.0.bn2.bias
<DEBUG> gradient to module.layer4.0.downsample.0.weight
<DEBUG> gradient to module.layer4.0.downsample.1.weight
<DEBUG> gradient to module.layer4.0.downsample.1.bias
<DEBUG> gradient to module.layer4.1.conv1.weight
<DEBUG> gradient to module.layer4.1.bn1.weight
<DEBUG> gradient to module.layer4.1.bn1.bias
<DEBUG> gradient to module.layer4.1.conv2.weight
<DEBUG> gradient to module.layer4.1.bn2.weight
<DEBUG> gradient to module.layer4.1.bn2.bias
<DEBUG> gradient to module.fc.weight
Files already downloaded and verified
Files already downloaded and verified
Adding Noise to Label, len(Y)=12000, Label_noise=1153
Xmp (7877, 3, 32, 32) (6903, 3, 32, 32)
Xcp (5973, 3, 32, 32) (6027, 3, 32, 32)
env=0 2497 2497 3 3
xn 2500 xp 2500
env=1 1750 1750 750 750
xn 2500 xp 2500
env=2 50 50 450 450
xn 500 xp 500
=> Creating model 'EBD'
EBD(
  (embedings): Embedding(2, 1)
)
=> Parallelizing on [0] gpus
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:01<00:37,  1.49s/it] 19%|#9        | 5/26 [00:01<00:05,  4.09it/s] 35%|###4      | 9/26 [00:01<00:02,  7.98it/s] 50%|#####     | 13/26 [00:01<00:01, 12.12it/s] 65%|######5   | 17/26 [00:01<00:00, 16.08it/s] 81%|########  | 21/26 [00:02<00:00, 19.79it/s] 96%|#########6| 25/26 [00:02<00:00, 22.82it/s]100%|##########| 26/26 [00:02<00:00, 10.06it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 0 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 2 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 3 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 4 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 5 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 6 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 7 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 8 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 9 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 10 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 11 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 12 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 13 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 14 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 15 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 16 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 17 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 18 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 19 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 20 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 21 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 22 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 23 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 24 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 25 400
penalty weights 0.0
Epoch: [0][  26/  26]	Loss 0.350 (0.529)	train_nll   0.35 (  0.53)	train_penalty   0.04 (  0.17)	weight_norm  20.88 ( 18.10)	train_acc   0.89 (  0.80)	train_minacc   0.04 (  0.09)	train_majacc   0.99 (  0.93)	train_corr   0.00 (  0.00)	l1 7.5414 (7.9068)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.36it/s] 12%|#1        | 3/26 [00:00<00:02, 10.39it/s] 31%|###       | 8/26 [00:00<00:00, 23.40it/s]                                               31%|###       | 8/26 [00:00<00:00, 23.40it/s] 50%|#####     | 13/26 [00:00<00:00, 31.25it/s] 69%|######9   | 18/26 [00:00<00:00, 36.35it/s]                                                69%|######9   | 18/26 [00:00<00:00, 36.35it/s] 88%|########8 | 23/26 [00:00<00:00, 36.43it/s]100%|##########| 26/26 [00:00<00:00, 29.73it/s]
Test: [   0/  26]	Loss 0.457 (0.457)	test_acc   0.83 (  0.83)	test_minacc   0.02 (  0.02)	test_majacc   0.99 (  0.99)	Loss_d 0.457 (0.457)	test_acc_d   0.83 (  0.83)	test_minacc_d   0.02 (  0.02)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.96 (  0.96)
Test: [  10/  26]	Loss 0.387 (0.412)	test_acc   0.87 (  0.85)	test_minacc   0.02 (  0.03)	test_majacc   0.99 (  0.99)	Loss_d 0.387 (0.412)	test_acc_d   0.87 (  0.85)	test_minacc_d   0.02 (  0.03)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.97 (  0.96)
Test: [  20/  26]	Loss 0.385 (0.413)	test_acc   0.86 (  0.84)	test_minacc   0.00 (  0.03)	test_majacc   0.99 (  0.99)	Loss_d 0.385 (0.413)	test_acc_d   0.86 (  0.84)	test_minacc_d   0.00 (  0.03)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.96 (  0.96)
Test: [  26/  26]	Loss 0.351 (0.410)	test_acc   0.89 (  0.85)	test_minacc   0.04 (  0.03)	test_majacc   0.99 (  0.99)	Loss_d 0.351 (0.410)	test_acc_d   0.89 (  0.85)	test_minacc_d   0.04 (  0.03)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.96 (  0.96)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00,  2.52it/s]100%|##########| 1/1 [00:00<00:00,  2.52it/s]
Test: [  0/  1]	Loss 1.628 (1.628)	test_acc   0.12 (  0.12)	test_minacc   0.02 (  0.02)	test_majacc   0.96 (  0.96)	Loss_d 1.628 (1.628)	test_acc_d   0.12 (  0.12)	test_minacc_d   0.02 (  0.02)	test_majacc_d   0.96 (  0.96)	test_corr_d   0.94 (  0.94)
Test: [  1/  1]	Loss 1.628 (1.628)	test_acc   0.12 (  0.12)	test_minacc   0.02 (  0.02)	test_majacc   0.96 (  0.96)	Loss_d 1.628 (1.628)	test_acc_d   0.12 (  0.12)	test_minacc_d   0.02 (  0.02)	test_majacc_d   0.96 (  0.96)	test_corr_d   0.94 (  0.94)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/148/checkpoints/model_best.pth
Overall Timing[  0/  1]	epoch_time 0.0776 (0.0776)	validation_time 0.0070 (0.0070)	train_time 0.0670 (0.0670)
record: (train_acc, test_acc) (0.8457000235915184, 0.11700000613927841)
last accs (train_acc, test_acc) (0.8457000235915184, 0.11700000613927841)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 19.86it/s] 19%|#9        | 5/26 [00:00<00:00, 25.40it/s] 35%|###4      | 9/26 [00:00<00:00, 29.61it/s] 50%|#####     | 13/26 [00:00<00:00, 31.20it/s] 65%|######5   | 17/26 [00:00<00:00, 32.14it/s] 81%|########  | 21/26 [00:00<00:00, 33.06it/s] 96%|#########6| 25/26 [00:00<00:00, 33.88it/s]100%|##########| 26/26 [00:00<00:00, 29.88it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 26 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 27 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 28 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 29 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 30 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 31 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 32 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 33 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 34 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 35 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 36 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 37 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 38 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 39 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 40 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 41 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 42 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 43 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 44 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 45 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 46 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 47 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 48 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 49 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 50 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 51 400
penalty weights 0.0
Epoch: [1][  26/  26]	Loss 0.331 (0.406)	train_nll   0.33 (  0.41)	train_penalty   0.04 (  0.05)	weight_norm  22.02 ( 21.67)	train_acc   0.88 (  0.85)	train_minacc   0.00 (  0.02)	train_majacc   0.99 (  0.99)	train_corr   0.00 (  0.00)	l1 7.9760 (7.7546)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.86it/s] 23%|##3       | 6/26 [00:00<00:00, 32.50it/s]                                               23%|##3       | 6/26 [00:00<00:00, 32.50it/s] 42%|####2     | 11/26 [00:00<00:00, 38.22it/s] 62%|######1   | 16/26 [00:00<00:00, 38.59it/s]                                                62%|######1   | 16/26 [00:00<00:00, 38.59it/s] 81%|########  | 21/26 [00:00<00:00, 39.64it/s]100%|##########| 26/26 [00:00<00:00, 42.34it/s]100%|##########| 26/26 [00:00<00:00, 35.08it/s]
Test: [   0/  26]	Loss 0.439 (0.439)	test_acc   0.83 (  0.83)	test_minacc   0.00 (  0.00)	test_majacc   1.00 (  1.00)	Loss_d 0.439 (0.439)	test_acc_d   0.83 (  0.83)	test_minacc_d   0.00 (  0.00)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.97 (  0.97)
Test: [  10/  26]	Loss 0.369 (0.396)	test_acc   0.87 (  0.85)	test_minacc   0.02 (  0.01)	test_majacc   1.00 (  1.00)	Loss_d 0.369 (0.396)	test_acc_d   0.87 (  0.85)	test_minacc_d   0.02 (  0.01)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.97 (  0.97)
Test: [  20/  26]	Loss 0.358 (0.396)	test_acc   0.86 (  0.85)	test_minacc   0.02 (  0.02)	test_majacc   0.99 (  1.00)	Loss_d 0.358 (0.396)	test_acc_d   0.86 (  0.85)	test_minacc_d   0.02 (  0.02)	test_majacc_d   0.99 (  1.00)	test_corr_d   0.96 (  0.97)
Test: [  26/  26]	Loss 0.327 (0.394)	test_acc   0.88 (  0.85)	test_minacc   0.00 (  0.01)	test_majacc   0.99 (  1.00)	Loss_d 0.327 (0.394)	test_acc_d   0.88 (  0.85)	test_minacc_d   0.00 (  0.01)	test_majacc_d   0.99 (  1.00)	test_corr_d   0.97 (  0.97)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.78it/s]
Test: [  0/  1]	Loss 1.719 (1.719)	test_acc   0.11 (  0.11)	test_minacc   0.01 (  0.01)	test_majacc   0.98 (  0.98)	Loss_d 1.719 (1.719)	test_acc_d   0.11 (  0.11)	test_minacc_d   0.01 (  0.01)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.95 (  0.95)
Test: [  1/  1]	Loss 1.719 (1.719)	test_acc   0.11 (  0.11)	test_minacc   0.01 (  0.01)	test_majacc   0.98 (  0.98)	Loss_d 1.719 (1.719)	test_acc_d   0.11 (  0.11)	test_minacc_d   0.01 (  0.01)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.95 (  0.95)
Overall Timing[  1/  1]	epoch_time 0.0420 (0.0598)	validation_time 0.0004 (0.0037)	train_time 0.0415 (0.0542)
record: (train_acc, test_acc) (0.8457000235915184, 0.11700000613927841)
last accs (train_acc, test_acc) (0.8485000243782997, 0.10900000482797623)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:05,  4.76it/s] 19%|#9        | 5/26 [00:00<00:01, 17.83it/s] 35%|###4      | 9/26 [00:00<00:00, 25.59it/s] 50%|#####     | 13/26 [00:00<00:00, 29.50it/s] 65%|######5   | 17/26 [00:00<00:00, 31.53it/s] 81%|########  | 21/26 [00:00<00:00, 33.17it/s] 96%|#########6| 25/26 [00:00<00:00, 33.76it/s]100%|##########| 26/26 [00:00<00:00, 26.98it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 52 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 53 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 54 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 55 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 56 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 57 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 58 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 59 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 60 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 61 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 62 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 63 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 64 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 65 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 66 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 67 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 68 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 69 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 70 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 71 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 72 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 73 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 74 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 75 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 76 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 77 400
penalty weights 0.0
Epoch: [2][  26/  26]	Loss 0.303 (0.388)	train_nll   0.30 (  0.39)	train_penalty   0.03 (  0.05)	weight_norm  22.13 ( 22.09)	train_acc   0.89 (  0.85)	train_minacc   0.04 (  0.03)	train_majacc   0.99 (  0.99)	train_corr   0.00 (  0.00)	l1 8.2116 (8.1139)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 16.31it/s] 19%|#9        | 5/26 [00:00<00:00, 22.14it/s] 38%|###8      | 10/26 [00:00<00:00, 33.52it/s]                                                38%|###8      | 10/26 [00:00<00:00, 33.52it/s] 58%|#####7    | 15/26 [00:00<00:00, 35.15it/s] 77%|#######6  | 20/26 [00:00<00:00, 39.17it/s]                                                77%|#######6  | 20/26 [00:00<00:00, 39.17it/s] 96%|#########6| 25/26 [00:00<00:00, 41.46it/s]100%|##########| 26/26 [00:00<00:00, 34.02it/s]
Test: [   0/  26]	Loss 0.397 (0.397)	test_acc   0.84 (  0.84)	test_minacc   0.08 (  0.08)	test_majacc   0.99 (  0.99)	Loss_d 0.397 (0.397)	test_acc_d   0.84 (  0.84)	test_minacc_d   0.08 (  0.08)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.94 (  0.94)
Test: [  10/  26]	Loss 0.350 (0.365)	test_acc   0.87 (  0.85)	test_minacc   0.08 (  0.09)	test_majacc   0.98 (  0.99)	Loss_d 0.350 (0.365)	test_acc_d   0.87 (  0.85)	test_minacc_d   0.08 (  0.09)	test_majacc_d   0.98 (  0.99)	test_corr_d   0.94 (  0.94)
Test: [  20/  26]	Loss 0.344 (0.364)	test_acc   0.87 (  0.85)	test_minacc   0.10 (  0.09)	test_majacc   0.99 (  0.99)	Loss_d 0.344 (0.364)	test_acc_d   0.87 (  0.85)	test_minacc_d   0.10 (  0.09)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.93 (  0.94)
Test: [  26/  26]	Loss 0.297 (0.362)	test_acc   0.90 (  0.85)	test_minacc   0.07 (  0.09)	test_majacc   1.00 (  0.99)	Loss_d 0.297 (0.362)	test_acc_d   0.90 (  0.85)	test_minacc_d   0.07 (  0.09)	test_majacc_d   1.00 (  0.99)	test_corr_d   0.95 (  0.94)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.10it/s]
Test: [  0/  1]	Loss 1.555 (1.555)	test_acc   0.17 (  0.17)	test_minacc   0.08 (  0.08)	test_majacc   0.98 (  0.98)	Loss_d 1.555 (1.555)	test_acc_d   0.17 (  0.17)	test_minacc_d   0.08 (  0.08)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.85 (  0.85)
Test: [  1/  1]	Loss 1.555 (1.555)	test_acc   0.17 (  0.17)	test_minacc   0.08 (  0.08)	test_majacc   0.98 (  0.98)	Loss_d 1.555 (1.555)	test_acc_d   0.17 (  0.17)	test_minacc_d   0.08 (  0.08)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.85 (  0.85)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/148/checkpoints/model_best.pth
Overall Timing[  2/  1]	epoch_time 0.0452 (0.0549)	validation_time 0.0003 (0.0026)	train_time 0.0448 (0.0511)
record: (train_acc, test_acc) (0.8533000243902207, 0.17000000178813934)
last accs (train_acc, test_acc) (0.8533000243902207, 0.17000000178813934)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.57it/s] 19%|#9        | 5/26 [00:00<00:01, 19.69it/s] 35%|###4      | 9/26 [00:00<00:00, 25.51it/s] 50%|#####     | 13/26 [00:00<00:00, 28.97it/s] 65%|######5   | 17/26 [00:00<00:00, 30.91it/s] 81%|########  | 21/26 [00:00<00:00, 32.27it/s] 96%|#########6| 25/26 [00:00<00:00, 33.38it/s]100%|##########| 26/26 [00:00<00:00, 27.58it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 78 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 79 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 80 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 81 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 82 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 83 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 84 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 85 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 86 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 87 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 88 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 89 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 90 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 91 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 92 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 93 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 94 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 95 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 96 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 97 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 98 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 99 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 100 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 101 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 102 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 103 400
penalty weights 0.0
Epoch: [3][  26/  26]	Loss 0.271 (0.364)	train_nll   0.27 (  0.36)	train_penalty   0.02 (  0.04)	weight_norm  22.18 ( 22.16)	train_acc   0.90 (  0.85)	train_minacc   0.19 (  0.13)	train_majacc   0.99 (  0.98)	train_corr   0.00 (  0.00)	l1 8.3507 (8.3145)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.65it/s] 19%|#9        | 5/26 [00:00<00:00, 21.48it/s] 38%|###8      | 10/26 [00:00<00:00, 31.66it/s]                                                38%|###8      | 10/26 [00:00<00:00, 31.66it/s] 58%|#####7    | 15/26 [00:00<00:00, 37.69it/s] 77%|#######6  | 20/26 [00:00<00:00, 37.69it/s]                                                77%|#######6  | 20/26 [00:00<00:00, 37.69it/s] 96%|#########6| 25/26 [00:00<00:00, 40.52it/s]100%|##########| 26/26 [00:00<00:00, 32.60it/s]
Test: [   0/  26]	Loss 0.346 (0.346)	test_acc   0.86 (  0.86)	test_minacc   0.26 (  0.26)	test_majacc   0.98 (  0.98)	Loss_d 0.346 (0.346)	test_acc_d   0.86 (  0.86)	test_minacc_d   0.26 (  0.26)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.90 (  0.90)
Test: [  10/  26]	Loss 0.320 (0.342)	test_acc   0.88 (  0.86)	test_minacc   0.24 (  0.23)	test_majacc   0.97 (  0.97)	Loss_d 0.320 (0.342)	test_acc_d   0.88 (  0.86)	test_minacc_d   0.24 (  0.23)	test_majacc_d   0.97 (  0.97)	test_corr_d   0.90 (  0.90)
Test: [  20/  26]	Loss 0.325 (0.341)	test_acc   0.87 (  0.86)	test_minacc   0.20 (  0.24)	test_majacc   0.97 (  0.97)	Loss_d 0.325 (0.341)	test_acc_d   0.87 (  0.86)	test_minacc_d   0.20 (  0.24)	test_majacc_d   0.97 (  0.97)	test_corr_d   0.91 (  0.90)
Test: [  26/  26]	Loss 0.271 (0.338)	test_acc   0.90 (  0.86)	test_minacc   0.22 (  0.24)	test_majacc   0.98 (  0.97)	Loss_d 0.271 (0.338)	test_acc_d   0.90 (  0.86)	test_minacc_d   0.22 (  0.24)	test_majacc_d   0.98 (  0.97)	test_corr_d   0.93 (  0.90)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 65.12it/s]
Test: [  0/  1]	Loss 1.528 (1.528)	test_acc   0.27 (  0.27)	test_minacc   0.20 (  0.20)	test_majacc   0.96 (  0.96)	Loss_d 1.528 (1.528)	test_acc_d   0.27 (  0.27)	test_minacc_d   0.20 (  0.20)	test_majacc_d   0.96 (  0.96)	test_corr_d   0.73 (  0.73)
Test: [  1/  1]	Loss 1.528 (1.528)	test_acc   0.27 (  0.27)	test_minacc   0.20 (  0.20)	test_majacc   0.96 (  0.96)	Loss_d 1.528 (1.528)	test_acc_d   0.27 (  0.27)	test_minacc_d   0.20 (  0.20)	test_majacc_d   0.96 (  0.96)	test_corr_d   0.73 (  0.73)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/148/checkpoints/model_best.pth
Overall Timing[  3/  1]	epoch_time 0.0483 (0.0533)	validation_time 0.0004 (0.0020)	train_time 0.0478 (0.0503)
record: (train_acc, test_acc) (0.8609000229835511, 0.27300000190734863)
last accs (train_acc, test_acc) (0.8609000229835511, 0.27300000190734863)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:05,  4.75it/s] 19%|#9        | 5/26 [00:00<00:01, 17.79it/s] 35%|###4      | 9/26 [00:00<00:00, 24.64it/s] 50%|#####     | 13/26 [00:00<00:00, 28.62it/s] 65%|######5   | 17/26 [00:00<00:00, 30.86it/s] 81%|########  | 21/26 [00:00<00:00, 32.29it/s] 96%|#########6| 25/26 [00:00<00:00, 32.96it/s]100%|##########| 26/26 [00:00<00:00, 26.53it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 104 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 105 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 106 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 107 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 108 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 109 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 110 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 111 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 112 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 113 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 114 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 115 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 116 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 117 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 118 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 119 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 120 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 121 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 122 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 123 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 124 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 125 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 126 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 127 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 128 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 129 400
penalty weights 0.0
Epoch: [4][  26/  26]	Loss 0.252 (0.343)	train_nll   0.25 (  0.34)	train_penalty   0.02 (  0.03)	weight_norm  22.23 ( 22.21)	train_acc   0.90 (  0.86)	train_minacc   0.22 (  0.22)	train_majacc   0.99 (  0.97)	train_corr   0.00 (  0.00)	l1 8.3060 (8.4392)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.28it/s] 23%|##3       | 6/26 [00:00<00:00, 28.50it/s]                                               23%|##3       | 6/26 [00:00<00:00, 28.50it/s] 42%|####2     | 11/26 [00:00<00:00, 35.73it/s] 62%|######1   | 16/26 [00:00<00:00, 39.72it/s]                                                62%|######1   | 16/26 [00:00<00:00, 39.72it/s] 81%|########  | 21/26 [00:00<00:00, 37.88it/s]100%|##########| 26/26 [00:00<00:00, 40.90it/s]100%|##########| 26/26 [00:00<00:00, 33.80it/s]
Test: [   0/  26]	Loss 0.344 (0.344)	test_acc   0.85 (  0.85)	test_minacc   0.17 (  0.17)	test_majacc   0.98 (  0.98)	Loss_d 0.344 (0.344)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.17 (  0.17)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.92 (  0.92)
Test: [  10/  26]	Loss 0.309 (0.335)	test_acc   0.86 (  0.85)	test_minacc   0.14 (  0.16)	test_majacc   0.97 (  0.98)	Loss_d 0.309 (0.335)	test_acc_d   0.86 (  0.85)	test_minacc_d   0.14 (  0.16)	test_majacc_d   0.97 (  0.98)	test_corr_d   0.92 (  0.92)
Test: [  20/  26]	Loss 0.323 (0.335)	test_acc   0.87 (  0.86)	test_minacc   0.14 (  0.17)	test_majacc   0.99 (  0.98)	Loss_d 0.323 (0.335)	test_acc_d   0.87 (  0.86)	test_minacc_d   0.14 (  0.17)	test_majacc_d   0.99 (  0.98)	test_corr_d   0.93 (  0.92)
Test: [  26/  26]	Loss 0.250 (0.331)	test_acc   0.91 (  0.86)	test_minacc   0.19 (  0.17)	test_majacc   1.00 (  0.98)	Loss_d 0.250 (0.331)	test_acc_d   0.91 (  0.86)	test_minacc_d   0.19 (  0.17)	test_majacc_d   1.00 (  0.98)	test_corr_d   0.94 (  0.92)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.39it/s]
Test: [  0/  1]	Loss 1.727 (1.727)	test_acc   0.22 (  0.22)	test_minacc   0.13 (  0.13)	test_majacc   0.99 (  0.99)	Loss_d 1.727 (1.727)	test_acc_d   0.22 (  0.22)	test_minacc_d   0.13 (  0.13)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.79 (  0.79)
Test: [  1/  1]	Loss 1.727 (1.727)	test_acc   0.22 (  0.22)	test_minacc   0.13 (  0.13)	test_majacc   0.99 (  0.99)	Loss_d 1.727 (1.727)	test_acc_d   0.22 (  0.22)	test_minacc_d   0.13 (  0.13)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.79 (  0.79)
Overall Timing[  4/  1]	epoch_time 0.0436 (0.0513)	validation_time 0.0005 (0.0017)	train_time 0.0431 (0.0488)
record: (train_acc, test_acc) (0.8609000229835511, 0.27300000190734863)
last accs (train_acc, test_acc) (0.8580000247359276, 0.2160000056028366)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.18it/s] 15%|#5        | 4/26 [00:00<00:01, 17.54it/s] 31%|###       | 8/26 [00:00<00:00, 25.04it/s] 46%|####6     | 12/26 [00:00<00:00, 28.28it/s] 62%|######1   | 16/26 [00:00<00:00, 30.29it/s] 77%|#######6  | 20/26 [00:00<00:00, 31.73it/s] 92%|#########2| 24/26 [00:00<00:00, 32.91it/s]100%|##########| 26/26 [00:00<00:00, 27.15it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 130 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 131 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 132 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 133 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 134 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 135 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 136 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 137 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 138 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 139 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 140 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 141 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 142 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 143 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 144 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 145 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 146 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 147 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 148 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 149 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 150 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 151 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 152 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 153 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 154 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 155 400
penalty weights 0.0
Epoch: [5][  26/  26]	Loss 0.244 (0.333)	train_nll   0.24 (  0.33)	train_penalty   0.02 (  0.03)	weight_norm  22.30 ( 22.26)	train_acc   0.89 (  0.86)	train_minacc   0.33 (  0.28)	train_majacc   0.96 (  0.96)	train_corr   0.00 (  0.00)	l1 8.2999 (8.4284)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.98it/s] 23%|##3       | 6/26 [00:00<00:00, 27.96it/s]                                               23%|##3       | 6/26 [00:00<00:00, 27.96it/s] 42%|####2     | 11/26 [00:00<00:00, 35.95it/s] 62%|######1   | 16/26 [00:00<00:00, 40.25it/s]                                                62%|######1   | 16/26 [00:00<00:00, 40.25it/s] 81%|########  | 21/26 [00:00<00:00, 39.89it/s]100%|##########| 26/26 [00:00<00:00, 42.19it/s]100%|##########| 26/26 [00:00<00:00, 34.48it/s]
Test: [   0/  26]	Loss 0.323 (0.323)	test_acc   0.85 (  0.85)	test_minacc   0.29 (  0.29)	test_majacc   0.96 (  0.96)	Loss_d 0.323 (0.323)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.29 (  0.29)	test_majacc_d   0.96 (  0.96)	test_corr_d   0.87 (  0.87)
Test: [  10/  26]	Loss 0.288 (0.312)	test_acc   0.88 (  0.87)	test_minacc   0.34 (  0.33)	test_majacc   0.96 (  0.96)	Loss_d 0.288 (0.312)	test_acc_d   0.88 (  0.87)	test_minacc_d   0.34 (  0.33)	test_majacc_d   0.96 (  0.96)	test_corr_d   0.88 (  0.87)
Test: [  20/  26]	Loss 0.296 (0.309)	test_acc   0.87 (  0.87)	test_minacc   0.24 (  0.32)	test_majacc   0.97 (  0.97)	Loss_d 0.296 (0.309)	test_acc_d   0.87 (  0.87)	test_minacc_d   0.24 (  0.32)	test_majacc_d   0.97 (  0.97)	test_corr_d   0.89 (  0.87)
Test: [  26/  26]	Loss 0.246 (0.307)	test_acc   0.91 (  0.87)	test_minacc   0.41 (  0.33)	test_majacc   0.97 (  0.97)	Loss_d 0.246 (0.307)	test_acc_d   0.91 (  0.87)	test_minacc_d   0.41 (  0.33)	test_majacc_d   0.97 (  0.97)	test_corr_d   0.90 (  0.87)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 64.28it/s]
Test: [  0/  1]	Loss 1.501 (1.501)	test_acc   0.32 (  0.32)	test_minacc   0.24 (  0.24)	test_majacc   0.98 (  0.98)	Loss_d 1.501 (1.501)	test_acc_d   0.32 (  0.32)	test_minacc_d   0.24 (  0.24)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.63 (  0.63)
Test: [  1/  1]	Loss 1.501 (1.501)	test_acc   0.32 (  0.32)	test_minacc   0.24 (  0.24)	test_majacc   0.98 (  0.98)	Loss_d 1.501 (1.501)	test_acc_d   0.32 (  0.32)	test_minacc_d   0.24 (  0.24)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.63 (  0.63)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/148/checkpoints/model_best.pth
Overall Timing[  5/  1]	epoch_time 0.0414 (0.0497)	validation_time 0.0004 (0.0015)	train_time 0.0409 (0.0475)
record: (train_acc, test_acc) (0.8708000262975693, 0.3150000274181366)
last accs (train_acc, test_acc) (0.8708000262975693, 0.3150000274181366)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.27it/s] 19%|#9        | 5/26 [00:00<00:00, 23.32it/s] 35%|###4      | 9/26 [00:00<00:00, 28.88it/s] 50%|#####     | 13/26 [00:00<00:00, 31.16it/s] 65%|######5   | 17/26 [00:00<00:00, 32.73it/s] 81%|########  | 21/26 [00:00<00:00, 33.54it/s] 96%|#########6| 25/26 [00:00<00:00, 34.23it/s]100%|##########| 26/26 [00:00<00:00, 29.04it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 156 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 157 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 158 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 159 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 160 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 161 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 162 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 163 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 164 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 165 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 166 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 167 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 168 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 169 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 170 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 171 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 172 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 173 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 174 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 175 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 176 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 177 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 178 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 179 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 180 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 181 400
penalty weights 0.0
Epoch: [6][  26/  26]	Loss 0.241 (0.306)	train_nll   0.24 (  0.31)	train_penalty   0.02 (  0.02)	weight_norm  22.38 ( 22.34)	train_acc   0.90 (  0.87)	train_minacc   0.33 (  0.35)	train_majacc   0.97 (  0.96)	train_corr   0.00 (  0.00)	l1 8.5050 (8.4738)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.03it/s] 23%|##3       | 6/26 [00:00<00:00, 29.12it/s]                                               23%|##3       | 6/26 [00:00<00:00, 29.12it/s] 42%|####2     | 11/26 [00:00<00:00, 37.00it/s] 65%|######5   | 17/26 [00:00<00:00, 39.93it/s]                                                65%|######5   | 17/26 [00:00<00:00, 39.93it/s] 85%|########4 | 22/26 [00:00<00:00, 42.09it/s]100%|##########| 26/26 [00:00<00:00, 35.07it/s]
Test: [   0/  26]	Loss 0.280 (0.280)	test_acc   0.89 (  0.89)	test_minacc   0.46 (  0.46)	test_majacc   0.97 (  0.97)	Loss_d 0.280 (0.280)	test_acc_d   0.89 (  0.89)	test_minacc_d   0.46 (  0.46)	test_majacc_d   0.97 (  0.97)	test_corr_d   0.85 (  0.85)
Test: [  10/  26]	Loss 0.287 (0.301)	test_acc   0.85 (  0.87)	test_minacc   0.34 (  0.41)	test_majacc   0.93 (  0.95)	Loss_d 0.287 (0.301)	test_acc_d   0.85 (  0.87)	test_minacc_d   0.34 (  0.41)	test_majacc_d   0.93 (  0.95)	test_corr_d   0.85 (  0.85)
Test: [  20/  26]	Loss 0.270 (0.299)	test_acc   0.89 (  0.87)	test_minacc   0.31 (  0.40)	test_majacc   0.97 (  0.96)	Loss_d 0.270 (0.299)	test_acc_d   0.89 (  0.87)	test_minacc_d   0.31 (  0.40)	test_majacc_d   0.97 (  0.96)	test_corr_d   0.88 (  0.85)
Test: [  26/  26]	Loss 0.215 (0.293)	test_acc   0.92 (  0.87)	test_minacc   0.41 (  0.41)	test_majacc   0.99 (  0.96)	Loss_d 0.215 (0.293)	test_acc_d   0.92 (  0.87)	test_minacc_d   0.41 (  0.41)	test_majacc_d   0.99 (  0.96)	test_corr_d   0.90 (  0.85)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 60.88it/s]
Test: [  0/  1]	Loss 1.673 (1.673)	test_acc   0.34 (  0.34)	test_minacc   0.27 (  0.27)	test_majacc   0.95 (  0.95)	Loss_d 1.673 (1.673)	test_acc_d   0.34 (  0.34)	test_minacc_d   0.27 (  0.27)	test_majacc_d   0.95 (  0.95)	test_corr_d   0.56 (  0.56)
Test: [  1/  1]	Loss 1.673 (1.673)	test_acc   0.34 (  0.34)	test_minacc   0.27 (  0.27)	test_majacc   0.95 (  0.95)	Loss_d 1.673 (1.673)	test_acc_d   0.34 (  0.34)	test_minacc_d   0.27 (  0.27)	test_majacc_d   0.95 (  0.95)	test_corr_d   0.56 (  0.56)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/148/checkpoints/model_best.pth
Overall Timing[  6/  1]	epoch_time 0.0436 (0.0488)	validation_time 0.0003 (0.0013)	train_time 0.0432 (0.0469)
record: (train_acc, test_acc) (0.8745000265836715, 0.3370000123977661)
last accs (train_acc, test_acc) (0.8745000265836715, 0.3370000123977661)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:02, 10.42it/s] 23%|##3       | 6/26 [00:00<00:00, 21.39it/s] 38%|###8      | 10/26 [00:00<00:00, 26.50it/s] 54%|#####3    | 14/26 [00:00<00:00, 29.61it/s] 69%|######9   | 18/26 [00:00<00:00, 31.24it/s] 85%|########4 | 22/26 [00:00<00:00, 31.85it/s]100%|##########| 26/26 [00:00<00:00, 33.05it/s]100%|##########| 26/26 [00:00<00:00, 27.42it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 182 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 183 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 184 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 185 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 186 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 187 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 188 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 189 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 190 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 191 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 192 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 193 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 194 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 195 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 196 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 197 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 198 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 199 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 200 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 201 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 202 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 203 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 204 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 205 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 206 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 207 400
penalty weights 0.0
Epoch: [7][  26/  26]	Loss 0.197 (0.289)	train_nll   0.20 (  0.29)	train_penalty   0.01 (  0.01)	weight_norm  22.50 ( 22.44)	train_acc   0.92 (  0.87)	train_minacc   0.48 (  0.42)	train_majacc   0.97 (  0.95)	train_corr   0.00 (  0.00)	l1 8.6755 (8.6018)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:00, 29.05it/s] 35%|###4      | 9/26 [00:00<00:00, 41.19it/s]                                               35%|###4      | 9/26 [00:00<00:00, 41.19it/s] 54%|#####3    | 14/26 [00:00<00:00, 43.12it/s] 73%|#######3  | 19/26 [00:00<00:00, 43.15it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 43.15it/s] 92%|#########2| 24/26 [00:00<00:00, 44.36it/s]100%|##########| 26/26 [00:00<00:00, 38.35it/s]
Test: [   0/  26]	Loss 0.247 (0.247)	test_acc   0.90 (  0.90)	test_minacc   0.52 (  0.52)	test_majacc   0.98 (  0.98)	Loss_d 0.247 (0.247)	test_acc_d   0.90 (  0.90)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.84 (  0.84)
Test: [  10/  26]	Loss 0.258 (0.284)	test_acc   0.88 (  0.88)	test_minacc   0.36 (  0.42)	test_majacc   0.96 (  0.96)	Loss_d 0.258 (0.284)	test_acc_d   0.88 (  0.88)	test_minacc_d   0.36 (  0.42)	test_majacc_d   0.96 (  0.96)	test_corr_d   0.85 (  0.85)
Test: [  20/  26]	Loss 0.251 (0.285)	test_acc   0.89 (  0.88)	test_minacc   0.33 (  0.40)	test_majacc   0.98 (  0.96)	Loss_d 0.251 (0.285)	test_acc_d   0.89 (  0.88)	test_minacc_d   0.33 (  0.40)	test_majacc_d   0.98 (  0.96)	test_corr_d   0.88 (  0.85)
Test: [  26/  26]	Loss 0.180 (0.278)	test_acc   0.92 (  0.88)	test_minacc   0.41 (  0.41)	test_majacc   0.98 (  0.96)	Loss_d 0.180 (0.278)	test_acc_d   0.92 (  0.88)	test_minacc_d   0.41 (  0.41)	test_majacc_d   0.98 (  0.96)	test_corr_d   0.89 (  0.85)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.55it/s]
Test: [  0/  1]	Loss 1.846 (1.846)	test_acc   0.34 (  0.34)	test_minacc   0.27 (  0.27)	test_majacc   0.96 (  0.96)	Loss_d 1.846 (1.846)	test_acc_d   0.34 (  0.34)	test_minacc_d   0.27 (  0.27)	test_majacc_d   0.96 (  0.96)	test_corr_d   0.59 (  0.59)
Test: [  1/  1]	Loss 1.846 (1.846)	test_acc   0.34 (  0.34)	test_minacc   0.27 (  0.27)	test_majacc   0.96 (  0.96)	Loss_d 1.846 (1.846)	test_acc_d   0.34 (  0.34)	test_minacc_d   0.27 (  0.27)	test_majacc_d   0.96 (  0.96)	test_corr_d   0.59 (  0.59)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/148/checkpoints/model_best.pth
Overall Timing[  7/  1]	epoch_time 0.0455 (0.0484)	validation_time 0.0004 (0.0012)	train_time 0.0450 (0.0467)
record: (train_acc, test_acc) (0.8786000285744667, 0.33800002932548523)
last accs (train_acc, test_acc) (0.8786000285744667, 0.33800002932548523)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.52it/s] 19%|#9        | 5/26 [00:00<00:01, 19.59it/s] 35%|###4      | 9/26 [00:00<00:00, 25.61it/s] 50%|#####     | 13/26 [00:00<00:00, 28.95it/s] 65%|######5   | 17/26 [00:00<00:00, 31.01it/s] 81%|########  | 21/26 [00:00<00:00, 32.35it/s] 96%|#########6| 25/26 [00:00<00:00, 32.98it/s]100%|##########| 26/26 [00:00<00:00, 27.35it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 208 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 209 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 210 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 211 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 212 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 213 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 214 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 215 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 216 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 217 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 218 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 219 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 220 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 221 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 222 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 223 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 224 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 225 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 226 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 227 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 228 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 229 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 230 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 231 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 232 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 233 400
penalty weights 0.0
Epoch: [8][  26/  26]	Loss 0.220 (0.296)	train_nll   0.22 (  0.30)	train_penalty   0.01 (  0.02)	weight_norm  22.70 ( 22.59)	train_acc   0.93 (  0.88)	train_minacc   0.67 (  0.43)	train_majacc   0.96 (  0.96)	train_corr   0.00 (  0.00)	l1 8.4413 (8.6127)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.41it/s] 27%|##6       | 7/26 [00:00<00:00, 30.84it/s]                                               27%|##6       | 7/26 [00:00<00:00, 30.84it/s] 50%|#####     | 13/26 [00:00<00:00, 38.99it/s] 69%|######9   | 18/26 [00:00<00:00, 41.06it/s]                                                69%|######9   | 18/26 [00:00<00:00, 41.06it/s] 88%|########8 | 23/26 [00:00<00:00, 42.58it/s]100%|##########| 26/26 [00:00<00:00, 35.77it/s]
Test: [   0/  26]	Loss 0.275 (0.275)	test_acc   0.89 (  0.89)	test_minacc   0.58 (  0.58)	test_majacc   0.96 (  0.96)	Loss_d 0.275 (0.275)	test_acc_d   0.89 (  0.89)	test_minacc_d   0.58 (  0.58)	test_majacc_d   0.96 (  0.96)	test_corr_d   0.82 (  0.82)
Test: [  10/  26]	Loss 0.303 (0.284)	test_acc   0.87 (  0.88)	test_minacc   0.48 (  0.55)	test_majacc   0.93 (  0.94)	Loss_d 0.303 (0.284)	test_acc_d   0.87 (  0.88)	test_minacc_d   0.48 (  0.55)	test_majacc_d   0.93 (  0.94)	test_corr_d   0.83 (  0.82)
Test: [  20/  26]	Loss 0.256 (0.282)	test_acc   0.89 (  0.88)	test_minacc   0.53 (  0.55)	test_majacc   0.94 (  0.94)	Loss_d 0.256 (0.282)	test_acc_d   0.89 (  0.88)	test_minacc_d   0.53 (  0.55)	test_majacc_d   0.94 (  0.94)	test_corr_d   0.85 (  0.83)
Test: [  26/  26]	Loss 0.197 (0.278)	test_acc   0.93 (  0.88)	test_minacc   0.56 (  0.55)	test_majacc   0.97 (  0.94)	Loss_d 0.197 (0.278)	test_acc_d   0.93 (  0.88)	test_minacc_d   0.56 (  0.55)	test_majacc_d   0.97 (  0.94)	test_corr_d   0.87 (  0.83)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 60.11it/s]
Test: [  0/  1]	Loss 1.579 (1.579)	test_acc   0.36 (  0.36)	test_minacc   0.30 (  0.30)	test_majacc   0.90 (  0.90)	Loss_d 1.579 (1.579)	test_acc_d   0.36 (  0.36)	test_minacc_d   0.30 (  0.30)	test_majacc_d   0.90 (  0.90)	test_corr_d   0.58 (  0.58)
Test: [  1/  1]	Loss 1.579 (1.579)	test_acc   0.36 (  0.36)	test_minacc   0.30 (  0.30)	test_majacc   0.90 (  0.90)	Loss_d 1.579 (1.579)	test_acc_d   0.36 (  0.36)	test_minacc_d   0.30 (  0.30)	test_majacc_d   0.90 (  0.90)	test_corr_d   0.58 (  0.58)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/148/checkpoints/model_best.pth
Overall Timing[  8/  1]	epoch_time 0.0394 (0.0474)	validation_time 0.0004 (0.0011)	train_time 0.0389 (0.0458)
record: (train_acc, test_acc) (0.8833000227808953, 0.3580000102519989)
last accs (train_acc, test_acc) (0.8833000227808953, 0.3580000102519989)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.86it/s] 19%|#9        | 5/26 [00:00<00:00, 25.96it/s] 35%|###4      | 9/26 [00:00<00:00, 31.36it/s] 50%|#####     | 13/26 [00:00<00:00, 33.72it/s] 65%|######5   | 17/26 [00:00<00:00, 35.17it/s] 81%|########  | 21/26 [00:00<00:00, 36.07it/s] 96%|#########6| 25/26 [00:00<00:00, 35.82it/s]100%|##########| 26/26 [00:00<00:00, 30.74it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 234 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 235 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 236 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 237 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 238 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 239 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 240 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 241 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 242 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 243 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 244 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 245 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 246 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 247 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 248 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 249 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 250 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 251 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 252 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 253 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 254 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 255 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 256 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 257 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 258 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 259 400
penalty weights 0.0
Epoch: [9][  26/  26]	Loss 0.212 (0.287)	train_nll   0.21 (  0.29)	train_penalty   0.01 (  0.01)	weight_norm  22.87 ( 22.79)	train_acc   0.91 (  0.88)	train_minacc   0.41 (  0.46)	train_majacc   0.97 (  0.95)	train_corr   0.00 (  0.00)	l1 8.0656 (8.4193)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.13it/s]  8%|7         | 2/26 [00:00<00:03,  7.80it/s] 27%|##6       | 7/26 [00:00<00:00, 23.59it/s]                                               27%|##6       | 7/26 [00:00<00:00, 23.59it/s] 46%|####6     | 12/26 [00:00<00:00, 31.88it/s] 65%|######5   | 17/26 [00:00<00:00, 36.72it/s]                                                65%|######5   | 17/26 [00:00<00:00, 36.72it/s] 85%|########4 | 22/26 [00:00<00:00, 35.71it/s]100%|##########| 26/26 [00:00<00:00, 30.70it/s]
Test: [   0/  26]	Loss 0.267 (0.267)	test_acc   0.90 (  0.90)	test_minacc   0.49 (  0.49)	test_majacc   0.98 (  0.98)	Loss_d 0.267 (0.267)	test_acc_d   0.90 (  0.90)	test_minacc_d   0.49 (  0.49)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.87 (  0.87)
Test: [  10/  26]	Loss 0.265 (0.269)	test_acc   0.91 (  0.89)	test_minacc   0.48 (  0.43)	test_majacc   0.97 (  0.97)	Loss_d 0.265 (0.269)	test_acc_d   0.91 (  0.89)	test_minacc_d   0.48 (  0.43)	test_majacc_d   0.97 (  0.97)	test_corr_d   0.89 (  0.88)
Test: [  20/  26]	Loss 0.261 (0.271)	test_acc   0.88 (  0.89)	test_minacc   0.33 (  0.43)	test_majacc   0.96 (  0.97)	Loss_d 0.261 (0.271)	test_acc_d   0.88 (  0.89)	test_minacc_d   0.33 (  0.43)	test_majacc_d   0.96 (  0.97)	test_corr_d   0.90 (  0.88)
Test: [  26/  26]	Loss 0.192 (0.268)	test_acc   0.93 (  0.89)	test_minacc   0.56 (  0.44)	test_majacc   0.97 (  0.97)	Loss_d 0.192 (0.268)	test_acc_d   0.93 (  0.89)	test_minacc_d   0.56 (  0.44)	test_majacc_d   0.97 (  0.97)	test_corr_d   0.90 (  0.88)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.08it/s]
Test: [  0/  1]	Loss 1.677 (1.677)	test_acc   0.29 (  0.29)	test_minacc   0.22 (  0.22)	test_majacc   0.94 (  0.94)	Loss_d 1.677 (1.677)	test_acc_d   0.29 (  0.29)	test_minacc_d   0.22 (  0.22)	test_majacc_d   0.94 (  0.94)	test_corr_d   0.71 (  0.71)
Test: [  1/  1]	Loss 1.677 (1.677)	test_acc   0.29 (  0.29)	test_minacc   0.22 (  0.22)	test_majacc   0.94 (  0.94)	Loss_d 1.677 (1.677)	test_acc_d   0.29 (  0.29)	test_minacc_d   0.22 (  0.22)	test_majacc_d   0.94 (  0.94)	test_corr_d   0.71 (  0.71)
Overall Timing[  9/  1]	epoch_time 0.0429 (0.0469)	validation_time 0.0004 (0.0011)	train_time 0.0426 (0.0455)
record: (train_acc, test_acc) (0.8833000227808953, 0.3580000102519989)
last accs (train_acc, test_acc) (0.8897000270485877, 0.2900000214576721)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.59it/s] 19%|#9        | 5/26 [00:00<00:00, 21.71it/s] 35%|###4      | 9/26 [00:00<00:00, 28.26it/s] 50%|#####     | 13/26 [00:00<00:00, 31.73it/s] 65%|######5   | 17/26 [00:00<00:00, 34.06it/s] 81%|########  | 21/26 [00:00<00:00, 35.75it/s] 96%|#########6| 25/26 [00:00<00:00, 34.82it/s]100%|##########| 26/26 [00:00<00:00, 29.21it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 260 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 261 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 262 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 263 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 264 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 265 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 266 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 267 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 268 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 269 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 270 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 271 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 272 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 273 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 274 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 275 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 276 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 277 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 278 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 279 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 280 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 281 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 282 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 283 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 284 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 285 400
penalty weights 0.0
Epoch: [10][  26/  26]	Loss 0.176 (0.262)	train_nll   0.18 (  0.26)	train_penalty   0.01 (  0.01)	weight_norm  23.02 ( 22.95)	train_acc   0.93 (  0.89)	train_minacc   0.63 (  0.53)	train_majacc   0.96 (  0.96)	train_corr   0.00 (  0.00)	l1 8.3178 (8.4645)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:00, 24.74it/s] 31%|###       | 8/26 [00:00<00:00, 36.69it/s]                                               31%|###       | 8/26 [00:00<00:00, 36.69it/s] 50%|#####     | 13/26 [00:00<00:00, 39.82it/s] 69%|######9   | 18/26 [00:00<00:00, 41.33it/s]                                                69%|######9   | 18/26 [00:00<00:00, 41.33it/s] 88%|########8 | 23/26 [00:00<00:00, 40.50it/s]100%|##########| 26/26 [00:00<00:00, 37.39it/s]
Test: [   0/  26]	Loss 0.213 (0.213)	test_acc   0.92 (  0.92)	test_minacc   0.63 (  0.63)	test_majacc   0.98 (  0.98)	Loss_d 0.213 (0.213)	test_acc_d   0.92 (  0.92)	test_minacc_d   0.63 (  0.63)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.84 (  0.84)
Test: [  10/  26]	Loss 0.237 (0.230)	test_acc   0.91 (  0.91)	test_minacc   0.60 (  0.61)	test_majacc   0.96 (  0.96)	Loss_d 0.237 (0.230)	test_acc_d   0.91 (  0.91)	test_minacc_d   0.60 (  0.61)	test_majacc_d   0.96 (  0.96)	test_corr_d   0.84 (  0.84)
Test: [  20/  26]	Loss 0.228 (0.234)	test_acc   0.90 (  0.91)	test_minacc   0.59 (  0.60)	test_majacc   0.95 (  0.96)	Loss_d 0.228 (0.234)	test_acc_d   0.90 (  0.91)	test_minacc_d   0.59 (  0.60)	test_majacc_d   0.95 (  0.96)	test_corr_d   0.84 (  0.84)
Test: [  26/  26]	Loss 0.156 (0.229)	test_acc   0.94 (  0.91)	test_minacc   0.78 (  0.61)	test_majacc   0.96 (  0.96)	Loss_d 0.156 (0.229)	test_acc_d   0.94 (  0.91)	test_minacc_d   0.78 (  0.61)	test_majacc_d   0.96 (  0.96)	test_corr_d   0.86 (  0.84)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.10it/s]
Test: [  0/  1]	Loss 1.713 (1.713)	test_acc   0.37 (  0.37)	test_minacc   0.30 (  0.30)	test_majacc   0.94 (  0.94)	Loss_d 1.713 (1.713)	test_acc_d   0.37 (  0.37)	test_minacc_d   0.30 (  0.30)	test_majacc_d   0.94 (  0.94)	test_corr_d   0.59 (  0.59)
Test: [  1/  1]	Loss 1.713 (1.713)	test_acc   0.37 (  0.37)	test_minacc   0.30 (  0.30)	test_majacc   0.94 (  0.94)	Loss_d 1.713 (1.713)	test_acc_d   0.37 (  0.37)	test_minacc_d   0.30 (  0.30)	test_majacc_d   0.94 (  0.94)	test_corr_d   0.59 (  0.59)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/148/checkpoints/model_best.pth
Overall Timing[ 10/  1]	epoch_time 0.0403 (0.0463)	validation_time 0.0005 (0.0010)	train_time 0.0398 (0.0450)
record: (train_acc, test_acc) (0.9080000279545783, 0.3680000305175781)
last accs (train_acc, test_acc) (0.9080000279545783, 0.3680000305175781)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  6.18it/s] 19%|#9        | 5/26 [00:00<00:01, 20.21it/s] 35%|###4      | 9/26 [00:00<00:00, 26.35it/s] 50%|#####     | 13/26 [00:00<00:00, 29.86it/s] 65%|######5   | 17/26 [00:00<00:00, 32.15it/s] 81%|########  | 21/26 [00:00<00:00, 33.49it/s] 96%|#########6| 25/26 [00:00<00:00, 34.19it/s]100%|##########| 26/26 [00:00<00:00, 28.13it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 286 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 287 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 288 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 289 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 290 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 291 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 292 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 293 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 294 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 295 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 296 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 297 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 298 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 299 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 300 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 301 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 302 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 303 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 304 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 305 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 306 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 307 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 308 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 309 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 310 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 311 400
penalty weights 0.0
Epoch: [11][  26/  26]	Loss 0.159 (0.230)	train_nll   0.16 (  0.23)	train_penalty   0.01 (  0.01)	weight_norm  23.21 ( 23.11)	train_acc   0.94 (  0.91)	train_minacc   0.59 (  0.63)	train_majacc   0.98 (  0.96)	train_corr   0.00 (  0.00)	l1 8.4446 (8.6708)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:00, 25.60it/s] 35%|###4      | 9/26 [00:00<00:00, 41.57it/s]                                               35%|###4      | 9/26 [00:00<00:00, 41.57it/s] 54%|#####3    | 14/26 [00:00<00:00, 44.00it/s] 73%|#######3  | 19/26 [00:00<00:00, 43.69it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 43.69it/s] 92%|#########2| 24/26 [00:00<00:00, 42.11it/s]100%|##########| 26/26 [00:00<00:00, 38.93it/s]
Test: [   0/  26]	Loss 0.221 (0.221)	test_acc   0.92 (  0.92)	test_minacc   0.62 (  0.62)	test_majacc   0.98 (  0.98)	Loss_d 0.221 (0.221)	test_acc_d   0.92 (  0.92)	test_minacc_d   0.62 (  0.62)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.83 (  0.83)
Test: [  10/  26]	Loss 0.219 (0.228)	test_acc   0.92 (  0.91)	test_minacc   0.68 (  0.59)	test_majacc   0.96 (  0.97)	Loss_d 0.219 (0.228)	test_acc_d   0.92 (  0.91)	test_minacc_d   0.68 (  0.59)	test_majacc_d   0.96 (  0.97)	test_corr_d   0.84 (  0.84)
Test: [  20/  26]	Loss 0.215 (0.229)	test_acc   0.91 (  0.91)	test_minacc   0.59 (  0.58)	test_majacc   0.96 (  0.97)	Loss_d 0.215 (0.229)	test_acc_d   0.91 (  0.91)	test_minacc_d   0.59 (  0.58)	test_majacc_d   0.96 (  0.97)	test_corr_d   0.85 (  0.84)
Test: [  26/  26]	Loss 0.134 (0.221)	test_acc   0.96 (  0.91)	test_minacc   0.74 (  0.59)	test_majacc   0.98 (  0.97)	Loss_d 0.134 (0.221)	test_acc_d   0.96 (  0.91)	test_minacc_d   0.74 (  0.59)	test_majacc_d   0.98 (  0.97)	test_corr_d   0.86 (  0.84)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 64.85it/s]
Test: [  0/  1]	Loss 1.929 (1.929)	test_acc   0.35 (  0.35)	test_minacc   0.29 (  0.29)	test_majacc   0.92 (  0.92)	Loss_d 1.929 (1.929)	test_acc_d   0.35 (  0.35)	test_minacc_d   0.29 (  0.29)	test_majacc_d   0.92 (  0.92)	test_corr_d   0.61 (  0.61)
Test: [  1/  1]	Loss 1.929 (1.929)	test_acc   0.35 (  0.35)	test_minacc   0.29 (  0.29)	test_majacc   0.92 (  0.92)	Loss_d 1.929 (1.929)	test_acc_d   0.35 (  0.35)	test_minacc_d   0.29 (  0.29)	test_majacc_d   0.92 (  0.92)	test_corr_d   0.61 (  0.61)
Overall Timing[ 11/  1]	epoch_time 0.0388 (0.0457)	validation_time 0.0004 (0.0010)	train_time 0.0384 (0.0444)
record: (train_acc, test_acc) (0.9080000279545783, 0.3680000305175781)
last accs (train_acc, test_acc) (0.9108000211119652, 0.3500000238418579)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.55it/s] 15%|#5        | 4/26 [00:00<00:01, 12.96it/s] 31%|###       | 8/26 [00:00<00:00, 20.70it/s] 46%|####6     | 12/26 [00:00<00:00, 25.35it/s] 62%|######1   | 16/26 [00:00<00:00, 28.70it/s] 77%|#######6  | 20/26 [00:00<00:00, 30.65it/s] 92%|#########2| 24/26 [00:00<00:00, 32.13it/s]100%|##########| 26/26 [00:01<00:00, 25.16it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 312 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 313 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 314 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 315 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 316 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 317 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 318 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 319 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 320 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 321 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 322 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 323 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 324 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 325 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 326 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 327 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 328 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 329 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 330 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 331 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 332 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 333 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 334 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 335 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 336 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 337 400
penalty weights 0.0
Epoch: [12][  26/  26]	Loss 0.159 (0.220)	train_nll   0.16 (  0.22)	train_penalty   0.01 (  0.01)	weight_norm  23.45 ( 23.33)	train_acc   0.93 (  0.91)	train_minacc   0.59 (  0.65)	train_majacc   0.97 (  0.96)	train_corr   0.00 (  0.00)	l1 8.6784 (8.8960)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:05,  4.91it/s] 23%|##3       | 6/26 [00:00<00:00, 21.67it/s]                                               23%|##3       | 6/26 [00:00<00:00, 21.67it/s] 42%|####2     | 11/26 [00:00<00:00, 30.99it/s] 62%|######1   | 16/26 [00:00<00:00, 36.94it/s]                                                62%|######1   | 16/26 [00:00<00:00, 36.94it/s] 81%|########  | 21/26 [00:00<00:00, 38.38it/s]100%|##########| 26/26 [00:00<00:00, 40.75it/s]100%|##########| 26/26 [00:00<00:00, 31.05it/s]
Test: [   0/  26]	Loss 0.200 (0.200)	test_acc   0.94 (  0.94)	test_minacc   0.77 (  0.77)	test_majacc   0.98 (  0.98)	Loss_d 0.200 (0.200)	test_acc_d   0.94 (  0.94)	test_minacc_d   0.77 (  0.77)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.81 (  0.81)
Test: [  10/  26]	Loss 0.190 (0.208)	test_acc   0.93 (  0.92)	test_minacc   0.66 (  0.65)	test_majacc   0.96 (  0.97)	Loss_d 0.190 (0.208)	test_acc_d   0.93 (  0.92)	test_minacc_d   0.66 (  0.65)	test_majacc_d   0.96 (  0.97)	test_corr_d   0.84 (  0.82)
Test: [  20/  26]	Loss 0.186 (0.204)	test_acc   0.93 (  0.92)	test_minacc   0.71 (  0.65)	test_majacc   0.97 (  0.97)	Loss_d 0.186 (0.204)	test_acc_d   0.93 (  0.92)	test_minacc_d   0.71 (  0.65)	test_majacc_d   0.97 (  0.97)	test_corr_d   0.83 (  0.82)
Test: [  26/  26]	Loss 0.106 (0.198)	test_acc   0.97 (  0.93)	test_minacc   0.78 (  0.66)	test_majacc   0.99 (  0.97)	Loss_d 0.106 (0.198)	test_acc_d   0.97 (  0.93)	test_minacc_d   0.78 (  0.66)	test_majacc_d   0.99 (  0.97)	test_corr_d   0.85 (  0.82)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 59.65it/s]
Test: [  0/  1]	Loss 2.022 (2.022)	test_acc   0.33 (  0.33)	test_minacc   0.26 (  0.26)	test_majacc   0.96 (  0.96)	Loss_d 2.022 (2.022)	test_acc_d   0.33 (  0.33)	test_minacc_d   0.26 (  0.26)	test_majacc_d   0.96 (  0.96)	test_corr_d   0.64 (  0.64)
Test: [  1/  1]	Loss 2.022 (2.022)	test_acc   0.33 (  0.33)	test_minacc   0.26 (  0.26)	test_majacc   0.96 (  0.96)	Loss_d 2.022 (2.022)	test_acc_d   0.33 (  0.33)	test_minacc_d   0.26 (  0.26)	test_majacc_d   0.96 (  0.96)	test_corr_d   0.64 (  0.64)
Overall Timing[ 12/  1]	epoch_time 0.0391 (0.0452)	validation_time 0.0005 (0.0009)	train_time 0.0386 (0.0440)
record: (train_acc, test_acc) (0.9080000279545783, 0.3680000305175781)
last accs (train_acc, test_acc) (0.9259000208377838, 0.3330000042915344)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.81it/s] 19%|#9        | 5/26 [00:00<00:00, 25.70it/s] 35%|###4      | 9/26 [00:00<00:00, 31.22it/s] 50%|#####     | 13/26 [00:00<00:00, 33.44it/s] 65%|######5   | 17/26 [00:00<00:00, 35.34it/s] 81%|########  | 21/26 [00:00<00:00, 34.83it/s] 96%|#########6| 25/26 [00:00<00:00, 34.59it/s]100%|##########| 26/26 [00:00<00:00, 30.37it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 338 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 339 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 340 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 341 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 342 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 343 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 344 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 345 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 346 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 347 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 348 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 349 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 350 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 351 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 352 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 353 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 354 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 355 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 356 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 357 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 358 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 359 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 360 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 361 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 362 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 363 400
penalty weights 0.0
Epoch: [13][  26/  26]	Loss 0.165 (0.219)	train_nll   0.17 (  0.22)	train_penalty   0.01 (  0.01)	weight_norm  23.77 ( 23.61)	train_acc   0.95 (  0.92)	train_minacc   0.67 (  0.66)	train_majacc   0.98 (  0.96)	train_corr   0.00 (  0.00)	l1 8.4903 (9.0528)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 16.54it/s] 27%|##6       | 7/26 [00:00<00:00, 33.12it/s]                                               27%|##6       | 7/26 [00:00<00:00, 33.12it/s] 46%|####6     | 12/26 [00:00<00:00, 38.82it/s] 65%|######5   | 17/26 [00:00<00:00, 41.65it/s]                                                65%|######5   | 17/26 [00:00<00:00, 41.65it/s] 85%|########4 | 22/26 [00:00<00:00, 39.85it/s]100%|##########| 26/26 [00:00<00:00, 36.79it/s]
Test: [   0/  26]	Loss 0.220 (0.220)	test_acc   0.93 (  0.93)	test_minacc   0.63 (  0.63)	test_majacc   0.98 (  0.98)	Loss_d 0.220 (0.220)	test_acc_d   0.93 (  0.93)	test_minacc_d   0.63 (  0.63)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.84 (  0.84)
Test: [  10/  26]	Loss 0.208 (0.214)	test_acc   0.92 (  0.92)	test_minacc   0.56 (  0.59)	test_majacc   0.97 (  0.97)	Loss_d 0.208 (0.214)	test_acc_d   0.92 (  0.92)	test_minacc_d   0.56 (  0.59)	test_majacc_d   0.97 (  0.97)	test_corr_d   0.86 (  0.84)
Test: [  20/  26]	Loss 0.178 (0.211)	test_acc   0.92 (  0.92)	test_minacc   0.57 (  0.60)	test_majacc   0.97 (  0.97)	Loss_d 0.178 (0.211)	test_acc_d   0.92 (  0.92)	test_minacc_d   0.57 (  0.60)	test_majacc_d   0.97 (  0.97)	test_corr_d   0.86 (  0.84)
Test: [  26/  26]	Loss 0.123 (0.206)	test_acc   0.96 (  0.92)	test_minacc   0.74 (  0.62)	test_majacc   0.99 (  0.97)	Loss_d 0.123 (0.206)	test_acc_d   0.96 (  0.92)	test_minacc_d   0.74 (  0.62)	test_majacc_d   0.99 (  0.97)	test_corr_d   0.87 (  0.84)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.81it/s]
Test: [  0/  1]	Loss 2.055 (2.055)	test_acc   0.33 (  0.33)	test_minacc   0.26 (  0.26)	test_majacc   0.96 (  0.96)	Loss_d 2.055 (2.055)	test_acc_d   0.33 (  0.33)	test_minacc_d   0.26 (  0.26)	test_majacc_d   0.96 (  0.96)	test_corr_d   0.63 (  0.63)
Test: [  1/  1]	Loss 2.055 (2.055)	test_acc   0.33 (  0.33)	test_minacc   0.26 (  0.26)	test_majacc   0.96 (  0.96)	Loss_d 2.055 (2.055)	test_acc_d   0.33 (  0.33)	test_minacc_d   0.26 (  0.26)	test_majacc_d   0.96 (  0.96)	test_corr_d   0.63 (  0.63)
Overall Timing[ 13/  1]	epoch_time 0.0408 (0.0449)	validation_time 0.0005 (0.0009)	train_time 0.0403 (0.0437)
record: (train_acc, test_acc) (0.9080000279545783, 0.3680000305175781)
last accs (train_acc, test_acc) (0.9198000209927559, 0.3270000219345093)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.04it/s] 15%|#5        | 4/26 [00:00<00:01, 13.15it/s] 35%|###4      | 9/26 [00:00<00:00, 23.74it/s] 50%|#####     | 13/26 [00:00<00:00, 28.04it/s] 65%|######5   | 17/26 [00:00<00:00, 30.34it/s] 81%|########  | 21/26 [00:00<00:00, 31.54it/s] 96%|#########6| 25/26 [00:00<00:00, 32.20it/s]100%|##########| 26/26 [00:00<00:00, 26.18it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 364 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 365 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 366 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 367 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 368 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 369 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 370 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 371 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 372 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 373 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 374 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 375 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 376 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 377 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 378 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 379 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 380 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 381 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 382 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 383 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 384 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 385 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 386 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 387 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 388 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 389 400
penalty weights 0.0
Epoch: [14][  26/  26]	Loss 0.128 (0.201)	train_nll   0.13 (  0.20)	train_penalty   0.00 (  0.01)	weight_norm  24.10 ( 23.94)	train_acc   0.94 (  0.92)	train_minacc   0.70 (  0.69)	train_majacc   0.97 (  0.96)	train_corr   0.00 (  0.00)	l1 9.0721 (9.0181)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.57it/s] 15%|#5        | 4/26 [00:00<00:01, 14.52it/s] 35%|###4      | 9/26 [00:00<00:00, 26.45it/s]                                               35%|###4      | 9/26 [00:00<00:00, 26.45it/s] 54%|#####3    | 14/26 [00:00<00:00, 33.69it/s] 73%|#######3  | 19/26 [00:00<00:00, 37.84it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 37.84it/s] 92%|#########2| 24/26 [00:00<00:00, 38.89it/s]100%|##########| 26/26 [00:00<00:00, 31.23it/s]
Test: [   0/  26]	Loss 0.217 (0.217)	test_acc   0.92 (  0.92)	test_minacc   0.60 (  0.60)	test_majacc   0.98 (  0.98)	Loss_d 0.217 (0.217)	test_acc_d   0.92 (  0.92)	test_minacc_d   0.60 (  0.60)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.84 (  0.84)
Test: [  10/  26]	Loss 0.184 (0.199)	test_acc   0.93 (  0.92)	test_minacc   0.66 (  0.59)	test_majacc   0.97 (  0.98)	Loss_d 0.184 (0.199)	test_acc_d   0.93 (  0.92)	test_minacc_d   0.66 (  0.59)	test_majacc_d   0.97 (  0.98)	test_corr_d   0.85 (  0.85)
Test: [  20/  26]	Loss 0.130 (0.191)	test_acc   0.96 (  0.93)	test_minacc   0.78 (  0.61)	test_majacc   0.98 (  0.98)	Loss_d 0.130 (0.191)	test_acc_d   0.96 (  0.93)	test_minacc_d   0.78 (  0.61)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.85 (  0.85)
Test: [  26/  26]	Loss 0.097 (0.185)	test_acc   0.98 (  0.93)	test_minacc   0.93 (  0.63)	test_majacc   0.99 (  0.98)	Loss_d 0.097 (0.185)	test_acc_d   0.98 (  0.93)	test_minacc_d   0.93 (  0.63)	test_majacc_d   0.99 (  0.98)	test_corr_d   0.85 (  0.85)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 60.59it/s]
Test: [  0/  1]	Loss 2.397 (2.397)	test_acc   0.30 (  0.30)	test_minacc   0.24 (  0.24)	test_majacc   0.91 (  0.91)	Loss_d 2.397 (2.397)	test_acc_d   0.30 (  0.30)	test_minacc_d   0.24 (  0.24)	test_majacc_d   0.91 (  0.91)	test_corr_d   0.66 (  0.66)
Test: [  1/  1]	Loss 2.397 (2.397)	test_acc   0.30 (  0.30)	test_minacc   0.24 (  0.24)	test_majacc   0.91 (  0.91)	Loss_d 2.397 (2.397)	test_acc_d   0.30 (  0.30)	test_minacc_d   0.24 (  0.24)	test_majacc_d   0.91 (  0.91)	test_corr_d   0.66 (  0.66)
Overall Timing[ 14/  1]	epoch_time 0.0417 (0.0447)	validation_time 0.0004 (0.0009)	train_time 0.0413 (0.0435)
record: (train_acc, test_acc) (0.9080000279545783, 0.3680000305175781)
last accs (train_acc, test_acc) (0.9285000177025795, 0.30300000309944153)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 17.54it/s] 23%|##3       | 6/26 [00:00<00:00, 27.40it/s] 38%|###8      | 10/26 [00:00<00:00, 30.83it/s] 54%|#####3    | 14/26 [00:00<00:00, 32.37it/s] 69%|######9   | 18/26 [00:00<00:00, 31.99it/s] 85%|########4 | 22/26 [00:00<00:00, 33.30it/s]100%|##########| 26/26 [00:00<00:00, 33.82it/s]100%|##########| 26/26 [00:00<00:00, 29.65it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 390 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 391 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 392 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 393 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 394 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 395 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 396 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 397 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 398 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 399 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 400 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 401 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 402 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 403 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 404 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 405 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 406 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 407 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 408 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 409 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 410 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 411 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 412 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 413 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 414 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 415 400
penalty weights 10000.0
Epoch: [15][  26/  26]	Loss 0.003 (0.076)	train_nll   0.27 (  0.22)	train_penalty   0.00 (  0.00)	weight_norm  24.36 ( 24.25)	train_acc   0.86 (  0.91)	train_minacc   0.85 (  0.77)	train_majacc   0.87 (  0.94)	train_corr   0.00 (  0.00)	l1 8.0966 (8.9867)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:00, 26.64it/s] 31%|###       | 8/26 [00:00<00:00, 36.26it/s]                                               31%|###       | 8/26 [00:00<00:00, 36.26it/s] 50%|#####     | 13/26 [00:00<00:00, 39.88it/s] 69%|######9   | 18/26 [00:00<00:00, 42.85it/s]                                                69%|######9   | 18/26 [00:00<00:00, 42.85it/s] 88%|########8 | 23/26 [00:00<00:00, 42.92it/s]100%|##########| 26/26 [00:00<00:00, 37.43it/s]
Test: [   0/  26]	Loss 0.276 (0.276)	test_acc   0.88 (  0.88)	test_minacc   0.82 (  0.82)	test_majacc   0.89 (  0.89)	Loss_d 0.276 (0.276)	test_acc_d   0.88 (  0.88)	test_minacc_d   0.82 (  0.82)	test_majacc_d   0.89 (  0.89)	test_corr_d   0.67 (  0.67)
Test: [  10/  26]	Loss 0.278 (0.257)	test_acc   0.87 (  0.89)	test_minacc   0.82 (  0.87)	test_majacc   0.88 (  0.90)	Loss_d 0.278 (0.257)	test_acc_d   0.87 (  0.89)	test_minacc_d   0.82 (  0.87)	test_majacc_d   0.88 (  0.90)	test_corr_d   0.68 (  0.66)
Test: [  20/  26]	Loss 0.245 (0.250)	test_acc   0.89 (  0.90)	test_minacc   0.86 (  0.87)	test_majacc   0.90 (  0.90)	Loss_d 0.245 (0.250)	test_acc_d   0.89 (  0.90)	test_minacc_d   0.86 (  0.87)	test_majacc_d   0.90 (  0.90)	test_corr_d   0.69 (  0.67)
Test: [  26/  26]	Loss 0.282 (0.255)	test_acc   0.86 (  0.89)	test_minacc   0.85 (  0.87)	test_majacc   0.86 (  0.90)	Loss_d 0.282 (0.255)	test_acc_d   0.86 (  0.89)	test_minacc_d   0.85 (  0.87)	test_majacc_d   0.86 (  0.90)	test_corr_d   0.68 (  0.67)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.85it/s]
Test: [  0/  1]	Loss 1.228 (1.228)	test_acc   0.56 (  0.56)	test_minacc   0.52 (  0.52)	test_majacc   0.91 (  0.91)	Loss_d 1.228 (1.228)	test_acc_d   0.56 (  0.56)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.91 (  0.91)	test_corr_d   0.20 (  0.20)
Test: [  1/  1]	Loss 1.228 (1.228)	test_acc   0.56 (  0.56)	test_minacc   0.52 (  0.52)	test_majacc   0.91 (  0.91)	Loss_d 1.228 (1.228)	test_acc_d   0.56 (  0.56)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.91 (  0.91)	test_corr_d   0.20 (  0.20)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/148/checkpoints/model_best.pth
Overall Timing[ 15/  1]	epoch_time 0.0421 (0.0445)	validation_time 0.0007 (0.0008)	train_time 0.0414 (0.0434)
record: (train_acc, test_acc) (0.8907000207304955, 0.5590000152587891)
last accs (train_acc, test_acc) (0.8907000207304955, 0.5590000152587891)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.68it/s] 19%|#9        | 5/26 [00:00<00:01, 20.70it/s] 35%|###4      | 9/26 [00:00<00:00, 26.90it/s] 50%|#####     | 13/26 [00:00<00:00, 30.34it/s] 65%|######5   | 17/26 [00:00<00:00, 31.69it/s] 81%|########  | 21/26 [00:00<00:00, 33.05it/s] 96%|#########6| 25/26 [00:00<00:00, 33.77it/s]100%|##########| 26/26 [00:00<00:00, 28.07it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 416 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 417 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 418 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 419 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 420 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 421 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 422 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 423 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 424 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 425 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 426 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 427 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 428 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 429 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 430 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 431 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 432 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 433 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 434 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 435 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 436 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 437 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 438 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 439 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 440 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 441 400
penalty weights 10000.0
Epoch: [16][  26/  26]	Loss 0.000 (0.002)	train_nll   0.36 (  0.33)	train_penalty   0.00 (  0.00)	weight_norm  24.41 ( 24.40)	train_acc   0.83 (  0.84)	train_minacc   0.74 (  0.80)	train_majacc   0.84 (  0.85)	train_corr   0.00 (  0.00)	l1 7.6335 (7.9277)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.40it/s] 23%|##3       | 6/26 [00:00<00:00, 26.75it/s]                                               23%|##3       | 6/26 [00:00<00:00, 26.75it/s] 42%|####2     | 11/26 [00:00<00:00, 34.40it/s] 62%|######1   | 16/26 [00:00<00:00, 38.59it/s]                                                62%|######1   | 16/26 [00:00<00:00, 38.59it/s] 81%|########  | 21/26 [00:00<00:00, 37.36it/s]100%|##########| 26/26 [00:00<00:00, 40.37it/s]100%|##########| 26/26 [00:00<00:00, 32.80it/s]
Test: [   0/  26]	Loss 0.383 (0.383)	test_acc   0.82 (  0.82)	test_minacc   0.74 (  0.74)	test_majacc   0.84 (  0.84)	Loss_d 0.383 (0.383)	test_acc_d   0.82 (  0.82)	test_minacc_d   0.74 (  0.74)	test_majacc_d   0.84 (  0.84)	test_corr_d   0.63 (  0.63)
Test: [  10/  26]	Loss 0.325 (0.333)	test_acc   0.85 (  0.84)	test_minacc   0.82 (  0.80)	test_majacc   0.85 (  0.85)	Loss_d 0.325 (0.333)	test_acc_d   0.85 (  0.84)	test_minacc_d   0.82 (  0.80)	test_majacc_d   0.85 (  0.85)	test_corr_d   0.66 (  0.63)
Test: [  20/  26]	Loss 0.328 (0.329)	test_acc   0.83 (  0.84)	test_minacc   0.78 (  0.80)	test_majacc   0.84 (  0.85)	Loss_d 0.328 (0.329)	test_acc_d   0.83 (  0.84)	test_minacc_d   0.78 (  0.80)	test_majacc_d   0.84 (  0.85)	test_corr_d   0.64 (  0.63)
Test: [  26/  26]	Loss 0.356 (0.332)	test_acc   0.83 (  0.84)	test_minacc   0.74 (  0.80)	test_majacc   0.84 (  0.85)	Loss_d 0.356 (0.332)	test_acc_d   0.83 (  0.84)	test_minacc_d   0.74 (  0.80)	test_majacc_d   0.84 (  0.85)	test_corr_d   0.67 (  0.63)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.33it/s]
Test: [  0/  1]	Loss 1.170 (1.170)	test_acc   0.56 (  0.56)	test_minacc   0.52 (  0.52)	test_majacc   0.90 (  0.90)	Loss_d 1.170 (1.170)	test_acc_d   0.56 (  0.56)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.90 (  0.90)	test_corr_d   0.21 (  0.21)
Test: [  1/  1]	Loss 1.170 (1.170)	test_acc   0.56 (  0.56)	test_minacc   0.52 (  0.52)	test_majacc   0.90 (  0.90)	Loss_d 1.170 (1.170)	test_acc_d   0.56 (  0.56)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.90 (  0.90)	test_corr_d   0.21 (  0.21)
Overall Timing[ 16/  1]	epoch_time 0.0395 (0.0442)	validation_time 0.0004 (0.0008)	train_time 0.0391 (0.0432)
record: (train_acc, test_acc) (0.8907000207304955, 0.5590000152587891)
last accs (train_acc, test_acc) (0.8432000234723092, 0.5580000281333923)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.02it/s] 19%|#9        | 5/26 [00:00<00:00, 22.12it/s] 35%|###4      | 9/26 [00:00<00:00, 27.96it/s] 50%|#####     | 13/26 [00:00<00:00, 30.69it/s] 65%|######5   | 17/26 [00:00<00:00, 32.34it/s] 81%|########  | 21/26 [00:00<00:00, 33.59it/s] 96%|#########6| 25/26 [00:00<00:00, 33.97it/s]100%|##########| 26/26 [00:00<00:00, 27.95it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 442 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 443 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 444 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 445 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 446 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 447 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 448 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 449 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 450 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 451 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 452 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 453 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 454 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 455 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 456 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 457 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 458 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 459 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 460 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 461 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 462 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 463 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 464 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 465 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 466 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 467 400
penalty weights 10000.0
Epoch: [17][  26/  26]	Loss 0.002 (0.003)	train_nll   0.36 (  0.36)	train_penalty   0.00 (  0.00)	weight_norm  24.44 ( 24.43)	train_acc   0.82 (  0.83)	train_minacc   0.74 (  0.84)	train_majacc   0.83 (  0.83)	train_corr   0.00 (  0.00)	l1 7.6077 (7.5289)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.68it/s] 23%|##3       | 6/26 [00:00<00:00, 31.74it/s]                                               23%|##3       | 6/26 [00:00<00:00, 31.74it/s] 42%|####2     | 11/26 [00:00<00:00, 37.44it/s] 62%|######1   | 16/26 [00:00<00:00, 41.36it/s]                                                62%|######1   | 16/26 [00:00<00:00, 41.36it/s] 81%|########  | 21/26 [00:00<00:00, 39.02it/s]100%|##########| 26/26 [00:00<00:00, 41.75it/s]100%|##########| 26/26 [00:00<00:00, 35.38it/s]
Test: [   0/  26]	Loss 0.392 (0.392)	test_acc   0.82 (  0.82)	test_minacc   0.68 (  0.68)	test_majacc   0.85 (  0.85)	Loss_d 0.392 (0.392)	test_acc_d   0.82 (  0.82)	test_minacc_d   0.68 (  0.68)	test_majacc_d   0.85 (  0.85)	test_corr_d   0.65 (  0.65)
Test: [  10/  26]	Loss 0.298 (0.338)	test_acc   0.87 (  0.85)	test_minacc   0.82 (  0.77)	test_majacc   0.88 (  0.86)	Loss_d 0.298 (0.338)	test_acc_d   0.87 (  0.85)	test_minacc_d   0.82 (  0.77)	test_majacc_d   0.88 (  0.86)	test_corr_d   0.70 (  0.65)
Test: [  20/  26]	Loss 0.317 (0.337)	test_acc   0.86 (  0.85)	test_minacc   0.82 (  0.77)	test_majacc   0.86 (  0.86)	Loss_d 0.317 (0.337)	test_acc_d   0.86 (  0.85)	test_minacc_d   0.82 (  0.77)	test_majacc_d   0.86 (  0.86)	test_corr_d   0.66 (  0.65)
Test: [  26/  26]	Loss 0.340 (0.336)	test_acc   0.84 (  0.85)	test_minacc   0.74 (  0.77)	test_majacc   0.85 (  0.86)	Loss_d 0.340 (0.336)	test_acc_d   0.84 (  0.85)	test_minacc_d   0.74 (  0.77)	test_majacc_d   0.85 (  0.86)	test_corr_d   0.69 (  0.65)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.08it/s]
Test: [  0/  1]	Loss 1.310 (1.310)	test_acc   0.55 (  0.55)	test_minacc   0.51 (  0.51)	test_majacc   0.90 (  0.90)	Loss_d 1.310 (1.310)	test_acc_d   0.55 (  0.55)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.90 (  0.90)	test_corr_d   0.22 (  0.22)
Test: [  1/  1]	Loss 1.310 (1.310)	test_acc   0.55 (  0.55)	test_minacc   0.51 (  0.51)	test_majacc   0.90 (  0.90)	Loss_d 1.310 (1.310)	test_acc_d   0.55 (  0.55)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.90 (  0.90)	test_corr_d   0.22 (  0.22)
Overall Timing[ 17/  1]	epoch_time 0.0399 (0.0440)	validation_time 0.0007 (0.0008)	train_time 0.0393 (0.0429)
record: (train_acc, test_acc) (0.8907000207304955, 0.5590000152587891)
last accs (train_acc, test_acc) (0.8473000271320343, 0.5460000038146973)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 16.11it/s] 23%|##3       | 6/26 [00:00<00:00, 28.76it/s] 42%|####2     | 11/26 [00:00<00:00, 34.03it/s] 58%|#####7    | 15/26 [00:00<00:00, 34.23it/s] 73%|#######3  | 19/26 [00:00<00:00, 34.78it/s] 88%|########8 | 23/26 [00:00<00:00, 35.12it/s]100%|##########| 26/26 [00:00<00:00, 31.21it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 468 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 469 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 470 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 471 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 472 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 473 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 474 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 475 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 476 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 477 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 478 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 479 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 480 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 481 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 482 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 483 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 484 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 485 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 486 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 487 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 488 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 489 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 490 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 491 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 492 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 493 400
penalty weights 10000.0
Epoch: [18][  26/  26]	Loss 0.001 (0.004)	train_nll   0.40 (  0.35)	train_penalty   0.00 (  0.00)	weight_norm  24.46 ( 24.45)	train_acc   0.80 (  0.84)	train_minacc   0.85 (  0.79)	train_majacc   0.79 (  0.85)	train_corr   0.00 (  0.00)	l1 6.7922 (7.2858)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.39it/s] 23%|##3       | 6/26 [00:00<00:00, 26.97it/s]                                               23%|##3       | 6/26 [00:00<00:00, 26.97it/s] 42%|####2     | 11/26 [00:00<00:00, 34.62it/s] 62%|######1   | 16/26 [00:00<00:00, 39.73it/s]                                                62%|######1   | 16/26 [00:00<00:00, 39.73it/s] 81%|########  | 21/26 [00:00<00:00, 38.48it/s]100%|##########| 26/26 [00:00<00:00, 41.59it/s]100%|##########| 26/26 [00:00<00:00, 33.47it/s]
Test: [   0/  26]	Loss 0.431 (0.431)	test_acc   0.79 (  0.79)	test_minacc   0.71 (  0.71)	test_majacc   0.81 (  0.81)	Loss_d 0.431 (0.431)	test_acc_d   0.79 (  0.79)	test_minacc_d   0.71 (  0.71)	test_majacc_d   0.81 (  0.81)	test_corr_d   0.63 (  0.63)
Test: [  10/  26]	Loss 0.376 (0.395)	test_acc   0.84 (  0.81)	test_minacc   0.84 (  0.80)	test_majacc   0.84 (  0.82)	Loss_d 0.376 (0.395)	test_acc_d   0.84 (  0.81)	test_minacc_d   0.84 (  0.80)	test_majacc_d   0.84 (  0.82)	test_corr_d   0.66 (  0.63)
Test: [  20/  26]	Loss 0.384 (0.389)	test_acc   0.83 (  0.82)	test_minacc   0.84 (  0.80)	test_majacc   0.82 (  0.82)	Loss_d 0.384 (0.389)	test_acc_d   0.83 (  0.82)	test_minacc_d   0.84 (  0.80)	test_majacc_d   0.82 (  0.82)	test_corr_d   0.66 (  0.64)
Test: [  26/  26]	Loss 0.396 (0.389)	test_acc   0.79 (  0.82)	test_minacc   0.81 (  0.80)	test_majacc   0.79 (  0.82)	Loss_d 0.396 (0.389)	test_acc_d   0.79 (  0.82)	test_minacc_d   0.81 (  0.80)	test_majacc_d   0.79 (  0.82)	test_corr_d   0.66 (  0.64)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.76it/s]
Test: [  0/  1]	Loss 1.111 (1.111)	test_acc   0.57 (  0.57)	test_minacc   0.54 (  0.54)	test_majacc   0.85 (  0.85)	Loss_d 1.111 (1.111)	test_acc_d   0.57 (  0.57)	test_minacc_d   0.54 (  0.54)	test_majacc_d   0.85 (  0.85)	test_corr_d   0.20 (  0.20)
Test: [  1/  1]	Loss 1.111 (1.111)	test_acc   0.57 (  0.57)	test_minacc   0.54 (  0.54)	test_majacc   0.85 (  0.85)	Loss_d 1.111 (1.111)	test_acc_d   0.57 (  0.57)	test_minacc_d   0.54 (  0.54)	test_majacc_d   0.85 (  0.85)	test_corr_d   0.20 (  0.20)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/148/checkpoints/model_best.pth
Overall Timing[ 18/  1]	epoch_time 0.0405 (0.0438)	validation_time 0.0003 (0.0008)	train_time 0.0401 (0.0428)
record: (train_acc, test_acc) (0.8180000258684158, 0.5710000395774841)
last accs (train_acc, test_acc) (0.8180000258684158, 0.5710000395774841)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.14it/s] 19%|#9        | 5/26 [00:00<00:00, 22.31it/s] 35%|###4      | 9/26 [00:00<00:00, 28.75it/s] 54%|#####3    | 14/26 [00:00<00:00, 33.97it/s] 73%|#######3  | 19/26 [00:00<00:00, 36.66it/s] 92%|#########2| 24/26 [00:00<00:00, 38.57it/s]100%|##########| 26/26 [00:00<00:00, 31.56it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 494 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 495 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 496 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 497 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 498 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 499 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 500 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 501 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 502 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 503 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 504 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 505 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 506 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 507 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 508 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 509 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 510 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 511 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 512 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 513 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 514 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 515 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 516 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 517 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 518 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 519 400
penalty weights 10000.0
Epoch: [19][  26/  26]	Loss 0.002 (0.002)	train_nll   0.46 (  0.43)	train_penalty   0.00 (  0.00)	weight_norm  24.47 ( 24.46)	train_acc   0.76 (  0.79)	train_minacc   0.81 (  0.80)	train_majacc   0.76 (  0.79)	train_corr   0.00 (  0.00)	l1 6.7460 (6.6923)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.80it/s] 23%|##3       | 6/26 [00:00<00:00, 27.51it/s]                                               23%|##3       | 6/26 [00:00<00:00, 27.51it/s] 42%|####2     | 11/26 [00:00<00:00, 35.83it/s] 62%|######1   | 16/26 [00:00<00:00, 40.12it/s]                                                62%|######1   | 16/26 [00:00<00:00, 40.12it/s] 81%|########  | 21/26 [00:00<00:00, 37.25it/s]100%|##########| 26/26 [00:00<00:00, 33.66it/s]
Test: [   0/  26]	Loss 0.424 (0.424)	test_acc   0.78 (  0.78)	test_minacc   0.75 (  0.75)	test_majacc   0.79 (  0.79)	Loss_d 0.424 (0.424)	test_acc_d   0.78 (  0.78)	test_minacc_d   0.75 (  0.75)	test_majacc_d   0.79 (  0.79)	test_corr_d   0.61 (  0.61)
Test: [  10/  26]	Loss 0.364 (0.402)	test_acc   0.83 (  0.80)	test_minacc   0.84 (  0.80)	test_majacc   0.83 (  0.80)	Loss_d 0.364 (0.402)	test_acc_d   0.83 (  0.80)	test_minacc_d   0.84 (  0.80)	test_majacc_d   0.83 (  0.80)	test_corr_d   0.66 (  0.61)
Test: [  20/  26]	Loss 0.396 (0.397)	test_acc   0.79 (  0.80)	test_minacc   0.84 (  0.80)	test_majacc   0.78 (  0.80)	Loss_d 0.396 (0.397)	test_acc_d   0.79 (  0.80)	test_minacc_d   0.84 (  0.80)	test_majacc_d   0.78 (  0.80)	test_corr_d   0.63 (  0.62)
Test: [  26/  26]	Loss 0.417 (0.397)	test_acc   0.78 (  0.80)	test_minacc   0.81 (  0.80)	test_majacc   0.77 (  0.80)	Loss_d 0.417 (0.397)	test_acc_d   0.78 (  0.80)	test_minacc_d   0.81 (  0.80)	test_majacc_d   0.77 (  0.80)	test_corr_d   0.63 (  0.62)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 55.87it/s]
Test: [  0/  1]	Loss 1.105 (1.105)	test_acc   0.58 (  0.58)	test_minacc   0.56 (  0.56)	test_majacc   0.83 (  0.83)	Loss_d 1.105 (1.105)	test_acc_d   0.58 (  0.58)	test_minacc_d   0.56 (  0.56)	test_majacc_d   0.83 (  0.83)	test_corr_d   0.21 (  0.21)
Test: [  1/  1]	Loss 1.105 (1.105)	test_acc   0.58 (  0.58)	test_minacc   0.56 (  0.56)	test_majacc   0.83 (  0.83)	Loss_d 1.105 (1.105)	test_acc_d   0.58 (  0.58)	test_minacc_d   0.56 (  0.56)	test_majacc_d   0.83 (  0.83)	test_corr_d   0.21 (  0.21)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/148/checkpoints/model_best.pth
Overall Timing[ 19/  1]	epoch_time 0.0398 (0.0436)	validation_time 0.0004 (0.0008)	train_time 0.0393 (0.0426)
record: (train_acc, test_acc) (0.8012000260353088, 0.5830000042915344)
last accs (train_acc, test_acc) (0.8012000260353088, 0.5830000042915344)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.57it/s] 19%|#9        | 5/26 [00:00<00:00, 22.80it/s] 35%|###4      | 9/26 [00:00<00:00, 28.90it/s] 50%|#####     | 13/26 [00:00<00:00, 32.85it/s] 65%|######5   | 17/26 [00:00<00:00, 33.69it/s] 81%|########  | 21/26 [00:00<00:00, 35.49it/s] 96%|#########6| 25/26 [00:00<00:00, 36.54it/s]100%|##########| 26/26 [00:00<00:00, 30.28it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 520 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 521 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 522 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 523 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 524 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 525 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 526 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 527 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 528 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 529 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 530 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 531 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 532 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 533 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 534 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 535 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 536 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 537 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 538 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 539 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 540 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 541 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 542 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 543 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 544 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 545 400
penalty weights 10000.0
Epoch: [20][  26/  26]	Loss 0.000 (0.001)	train_nll   0.35 (  0.38)	train_penalty   0.00 (  0.00)	weight_norm  24.48 ( 24.47)	train_acc   0.81 (  0.80)	train_minacc   0.85 (  0.83)	train_majacc   0.81 (  0.80)	train_corr   0.00 (  0.00)	l1 7.1813 (6.9625)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.65it/s] 23%|##3       | 6/26 [00:00<00:00, 28.80it/s]                                               23%|##3       | 6/26 [00:00<00:00, 28.80it/s] 42%|####2     | 11/26 [00:00<00:00, 35.94it/s] 62%|######1   | 16/26 [00:00<00:00, 40.40it/s]                                                62%|######1   | 16/26 [00:00<00:00, 40.40it/s] 81%|########  | 21/26 [00:00<00:00, 38.37it/s]100%|##########| 26/26 [00:00<00:00, 40.98it/s]100%|##########| 26/26 [00:00<00:00, 34.21it/s]
Test: [   0/  26]	Loss 0.390 (0.390)	test_acc   0.80 (  0.80)	test_minacc   0.77 (  0.77)	test_majacc   0.81 (  0.81)	Loss_d 0.390 (0.390)	test_acc_d   0.80 (  0.80)	test_minacc_d   0.77 (  0.77)	test_majacc_d   0.81 (  0.81)	test_corr_d   0.57 (  0.57)
Test: [  10/  26]	Loss 0.312 (0.376)	test_acc   0.85 (  0.80)	test_minacc   0.86 (  0.83)	test_majacc   0.84 (  0.80)	Loss_d 0.312 (0.376)	test_acc_d   0.85 (  0.80)	test_minacc_d   0.86 (  0.83)	test_majacc_d   0.84 (  0.80)	test_corr_d   0.64 (  0.57)
Test: [  20/  26]	Loss 0.361 (0.367)	test_acc   0.82 (  0.81)	test_minacc   0.90 (  0.84)	test_majacc   0.80 (  0.81)	Loss_d 0.361 (0.367)	test_acc_d   0.82 (  0.81)	test_minacc_d   0.90 (  0.84)	test_majacc_d   0.80 (  0.81)	test_corr_d   0.60 (  0.58)
Test: [  26/  26]	Loss 0.358 (0.366)	test_acc   0.81 (  0.81)	test_minacc   0.89 (  0.84)	test_majacc   0.80 (  0.81)	Loss_d 0.358 (0.366)	test_acc_d   0.81 (  0.81)	test_minacc_d   0.89 (  0.84)	test_majacc_d   0.80 (  0.81)	test_corr_d   0.62 (  0.58)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.19it/s]
Test: [  0/  1]	Loss 1.213 (1.213)	test_acc   0.62 (  0.62)	test_minacc   0.60 (  0.60)	test_majacc   0.81 (  0.81)	Loss_d 1.213 (1.213)	test_acc_d   0.62 (  0.62)	test_minacc_d   0.60 (  0.60)	test_majacc_d   0.81 (  0.81)	test_corr_d   0.09 (  0.09)
Test: [  1/  1]	Loss 1.213 (1.213)	test_acc   0.62 (  0.62)	test_minacc   0.60 (  0.60)	test_majacc   0.81 (  0.81)	Loss_d 1.213 (1.213)	test_acc_d   0.62 (  0.62)	test_minacc_d   0.60 (  0.60)	test_majacc_d   0.81 (  0.81)	test_corr_d   0.09 (  0.09)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/148/checkpoints/model_best.pth
Overall Timing[ 20/  1]	epoch_time 0.0394 (0.0434)	validation_time 0.0004 (0.0008)	train_time 0.0390 (0.0424)
record: (train_acc, test_acc) (0.8120000209212304, 0.6170000433921814)
last accs (train_acc, test_acc) (0.8120000209212304, 0.6170000433921814)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 16.19it/s] 23%|##3       | 6/26 [00:00<00:00, 27.07it/s] 38%|###8      | 10/26 [00:00<00:00, 31.29it/s] 54%|#####3    | 14/26 [00:00<00:00, 33.48it/s] 69%|######9   | 18/26 [00:00<00:00, 35.08it/s] 85%|########4 | 22/26 [00:00<00:00, 35.80it/s]100%|##########| 26/26 [00:00<00:00, 35.92it/s]100%|##########| 26/26 [00:00<00:00, 31.15it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 546 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 547 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 548 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 549 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 550 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 551 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 552 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 553 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 554 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 555 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 556 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 557 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 558 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 559 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 560 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 561 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 562 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 563 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 564 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 565 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 566 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 567 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 568 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 569 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 570 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 571 400
penalty weights 10000.0
Epoch: [21][  26/  26]	Loss 0.004 (0.004)	train_nll   0.25 (  0.31)	train_penalty   0.00 (  0.00)	weight_norm  24.50 ( 24.48)	train_acc   0.89 (  0.85)	train_minacc   0.70 (  0.83)	train_majacc   0.91 (  0.85)	train_corr   0.00 (  0.00)	l1 7.3144 (7.2802)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.60it/s] 12%|#1        | 3/26 [00:00<00:02,  9.42it/s] 31%|###       | 8/26 [00:00<00:00, 22.33it/s]                                               31%|###       | 8/26 [00:00<00:00, 22.33it/s] 50%|#####     | 13/26 [00:00<00:00, 29.75it/s] 69%|######9   | 18/26 [00:00<00:00, 35.41it/s]                                                69%|######9   | 18/26 [00:00<00:00, 35.41it/s] 88%|########8 | 23/26 [00:00<00:00, 36.02it/s]100%|##########| 26/26 [00:00<00:00, 28.75it/s]
Test: [   0/  26]	Loss 0.256 (0.256)	test_acc   0.90 (  0.90)	test_minacc   0.66 (  0.66)	test_majacc   0.95 (  0.95)	Loss_d 0.256 (0.256)	test_acc_d   0.90 (  0.90)	test_minacc_d   0.66 (  0.66)	test_majacc_d   0.95 (  0.95)	test_corr_d   0.73 (  0.73)
Test: [  10/  26]	Loss 0.251 (0.276)	test_acc   0.88 (  0.89)	test_minacc   0.66 (  0.67)	test_majacc   0.91 (  0.93)	Loss_d 0.251 (0.276)	test_acc_d   0.88 (  0.89)	test_minacc_d   0.66 (  0.67)	test_majacc_d   0.91 (  0.93)	test_corr_d   0.76 (  0.73)
Test: [  20/  26]	Loss 0.245 (0.267)	test_acc   0.89 (  0.89)	test_minacc   0.55 (  0.65)	test_majacc   0.94 (  0.93)	Loss_d 0.245 (0.267)	test_acc_d   0.89 (  0.89)	test_minacc_d   0.55 (  0.65)	test_majacc_d   0.94 (  0.93)	test_corr_d   0.77 (  0.74)
Test: [  26/  26]	Loss 0.263 (0.268)	test_acc   0.87 (  0.89)	test_minacc   0.67 (  0.65)	test_majacc   0.90 (  0.93)	Loss_d 0.263 (0.268)	test_acc_d   0.87 (  0.89)	test_minacc_d   0.67 (  0.65)	test_majacc_d   0.90 (  0.93)	test_corr_d   0.76 (  0.74)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.11it/s]
Test: [  0/  1]	Loss 1.472 (1.472)	test_acc   0.42 (  0.42)	test_minacc   0.36 (  0.36)	test_majacc   0.91 (  0.91)	Loss_d 1.472 (1.472)	test_acc_d   0.42 (  0.42)	test_minacc_d   0.36 (  0.36)	test_majacc_d   0.91 (  0.91)	test_corr_d   0.33 (  0.33)
Test: [  1/  1]	Loss 1.472 (1.472)	test_acc   0.42 (  0.42)	test_minacc   0.36 (  0.36)	test_majacc   0.91 (  0.91)	Loss_d 1.472 (1.472)	test_acc_d   0.42 (  0.42)	test_minacc_d   0.36 (  0.36)	test_majacc_d   0.91 (  0.91)	test_corr_d   0.33 (  0.33)
Overall Timing[ 21/  1]	epoch_time 0.0396 (0.0432)	validation_time 0.0004 (0.0007)	train_time 0.0391 (0.0423)
record: (train_acc, test_acc) (0.8120000209212304, 0.6170000433921814)
last accs (train_acc, test_acc) (0.8859000180363655, 0.4180000126361847)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.17it/s] 19%|#9        | 5/26 [00:00<00:01, 20.33it/s] 35%|###4      | 9/26 [00:00<00:00, 26.36it/s] 50%|#####     | 13/26 [00:00<00:00, 29.38it/s] 65%|######5   | 17/26 [00:00<00:00, 30.41it/s] 81%|########  | 21/26 [00:00<00:00, 31.13it/s] 96%|#########6| 25/26 [00:00<00:00, 32.27it/s]100%|##########| 26/26 [00:00<00:00, 26.96it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 572 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 573 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 574 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 575 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 576 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 577 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 578 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 579 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 580 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 581 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 582 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 583 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 584 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 585 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 586 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 587 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 588 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 589 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 590 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 591 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 592 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 593 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 594 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 595 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 596 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 597 400
penalty weights 10000.0
Epoch: [22][  26/  26]	Loss 0.002 (0.002)	train_nll   0.26 (  0.28)	train_penalty   0.00 (  0.00)	weight_norm  24.51 ( 24.51)	train_acc   0.88 (  0.87)	train_minacc   0.93 (  0.83)	train_majacc   0.87 (  0.88)	train_corr   0.00 (  0.00)	l1 7.3701 (7.5056)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.48it/s] 19%|#9        | 5/26 [00:00<00:00, 24.88it/s] 38%|###8      | 10/26 [00:00<00:00, 33.88it/s]                                                38%|###8      | 10/26 [00:00<00:00, 33.88it/s] 58%|#####7    | 15/26 [00:00<00:00, 38.74it/s] 77%|#######6  | 20/26 [00:00<00:00, 38.91it/s]                                                77%|#######6  | 20/26 [00:00<00:00, 38.91it/s] 96%|#########6| 25/26 [00:00<00:00, 41.17it/s]100%|##########| 26/26 [00:00<00:00, 34.61it/s]
Test: [   0/  26]	Loss 0.288 (0.288)	test_acc   0.87 (  0.87)	test_minacc   0.86 (  0.86)	test_majacc   0.87 (  0.87)	Loss_d 0.288 (0.288)	test_acc_d   0.87 (  0.87)	test_minacc_d   0.86 (  0.86)	test_majacc_d   0.87 (  0.87)	test_corr_d   0.66 (  0.66)
Test: [  10/  26]	Loss 0.267 (0.266)	test_acc   0.90 (  0.88)	test_minacc   0.84 (  0.86)	test_majacc   0.91 (  0.89)	Loss_d 0.267 (0.266)	test_acc_d   0.90 (  0.88)	test_minacc_d   0.84 (  0.86)	test_majacc_d   0.91 (  0.89)	test_corr_d   0.72 (  0.68)
Test: [  20/  26]	Loss 0.238 (0.258)	test_acc   0.90 (  0.89)	test_minacc   0.90 (  0.87)	test_majacc   0.90 (  0.89)	Loss_d 0.238 (0.258)	test_acc_d   0.90 (  0.89)	test_minacc_d   0.90 (  0.87)	test_majacc_d   0.90 (  0.89)	test_corr_d   0.71 (  0.68)
Test: [  26/  26]	Loss 0.254 (0.260)	test_acc   0.88 (  0.89)	test_minacc   0.93 (  0.87)	test_majacc   0.88 (  0.89)	Loss_d 0.254 (0.260)	test_acc_d   0.88 (  0.89)	test_minacc_d   0.93 (  0.87)	test_majacc_d   0.88 (  0.89)	test_corr_d   0.71 (  0.68)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.83it/s]
Test: [  0/  1]	Loss 1.367 (1.367)	test_acc   0.58 (  0.58)	test_minacc   0.55 (  0.55)	test_majacc   0.89 (  0.89)	Loss_d 1.367 (1.367)	test_acc_d   0.58 (  0.58)	test_minacc_d   0.55 (  0.55)	test_majacc_d   0.89 (  0.89)	test_corr_d   0.17 (  0.17)
Test: [  1/  1]	Loss 1.367 (1.367)	test_acc   0.58 (  0.58)	test_minacc   0.55 (  0.55)	test_majacc   0.89 (  0.89)	Loss_d 1.367 (1.367)	test_acc_d   0.58 (  0.58)	test_minacc_d   0.55 (  0.55)	test_majacc_d   0.89 (  0.89)	test_corr_d   0.17 (  0.17)
Overall Timing[ 22/  1]	epoch_time 0.0404 (0.0431)	validation_time 0.0005 (0.0007)	train_time 0.0399 (0.0422)
record: (train_acc, test_acc) (0.8120000209212304, 0.6170000433921814)
last accs (train_acc, test_acc) (0.8872000185847282, 0.581000030040741)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:07,  3.38it/s] 19%|#9        | 5/26 [00:00<00:01, 14.93it/s] 35%|###4      | 9/26 [00:00<00:00, 22.11it/s] 50%|#####     | 13/26 [00:00<00:00, 26.38it/s] 65%|######5   | 17/26 [00:00<00:00, 29.14it/s] 81%|########  | 21/26 [00:00<00:00, 30.80it/s] 96%|#########6| 25/26 [00:00<00:00, 32.26it/s]100%|##########| 26/26 [00:01<00:00, 24.38it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 598 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 599 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 600 400
penalty weights 10000.0
l1 at pgd_anneal_iters 7.269489765167236
set z to 6.9060152769088745
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 601 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 602 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 603 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 604 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 605 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 606 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 607 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 608 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 609 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 610 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 611 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 612 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 613 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 614 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 615 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 616 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 617 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 618 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 619 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 620 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 621 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 622 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 623 400
penalty weights 10000.0
Epoch: [23][  26/  26]	Loss 0.003 (0.001)	train_nll   0.31 (  0.27)	train_penalty   0.00 (  0.00)	weight_norm  24.52 ( 24.52)	train_acc   0.83 (  0.87)	train_minacc   0.93 (  0.86)	train_majacc   0.82 (  0.88)	train_corr   0.00 (  0.00)	l1 7.6133 (7.6031)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.29it/s] 23%|##3       | 6/26 [00:00<00:00, 28.73it/s]                                               23%|##3       | 6/26 [00:00<00:00, 28.73it/s] 42%|####2     | 11/26 [00:00<00:00, 36.28it/s] 62%|######1   | 16/26 [00:00<00:00, 40.58it/s]                                                62%|######1   | 16/26 [00:00<00:00, 40.58it/s] 81%|########  | 21/26 [00:00<00:00, 38.24it/s]100%|##########| 26/26 [00:00<00:00, 41.01it/s]100%|##########| 26/26 [00:00<00:00, 34.15it/s]
Test: [   0/  26]	Loss 0.295 (0.295)	test_acc   0.86 (  0.86)	test_minacc   0.86 (  0.86)	test_majacc   0.86 (  0.86)	Loss_d 0.295 (0.295)	test_acc_d   0.86 (  0.86)	test_minacc_d   0.86 (  0.86)	test_majacc_d   0.86 (  0.86)	test_corr_d   0.63 (  0.63)
Test: [  10/  26]	Loss 0.251 (0.284)	test_acc   0.88 (  0.86)	test_minacc   0.88 (  0.88)	test_majacc   0.88 (  0.86)	Loss_d 0.251 (0.284)	test_acc_d   0.88 (  0.86)	test_minacc_d   0.88 (  0.88)	test_majacc_d   0.88 (  0.86)	test_corr_d   0.69 (  0.64)
Test: [  20/  26]	Loss 0.247 (0.268)	test_acc   0.88 (  0.87)	test_minacc   0.90 (  0.89)	test_majacc   0.88 (  0.87)	Loss_d 0.247 (0.268)	test_acc_d   0.88 (  0.87)	test_minacc_d   0.90 (  0.89)	test_majacc_d   0.88 (  0.87)	test_corr_d   0.67 (  0.65)
Test: [  26/  26]	Loss 0.302 (0.271)	test_acc   0.83 (  0.87)	test_minacc   0.93 (  0.89)	test_majacc   0.82 (  0.86)	Loss_d 0.302 (0.271)	test_acc_d   0.83 (  0.87)	test_minacc_d   0.93 (  0.89)	test_majacc_d   0.82 (  0.86)	test_corr_d   0.65 (  0.65)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.56it/s]
Test: [  0/  1]	Loss 1.364 (1.364)	test_acc   0.60 (  0.60)	test_minacc   0.58 (  0.58)	test_majacc   0.85 (  0.85)	Loss_d 1.364 (1.364)	test_acc_d   0.60 (  0.60)	test_minacc_d   0.58 (  0.58)	test_majacc_d   0.85 (  0.85)	test_corr_d   0.13 (  0.13)
Test: [  1/  1]	Loss 1.364 (1.364)	test_acc   0.60 (  0.60)	test_minacc   0.58 (  0.58)	test_majacc   0.85 (  0.85)	Loss_d 1.364 (1.364)	test_acc_d   0.60 (  0.60)	test_minacc_d   0.58 (  0.58)	test_majacc_d   0.85 (  0.85)	test_corr_d   0.13 (  0.13)
Overall Timing[ 23/  1]	epoch_time 0.0431 (0.0431)	validation_time 0.0003 (0.0007)	train_time 0.0427 (0.0422)
record: (train_acc, test_acc) (0.8120000209212304, 0.6170000433921814)
last accs (train_acc, test_acc) (0.8678000220060349, 0.6030000448226929)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.52it/s] 15%|#5        | 4/26 [00:00<00:01, 15.74it/s] 31%|###       | 8/26 [00:00<00:00, 23.70it/s] 46%|####6     | 12/26 [00:00<00:00, 28.14it/s] 62%|######1   | 16/26 [00:00<00:00, 30.02it/s] 77%|#######6  | 20/26 [00:00<00:00, 31.55it/s] 92%|#########2| 24/26 [00:00<00:00, 32.71it/s]100%|##########| 26/26 [00:00<00:00, 26.65it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 624 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 625 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 626 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 627 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 628 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 629 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 630 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 631 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 632 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 633 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 634 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 635 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 636 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 637 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 638 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 639 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 640 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 641 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 642 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 643 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 644 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 645 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 646 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 647 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 648 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 649 400
penalty weights 10000.0
Epoch: [24][  26/  26]	Loss 0.000 (0.001)	train_nll   0.26 (  0.27)	train_penalty   0.00 (  0.00)	weight_norm  24.53 ( 24.53)	train_acc   0.87 (  0.87)	train_minacc   0.93 (  0.88)	train_majacc   0.86 (  0.87)	train_corr   0.00 (  0.00)	l1 7.8450 (7.6810)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:09,  2.61it/s] 23%|##3       | 6/26 [00:00<00:01, 15.47it/s]                                               23%|##3       | 6/26 [00:00<00:01, 15.47it/s] 42%|####2     | 11/26 [00:00<00:00, 24.24it/s] 62%|######1   | 16/26 [00:00<00:00, 30.91it/s]                                                62%|######1   | 16/26 [00:00<00:00, 30.91it/s] 81%|########  | 21/26 [00:00<00:00, 32.64it/s]100%|##########| 26/26 [00:00<00:00, 36.75it/s]100%|##########| 26/26 [00:01<00:00, 24.89it/s]
Test: [   0/  26]	Loss 0.268 (0.268)	test_acc   0.87 (  0.87)	test_minacc   0.85 (  0.85)	test_majacc   0.88 (  0.88)	Loss_d 0.268 (0.268)	test_acc_d   0.87 (  0.87)	test_minacc_d   0.85 (  0.85)	test_majacc_d   0.88 (  0.88)	test_corr_d   0.68 (  0.68)
Test: [  10/  26]	Loss 0.240 (0.266)	test_acc   0.89 (  0.87)	test_minacc   0.86 (  0.85)	test_majacc   0.89 (  0.87)	Loss_d 0.240 (0.266)	test_acc_d   0.89 (  0.87)	test_minacc_d   0.86 (  0.85)	test_majacc_d   0.89 (  0.87)	test_corr_d   0.72 (  0.68)
Test: [  20/  26]	Loss 0.214 (0.247)	test_acc   0.91 (  0.88)	test_minacc   0.96 (  0.87)	test_majacc   0.90 (  0.88)	Loss_d 0.214 (0.247)	test_acc_d   0.91 (  0.88)	test_minacc_d   0.96 (  0.87)	test_majacc_d   0.90 (  0.88)	test_corr_d   0.72 (  0.69)
Test: [  26/  26]	Loss 0.249 (0.247)	test_acc   0.87 (  0.88)	test_minacc   0.89 (  0.87)	test_majacc   0.87 (  0.88)	Loss_d 0.249 (0.247)	test_acc_d   0.87 (  0.88)	test_minacc_d   0.89 (  0.87)	test_majacc_d   0.87 (  0.88)	test_corr_d   0.71 (  0.70)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 60.94it/s]
Test: [  0/  1]	Loss 1.599 (1.599)	test_acc   0.56 (  0.56)	test_minacc   0.53 (  0.53)	test_majacc   0.87 (  0.87)	Loss_d 1.599 (1.599)	test_acc_d   0.56 (  0.56)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.87 (  0.87)	test_corr_d   0.24 (  0.24)
Test: [  1/  1]	Loss 1.599 (1.599)	test_acc   0.56 (  0.56)	test_minacc   0.53 (  0.53)	test_majacc   0.87 (  0.87)	Loss_d 1.599 (1.599)	test_acc_d   0.56 (  0.56)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.87 (  0.87)	test_corr_d   0.24 (  0.24)
Overall Timing[ 24/  1]	epoch_time 0.0417 (0.0430)	validation_time 0.0003 (0.0007)	train_time 0.0414 (0.0422)
record: (train_acc, test_acc) (0.8120000209212304, 0.6170000433921814)
last accs (train_acc, test_acc) (0.881900018274784, 0.5640000104904175)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.35it/s] 19%|#9        | 5/26 [00:00<00:00, 23.73it/s] 35%|###4      | 9/26 [00:00<00:00, 28.92it/s] 50%|#####     | 13/26 [00:00<00:00, 30.22it/s] 65%|######5   | 17/26 [00:00<00:00, 31.71it/s] 81%|########  | 21/26 [00:00<00:00, 32.56it/s] 96%|#########6| 25/26 [00:00<00:00, 33.68it/s]100%|##########| 26/26 [00:00<00:00, 28.87it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 650 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 651 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 652 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 653 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 654 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 655 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 656 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 657 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 658 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 659 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 660 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 661 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 662 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 663 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 664 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 665 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 666 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 667 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 668 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 669 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 670 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 671 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 672 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 673 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 674 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 675 400
penalty weights 10000.0
Epoch: [25][  26/  26]	Loss 0.004 (0.001)	train_nll   0.29 (  0.25)	train_penalty   0.00 (  0.00)	weight_norm  24.54 ( 24.54)	train_acc   0.84 (  0.88)	train_minacc   0.85 (  0.87)	train_majacc   0.83 (  0.88)	train_corr   0.00 (  0.00)	l1 8.3368 (7.8760)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.70it/s] 23%|##3       | 6/26 [00:00<00:00, 31.23it/s]                                               23%|##3       | 6/26 [00:00<00:00, 31.23it/s] 42%|####2     | 11/26 [00:00<00:00, 38.16it/s] 62%|######1   | 16/26 [00:00<00:00, 42.20it/s]                                                62%|######1   | 16/26 [00:00<00:00, 42.20it/s] 81%|########  | 21/26 [00:00<00:00, 38.46it/s]100%|##########| 26/26 [00:00<00:00, 41.21it/s]100%|##########| 26/26 [00:00<00:00, 34.88it/s]
Test: [   0/  26]	Loss 0.266 (0.266)	test_acc   0.88 (  0.88)	test_minacc   0.88 (  0.88)	test_majacc   0.88 (  0.88)	Loss_d 0.266 (0.266)	test_acc_d   0.88 (  0.88)	test_minacc_d   0.88 (  0.88)	test_majacc_d   0.88 (  0.88)	test_corr_d   0.66 (  0.66)
Test: [  10/  26]	Loss 0.263 (0.277)	test_acc   0.87 (  0.87)	test_minacc   0.86 (  0.86)	test_majacc   0.87 (  0.87)	Loss_d 0.263 (0.277)	test_acc_d   0.87 (  0.87)	test_minacc_d   0.86 (  0.86)	test_majacc_d   0.87 (  0.87)	test_corr_d   0.70 (  0.66)
Test: [  20/  26]	Loss 0.210 (0.257)	test_acc   0.90 (  0.88)	test_minacc   0.96 (  0.87)	test_majacc   0.89 (  0.88)	Loss_d 0.210 (0.257)	test_acc_d   0.90 (  0.88)	test_minacc_d   0.96 (  0.87)	test_majacc_d   0.89 (  0.88)	test_corr_d   0.70 (  0.67)
Test: [  26/  26]	Loss 0.251 (0.254)	test_acc   0.88 (  0.88)	test_minacc   0.89 (  0.87)	test_majacc   0.87 (  0.88)	Loss_d 0.251 (0.254)	test_acc_d   0.88 (  0.88)	test_minacc_d   0.89 (  0.87)	test_majacc_d   0.87 (  0.88)	test_corr_d   0.70 (  0.67)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.89it/s]
Test: [  0/  1]	Loss 1.746 (1.746)	test_acc   0.57 (  0.57)	test_minacc   0.54 (  0.54)	test_majacc   0.85 (  0.85)	Loss_d 1.746 (1.746)	test_acc_d   0.57 (  0.57)	test_minacc_d   0.54 (  0.54)	test_majacc_d   0.85 (  0.85)	test_corr_d   0.19 (  0.19)
Test: [  1/  1]	Loss 1.746 (1.746)	test_acc   0.57 (  0.57)	test_minacc   0.54 (  0.54)	test_majacc   0.85 (  0.85)	Loss_d 1.746 (1.746)	test_acc_d   0.57 (  0.57)	test_minacc_d   0.54 (  0.54)	test_majacc_d   0.85 (  0.85)	test_corr_d   0.19 (  0.19)
Overall Timing[ 25/  1]	epoch_time 0.0421 (0.0430)	validation_time 0.0004 (0.0007)	train_time 0.0416 (0.0422)
record: (train_acc, test_acc) (0.8120000209212304, 0.6170000433921814)
last accs (train_acc, test_acc) (0.8799000244140625, 0.5740000009536743)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:05,  4.81it/s] 19%|#9        | 5/26 [00:00<00:01, 17.34it/s] 35%|###4      | 9/26 [00:00<00:00, 23.90it/s] 50%|#####     | 13/26 [00:00<00:00, 27.95it/s] 65%|######5   | 17/26 [00:00<00:00, 30.13it/s] 81%|########  | 21/26 [00:00<00:00, 31.75it/s] 96%|#########6| 25/26 [00:00<00:00, 32.61it/s]100%|##########| 26/26 [00:00<00:00, 26.13it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 676 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 677 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 678 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 679 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 680 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 681 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 682 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 683 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 684 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 685 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 686 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 687 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 688 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 689 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 690 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 691 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 692 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 693 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 694 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 695 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 696 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 697 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 698 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 699 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 700 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 701 400
penalty weights 10000.0
Epoch: [26][  26/  26]	Loss 0.001 (0.001)	train_nll   0.23 (  0.22)	train_penalty   0.00 (  0.00)	weight_norm  24.56 ( 24.55)	train_acc   0.89 (  0.91)	train_minacc   0.89 (  0.81)	train_majacc   0.89 (  0.93)	train_corr   0.00 (  0.00)	l1 8.2047 (7.8438)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 19.52it/s] 27%|##6       | 7/26 [00:00<00:00, 34.74it/s]                                               27%|##6       | 7/26 [00:00<00:00, 34.74it/s] 46%|####6     | 12/26 [00:00<00:00, 40.18it/s] 65%|######5   | 17/26 [00:00<00:00, 42.26it/s]                                                65%|######5   | 17/26 [00:00<00:00, 42.26it/s] 85%|########4 | 22/26 [00:00<00:00, 41.80it/s]100%|##########| 26/26 [00:00<00:00, 37.49it/s]
Test: [   0/  26]	Loss 0.231 (0.231)	test_acc   0.91 (  0.91)	test_minacc   0.91 (  0.91)	test_majacc   0.91 (  0.91)	Loss_d 0.231 (0.231)	test_acc_d   0.91 (  0.91)	test_minacc_d   0.91 (  0.91)	test_majacc_d   0.91 (  0.91)	test_corr_d   0.68 (  0.68)
Test: [  10/  26]	Loss 0.261 (0.255)	test_acc   0.89 (  0.89)	test_minacc   0.86 (  0.88)	test_majacc   0.89 (  0.89)	Loss_d 0.261 (0.255)	test_acc_d   0.89 (  0.89)	test_minacc_d   0.86 (  0.88)	test_majacc_d   0.89 (  0.89)	test_corr_d   0.71 (  0.68)
Test: [  20/  26]	Loss 0.215 (0.246)	test_acc   0.89 (  0.89)	test_minacc   0.88 (  0.87)	test_majacc   0.90 (  0.90)	Loss_d 0.215 (0.246)	test_acc_d   0.89 (  0.89)	test_minacc_d   0.88 (  0.87)	test_majacc_d   0.90 (  0.90)	test_corr_d   0.72 (  0.69)
Test: [  26/  26]	Loss 0.233 (0.244)	test_acc   0.88 (  0.89)	test_minacc   0.89 (  0.87)	test_majacc   0.88 (  0.90)	Loss_d 0.233 (0.244)	test_acc_d   0.88 (  0.89)	test_minacc_d   0.89 (  0.87)	test_majacc_d   0.88 (  0.90)	test_corr_d   0.73 (  0.69)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.29it/s]
Test: [  0/  1]	Loss 1.688 (1.688)	test_acc   0.56 (  0.56)	test_minacc   0.53 (  0.53)	test_majacc   0.87 (  0.87)	Loss_d 1.688 (1.688)	test_acc_d   0.56 (  0.56)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.87 (  0.87)	test_corr_d   0.20 (  0.20)
Test: [  1/  1]	Loss 1.688 (1.688)	test_acc   0.56 (  0.56)	test_minacc   0.53 (  0.53)	test_majacc   0.87 (  0.87)	Loss_d 1.688 (1.688)	test_acc_d   0.56 (  0.56)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.87 (  0.87)	test_corr_d   0.20 (  0.20)
Overall Timing[ 26/  1]	epoch_time 0.0430 (0.0430)	validation_time 0.0003 (0.0007)	train_time 0.0426 (0.0422)
record: (train_acc, test_acc) (0.8120000209212304, 0.6170000433921814)
last accs (train_acc, test_acc) (0.8931000240445137, 0.562000036239624)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 17.96it/s] 23%|##3       | 6/26 [00:00<00:00, 28.24it/s] 38%|###8      | 10/26 [00:00<00:00, 31.48it/s] 54%|#####3    | 14/26 [00:00<00:00, 33.42it/s] 69%|######9   | 18/26 [00:00<00:00, 34.48it/s] 85%|########4 | 22/26 [00:00<00:00, 34.93it/s]100%|##########| 26/26 [00:00<00:00, 35.41it/s]100%|##########| 26/26 [00:00<00:00, 31.10it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 702 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 703 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 704 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 705 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 706 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 707 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 708 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 709 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 710 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 711 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 712 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 713 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 714 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 715 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 716 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 717 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 718 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 719 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 720 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 721 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 722 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 723 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 724 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 725 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 726 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 727 400
penalty weights 10000.0
Epoch: [27][  26/  26]	Loss 0.001 (0.001)	train_nll   0.18 (  0.22)	train_penalty   0.00 (  0.00)	weight_norm  24.57 ( 24.56)	train_acc   0.91 (  0.90)	train_minacc   0.93 (  0.87)	train_majacc   0.91 (  0.91)	train_corr   0.00 (  0.00)	l1 8.4445 (8.1142)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 15.43it/s] 27%|##6       | 7/26 [00:00<00:00, 31.78it/s]                                               27%|##6       | 7/26 [00:00<00:00, 31.78it/s] 42%|####2     | 11/26 [00:00<00:00, 35.16it/s] 62%|######1   | 16/26 [00:00<00:00, 40.24it/s]                                                62%|######1   | 16/26 [00:00<00:00, 40.24it/s] 81%|########  | 21/26 [00:00<00:00, 42.59it/s]100%|##########| 26/26 [00:00<00:00, 44.12it/s]100%|##########| 26/26 [00:00<00:00, 36.20it/s]
Test: [   0/  26]	Loss 0.223 (0.223)	test_acc   0.91 (  0.91)	test_minacc   0.86 (  0.86)	test_majacc   0.92 (  0.92)	Loss_d 0.223 (0.223)	test_acc_d   0.91 (  0.91)	test_minacc_d   0.86 (  0.86)	test_majacc_d   0.92 (  0.92)	test_corr_d   0.71 (  0.71)
Test: [  10/  26]	Loss 0.246 (0.230)	test_acc   0.89 (  0.90)	test_minacc   0.86 (  0.86)	test_majacc   0.89 (  0.90)	Loss_d 0.246 (0.230)	test_acc_d   0.89 (  0.90)	test_minacc_d   0.86 (  0.86)	test_majacc_d   0.89 (  0.90)	test_corr_d   0.73 (  0.71)
Test: [  20/  26]	Loss 0.212 (0.231)	test_acc   0.90 (  0.89)	test_minacc   0.88 (  0.85)	test_majacc   0.91 (  0.90)	Loss_d 0.212 (0.231)	test_acc_d   0.90 (  0.89)	test_minacc_d   0.88 (  0.85)	test_majacc_d   0.91 (  0.90)	test_corr_d   0.74 (  0.72)
Test: [  26/  26]	Loss 0.184 (0.228)	test_acc   0.90 (  0.90)	test_minacc   0.93 (  0.85)	test_majacc   0.90 (  0.90)	Loss_d 0.184 (0.228)	test_acc_d   0.90 (  0.90)	test_minacc_d   0.93 (  0.85)	test_majacc_d   0.90 (  0.90)	test_corr_d   0.76 (  0.72)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 64.33it/s]
Test: [  0/  1]	Loss 1.910 (1.910)	test_acc   0.58 (  0.58)	test_minacc   0.54 (  0.54)	test_majacc   0.90 (  0.90)	Loss_d 1.910 (1.910)	test_acc_d   0.58 (  0.58)	test_minacc_d   0.54 (  0.54)	test_majacc_d   0.90 (  0.90)	test_corr_d   0.26 (  0.26)
Test: [  1/  1]	Loss 1.910 (1.910)	test_acc   0.58 (  0.58)	test_minacc   0.54 (  0.54)	test_majacc   0.90 (  0.90)	Loss_d 1.910 (1.910)	test_acc_d   0.58 (  0.58)	test_minacc_d   0.54 (  0.54)	test_majacc_d   0.90 (  0.90)	test_corr_d   0.26 (  0.26)
Overall Timing[ 27/  1]	epoch_time 0.0401 (0.0429)	validation_time 0.0004 (0.0007)	train_time 0.0396 (0.0421)
record: (train_acc, test_acc) (0.8120000209212304, 0.6170000433921814)
last accs (train_acc, test_acc) (0.895200021147728, 0.5770000219345093)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:13,  1.92it/s] 19%|#9        | 5/26 [00:00<00:02,  9.63it/s] 35%|###4      | 9/26 [00:00<00:01, 16.07it/s] 50%|#####     | 13/26 [00:00<00:00, 21.26it/s] 65%|######5   | 17/26 [00:00<00:00, 25.50it/s] 81%|########  | 21/26 [00:01<00:00, 28.70it/s] 96%|#########6| 25/26 [00:01<00:00, 31.22it/s]100%|##########| 26/26 [00:01<00:00, 20.48it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 728 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 729 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 730 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 731 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 732 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 733 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 734 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 735 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 736 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 737 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 738 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 739 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 740 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 741 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 742 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 743 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 744 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 745 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 746 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 747 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 748 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 749 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 750 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 751 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 752 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 753 400
penalty weights 10000.0
Epoch: [28][  26/  26]	Loss 0.001 (0.001)	train_nll   0.19 (  0.22)	train_penalty   0.00 (  0.00)	weight_norm  24.58 ( 24.57)	train_acc   0.90 (  0.90)	train_minacc   0.89 (  0.86)	train_majacc   0.90 (  0.91)	train_corr   0.00 (  0.00)	l1 8.0863 (8.3039)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s] 15%|#5        | 4/26 [00:00<00:00, 34.12it/s] 35%|###4      | 9/26 [00:00<00:00, 35.67it/s]                                               35%|###4      | 9/26 [00:00<00:00, 35.67it/s] 54%|#####3    | 14/26 [00:00<00:00, 40.21it/s] 73%|#######3  | 19/26 [00:00<00:00, 41.87it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 41.87it/s] 92%|#########2| 24/26 [00:00<00:00, 41.91it/s]100%|##########| 26/26 [00:00<00:00, 37.95it/s]
Test: [   0/  26]	Loss 0.203 (0.203)	test_acc   0.93 (  0.93)	test_minacc   0.94 (  0.94)	test_majacc   0.93 (  0.93)	Loss_d 0.203 (0.203)	test_acc_d   0.93 (  0.93)	test_minacc_d   0.94 (  0.94)	test_majacc_d   0.93 (  0.93)	test_corr_d   0.69 (  0.69)
Test: [  10/  26]	Loss 0.223 (0.210)	test_acc   0.90 (  0.91)	test_minacc   0.88 (  0.91)	test_majacc   0.90 (  0.91)	Loss_d 0.223 (0.210)	test_acc_d   0.90 (  0.91)	test_minacc_d   0.88 (  0.91)	test_majacc_d   0.90 (  0.91)	test_corr_d   0.73 (  0.70)
Test: [  20/  26]	Loss 0.208 (0.217)	test_acc   0.92 (  0.91)	test_minacc   0.90 (  0.90)	test_majacc   0.92 (  0.91)	Loss_d 0.208 (0.217)	test_acc_d   0.92 (  0.91)	test_minacc_d   0.90 (  0.90)	test_majacc_d   0.92 (  0.91)	test_corr_d   0.73 (  0.71)
Test: [  26/  26]	Loss 0.202 (0.218)	test_acc   0.90 (  0.90)	test_minacc   0.89 (  0.89)	test_majacc   0.90 (  0.91)	Loss_d 0.202 (0.218)	test_acc_d   0.90 (  0.90)	test_minacc_d   0.89 (  0.89)	test_majacc_d   0.90 (  0.91)	test_corr_d   0.75 (  0.71)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 60.73it/s]
Test: [  0/  1]	Loss 1.673 (1.673)	test_acc   0.56 (  0.56)	test_minacc   0.52 (  0.52)	test_majacc   0.90 (  0.90)	Loss_d 1.673 (1.673)	test_acc_d   0.56 (  0.56)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.90 (  0.90)	test_corr_d   0.23 (  0.23)
Test: [  1/  1]	Loss 1.673 (1.673)	test_acc   0.56 (  0.56)	test_minacc   0.52 (  0.52)	test_majacc   0.90 (  0.90)	Loss_d 1.673 (1.673)	test_acc_d   0.56 (  0.56)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.90 (  0.90)	test_corr_d   0.23 (  0.23)
Overall Timing[ 28/  1]	epoch_time 0.0444 (0.0429)	validation_time 0.0004 (0.0007)	train_time 0.0440 (0.0421)
record: (train_acc, test_acc) (0.8120000209212304, 0.6170000433921814)
last accs (train_acc, test_acc) (0.9049000157117844, 0.5600000023841858)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:01, 19.32it/s] 23%|##3       | 6/26 [00:00<00:00, 24.44it/s] 38%|###8      | 10/26 [00:00<00:00, 28.23it/s] 54%|#####3    | 14/26 [00:00<00:00, 30.62it/s] 69%|######9   | 18/26 [00:00<00:00, 31.48it/s] 85%|########4 | 22/26 [00:00<00:00, 32.62it/s]100%|##########| 26/26 [00:00<00:00, 33.85it/s]100%|##########| 26/26 [00:00<00:00, 28.87it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 754 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 755 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 756 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 757 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 758 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 759 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 760 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 761 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 762 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 763 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 764 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 765 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 766 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 767 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 768 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 769 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 770 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 771 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 772 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 773 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 774 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 775 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 776 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 777 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 778 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 779 400
penalty weights 10000.0
Epoch: [29][  26/  26]	Loss 0.001 (0.001)	train_nll   0.20 (  0.22)	train_penalty   0.00 (  0.00)	weight_norm  24.58 ( 24.58)	train_acc   0.89 (  0.90)	train_minacc   0.93 (  0.88)	train_majacc   0.89 (  0.90)	train_corr   0.00 (  0.00)	l1 8.0212 (8.3182)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 17.44it/s] 27%|##6       | 7/26 [00:00<00:00, 33.53it/s]                                               27%|##6       | 7/26 [00:00<00:00, 33.53it/s] 46%|####6     | 12/26 [00:00<00:00, 38.65it/s] 65%|######5   | 17/26 [00:00<00:00, 39.94it/s]                                                65%|######5   | 17/26 [00:00<00:00, 39.94it/s] 85%|########4 | 22/26 [00:00<00:00, 40.11it/s]100%|##########| 26/26 [00:00<00:00, 36.24it/s]
Test: [   0/  26]	Loss 0.219 (0.219)	test_acc   0.92 (  0.92)	test_minacc   0.94 (  0.94)	test_majacc   0.91 (  0.91)	Loss_d 0.219 (0.219)	test_acc_d   0.92 (  0.92)	test_minacc_d   0.94 (  0.94)	test_majacc_d   0.91 (  0.91)	test_corr_d   0.72 (  0.72)
Test: [  10/  26]	Loss 0.204 (0.203)	test_acc   0.91 (  0.91)	test_minacc   0.88 (  0.90)	test_majacc   0.91 (  0.92)	Loss_d 0.204 (0.203)	test_acc_d   0.91 (  0.91)	test_minacc_d   0.88 (  0.90)	test_majacc_d   0.91 (  0.92)	test_corr_d   0.76 (  0.73)
Test: [  20/  26]	Loss 0.216 (0.207)	test_acc   0.90 (  0.91)	test_minacc   0.88 (  0.90)	test_majacc   0.90 (  0.91)	Loss_d 0.216 (0.207)	test_acc_d   0.90 (  0.91)	test_minacc_d   0.88 (  0.90)	test_majacc_d   0.90 (  0.91)	test_corr_d   0.75 (  0.73)
Test: [  26/  26]	Loss 0.204 (0.210)	test_acc   0.89 (  0.91)	test_minacc   0.93 (  0.89)	test_majacc   0.88 (  0.91)	Loss_d 0.204 (0.210)	test_acc_d   0.89 (  0.91)	test_minacc_d   0.93 (  0.89)	test_majacc_d   0.88 (  0.91)	test_corr_d   0.75 (  0.73)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.43it/s]
Test: [  0/  1]	Loss 1.753 (1.753)	test_acc   0.55 (  0.55)	test_minacc   0.51 (  0.51)	test_majacc   0.90 (  0.90)	Loss_d 1.753 (1.753)	test_acc_d   0.55 (  0.55)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.90 (  0.90)	test_corr_d   0.32 (  0.32)
Test: [  1/  1]	Loss 1.753 (1.753)	test_acc   0.55 (  0.55)	test_minacc   0.51 (  0.51)	test_majacc   0.90 (  0.90)	Loss_d 1.753 (1.753)	test_acc_d   0.55 (  0.55)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.90 (  0.90)	test_corr_d   0.32 (  0.32)
Overall Timing[ 29/  1]	epoch_time 0.0430 (0.0429)	validation_time 0.0004 (0.0006)	train_time 0.0426 (0.0422)
record: (train_acc, test_acc) (0.8120000209212304, 0.6170000433921814)
last accs (train_acc, test_acc) (0.9079000245332718, 0.5480000376701355)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:06,  3.93it/s] 19%|#9        | 5/26 [00:00<00:01, 15.94it/s] 31%|###       | 8/26 [00:00<00:00, 20.35it/s] 46%|####6     | 12/26 [00:00<00:00, 24.96it/s] 62%|######1   | 16/26 [00:00<00:00, 27.68it/s] 77%|#######6  | 20/26 [00:00<00:00, 30.12it/s] 92%|#########2| 24/26 [00:00<00:00, 31.96it/s]100%|##########| 26/26 [00:01<00:00, 24.73it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 780 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 781 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 782 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 783 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 784 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 785 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 786 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 787 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 788 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 789 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 790 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 791 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 792 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 793 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 794 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 795 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 796 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 797 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 798 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 799 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 800 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 801 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 802 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 803 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 804 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 805 400
penalty weights 10000.0
Epoch: [30][  26/  26]	Loss 0.000 (0.001)	train_nll   0.22 (  0.23)	train_penalty   0.00 (  0.00)	weight_norm  24.58 ( 24.58)	train_acc   0.88 (  0.89)	train_minacc   0.89 (  0.88)	train_majacc   0.88 (  0.90)	train_corr   0.00 (  0.00)	l1 8.0691 (8.2500)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.87it/s] 27%|##6       | 7/26 [00:00<00:00, 32.08it/s]                                               27%|##6       | 7/26 [00:00<00:00, 32.08it/s] 46%|####6     | 12/26 [00:00<00:00, 37.24it/s] 65%|######5   | 17/26 [00:00<00:00, 38.20it/s]                                                65%|######5   | 17/26 [00:00<00:00, 38.20it/s] 85%|########4 | 22/26 [00:00<00:00, 41.33it/s]100%|##########| 26/26 [00:00<00:00, 34.78it/s]
Test: [   0/  26]	Loss 0.236 (0.236)	test_acc   0.90 (  0.90)	test_minacc   0.86 (  0.86)	test_majacc   0.91 (  0.91)	Loss_d 0.236 (0.236)	test_acc_d   0.90 (  0.90)	test_minacc_d   0.86 (  0.86)	test_majacc_d   0.91 (  0.91)	test_corr_d   0.73 (  0.73)
Test: [  10/  26]	Loss 0.179 (0.209)	test_acc   0.92 (  0.91)	test_minacc   0.90 (  0.88)	test_majacc   0.93 (  0.92)	Loss_d 0.179 (0.209)	test_acc_d   0.92 (  0.91)	test_minacc_d   0.90 (  0.88)	test_majacc_d   0.93 (  0.92)	test_corr_d   0.79 (  0.75)
Test: [  20/  26]	Loss 0.213 (0.207)	test_acc   0.90 (  0.91)	test_minacc   0.88 (  0.88)	test_majacc   0.90 (  0.92)	Loss_d 0.213 (0.207)	test_acc_d   0.90 (  0.91)	test_minacc_d   0.88 (  0.88)	test_majacc_d   0.90 (  0.92)	test_corr_d   0.75 (  0.75)
Test: [  26/  26]	Loss 0.219 (0.210)	test_acc   0.88 (  0.91)	test_minacc   0.89 (  0.88)	test_majacc   0.88 (  0.91)	Loss_d 0.219 (0.210)	test_acc_d   0.88 (  0.91)	test_minacc_d   0.89 (  0.88)	test_majacc_d   0.88 (  0.91)	test_corr_d   0.76 (  0.75)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 64.35it/s]
Test: [  0/  1]	Loss 1.863 (1.863)	test_acc   0.52 (  0.52)	test_minacc   0.48 (  0.48)	test_majacc   0.88 (  0.88)	Loss_d 1.863 (1.863)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.48 (  0.48)	test_majacc_d   0.88 (  0.88)	test_corr_d   0.37 (  0.37)
Test: [  1/  1]	Loss 1.863 (1.863)	test_acc   0.52 (  0.52)	test_minacc   0.48 (  0.48)	test_majacc   0.88 (  0.88)	Loss_d 1.863 (1.863)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.48 (  0.48)	test_majacc_d   0.88 (  0.88)	test_corr_d   0.37 (  0.37)
Overall Timing[ 30/  1]	epoch_time 0.0442 (0.0430)	validation_time 0.0004 (0.0006)	train_time 0.0437 (0.0422)
record: (train_acc, test_acc) (0.8120000209212304, 0.6170000433921814)
last accs (train_acc, test_acc) (0.9086000182628632, 0.5180000066757202)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.57it/s] 19%|#9        | 5/26 [00:00<00:00, 21.73it/s] 35%|###4      | 9/26 [00:00<00:00, 27.27it/s] 50%|#####     | 13/26 [00:00<00:00, 30.42it/s] 65%|######5   | 17/26 [00:00<00:00, 32.35it/s] 81%|########  | 21/26 [00:00<00:00, 33.52it/s] 96%|#########6| 25/26 [00:00<00:00, 34.62it/s]100%|##########| 26/26 [00:00<00:00, 28.71it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 806 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 807 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 808 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 809 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 810 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 811 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 812 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 813 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 814 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 815 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 816 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 817 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 818 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 819 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 820 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 821 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 822 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 823 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 824 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 825 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 826 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 827 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 828 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 829 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 830 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 831 400
penalty weights 10000.0
Epoch: [31][  26/  26]	Loss 0.000 (0.001)	train_nll   0.21 (  0.22)	train_penalty   0.00 (  0.00)	weight_norm  24.59 ( 24.59)	train_acc   0.90 (  0.90)	train_minacc   0.93 (  0.90)	train_majacc   0.90 (  0.90)	train_corr   0.00 (  0.00)	l1 8.2415 (8.3495)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.95it/s] 23%|##3       | 6/26 [00:00<00:00, 25.70it/s]                                               23%|##3       | 6/26 [00:00<00:00, 25.70it/s] 42%|####2     | 11/26 [00:00<00:00, 33.84it/s] 62%|######1   | 16/26 [00:00<00:00, 38.38it/s]                                                62%|######1   | 16/26 [00:00<00:00, 38.38it/s] 81%|########  | 21/26 [00:00<00:00, 37.02it/s]100%|##########| 26/26 [00:00<00:00, 40.29it/s]100%|##########| 26/26 [00:00<00:00, 32.66it/s]
Test: [   0/  26]	Loss 0.222 (0.222)	test_acc   0.92 (  0.92)	test_minacc   0.92 (  0.92)	test_majacc   0.92 (  0.92)	Loss_d 0.222 (0.222)	test_acc_d   0.92 (  0.92)	test_minacc_d   0.92 (  0.92)	test_majacc_d   0.92 (  0.92)	test_corr_d   0.74 (  0.74)
Test: [  10/  26]	Loss 0.184 (0.207)	test_acc   0.91 (  0.91)	test_minacc   0.86 (  0.87)	test_majacc   0.92 (  0.92)	Loss_d 0.184 (0.207)	test_acc_d   0.91 (  0.91)	test_minacc_d   0.86 (  0.87)	test_majacc_d   0.92 (  0.92)	test_corr_d   0.79 (  0.75)
Test: [  20/  26]	Loss 0.192 (0.199)	test_acc   0.93 (  0.92)	test_minacc   0.90 (  0.88)	test_majacc   0.93 (  0.92)	Loss_d 0.192 (0.199)	test_acc_d   0.93 (  0.92)	test_minacc_d   0.90 (  0.88)	test_majacc_d   0.93 (  0.92)	test_corr_d   0.77 (  0.76)
Test: [  26/  26]	Loss 0.207 (0.200)	test_acc   0.90 (  0.92)	test_minacc   0.89 (  0.88)	test_majacc   0.91 (  0.92)	Loss_d 0.207 (0.200)	test_acc_d   0.90 (  0.92)	test_minacc_d   0.89 (  0.88)	test_majacc_d   0.91 (  0.92)	test_corr_d   0.77 (  0.76)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.53it/s]
Test: [  0/  1]	Loss 1.952 (1.952)	test_acc   0.51 (  0.51)	test_minacc   0.46 (  0.46)	test_majacc   0.90 (  0.90)	Loss_d 1.952 (1.952)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.46 (  0.46)	test_majacc_d   0.90 (  0.90)	test_corr_d   0.37 (  0.37)
Test: [  1/  1]	Loss 1.952 (1.952)	test_acc   0.51 (  0.51)	test_minacc   0.46 (  0.46)	test_majacc   0.90 (  0.90)	Loss_d 1.952 (1.952)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.46 (  0.46)	test_majacc_d   0.90 (  0.90)	test_corr_d   0.37 (  0.37)
Overall Timing[ 31/  1]	epoch_time 0.0486 (0.0432)	validation_time 0.0004 (0.0006)	train_time 0.0482 (0.0424)
record: (train_acc, test_acc) (0.8120000209212304, 0.6170000433921814)
last accs (train_acc, test_acc) (0.9162000152468681, 0.5080000162124634)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:06,  3.75it/s] 19%|#9        | 5/26 [00:00<00:01, 15.29it/s] 35%|###4      | 9/26 [00:00<00:00, 22.18it/s] 50%|#####     | 13/26 [00:00<00:00, 26.49it/s] 65%|######5   | 17/26 [00:00<00:00, 29.17it/s] 81%|########  | 21/26 [00:00<00:00, 31.14it/s] 96%|#########6| 25/26 [00:00<00:00, 32.71it/s]100%|##########| 26/26 [00:01<00:00, 24.96it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 832 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 833 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 834 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 835 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 836 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 837 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 838 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 839 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 840 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 841 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 842 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 843 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 844 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 845 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 846 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 847 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 848 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 849 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 850 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 851 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 852 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 853 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 854 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 855 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 856 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 857 400
penalty weights 10000.0
Epoch: [32][  26/  26]	Loss 0.002 (0.001)	train_nll   0.23 (  0.20)	train_penalty   0.00 (  0.00)	weight_norm  24.60 ( 24.60)	train_acc   0.88 (  0.91)	train_minacc   0.93 (  0.88)	train_majacc   0.87 (  0.92)	train_corr   0.00 (  0.00)	l1 8.8619 (8.4139)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:07,  3.28it/s] 27%|##6       | 7/26 [00:00<00:00, 21.32it/s]                                               27%|##6       | 7/26 [00:00<00:00, 21.32it/s] 46%|####6     | 12/26 [00:00<00:00, 30.08it/s] 65%|######5   | 17/26 [00:00<00:00, 32.70it/s]                                                65%|######5   | 17/26 [00:00<00:00, 32.70it/s] 85%|########4 | 22/26 [00:00<00:00, 36.78it/s]100%|##########| 26/26 [00:00<00:00, 28.61it/s]
Test: [   0/  26]	Loss 0.232 (0.232)	test_acc   0.91 (  0.91)	test_minacc   0.92 (  0.92)	test_majacc   0.91 (  0.91)	Loss_d 0.232 (0.232)	test_acc_d   0.91 (  0.91)	test_minacc_d   0.92 (  0.92)	test_majacc_d   0.91 (  0.91)	test_corr_d   0.69 (  0.69)
Test: [  10/  26]	Loss 0.207 (0.229)	test_acc   0.90 (  0.89)	test_minacc   0.86 (  0.87)	test_majacc   0.90 (  0.90)	Loss_d 0.207 (0.229)	test_acc_d   0.90 (  0.89)	test_minacc_d   0.86 (  0.87)	test_majacc_d   0.90 (  0.90)	test_corr_d   0.75 (  0.71)
Test: [  20/  26]	Loss 0.189 (0.217)	test_acc   0.92 (  0.90)	test_minacc   0.90 (  0.88)	test_majacc   0.92 (  0.91)	Loss_d 0.189 (0.217)	test_acc_d   0.92 (  0.90)	test_minacc_d   0.90 (  0.88)	test_majacc_d   0.92 (  0.91)	test_corr_d   0.74 (  0.71)
Test: [  26/  26]	Loss 0.219 (0.216)	test_acc   0.89 (  0.90)	test_minacc   0.93 (  0.88)	test_majacc   0.88 (  0.91)	Loss_d 0.219 (0.216)	test_acc_d   0.89 (  0.90)	test_minacc_d   0.93 (  0.88)	test_majacc_d   0.88 (  0.91)	test_corr_d   0.74 (  0.71)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.70it/s]
Test: [  0/  1]	Loss 2.133 (2.133)	test_acc   0.54 (  0.54)	test_minacc   0.50 (  0.50)	test_majacc   0.89 (  0.89)	Loss_d 2.133 (2.133)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.89 (  0.89)	test_corr_d   0.28 (  0.28)
Test: [  1/  1]	Loss 2.133 (2.133)	test_acc   0.54 (  0.54)	test_minacc   0.50 (  0.50)	test_majacc   0.89 (  0.89)	Loss_d 2.133 (2.133)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.89 (  0.89)	test_corr_d   0.28 (  0.28)
Overall Timing[ 32/  1]	epoch_time 0.0444 (0.0432)	validation_time 0.0004 (0.0006)	train_time 0.0439 (0.0424)
record: (train_acc, test_acc) (0.8120000209212304, 0.6170000433921814)
last accs (train_acc, test_acc) (0.9021000225543976, 0.5430000424385071)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.40it/s] 19%|#9        | 5/26 [00:00<00:01, 20.25it/s] 35%|###4      | 9/26 [00:00<00:00, 25.55it/s] 50%|#####     | 13/26 [00:00<00:00, 28.64it/s] 65%|######5   | 17/26 [00:00<00:00, 30.75it/s] 81%|########  | 21/26 [00:00<00:00, 32.58it/s] 96%|#########6| 25/26 [00:00<00:00, 33.61it/s]100%|##########| 26/26 [00:00<00:00, 27.52it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 858 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 859 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 860 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 861 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 862 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 863 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 864 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 865 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 866 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 867 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 868 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 869 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 870 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 871 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 872 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 873 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 874 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 875 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 876 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 877 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 878 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 879 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 880 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 881 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 882 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 883 400
penalty weights 10000.0
Epoch: [33][  26/  26]	Loss 0.001 (0.001)	train_nll   0.16 (  0.20)	train_penalty   0.00 (  0.00)	weight_norm  24.61 ( 24.60)	train_acc   0.92 (  0.91)	train_minacc   0.85 (  0.87)	train_majacc   0.92 (  0.92)	train_corr   0.00 (  0.00)	l1 8.7225 (8.4070)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:00, 25.17it/s] 31%|###       | 8/26 [00:00<00:00, 36.78it/s]                                               31%|###       | 8/26 [00:00<00:00, 36.78it/s] 50%|#####     | 13/26 [00:00<00:00, 40.41it/s] 69%|######9   | 18/26 [00:00<00:00, 40.33it/s]                                                69%|######9   | 18/26 [00:00<00:00, 40.33it/s] 88%|########8 | 23/26 [00:00<00:00, 41.90it/s]100%|##########| 26/26 [00:00<00:00, 37.49it/s]
Test: [   0/  26]	Loss 0.201 (0.201)	test_acc   0.92 (  0.92)	test_minacc   0.91 (  0.91)	test_majacc   0.92 (  0.92)	Loss_d 0.201 (0.201)	test_acc_d   0.92 (  0.92)	test_minacc_d   0.91 (  0.91)	test_majacc_d   0.92 (  0.92)	test_corr_d   0.71 (  0.71)
Test: [  10/  26]	Loss 0.214 (0.207)	test_acc   0.89 (  0.91)	test_minacc   0.86 (  0.89)	test_majacc   0.90 (  0.91)	Loss_d 0.214 (0.207)	test_acc_d   0.89 (  0.91)	test_minacc_d   0.86 (  0.89)	test_majacc_d   0.90 (  0.91)	test_corr_d   0.75 (  0.72)
Test: [  20/  26]	Loss 0.189 (0.212)	test_acc   0.91 (  0.90)	test_minacc   0.90 (  0.88)	test_majacc   0.91 (  0.91)	Loss_d 0.189 (0.212)	test_acc_d   0.91 (  0.90)	test_minacc_d   0.90 (  0.88)	test_majacc_d   0.91 (  0.91)	test_corr_d   0.76 (  0.73)
Test: [  26/  26]	Loss 0.166 (0.209)	test_acc   0.91 (  0.91)	test_minacc   0.85 (  0.88)	test_majacc   0.92 (  0.91)	Loss_d 0.166 (0.209)	test_acc_d   0.91 (  0.91)	test_minacc_d   0.85 (  0.88)	test_majacc_d   0.92 (  0.91)	test_corr_d   0.79 (  0.73)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.83it/s]
Test: [  0/  1]	Loss 2.074 (2.074)	test_acc   0.54 (  0.54)	test_minacc   0.49 (  0.49)	test_majacc   0.92 (  0.92)	Loss_d 2.074 (2.074)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.49 (  0.49)	test_majacc_d   0.92 (  0.92)	test_corr_d   0.31 (  0.31)
Test: [  1/  1]	Loss 2.074 (2.074)	test_acc   0.54 (  0.54)	test_minacc   0.49 (  0.49)	test_majacc   0.92 (  0.92)	Loss_d 2.074 (2.074)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.49 (  0.49)	test_majacc_d   0.92 (  0.92)	test_corr_d   0.31 (  0.31)
Overall Timing[ 33/  1]	epoch_time 0.0425 (0.0432)	validation_time 0.0004 (0.0006)	train_time 0.0420 (0.0424)
record: (train_acc, test_acc) (0.8120000209212304, 0.6170000433921814)
last accs (train_acc, test_acc) (0.905200020968914, 0.5370000004768372)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:02,  9.93it/s] 23%|##3       | 6/26 [00:00<00:00, 20.80it/s] 38%|###8      | 10/26 [00:00<00:00, 26.45it/s] 54%|#####3    | 14/26 [00:00<00:00, 29.19it/s] 69%|######9   | 18/26 [00:00<00:00, 31.74it/s] 85%|########4 | 22/26 [00:00<00:00, 32.59it/s]100%|##########| 26/26 [00:00<00:00, 33.18it/s]100%|##########| 26/26 [00:00<00:00, 27.18it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 884 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 885 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 886 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 887 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 888 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 889 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 890 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 891 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 892 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 893 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 894 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 895 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 896 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 897 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 898 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 899 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 900 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 901 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 902 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 903 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 904 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 905 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 906 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 907 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 908 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 909 400
penalty weights 10000.0
Epoch: [34][  26/  26]	Loss 0.000 (0.001)	train_nll   0.20 (  0.21)	train_penalty   0.00 (  0.00)	weight_norm  24.61 ( 24.61)	train_acc   0.90 (  0.91)	train_minacc   0.89 (  0.87)	train_majacc   0.90 (  0.91)	train_corr   0.00 (  0.00)	l1 8.2609 (8.6717)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.78it/s] 23%|##3       | 6/26 [00:00<00:00, 32.55it/s]                                               23%|##3       | 6/26 [00:00<00:00, 32.55it/s] 42%|####2     | 11/26 [00:00<00:00, 38.88it/s] 62%|######1   | 16/26 [00:00<00:00, 42.46it/s]                                                62%|######1   | 16/26 [00:00<00:00, 42.46it/s] 81%|########  | 21/26 [00:00<00:00, 41.96it/s]100%|##########| 26/26 [00:00<00:00, 37.42it/s]
Test: [   0/  26]	Loss 0.218 (0.218)	test_acc   0.91 (  0.91)	test_minacc   0.91 (  0.91)	test_majacc   0.91 (  0.91)	Loss_d 0.218 (0.218)	test_acc_d   0.91 (  0.91)	test_minacc_d   0.91 (  0.91)	test_majacc_d   0.91 (  0.91)	test_corr_d   0.72 (  0.72)
Test: [  10/  26]	Loss 0.192 (0.205)	test_acc   0.91 (  0.91)	test_minacc   0.88 (  0.90)	test_majacc   0.92 (  0.91)	Loss_d 0.192 (0.205)	test_acc_d   0.91 (  0.91)	test_minacc_d   0.88 (  0.90)	test_majacc_d   0.92 (  0.91)	test_corr_d   0.76 (  0.73)
Test: [  20/  26]	Loss 0.209 (0.204)	test_acc   0.91 (  0.91)	test_minacc   0.92 (  0.90)	test_majacc   0.90 (  0.91)	Loss_d 0.209 (0.204)	test_acc_d   0.91 (  0.91)	test_minacc_d   0.92 (  0.90)	test_majacc_d   0.90 (  0.91)	test_corr_d   0.74 (  0.73)
Test: [  26/  26]	Loss 0.207 (0.207)	test_acc   0.90 (  0.91)	test_minacc   0.89 (  0.89)	test_majacc   0.90 (  0.91)	Loss_d 0.207 (0.207)	test_acc_d   0.90 (  0.91)	test_minacc_d   0.89 (  0.89)	test_majacc_d   0.90 (  0.91)	test_corr_d   0.76 (  0.73)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.67it/s]
Test: [  0/  1]	Loss 1.803 (1.803)	test_acc   0.57 (  0.57)	test_minacc   0.53 (  0.53)	test_majacc   0.92 (  0.92)	Loss_d 1.803 (1.803)	test_acc_d   0.57 (  0.57)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.92 (  0.92)	test_corr_d   0.30 (  0.30)
Test: [  1/  1]	Loss 1.803 (1.803)	test_acc   0.57 (  0.57)	test_minacc   0.53 (  0.53)	test_majacc   0.92 (  0.92)	Loss_d 1.803 (1.803)	test_acc_d   0.57 (  0.57)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.92 (  0.92)	test_corr_d   0.30 (  0.30)
Overall Timing[ 34/  1]	epoch_time 0.0408 (0.0431)	validation_time 0.0003 (0.0006)	train_time 0.0404 (0.0424)
record: (train_acc, test_acc) (0.8120000209212304, 0.6170000433921814)
last accs (train_acc, test_acc) (0.9086000189781189, 0.5690000057220459)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.64it/s] 19%|#9        | 5/26 [00:00<00:00, 21.33it/s] 35%|###4      | 9/26 [00:00<00:00, 27.66it/s] 50%|#####     | 13/26 [00:00<00:00, 31.06it/s] 65%|######5   | 17/26 [00:00<00:00, 33.06it/s] 81%|########  | 21/26 [00:00<00:00, 34.05it/s] 96%|#########6| 25/26 [00:00<00:00, 34.89it/s]100%|##########| 26/26 [00:00<00:00, 28.99it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 910 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 911 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 912 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 913 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 914 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 915 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 916 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 917 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 918 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 919 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 920 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 921 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 922 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 923 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 924 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 925 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 926 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 927 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 928 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 929 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 930 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 931 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 932 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 933 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 934 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 935 400
penalty weights 10000.0
Epoch: [35][  26/  26]	Loss 0.000 (0.000)	train_nll   0.21 (  0.23)	train_penalty   0.00 (  0.00)	weight_norm  24.62 ( 24.61)	train_acc   0.89 (  0.90)	train_minacc   0.85 (  0.87)	train_majacc   0.89 (  0.90)	train_corr   0.00 (  0.00)	l1 8.1771 (8.4761)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  6.07it/s] 23%|##3       | 6/26 [00:00<00:00, 25.95it/s]                                               23%|##3       | 6/26 [00:00<00:00, 25.95it/s] 42%|####2     | 11/26 [00:00<00:00, 33.61it/s] 62%|######1   | 16/26 [00:00<00:00, 38.48it/s]                                                62%|######1   | 16/26 [00:00<00:00, 38.48it/s] 81%|########  | 21/26 [00:00<00:00, 37.50it/s]100%|##########| 26/26 [00:00<00:00, 40.91it/s]100%|##########| 26/26 [00:00<00:00, 32.65it/s]
Test: [   0/  26]	Loss 0.227 (0.227)	test_acc   0.91 (  0.91)	test_minacc   0.89 (  0.89)	test_majacc   0.91 (  0.91)	Loss_d 0.227 (0.227)	test_acc_d   0.91 (  0.91)	test_minacc_d   0.89 (  0.89)	test_majacc_d   0.91 (  0.91)	test_corr_d   0.72 (  0.72)
Test: [  10/  26]	Loss 0.182 (0.205)	test_acc   0.92 (  0.91)	test_minacc   0.92 (  0.90)	test_majacc   0.92 (  0.91)	Loss_d 0.182 (0.205)	test_acc_d   0.92 (  0.91)	test_minacc_d   0.92 (  0.90)	test_majacc_d   0.92 (  0.91)	test_corr_d   0.78 (  0.74)
Test: [  20/  26]	Loss 0.204 (0.200)	test_acc   0.91 (  0.91)	test_minacc   0.90 (  0.91)	test_majacc   0.91 (  0.92)	Loss_d 0.204 (0.200)	test_acc_d   0.91 (  0.91)	test_minacc_d   0.90 (  0.91)	test_majacc_d   0.91 (  0.92)	test_corr_d   0.75 (  0.74)
Test: [  26/  26]	Loss 0.213 (0.204)	test_acc   0.88 (  0.91)	test_minacc   0.85 (  0.90)	test_majacc   0.89 (  0.91)	Loss_d 0.213 (0.204)	test_acc_d   0.88 (  0.91)	test_minacc_d   0.85 (  0.90)	test_majacc_d   0.89 (  0.91)	test_corr_d   0.76 (  0.74)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.00it/s]
Test: [  0/  1]	Loss 1.780 (1.780)	test_acc   0.55 (  0.55)	test_minacc   0.51 (  0.51)	test_majacc   0.90 (  0.90)	Loss_d 1.780 (1.780)	test_acc_d   0.55 (  0.55)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.90 (  0.90)	test_corr_d   0.33 (  0.33)
Test: [  1/  1]	Loss 1.780 (1.780)	test_acc   0.55 (  0.55)	test_minacc   0.51 (  0.51)	test_majacc   0.90 (  0.90)	Loss_d 1.780 (1.780)	test_acc_d   0.55 (  0.55)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.90 (  0.90)	test_corr_d   0.33 (  0.33)
Overall Timing[ 35/  1]	epoch_time 0.0406 (0.0430)	validation_time 0.0004 (0.0006)	train_time 0.0402 (0.0423)
record: (train_acc, test_acc) (0.8120000209212304, 0.6170000433921814)
last accs (train_acc, test_acc) (0.9109000136852264, 0.5480000376701355)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.41it/s] 19%|#9        | 5/26 [00:00<00:01, 20.80it/s] 35%|###4      | 9/26 [00:00<00:00, 26.28it/s] 50%|#####     | 13/26 [00:00<00:00, 29.10it/s] 65%|######5   | 17/26 [00:00<00:00, 31.20it/s] 81%|########  | 21/26 [00:00<00:00, 32.65it/s] 96%|#########6| 25/26 [00:00<00:00, 33.45it/s]100%|##########| 26/26 [00:00<00:00, 28.00it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 936 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 937 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 938 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 939 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 940 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 941 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 942 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 943 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 944 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 945 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 946 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 947 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 948 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 949 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 950 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 951 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 952 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 953 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 954 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 955 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 956 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 957 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 958 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 959 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 960 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 961 400
penalty weights 10000.0
Epoch: [36][  26/  26]	Loss 0.000 (0.001)	train_nll   0.22 (  0.22)	train_penalty   0.00 (  0.00)	weight_norm  24.63 ( 24.62)	train_acc   0.88 (  0.90)	train_minacc   0.85 (  0.92)	train_majacc   0.89 (  0.89)	train_corr   0.00 (  0.00)	l1 8.4328 (8.4653)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:02, 10.28it/s] 27%|##6       | 7/26 [00:00<00:00, 26.25it/s]                                               27%|##6       | 7/26 [00:00<00:00, 26.25it/s] 46%|####6     | 12/26 [00:00<00:00, 34.11it/s] 65%|######5   | 17/26 [00:00<00:00, 38.52it/s]                                                65%|######5   | 17/26 [00:00<00:00, 38.52it/s] 85%|########4 | 22/26 [00:00<00:00, 37.47it/s]100%|##########| 26/26 [00:00<00:00, 33.41it/s]
Test: [   0/  26]	Loss 0.232 (0.232)	test_acc   0.91 (  0.91)	test_minacc   0.83 (  0.83)	test_majacc   0.92 (  0.92)	Loss_d 0.232 (0.232)	test_acc_d   0.91 (  0.91)	test_minacc_d   0.83 (  0.83)	test_majacc_d   0.92 (  0.92)	test_corr_d   0.76 (  0.76)
Test: [  10/  26]	Loss 0.181 (0.218)	test_acc   0.91 (  0.90)	test_minacc   0.88 (  0.86)	test_majacc   0.92 (  0.91)	Loss_d 0.181 (0.218)	test_acc_d   0.91 (  0.90)	test_minacc_d   0.88 (  0.86)	test_majacc_d   0.92 (  0.91)	test_corr_d   0.80 (  0.77)
Test: [  20/  26]	Loss 0.189 (0.204)	test_acc   0.92 (  0.91)	test_minacc   0.90 (  0.86)	test_majacc   0.92 (  0.92)	Loss_d 0.189 (0.204)	test_acc_d   0.92 (  0.91)	test_minacc_d   0.90 (  0.86)	test_majacc_d   0.92 (  0.92)	test_corr_d   0.78 (  0.77)
Test: [  26/  26]	Loss 0.215 (0.206)	test_acc   0.89 (  0.91)	test_minacc   0.85 (  0.86)	test_majacc   0.90 (  0.92)	Loss_d 0.215 (0.206)	test_acc_d   0.89 (  0.91)	test_minacc_d   0.85 (  0.86)	test_majacc_d   0.90 (  0.92)	test_corr_d   0.79 (  0.77)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 60.72it/s]
Test: [  0/  1]	Loss 2.062 (2.062)	test_acc   0.51 (  0.51)	test_minacc   0.47 (  0.47)	test_majacc   0.91 (  0.91)	Loss_d 2.062 (2.062)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.47 (  0.47)	test_majacc_d   0.91 (  0.91)	test_corr_d   0.41 (  0.41)
Test: [  1/  1]	Loss 2.062 (2.062)	test_acc   0.51 (  0.51)	test_minacc   0.47 (  0.47)	test_majacc   0.91 (  0.91)	Loss_d 2.062 (2.062)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.47 (  0.47)	test_majacc_d   0.91 (  0.91)	test_corr_d   0.41 (  0.41)
Overall Timing[ 36/  1]	epoch_time 0.0428 (0.0430)	validation_time 0.0003 (0.0006)	train_time 0.0424 (0.0423)
record: (train_acc, test_acc) (0.8120000209212304, 0.6170000433921814)
last accs (train_acc, test_acc) (0.9103000219464302, 0.5130000114440918)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.55it/s] 15%|#5        | 4/26 [00:00<00:01, 16.80it/s] 31%|###       | 8/26 [00:00<00:00, 24.48it/s] 46%|####6     | 12/26 [00:00<00:00, 28.67it/s] 62%|######1   | 16/26 [00:00<00:00, 30.52it/s] 77%|#######6  | 20/26 [00:00<00:00, 32.12it/s] 92%|#########2| 24/26 [00:00<00:00, 33.37it/s]100%|##########| 26/26 [00:00<00:00, 27.39it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 962 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 963 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 964 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 965 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 966 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 967 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 968 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 969 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 970 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 971 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 972 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 973 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 974 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 975 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 976 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 977 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 978 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 979 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 980 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 981 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 982 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 983 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 984 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 985 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 986 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 987 400
penalty weights 10000.0
Epoch: [37][  26/  26]	Loss 0.001 (0.001)	train_nll   0.22 (  0.21)	train_penalty   0.00 (  0.00)	weight_norm  24.64 ( 24.63)	train_acc   0.90 (  0.91)	train_minacc   0.93 (  0.88)	train_majacc   0.89 (  0.92)	train_corr   0.00 (  0.00)	l1 8.9605 (8.4022)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:05,  4.99it/s] 12%|#1        | 3/26 [00:00<00:02, 10.73it/s] 35%|###4      | 9/26 [00:00<00:00, 27.13it/s]                                               35%|###4      | 9/26 [00:00<00:00, 27.13it/s] 54%|#####3    | 14/26 [00:00<00:00, 32.48it/s] 73%|#######3  | 19/26 [00:00<00:00, 36.43it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 36.43it/s] 92%|#########2| 24/26 [00:00<00:00, 40.08it/s]100%|##########| 26/26 [00:00<00:00, 29.86it/s]
Test: [   0/  26]	Loss 0.232 (0.232)	test_acc   0.91 (  0.91)	test_minacc   0.92 (  0.92)	test_majacc   0.90 (  0.90)	Loss_d 0.232 (0.232)	test_acc_d   0.91 (  0.91)	test_minacc_d   0.92 (  0.92)	test_majacc_d   0.90 (  0.90)	test_corr_d   0.70 (  0.70)
Test: [  10/  26]	Loss 0.218 (0.230)	test_acc   0.91 (  0.90)	test_minacc   0.88 (  0.89)	test_majacc   0.91 (  0.90)	Loss_d 0.218 (0.230)	test_acc_d   0.91 (  0.90)	test_minacc_d   0.88 (  0.89)	test_majacc_d   0.91 (  0.90)	test_corr_d   0.75 (  0.71)
Test: [  20/  26]	Loss 0.196 (0.222)	test_acc   0.91 (  0.90)	test_minacc   0.92 (  0.89)	test_majacc   0.91 (  0.90)	Loss_d 0.196 (0.222)	test_acc_d   0.91 (  0.90)	test_minacc_d   0.92 (  0.89)	test_majacc_d   0.91 (  0.90)	test_corr_d   0.74 (  0.71)
Test: [  26/  26]	Loss 0.210 (0.220)	test_acc   0.90 (  0.90)	test_minacc   0.93 (  0.89)	test_majacc   0.90 (  0.90)	Loss_d 0.210 (0.220)	test_acc_d   0.90 (  0.90)	test_minacc_d   0.93 (  0.89)	test_majacc_d   0.90 (  0.90)	test_corr_d   0.75 (  0.71)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 60.98it/s]
Test: [  0/  1]	Loss 2.145 (2.145)	test_acc   0.56 (  0.56)	test_minacc   0.52 (  0.52)	test_majacc   0.89 (  0.89)	Loss_d 2.145 (2.145)	test_acc_d   0.56 (  0.56)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.89 (  0.89)	test_corr_d   0.28 (  0.28)
Test: [  1/  1]	Loss 2.145 (2.145)	test_acc   0.56 (  0.56)	test_minacc   0.52 (  0.52)	test_majacc   0.89 (  0.89)	Loss_d 2.145 (2.145)	test_acc_d   0.56 (  0.56)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.89 (  0.89)	test_corr_d   0.28 (  0.28)
Overall Timing[ 37/  1]	epoch_time 0.0416 (0.0430)	validation_time 0.0004 (0.0006)	train_time 0.0412 (0.0423)
record: (train_acc, test_acc) (0.8120000209212304, 0.6170000433921814)
last accs (train_acc, test_acc) (0.9026000216603279, 0.5570000410079956)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.17it/s] 19%|#9        | 5/26 [00:00<00:00, 22.04it/s] 35%|###4      | 9/26 [00:00<00:00, 28.32it/s] 50%|#####     | 13/26 [00:00<00:00, 31.47it/s] 65%|######5   | 17/26 [00:00<00:00, 33.08it/s] 81%|########  | 21/26 [00:00<00:00, 34.76it/s] 96%|#########6| 25/26 [00:00<00:00, 34.88it/s]100%|##########| 26/26 [00:00<00:00, 29.07it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 988 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 989 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 990 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 991 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 992 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 993 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 994 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 995 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 996 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 997 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 998 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 999 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1000 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1001 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1002 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1003 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1004 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1005 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1006 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1007 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1008 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1009 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1010 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1011 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1012 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1013 400
penalty weights 10000.0
Epoch: [38][  26/  26]	Loss 0.000 (0.001)	train_nll   0.19 (  0.20)	train_penalty   0.00 (  0.00)	weight_norm  24.65 ( 24.64)	train_acc   0.91 (  0.91)	train_minacc   0.89 (  0.88)	train_majacc   0.91 (  0.92)	train_corr   0.00 (  0.00)	l1 8.5464 (8.5644)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.66it/s] 15%|#5        | 4/26 [00:00<00:01, 20.99it/s] 35%|###4      | 9/26 [00:00<00:00, 32.70it/s]                                               35%|###4      | 9/26 [00:00<00:00, 32.70it/s] 54%|#####3    | 14/26 [00:00<00:00, 38.13it/s] 73%|#######3  | 19/26 [00:00<00:00, 40.23it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 40.23it/s] 92%|#########2| 24/26 [00:00<00:00, 42.07it/s]100%|##########| 26/26 [00:00<00:00, 35.05it/s]
Test: [   0/  26]	Loss 0.206 (0.206)	test_acc   0.93 (  0.93)	test_minacc   0.94 (  0.94)	test_majacc   0.92 (  0.92)	Loss_d 0.206 (0.206)	test_acc_d   0.93 (  0.93)	test_minacc_d   0.94 (  0.94)	test_majacc_d   0.92 (  0.92)	test_corr_d   0.71 (  0.71)
Test: [  10/  26]	Loss 0.198 (0.207)	test_acc   0.91 (  0.91)	test_minacc   0.94 (  0.93)	test_majacc   0.91 (  0.91)	Loss_d 0.198 (0.207)	test_acc_d   0.91 (  0.91)	test_minacc_d   0.94 (  0.93)	test_majacc_d   0.91 (  0.91)	test_corr_d   0.75 (  0.72)
Test: [  20/  26]	Loss 0.183 (0.203)	test_acc   0.92 (  0.91)	test_minacc   0.88 (  0.91)	test_majacc   0.92 (  0.91)	Loss_d 0.183 (0.203)	test_acc_d   0.92 (  0.91)	test_minacc_d   0.88 (  0.91)	test_majacc_d   0.92 (  0.91)	test_corr_d   0.77 (  0.73)
Test: [  26/  26]	Loss 0.195 (0.204)	test_acc   0.91 (  0.91)	test_minacc   0.89 (  0.91)	test_majacc   0.91 (  0.91)	Loss_d 0.195 (0.204)	test_acc_d   0.91 (  0.91)	test_minacc_d   0.89 (  0.91)	test_majacc_d   0.91 (  0.91)	test_corr_d   0.78 (  0.73)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.40it/s]
Test: [  0/  1]	Loss 1.966 (1.966)	test_acc   0.53 (  0.53)	test_minacc   0.49 (  0.49)	test_majacc   0.91 (  0.91)	Loss_d 1.966 (1.966)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.49 (  0.49)	test_majacc_d   0.91 (  0.91)	test_corr_d   0.30 (  0.30)
Test: [  1/  1]	Loss 1.966 (1.966)	test_acc   0.53 (  0.53)	test_minacc   0.49 (  0.49)	test_majacc   0.91 (  0.91)	Loss_d 1.966 (1.966)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.49 (  0.49)	test_majacc_d   0.91 (  0.91)	test_corr_d   0.30 (  0.30)
Overall Timing[ 38/  1]	epoch_time 0.0406 (0.0429)	validation_time 0.0005 (0.0006)	train_time 0.0401 (0.0422)
record: (train_acc, test_acc) (0.8120000209212304, 0.6170000433921814)
last accs (train_acc, test_acc) (0.9100000239610672, 0.5330000519752502)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.62it/s] 19%|#9        | 5/26 [00:00<00:00, 21.80it/s] 35%|###4      | 9/26 [00:00<00:00, 28.29it/s] 50%|#####     | 13/26 [00:00<00:00, 31.23it/s] 65%|######5   | 17/26 [00:00<00:00, 33.14it/s] 81%|########  | 21/26 [00:00<00:00, 34.31it/s] 96%|#########6| 25/26 [00:00<00:00, 34.89it/s]100%|##########| 26/26 [00:00<00:00, 29.13it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1014 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1015 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1016 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1017 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1018 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1019 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1020 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1021 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1022 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1023 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1024 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1025 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1026 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1027 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1028 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1029 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1030 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1031 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1032 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1033 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1034 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1035 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1036 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1037 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1038 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1039 400
penalty weights 10000.0
Epoch: [39][  26/  26]	Loss 0.000 (0.000)	train_nll   0.18 (  0.20)	train_penalty   0.00 (  0.00)	weight_norm  24.65 ( 24.65)	train_acc   0.91 (  0.91)	train_minacc   0.93 (  0.90)	train_majacc   0.91 (  0.91)	train_corr   0.00 (  0.00)	l1 8.4538 (8.6431)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.99it/s] 23%|##3       | 6/26 [00:00<00:00, 32.87it/s]                                               23%|##3       | 6/26 [00:00<00:00, 32.87it/s] 42%|####2     | 11/26 [00:00<00:00, 38.72it/s] 62%|######1   | 16/26 [00:00<00:00, 42.89it/s]                                                62%|######1   | 16/26 [00:00<00:00, 42.89it/s] 81%|########  | 21/26 [00:00<00:00, 41.44it/s]100%|##########| 26/26 [00:00<00:00, 37.40it/s]
Test: [   0/  26]	Loss 0.199 (0.199)	test_acc   0.93 (  0.93)	test_minacc   0.95 (  0.95)	test_majacc   0.92 (  0.92)	Loss_d 0.199 (0.199)	test_acc_d   0.93 (  0.93)	test_minacc_d   0.95 (  0.95)	test_majacc_d   0.92 (  0.92)	test_corr_d   0.73 (  0.73)
Test: [  10/  26]	Loss 0.186 (0.193)	test_acc   0.91 (  0.92)	test_minacc   0.90 (  0.92)	test_majacc   0.91 (  0.92)	Loss_d 0.186 (0.193)	test_acc_d   0.91 (  0.92)	test_minacc_d   0.90 (  0.92)	test_majacc_d   0.91 (  0.92)	test_corr_d   0.77 (  0.74)
Test: [  20/  26]	Loss 0.181 (0.191)	test_acc   0.92 (  0.92)	test_minacc   0.90 (  0.91)	test_majacc   0.92 (  0.92)	Loss_d 0.181 (0.191)	test_acc_d   0.92 (  0.92)	test_minacc_d   0.90 (  0.91)	test_majacc_d   0.92 (  0.92)	test_corr_d   0.77 (  0.75)
Test: [  26/  26]	Loss 0.185 (0.193)	test_acc   0.91 (  0.92)	test_minacc   0.93 (  0.91)	test_majacc   0.91 (  0.92)	Loss_d 0.185 (0.193)	test_acc_d   0.91 (  0.92)	test_minacc_d   0.93 (  0.91)	test_majacc_d   0.91 (  0.92)	test_corr_d   0.78 (  0.75)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.08it/s]
Test: [  0/  1]	Loss 1.958 (1.958)	test_acc   0.54 (  0.54)	test_minacc   0.50 (  0.50)	test_majacc   0.93 (  0.93)	Loss_d 1.958 (1.958)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.93 (  0.93)	test_corr_d   0.34 (  0.34)
Test: [  1/  1]	Loss 1.958 (1.958)	test_acc   0.54 (  0.54)	test_minacc   0.50 (  0.50)	test_majacc   0.93 (  0.93)	Loss_d 1.958 (1.958)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.93 (  0.93)	test_corr_d   0.34 (  0.34)
Overall Timing[ 39/  1]	epoch_time 0.0411 (0.0429)	validation_time 0.0004 (0.0006)	train_time 0.0407 (0.0422)
record: (train_acc, test_acc) (0.8120000209212304, 0.6170000433921814)
last accs (train_acc, test_acc) (0.9163000224232674, 0.5390000343322754)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 18.30it/s] 23%|##3       | 6/26 [00:00<00:00, 28.57it/s] 38%|###8      | 10/26 [00:00<00:00, 31.67it/s] 54%|#####3    | 14/26 [00:00<00:00, 33.02it/s] 69%|######9   | 18/26 [00:00<00:00, 33.95it/s] 85%|########4 | 22/26 [00:00<00:00, 34.76it/s]100%|##########| 26/26 [00:00<00:00, 36.34it/s]100%|##########| 26/26 [00:00<00:00, 30.92it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1040 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1041 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1042 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1043 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1044 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1045 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1046 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1047 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1048 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1049 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1050 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1051 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1052 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1053 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1054 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1055 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1056 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1057 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1058 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1059 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1060 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1061 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1062 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1063 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1064 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1065 400
penalty weights 10000.0
Epoch: [40][  26/  26]	Loss 0.000 (0.000)	train_nll   0.22 (  0.20)	train_penalty   0.00 (  0.00)	weight_norm  24.65 ( 24.65)	train_acc   0.88 (  0.91)	train_minacc   0.89 (  0.91)	train_majacc   0.88 (  0.91)	train_corr   0.00 (  0.00)	l1 8.7215 (8.7189)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.68it/s] 12%|#1        | 3/26 [00:00<00:01, 12.31it/s] 19%|#9        | 5/26 [00:00<00:01, 15.13it/s] 38%|###8      | 10/26 [00:00<00:00, 26.84it/s]                                                38%|###8      | 10/26 [00:00<00:00, 26.84it/s] 58%|#####7    | 15/26 [00:00<00:00, 33.26it/s] 77%|#######6  | 20/26 [00:00<00:00, 34.91it/s]                                                77%|#######6  | 20/26 [00:00<00:00, 34.91it/s] 96%|#########6| 25/26 [00:00<00:00, 38.20it/s]100%|##########| 26/26 [00:00<00:00, 28.64it/s]
Test: [   0/  26]	Loss 0.221 (0.221)	test_acc   0.91 (  0.91)	test_minacc   0.88 (  0.88)	test_majacc   0.91 (  0.91)	Loss_d 0.221 (0.221)	test_acc_d   0.91 (  0.91)	test_minacc_d   0.88 (  0.88)	test_majacc_d   0.91 (  0.91)	test_corr_d   0.73 (  0.73)
Test: [  10/  26]	Loss 0.182 (0.207)	test_acc   0.92 (  0.91)	test_minacc   0.94 (  0.91)	test_majacc   0.92 (  0.91)	Loss_d 0.182 (0.207)	test_acc_d   0.92 (  0.91)	test_minacc_d   0.94 (  0.91)	test_majacc_d   0.92 (  0.91)	test_corr_d   0.78 (  0.74)
Test: [  20/  26]	Loss 0.181 (0.198)	test_acc   0.92 (  0.91)	test_minacc   0.92 (  0.91)	test_majacc   0.92 (  0.91)	Loss_d 0.181 (0.198)	test_acc_d   0.92 (  0.91)	test_minacc_d   0.92 (  0.91)	test_majacc_d   0.92 (  0.91)	test_corr_d   0.77 (  0.74)
Test: [  26/  26]	Loss 0.213 (0.199)	test_acc   0.88 (  0.91)	test_minacc   0.89 (  0.90)	test_majacc   0.88 (  0.91)	Loss_d 0.213 (0.199)	test_acc_d   0.88 (  0.91)	test_minacc_d   0.89 (  0.90)	test_majacc_d   0.88 (  0.91)	test_corr_d   0.76 (  0.75)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.48it/s]
Test: [  0/  1]	Loss 2.052 (2.052)	test_acc   0.55 (  0.55)	test_minacc   0.51 (  0.51)	test_majacc   0.92 (  0.92)	Loss_d 2.052 (2.052)	test_acc_d   0.55 (  0.55)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.92 (  0.92)	test_corr_d   0.32 (  0.32)
Test: [  1/  1]	Loss 2.052 (2.052)	test_acc   0.55 (  0.55)	test_minacc   0.51 (  0.51)	test_majacc   0.92 (  0.92)	Loss_d 2.052 (2.052)	test_acc_d   0.55 (  0.55)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.92 (  0.92)	test_corr_d   0.32 (  0.32)
Overall Timing[ 40/  1]	epoch_time 0.0402 (0.0428)	validation_time 0.0003 (0.0006)	train_time 0.0399 (0.0421)
record: (train_acc, test_acc) (0.8120000209212304, 0.6170000433921814)
last accs (train_acc, test_acc) (0.9121000205874443, 0.5540000200271606)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 16.42it/s] 19%|#9        | 5/26 [00:00<00:00, 23.65it/s] 35%|###4      | 9/26 [00:00<00:00, 28.80it/s] 50%|#####     | 13/26 [00:00<00:00, 31.33it/s] 65%|######5   | 17/26 [00:00<00:00, 32.96it/s] 81%|########  | 21/26 [00:00<00:00, 33.69it/s] 96%|#########6| 25/26 [00:00<00:00, 34.03it/s]100%|##########| 26/26 [00:00<00:00, 29.63it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1066 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1067 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1068 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1069 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1070 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1071 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1072 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1073 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1074 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1075 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1076 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1077 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1078 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1079 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1080 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1081 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1082 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1083 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1084 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1085 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1086 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1087 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1088 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1089 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1090 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1091 400
penalty weights 10000.0
Epoch: [41][  26/  26]	Loss 0.000 (0.000)	train_nll   0.19 (  0.19)	train_penalty   0.00 (  0.00)	weight_norm  24.65 ( 24.65)	train_acc   0.90 (  0.92)	train_minacc   0.93 (  0.90)	train_majacc   0.90 (  0.92)	train_corr   0.00 (  0.00)	l1 8.9569 (8.6145)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:05,  4.43it/s] 23%|##3       | 6/26 [00:00<00:00, 21.83it/s]                                               23%|##3       | 6/26 [00:00<00:00, 21.83it/s] 42%|####2     | 11/26 [00:00<00:00, 30.67it/s] 62%|######1   | 16/26 [00:00<00:00, 36.14it/s]                                                62%|######1   | 16/26 [00:00<00:00, 36.14it/s] 81%|########  | 21/26 [00:00<00:00, 36.20it/s]100%|##########| 26/26 [00:00<00:00, 39.69it/s]100%|##########| 26/26 [00:00<00:00, 30.47it/s]
Test: [   0/  26]	Loss 0.204 (0.204)	test_acc   0.93 (  0.93)	test_minacc   0.94 (  0.94)	test_majacc   0.93 (  0.93)	Loss_d 0.204 (0.204)	test_acc_d   0.93 (  0.93)	test_minacc_d   0.94 (  0.94)	test_majacc_d   0.93 (  0.93)	test_corr_d   0.72 (  0.72)
Test: [  10/  26]	Loss 0.193 (0.205)	test_acc   0.92 (  0.91)	test_minacc   0.90 (  0.91)	test_majacc   0.92 (  0.91)	Loss_d 0.193 (0.205)	test_acc_d   0.92 (  0.91)	test_minacc_d   0.90 (  0.91)	test_majacc_d   0.92 (  0.91)	test_corr_d   0.77 (  0.73)
Test: [  20/  26]	Loss 0.178 (0.201)	test_acc   0.93 (  0.91)	test_minacc   0.92 (  0.90)	test_majacc   0.93 (  0.92)	Loss_d 0.178 (0.201)	test_acc_d   0.93 (  0.91)	test_minacc_d   0.92 (  0.90)	test_majacc_d   0.93 (  0.92)	test_corr_d   0.76 (  0.73)
Test: [  26/  26]	Loss 0.189 (0.200)	test_acc   0.90 (  0.91)	test_minacc   0.93 (  0.90)	test_majacc   0.90 (  0.92)	Loss_d 0.189 (0.200)	test_acc_d   0.90 (  0.91)	test_minacc_d   0.93 (  0.90)	test_majacc_d   0.90 (  0.92)	test_corr_d   0.77 (  0.74)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.62it/s]
Test: [  0/  1]	Loss 2.181 (2.181)	test_acc   0.54 (  0.54)	test_minacc   0.50 (  0.50)	test_majacc   0.89 (  0.89)	Loss_d 2.181 (2.181)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.89 (  0.89)	test_corr_d   0.30 (  0.30)
Test: [  1/  1]	Loss 2.181 (2.181)	test_acc   0.54 (  0.54)	test_minacc   0.50 (  0.50)	test_majacc   0.89 (  0.89)	Loss_d 2.181 (2.181)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.89 (  0.89)	test_corr_d   0.30 (  0.30)
Overall Timing[ 41/  1]	epoch_time 0.0423 (0.0428)	validation_time 0.0004 (0.0006)	train_time 0.0419 (0.0421)
record: (train_acc, test_acc) (0.8120000209212304, 0.6170000433921814)
last accs (train_acc, test_acc) (0.9139000211954117, 0.5410000085830688)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 16.03it/s] 23%|##3       | 6/26 [00:00<00:00, 26.00it/s] 38%|###8      | 10/26 [00:00<00:00, 29.64it/s] 54%|#####3    | 14/26 [00:00<00:00, 31.19it/s] 69%|######9   | 18/26 [00:00<00:00, 32.33it/s] 85%|########4 | 22/26 [00:00<00:00, 32.94it/s]100%|##########| 26/26 [00:00<00:00, 33.68it/s]100%|##########| 26/26 [00:00<00:00, 29.19it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1092 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1093 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1094 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1095 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1096 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1097 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1098 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1099 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1100 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1101 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1102 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1103 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1104 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1105 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1106 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1107 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1108 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1109 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1110 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1111 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1112 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1113 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1114 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1115 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1116 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1117 400
penalty weights 10000.0
Epoch: [42][  26/  26]	Loss 0.000 (0.000)	train_nll   0.18 (  0.20)	train_penalty   0.00 (  0.00)	weight_norm  24.66 ( 24.66)	train_acc   0.92 (  0.92)	train_minacc   0.93 (  0.89)	train_majacc   0.91 (  0.92)	train_corr   0.00 (  0.00)	l1 8.4917 (8.7111)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:00, 24.73it/s] 31%|###       | 8/26 [00:00<00:00, 36.73it/s]                                               31%|###       | 8/26 [00:00<00:00, 36.73it/s] 50%|#####     | 13/26 [00:00<00:00, 40.39it/s] 69%|######9   | 18/26 [00:00<00:00, 43.16it/s]                                                69%|######9   | 18/26 [00:00<00:00, 43.16it/s] 88%|########8 | 23/26 [00:00<00:00, 42.22it/s]100%|##########| 26/26 [00:00<00:00, 38.14it/s]
Test: [   0/  26]	Loss 0.202 (0.202)	test_acc   0.92 (  0.92)	test_minacc   0.95 (  0.95)	test_majacc   0.92 (  0.92)	Loss_d 0.202 (0.202)	test_acc_d   0.92 (  0.92)	test_minacc_d   0.95 (  0.95)	test_majacc_d   0.92 (  0.92)	test_corr_d   0.72 (  0.72)
Test: [  10/  26]	Loss 0.189 (0.195)	test_acc   0.92 (  0.91)	test_minacc   0.94 (  0.93)	test_majacc   0.91 (  0.91)	Loss_d 0.189 (0.195)	test_acc_d   0.92 (  0.91)	test_minacc_d   0.94 (  0.93)	test_majacc_d   0.91 (  0.91)	test_corr_d   0.77 (  0.73)
Test: [  20/  26]	Loss 0.183 (0.194)	test_acc   0.92 (  0.92)	test_minacc   0.90 (  0.92)	test_majacc   0.92 (  0.91)	Loss_d 0.183 (0.194)	test_acc_d   0.92 (  0.92)	test_minacc_d   0.90 (  0.92)	test_majacc_d   0.92 (  0.91)	test_corr_d   0.77 (  0.74)
Test: [  26/  26]	Loss 0.186 (0.195)	test_acc   0.91 (  0.91)	test_minacc   0.93 (  0.92)	test_majacc   0.91 (  0.91)	Loss_d 0.186 (0.195)	test_acc_d   0.91 (  0.91)	test_minacc_d   0.93 (  0.92)	test_majacc_d   0.91 (  0.91)	test_corr_d   0.78 (  0.74)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.51it/s]
Test: [  0/  1]	Loss 1.957 (1.957)	test_acc   0.56 (  0.56)	test_minacc   0.52 (  0.52)	test_majacc   0.91 (  0.91)	Loss_d 1.957 (1.957)	test_acc_d   0.56 (  0.56)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.91 (  0.91)	test_corr_d   0.31 (  0.31)
Test: [  1/  1]	Loss 1.957 (1.957)	test_acc   0.56 (  0.56)	test_minacc   0.52 (  0.52)	test_majacc   0.91 (  0.91)	Loss_d 1.957 (1.957)	test_acc_d   0.56 (  0.56)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.91 (  0.91)	test_corr_d   0.31 (  0.31)
Overall Timing[ 42/  1]	epoch_time 0.0487 (0.0430)	validation_time 0.0004 (0.0006)	train_time 0.0482 (0.0423)
record: (train_acc, test_acc) (0.8120000209212304, 0.6170000433921814)
last accs (train_acc, test_acc) (0.9136000214219093, 0.5570000410079956)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:05,  4.62it/s] 19%|#9        | 5/26 [00:00<00:01, 16.83it/s] 35%|###4      | 9/26 [00:00<00:00, 23.09it/s] 50%|#####     | 13/26 [00:00<00:00, 27.07it/s] 65%|######5   | 17/26 [00:00<00:00, 29.97it/s] 81%|########  | 21/26 [00:00<00:00, 32.15it/s] 96%|#########6| 25/26 [00:00<00:00, 33.36it/s]100%|##########| 26/26 [00:00<00:00, 26.06it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1118 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1119 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1120 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1121 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1122 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1123 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1124 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1125 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1126 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1127 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1128 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1129 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1130 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1131 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1132 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1133 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1134 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1135 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1136 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1137 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1138 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1139 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1140 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1141 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1142 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1143 400
penalty weights 10000.0
Epoch: [43][  26/  26]	Loss 0.000 (0.000)	train_nll   0.20 (  0.20)	train_penalty   0.00 (  0.00)	weight_norm  24.66 ( 24.66)	train_acc   0.90 (  0.91)	train_minacc   0.93 (  0.92)	train_majacc   0.90 (  0.91)	train_corr   0.00 (  0.00)	l1 8.5428 (8.7141)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 15.30it/s] 27%|##6       | 7/26 [00:00<00:00, 32.82it/s]                                               27%|##6       | 7/26 [00:00<00:00, 32.82it/s] 46%|####6     | 12/26 [00:00<00:00, 38.49it/s] 65%|######5   | 17/26 [00:00<00:00, 41.19it/s]                                                65%|######5   | 17/26 [00:00<00:00, 41.19it/s] 85%|########4 | 22/26 [00:00<00:00, 39.45it/s]100%|##########| 26/26 [00:00<00:00, 36.51it/s]
Test: [   0/  26]	Loss 0.210 (0.210)	test_acc   0.92 (  0.92)	test_minacc   0.94 (  0.94)	test_majacc   0.91 (  0.91)	Loss_d 0.210 (0.210)	test_acc_d   0.92 (  0.92)	test_minacc_d   0.94 (  0.94)	test_majacc_d   0.91 (  0.91)	test_corr_d   0.73 (  0.73)
Test: [  10/  26]	Loss 0.179 (0.200)	test_acc   0.92 (  0.91)	test_minacc   0.94 (  0.92)	test_majacc   0.92 (  0.91)	Loss_d 0.179 (0.200)	test_acc_d   0.92 (  0.91)	test_minacc_d   0.94 (  0.92)	test_majacc_d   0.92 (  0.91)	test_corr_d   0.78 (  0.74)
Test: [  20/  26]	Loss 0.181 (0.195)	test_acc   0.92 (  0.92)	test_minacc   0.90 (  0.92)	test_majacc   0.92 (  0.92)	Loss_d 0.181 (0.195)	test_acc_d   0.92 (  0.92)	test_minacc_d   0.90 (  0.92)	test_majacc_d   0.92 (  0.92)	test_corr_d   0.78 (  0.75)
Test: [  26/  26]	Loss 0.202 (0.196)	test_acc   0.90 (  0.92)	test_minacc   0.93 (  0.91)	test_majacc   0.90 (  0.92)	Loss_d 0.202 (0.196)	test_acc_d   0.90 (  0.92)	test_minacc_d   0.93 (  0.91)	test_majacc_d   0.90 (  0.92)	test_corr_d   0.78 (  0.75)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.79it/s]
Test: [  0/  1]	Loss 1.975 (1.975)	test_acc   0.55 (  0.55)	test_minacc   0.51 (  0.51)	test_majacc   0.92 (  0.92)	Loss_d 1.975 (1.975)	test_acc_d   0.55 (  0.55)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.92 (  0.92)	test_corr_d   0.33 (  0.33)
Test: [  1/  1]	Loss 1.975 (1.975)	test_acc   0.55 (  0.55)	test_minacc   0.51 (  0.51)	test_majacc   0.92 (  0.92)	Loss_d 1.975 (1.975)	test_acc_d   0.55 (  0.55)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.92 (  0.92)	test_corr_d   0.33 (  0.33)
Overall Timing[ 43/  1]	epoch_time 0.0422 (0.0429)	validation_time 0.0004 (0.0006)	train_time 0.0417 (0.0423)
record: (train_acc, test_acc) (0.8120000209212304, 0.6170000433921814)
last accs (train_acc, test_acc) (0.9157000197172165, 0.5470000505447388)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 16.53it/s] 23%|##3       | 6/26 [00:00<00:00, 26.48it/s] 38%|###8      | 10/26 [00:00<00:00, 30.33it/s] 54%|#####3    | 14/26 [00:00<00:00, 32.58it/s] 69%|######9   | 18/26 [00:00<00:00, 33.82it/s] 85%|########4 | 22/26 [00:00<00:00, 34.54it/s]100%|##########| 26/26 [00:00<00:00, 34.72it/s]100%|##########| 26/26 [00:00<00:00, 30.24it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1144 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1145 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1146 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1147 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1148 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1149 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1150 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1151 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1152 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1153 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1154 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1155 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1156 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1157 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1158 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1159 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1160 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1161 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1162 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1163 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1164 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1165 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1166 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1167 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1168 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1169 400
penalty weights 10000.0
Epoch: [44][  26/  26]	Loss 0.001 (0.000)	train_nll   0.22 (  0.20)	train_penalty   0.00 (  0.00)	weight_norm  24.67 ( 24.66)	train_acc   0.89 (  0.91)	train_minacc   0.93 (  0.92)	train_majacc   0.89 (  0.91)	train_corr   0.00 (  0.00)	l1 8.9146 (8.6712)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.49it/s] 23%|##3       | 6/26 [00:00<00:00, 30.13it/s] 38%|###8      | 10/26 [00:00<00:00, 34.21it/s]                                                38%|###8      | 10/26 [00:00<00:00, 34.21it/s] 58%|#####7    | 15/26 [00:00<00:00, 39.63it/s] 77%|#######6  | 20/26 [00:00<00:00, 41.31it/s]                                                77%|#######6  | 20/26 [00:00<00:00, 41.31it/s] 96%|#########6| 25/26 [00:00<00:00, 39.69it/s]100%|##########| 26/26 [00:00<00:00, 34.44it/s]
Test: [   0/  26]	Loss 0.225 (0.225)	test_acc   0.90 (  0.90)	test_minacc   0.91 (  0.91)	test_majacc   0.90 (  0.90)	Loss_d 0.225 (0.225)	test_acc_d   0.90 (  0.90)	test_minacc_d   0.91 (  0.91)	test_majacc_d   0.90 (  0.90)	test_corr_d   0.70 (  0.70)
Test: [  10/  26]	Loss 0.195 (0.217)	test_acc   0.91 (  0.90)	test_minacc   0.94 (  0.92)	test_majacc   0.91 (  0.90)	Loss_d 0.195 (0.217)	test_acc_d   0.91 (  0.90)	test_minacc_d   0.94 (  0.92)	test_majacc_d   0.91 (  0.90)	test_corr_d   0.75 (  0.71)
Test: [  20/  26]	Loss 0.184 (0.207)	test_acc   0.92 (  0.91)	test_minacc   0.92 (  0.92)	test_majacc   0.92 (  0.91)	Loss_d 0.184 (0.207)	test_acc_d   0.92 (  0.91)	test_minacc_d   0.92 (  0.92)	test_majacc_d   0.92 (  0.91)	test_corr_d   0.75 (  0.72)
Test: [  26/  26]	Loss 0.215 (0.207)	test_acc   0.89 (  0.91)	test_minacc   0.93 (  0.91)	test_majacc   0.89 (  0.91)	Loss_d 0.215 (0.207)	test_acc_d   0.89 (  0.91)	test_minacc_d   0.93 (  0.91)	test_majacc_d   0.89 (  0.91)	test_corr_d   0.75 (  0.72)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 60.58it/s]
Test: [  0/  1]	Loss 2.037 (2.037)	test_acc   0.58 (  0.58)	test_minacc   0.54 (  0.54)	test_majacc   0.87 (  0.87)	Loss_d 2.037 (2.037)	test_acc_d   0.58 (  0.58)	test_minacc_d   0.54 (  0.54)	test_majacc_d   0.87 (  0.87)	test_corr_d   0.25 (  0.25)
Test: [  1/  1]	Loss 2.037 (2.037)	test_acc   0.58 (  0.58)	test_minacc   0.54 (  0.54)	test_majacc   0.87 (  0.87)	Loss_d 2.037 (2.037)	test_acc_d   0.58 (  0.58)	test_minacc_d   0.54 (  0.54)	test_majacc_d   0.87 (  0.87)	test_corr_d   0.25 (  0.25)
Overall Timing[ 44/  1]	epoch_time 0.0413 (0.0429)	validation_time 0.0003 (0.0006)	train_time 0.0410 (0.0422)
record: (train_acc, test_acc) (0.8120000209212304, 0.6170000433921814)
last accs (train_acc, test_acc) (0.9066000163555146, 0.5770000219345093)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.38it/s] 19%|#9        | 5/26 [00:00<00:00, 23.03it/s] 35%|###4      | 9/26 [00:00<00:00, 28.10it/s] 50%|#####     | 13/26 [00:00<00:00, 31.03it/s] 65%|######5   | 17/26 [00:00<00:00, 32.81it/s] 81%|########  | 21/26 [00:00<00:00, 34.34it/s] 96%|#########6| 25/26 [00:00<00:00, 34.43it/s]100%|##########| 26/26 [00:00<00:00, 28.88it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1170 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1171 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1172 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1173 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1174 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1175 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1176 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1177 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1178 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1179 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1180 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1181 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1182 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1183 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1184 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1185 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1186 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1187 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1188 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1189 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1190 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1191 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1192 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1193 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1194 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1195 400
penalty weights 10000.0
Epoch: [45][  26/  26]	Loss 0.000 (0.000)	train_nll   0.17 (  0.19)	train_penalty   0.00 (  0.00)	weight_norm  24.67 ( 24.66)	train_acc   0.91 (  0.92)	train_minacc   0.93 (  0.90)	train_majacc   0.91 (  0.92)	train_corr   0.00 (  0.00)	l1 8.8276 (8.6286)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.90it/s] 23%|##3       | 6/26 [00:00<00:00, 33.02it/s]                                               23%|##3       | 6/26 [00:00<00:00, 33.02it/s] 42%|####2     | 11/26 [00:00<00:00, 38.11it/s] 62%|######1   | 16/26 [00:00<00:00, 41.55it/s]                                                62%|######1   | 16/26 [00:00<00:00, 41.55it/s] 81%|########  | 21/26 [00:00<00:00, 39.70it/s]100%|##########| 26/26 [00:00<00:00, 36.47it/s]
Test: [   0/  26]	Loss 0.198 (0.198)	test_acc   0.93 (  0.93)	test_minacc   0.94 (  0.94)	test_majacc   0.93 (  0.93)	Loss_d 0.198 (0.198)	test_acc_d   0.93 (  0.93)	test_minacc_d   0.94 (  0.94)	test_majacc_d   0.93 (  0.93)	test_corr_d   0.74 (  0.74)
Test: [  10/  26]	Loss 0.188 (0.196)	test_acc   0.92 (  0.92)	test_minacc   0.90 (  0.92)	test_majacc   0.92 (  0.92)	Loss_d 0.188 (0.196)	test_acc_d   0.92 (  0.92)	test_minacc_d   0.90 (  0.92)	test_majacc_d   0.92 (  0.92)	test_corr_d   0.78 (  0.75)
Test: [  20/  26]	Loss 0.176 (0.194)	test_acc   0.92 (  0.92)	test_minacc   0.90 (  0.90)	test_majacc   0.92 (  0.92)	Loss_d 0.176 (0.194)	test_acc_d   0.92 (  0.92)	test_minacc_d   0.90 (  0.90)	test_majacc_d   0.92 (  0.92)	test_corr_d   0.77 (  0.75)
Test: [  26/  26]	Loss 0.172 (0.193)	test_acc   0.91 (  0.92)	test_minacc   0.93 (  0.90)	test_majacc   0.91 (  0.92)	Loss_d 0.172 (0.193)	test_acc_d   0.91 (  0.92)	test_minacc_d   0.93 (  0.90)	test_majacc_d   0.91 (  0.92)	test_corr_d   0.79 (  0.75)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.76it/s]
Test: [  0/  1]	Loss 2.195 (2.195)	test_acc   0.54 (  0.54)	test_minacc   0.50 (  0.50)	test_majacc   0.92 (  0.92)	Loss_d 2.195 (2.195)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.92 (  0.92)	test_corr_d   0.35 (  0.35)
Test: [  1/  1]	Loss 2.195 (2.195)	test_acc   0.54 (  0.54)	test_minacc   0.50 (  0.50)	test_majacc   0.92 (  0.92)	Loss_d 2.195 (2.195)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.92 (  0.92)	test_corr_d   0.35 (  0.35)
Overall Timing[ 45/  1]	epoch_time 0.0418 (0.0429)	validation_time 0.0003 (0.0006)	train_time 0.0415 (0.0422)
record: (train_acc, test_acc) (0.8120000209212304, 0.6170000433921814)
last accs (train_acc, test_acc) (0.9169000214338303, 0.5400000214576721)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:05,  4.67it/s] 12%|#1        | 3/26 [00:00<00:02, 10.62it/s] 27%|##6       | 7/26 [00:00<00:00, 20.27it/s] 42%|####2     | 11/26 [00:00<00:00, 26.14it/s] 58%|#####7    | 15/26 [00:00<00:00, 29.65it/s] 73%|#######3  | 19/26 [00:00<00:00, 30.41it/s] 88%|########8 | 23/26 [00:00<00:00, 31.82it/s]100%|##########| 26/26 [00:01<00:00, 25.05it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1196 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1197 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1198 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1199 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1200 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1201 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1202 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1203 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1204 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1205 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1206 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1207 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1208 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1209 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1210 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1211 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1212 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1213 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1214 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1215 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1216 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1217 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1218 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1219 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1220 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1221 400
penalty weights 10000.0
Epoch: [46][  26/  26]	Loss 0.000 (0.000)	train_nll   0.17 (  0.19)	train_penalty   0.00 (  0.00)	weight_norm  24.67 ( 24.67)	train_acc   0.92 (  0.92)	train_minacc   0.93 (  0.90)	train_majacc   0.91 (  0.92)	train_corr   0.00 (  0.00)	l1 8.5581 (8.8428)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.44it/s] 23%|##3       | 6/26 [00:00<00:00, 24.22it/s]                                               23%|##3       | 6/26 [00:00<00:00, 24.22it/s] 42%|####2     | 11/26 [00:00<00:00, 31.93it/s] 62%|######1   | 16/26 [00:00<00:00, 37.02it/s]                                                62%|######1   | 16/26 [00:00<00:00, 37.02it/s] 81%|########  | 21/26 [00:00<00:00, 34.89it/s]100%|##########| 26/26 [00:00<00:00, 31.65it/s]
Test: [   0/  26]	Loss 0.195 (0.195)	test_acc   0.93 (  0.93)	test_minacc   0.94 (  0.94)	test_majacc   0.92 (  0.92)	Loss_d 0.195 (0.195)	test_acc_d   0.93 (  0.93)	test_minacc_d   0.94 (  0.94)	test_majacc_d   0.92 (  0.92)	test_corr_d   0.75 (  0.75)
Test: [  10/  26]	Loss 0.178 (0.188)	test_acc   0.92 (  0.92)	test_minacc   0.94 (  0.93)	test_majacc   0.92 (  0.92)	Loss_d 0.178 (0.188)	test_acc_d   0.92 (  0.92)	test_minacc_d   0.94 (  0.93)	test_majacc_d   0.92 (  0.92)	test_corr_d   0.79 (  0.76)
Test: [  20/  26]	Loss 0.175 (0.187)	test_acc   0.91 (  0.92)	test_minacc   0.90 (  0.92)	test_majacc   0.91 (  0.92)	Loss_d 0.175 (0.187)	test_acc_d   0.91 (  0.92)	test_minacc_d   0.90 (  0.92)	test_majacc_d   0.91 (  0.92)	test_corr_d   0.79 (  0.77)
Test: [  26/  26]	Loss 0.171 (0.187)	test_acc   0.92 (  0.92)	test_minacc   0.93 (  0.92)	test_majacc   0.91 (  0.92)	Loss_d 0.171 (0.187)	test_acc_d   0.92 (  0.92)	test_minacc_d   0.93 (  0.92)	test_majacc_d   0.91 (  0.92)	test_corr_d   0.80 (  0.77)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.42it/s]
Test: [  0/  1]	Loss 2.103 (2.103)	test_acc   0.53 (  0.53)	test_minacc   0.48 (  0.48)	test_majacc   0.91 (  0.91)	Loss_d 2.103 (2.103)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.48 (  0.48)	test_majacc_d   0.91 (  0.91)	test_corr_d   0.38 (  0.38)
Test: [  1/  1]	Loss 2.103 (2.103)	test_acc   0.53 (  0.53)	test_minacc   0.48 (  0.48)	test_majacc   0.91 (  0.91)	Loss_d 2.103 (2.103)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.48 (  0.48)	test_majacc_d   0.91 (  0.91)	test_corr_d   0.38 (  0.38)
Overall Timing[ 46/  1]	epoch_time 0.0398 (0.0428)	validation_time 0.0004 (0.0006)	train_time 0.0393 (0.0422)
record: (train_acc, test_acc) (0.8120000209212304, 0.6170000433921814)
last accs (train_acc, test_acc) (0.9205000202655792, 0.5250000357627869)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.41it/s] 12%|#1        | 3/26 [00:00<00:01, 11.76it/s] 27%|##6       | 7/26 [00:00<00:00, 21.70it/s] 42%|####2     | 11/26 [00:00<00:00, 26.83it/s] 58%|#####7    | 15/26 [00:00<00:00, 29.82it/s] 73%|#######3  | 19/26 [00:00<00:00, 31.66it/s] 88%|########8 | 23/26 [00:00<00:00, 32.66it/s]100%|##########| 26/26 [00:00<00:00, 26.68it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1222 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1223 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1224 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1225 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1226 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1227 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1228 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1229 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1230 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1231 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1232 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1233 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1234 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1235 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1236 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1237 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1238 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1239 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1240 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1241 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1242 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1243 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1244 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1245 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1246 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1247 400
penalty weights 10000.0
Epoch: [47][  26/  26]	Loss 0.000 (0.000)	train_nll   0.20 (  0.19)	train_penalty   0.00 (  0.00)	weight_norm  24.68 ( 24.67)	train_acc   0.90 (  0.92)	train_minacc   0.93 (  0.92)	train_majacc   0.90 (  0.91)	train_corr   0.00 (  0.00)	l1 8.8665 (8.8276)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  6.09it/s] 23%|##3       | 6/26 [00:00<00:00, 22.67it/s]                                               23%|##3       | 6/26 [00:00<00:00, 22.67it/s] 46%|####6     | 12/26 [00:00<00:00, 35.00it/s] 65%|######5   | 17/26 [00:00<00:00, 36.28it/s]                                                65%|######5   | 17/26 [00:00<00:00, 36.28it/s] 85%|########4 | 22/26 [00:00<00:00, 39.35it/s]100%|##########| 26/26 [00:00<00:00, 32.39it/s]
Test: [   0/  26]	Loss 0.212 (0.212)	test_acc   0.91 (  0.91)	test_minacc   0.94 (  0.94)	test_majacc   0.91 (  0.91)	Loss_d 0.212 (0.212)	test_acc_d   0.91 (  0.91)	test_minacc_d   0.94 (  0.94)	test_majacc_d   0.91 (  0.91)	test_corr_d   0.73 (  0.73)
Test: [  10/  26]	Loss 0.184 (0.207)	test_acc   0.92 (  0.91)	test_minacc   0.94 (  0.92)	test_majacc   0.91 (  0.90)	Loss_d 0.184 (0.207)	test_acc_d   0.92 (  0.91)	test_minacc_d   0.94 (  0.92)	test_majacc_d   0.91 (  0.90)	test_corr_d   0.78 (  0.74)
Test: [  20/  26]	Loss 0.176 (0.198)	test_acc   0.93 (  0.91)	test_minacc   0.92 (  0.91)	test_majacc   0.93 (  0.91)	Loss_d 0.176 (0.198)	test_acc_d   0.93 (  0.91)	test_minacc_d   0.92 (  0.91)	test_majacc_d   0.93 (  0.91)	test_corr_d   0.78 (  0.75)
Test: [  26/  26]	Loss 0.199 (0.199)	test_acc   0.90 (  0.91)	test_minacc   0.93 (  0.91)	test_majacc   0.90 (  0.91)	Loss_d 0.199 (0.199)	test_acc_d   0.90 (  0.91)	test_minacc_d   0.93 (  0.91)	test_majacc_d   0.90 (  0.91)	test_corr_d   0.78 (  0.75)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.83it/s]
Test: [  0/  1]	Loss 2.116 (2.116)	test_acc   0.56 (  0.56)	test_minacc   0.52 (  0.52)	test_majacc   0.91 (  0.91)	Loss_d 2.116 (2.116)	test_acc_d   0.56 (  0.56)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.91 (  0.91)	test_corr_d   0.33 (  0.33)
Test: [  1/  1]	Loss 2.116 (2.116)	test_acc   0.56 (  0.56)	test_minacc   0.52 (  0.52)	test_majacc   0.91 (  0.91)	Loss_d 2.116 (2.116)	test_acc_d   0.56 (  0.56)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.91 (  0.91)	test_corr_d   0.33 (  0.33)
Overall Timing[ 47/  1]	epoch_time 0.0441 (0.0428)	validation_time 0.0007 (0.0006)	train_time 0.0434 (0.0422)
record: (train_acc, test_acc) (0.8120000209212304, 0.6170000433921814)
last accs (train_acc, test_acc) (0.911900021314621, 0.5560000538825989)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:07,  3.42it/s] 19%|#9        | 5/26 [00:00<00:01, 15.38it/s] 35%|###4      | 9/26 [00:00<00:00, 22.77it/s] 50%|#####     | 13/26 [00:00<00:00, 27.60it/s] 65%|######5   | 17/26 [00:00<00:00, 30.54it/s] 81%|########  | 21/26 [00:00<00:00, 33.15it/s] 96%|#########6| 25/26 [00:00<00:00, 34.25it/s]100%|##########| 26/26 [00:01<00:00, 25.66it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1248 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1249 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1250 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1251 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1252 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1253 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1254 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1255 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1256 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1257 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1258 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1259 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1260 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1261 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1262 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1263 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1264 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1265 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1266 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1267 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1268 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1269 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1270 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1271 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1272 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1273 400
penalty weights 10000.0
Epoch: [48][  26/  26]	Loss 0.000 (0.000)	train_nll   0.19 (  0.20)	train_penalty   0.00 (  0.00)	weight_norm  24.67 ( 24.67)	train_acc   0.90 (  0.91)	train_minacc   0.93 (  0.92)	train_majacc   0.90 (  0.91)	train_corr   0.00 (  0.00)	l1 8.9836 (8.7289)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.60it/s] 23%|##3       | 6/26 [00:00<00:00, 31.68it/s]                                               23%|##3       | 6/26 [00:00<00:00, 31.68it/s] 42%|####2     | 11/26 [00:00<00:00, 36.05it/s] 62%|######1   | 16/26 [00:00<00:00, 38.83it/s]                                                62%|######1   | 16/26 [00:00<00:00, 38.83it/s] 81%|########  | 21/26 [00:00<00:00, 41.49it/s]100%|##########| 26/26 [00:00<00:00, 36.89it/s]
Test: [   0/  26]	Loss 0.211 (0.211)	test_acc   0.92 (  0.92)	test_minacc   0.94 (  0.94)	test_majacc   0.92 (  0.92)	Loss_d 0.211 (0.211)	test_acc_d   0.92 (  0.92)	test_minacc_d   0.94 (  0.94)	test_majacc_d   0.92 (  0.92)	test_corr_d   0.72 (  0.72)
Test: [  10/  26]	Loss 0.190 (0.207)	test_acc   0.91 (  0.91)	test_minacc   0.92 (  0.92)	test_majacc   0.91 (  0.90)	Loss_d 0.190 (0.207)	test_acc_d   0.91 (  0.91)	test_minacc_d   0.92 (  0.92)	test_majacc_d   0.91 (  0.90)	test_corr_d   0.76 (  0.73)
Test: [  20/  26]	Loss 0.178 (0.202)	test_acc   0.92 (  0.91)	test_minacc   0.92 (  0.91)	test_majacc   0.92 (  0.91)	Loss_d 0.178 (0.202)	test_acc_d   0.92 (  0.91)	test_minacc_d   0.92 (  0.91)	test_majacc_d   0.92 (  0.91)	test_corr_d   0.76 (  0.73)
Test: [  26/  26]	Loss 0.192 (0.201)	test_acc   0.90 (  0.91)	test_minacc   0.93 (  0.91)	test_majacc   0.90 (  0.91)	Loss_d 0.192 (0.201)	test_acc_d   0.90 (  0.91)	test_minacc_d   0.93 (  0.91)	test_majacc_d   0.90 (  0.91)	test_corr_d   0.77 (  0.74)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.26it/s]
Test: [  0/  1]	Loss 2.146 (2.146)	test_acc   0.57 (  0.57)	test_minacc   0.54 (  0.54)	test_majacc   0.88 (  0.88)	Loss_d 2.146 (2.146)	test_acc_d   0.57 (  0.57)	test_minacc_d   0.54 (  0.54)	test_majacc_d   0.88 (  0.88)	test_corr_d   0.29 (  0.29)
Test: [  1/  1]	Loss 2.146 (2.146)	test_acc   0.57 (  0.57)	test_minacc   0.54 (  0.54)	test_majacc   0.88 (  0.88)	Loss_d 2.146 (2.146)	test_acc_d   0.57 (  0.57)	test_minacc_d   0.54 (  0.54)	test_majacc_d   0.88 (  0.88)	test_corr_d   0.29 (  0.29)
Overall Timing[ 48/  1]	epoch_time 0.0399 (0.0428)	validation_time 0.0003 (0.0006)	train_time 0.0396 (0.0421)
record: (train_acc, test_acc) (0.8120000209212304, 0.6170000433921814)
last accs (train_acc, test_acc) (0.9105000200271607, 0.5730000138282776)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.49it/s] 19%|#9        | 5/26 [00:00<00:00, 21.10it/s] 35%|###4      | 9/26 [00:00<00:00, 27.15it/s] 50%|#####     | 13/26 [00:00<00:00, 30.43it/s] 65%|######5   | 17/26 [00:00<00:00, 32.75it/s] 81%|########  | 21/26 [00:00<00:00, 33.71it/s] 96%|#########6| 25/26 [00:00<00:00, 34.08it/s]100%|##########| 26/26 [00:00<00:00, 28.26it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1274 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1275 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1276 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1277 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1278 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1279 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1280 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1281 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1282 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1283 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1284 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1285 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1286 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1287 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1288 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1289 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1290 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1291 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1292 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1293 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1294 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1295 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1296 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1297 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1298 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1299 400
penalty weights 10000.0
Epoch: [49][  26/  26]	Loss 0.000 (0.000)	train_nll   0.17 (  0.19)	train_penalty   0.00 (  0.00)	weight_norm  24.68 ( 24.67)	train_acc   0.91 (  0.91)	train_minacc   0.93 (  0.91)	train_majacc   0.91 (  0.92)	train_corr   0.00 (  0.00)	l1 8.6469 (8.7889)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.85it/s] 23%|##3       | 6/26 [00:00<00:00, 28.11it/s] 38%|###8      | 10/26 [00:00<00:00, 32.91it/s]                                                38%|###8      | 10/26 [00:00<00:00, 32.91it/s] 58%|#####7    | 15/26 [00:00<00:00, 34.73it/s] 77%|#######6  | 20/26 [00:00<00:00, 38.71it/s]                                                77%|#######6  | 20/26 [00:00<00:00, 38.71it/s] 96%|#########6| 25/26 [00:00<00:00, 40.89it/s]100%|##########| 26/26 [00:00<00:00, 33.41it/s]
Test: [   0/  26]	Loss 0.197 (0.197)	test_acc   0.92 (  0.92)	test_minacc   0.94 (  0.94)	test_majacc   0.92 (  0.92)	Loss_d 0.197 (0.197)	test_acc_d   0.92 (  0.92)	test_minacc_d   0.94 (  0.94)	test_majacc_d   0.92 (  0.92)	test_corr_d   0.74 (  0.74)
Test: [  10/  26]	Loss 0.182 (0.190)	test_acc   0.92 (  0.92)	test_minacc   0.92 (  0.93)	test_majacc   0.92 (  0.92)	Loss_d 0.182 (0.190)	test_acc_d   0.92 (  0.92)	test_minacc_d   0.92 (  0.93)	test_majacc_d   0.92 (  0.92)	test_corr_d   0.78 (  0.75)
Test: [  20/  26]	Loss 0.178 (0.188)	test_acc   0.91 (  0.92)	test_minacc   0.90 (  0.92)	test_majacc   0.91 (  0.92)	Loss_d 0.178 (0.188)	test_acc_d   0.91 (  0.92)	test_minacc_d   0.90 (  0.92)	test_majacc_d   0.91 (  0.92)	test_corr_d   0.77 (  0.75)
Test: [  26/  26]	Loss 0.172 (0.188)	test_acc   0.91 (  0.92)	test_minacc   0.93 (  0.92)	test_majacc   0.91 (  0.92)	Loss_d 0.172 (0.188)	test_acc_d   0.91 (  0.92)	test_minacc_d   0.93 (  0.92)	test_majacc_d   0.91 (  0.92)	test_corr_d   0.79 (  0.75)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.70it/s]
Test: [  0/  1]	Loss 2.105 (2.105)	test_acc   0.53 (  0.53)	test_minacc   0.49 (  0.49)	test_majacc   0.90 (  0.90)	Loss_d 2.105 (2.105)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.49 (  0.49)	test_majacc_d   0.90 (  0.90)	test_corr_d   0.35 (  0.35)
Test: [  1/  1]	Loss 2.105 (2.105)	test_acc   0.53 (  0.53)	test_minacc   0.49 (  0.49)	test_majacc   0.90 (  0.90)	Loss_d 2.105 (2.105)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.49 (  0.49)	test_majacc_d   0.90 (  0.90)	test_corr_d   0.35 (  0.35)
Overall Timing[ 49/  1]	epoch_time 0.0398 (0.0427)	validation_time 0.0004 (0.0006)	train_time 0.0394 (0.0421)
record: (train_acc, test_acc) (0.8120000209212304, 0.6170000433921814)
last accs (train_acc, test_acc) (0.9182000155448914, 0.5320000052452087)
done saving aggregate.csv to ./aggregate.csv
wandb: - 0.166 MB of 0.166 MB uploadedwandb: \ 0.166 MB of 0.166 MB uploadedwandb: | 0.166 MB of 0.166 MB uploadedwandb: / 0.166 MB of 0.166 MB uploadedwandb: - 0.166 MB of 0.166 MB uploadedwandb: \ 0.166 MB of 0.166 MB uploadedwandb: | 0.166 MB of 0.166 MB uploadedwandb: / 0.189 MB of 0.189 MB uploaded (0.003 MB deduped)wandb: - 0.470 MB of 0.470 MB uploaded (0.003 MB deduped)wandb: 
wandb: Run history:
wandb:                                                                            global_step ▁▁▁▁▂▂▂▂▂▃▃▃▃▃▃▄▄▄▄▄▅▅▅▅▅▅▆▆▆▆▆▆▇▇▇▇▇███
wandb:      resnet18-usc-unsigned/baseline/prune_rate=1.0/148/logs/diagnostics/epoch_time_val █▂▂▃▁▂▂▁▁▁▁▁▂▁▁▁▁▁▁▂▂▂▁▂▂▃▂▂▁▂▂▁▁▂▃▂▂▁▂▁
wandb:      resnet18-usc-unsigned/baseline/prune_rate=1.0/148/logs/diagnostics/train_time_val █▂▃▃▂▂▃▁▁▁▁▁▂▁▁▁▁▁▁▂▂▂▁▂▂▃▂▂▁▂▂▁▁▂▃▂▂▁▂▁
wandb: resnet18-usc-unsigned/baseline/prune_rate=1.0/148/logs/diagnostics/validation_time_val █▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:                     resnet18-usc-unsigned/baseline/prune_rate=1.0/148/logs/global_step ▁▁▁▁▂▂▂▂▂▃▃▃▃▃▃▄▄▄▄▄▅▅▅▅▅▅▆▆▆▆▆▆▇▇▇▇▇███
wandb:                   resnet18-usc-unsigned/baseline/prune_rate=1.0/148/logs/test/Loss_avg ▄▅▄▄▄▅▆▄▅▆▇▇▂▁▂▁▂▃▃▃▅▅▆▅▆▆█▇▅▇█▇▇█▆▇█▇▇▇
wandb:                 resnet18-usc-unsigned/baseline/prune_rate=1.0/148/logs/test/Loss_d_avg ▄▅▄▄▄▅▆▄▅▆▇▇▂▁▂▁▂▃▃▃▅▅▆▅▆▆█▇▅▇█▇▇█▆▇█▇▇▇
wandb:                 resnet18-usc-unsigned/baseline/prune_rate=1.0/148/logs/test/Loss_d_val ▄▅▄▄▄▅▆▄▅▆▇▇▂▁▂▁▂▃▃▃▅▅▆▅▆▆█▇▅▇█▇▇█▆▇█▇▇▇
wandb:                   resnet18-usc-unsigned/baseline/prune_rate=1.0/148/logs/test/Loss_val ▄▅▄▄▄▅▆▄▅▆▇▇▂▁▂▁▂▃▃▃▅▅▆▅▆▆█▇▅▇█▇▇█▆▇█▇▇▇
wandb:               resnet18-usc-unsigned/baseline/prune_rate=1.0/148/logs/test/test_acc_avg ▁▁▂▃▄▄▄▄▅▄▄▄▇▇▇▇█▅██▇▇▇▇▇▆▇▇▇▇▇▇▇▇▇▇▇▇▇▇
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/148/logs/test/test_acc_d_avg ▁▁▂▃▄▄▄▄▅▄▄▄▇▇▇▇█▅██▇▇▇▇▇▆▇▇▇▇▇▇▇▇▇▇▇▇▇▇
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/148/logs/test/test_acc_d_val ▁▁▂▃▄▄▄▄▅▄▄▄▇▇▇▇█▅██▇▇▇▇▇▆▇▇▇▇▇▇▇▇▇▇▇▇▇▇
wandb:               resnet18-usc-unsigned/baseline/prune_rate=1.0/148/logs/test/test_acc_val ▁▁▂▃▄▄▄▄▅▄▄▄▇▇▇▇█▅██▇▇▇▇▇▆▇▇▇▇▇▇▇▇▇▇▇▇▇▇
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/148/logs/test/test_corr_d_avg ██▇▆▅▅▅▅▅▅▅▅▂▂▂▂▁▃▂▁▂▂▂▂▃▃▃▃▃▄▃▃▃▃▃▃▃▃▃▃
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/148/logs/test/test_corr_d_val ██▇▆▅▅▅▅▅▅▅▅▂▂▂▂▁▃▂▁▂▂▂▂▃▃▃▃▃▄▃▃▃▃▃▃▃▃▃▃
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/148/logs/test/test_majacc_avg ▇██▇█▇▇▅▆▆▇▇▅▅▅▃▁▅▄▃▃▃▅▅▄▅▄▆▅▅▄▅▆▄▅▆▆▅▅▅
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/148/logs/test/test_majacc_d_avg ▇██▇█▇▇▅▆▆▇▇▅▅▅▃▁▅▄▃▃▃▅▅▄▅▄▆▅▅▄▅▆▄▅▆▆▅▅▅
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/148/logs/test/test_majacc_d_val ▇██▇█▇▇▅▆▆▇▇▅▅▅▃▁▅▄▃▃▃▅▅▄▅▄▆▅▅▄▅▆▄▅▆▆▅▅▅
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/148/logs/test/test_majacc_val ▇██▇█▇▇▅▆▆▇▇▅▅▅▃▁▅▄▃▃▃▅▅▄▅▄▆▅▅▄▅▆▄▅▆▆▅▅▅
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/148/logs/test/test_minacc_avg ▁▁▂▃▄▄▄▄▅▄▄▄▇▇▇▇█▅▇█▇▇▇▇▇▆▇▇▇▆▇▇▇▇▇▇▇▇▇▇
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/148/logs/test/test_minacc_d_avg ▁▁▂▃▄▄▄▄▅▄▄▄▇▇▇▇█▅▇█▇▇▇▇▇▆▇▇▇▆▇▇▇▇▇▇▇▇▇▇
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/148/logs/test/test_minacc_d_val ▁▁▂▃▄▄▄▄▅▄▄▄▇▇▇▇█▅▇█▇▇▇▇▇▆▇▇▇▆▇▇▇▇▇▇▇▇▇▇
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/148/logs/test/test_minacc_val ▁▁▂▃▄▄▄▄▅▄▄▄▇▇▇▇█▅▇█▇▇▇▇▇▆▇▇▇▆▇▇▇▇▇▇▇▇▇▇
wandb:                  resnet18-usc-unsigned/baseline/prune_rate=1.0/148/logs/train/Loss_avg █▆▆▆▅▅▅▅▄▄▄▄▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:                  resnet18-usc-unsigned/baseline/prune_rate=1.0/148/logs/train/Loss_val ██▇▆▆▆▅▅▅▄▄▄▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:                    resnet18-usc-unsigned/baseline/prune_rate=1.0/148/logs/train/l1_avg ▄▄▅▆▆▆▆▇▆▇▇██▄▃▂▁▂▃▃▄▄▅▅▅▆▆▆▆▆▆▆▇▇▇▇▇▇▇▇
wandb:                    resnet18-usc-unsigned/baseline/prune_rate=1.0/148/logs/train/l1_val ▃▅▆▆▆▇▇▆▆▆▇▆▅▄▄▁▂▃▃▄▆▆▆▅▅▆█▇▅▆█▇▇█▆▇█▇█▇
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/148/logs/train/train_acc_avg ▁▄▄▄▄▅▅▆▆▇███▄▃▃▁▄▅▅▆█▇▇▇▇██▇▇██████████
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/148/logs/train/train_acc_val ▅▅▅▆▅▆▇▇▇▇▇█▄▃▂▁▂▅▅▂▃▅▆▆▅▆▅▇▅▅▆▆▅▆▇▆▆▇▆▆
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/148/logs/train/train_corr_avg ▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/148/logs/train/train_corr_val ▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/148/logs/train/train_majacc_avg ▆██▇▇▇▆▇▇▇▇▇▆▃▂▃▁▃▄▄▄▆▅▅▄▅▅▅▅▄▅▅▅▅▅▅▅▅▅▅
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/148/logs/train/train_majacc_val ████▇▇▇▇▇█▇█▄▃▃▁▂▅▄▂▃▄▅▅▄▅▄▆▅▄▅▅▄▅▅▅▅▅▅▅
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/148/logs/train/train_minacc_avg ▂▁▁▂▃▄▄▄▅▆▆▆▇▇▇▇▇▇▇██▇██████████████████
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/148/logs/train/train_minacc_val ▁▁▁▂▄▄▅▆▆▅▅▆▇▇▇▇▇▆██▇██████▇▇▇██████████
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/148/logs/train/train_nll_avg █▅▅▅▄▃▃▃▂▂▂▂▁▄▅▄▅▄▃▃▂▂▂▂▂▂▁▁▂▂▁▁▁▁▁▁▁▁▁▁
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/148/logs/train/train_nll_val ▇▆▅▄▄▃▂▃▁▁▁▁▄▇▇█▇▄▄▅▅▃▂▂▃▃▃▁▃▃▃▂▃▂▂▂▁▁▂▁
wandb:         resnet18-usc-unsigned/baseline/prune_rate=1.0/148/logs/train/train_penalty_avg █▃▃▂▂▂▂▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:         resnet18-usc-unsigned/baseline/prune_rate=1.0/148/logs/train/train_penalty_val ██▇▅▄▄▂▃▂▂▂▂▂▁▁▁▁▂▁▁▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:           resnet18-usc-unsigned/baseline/prune_rate=1.0/148/logs/train/weight_norm_avg ▁▅▅▅▅▆▆▆▆▆▇▇████████████████████████████
wandb:           resnet18-usc-unsigned/baseline/prune_rate=1.0/148/logs/train/weight_norm_val ▁▃▃▃▄▄▄▄▅▅▆▆▇███████████████████████████
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/148/logs/train/zero_count_avg ▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/148/logs/train/zero_count_val ▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb: 
wandb: Run summary:
wandb:                                                                            global_step 49
wandb:      resnet18-usc-unsigned/baseline/prune_rate=1.0/148/logs/diagnostics/epoch_time_val 0.03984
wandb:      resnet18-usc-unsigned/baseline/prune_rate=1.0/148/logs/diagnostics/train_time_val 0.03941
wandb: resnet18-usc-unsigned/baseline/prune_rate=1.0/148/logs/diagnostics/validation_time_val 0.00042
wandb:                     resnet18-usc-unsigned/baseline/prune_rate=1.0/148/logs/global_step 49
wandb:                   resnet18-usc-unsigned/baseline/prune_rate=1.0/148/logs/test/Loss_avg 2.10485
wandb:                 resnet18-usc-unsigned/baseline/prune_rate=1.0/148/logs/test/Loss_d_avg 2.10485
wandb:                 resnet18-usc-unsigned/baseline/prune_rate=1.0/148/logs/test/Loss_d_val 2.10485
wandb:                   resnet18-usc-unsigned/baseline/prune_rate=1.0/148/logs/test/Loss_val 2.10485
wandb:               resnet18-usc-unsigned/baseline/prune_rate=1.0/148/logs/test/test_acc_avg 0.532
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/148/logs/test/test_acc_d_avg 0.532
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/148/logs/test/test_acc_d_val 0.532
wandb:               resnet18-usc-unsigned/baseline/prune_rate=1.0/148/logs/test/test_acc_val 0.532
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/148/logs/test/test_corr_d_avg 0.35344
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/148/logs/test/test_corr_d_val 0.35344
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/148/logs/test/test_majacc_avg 0.9
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/148/logs/test/test_majacc_d_avg 0.9
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/148/logs/test/test_majacc_d_val 0.9
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/148/logs/test/test_majacc_val 0.9
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/148/logs/test/test_minacc_avg 0.49111
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/148/logs/test/test_minacc_d_avg 0.49111
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/148/logs/test/test_minacc_d_val 0.49111
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/148/logs/test/test_minacc_val 0.49111
wandb:                  resnet18-usc-unsigned/baseline/prune_rate=1.0/148/logs/train/Loss_avg 0.00016
wandb:                  resnet18-usc-unsigned/baseline/prune_rate=1.0/148/logs/train/Loss_val 0.00022
wandb:                    resnet18-usc-unsigned/baseline/prune_rate=1.0/148/logs/train/l1_avg 8.7889
wandb:                    resnet18-usc-unsigned/baseline/prune_rate=1.0/148/logs/train/l1_val 8.64685
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/148/logs/train/train_acc_avg 0.9147
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/148/logs/train/train_acc_val 0.912
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/148/logs/train/train_corr_avg 0.0
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/148/logs/train/train_corr_val 0.0
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/148/logs/train/train_majacc_avg 0.91634
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/148/logs/train/train_majacc_val 0.91031
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/148/logs/train/train_minacc_avg 0.90586
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/148/logs/train/train_minacc_val 0.92593
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/148/logs/train/train_nll_avg 0.1946
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/148/logs/train/train_nll_val 0.17058
wandb:         resnet18-usc-unsigned/baseline/prune_rate=1.0/148/logs/train/train_penalty_avg 0.00014
wandb:         resnet18-usc-unsigned/baseline/prune_rate=1.0/148/logs/train/train_penalty_val 0.0002
wandb:           resnet18-usc-unsigned/baseline/prune_rate=1.0/148/logs/train/weight_norm_avg 24.67418
wandb:           resnet18-usc-unsigned/baseline/prune_rate=1.0/148/logs/train/weight_norm_val 24.67517
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/148/logs/train/zero_count_avg 0.0
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/148/logs/train/zero_count_val 0.0
wandb: 
wandb: 🚀 View run name_random at: https://wandb.ai/janezdu-uiuc/irm/runs/46xyzaxj
wandb: ⭐️ View project at: https://wandb.ai/janezdu-uiuc/irm
wandb: Synced 5 W&B file(s), 0 media file(s), 2 artifact file(s) and 1 other file(s)
wandb: Find logs at: ./wandb/run-20240907_202551-46xyzaxj/logs
wandb: WARNING The new W&B backend becomes opt-out in version 0.18.0; try it out with `wandb.require("core")`! See https://wandb.me/wandb-core for more information.
wandb: Currently logged in as: janezdu (janezdu-uiuc). Use `wandb login --relogin` to force relogin
wandb: wandb version 0.17.9 is available!  To upgrade, please run:
wandb:  $ pip install wandb --upgrade
wandb: Tracking run with wandb version 0.17.7
wandb: Run data is saved locally in /scratch/users/zd16/sparseIRM-resnet-ver/wandb/run-20240907_202839-bkatsav5
wandb: Run `wandb offline` to turn off syncing.
wandb: Syncing run name_random
wandb: ⭐️ View project at https://wandb.ai/janezdu-uiuc/irm
wandb: 🚀 View run at https://wandb.ai/janezdu-uiuc/irm/runs/bkatsav5
=> Reading YAML config from configs/smallscale/resnet18/resnet18-usc-unsigned.yaml
Namespace(data='dataset/', optimizer='adam', weight_opt='adam', set='mnistcifar', arch='ResNet18', config='configs/smallscale/resnet18/resnet18-usc-unsigned.yaml', log_dir=None, workers=4, epochs=50, start_epoch=None, batch_size=390, lr=0.006, warmup_length=0, momentum=0.9, weight_decay=0.0, print_freq=10, num_classes=1, resume='', resume_train_weights='', evaluate=False, pretrained=None, pretrained_distill=None, alpha_distill=0.95, T_distill=2, seed=0, multigpu=[0], lr_policy='cosine_lr', lr_adjust=30, lr_gamma=0.1, name='baseline', save_every=-1, prune_rate=1.0, param_prune_rate=0.0, pr_start=1.0, low_data=1, width_mult=1.0, nesterov=False, threetimes=False, random_subnet=False, one_batch=False, conv_type='DenseConv', freeze_weights=False, st=False, mode='fan_in', nonlinearity='relu', bn_type='LearnedBatchNorm', init='kaiming_normal', no_bn_decay=False, scale_fan=False, first_layer_dense=False, last_layer_dense=True, approx=False, zero=False, flip=False, bs=False, gumbel_sample=False, multiply_prob=False, no_multiply=False, multiply_cont=False, multiply_prob_bs=False, indiv=False, label_smoothing=None, first_layer_type=None, trainer='default', score_init_constant=1.0, K=1, update_freq=20, D=0.01, T=1, TA=True, TA2=False, TA_grow=False, center=False, straight_through=False, PLA_factor=0.1, PLA_patience=10, gradient_loss_para=0, abs_loss_para=0, thres=0.9, runs_name='name_random', resume_compare_loss1='', resume_compare_loss2='', init_weights='', trained_mask='', weight_rescaling=False, constrain_by_layer=False, weight_rescaling_data=False, use_running_stats=False, not_clipping=False, rescaling_para=False, lasso_para=0, dont_freeze_weights=False, iterative=True, prob_by_weight=False, rescale_at_fix_subnet=False, train_weights_at_the_same_time=False, sample_from_training_set=False, load_true_para=False, distill=False, finetune=False, stablize=False, prev_best=0, weight_opt_lr=0.0006, n=500, ts=0.28, te=0.6, d=20000, s=80, c=0.75, init_prob=False, thres_before=0.001, wide_ratio=0.001, noise=1, cal_p_q=False, just_finetune=False, snip=False, envs_num=2, l2_regularizer_weight=0.001, data_num=50000, env_type='linear', irm_type='irmv1', hidden_dim=390, penalty_anneal_iters=400, penalty_weight=10000.0, grayscale_model=0, weight_lr_schedule=False, fix_subnet=False, freeze_weight=False, step='ours', prior_sd_coef=0, dim_inv=2, variance_gamma=1.0, dim_spu=10, image_scale=32, cons_ratio='0.999_0.7_0.1', noise_ratio=0.2, step_gamma=0.1, step_round=3, inner_steps=1, use_pgd=False, z=15.0, pgd_anneal_iters=600, pgd_skip_steps=50, fraction_z=0.95)
=> Creating model 'ResNet18'
Here!!!!!!!!
==> Conv Type: DenseConv
==> BN Type: LearnedBatchNorm
<class 'torch.nn.modules.conv.Conv2d'>
<class 'torch.nn.modules.batchnorm.BatchNorm2d'>
==> Building first layer with <class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
ResNet(
  (conv1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
  (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (relu): ReLU(inplace=True)
  (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
  (layer1): Sequential(
    (0): BasicBlock(
      (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (1): BasicBlock(
      (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (layer2): Sequential(
    (0): BasicBlock(
      (conv1): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (downsample): Sequential(
        (0): Conv2d(64, 128, kernel_size=(1, 1), stride=(2, 2), bias=False)
        (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (1): BasicBlock(
      (conv1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (layer3): Sequential(
    (0): BasicBlock(
      (conv1): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (downsample): Sequential(
        (0): Conv2d(128, 256, kernel_size=(1, 1), stride=(2, 2), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (1): BasicBlock(
      (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (layer4): Sequential(
    (0): BasicBlock(
      (conv1): Conv2d(256, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (downsample): Sequential(
        (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (1): BasicBlock(
      (conv1): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (avgpool): AdaptiveAvgPool2d(output_size=1)
  (fc): Conv2d(512, 1, kernel_size=(1, 1), stride=(1, 1), bias=False)
)
=> Parallelizing on [0] gpus
<DEBUG> gradient to module.conv1.weight
<DEBUG> gradient to module.bn1.weight
<DEBUG> gradient to module.bn1.bias
<DEBUG> gradient to module.layer1.0.conv1.weight
<DEBUG> gradient to module.layer1.0.bn1.weight
<DEBUG> gradient to module.layer1.0.bn1.bias
<DEBUG> gradient to module.layer1.0.conv2.weight
<DEBUG> gradient to module.layer1.0.bn2.weight
<DEBUG> gradient to module.layer1.0.bn2.bias
<DEBUG> gradient to module.layer1.1.conv1.weight
<DEBUG> gradient to module.layer1.1.bn1.weight
<DEBUG> gradient to module.layer1.1.bn1.bias
<DEBUG> gradient to module.layer1.1.conv2.weight
<DEBUG> gradient to module.layer1.1.bn2.weight
<DEBUG> gradient to module.layer1.1.bn2.bias
<DEBUG> gradient to module.layer2.0.conv1.weight
<DEBUG> gradient to module.layer2.0.bn1.weight
<DEBUG> gradient to module.layer2.0.bn1.bias
<DEBUG> gradient to module.layer2.0.conv2.weight
<DEBUG> gradient to module.layer2.0.bn2.weight
<DEBUG> gradient to module.layer2.0.bn2.bias
<DEBUG> gradient to module.layer2.0.downsample.0.weight
<DEBUG> gradient to module.layer2.0.downsample.1.weight
<DEBUG> gradient to module.layer2.0.downsample.1.bias
<DEBUG> gradient to module.layer2.1.conv1.weight
<DEBUG> gradient to module.layer2.1.bn1.weight
<DEBUG> gradient to module.layer2.1.bn1.bias
<DEBUG> gradient to module.layer2.1.conv2.weight
<DEBUG> gradient to module.layer2.1.bn2.weight
<DEBUG> gradient to module.layer2.1.bn2.bias
<DEBUG> gradient to module.layer3.0.conv1.weight
<DEBUG> gradient to module.layer3.0.bn1.weight
<DEBUG> gradient to module.layer3.0.bn1.bias
<DEBUG> gradient to module.layer3.0.conv2.weight
<DEBUG> gradient to module.layer3.0.bn2.weight
<DEBUG> gradient to module.layer3.0.bn2.bias
<DEBUG> gradient to module.layer3.0.downsample.0.weight
<DEBUG> gradient to module.layer3.0.downsample.1.weight
<DEBUG> gradient to module.layer3.0.downsample.1.bias
<DEBUG> gradient to module.layer3.1.conv1.weight
<DEBUG> gradient to module.layer3.1.bn1.weight
<DEBUG> gradient to module.layer3.1.bn1.bias
<DEBUG> gradient to module.layer3.1.conv2.weight
<DEBUG> gradient to module.layer3.1.bn2.weight
<DEBUG> gradient to module.layer3.1.bn2.bias
<DEBUG> gradient to module.layer4.0.conv1.weight
<DEBUG> gradient to module.layer4.0.bn1.weight
<DEBUG> gradient to module.layer4.0.bn1.bias
<DEBUG> gradient to module.layer4.0.conv2.weight
<DEBUG> gradient to module.layer4.0.bn2.weight
<DEBUG> gradient to module.layer4.0.bn2.bias
<DEBUG> gradient to module.layer4.0.downsample.0.weight
<DEBUG> gradient to module.layer4.0.downsample.1.weight
<DEBUG> gradient to module.layer4.0.downsample.1.bias
<DEBUG> gradient to module.layer4.1.conv1.weight
<DEBUG> gradient to module.layer4.1.bn1.weight
<DEBUG> gradient to module.layer4.1.bn1.bias
<DEBUG> gradient to module.layer4.1.conv2.weight
<DEBUG> gradient to module.layer4.1.bn2.weight
<DEBUG> gradient to module.layer4.1.bn2.bias
<DEBUG> gradient to module.fc.weight
Files already downloaded and verified
Files already downloaded and verified
Adding Noise to Label, len(Y)=12000, Label_noise=1179
Xmp (7877, 3, 32, 32) (6903, 3, 32, 32)
Xcp (5929, 3, 32, 32) (6071, 3, 32, 32)
env=0 2497 2497 3 3
xn 2500 xp 2500
env=1 1750 1750 750 750
xn 2500 xp 2500
env=2 50 50 450 450
xn 500 xp 500
=> Creating model 'EBD'
EBD(
  (embedings): Embedding(2, 1)
)
=> Parallelizing on [0] gpus
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:01<00:36,  1.46s/it] 19%|#9        | 5/26 [00:01<00:05,  4.13it/s] 35%|###4      | 9/26 [00:01<00:02,  7.96it/s] 50%|#####     | 13/26 [00:01<00:01, 11.98it/s] 65%|######5   | 17/26 [00:01<00:00, 16.13it/s] 81%|########  | 21/26 [00:02<00:00, 19.85it/s] 96%|#########6| 25/26 [00:02<00:00, 23.37it/s]100%|##########| 26/26 [00:02<00:00, 10.25it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 0 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 2 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 3 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 4 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 5 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 6 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 7 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 8 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 9 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 10 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 11 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 12 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 13 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 14 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 15 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 16 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 17 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 18 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 19 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 20 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 21 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 22 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 23 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 24 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 25 400
penalty weights 0.0
Epoch: [0][  26/  26]	Loss 0.465 (0.540)	train_nll   0.46 (  0.54)	train_penalty   0.03 (  0.19)	weight_norm  20.89 ( 18.10)	train_acc   0.82 (  0.79)	train_minacc   0.11 (  0.08)	train_majacc   0.98 (  0.92)	train_corr   0.00 (  0.00)	l1 7.7009 (7.8976)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:00, 24.67it/s] 31%|###       | 8/26 [00:00<00:00, 36.88it/s]                                               31%|###       | 8/26 [00:00<00:00, 36.88it/s] 50%|#####     | 13/26 [00:00<00:00, 40.84it/s] 69%|######9   | 18/26 [00:00<00:00, 43.78it/s]                                                69%|######9   | 18/26 [00:00<00:00, 43.78it/s] 88%|########8 | 23/26 [00:00<00:00, 40.91it/s]100%|##########| 26/26 [00:00<00:00, 38.10it/s]
Test: [   0/  26]	Loss 0.414 (0.414)	test_acc   0.86 (  0.86)	test_minacc   0.10 (  0.10)	test_majacc   0.97 (  0.97)	Loss_d 0.414 (0.414)	test_acc_d   0.86 (  0.86)	test_minacc_d   0.10 (  0.10)	test_majacc_d   0.97 (  0.97)	test_corr_d   0.94 (  0.94)
Test: [  10/  26]	Loss 0.455 (0.441)	test_acc   0.83 (  0.84)	test_minacc   0.11 (  0.07)	test_majacc   0.95 (  0.97)	Loss_d 0.455 (0.441)	test_acc_d   0.83 (  0.84)	test_minacc_d   0.11 (  0.07)	test_majacc_d   0.95 (  0.97)	test_corr_d   0.94 (  0.95)
Test: [  20/  26]	Loss 0.401 (0.442)	test_acc   0.87 (  0.84)	test_minacc   0.11 (  0.07)	test_majacc   0.98 (  0.97)	Loss_d 0.401 (0.442)	test_acc_d   0.87 (  0.84)	test_minacc_d   0.11 (  0.07)	test_majacc_d   0.98 (  0.97)	test_corr_d   0.96 (  0.95)
Test: [  26/  26]	Loss 0.461 (0.442)	test_acc   0.83 (  0.84)	test_minacc   0.11 (  0.07)	test_majacc   0.99 (  0.97)	Loss_d 0.461 (0.442)	test_acc_d   0.83 (  0.84)	test_minacc_d   0.11 (  0.07)	test_majacc_d   0.99 (  0.97)	test_corr_d   0.95 (  0.95)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00,  2.49it/s]100%|##########| 1/1 [00:00<00:00,  2.49it/s]
Test: [  0/  1]	Loss 1.339 (1.339)	test_acc   0.14 (  0.14)	test_minacc   0.05 (  0.05)	test_majacc   0.97 (  0.97)	Loss_d 1.339 (1.339)	test_acc_d   0.14 (  0.14)	test_minacc_d   0.05 (  0.05)	test_majacc_d   0.97 (  0.97)	test_corr_d   0.92 (  0.92)
Test: [  1/  1]	Loss 1.339 (1.339)	test_acc   0.14 (  0.14)	test_minacc   0.05 (  0.05)	test_majacc   0.97 (  0.97)	Loss_d 1.339 (1.339)	test_acc_d   0.14 (  0.14)	test_minacc_d   0.05 (  0.05)	test_majacc_d   0.97 (  0.97)	test_corr_d   0.92 (  0.92)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/151/checkpoints/model_best.pth
Overall Timing[  0/  1]	epoch_time 0.0776 (0.0776)	validation_time 0.0069 (0.0069)	train_time 0.0654 (0.0654)
record: (train_acc, test_acc) (0.8385000296831131, 0.14300000667572021)
last accs (train_acc, test_acc) (0.8385000296831131, 0.14300000667572021)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.61it/s] 19%|#9        | 5/26 [00:00<00:00, 25.82it/s] 38%|###8      | 10/26 [00:00<00:00, 34.11it/s] 54%|#####3    | 14/26 [00:00<00:00, 35.44it/s] 73%|#######3  | 19/26 [00:00<00:00, 37.49it/s] 88%|########8 | 23/26 [00:00<00:00, 37.93it/s]100%|##########| 26/26 [00:00<00:00, 32.03it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 26 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 27 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 28 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 29 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 30 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 31 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 32 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 33 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 34 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 35 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 36 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 37 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 38 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 39 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 40 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 41 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 42 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 43 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 44 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 45 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 46 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 47 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 48 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 49 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 50 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 51 400
penalty weights 0.0
Epoch: [1][  26/  26]	Loss 0.453 (0.422)	train_nll   0.45 (  0.42)	train_penalty   0.04 (  0.07)	weight_norm  22.02 ( 21.67)	train_acc   0.81 (  0.85)	train_minacc   0.09 (  0.02)	train_majacc   0.97 (  0.99)	train_corr   0.00 (  0.00)	l1 7.6174 (7.7570)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.00it/s] 15%|#5        | 4/26 [00:00<00:01, 18.06it/s] 35%|###4      | 9/26 [00:00<00:00, 29.66it/s]                                               35%|###4      | 9/26 [00:00<00:00, 29.66it/s] 50%|#####     | 13/26 [00:00<00:00, 32.44it/s] 69%|######9   | 18/26 [00:00<00:00, 35.41it/s]                                                69%|######9   | 18/26 [00:00<00:00, 35.41it/s] 88%|########8 | 23/26 [00:00<00:00, 38.66it/s]100%|##########| 26/26 [00:00<00:00, 31.90it/s]
Test: [   0/  26]	Loss 0.404 (0.404)	test_acc   0.85 (  0.85)	test_minacc   0.22 (  0.22)	test_majacc   0.95 (  0.95)	Loss_d 0.404 (0.404)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.22 (  0.22)	test_majacc_d   0.95 (  0.95)	test_corr_d   0.90 (  0.90)
Test: [  10/  26]	Loss 0.450 (0.433)	test_acc   0.83 (  0.83)	test_minacc   0.16 (  0.14)	test_majacc   0.94 (  0.95)	Loss_d 0.450 (0.433)	test_acc_d   0.83 (  0.83)	test_minacc_d   0.16 (  0.14)	test_majacc_d   0.94 (  0.95)	test_corr_d   0.90 (  0.91)
Test: [  20/  26]	Loss 0.403 (0.437)	test_acc   0.86 (  0.83)	test_minacc   0.17 (  0.14)	test_majacc   0.95 (  0.95)	Loss_d 0.403 (0.437)	test_acc_d   0.86 (  0.83)	test_minacc_d   0.17 (  0.14)	test_majacc_d   0.95 (  0.95)	test_corr_d   0.92 (  0.91)
Test: [  26/  26]	Loss 0.458 (0.437)	test_acc   0.81 (  0.83)	test_minacc   0.16 (  0.14)	test_majacc   0.95 (  0.95)	Loss_d 0.458 (0.437)	test_acc_d   0.81 (  0.83)	test_minacc_d   0.16 (  0.14)	test_majacc_d   0.95 (  0.95)	test_corr_d   0.91 (  0.91)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.52it/s]
Test: [  0/  1]	Loss 1.396 (1.396)	test_acc   0.22 (  0.22)	test_minacc   0.14 (  0.14)	test_majacc   0.96 (  0.96)	Loss_d 1.396 (1.396)	test_acc_d   0.22 (  0.22)	test_minacc_d   0.14 (  0.14)	test_majacc_d   0.96 (  0.96)	test_corr_d   0.83 (  0.83)
Test: [  1/  1]	Loss 1.396 (1.396)	test_acc   0.22 (  0.22)	test_minacc   0.14 (  0.14)	test_majacc   0.96 (  0.96)	Loss_d 1.396 (1.396)	test_acc_d   0.22 (  0.22)	test_minacc_d   0.14 (  0.14)	test_majacc_d   0.96 (  0.96)	test_corr_d   0.83 (  0.83)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/151/checkpoints/model_best.pth
Overall Timing[  1/  1]	epoch_time 0.0401 (0.0589)	validation_time 0.0003 (0.0036)	train_time 0.0398 (0.0526)
record: (train_acc, test_acc) (0.8288000268936158, 0.21800000965595245)
last accs (train_acc, test_acc) (0.8288000268936158, 0.21800000965595245)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.03it/s] 19%|#9        | 5/26 [00:00<00:00, 22.17it/s] 35%|###4      | 9/26 [00:00<00:00, 27.55it/s] 50%|#####     | 13/26 [00:00<00:00, 30.42it/s] 65%|######5   | 17/26 [00:00<00:00, 31.84it/s] 81%|########  | 21/26 [00:00<00:00, 33.20it/s] 96%|#########6| 25/26 [00:00<00:00, 34.37it/s]100%|##########| 26/26 [00:00<00:00, 28.62it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 52 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 53 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 54 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 55 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 56 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 57 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 58 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 59 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 60 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 61 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 62 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 63 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 64 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 65 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 66 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 67 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 68 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 69 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 70 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 71 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 72 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 73 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 74 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 75 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 76 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 77 400
penalty weights 0.0
Epoch: [2][  26/  26]	Loss 0.436 (0.407)	train_nll   0.44 (  0.41)	train_penalty   0.04 (  0.06)	weight_norm  22.14 ( 22.10)	train_acc   0.82 (  0.85)	train_minacc   0.04 (  0.04)	train_majacc   0.99 (  0.99)	train_corr   0.00 (  0.00)	l1 7.2324 (7.4560)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.72it/s] 23%|##3       | 6/26 [00:00<00:00, 26.15it/s]                                               23%|##3       | 6/26 [00:00<00:00, 26.15it/s] 42%|####2     | 11/26 [00:00<00:00, 34.15it/s] 65%|######5   | 17/26 [00:00<00:00, 38.38it/s]                                                65%|######5   | 17/26 [00:00<00:00, 38.38it/s] 85%|########4 | 22/26 [00:00<00:00, 39.84it/s]100%|##########| 26/26 [00:00<00:00, 33.82it/s]
Test: [   0/  26]	Loss 0.372 (0.372)	test_acc   0.86 (  0.86)	test_minacc   0.20 (  0.20)	test_majacc   0.96 (  0.96)	Loss_d 0.372 (0.372)	test_acc_d   0.86 (  0.86)	test_minacc_d   0.20 (  0.20)	test_majacc_d   0.96 (  0.96)	test_corr_d   0.92 (  0.92)
Test: [  10/  26]	Loss 0.404 (0.400)	test_acc   0.84 (  0.84)	test_minacc   0.16 (  0.14)	test_majacc   0.95 (  0.97)	Loss_d 0.404 (0.400)	test_acc_d   0.84 (  0.84)	test_minacc_d   0.16 (  0.14)	test_majacc_d   0.95 (  0.97)	test_corr_d   0.92 (  0.92)
Test: [  20/  26]	Loss 0.368 (0.403)	test_acc   0.86 (  0.84)	test_minacc   0.17 (  0.13)	test_majacc   0.96 (  0.96)	Loss_d 0.368 (0.403)	test_acc_d   0.86 (  0.84)	test_minacc_d   0.17 (  0.13)	test_majacc_d   0.96 (  0.96)	test_corr_d   0.93 (  0.92)
Test: [  26/  26]	Loss 0.436 (0.403)	test_acc   0.81 (  0.84)	test_minacc   0.09 (  0.13)	test_majacc   0.97 (  0.97)	Loss_d 0.436 (0.403)	test_acc_d   0.81 (  0.84)	test_minacc_d   0.09 (  0.13)	test_majacc_d   0.97 (  0.97)	test_corr_d   0.93 (  0.92)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 60.11it/s]
Test: [  0/  1]	Loss 1.443 (1.443)	test_acc   0.21 (  0.21)	test_minacc   0.12 (  0.12)	test_majacc   0.96 (  0.96)	Loss_d 1.443 (1.443)	test_acc_d   0.21 (  0.21)	test_minacc_d   0.12 (  0.12)	test_majacc_d   0.96 (  0.96)	test_corr_d   0.86 (  0.86)
Test: [  1/  1]	Loss 1.443 (1.443)	test_acc   0.21 (  0.21)	test_minacc   0.12 (  0.12)	test_majacc   0.96 (  0.96)	Loss_d 1.443 (1.443)	test_acc_d   0.21 (  0.21)	test_minacc_d   0.12 (  0.12)	test_majacc_d   0.96 (  0.96)	test_corr_d   0.86 (  0.86)
Overall Timing[  2/  1]	epoch_time 0.0415 (0.0531)	validation_time 0.0004 (0.0025)	train_time 0.0411 (0.0488)
record: (train_acc, test_acc) (0.8288000268936158, 0.21800000965595245)
last accs (train_acc, test_acc) (0.8402000252604485, 0.20600001513957977)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.86it/s] 19%|#9        | 5/26 [00:00<00:00, 21.18it/s] 35%|###4      | 9/26 [00:00<00:00, 26.53it/s] 50%|#####     | 13/26 [00:00<00:00, 29.79it/s] 65%|######5   | 17/26 [00:00<00:00, 31.26it/s] 81%|########  | 21/26 [00:00<00:00, 32.80it/s] 96%|#########6| 25/26 [00:00<00:00, 34.70it/s]100%|##########| 26/26 [00:00<00:00, 27.96it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 78 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 79 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 80 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 81 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 82 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 83 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 84 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 85 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 86 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 87 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 88 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 89 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 90 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 91 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 92 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 93 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 94 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 95 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 96 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 97 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 98 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 99 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 100 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 101 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 102 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 103 400
penalty weights 0.0
Epoch: [3][  26/  26]	Loss 0.404 (0.382)	train_nll   0.40 (  0.38)	train_penalty   0.03 (  0.04)	weight_norm  22.20 ( 22.17)	train_acc   0.82 (  0.85)	train_minacc   0.09 (  0.08)	train_majacc   0.99 (  0.98)	train_corr   0.00 (  0.00)	l1 7.2155 (7.3111)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:00, 25.53it/s] 23%|##3       | 6/26 [00:00<00:00, 26.87it/s]                                               23%|##3       | 6/26 [00:00<00:00, 26.87it/s] 46%|####6     | 12/26 [00:00<00:00, 34.46it/s] 65%|######5   | 17/26 [00:00<00:00, 39.16it/s]                                                65%|######5   | 17/26 [00:00<00:00, 39.16it/s] 85%|########4 | 22/26 [00:00<00:00, 42.02it/s]100%|##########| 26/26 [00:00<00:00, 36.01it/s]
Test: [   0/  26]	Loss 0.337 (0.337)	test_acc   0.86 (  0.86)	test_minacc   0.24 (  0.24)	test_majacc   0.95 (  0.95)	Loss_d 0.337 (0.337)	test_acc_d   0.86 (  0.86)	test_minacc_d   0.24 (  0.24)	test_majacc_d   0.95 (  0.95)	test_corr_d   0.89 (  0.89)
Test: [  10/  26]	Loss 0.352 (0.356)	test_acc   0.87 (  0.85)	test_minacc   0.30 (  0.22)	test_majacc   0.97 (  0.97)	Loss_d 0.352 (0.356)	test_acc_d   0.87 (  0.85)	test_minacc_d   0.30 (  0.22)	test_majacc_d   0.97 (  0.97)	test_corr_d   0.89 (  0.90)
Test: [  20/  26]	Loss 0.337 (0.362)	test_acc   0.88 (  0.85)	test_minacc   0.20 (  0.20)	test_majacc   0.97 (  0.96)	Loss_d 0.337 (0.362)	test_acc_d   0.88 (  0.85)	test_minacc_d   0.20 (  0.20)	test_majacc_d   0.97 (  0.96)	test_corr_d   0.92 (  0.90)
Test: [  26/  26]	Loss 0.397 (0.363)	test_acc   0.83 (  0.85)	test_minacc   0.22 (  0.20)	test_majacc   0.97 (  0.96)	Loss_d 0.397 (0.363)	test_acc_d   0.83 (  0.85)	test_minacc_d   0.22 (  0.20)	test_majacc_d   0.97 (  0.96)	test_corr_d   0.89 (  0.90)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.39it/s]
Test: [  0/  1]	Loss 1.458 (1.458)	test_acc   0.23 (  0.23)	test_minacc   0.15 (  0.15)	test_majacc   0.95 (  0.95)	Loss_d 1.458 (1.458)	test_acc_d   0.23 (  0.23)	test_minacc_d   0.15 (  0.15)	test_majacc_d   0.95 (  0.95)	test_corr_d   0.80 (  0.80)
Test: [  1/  1]	Loss 1.458 (1.458)	test_acc   0.23 (  0.23)	test_minacc   0.15 (  0.15)	test_majacc   0.95 (  0.95)	Loss_d 1.458 (1.458)	test_acc_d   0.23 (  0.23)	test_minacc_d   0.15 (  0.15)	test_majacc_d   0.95 (  0.95)	test_corr_d   0.80 (  0.80)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/151/checkpoints/model_best.pth
Overall Timing[  3/  1]	epoch_time 0.0421 (0.0504)	validation_time 0.0006 (0.0021)	train_time 0.0415 (0.0469)
record: (train_acc, test_acc) (0.8491000219583511, 0.2330000102519989)
last accs (train_acc, test_acc) (0.8491000219583511, 0.2330000102519989)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 16.91it/s] 23%|##3       | 6/26 [00:00<00:00, 27.09it/s] 38%|###8      | 10/26 [00:00<00:00, 30.94it/s] 54%|#####3    | 14/26 [00:00<00:00, 31.90it/s] 69%|######9   | 18/26 [00:00<00:00, 32.51it/s] 85%|########4 | 22/26 [00:00<00:00, 33.70it/s]100%|##########| 26/26 [00:00<00:00, 34.88it/s]100%|##########| 26/26 [00:00<00:00, 29.94it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 104 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 105 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 106 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 107 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 108 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 109 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 110 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 111 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 112 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 113 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 114 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 115 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 116 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 117 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 118 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 119 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 120 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 121 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 122 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 123 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 124 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 125 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 126 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 127 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 128 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 129 400
penalty weights 0.0
Epoch: [4][  26/  26]	Loss 0.385 (0.355)	train_nll   0.39 (  0.36)	train_penalty   0.02 (  0.03)	weight_norm  22.26 ( 22.23)	train_acc   0.83 (  0.85)	train_minacc   0.11 (  0.14)	train_majacc   0.99 (  0.98)	train_corr   0.00 (  0.00)	l1 7.1867 (7.3655)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.36it/s] 23%|##3       | 6/26 [00:00<00:00, 24.34it/s]                                               23%|##3       | 6/26 [00:00<00:00, 24.34it/s] 42%|####2     | 11/26 [00:00<00:00, 33.21it/s] 62%|######1   | 16/26 [00:00<00:00, 38.46it/s]                                                62%|######1   | 16/26 [00:00<00:00, 38.46it/s] 81%|########  | 21/26 [00:00<00:00, 37.81it/s]100%|##########| 26/26 [00:00<00:00, 40.99it/s]100%|##########| 26/26 [00:00<00:00, 32.32it/s]
Test: [   0/  26]	Loss 0.318 (0.318)	test_acc   0.87 (  0.87)	test_minacc   0.25 (  0.25)	test_majacc   0.96 (  0.96)	Loss_d 0.318 (0.318)	test_acc_d   0.87 (  0.87)	test_minacc_d   0.25 (  0.25)	test_majacc_d   0.96 (  0.96)	test_corr_d   0.90 (  0.90)
Test: [  10/  26]	Loss 0.338 (0.338)	test_acc   0.89 (  0.86)	test_minacc   0.40 (  0.25)	test_majacc   0.97 (  0.97)	Loss_d 0.338 (0.338)	test_acc_d   0.89 (  0.86)	test_minacc_d   0.40 (  0.25)	test_majacc_d   0.97 (  0.97)	test_corr_d   0.89 (  0.89)
Test: [  20/  26]	Loss 0.325 (0.343)	test_acc   0.87 (  0.86)	test_minacc   0.17 (  0.23)	test_majacc   0.97 (  0.97)	Loss_d 0.325 (0.343)	test_acc_d   0.87 (  0.86)	test_minacc_d   0.17 (  0.23)	test_majacc_d   0.97 (  0.97)	test_corr_d   0.91 (  0.89)
Test: [  26/  26]	Loss 0.378 (0.343)	test_acc   0.85 (  0.86)	test_minacc   0.27 (  0.23)	test_majacc   0.98 (  0.97)	Loss_d 0.378 (0.343)	test_acc_d   0.85 (  0.86)	test_minacc_d   0.27 (  0.23)	test_majacc_d   0.98 (  0.97)	test_corr_d   0.88 (  0.89)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.68it/s]
Test: [  0/  1]	Loss 1.455 (1.455)	test_acc   0.23 (  0.23)	test_minacc   0.15 (  0.15)	test_majacc   0.94 (  0.94)	Loss_d 1.455 (1.455)	test_acc_d   0.23 (  0.23)	test_minacc_d   0.15 (  0.15)	test_majacc_d   0.94 (  0.94)	test_corr_d   0.78 (  0.78)
Test: [  1/  1]	Loss 1.455 (1.455)	test_acc   0.23 (  0.23)	test_minacc   0.15 (  0.15)	test_majacc   0.94 (  0.94)	Loss_d 1.455 (1.455)	test_acc_d   0.23 (  0.23)	test_minacc_d   0.15 (  0.15)	test_majacc_d   0.94 (  0.94)	test_corr_d   0.78 (  0.78)
Overall Timing[  4/  1]	epoch_time 0.0427 (0.0488)	validation_time 0.0003 (0.0017)	train_time 0.0423 (0.0460)
record: (train_acc, test_acc) (0.8491000219583511, 0.2330000102519989)
last accs (train_acc, test_acc) (0.8579000245928764, 0.22600001096725464)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.17it/s] 19%|#9        | 5/26 [00:00<00:00, 23.71it/s] 35%|###4      | 9/26 [00:00<00:00, 29.30it/s] 50%|#####     | 13/26 [00:00<00:00, 31.62it/s] 65%|######5   | 17/26 [00:00<00:00, 32.93it/s] 81%|########  | 21/26 [00:00<00:00, 33.94it/s] 96%|#########6| 25/26 [00:00<00:00, 34.23it/s]100%|##########| 26/26 [00:00<00:00, 29.37it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 130 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 131 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 132 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 133 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 134 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 135 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 136 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 137 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 138 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 139 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 140 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 141 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 142 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 143 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 144 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 145 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 146 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 147 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 148 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 149 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 150 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 151 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 152 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 153 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 154 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 155 400
penalty weights 0.0
Epoch: [5][  26/  26]	Loss 0.344 (0.334)	train_nll   0.34 (  0.33)	train_penalty   0.02 (  0.03)	weight_norm  22.33 ( 22.30)	train_acc   0.85 (  0.85)	train_minacc   0.31 (  0.22)	train_majacc   0.97 (  0.97)	train_corr   0.00 (  0.00)	l1 7.2403 (7.4507)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.43it/s] 15%|#5        | 4/26 [00:00<00:01, 18.17it/s] 35%|###4      | 9/26 [00:00<00:00, 29.99it/s]                                               35%|###4      | 9/26 [00:00<00:00, 29.99it/s] 54%|#####3    | 14/26 [00:00<00:00, 35.95it/s] 73%|#######3  | 19/26 [00:00<00:00, 38.12it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 38.12it/s] 92%|#########2| 24/26 [00:00<00:00, 38.25it/s]100%|##########| 26/26 [00:00<00:00, 32.45it/s]
Test: [   0/  26]	Loss 0.293 (0.293)	test_acc   0.87 (  0.87)	test_minacc   0.33 (  0.33)	test_majacc   0.95 (  0.95)	Loss_d 0.293 (0.293)	test_acc_d   0.87 (  0.87)	test_minacc_d   0.33 (  0.33)	test_majacc_d   0.95 (  0.95)	test_corr_d   0.88 (  0.88)
Test: [  10/  26]	Loss 0.318 (0.315)	test_acc   0.88 (  0.86)	test_minacc   0.46 (  0.35)	test_majacc   0.95 (  0.95)	Loss_d 0.318 (0.315)	test_acc_d   0.88 (  0.86)	test_minacc_d   0.46 (  0.35)	test_majacc_d   0.95 (  0.95)	test_corr_d   0.87 (  0.87)
Test: [  20/  26]	Loss 0.323 (0.322)	test_acc   0.85 (  0.86)	test_minacc   0.26 (  0.33)	test_majacc   0.93 (  0.95)	Loss_d 0.323 (0.322)	test_acc_d   0.85 (  0.86)	test_minacc_d   0.26 (  0.33)	test_majacc_d   0.93 (  0.95)	test_corr_d   0.89 (  0.87)
Test: [  26/  26]	Loss 0.342 (0.323)	test_acc   0.86 (  0.86)	test_minacc   0.40 (  0.34)	test_majacc   0.96 (  0.95)	Loss_d 0.342 (0.323)	test_acc_d   0.86 (  0.86)	test_minacc_d   0.40 (  0.34)	test_majacc_d   0.96 (  0.95)	test_corr_d   0.87 (  0.87)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.17it/s]
Test: [  0/  1]	Loss 1.501 (1.501)	test_acc   0.30 (  0.30)	test_minacc   0.23 (  0.23)	test_majacc   0.92 (  0.92)	Loss_d 1.501 (1.501)	test_acc_d   0.30 (  0.30)	test_minacc_d   0.23 (  0.23)	test_majacc_d   0.92 (  0.92)	test_corr_d   0.71 (  0.71)
Test: [  1/  1]	Loss 1.501 (1.501)	test_acc   0.30 (  0.30)	test_minacc   0.23 (  0.23)	test_majacc   0.92 (  0.92)	Loss_d 1.501 (1.501)	test_acc_d   0.30 (  0.30)	test_minacc_d   0.23 (  0.23)	test_majacc_d   0.92 (  0.92)	test_corr_d   0.71 (  0.71)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/151/checkpoints/model_best.pth
Overall Timing[  5/  1]	epoch_time 0.0411 (0.0475)	validation_time 0.0004 (0.0015)	train_time 0.0406 (0.0451)
record: (train_acc, test_acc) (0.8558000239729882, 0.2990000247955322)
last accs (train_acc, test_acc) (0.8558000239729882, 0.2990000247955322)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.80it/s] 15%|#5        | 4/26 [00:00<00:01, 18.93it/s] 31%|###       | 8/26 [00:00<00:00, 26.34it/s] 46%|####6     | 12/26 [00:00<00:00, 29.80it/s] 62%|######1   | 16/26 [00:00<00:00, 31.94it/s] 77%|#######6  | 20/26 [00:00<00:00, 33.26it/s] 92%|#########2| 24/26 [00:00<00:00, 34.09it/s]100%|##########| 26/26 [00:00<00:00, 28.33it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 156 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 157 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 158 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 159 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 160 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 161 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 162 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 163 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 164 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 165 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 166 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 167 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 168 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 169 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 170 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 171 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 172 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 173 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 174 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 175 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 176 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 177 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 178 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 179 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 180 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 181 400
penalty weights 0.0
Epoch: [6][  26/  26]	Loss 0.340 (0.322)	train_nll   0.34 (  0.32)	train_penalty   0.01 (  0.02)	weight_norm  22.42 ( 22.38)	train_acc   0.86 (  0.86)	train_minacc   0.36 (  0.26)	train_majacc   0.98 (  0.96)	train_corr   0.00 (  0.00)	l1 6.9110 (7.5043)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.53it/s] 23%|##3       | 6/26 [00:00<00:00, 28.10it/s]                                               23%|##3       | 6/26 [00:00<00:00, 28.10it/s] 42%|####2     | 11/26 [00:00<00:00, 34.55it/s] 62%|######1   | 16/26 [00:00<00:00, 38.00it/s]                                                62%|######1   | 16/26 [00:00<00:00, 38.00it/s] 81%|########  | 21/26 [00:00<00:00, 40.50it/s]100%|##########| 26/26 [00:00<00:00, 42.93it/s]100%|##########| 26/26 [00:00<00:00, 34.47it/s]
Test: [   0/  26]	Loss 0.291 (0.291)	test_acc   0.88 (  0.88)	test_minacc   0.35 (  0.35)	test_majacc   0.96 (  0.96)	Loss_d 0.291 (0.291)	test_acc_d   0.88 (  0.88)	test_minacc_d   0.35 (  0.35)	test_majacc_d   0.96 (  0.96)	test_corr_d   0.89 (  0.89)
Test: [  10/  26]	Loss 0.313 (0.306)	test_acc   0.88 (  0.87)	test_minacc   0.35 (  0.33)	test_majacc   0.97 (  0.96)	Loss_d 0.313 (0.306)	test_acc_d   0.88 (  0.87)	test_minacc_d   0.35 (  0.33)	test_majacc_d   0.97 (  0.96)	test_corr_d   0.88 (  0.88)
Test: [  20/  26]	Loss 0.307 (0.313)	test_acc   0.86 (  0.86)	test_minacc   0.24 (  0.32)	test_majacc   0.94 (  0.96)	Loss_d 0.307 (0.313)	test_acc_d   0.86 (  0.86)	test_minacc_d   0.24 (  0.32)	test_majacc_d   0.94 (  0.96)	test_corr_d   0.90 (  0.89)
Test: [  26/  26]	Loss 0.334 (0.314)	test_acc   0.87 (  0.86)	test_minacc   0.38 (  0.32)	test_majacc   0.98 (  0.96)	Loss_d 0.334 (0.314)	test_acc_d   0.87 (  0.86)	test_minacc_d   0.38 (  0.32)	test_majacc_d   0.98 (  0.96)	test_corr_d   0.88 (  0.88)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 60.02it/s]
Test: [  0/  1]	Loss 1.478 (1.478)	test_acc   0.24 (  0.24)	test_minacc   0.16 (  0.16)	test_majacc   0.95 (  0.95)	Loss_d 1.478 (1.478)	test_acc_d   0.24 (  0.24)	test_minacc_d   0.16 (  0.16)	test_majacc_d   0.95 (  0.95)	test_corr_d   0.77 (  0.77)
Test: [  1/  1]	Loss 1.478 (1.478)	test_acc   0.24 (  0.24)	test_minacc   0.16 (  0.16)	test_majacc   0.95 (  0.95)	Loss_d 1.478 (1.478)	test_acc_d   0.24 (  0.24)	test_minacc_d   0.16 (  0.16)	test_majacc_d   0.95 (  0.95)	test_corr_d   0.77 (  0.77)
Overall Timing[  6/  1]	epoch_time 0.0461 (0.0473)	validation_time 0.0004 (0.0013)	train_time 0.0456 (0.0452)
record: (train_acc, test_acc) (0.8558000239729882, 0.2990000247955322)
last accs (train_acc, test_acc) (0.863500022649765, 0.242000013589859)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 12.48it/s] 23%|##3       | 6/26 [00:00<00:00, 23.21it/s] 38%|###8      | 10/26 [00:00<00:00, 28.86it/s] 54%|#####3    | 14/26 [00:00<00:00, 31.11it/s] 69%|######9   | 18/26 [00:00<00:00, 32.93it/s] 85%|########4 | 22/26 [00:00<00:00, 34.16it/s]100%|##########| 26/26 [00:00<00:00, 34.74it/s]100%|##########| 26/26 [00:00<00:00, 29.12it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 182 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 183 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 184 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 185 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 186 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 187 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 188 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 189 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 190 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 191 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 192 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 193 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 194 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 195 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 196 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 197 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 198 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 199 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 200 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 201 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 202 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 203 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 204 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 205 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 206 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 207 400
penalty weights 0.0
Epoch: [7][  26/  26]	Loss 0.323 (0.307)	train_nll   0.32 (  0.31)	train_penalty   0.01 (  0.02)	weight_norm  22.53 ( 22.48)	train_acc   0.88 (  0.86)	train_minacc   0.49 (  0.34)	train_majacc   0.97 (  0.96)	train_corr   0.00 (  0.00)	l1 7.0951 (7.6079)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:05,  4.86it/s] 31%|###       | 8/26 [00:00<00:00, 30.02it/s]                                               31%|###       | 8/26 [00:00<00:00, 30.02it/s] 50%|#####     | 13/26 [00:00<00:00, 32.90it/s] 69%|######9   | 18/26 [00:00<00:00, 37.36it/s]                                                69%|######9   | 18/26 [00:00<00:00, 37.36it/s] 88%|########8 | 23/26 [00:00<00:00, 39.94it/s]100%|##########| 26/26 [00:00<00:00, 32.59it/s]
Test: [   0/  26]	Loss 0.300 (0.300)	test_acc   0.87 (  0.87)	test_minacc   0.39 (  0.39)	test_majacc   0.94 (  0.94)	Loss_d 0.300 (0.300)	test_acc_d   0.87 (  0.87)	test_minacc_d   0.39 (  0.39)	test_majacc_d   0.94 (  0.94)	test_corr_d   0.88 (  0.88)
Test: [  10/  26]	Loss 0.312 (0.312)	test_acc   0.89 (  0.87)	test_minacc   0.53 (  0.42)	test_majacc   0.95 (  0.95)	Loss_d 0.312 (0.312)	test_acc_d   0.89 (  0.87)	test_minacc_d   0.53 (  0.42)	test_majacc_d   0.95 (  0.95)	test_corr_d   0.86 (  0.87)
Test: [  20/  26]	Loss 0.321 (0.316)	test_acc   0.86 (  0.87)	test_minacc   0.33 (  0.41)	test_majacc   0.94 (  0.95)	Loss_d 0.321 (0.316)	test_acc_d   0.86 (  0.87)	test_minacc_d   0.33 (  0.41)	test_majacc_d   0.94 (  0.95)	test_corr_d   0.89 (  0.87)
Test: [  26/  26]	Loss 0.314 (0.314)	test_acc   0.87 (  0.87)	test_minacc   0.47 (  0.41)	test_majacc   0.96 (  0.95)	Loss_d 0.314 (0.314)	test_acc_d   0.87 (  0.87)	test_minacc_d   0.47 (  0.41)	test_majacc_d   0.96 (  0.95)	test_corr_d   0.85 (  0.87)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.48it/s]
Test: [  0/  1]	Loss 1.606 (1.606)	test_acc   0.29 (  0.29)	test_minacc   0.22 (  0.22)	test_majacc   0.91 (  0.91)	Loss_d 1.606 (1.606)	test_acc_d   0.29 (  0.29)	test_minacc_d   0.22 (  0.22)	test_majacc_d   0.91 (  0.91)	test_corr_d   0.72 (  0.72)
Test: [  1/  1]	Loss 1.606 (1.606)	test_acc   0.29 (  0.29)	test_minacc   0.22 (  0.22)	test_majacc   0.91 (  0.91)	Loss_d 1.606 (1.606)	test_acc_d   0.29 (  0.29)	test_minacc_d   0.22 (  0.22)	test_majacc_d   0.91 (  0.91)	test_corr_d   0.72 (  0.72)
Overall Timing[  7/  1]	epoch_time 0.0431 (0.0468)	validation_time 0.0003 (0.0012)	train_time 0.0427 (0.0449)
record: (train_acc, test_acc) (0.8558000239729882, 0.2990000247955322)
last accs (train_acc, test_acc) (0.8672000212669373, 0.2850000262260437)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.58it/s] 15%|#5        | 4/26 [00:00<00:01, 17.22it/s] 31%|###       | 8/26 [00:00<00:00, 24.96it/s] 46%|####6     | 12/26 [00:00<00:00, 29.01it/s] 62%|######1   | 16/26 [00:00<00:00, 31.67it/s] 77%|#######6  | 20/26 [00:00<00:00, 33.17it/s] 92%|#########2| 24/26 [00:00<00:00, 33.73it/s]100%|##########| 26/26 [00:00<00:00, 27.59it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 208 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 209 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 210 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 211 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 212 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 213 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 214 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 215 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 216 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 217 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 218 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 219 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 220 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 221 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 222 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 223 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 224 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 225 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 226 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 227 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 228 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 229 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 230 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 231 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 232 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 233 400
penalty weights 0.0
Epoch: [8][  26/  26]	Loss 0.301 (0.301)	train_nll   0.30 (  0.30)	train_penalty   0.01 (  0.02)	weight_norm  22.65 ( 22.59)	train_acc   0.88 (  0.87)	train_minacc   0.49 (  0.37)	train_majacc   0.97 (  0.96)	train_corr   0.00 (  0.00)	l1 6.8237 (7.2732)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:11,  2.23it/s] 23%|##3       | 6/26 [00:00<00:01, 13.76it/s]                                               23%|##3       | 6/26 [00:00<00:01, 13.76it/s] 42%|####2     | 11/26 [00:00<00:00, 22.82it/s] 65%|######5   | 17/26 [00:00<00:00, 30.91it/s]                                                65%|######5   | 17/26 [00:00<00:00, 30.91it/s] 85%|########4 | 22/26 [00:00<00:00, 33.88it/s]100%|##########| 26/26 [00:01<00:00, 25.27it/s]
Test: [   0/  26]	Loss 0.287 (0.287)	test_acc   0.89 (  0.89)	test_minacc   0.55 (  0.55)	test_majacc   0.95 (  0.95)	Loss_d 0.287 (0.287)	test_acc_d   0.89 (  0.89)	test_minacc_d   0.55 (  0.55)	test_majacc_d   0.95 (  0.95)	test_corr_d   0.86 (  0.86)
Test: [  10/  26]	Loss 0.319 (0.309)	test_acc   0.87 (  0.87)	test_minacc   0.56 (  0.47)	test_majacc   0.93 (  0.93)	Loss_d 0.319 (0.309)	test_acc_d   0.87 (  0.87)	test_minacc_d   0.56 (  0.47)	test_majacc_d   0.93 (  0.93)	test_corr_d   0.82 (  0.84)
Test: [  20/  26]	Loss 0.326 (0.312)	test_acc   0.86 (  0.86)	test_minacc   0.39 (  0.46)	test_majacc   0.93 (  0.93)	Loss_d 0.326 (0.312)	test_acc_d   0.86 (  0.86)	test_minacc_d   0.39 (  0.46)	test_majacc_d   0.93 (  0.93)	test_corr_d   0.86 (  0.84)
Test: [  26/  26]	Loss 0.291 (0.310)	test_acc   0.90 (  0.86)	test_minacc   0.60 (  0.47)	test_majacc   0.96 (  0.93)	Loss_d 0.291 (0.310)	test_acc_d   0.90 (  0.86)	test_minacc_d   0.60 (  0.47)	test_majacc_d   0.96 (  0.93)	test_corr_d   0.83 (  0.84)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.45it/s]
Test: [  0/  1]	Loss 1.625 (1.625)	test_acc   0.34 (  0.34)	test_minacc   0.27 (  0.27)	test_majacc   0.92 (  0.92)	Loss_d 1.625 (1.625)	test_acc_d   0.34 (  0.34)	test_minacc_d   0.27 (  0.27)	test_majacc_d   0.92 (  0.92)	test_corr_d   0.67 (  0.67)
Test: [  1/  1]	Loss 1.625 (1.625)	test_acc   0.34 (  0.34)	test_minacc   0.27 (  0.27)	test_majacc   0.92 (  0.92)	Loss_d 1.625 (1.625)	test_acc_d   0.34 (  0.34)	test_minacc_d   0.27 (  0.27)	test_majacc_d   0.92 (  0.92)	test_corr_d   0.67 (  0.67)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/151/checkpoints/model_best.pth
Overall Timing[  8/  1]	epoch_time 0.0410 (0.0461)	validation_time 0.0004 (0.0011)	train_time 0.0405 (0.0444)
record: (train_acc, test_acc) (0.8641000260710716, 0.33800002932548523)
last accs (train_acc, test_acc) (0.8641000260710716, 0.33800002932548523)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:02,  9.27it/s] 23%|##3       | 6/26 [00:00<00:01, 19.72it/s] 38%|###8      | 10/26 [00:00<00:00, 25.10it/s] 54%|#####3    | 14/26 [00:00<00:00, 28.82it/s] 69%|######9   | 18/26 [00:00<00:00, 30.76it/s] 85%|########4 | 22/26 [00:00<00:00, 31.85it/s]100%|##########| 26/26 [00:00<00:00, 33.45it/s]100%|##########| 26/26 [00:00<00:00, 26.68it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 234 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 235 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 236 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 237 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 238 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 239 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 240 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 241 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 242 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 243 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 244 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 245 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 246 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 247 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 248 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 249 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 250 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 251 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 252 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 253 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 254 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 255 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 256 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 257 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 258 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 259 400
penalty weights 0.0
Epoch: [9][  26/  26]	Loss 0.285 (0.290)	train_nll   0.28 (  0.29)	train_penalty   0.01 (  0.02)	weight_norm  22.80 ( 22.73)	train_acc   0.89 (  0.87)	train_minacc   0.51 (  0.43)	train_majacc   0.97 (  0.95)	train_corr   0.00 (  0.00)	l1 6.6973 (7.2675)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 19.34it/s] 27%|##6       | 7/26 [00:00<00:00, 35.75it/s]                                               27%|##6       | 7/26 [00:00<00:00, 35.75it/s] 46%|####6     | 12/26 [00:00<00:00, 41.19it/s] 65%|######5   | 17/26 [00:00<00:00, 43.64it/s]                                                65%|######5   | 17/26 [00:00<00:00, 43.64it/s] 85%|########4 | 22/26 [00:00<00:00, 44.47it/s]100%|##########| 26/26 [00:00<00:00, 38.65it/s]
Test: [   0/  26]	Loss 0.237 (0.237)	test_acc   0.89 (  0.89)	test_minacc   0.45 (  0.45)	test_majacc   0.96 (  0.96)	Loss_d 0.237 (0.237)	test_acc_d   0.89 (  0.89)	test_minacc_d   0.45 (  0.45)	test_majacc_d   0.96 (  0.96)	test_corr_d   0.89 (  0.89)
Test: [  10/  26]	Loss 0.265 (0.273)	test_acc   0.91 (  0.88)	test_minacc   0.58 (  0.45)	test_majacc   0.96 (  0.96)	Loss_d 0.265 (0.273)	test_acc_d   0.91 (  0.88)	test_minacc_d   0.58 (  0.45)	test_majacc_d   0.96 (  0.96)	test_corr_d   0.87 (  0.88)
Test: [  20/  26]	Loss 0.285 (0.272)	test_acc   0.87 (  0.88)	test_minacc   0.37 (  0.45)	test_majacc   0.94 (  0.96)	Loss_d 0.285 (0.272)	test_acc_d   0.87 (  0.88)	test_minacc_d   0.37 (  0.45)	test_majacc_d   0.94 (  0.96)	test_corr_d   0.89 (  0.87)
Test: [  26/  26]	Loss 0.271 (0.273)	test_acc   0.88 (  0.88)	test_minacc   0.49 (  0.45)	test_majacc   0.97 (  0.96)	Loss_d 0.271 (0.273)	test_acc_d   0.88 (  0.88)	test_minacc_d   0.49 (  0.45)	test_majacc_d   0.97 (  0.96)	test_corr_d   0.86 (  0.87)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 65.38it/s]
Test: [  0/  1]	Loss 1.744 (1.744)	test_acc   0.29 (  0.29)	test_minacc   0.21 (  0.21)	test_majacc   0.92 (  0.92)	Loss_d 1.744 (1.744)	test_acc_d   0.29 (  0.29)	test_minacc_d   0.21 (  0.21)	test_majacc_d   0.92 (  0.92)	test_corr_d   0.74 (  0.74)
Test: [  1/  1]	Loss 1.744 (1.744)	test_acc   0.29 (  0.29)	test_minacc   0.21 (  0.21)	test_majacc   0.92 (  0.92)	Loss_d 1.744 (1.744)	test_acc_d   0.29 (  0.29)	test_minacc_d   0.21 (  0.21)	test_majacc_d   0.92 (  0.92)	test_corr_d   0.74 (  0.74)
Overall Timing[  9/  1]	epoch_time 0.0409 (0.0456)	validation_time 0.0003 (0.0011)	train_time 0.0405 (0.0440)
record: (train_acc, test_acc) (0.8641000260710716, 0.33800002932548523)
last accs (train_acc, test_acc) (0.8819000163674354, 0.2850000262260437)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:05,  4.96it/s] 19%|#9        | 5/26 [00:00<00:01, 18.68it/s] 35%|###4      | 9/26 [00:00<00:00, 24.85it/s] 50%|#####     | 13/26 [00:00<00:00, 28.18it/s] 65%|######5   | 17/26 [00:00<00:00, 30.43it/s] 81%|########  | 21/26 [00:00<00:00, 32.31it/s] 96%|#########6| 25/26 [00:00<00:00, 33.16it/s]100%|##########| 26/26 [00:00<00:00, 26.74it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 260 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 261 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 262 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 263 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 264 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 265 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 266 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 267 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 268 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 269 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 270 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 271 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 272 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 273 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 274 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 275 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 276 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 277 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 278 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 279 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 280 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 281 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 282 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 283 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 284 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 285 400
penalty weights 0.0
Epoch: [10][  26/  26]	Loss 0.258 (0.264)	train_nll   0.26 (  0.26)	train_penalty   0.01 (  0.01)	weight_norm  22.99 ( 22.90)	train_acc   0.89 (  0.89)	train_minacc   0.58 (  0.52)	train_majacc   0.96 (  0.95)	train_corr   0.00 (  0.00)	l1 6.9279 (7.4499)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 17.53it/s] 27%|##6       | 7/26 [00:00<00:00, 34.57it/s]                                               27%|##6       | 7/26 [00:00<00:00, 34.57it/s] 50%|#####     | 13/26 [00:00<00:00, 43.81it/s] 69%|######9   | 18/26 [00:00<00:00, 45.03it/s]                                                69%|######9   | 18/26 [00:00<00:00, 45.03it/s] 92%|#########2| 24/26 [00:00<00:00, 49.04it/s]100%|##########| 26/26 [00:00<00:00, 40.09it/s]
Test: [   0/  26]	Loss 0.252 (0.252)	test_acc   0.89 (  0.89)	test_minacc   0.57 (  0.57)	test_majacc   0.94 (  0.94)	Loss_d 0.252 (0.252)	test_acc_d   0.89 (  0.89)	test_minacc_d   0.57 (  0.57)	test_majacc_d   0.94 (  0.94)	test_corr_d   0.86 (  0.86)
Test: [  10/  26]	Loss 0.277 (0.284)	test_acc   0.89 (  0.88)	test_minacc   0.54 (  0.49)	test_majacc   0.95 (  0.95)	Loss_d 0.277 (0.284)	test_acc_d   0.89 (  0.88)	test_minacc_d   0.54 (  0.49)	test_majacc_d   0.95 (  0.95)	test_corr_d   0.83 (  0.85)
Test: [  20/  26]	Loss 0.284 (0.277)	test_acc   0.88 (  0.89)	test_minacc   0.46 (  0.50)	test_majacc   0.93 (  0.95)	Loss_d 0.284 (0.277)	test_acc_d   0.88 (  0.89)	test_minacc_d   0.46 (  0.50)	test_majacc_d   0.93 (  0.95)	test_corr_d   0.87 (  0.85)
Test: [  26/  26]	Loss 0.226 (0.272)	test_acc   0.92 (  0.89)	test_minacc   0.64 (  0.51)	test_majacc   0.99 (  0.95)	Loss_d 0.226 (0.272)	test_acc_d   0.92 (  0.89)	test_minacc_d   0.64 (  0.51)	test_majacc_d   0.99 (  0.95)	test_corr_d   0.83 (  0.85)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.93it/s]
Test: [  0/  1]	Loss 1.880 (1.880)	test_acc   0.32 (  0.32)	test_minacc   0.25 (  0.25)	test_majacc   0.90 (  0.90)	Loss_d 1.880 (1.880)	test_acc_d   0.32 (  0.32)	test_minacc_d   0.25 (  0.25)	test_majacc_d   0.90 (  0.90)	test_corr_d   0.67 (  0.67)
Test: [  1/  1]	Loss 1.880 (1.880)	test_acc   0.32 (  0.32)	test_minacc   0.25 (  0.25)	test_majacc   0.90 (  0.90)	Loss_d 1.880 (1.880)	test_acc_d   0.32 (  0.32)	test_minacc_d   0.25 (  0.25)	test_majacc_d   0.90 (  0.90)	test_corr_d   0.67 (  0.67)
Overall Timing[ 10/  1]	epoch_time 0.0430 (0.0454)	validation_time 0.0004 (0.0010)	train_time 0.0426 (0.0439)
record: (train_acc, test_acc) (0.8641000260710716, 0.33800002932548523)
last accs (train_acc, test_acc) (0.888500016450882, 0.31700000166893005)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.60it/s]  8%|7         | 2/26 [00:00<00:03,  7.32it/s] 23%|##3       | 6/26 [00:00<00:01, 18.75it/s] 38%|###8      | 10/26 [00:00<00:00, 25.07it/s] 54%|#####3    | 14/26 [00:00<00:00, 28.78it/s] 69%|######9   | 18/26 [00:00<00:00, 30.43it/s] 85%|########4 | 22/26 [00:00<00:00, 32.14it/s]100%|##########| 26/26 [00:00<00:00, 33.37it/s]100%|##########| 26/26 [00:01<00:00, 25.54it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 286 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 287 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 288 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 289 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 290 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 291 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 292 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 293 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 294 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 295 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 296 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 297 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 298 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 299 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 300 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 301 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 302 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 303 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 304 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 305 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 306 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 307 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 308 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 309 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 310 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 311 400
penalty weights 0.0
Epoch: [11][  26/  26]	Loss 0.208 (0.262)	train_nll   0.21 (  0.26)	train_penalty   0.00 (  0.01)	weight_norm  23.23 ( 23.11)	train_acc   0.92 (  0.89)	train_minacc   0.73 (  0.54)	train_majacc   0.96 (  0.95)	train_corr   0.00 (  0.00)	l1 7.2387 (7.4520)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:07,  3.46it/s] 23%|##3       | 6/26 [00:00<00:01, 18.28it/s]                                               23%|##3       | 6/26 [00:00<00:01, 18.28it/s] 42%|####2     | 11/26 [00:00<00:00, 27.25it/s] 62%|######1   | 16/26 [00:00<00:00, 30.67it/s]                                                62%|######1   | 16/26 [00:00<00:00, 30.67it/s] 81%|########  | 21/26 [00:00<00:00, 34.59it/s]100%|##########| 26/26 [00:00<00:00, 38.70it/s]100%|##########| 26/26 [00:00<00:00, 28.09it/s]
Test: [   0/  26]	Loss 0.229 (0.229)	test_acc   0.89 (  0.89)	test_minacc   0.55 (  0.55)	test_majacc   0.95 (  0.95)	Loss_d 0.229 (0.229)	test_acc_d   0.89 (  0.89)	test_minacc_d   0.55 (  0.55)	test_majacc_d   0.95 (  0.95)	test_corr_d   0.85 (  0.85)
Test: [  10/  26]	Loss 0.246 (0.269)	test_acc   0.90 (  0.88)	test_minacc   0.58 (  0.50)	test_majacc   0.95 (  0.95)	Loss_d 0.246 (0.269)	test_acc_d   0.90 (  0.88)	test_minacc_d   0.58 (  0.50)	test_majacc_d   0.95 (  0.95)	test_corr_d   0.83 (  0.84)
Test: [  20/  26]	Loss 0.268 (0.261)	test_acc   0.87 (  0.88)	test_minacc   0.48 (  0.51)	test_majacc   0.92 (  0.95)	Loss_d 0.268 (0.261)	test_acc_d   0.87 (  0.88)	test_minacc_d   0.48 (  0.51)	test_majacc_d   0.92 (  0.95)	test_corr_d   0.85 (  0.84)
Test: [  26/  26]	Loss 0.191 (0.255)	test_acc   0.92 (  0.89)	test_minacc   0.67 (  0.53)	test_majacc   0.98 (  0.95)	Loss_d 0.191 (0.255)	test_acc_d   0.92 (  0.89)	test_minacc_d   0.67 (  0.53)	test_majacc_d   0.98 (  0.95)	test_corr_d   0.81 (  0.84)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.34it/s]
Test: [  0/  1]	Loss 2.116 (2.116)	test_acc   0.34 (  0.34)	test_minacc   0.27 (  0.27)	test_majacc   0.92 (  0.92)	Loss_d 2.116 (2.116)	test_acc_d   0.34 (  0.34)	test_minacc_d   0.27 (  0.27)	test_majacc_d   0.92 (  0.92)	test_corr_d   0.62 (  0.62)
Test: [  1/  1]	Loss 2.116 (2.116)	test_acc   0.34 (  0.34)	test_minacc   0.27 (  0.27)	test_majacc   0.92 (  0.92)	Loss_d 2.116 (2.116)	test_acc_d   0.34 (  0.34)	test_minacc_d   0.27 (  0.27)	test_majacc_d   0.92 (  0.92)	test_corr_d   0.62 (  0.62)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/151/checkpoints/model_best.pth
Overall Timing[ 11/  1]	epoch_time 0.0440 (0.0453)	validation_time 0.0003 (0.0009)	train_time 0.0437 (0.0439)
record: (train_acc, test_acc) (0.8874000246524811, 0.33900001645088196)
last accs (train_acc, test_acc) (0.8874000246524811, 0.33900001645088196)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:05,  4.75it/s] 19%|#9        | 5/26 [00:00<00:01, 18.08it/s] 35%|###4      | 9/26 [00:00<00:00, 25.06it/s] 50%|#####     | 13/26 [00:00<00:00, 29.18it/s] 65%|######5   | 17/26 [00:00<00:00, 31.84it/s] 81%|########  | 21/26 [00:00<00:00, 33.56it/s] 96%|#########6| 25/26 [00:00<00:00, 34.48it/s]100%|##########| 26/26 [00:00<00:00, 27.24it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 312 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 313 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 314 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 315 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 316 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 317 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 318 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 319 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 320 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 321 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 322 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 323 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 324 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 325 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 326 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 327 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 328 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 329 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 330 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 331 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 332 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 333 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 334 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 335 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 336 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 337 400
penalty weights 0.0
Epoch: [12][  26/  26]	Loss 0.173 (0.241)	train_nll   0.17 (  0.24)	train_penalty   0.00 (  0.01)	weight_norm  23.52 ( 23.38)	train_acc   0.94 (  0.90)	train_minacc   0.87 (  0.57)	train_majacc   0.96 (  0.96)	train_corr   0.00 (  0.00)	l1 7.7590 (7.5236)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.54it/s] 15%|#5        | 4/26 [00:00<00:01, 17.52it/s] 35%|###4      | 9/26 [00:00<00:00, 29.99it/s]                                               35%|###4      | 9/26 [00:00<00:00, 29.99it/s] 58%|#####7    | 15/26 [00:00<00:00, 37.15it/s]                                                58%|#####7    | 15/26 [00:00<00:00, 37.15it/s] 81%|########  | 21/26 [00:00<00:00, 42.21it/s]100%|##########| 26/26 [00:00<00:00, 44.41it/s]100%|##########| 26/26 [00:00<00:00, 33.56it/s]
Test: [   0/  26]	Loss 0.210 (0.210)	test_acc   0.90 (  0.90)	test_minacc   0.71 (  0.71)	test_majacc   0.93 (  0.93)	Loss_d 0.210 (0.210)	test_acc_d   0.90 (  0.90)	test_minacc_d   0.71 (  0.71)	test_majacc_d   0.93 (  0.93)	test_corr_d   0.79 (  0.79)
Test: [  10/  26]	Loss 0.214 (0.219)	test_acc   0.92 (  0.91)	test_minacc   0.77 (  0.72)	test_majacc   0.94 (  0.94)	Loss_d 0.214 (0.219)	test_acc_d   0.92 (  0.91)	test_minacc_d   0.77 (  0.72)	test_majacc_d   0.94 (  0.94)	test_corr_d   0.77 (  0.77)
Test: [  20/  26]	Loss 0.207 (0.209)	test_acc   0.91 (  0.91)	test_minacc   0.76 (  0.73)	test_majacc   0.93 (  0.94)	Loss_d 0.207 (0.209)	test_acc_d   0.91 (  0.91)	test_minacc_d   0.76 (  0.73)	test_majacc_d   0.93 (  0.94)	test_corr_d   0.79 (  0.77)
Test: [  26/  26]	Loss 0.137 (0.200)	test_acc   0.97 (  0.92)	test_minacc   0.91 (  0.76)	test_majacc   0.98 (  0.95)	Loss_d 0.137 (0.200)	test_acc_d   0.97 (  0.92)	test_minacc_d   0.91 (  0.76)	test_majacc_d   0.98 (  0.95)	test_corr_d   0.74 (  0.77)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.04it/s]
Test: [  0/  1]	Loss 2.186 (2.186)	test_acc   0.43 (  0.43)	test_minacc   0.38 (  0.38)	test_majacc   0.89 (  0.89)	Loss_d 2.186 (2.186)	test_acc_d   0.43 (  0.43)	test_minacc_d   0.38 (  0.38)	test_majacc_d   0.89 (  0.89)	test_corr_d   0.42 (  0.42)
Test: [  1/  1]	Loss 2.186 (2.186)	test_acc   0.43 (  0.43)	test_minacc   0.38 (  0.38)	test_majacc   0.89 (  0.89)	Loss_d 2.186 (2.186)	test_acc_d   0.43 (  0.43)	test_minacc_d   0.38 (  0.38)	test_majacc_d   0.89 (  0.89)	test_corr_d   0.42 (  0.42)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/151/checkpoints/model_best.pth
Overall Timing[ 12/  1]	epoch_time 0.0434 (0.0451)	validation_time 0.0003 (0.0009)	train_time 0.0431 (0.0438)
record: (train_acc, test_acc) (0.9180000201463699, 0.42900002002716064)
last accs (train_acc, test_acc) (0.9180000201463699, 0.42900002002716064)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:05,  4.42it/s] 19%|#9        | 5/26 [00:00<00:01, 17.73it/s] 35%|###4      | 9/26 [00:00<00:00, 25.44it/s] 50%|#####     | 13/26 [00:00<00:00, 29.89it/s] 65%|######5   | 17/26 [00:00<00:00, 32.92it/s] 81%|########  | 21/26 [00:00<00:00, 34.85it/s] 96%|#########6| 25/26 [00:00<00:00, 35.69it/s]100%|##########| 26/26 [00:00<00:00, 27.92it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 338 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 339 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 340 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 341 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 342 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 343 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 344 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 345 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 346 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 347 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 348 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 349 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 350 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 351 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 352 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 353 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 354 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 355 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 356 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 357 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 358 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 359 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 360 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 361 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 362 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 363 400
penalty weights 0.0
Epoch: [13][  26/  26]	Loss 0.150 (0.214)	train_nll   0.15 (  0.21)	train_penalty   0.00 (  0.01)	weight_norm  23.81 ( 23.67)	train_acc   0.94 (  0.91)	train_minacc   0.87 (  0.63)	train_majacc   0.96 (  0.96)	train_corr   0.00 (  0.00)	l1 8.2718 (7.8623)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.10it/s] 23%|##3       | 6/26 [00:00<00:00, 31.43it/s]                                               23%|##3       | 6/26 [00:00<00:00, 31.43it/s] 42%|####2     | 11/26 [00:00<00:00, 39.30it/s] 62%|######1   | 16/26 [00:00<00:00, 42.05it/s]                                                62%|######1   | 16/26 [00:00<00:00, 42.05it/s] 81%|########  | 21/26 [00:00<00:00, 42.71it/s]100%|##########| 26/26 [00:00<00:00, 44.62it/s]100%|##########| 26/26 [00:00<00:00, 36.71it/s]
Test: [   0/  26]	Loss 0.200 (0.200)	test_acc   0.91 (  0.91)	test_minacc   0.76 (  0.76)	test_majacc   0.93 (  0.93)	Loss_d 0.200 (0.200)	test_acc_d   0.91 (  0.91)	test_minacc_d   0.76 (  0.76)	test_majacc_d   0.93 (  0.93)	test_corr_d   0.76 (  0.76)
Test: [  10/  26]	Loss 0.223 (0.226)	test_acc   0.90 (  0.91)	test_minacc   0.75 (  0.76)	test_majacc   0.92 (  0.93)	Loss_d 0.223 (0.226)	test_acc_d   0.90 (  0.91)	test_minacc_d   0.75 (  0.76)	test_majacc_d   0.92 (  0.93)	test_corr_d   0.72 (  0.73)
Test: [  20/  26]	Loss 0.216 (0.211)	test_acc   0.90 (  0.91)	test_minacc   0.80 (  0.77)	test_majacc   0.92 (  0.93)	Loss_d 0.216 (0.211)	test_acc_d   0.90 (  0.91)	test_minacc_d   0.80 (  0.77)	test_majacc_d   0.92 (  0.93)	test_corr_d   0.73 (  0.72)
Test: [  26/  26]	Loss 0.085 (0.196)	test_acc   0.98 (  0.92)	test_minacc   0.98 (  0.79)	test_majacc   0.98 (  0.94)	Loss_d 0.085 (0.196)	test_acc_d   0.98 (  0.92)	test_minacc_d   0.98 (  0.79)	test_majacc_d   0.98 (  0.94)	test_corr_d   0.68 (  0.72)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 60.28it/s]
Test: [  0/  1]	Loss 2.338 (2.338)	test_acc   0.46 (  0.46)	test_minacc   0.42 (  0.42)	test_majacc   0.87 (  0.87)	Loss_d 2.338 (2.338)	test_acc_d   0.46 (  0.46)	test_minacc_d   0.42 (  0.42)	test_majacc_d   0.87 (  0.87)	test_corr_d   0.33 (  0.33)
Test: [  1/  1]	Loss 2.338 (2.338)	test_acc   0.46 (  0.46)	test_minacc   0.42 (  0.42)	test_majacc   0.87 (  0.87)	Loss_d 2.338 (2.338)	test_acc_d   0.46 (  0.46)	test_minacc_d   0.42 (  0.42)	test_majacc_d   0.87 (  0.87)	test_corr_d   0.33 (  0.33)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/151/checkpoints/model_best.pth
Overall Timing[ 13/  1]	epoch_time 0.0418 (0.0449)	validation_time 0.0005 (0.0009)	train_time 0.0413 (0.0436)
record: (train_acc, test_acc) (0.9177000170946121, 0.46400001645088196)
last accs (train_acc, test_acc) (0.9177000170946121, 0.46400001645088196)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:02, 10.44it/s] 23%|##3       | 6/26 [00:00<00:00, 21.72it/s] 38%|###8      | 10/26 [00:00<00:00, 27.41it/s] 54%|#####3    | 14/26 [00:00<00:00, 30.54it/s] 69%|######9   | 18/26 [00:00<00:00, 32.38it/s] 85%|########4 | 22/26 [00:00<00:00, 34.22it/s]100%|##########| 26/26 [00:00<00:00, 35.65it/s]100%|##########| 26/26 [00:00<00:00, 28.63it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 364 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 365 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 366 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 367 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 368 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 369 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 370 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 371 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 372 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 373 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 374 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 375 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 376 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 377 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 378 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 379 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 380 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 381 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 382 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 383 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 384 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 385 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 386 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 387 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 388 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 389 400
penalty weights 0.0
Epoch: [14][  26/  26]	Loss 0.168 (0.211)	train_nll   0.17 (  0.21)	train_penalty   0.00 (  0.00)	weight_norm  24.16 ( 23.99)	train_acc   0.93 (  0.91)	train_minacc   0.76 (  0.64)	train_majacc   0.97 (  0.96)	train_corr   0.00 (  0.00)	l1 7.9957 (8.0563)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.01it/s] 23%|##3       | 6/26 [00:00<00:00, 31.07it/s]                                               23%|##3       | 6/26 [00:00<00:00, 31.07it/s] 42%|####2     | 11/26 [00:00<00:00, 37.21it/s] 62%|######1   | 16/26 [00:00<00:00, 40.87it/s]                                                62%|######1   | 16/26 [00:00<00:00, 40.87it/s] 81%|########  | 21/26 [00:00<00:00, 39.47it/s]100%|##########| 26/26 [00:00<00:00, 42.43it/s]100%|##########| 26/26 [00:00<00:00, 35.43it/s]
Test: [   0/  26]	Loss 0.186 (0.186)	test_acc   0.91 (  0.91)	test_minacc   0.75 (  0.75)	test_majacc   0.94 (  0.94)	Loss_d 0.186 (0.186)	test_acc_d   0.91 (  0.91)	test_minacc_d   0.75 (  0.75)	test_majacc_d   0.94 (  0.94)	test_corr_d   0.76 (  0.76)
Test: [  10/  26]	Loss 0.244 (0.234)	test_acc   0.90 (  0.89)	test_minacc   0.75 (  0.75)	test_majacc   0.93 (  0.92)	Loss_d 0.244 (0.234)	test_acc_d   0.90 (  0.89)	test_minacc_d   0.75 (  0.75)	test_majacc_d   0.93 (  0.92)	test_corr_d   0.75 (  0.73)
Test: [  20/  26]	Loss 0.220 (0.231)	test_acc   0.90 (  0.90)	test_minacc   0.70 (  0.75)	test_majacc   0.93 (  0.92)	Loss_d 0.220 (0.231)	test_acc_d   0.90 (  0.90)	test_minacc_d   0.70 (  0.75)	test_majacc_d   0.93 (  0.92)	test_corr_d   0.77 (  0.73)
Test: [  26/  26]	Loss 0.125 (0.217)	test_acc   0.96 (  0.90)	test_minacc   0.89 (  0.77)	test_majacc   0.97 (  0.93)	Loss_d 0.125 (0.217)	test_acc_d   0.96 (  0.90)	test_minacc_d   0.89 (  0.77)	test_majacc_d   0.97 (  0.93)	test_corr_d   0.72 (  0.73)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 64.82it/s]
Test: [  0/  1]	Loss 2.259 (2.259)	test_acc   0.48 (  0.48)	test_minacc   0.44 (  0.44)	test_majacc   0.82 (  0.82)	Loss_d 2.259 (2.259)	test_acc_d   0.48 (  0.48)	test_minacc_d   0.44 (  0.44)	test_majacc_d   0.82 (  0.82)	test_corr_d   0.28 (  0.28)
Test: [  1/  1]	Loss 2.259 (2.259)	test_acc   0.48 (  0.48)	test_minacc   0.44 (  0.44)	test_majacc   0.82 (  0.82)	Loss_d 2.259 (2.259)	test_acc_d   0.48 (  0.48)	test_minacc_d   0.44 (  0.44)	test_majacc_d   0.82 (  0.82)	test_corr_d   0.28 (  0.28)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/151/checkpoints/model_best.pth
Overall Timing[ 14/  1]	epoch_time 0.0432 (0.0448)	validation_time 0.0006 (0.0008)	train_time 0.0426 (0.0436)
record: (train_acc, test_acc) (0.9041000226736069, 0.48000001907348633)
last accs (train_acc, test_acc) (0.9041000226736069, 0.48000001907348633)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 16.43it/s] 23%|##3       | 6/26 [00:00<00:00, 26.33it/s] 38%|###8      | 10/26 [00:00<00:00, 30.31it/s] 54%|#####3    | 14/26 [00:00<00:00, 31.91it/s] 69%|######9   | 18/26 [00:00<00:00, 32.90it/s] 85%|########4 | 22/26 [00:00<00:00, 33.65it/s]100%|##########| 26/26 [00:00<00:00, 35.39it/s]100%|##########| 26/26 [00:00<00:00, 29.98it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 390 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 391 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 392 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 393 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 394 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 395 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 396 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 397 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 398 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 399 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 400 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 401 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 402 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 403 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 404 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 405 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 406 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 407 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 408 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 409 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 410 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 411 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 412 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 413 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 414 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 415 400
penalty weights 10000.0
Epoch: [15][  26/  26]	Loss 0.009 (0.085)	train_nll   0.21 (  0.24)	train_penalty   0.01 (  0.00)	weight_norm  24.48 ( 24.34)	train_acc   0.93 (  0.90)	train_minacc   0.87 (  0.71)	train_majacc   0.95 (  0.93)	train_corr   0.00 (  0.00)	l1 6.9009 (7.8726)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.21it/s] 23%|##3       | 6/26 [00:00<00:00, 31.61it/s]                                               23%|##3       | 6/26 [00:00<00:00, 31.61it/s] 42%|####2     | 11/26 [00:00<00:00, 37.96it/s] 62%|######1   | 16/26 [00:00<00:00, 41.92it/s]                                                62%|######1   | 16/26 [00:00<00:00, 41.92it/s] 81%|########  | 21/26 [00:00<00:00, 39.63it/s]100%|##########| 26/26 [00:00<00:00, 36.04it/s]
Test: [   0/  26]	Loss 0.211 (0.211)	test_acc   0.92 (  0.92)	test_minacc   0.84 (  0.84)	test_majacc   0.93 (  0.93)	Loss_d 0.211 (0.211)	test_acc_d   0.92 (  0.92)	test_minacc_d   0.84 (  0.84)	test_majacc_d   0.93 (  0.93)	test_corr_d   0.77 (  0.77)
Test: [  10/  26]	Loss 0.243 (0.227)	test_acc   0.89 (  0.91)	test_minacc   0.81 (  0.83)	test_majacc   0.90 (  0.92)	Loss_d 0.243 (0.227)	test_acc_d   0.89 (  0.91)	test_minacc_d   0.81 (  0.83)	test_majacc_d   0.90 (  0.92)	test_corr_d   0.72 (  0.72)
Test: [  20/  26]	Loss 0.281 (0.244)	test_acc   0.87 (  0.90)	test_minacc   0.70 (  0.79)	test_majacc   0.90 (  0.91)	Loss_d 0.281 (0.244)	test_acc_d   0.87 (  0.90)	test_minacc_d   0.70 (  0.79)	test_majacc_d   0.90 (  0.91)	test_corr_d   0.74 (  0.72)
Test: [  26/  26]	Loss 0.224 (0.245)	test_acc   0.92 (  0.90)	test_minacc   0.87 (  0.79)	test_majacc   0.93 (  0.92)	Loss_d 0.224 (0.245)	test_acc_d   0.92 (  0.90)	test_minacc_d   0.87 (  0.79)	test_majacc_d   0.93 (  0.92)	test_corr_d   0.70 (  0.72)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 65.16it/s]
Test: [  0/  1]	Loss 1.936 (1.936)	test_acc   0.45 (  0.45)	test_minacc   0.42 (  0.42)	test_majacc   0.80 (  0.80)	Loss_d 1.936 (1.936)	test_acc_d   0.45 (  0.45)	test_minacc_d   0.42 (  0.42)	test_majacc_d   0.80 (  0.80)	test_corr_d   0.37 (  0.37)
Test: [  1/  1]	Loss 1.936 (1.936)	test_acc   0.45 (  0.45)	test_minacc   0.42 (  0.42)	test_majacc   0.80 (  0.80)	Loss_d 1.936 (1.936)	test_acc_d   0.45 (  0.45)	test_minacc_d   0.42 (  0.42)	test_majacc_d   0.80 (  0.80)	test_corr_d   0.37 (  0.37)
Overall Timing[ 15/  1]	epoch_time 0.0446 (0.0448)	validation_time 0.0004 (0.0008)	train_time 0.0442 (0.0436)
record: (train_acc, test_acc) (0.9041000226736069, 0.48000001907348633)
last accs (train_acc, test_acc) (0.8971000215411187, 0.4540000259876251)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:07,  3.48it/s] 19%|#9        | 5/26 [00:00<00:01, 14.65it/s] 35%|###4      | 9/26 [00:00<00:00, 21.46it/s] 50%|#####     | 13/26 [00:00<00:00, 25.65it/s] 65%|######5   | 17/26 [00:00<00:00, 28.43it/s] 81%|########  | 21/26 [00:00<00:00, 30.60it/s] 96%|#########6| 25/26 [00:00<00:00, 32.13it/s]100%|##########| 26/26 [00:01<00:00, 24.33it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 416 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 417 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 418 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 419 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 420 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 421 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 422 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 423 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 424 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 425 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 426 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 427 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 428 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 429 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 430 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 431 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 432 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 433 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 434 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 435 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 436 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 437 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 438 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 439 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 440 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 441 400
penalty weights 10000.0
Epoch: [16][  26/  26]	Loss 0.002 (0.003)	train_nll   0.29 (  0.30)	train_penalty   0.00 (  0.00)	weight_norm  24.54 ( 24.52)	train_acc   0.86 (  0.86)	train_minacc   0.84 (  0.80)	train_majacc   0.86 (  0.87)	train_corr   0.00 (  0.00)	l1 6.6602 (6.7860)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.57it/s] 23%|##3       | 6/26 [00:00<00:00, 27.22it/s]                                               23%|##3       | 6/26 [00:00<00:00, 27.22it/s] 42%|####2     | 11/26 [00:00<00:00, 34.70it/s] 62%|######1   | 16/26 [00:00<00:00, 39.76it/s]                                                62%|######1   | 16/26 [00:00<00:00, 39.76it/s] 81%|########  | 21/26 [00:00<00:00, 41.90it/s]100%|##########| 26/26 [00:00<00:00, 43.36it/s]100%|##########| 26/26 [00:00<00:00, 35.25it/s]
Test: [   0/  26]	Loss 0.297 (0.297)	test_acc   0.84 (  0.84)	test_minacc   0.82 (  0.82)	test_majacc   0.85 (  0.85)	Loss_d 0.297 (0.297)	test_acc_d   0.84 (  0.84)	test_minacc_d   0.82 (  0.82)	test_majacc_d   0.85 (  0.85)	test_corr_d   0.67 (  0.67)
Test: [  10/  26]	Loss 0.306 (0.301)	test_acc   0.83 (  0.84)	test_minacc   0.81 (  0.83)	test_majacc   0.83 (  0.85)	Loss_d 0.306 (0.301)	test_acc_d   0.83 (  0.84)	test_minacc_d   0.81 (  0.83)	test_majacc_d   0.83 (  0.85)	test_corr_d   0.64 (  0.64)
Test: [  20/  26]	Loss 0.350 (0.311)	test_acc   0.82 (  0.84)	test_minacc   0.72 (  0.81)	test_majacc   0.83 (  0.84)	Loss_d 0.350 (0.311)	test_acc_d   0.82 (  0.84)	test_minacc_d   0.72 (  0.81)	test_majacc_d   0.83 (  0.84)	test_corr_d   0.67 (  0.64)
Test: [  26/  26]	Loss 0.299 (0.314)	test_acc   0.84 (  0.84)	test_minacc   0.84 (  0.81)	test_majacc   0.84 (  0.84)	Loss_d 0.299 (0.314)	test_acc_d   0.84 (  0.84)	test_minacc_d   0.84 (  0.81)	test_majacc_d   0.84 (  0.84)	test_corr_d   0.63 (  0.64)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 59.89it/s]
Test: [  0/  1]	Loss 1.672 (1.672)	test_acc   0.56 (  0.56)	test_minacc   0.53 (  0.53)	test_majacc   0.81 (  0.81)	Loss_d 1.672 (1.672)	test_acc_d   0.56 (  0.56)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.81 (  0.81)	test_corr_d   0.17 (  0.17)
Test: [  1/  1]	Loss 1.672 (1.672)	test_acc   0.56 (  0.56)	test_minacc   0.53 (  0.53)	test_majacc   0.81 (  0.81)	Loss_d 1.672 (1.672)	test_acc_d   0.56 (  0.56)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.81 (  0.81)	test_corr_d   0.17 (  0.17)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/151/checkpoints/model_best.pth
Overall Timing[ 16/  1]	epoch_time 0.0412 (0.0446)	validation_time 0.0004 (0.0008)	train_time 0.0408 (0.0434)
record: (train_acc, test_acc) (0.8383000220656395, 0.5600000023841858)
last accs (train_acc, test_acc) (0.8383000220656395, 0.5600000023841858)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.53it/s] 19%|#9        | 5/26 [00:00<00:00, 23.77it/s] 35%|###4      | 9/26 [00:00<00:00, 28.76it/s] 50%|#####     | 13/26 [00:00<00:00, 32.01it/s] 65%|######5   | 17/26 [00:00<00:00, 34.25it/s] 85%|########4 | 22/26 [00:00<00:00, 36.41it/s]100%|##########| 26/26 [00:00<00:00, 36.44it/s]100%|##########| 26/26 [00:00<00:00, 30.33it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 442 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 443 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 444 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 445 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 446 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 447 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 448 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 449 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 450 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 451 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 452 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 453 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 454 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 455 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 456 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 457 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 458 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 459 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 460 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 461 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 462 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 463 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 464 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 465 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 466 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 467 400
penalty weights 10000.0
Epoch: [17][  26/  26]	Loss 0.003 (0.001)	train_nll   0.28 (  0.32)	train_penalty   0.00 (  0.00)	weight_norm  24.56 ( 24.55)	train_acc   0.85 (  0.83)	train_minacc   0.84 (  0.81)	train_majacc   0.85 (  0.83)	train_corr   0.00 (  0.00)	l1 6.3246 (6.6094)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 19.45it/s] 27%|##6       | 7/26 [00:00<00:00, 34.49it/s]                                               27%|##6       | 7/26 [00:00<00:00, 34.49it/s] 46%|####6     | 12/26 [00:00<00:00, 39.42it/s] 65%|######5   | 17/26 [00:00<00:00, 42.25it/s]                                                65%|######5   | 17/26 [00:00<00:00, 42.25it/s] 85%|########4 | 22/26 [00:00<00:00, 40.25it/s]100%|##########| 26/26 [00:00<00:00, 37.33it/s]
Test: [   0/  26]	Loss 0.291 (0.291)	test_acc   0.86 (  0.86)	test_minacc   0.86 (  0.86)	test_majacc   0.86 (  0.86)	Loss_d 0.291 (0.291)	test_acc_d   0.86 (  0.86)	test_minacc_d   0.86 (  0.86)	test_majacc_d   0.86 (  0.86)	test_corr_d   0.69 (  0.69)
Test: [  10/  26]	Loss 0.287 (0.284)	test_acc   0.86 (  0.86)	test_minacc   0.88 (  0.85)	test_majacc   0.86 (  0.86)	Loss_d 0.287 (0.284)	test_acc_d   0.86 (  0.86)	test_minacc_d   0.88 (  0.85)	test_majacc_d   0.86 (  0.86)	test_corr_d   0.67 (  0.67)
Test: [  20/  26]	Loss 0.320 (0.295)	test_acc   0.83 (  0.85)	test_minacc   0.74 (  0.83)	test_majacc   0.84 (  0.85)	Loss_d 0.320 (0.295)	test_acc_d   0.83 (  0.85)	test_minacc_d   0.74 (  0.83)	test_majacc_d   0.84 (  0.85)	test_corr_d   0.70 (  0.67)
Test: [  26/  26]	Loss 0.283 (0.297)	test_acc   0.84 (  0.85)	test_minacc   0.84 (  0.83)	test_majacc   0.84 (  0.85)	Loss_d 0.283 (0.297)	test_acc_d   0.84 (  0.85)	test_minacc_d   0.84 (  0.83)	test_majacc_d   0.84 (  0.85)	test_corr_d   0.66 (  0.67)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 60.97it/s]
Test: [  0/  1]	Loss 1.525 (1.525)	test_acc   0.57 (  0.57)	test_minacc   0.55 (  0.55)	test_majacc   0.81 (  0.81)	Loss_d 1.525 (1.525)	test_acc_d   0.57 (  0.57)	test_minacc_d   0.55 (  0.55)	test_majacc_d   0.81 (  0.81)	test_corr_d   0.18 (  0.18)
Test: [  1/  1]	Loss 1.525 (1.525)	test_acc   0.57 (  0.57)	test_minacc   0.55 (  0.55)	test_majacc   0.81 (  0.81)	Loss_d 1.525 (1.525)	test_acc_d   0.57 (  0.57)	test_minacc_d   0.55 (  0.55)	test_majacc_d   0.81 (  0.81)	test_corr_d   0.18 (  0.18)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/151/checkpoints/model_best.pth
Overall Timing[ 17/  1]	epoch_time 0.0409 (0.0444)	validation_time 0.0007 (0.0008)	train_time 0.0402 (0.0433)
record: (train_acc, test_acc) (0.8482000235915184, 0.5720000267028809)
last accs (train_acc, test_acc) (0.8482000235915184, 0.5720000267028809)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 14.00it/s] 23%|##3       | 6/26 [00:00<00:00, 24.77it/s] 38%|###8      | 10/26 [00:00<00:00, 28.82it/s] 54%|#####3    | 14/26 [00:00<00:00, 30.61it/s] 69%|######9   | 18/26 [00:00<00:00, 32.05it/s] 85%|########4 | 22/26 [00:00<00:00, 33.33it/s]100%|##########| 26/26 [00:00<00:00, 34.85it/s]100%|##########| 26/26 [00:00<00:00, 29.31it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 468 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 469 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 470 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 471 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 472 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 473 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 474 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 475 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 476 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 477 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 478 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 479 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 480 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 481 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 482 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 483 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 484 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 485 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 486 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 487 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 488 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 489 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 490 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 491 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 492 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 493 400
penalty weights 10000.0
Epoch: [18][  26/  26]	Loss 0.001 (0.001)	train_nll   0.29 (  0.32)	train_penalty   0.00 (  0.00)	weight_norm  24.56 ( 24.56)	train_acc   0.84 (  0.83)	train_minacc   0.84 (  0.84)	train_majacc   0.84 (  0.83)	train_corr   0.00 (  0.00)	l1 6.5062 (6.6003)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:02, 10.21it/s] 27%|##6       | 7/26 [00:00<00:00, 26.16it/s]                                               27%|##6       | 7/26 [00:00<00:00, 26.16it/s] 46%|####6     | 12/26 [00:00<00:00, 33.69it/s] 65%|######5   | 17/26 [00:00<00:00, 35.46it/s]                                                65%|######5   | 17/26 [00:00<00:00, 35.46it/s] 85%|########4 | 22/26 [00:00<00:00, 37.52it/s]100%|##########| 26/26 [00:00<00:00, 32.94it/s]
Test: [   0/  26]	Loss 0.283 (0.283)	test_acc   0.86 (  0.86)	test_minacc   0.86 (  0.86)	test_majacc   0.86 (  0.86)	Loss_d 0.283 (0.283)	test_acc_d   0.86 (  0.86)	test_minacc_d   0.86 (  0.86)	test_majacc_d   0.86 (  0.86)	test_corr_d   0.71 (  0.71)
Test: [  10/  26]	Loss 0.266 (0.272)	test_acc   0.87 (  0.86)	test_minacc   0.86 (  0.85)	test_majacc   0.87 (  0.87)	Loss_d 0.266 (0.272)	test_acc_d   0.87 (  0.86)	test_minacc_d   0.86 (  0.85)	test_majacc_d   0.87 (  0.87)	test_corr_d   0.70 (  0.69)
Test: [  20/  26]	Loss 0.307 (0.279)	test_acc   0.84 (  0.86)	test_minacc   0.78 (  0.84)	test_majacc   0.84 (  0.86)	Loss_d 0.307 (0.279)	test_acc_d   0.84 (  0.86)	test_minacc_d   0.78 (  0.84)	test_majacc_d   0.84 (  0.86)	test_corr_d   0.72 (  0.69)
Test: [  26/  26]	Loss 0.290 (0.283)	test_acc   0.84 (  0.86)	test_minacc   0.84 (  0.83)	test_majacc   0.84 (  0.86)	Loss_d 0.290 (0.283)	test_acc_d   0.84 (  0.86)	test_minacc_d   0.84 (  0.83)	test_majacc_d   0.84 (  0.86)	test_corr_d   0.67 (  0.69)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 60.32it/s]
Test: [  0/  1]	Loss 1.644 (1.644)	test_acc   0.56 (  0.56)	test_minacc   0.53 (  0.53)	test_majacc   0.84 (  0.84)	Loss_d 1.644 (1.644)	test_acc_d   0.56 (  0.56)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.84 (  0.84)	test_corr_d   0.24 (  0.24)
Test: [  1/  1]	Loss 1.644 (1.644)	test_acc   0.56 (  0.56)	test_minacc   0.53 (  0.53)	test_majacc   0.84 (  0.84)	Loss_d 1.644 (1.644)	test_acc_d   0.56 (  0.56)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.84 (  0.84)	test_corr_d   0.24 (  0.24)
Overall Timing[ 18/  1]	epoch_time 0.0421 (0.0442)	validation_time 0.0004 (0.0008)	train_time 0.0417 (0.0432)
record: (train_acc, test_acc) (0.8482000235915184, 0.5720000267028809)
last accs (train_acc, test_acc) (0.8587000185251236, 0.5610000491142273)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.31it/s] 19%|#9        | 5/26 [00:00<00:00, 22.98it/s] 35%|###4      | 9/26 [00:00<00:00, 29.47it/s] 50%|#####     | 13/26 [00:00<00:00, 32.93it/s] 69%|######9   | 18/26 [00:00<00:00, 36.03it/s] 88%|########8 | 23/26 [00:00<00:00, 37.21it/s]100%|##########| 26/26 [00:00<00:00, 30.77it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 494 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 495 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 496 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 497 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 498 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 499 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 500 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 501 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 502 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 503 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 504 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 505 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 506 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 507 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 508 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 509 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 510 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 511 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 512 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 513 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 514 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 515 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 516 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 517 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 518 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 519 400
penalty weights 10000.0
Epoch: [19][  26/  26]	Loss 0.001 (0.001)	train_nll   0.28 (  0.31)	train_penalty   0.00 (  0.00)	weight_norm  24.57 ( 24.57)	train_acc   0.85 (  0.84)	train_minacc   0.80 (  0.84)	train_majacc   0.86 (  0.84)	train_corr   0.00 (  0.00)	l1 6.6083 (6.8750)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.52it/s] 15%|#5        | 4/26 [00:00<00:01, 13.88it/s] 35%|###4      | 9/26 [00:00<00:00, 26.19it/s]                                               35%|###4      | 9/26 [00:00<00:00, 26.19it/s] 54%|#####3    | 14/26 [00:00<00:00, 33.66it/s] 77%|#######6  | 20/26 [00:00<00:00, 38.77it/s]                                                77%|#######6  | 20/26 [00:00<00:00, 38.77it/s]100%|##########| 26/26 [00:00<00:00, 44.11it/s]100%|##########| 26/26 [00:00<00:00, 31.71it/s]
Test: [   0/  26]	Loss 0.267 (0.267)	test_acc   0.87 (  0.87)	test_minacc   0.84 (  0.84)	test_majacc   0.87 (  0.87)	Loss_d 0.267 (0.267)	test_acc_d   0.87 (  0.87)	test_minacc_d   0.84 (  0.84)	test_majacc_d   0.87 (  0.87)	test_corr_d   0.76 (  0.76)
Test: [  10/  26]	Loss 0.246 (0.260)	test_acc   0.88 (  0.88)	test_minacc   0.84 (  0.83)	test_majacc   0.89 (  0.89)	Loss_d 0.246 (0.260)	test_acc_d   0.88 (  0.88)	test_minacc_d   0.84 (  0.83)	test_majacc_d   0.89 (  0.89)	test_corr_d   0.75 (  0.74)
Test: [  20/  26]	Loss 0.281 (0.261)	test_acc   0.87 (  0.88)	test_minacc   0.74 (  0.81)	test_majacc   0.89 (  0.89)	Loss_d 0.281 (0.261)	test_acc_d   0.87 (  0.88)	test_minacc_d   0.74 (  0.81)	test_majacc_d   0.89 (  0.89)	test_corr_d   0.76 (  0.74)
Test: [  26/  26]	Loss 0.281 (0.265)	test_acc   0.85 (  0.87)	test_minacc   0.80 (  0.81)	test_majacc   0.86 (  0.89)	Loss_d 0.281 (0.265)	test_acc_d   0.85 (  0.87)	test_minacc_d   0.80 (  0.81)	test_majacc_d   0.86 (  0.89)	test_corr_d   0.72 (  0.74)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 59.73it/s]
Test: [  0/  1]	Loss 1.793 (1.793)	test_acc   0.53 (  0.53)	test_minacc   0.49 (  0.49)	test_majacc   0.87 (  0.87)	Loss_d 1.793 (1.793)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.49 (  0.49)	test_majacc_d   0.87 (  0.87)	test_corr_d   0.36 (  0.36)
Test: [  1/  1]	Loss 1.793 (1.793)	test_acc   0.53 (  0.53)	test_minacc   0.49 (  0.49)	test_majacc   0.87 (  0.87)	Loss_d 1.793 (1.793)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.49 (  0.49)	test_majacc_d   0.87 (  0.87)	test_corr_d   0.36 (  0.36)
Overall Timing[ 19/  1]	epoch_time 0.0439 (0.0442)	validation_time 0.0005 (0.0007)	train_time 0.0433 (0.0432)
record: (train_acc, test_acc) (0.8482000235915184, 0.5720000267028809)
last accs (train_acc, test_acc) (0.8744000224471092, 0.5300000309944153)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.77it/s] 15%|#5        | 4/26 [00:00<00:01, 15.22it/s] 31%|###       | 8/26 [00:00<00:00, 23.90it/s] 46%|####6     | 12/26 [00:00<00:00, 28.30it/s] 62%|######1   | 16/26 [00:00<00:00, 31.17it/s] 77%|#######6  | 20/26 [00:00<00:00, 32.78it/s] 92%|#########2| 24/26 [00:00<00:00, 33.65it/s]100%|##########| 26/26 [00:00<00:00, 26.94it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 520 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 521 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 522 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 523 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 524 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 525 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 526 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 527 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 528 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 529 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 530 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 531 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 532 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 533 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 534 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 535 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 536 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 537 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 538 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 539 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 540 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 541 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 542 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 543 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 544 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 545 400
penalty weights 10000.0
Epoch: [20][  26/  26]	Loss 0.001 (0.002)	train_nll   0.30 (  0.29)	train_penalty   0.00 (  0.00)	weight_norm  24.59 ( 24.58)	train_acc   0.85 (  0.85)	train_minacc   0.80 (  0.82)	train_majacc   0.86 (  0.85)	train_corr   0.00 (  0.00)	l1 7.1210 (7.1015)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.20it/s] 23%|##3       | 6/26 [00:00<00:00, 23.90it/s]                                               23%|##3       | 6/26 [00:00<00:00, 23.90it/s] 42%|####2     | 11/26 [00:00<00:00, 31.71it/s] 62%|######1   | 16/26 [00:00<00:00, 37.21it/s]                                                62%|######1   | 16/26 [00:00<00:00, 37.21it/s] 81%|########  | 21/26 [00:00<00:00, 36.89it/s]100%|##########| 26/26 [00:00<00:00, 40.39it/s]100%|##########| 26/26 [00:00<00:00, 31.29it/s]
Test: [   0/  26]	Loss 0.282 (0.282)	test_acc   0.86 (  0.86)	test_minacc   0.86 (  0.86)	test_majacc   0.86 (  0.86)	Loss_d 0.282 (0.282)	test_acc_d   0.86 (  0.86)	test_minacc_d   0.86 (  0.86)	test_majacc_d   0.86 (  0.86)	test_corr_d   0.74 (  0.74)
Test: [  10/  26]	Loss 0.255 (0.276)	test_acc   0.86 (  0.86)	test_minacc   0.82 (  0.83)	test_majacc   0.87 (  0.87)	Loss_d 0.255 (0.276)	test_acc_d   0.86 (  0.86)	test_minacc_d   0.82 (  0.83)	test_majacc_d   0.87 (  0.87)	test_corr_d   0.73 (  0.72)
Test: [  20/  26]	Loss 0.274 (0.269)	test_acc   0.86 (  0.87)	test_minacc   0.76 (  0.82)	test_majacc   0.88 (  0.87)	Loss_d 0.274 (0.269)	test_acc_d   0.86 (  0.87)	test_minacc_d   0.76 (  0.82)	test_majacc_d   0.88 (  0.87)	test_corr_d   0.75 (  0.73)
Test: [  26/  26]	Loss 0.286 (0.271)	test_acc   0.86 (  0.87)	test_minacc   0.82 (  0.81)	test_majacc   0.86 (  0.87)	Loss_d 0.286 (0.271)	test_acc_d   0.86 (  0.87)	test_minacc_d   0.82 (  0.81)	test_majacc_d   0.86 (  0.87)	test_corr_d   0.71 (  0.73)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.57it/s]
Test: [  0/  1]	Loss 1.942 (1.942)	test_acc   0.55 (  0.55)	test_minacc   0.52 (  0.52)	test_majacc   0.86 (  0.86)	Loss_d 1.942 (1.942)	test_acc_d   0.55 (  0.55)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.86 (  0.86)	test_corr_d   0.33 (  0.33)
Test: [  1/  1]	Loss 1.942 (1.942)	test_acc   0.55 (  0.55)	test_minacc   0.52 (  0.52)	test_majacc   0.86 (  0.86)	Loss_d 1.942 (1.942)	test_acc_d   0.55 (  0.55)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.86 (  0.86)	test_corr_d   0.33 (  0.33)
Overall Timing[ 20/  1]	epoch_time 0.0444 (0.0442)	validation_time 0.0005 (0.0007)	train_time 0.0440 (0.0432)
record: (train_acc, test_acc) (0.8482000235915184, 0.5720000267028809)
last accs (train_acc, test_acc) (0.8653000245690345, 0.5540000200271606)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 15.34it/s] 19%|#9        | 5/26 [00:00<00:00, 22.19it/s] 35%|###4      | 9/26 [00:00<00:00, 27.34it/s] 50%|#####     | 13/26 [00:00<00:00, 29.78it/s] 62%|######1   | 16/26 [00:00<00:00, 28.62it/s] 77%|#######6  | 20/26 [00:00<00:00, 30.76it/s] 92%|#########2| 24/26 [00:00<00:00, 32.21it/s]100%|##########| 26/26 [00:00<00:00, 27.65it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 546 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 547 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 548 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 549 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 550 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 551 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 552 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 553 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 554 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 555 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 556 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 557 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 558 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 559 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 560 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 561 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 562 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 563 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 564 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 565 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 566 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 567 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 568 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 569 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 570 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 571 400
penalty weights 10000.0
Epoch: [21][  26/  26]	Loss 0.001 (0.001)	train_nll   0.29 (  0.28)	train_penalty   0.00 (  0.00)	weight_norm  24.60 ( 24.59)	train_acc   0.84 (  0.86)	train_minacc   0.89 (  0.85)	train_majacc   0.83 (  0.86)	train_corr   0.00 (  0.00)	l1 7.8208 (7.2617)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 17.35it/s] 23%|##3       | 6/26 [00:00<00:00, 29.10it/s]                                               23%|##3       | 6/26 [00:00<00:00, 29.10it/s] 42%|####2     | 11/26 [00:00<00:00, 32.73it/s] 62%|######1   | 16/26 [00:00<00:00, 38.16it/s]                                                62%|######1   | 16/26 [00:00<00:00, 38.16it/s] 81%|########  | 21/26 [00:00<00:00, 40.67it/s]100%|##########| 26/26 [00:00<00:00, 43.17it/s]100%|##########| 26/26 [00:00<00:00, 35.10it/s]
Test: [   0/  26]	Loss 0.320 (0.320)	test_acc   0.82 (  0.82)	test_minacc   0.86 (  0.86)	test_majacc   0.81 (  0.81)	Loss_d 0.320 (0.320)	test_acc_d   0.82 (  0.82)	test_minacc_d   0.86 (  0.86)	test_majacc_d   0.81 (  0.81)	test_corr_d   0.66 (  0.66)
Test: [  10/  26]	Loss 0.312 (0.327)	test_acc   0.81 (  0.82)	test_minacc   0.82 (  0.84)	test_majacc   0.80 (  0.82)	Loss_d 0.312 (0.327)	test_acc_d   0.81 (  0.82)	test_minacc_d   0.82 (  0.84)	test_majacc_d   0.80 (  0.82)	test_corr_d   0.65 (  0.64)
Test: [  20/  26]	Loss 0.296 (0.317)	test_acc   0.83 (  0.82)	test_minacc   0.76 (  0.84)	test_majacc   0.83 (  0.82)	Loss_d 0.296 (0.317)	test_acc_d   0.83 (  0.82)	test_minacc_d   0.76 (  0.84)	test_majacc_d   0.83 (  0.82)	test_corr_d   0.69 (  0.65)
Test: [  26/  26]	Loss 0.290 (0.313)	test_acc   0.84 (  0.83)	test_minacc   0.89 (  0.84)	test_majacc   0.83 (  0.82)	Loss_d 0.290 (0.313)	test_acc_d   0.84 (  0.83)	test_minacc_d   0.89 (  0.84)	test_majacc_d   0.83 (  0.82)	test_corr_d   0.64 (  0.65)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.99it/s]
Test: [  0/  1]	Loss 2.055 (2.055)	test_acc   0.58 (  0.58)	test_minacc   0.55 (  0.55)	test_majacc   0.80 (  0.80)	Loss_d 2.055 (2.055)	test_acc_d   0.58 (  0.58)	test_minacc_d   0.55 (  0.55)	test_majacc_d   0.80 (  0.80)	test_corr_d   0.18 (  0.18)
Test: [  1/  1]	Loss 2.055 (2.055)	test_acc   0.58 (  0.58)	test_minacc   0.55 (  0.55)	test_majacc   0.80 (  0.80)	Loss_d 2.055 (2.055)	test_acc_d   0.58 (  0.58)	test_minacc_d   0.55 (  0.55)	test_majacc_d   0.80 (  0.80)	test_corr_d   0.18 (  0.18)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/151/checkpoints/model_best.pth
Overall Timing[ 21/  1]	epoch_time 0.0447 (0.0443)	validation_time 0.0004 (0.0007)	train_time 0.0443 (0.0433)
record: (train_acc, test_acc) (0.8271000250577927, 0.5770000219345093)
last accs (train_acc, test_acc) (0.8271000250577927, 0.5770000219345093)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:06,  3.74it/s] 19%|#9        | 5/26 [00:00<00:01, 15.92it/s] 35%|###4      | 9/26 [00:00<00:00, 23.15it/s] 50%|#####     | 13/26 [00:00<00:00, 27.64it/s] 65%|######5   | 17/26 [00:00<00:00, 30.25it/s] 81%|########  | 21/26 [00:00<00:00, 31.95it/s] 96%|#########6| 25/26 [00:00<00:00, 33.01it/s]100%|##########| 26/26 [00:01<00:00, 25.60it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 572 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 573 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 574 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 575 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 576 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 577 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 578 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 579 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 580 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 581 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 582 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 583 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 584 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 585 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 586 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 587 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 588 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 589 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 590 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 591 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 592 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 593 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 594 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 595 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 596 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 597 400
penalty weights 10000.0
Epoch: [22][  26/  26]	Loss 0.002 (0.001)	train_nll   0.27 (  0.29)	train_penalty   0.00 (  0.00)	weight_norm  24.61 ( 24.61)	train_acc   0.86 (  0.85)	train_minacc   0.93 (  0.85)	train_majacc   0.84 (  0.84)	train_corr   0.00 (  0.00)	l1 7.6467 (7.4310)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 14.74it/s] 35%|###4      | 9/26 [00:00<00:00, 36.12it/s]                                               35%|###4      | 9/26 [00:00<00:00, 36.12it/s] 54%|#####3    | 14/26 [00:00<00:00, 39.59it/s] 73%|#######3  | 19/26 [00:00<00:00, 41.82it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 41.82it/s] 92%|#########2| 24/26 [00:00<00:00, 43.81it/s]100%|##########| 26/26 [00:00<00:00, 36.33it/s]
Test: [   0/  26]	Loss 0.284 (0.284)	test_acc   0.84 (  0.84)	test_minacc   0.90 (  0.90)	test_majacc   0.83 (  0.83)	Loss_d 0.284 (0.284)	test_acc_d   0.84 (  0.84)	test_minacc_d   0.90 (  0.90)	test_majacc_d   0.83 (  0.83)	test_corr_d   0.68 (  0.68)
Test: [  10/  26]	Loss 0.304 (0.307)	test_acc   0.83 (  0.83)	test_minacc   0.84 (  0.87)	test_majacc   0.82 (  0.82)	Loss_d 0.304 (0.307)	test_acc_d   0.83 (  0.83)	test_minacc_d   0.84 (  0.87)	test_majacc_d   0.82 (  0.82)	test_corr_d   0.67 (  0.65)
Test: [  20/  26]	Loss 0.286 (0.308)	test_acc   0.83 (  0.83)	test_minacc   0.83 (  0.86)	test_majacc   0.83 (  0.82)	Loss_d 0.286 (0.308)	test_acc_d   0.83 (  0.83)	test_minacc_d   0.83 (  0.86)	test_majacc_d   0.83 (  0.82)	test_corr_d   0.69 (  0.66)
Test: [  26/  26]	Loss 0.271 (0.305)	test_acc   0.85 (  0.83)	test_minacc   0.93 (  0.86)	test_majacc   0.83 (  0.82)	Loss_d 0.271 (0.305)	test_acc_d   0.85 (  0.83)	test_minacc_d   0.93 (  0.86)	test_majacc_d   0.83 (  0.82)	test_corr_d   0.65 (  0.65)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.29it/s]
Test: [  0/  1]	Loss 2.027 (2.027)	test_acc   0.60 (  0.60)	test_minacc   0.57 (  0.57)	test_majacc   0.80 (  0.80)	Loss_d 2.027 (2.027)	test_acc_d   0.60 (  0.60)	test_minacc_d   0.57 (  0.57)	test_majacc_d   0.80 (  0.80)	test_corr_d   0.18 (  0.18)
Test: [  1/  1]	Loss 2.027 (2.027)	test_acc   0.60 (  0.60)	test_minacc   0.57 (  0.57)	test_majacc   0.80 (  0.80)	Loss_d 2.027 (2.027)	test_acc_d   0.60 (  0.60)	test_minacc_d   0.57 (  0.57)	test_majacc_d   0.80 (  0.80)	test_corr_d   0.18 (  0.18)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/151/checkpoints/model_best.pth
Overall Timing[ 22/  1]	epoch_time 0.0421 (0.0442)	validation_time 0.0004 (0.0007)	train_time 0.0418 (0.0432)
record: (train_acc, test_acc) (0.8291000253558158, 0.5960000157356262)
last accs (train_acc, test_acc) (0.8291000253558158, 0.5960000157356262)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:05,  4.66it/s] 19%|#9        | 5/26 [00:00<00:01, 17.66it/s] 35%|###4      | 9/26 [00:00<00:00, 23.94it/s] 50%|#####     | 13/26 [00:00<00:00, 27.57it/s] 65%|######5   | 17/26 [00:00<00:00, 30.05it/s] 81%|########  | 21/26 [00:00<00:00, 31.32it/s] 96%|#########6| 25/26 [00:00<00:00, 32.47it/s]100%|##########| 26/26 [00:00<00:00, 26.11it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 598 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 599 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 600 400
penalty weights 10000.0
l1 at pgd_anneal_iters 7.791280746459961
set z to 7.401716709136963
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 601 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 602 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 603 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 604 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 605 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 606 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 607 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 608 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 609 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 610 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 611 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 612 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 613 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 614 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 615 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 616 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 617 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 618 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 619 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 620 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 621 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 622 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 623 400
penalty weights 10000.0
Epoch: [23][  26/  26]	Loss 0.000 (0.001)	train_nll   0.28 (  0.30)	train_penalty   0.00 (  0.00)	weight_norm  24.61 ( 24.61)	train_acc   0.86 (  0.84)	train_minacc   0.89 (  0.85)	train_majacc   0.85 (  0.84)	train_corr   0.00 (  0.00)	l1 7.4987 (7.6604)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 16.81it/s] 27%|##6       | 7/26 [00:00<00:00, 33.56it/s]                                               27%|##6       | 7/26 [00:00<00:00, 33.56it/s] 46%|####6     | 12/26 [00:00<00:00, 39.71it/s] 65%|######5   | 17/26 [00:00<00:00, 41.95it/s]                                                65%|######5   | 17/26 [00:00<00:00, 41.95it/s] 85%|########4 | 22/26 [00:00<00:00, 40.79it/s]100%|##########| 26/26 [00:00<00:00, 37.88it/s]
Test: [   0/  26]	Loss 0.265 (0.265)	test_acc   0.86 (  0.86)	test_minacc   0.88 (  0.88)	test_majacc   0.86 (  0.86)	Loss_d 0.265 (0.265)	test_acc_d   0.86 (  0.86)	test_minacc_d   0.88 (  0.88)	test_majacc_d   0.86 (  0.86)	test_corr_d   0.72 (  0.72)
Test: [  10/  26]	Loss 0.267 (0.277)	test_acc   0.85 (  0.85)	test_minacc   0.91 (  0.87)	test_majacc   0.84 (  0.85)	Loss_d 0.267 (0.277)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.91 (  0.87)	test_majacc_d   0.84 (  0.85)	test_corr_d   0.71 (  0.70)
Test: [  20/  26]	Loss 0.272 (0.281)	test_acc   0.84 (  0.85)	test_minacc   0.83 (  0.86)	test_majacc   0.84 (  0.84)	Loss_d 0.272 (0.281)	test_acc_d   0.84 (  0.85)	test_minacc_d   0.83 (  0.86)	test_majacc_d   0.84 (  0.84)	test_corr_d   0.73 (  0.70)
Test: [  26/  26]	Loss 0.282 (0.282)	test_acc   0.86 (  0.85)	test_minacc   0.89 (  0.87)	test_majacc   0.85 (  0.84)	Loss_d 0.282 (0.282)	test_acc_d   0.86 (  0.85)	test_minacc_d   0.89 (  0.87)	test_majacc_d   0.85 (  0.84)	test_corr_d   0.68 (  0.70)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 65.17it/s]
Test: [  0/  1]	Loss 2.051 (2.051)	test_acc   0.58 (  0.58)	test_minacc   0.55 (  0.55)	test_majacc   0.84 (  0.84)	Loss_d 2.051 (2.051)	test_acc_d   0.58 (  0.58)	test_minacc_d   0.55 (  0.55)	test_majacc_d   0.84 (  0.84)	test_corr_d   0.26 (  0.26)
Test: [  1/  1]	Loss 2.051 (2.051)	test_acc   0.58 (  0.58)	test_minacc   0.55 (  0.55)	test_majacc   0.84 (  0.84)	Loss_d 2.051 (2.051)	test_acc_d   0.58 (  0.58)	test_minacc_d   0.55 (  0.55)	test_majacc_d   0.84 (  0.84)	test_corr_d   0.26 (  0.26)
Overall Timing[ 23/  1]	epoch_time 0.0433 (0.0441)	validation_time 0.0004 (0.0007)	train_time 0.0428 (0.0432)
record: (train_acc, test_acc) (0.8291000253558158, 0.5960000157356262)
last accs (train_acc, test_acc) (0.8472000291347503, 0.5790000557899475)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 13.69it/s] 23%|##3       | 6/26 [00:00<00:00, 25.52it/s] 38%|###8      | 10/26 [00:00<00:00, 29.75it/s] 54%|#####3    | 14/26 [00:00<00:00, 32.11it/s] 69%|######9   | 18/26 [00:00<00:00, 32.79it/s] 85%|########4 | 22/26 [00:00<00:00, 33.95it/s]100%|##########| 26/26 [00:00<00:00, 34.90it/s]100%|##########| 26/26 [00:00<00:00, 29.55it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 624 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 625 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 626 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 627 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 628 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 629 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 630 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 631 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 632 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 633 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 634 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 635 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 636 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 637 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 638 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 639 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 640 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 641 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 642 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 643 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 644 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 645 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 646 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 647 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 648 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 649 400
penalty weights 10000.0
Epoch: [24][  26/  26]	Loss 0.000 (0.000)	train_nll   0.29 (  0.29)	train_penalty   0.00 (  0.00)	weight_norm  24.62 ( 24.62)	train_acc   0.84 (  0.84)	train_minacc   0.89 (  0.87)	train_majacc   0.83 (  0.83)	train_corr   0.00 (  0.00)	l1 7.7148 (7.7396)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.95it/s]  8%|7         | 2/26 [00:00<00:03,  6.70it/s] 12%|#1        | 3/26 [00:00<00:03,  6.82it/s] 31%|###       | 8/26 [00:00<00:00, 19.81it/s]                                               31%|###       | 8/26 [00:00<00:00, 19.81it/s] 50%|#####     | 13/26 [00:00<00:00, 28.15it/s] 69%|######9   | 18/26 [00:00<00:00, 33.99it/s]                                                69%|######9   | 18/26 [00:00<00:00, 33.99it/s] 88%|########8 | 23/26 [00:00<00:00, 34.74it/s]100%|##########| 26/26 [00:01<00:00, 25.83it/s]
Test: [   0/  26]	Loss 0.280 (0.280)	test_acc   0.85 (  0.85)	test_minacc   0.88 (  0.88)	test_majacc   0.85 (  0.85)	Loss_d 0.280 (0.280)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.88 (  0.88)	test_majacc_d   0.85 (  0.85)	test_corr_d   0.72 (  0.72)
Test: [  10/  26]	Loss 0.264 (0.285)	test_acc   0.86 (  0.84)	test_minacc   0.89 (  0.86)	test_majacc   0.85 (  0.84)	Loss_d 0.264 (0.285)	test_acc_d   0.86 (  0.84)	test_minacc_d   0.89 (  0.86)	test_majacc_d   0.85 (  0.84)	test_corr_d   0.70 (  0.69)
Test: [  20/  26]	Loss 0.278 (0.284)	test_acc   0.85 (  0.84)	test_minacc   0.85 (  0.86)	test_majacc   0.85 (  0.84)	Loss_d 0.278 (0.284)	test_acc_d   0.85 (  0.84)	test_minacc_d   0.85 (  0.86)	test_majacc_d   0.85 (  0.84)	test_corr_d   0.73 (  0.69)
Test: [  26/  26]	Loss 0.289 (0.285)	test_acc   0.84 (  0.84)	test_minacc   0.89 (  0.86)	test_majacc   0.83 (  0.84)	Loss_d 0.289 (0.285)	test_acc_d   0.84 (  0.84)	test_minacc_d   0.89 (  0.86)	test_majacc_d   0.83 (  0.84)	test_corr_d   0.68 (  0.69)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.74it/s]
Test: [  0/  1]	Loss 2.116 (2.116)	test_acc   0.58 (  0.58)	test_minacc   0.55 (  0.55)	test_majacc   0.84 (  0.84)	Loss_d 2.116 (2.116)	test_acc_d   0.58 (  0.58)	test_minacc_d   0.55 (  0.55)	test_majacc_d   0.84 (  0.84)	test_corr_d   0.26 (  0.26)
Test: [  1/  1]	Loss 2.116 (2.116)	test_acc   0.58 (  0.58)	test_minacc   0.55 (  0.55)	test_majacc   0.84 (  0.84)	Loss_d 2.116 (2.116)	test_acc_d   0.58 (  0.58)	test_minacc_d   0.55 (  0.55)	test_majacc_d   0.84 (  0.84)	test_corr_d   0.26 (  0.26)
Overall Timing[ 24/  1]	epoch_time 0.0471 (0.0442)	validation_time 0.0003 (0.0007)	train_time 0.0467 (0.0433)
record: (train_acc, test_acc) (0.8291000253558158, 0.5960000157356262)
last accs (train_acc, test_acc) (0.8433000217676163, 0.5770000219345093)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.85it/s] 19%|#9        | 5/26 [00:00<00:00, 22.14it/s] 35%|###4      | 9/26 [00:00<00:00, 26.88it/s] 50%|#####     | 13/26 [00:00<00:00, 30.30it/s] 65%|######5   | 17/26 [00:00<00:00, 31.54it/s] 81%|########  | 21/26 [00:00<00:00, 32.52it/s] 96%|#########6| 25/26 [00:00<00:00, 33.03it/s]100%|##########| 26/26 [00:00<00:00, 27.92it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 650 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 651 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 652 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 653 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 654 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 655 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 656 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 657 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 658 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 659 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 660 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 661 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 662 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 663 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 664 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 665 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 666 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 667 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 668 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 669 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 670 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 671 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 672 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 673 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 674 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 675 400
penalty weights 10000.0
Epoch: [25][  26/  26]	Loss 0.000 (0.000)	train_nll   0.29 (  0.28)	train_penalty   0.00 (  0.00)	weight_norm  24.62 ( 24.62)	train_acc   0.86 (  0.84)	train_minacc   0.93 (  0.87)	train_majacc   0.84 (  0.84)	train_corr   0.00 (  0.00)	l1 7.8548 (7.6691)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:10,  2.31it/s] 23%|##3       | 6/26 [00:00<00:01, 14.00it/s]                                               23%|##3       | 6/26 [00:00<00:01, 14.00it/s] 42%|####2     | 11/26 [00:00<00:00, 22.73it/s] 62%|######1   | 16/26 [00:00<00:00, 29.71it/s]                                                62%|######1   | 16/26 [00:00<00:00, 29.71it/s] 81%|########  | 21/26 [00:00<00:00, 31.55it/s]100%|##########| 26/26 [00:00<00:00, 35.77it/s]100%|##########| 26/26 [00:01<00:00, 24.60it/s]
Test: [   0/  26]	Loss 0.293 (0.293)	test_acc   0.84 (  0.84)	test_minacc   0.88 (  0.88)	test_majacc   0.84 (  0.84)	Loss_d 0.293 (0.293)	test_acc_d   0.84 (  0.84)	test_minacc_d   0.88 (  0.88)	test_majacc_d   0.84 (  0.84)	test_corr_d   0.69 (  0.69)
Test: [  10/  26]	Loss 0.281 (0.299)	test_acc   0.84 (  0.83)	test_minacc   0.89 (  0.86)	test_majacc   0.83 (  0.83)	Loss_d 0.281 (0.299)	test_acc_d   0.84 (  0.83)	test_minacc_d   0.89 (  0.86)	test_majacc_d   0.83 (  0.83)	test_corr_d   0.68 (  0.67)
Test: [  20/  26]	Loss 0.286 (0.298)	test_acc   0.84 (  0.83)	test_minacc   0.87 (  0.86)	test_majacc   0.83 (  0.83)	Loss_d 0.286 (0.298)	test_acc_d   0.84 (  0.83)	test_minacc_d   0.87 (  0.86)	test_majacc_d   0.83 (  0.83)	test_corr_d   0.71 (  0.67)
Test: [  26/  26]	Loss 0.288 (0.296)	test_acc   0.86 (  0.84)	test_minacc   0.93 (  0.87)	test_majacc   0.84 (  0.83)	Loss_d 0.288 (0.296)	test_acc_d   0.86 (  0.84)	test_minacc_d   0.93 (  0.87)	test_majacc_d   0.84 (  0.83)	test_corr_d   0.66 (  0.67)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 57.42it/s]
Test: [  0/  1]	Loss 2.124 (2.124)	test_acc   0.59 (  0.59)	test_minacc   0.57 (  0.57)	test_majacc   0.79 (  0.79)	Loss_d 2.124 (2.124)	test_acc_d   0.59 (  0.59)	test_minacc_d   0.57 (  0.57)	test_majacc_d   0.79 (  0.79)	test_corr_d   0.21 (  0.21)
Test: [  1/  1]	Loss 2.124 (2.124)	test_acc   0.59 (  0.59)	test_minacc   0.57 (  0.57)	test_majacc   0.79 (  0.79)	Loss_d 2.124 (2.124)	test_acc_d   0.59 (  0.59)	test_minacc_d   0.57 (  0.57)	test_majacc_d   0.79 (  0.79)	test_corr_d   0.21 (  0.21)
Overall Timing[ 25/  1]	epoch_time 0.0472 (0.0444)	validation_time 0.0005 (0.0007)	train_time 0.0467 (0.0435)
record: (train_acc, test_acc) (0.8291000253558158, 0.5960000157356262)
last accs (train_acc, test_acc) (0.8356000250577926, 0.5879999995231628)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 16.23it/s] 23%|##3       | 6/26 [00:00<00:00, 26.20it/s] 38%|###8      | 10/26 [00:00<00:00, 30.60it/s] 54%|#####3    | 14/26 [00:00<00:00, 32.96it/s] 69%|######9   | 18/26 [00:00<00:00, 34.19it/s] 85%|########4 | 22/26 [00:00<00:00, 34.98it/s]100%|##########| 26/26 [00:00<00:00, 35.31it/s]100%|##########| 26/26 [00:00<00:00, 30.34it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 676 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 677 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 678 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 679 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 680 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 681 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 682 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 683 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 684 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 685 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 686 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 687 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 688 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 689 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 690 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 691 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 692 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 693 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 694 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 695 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 696 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 697 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 698 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 699 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 700 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 701 400
penalty weights 10000.0
Epoch: [26][  26/  26]	Loss 0.000 (0.000)	train_nll   0.27 (  0.29)	train_penalty   0.00 (  0.00)	weight_norm  24.62 ( 24.62)	train_acc   0.88 (  0.84)	train_minacc   0.93 (  0.86)	train_majacc   0.87 (  0.84)	train_corr   0.00 (  0.00)	l1 7.6866 (7.6912)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.63it/s] 23%|##3       | 6/26 [00:00<00:00, 30.73it/s]                                               23%|##3       | 6/26 [00:00<00:00, 30.73it/s] 42%|####2     | 11/26 [00:00<00:00, 36.88it/s] 62%|######1   | 16/26 [00:00<00:00, 40.79it/s]                                                62%|######1   | 16/26 [00:00<00:00, 40.79it/s] 81%|########  | 21/26 [00:00<00:00, 39.82it/s]100%|##########| 26/26 [00:00<00:00, 36.11it/s]
Test: [   0/  26]	Loss 0.274 (0.274)	test_acc   0.86 (  0.86)	test_minacc   0.90 (  0.90)	test_majacc   0.85 (  0.85)	Loss_d 0.274 (0.274)	test_acc_d   0.86 (  0.86)	test_minacc_d   0.90 (  0.90)	test_majacc_d   0.85 (  0.85)	test_corr_d   0.71 (  0.71)
Test: [  10/  26]	Loss 0.278 (0.287)	test_acc   0.84 (  0.84)	test_minacc   0.89 (  0.87)	test_majacc   0.83 (  0.84)	Loss_d 0.278 (0.287)	test_acc_d   0.84 (  0.84)	test_minacc_d   0.89 (  0.87)	test_majacc_d   0.83 (  0.84)	test_corr_d   0.69 (  0.68)
Test: [  20/  26]	Loss 0.278 (0.290)	test_acc   0.84 (  0.84)	test_minacc   0.80 (  0.86)	test_majacc   0.85 (  0.83)	Loss_d 0.278 (0.290)	test_acc_d   0.84 (  0.84)	test_minacc_d   0.80 (  0.86)	test_majacc_d   0.85 (  0.83)	test_corr_d   0.72 (  0.68)
Test: [  26/  26]	Loss 0.274 (0.289)	test_acc   0.88 (  0.84)	test_minacc   0.93 (  0.87)	test_majacc   0.87 (  0.83)	Loss_d 0.274 (0.289)	test_acc_d   0.88 (  0.84)	test_minacc_d   0.93 (  0.87)	test_majacc_d   0.87 (  0.83)	test_corr_d   0.68 (  0.68)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.79it/s]
Test: [  0/  1]	Loss 2.089 (2.089)	test_acc   0.58 (  0.58)	test_minacc   0.56 (  0.56)	test_majacc   0.82 (  0.82)	Loss_d 2.089 (2.089)	test_acc_d   0.58 (  0.58)	test_minacc_d   0.56 (  0.56)	test_majacc_d   0.82 (  0.82)	test_corr_d   0.23 (  0.23)
Test: [  1/  1]	Loss 2.089 (2.089)	test_acc   0.58 (  0.58)	test_minacc   0.56 (  0.56)	test_majacc   0.82 (  0.82)	Loss_d 2.089 (2.089)	test_acc_d   0.58 (  0.58)	test_minacc_d   0.56 (  0.56)	test_majacc_d   0.82 (  0.82)	test_corr_d   0.23 (  0.23)
Overall Timing[ 26/  1]	epoch_time 0.0396 (0.0442)	validation_time 0.0004 (0.0007)	train_time 0.0391 (0.0433)
record: (train_acc, test_acc) (0.8291000253558158, 0.5960000157356262)
last accs (train_acc, test_acc) (0.8394000270366668, 0.5830000042915344)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:05,  4.97it/s] 19%|#9        | 5/26 [00:00<00:01, 17.95it/s] 35%|###4      | 9/26 [00:00<00:00, 23.87it/s] 50%|#####     | 13/26 [00:00<00:00, 27.78it/s] 65%|######5   | 17/26 [00:00<00:00, 29.92it/s] 81%|########  | 21/26 [00:00<00:00, 31.28it/s] 96%|#########6| 25/26 [00:00<00:00, 32.51it/s]100%|##########| 26/26 [00:00<00:00, 26.27it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 702 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 703 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 704 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 705 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 706 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 707 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 708 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 709 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 710 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 711 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 712 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 713 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 714 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 715 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 716 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 717 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 718 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 719 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 720 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 721 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 722 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 723 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 724 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 725 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 726 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 727 400
penalty weights 10000.0
Epoch: [27][  26/  26]	Loss 0.000 (0.000)	train_nll   0.28 (  0.29)	train_penalty   0.00 (  0.00)	weight_norm  24.62 ( 24.62)	train_acc   0.86 (  0.84)	train_minacc   0.91 (  0.86)	train_majacc   0.85 (  0.83)	train_corr   0.00 (  0.00)	l1 7.6799 (7.7550)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  6.13it/s] 23%|##3       | 6/26 [00:00<00:00, 25.77it/s]                                               23%|##3       | 6/26 [00:00<00:00, 25.77it/s] 42%|####2     | 11/26 [00:00<00:00, 33.90it/s] 62%|######1   | 16/26 [00:00<00:00, 38.10it/s]                                                62%|######1   | 16/26 [00:00<00:00, 38.10it/s] 81%|########  | 21/26 [00:00<00:00, 40.74it/s]100%|##########| 26/26 [00:00<00:00, 42.93it/s]100%|##########| 26/26 [00:00<00:00, 33.71it/s]
Test: [   0/  26]	Loss 0.271 (0.271)	test_acc   0.86 (  0.86)	test_minacc   0.88 (  0.88)	test_majacc   0.86 (  0.86)	Loss_d 0.271 (0.271)	test_acc_d   0.86 (  0.86)	test_minacc_d   0.88 (  0.88)	test_majacc_d   0.86 (  0.86)	test_corr_d   0.72 (  0.72)
Test: [  10/  26]	Loss 0.267 (0.281)	test_acc   0.85 (  0.85)	test_minacc   0.89 (  0.87)	test_majacc   0.84 (  0.84)	Loss_d 0.267 (0.281)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.89 (  0.87)	test_majacc_d   0.84 (  0.84)	test_corr_d   0.70 (  0.69)
Test: [  20/  26]	Loss 0.273 (0.283)	test_acc   0.84 (  0.84)	test_minacc   0.80 (  0.86)	test_majacc   0.84 (  0.84)	Loss_d 0.273 (0.283)	test_acc_d   0.84 (  0.84)	test_minacc_d   0.80 (  0.86)	test_majacc_d   0.84 (  0.84)	test_corr_d   0.73 (  0.70)
Test: [  26/  26]	Loss 0.280 (0.283)	test_acc   0.86 (  0.84)	test_minacc   0.91 (  0.86)	test_majacc   0.85 (  0.84)	Loss_d 0.280 (0.283)	test_acc_d   0.86 (  0.84)	test_minacc_d   0.91 (  0.86)	test_majacc_d   0.85 (  0.84)	test_corr_d   0.68 (  0.69)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 60.38it/s]
Test: [  0/  1]	Loss 2.116 (2.116)	test_acc   0.58 (  0.58)	test_minacc   0.55 (  0.55)	test_majacc   0.83 (  0.83)	Loss_d 2.116 (2.116)	test_acc_d   0.58 (  0.58)	test_minacc_d   0.55 (  0.55)	test_majacc_d   0.83 (  0.83)	test_corr_d   0.26 (  0.26)
Test: [  1/  1]	Loss 2.116 (2.116)	test_acc   0.58 (  0.58)	test_minacc   0.55 (  0.55)	test_majacc   0.83 (  0.83)	Loss_d 2.116 (2.116)	test_acc_d   0.58 (  0.58)	test_minacc_d   0.55 (  0.55)	test_majacc_d   0.83 (  0.83)	test_corr_d   0.26 (  0.26)
Overall Timing[ 27/  1]	epoch_time 0.0391 (0.0440)	validation_time 0.0005 (0.0007)	train_time 0.0386 (0.0431)
record: (train_acc, test_acc) (0.8291000253558158, 0.5960000157356262)
last accs (train_acc, test_acc) (0.8449000256657601, 0.5770000219345093)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 18.33it/s] 23%|##3       | 6/26 [00:00<00:00, 29.23it/s] 38%|###8      | 10/26 [00:00<00:00, 32.14it/s] 54%|#####3    | 14/26 [00:00<00:00, 33.35it/s] 69%|######9   | 18/26 [00:00<00:00, 34.08it/s] 85%|########4 | 22/26 [00:00<00:00, 34.89it/s]100%|##########| 26/26 [00:00<00:00, 35.51it/s]100%|##########| 26/26 [00:00<00:00, 31.18it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 728 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 729 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 730 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 731 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 732 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 733 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 734 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 735 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 736 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 737 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 738 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 739 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 740 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 741 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 742 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 743 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 744 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 745 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 746 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 747 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 748 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 749 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 750 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 751 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 752 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 753 400
penalty weights 10000.0
Epoch: [28][  26/  26]	Loss 0.000 (0.000)	train_nll   0.28 (  0.29)	train_penalty   0.00 (  0.00)	weight_norm  24.62 ( 24.62)	train_acc   0.86 (  0.84)	train_minacc   0.93 (  0.87)	train_majacc   0.84 (  0.84)	train_corr   0.00 (  0.00)	l1 7.7930 (7.7635)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.82it/s] 23%|##3       | 6/26 [00:00<00:00, 24.43it/s]                                               23%|##3       | 6/26 [00:00<00:00, 24.43it/s] 42%|####2     | 11/26 [00:00<00:00, 32.98it/s] 62%|######1   | 16/26 [00:00<00:00, 38.38it/s]                                                62%|######1   | 16/26 [00:00<00:00, 38.38it/s] 81%|########  | 21/26 [00:00<00:00, 39.02it/s]100%|##########| 26/26 [00:00<00:00, 41.96it/s]100%|##########| 26/26 [00:00<00:00, 32.79it/s]
Test: [   0/  26]	Loss 0.280 (0.280)	test_acc   0.85 (  0.85)	test_minacc   0.88 (  0.88)	test_majacc   0.85 (  0.85)	Loss_d 0.280 (0.280)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.88 (  0.88)	test_majacc_d   0.85 (  0.85)	test_corr_d   0.71 (  0.71)
Test: [  10/  26]	Loss 0.270 (0.287)	test_acc   0.85 (  0.84)	test_minacc   0.89 (  0.87)	test_majacc   0.84 (  0.84)	Loss_d 0.270 (0.287)	test_acc_d   0.85 (  0.84)	test_minacc_d   0.89 (  0.87)	test_majacc_d   0.84 (  0.84)	test_corr_d   0.70 (  0.69)
Test: [  20/  26]	Loss 0.277 (0.287)	test_acc   0.84 (  0.84)	test_minacc   0.85 (  0.86)	test_majacc   0.84 (  0.84)	Loss_d 0.277 (0.287)	test_acc_d   0.84 (  0.84)	test_minacc_d   0.85 (  0.86)	test_majacc_d   0.84 (  0.84)	test_corr_d   0.72 (  0.69)
Test: [  26/  26]	Loss 0.284 (0.287)	test_acc   0.86 (  0.84)	test_minacc   0.93 (  0.87)	test_majacc   0.84 (  0.84)	Loss_d 0.284 (0.287)	test_acc_d   0.86 (  0.84)	test_minacc_d   0.93 (  0.87)	test_majacc_d   0.84 (  0.84)	test_corr_d   0.68 (  0.69)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.76it/s]
Test: [  0/  1]	Loss 2.139 (2.139)	test_acc   0.58 (  0.58)	test_minacc   0.55 (  0.55)	test_majacc   0.83 (  0.83)	Loss_d 2.139 (2.139)	test_acc_d   0.58 (  0.58)	test_minacc_d   0.55 (  0.55)	test_majacc_d   0.83 (  0.83)	test_corr_d   0.25 (  0.25)
Test: [  1/  1]	Loss 2.139 (2.139)	test_acc   0.58 (  0.58)	test_minacc   0.55 (  0.55)	test_majacc   0.83 (  0.83)	Loss_d 2.139 (2.139)	test_acc_d   0.58 (  0.58)	test_minacc_d   0.55 (  0.55)	test_majacc_d   0.83 (  0.83)	test_corr_d   0.25 (  0.25)
Overall Timing[ 28/  1]	epoch_time 0.0442 (0.0440)	validation_time 0.0003 (0.0006)	train_time 0.0438 (0.0432)
record: (train_acc, test_acc) (0.8291000253558158, 0.5960000157356262)
last accs (train_acc, test_acc) (0.841300025999546, 0.581000030040741)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.18it/s] 19%|#9        | 5/26 [00:00<00:00, 24.72it/s] 35%|###4      | 9/26 [00:00<00:00, 29.23it/s] 50%|#####     | 13/26 [00:00<00:00, 31.06it/s] 65%|######5   | 17/26 [00:00<00:00, 32.45it/s] 81%|########  | 21/26 [00:00<00:00, 33.43it/s] 96%|#########6| 25/26 [00:00<00:00, 34.59it/s]100%|##########| 26/26 [00:00<00:00, 29.45it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 754 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 755 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 756 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 757 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 758 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 759 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 760 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 761 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 762 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 763 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 764 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 765 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 766 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 767 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 768 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 769 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 770 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 771 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 772 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 773 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 774 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 775 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 776 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 777 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 778 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 779 400
penalty weights 10000.0
Epoch: [29][  26/  26]	Loss 0.000 (0.000)	train_nll   0.28 (  0.29)	train_penalty   0.00 (  0.00)	weight_norm  24.62 ( 24.62)	train_acc   0.86 (  0.84)	train_minacc   0.93 (  0.87)	train_majacc   0.84 (  0.84)	train_corr   0.00 (  0.00)	l1 7.7984 (7.7414)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.47it/s]  8%|7         | 2/26 [00:00<00:02,  8.11it/s] 27%|##6       | 7/26 [00:00<00:00, 23.66it/s]                                               27%|##6       | 7/26 [00:00<00:00, 23.66it/s] 46%|####6     | 12/26 [00:00<00:00, 31.79it/s] 65%|######5   | 17/26 [00:00<00:00, 36.42it/s]                                                65%|######5   | 17/26 [00:00<00:00, 36.42it/s] 85%|########4 | 22/26 [00:00<00:00, 38.04it/s]100%|##########| 26/26 [00:00<00:00, 30.32it/s]
Test: [   0/  26]	Loss 0.280 (0.280)	test_acc   0.85 (  0.85)	test_minacc   0.88 (  0.88)	test_majacc   0.85 (  0.85)	Loss_d 0.280 (0.280)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.88 (  0.88)	test_majacc_d   0.85 (  0.85)	test_corr_d   0.71 (  0.71)
Test: [  10/  26]	Loss 0.277 (0.290)	test_acc   0.84 (  0.84)	test_minacc   0.89 (  0.87)	test_majacc   0.83 (  0.83)	Loss_d 0.277 (0.290)	test_acc_d   0.84 (  0.84)	test_minacc_d   0.89 (  0.87)	test_majacc_d   0.83 (  0.83)	test_corr_d   0.69 (  0.68)
Test: [  20/  26]	Loss 0.279 (0.291)	test_acc   0.84 (  0.84)	test_minacc   0.83 (  0.86)	test_majacc   0.84 (  0.83)	Loss_d 0.279 (0.291)	test_acc_d   0.84 (  0.84)	test_minacc_d   0.83 (  0.86)	test_majacc_d   0.84 (  0.83)	test_corr_d   0.72 (  0.68)
Test: [  26/  26]	Loss 0.281 (0.290)	test_acc   0.86 (  0.84)	test_minacc   0.93 (  0.87)	test_majacc   0.84 (  0.83)	Loss_d 0.281 (0.290)	test_acc_d   0.86 (  0.84)	test_minacc_d   0.93 (  0.87)	test_majacc_d   0.84 (  0.83)	test_corr_d   0.67 (  0.68)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.83it/s]
Test: [  0/  1]	Loss 2.128 (2.128)	test_acc   0.58 (  0.58)	test_minacc   0.56 (  0.56)	test_majacc   0.81 (  0.81)	Loss_d 2.128 (2.128)	test_acc_d   0.58 (  0.58)	test_minacc_d   0.56 (  0.56)	test_majacc_d   0.81 (  0.81)	test_corr_d   0.24 (  0.24)
Test: [  1/  1]	Loss 2.128 (2.128)	test_acc   0.58 (  0.58)	test_minacc   0.56 (  0.56)	test_majacc   0.81 (  0.81)	Loss_d 2.128 (2.128)	test_acc_d   0.58 (  0.58)	test_minacc_d   0.56 (  0.56)	test_majacc_d   0.81 (  0.81)	test_corr_d   0.24 (  0.24)
Overall Timing[ 29/  1]	epoch_time 0.0395 (0.0439)	validation_time 0.0003 (0.0006)	train_time 0.0392 (0.0430)
record: (train_acc, test_acc) (0.8291000253558158, 0.5960000157356262)
last accs (train_acc, test_acc) (0.8388000295162201, 0.5820000171661377)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.78it/s] 19%|#9        | 5/26 [00:00<00:01, 20.80it/s] 35%|###4      | 9/26 [00:00<00:00, 26.62it/s] 50%|#####     | 13/26 [00:00<00:00, 29.83it/s] 65%|######5   | 17/26 [00:00<00:00, 31.77it/s] 81%|########  | 21/26 [00:00<00:00, 32.49it/s] 96%|#########6| 25/26 [00:00<00:00, 33.51it/s]100%|##########| 26/26 [00:00<00:00, 28.01it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 780 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 781 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 782 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 783 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 784 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 785 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 786 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 787 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 788 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 789 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 790 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 791 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 792 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 793 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 794 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 795 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 796 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 797 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 798 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 799 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 800 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 801 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 802 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 803 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 804 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 805 400
penalty weights 10000.0
Epoch: [30][  26/  26]	Loss 0.000 (0.000)	train_nll   0.28 (  0.29)	train_penalty   0.00 (  0.00)	weight_norm  24.62 ( 24.62)	train_acc   0.87 (  0.84)	train_minacc   0.93 (  0.86)	train_majacc   0.86 (  0.84)	train_corr   0.00 (  0.00)	l1 7.7377 (7.7544)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.39it/s] 23%|##3       | 6/26 [00:00<00:00, 31.02it/s]                                               23%|##3       | 6/26 [00:00<00:00, 31.02it/s] 42%|####2     | 11/26 [00:00<00:00, 37.60it/s] 62%|######1   | 16/26 [00:00<00:00, 41.67it/s]                                                62%|######1   | 16/26 [00:00<00:00, 41.67it/s] 81%|########  | 21/26 [00:00<00:00, 38.77it/s]100%|##########| 26/26 [00:00<00:00, 41.77it/s]100%|##########| 26/26 [00:00<00:00, 34.88it/s]
Test: [   0/  26]	Loss 0.274 (0.274)	test_acc   0.86 (  0.86)	test_minacc   0.88 (  0.88)	test_majacc   0.86 (  0.86)	Loss_d 0.274 (0.274)	test_acc_d   0.86 (  0.86)	test_minacc_d   0.88 (  0.88)	test_majacc_d   0.86 (  0.86)	test_corr_d   0.72 (  0.72)
Test: [  10/  26]	Loss 0.274 (0.284)	test_acc   0.84 (  0.84)	test_minacc   0.89 (  0.87)	test_majacc   0.83 (  0.84)	Loss_d 0.274 (0.284)	test_acc_d   0.84 (  0.84)	test_minacc_d   0.89 (  0.87)	test_majacc_d   0.83 (  0.84)	test_corr_d   0.69 (  0.69)
Test: [  20/  26]	Loss 0.276 (0.287)	test_acc   0.84 (  0.84)	test_minacc   0.80 (  0.86)	test_majacc   0.85 (  0.84)	Loss_d 0.276 (0.287)	test_acc_d   0.84 (  0.84)	test_minacc_d   0.80 (  0.86)	test_majacc_d   0.85 (  0.84)	test_corr_d   0.72 (  0.69)
Test: [  26/  26]	Loss 0.278 (0.286)	test_acc   0.87 (  0.84)	test_minacc   0.93 (  0.87)	test_majacc   0.86 (  0.84)	Loss_d 0.278 (0.286)	test_acc_d   0.87 (  0.84)	test_minacc_d   0.93 (  0.87)	test_majacc_d   0.86 (  0.84)	test_corr_d   0.68 (  0.69)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 64.49it/s]
Test: [  0/  1]	Loss 2.121 (2.121)	test_acc   0.58 (  0.58)	test_minacc   0.56 (  0.56)	test_majacc   0.83 (  0.83)	Loss_d 2.121 (2.121)	test_acc_d   0.58 (  0.58)	test_minacc_d   0.56 (  0.56)	test_majacc_d   0.83 (  0.83)	test_corr_d   0.25 (  0.25)
Test: [  1/  1]	Loss 2.121 (2.121)	test_acc   0.58 (  0.58)	test_minacc   0.56 (  0.56)	test_majacc   0.83 (  0.83)	Loss_d 2.121 (2.121)	test_acc_d   0.58 (  0.58)	test_minacc_d   0.56 (  0.56)	test_majacc_d   0.83 (  0.83)	test_corr_d   0.25 (  0.25)
Overall Timing[ 30/  1]	epoch_time 0.0388 (0.0437)	validation_time 0.0004 (0.0006)	train_time 0.0383 (0.0429)
record: (train_acc, test_acc) (0.8291000253558158, 0.5960000157356262)
last accs (train_acc, test_acc) (0.841600024163723, 0.5830000042915344)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.23it/s] 12%|#1        | 3/26 [00:00<00:01, 11.86it/s] 27%|##6       | 7/26 [00:00<00:00, 21.01it/s] 42%|####2     | 11/26 [00:00<00:00, 25.74it/s] 58%|#####7    | 15/26 [00:00<00:00, 29.21it/s] 73%|#######3  | 19/26 [00:00<00:00, 31.48it/s] 88%|########8 | 23/26 [00:00<00:00, 32.97it/s]100%|##########| 26/26 [00:00<00:00, 26.52it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 806 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 807 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 808 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 809 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 810 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 811 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 812 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 813 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 814 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 815 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 816 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 817 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 818 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 819 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 820 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 821 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 822 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 823 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 824 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 825 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 826 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 827 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 828 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 829 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 830 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 831 400
penalty weights 10000.0
Epoch: [31][  26/  26]	Loss 0.000 (0.000)	train_nll   0.28 (  0.29)	train_penalty   0.00 (  0.00)	weight_norm  24.62 ( 24.62)	train_acc   0.87 (  0.84)	train_minacc   0.93 (  0.87)	train_majacc   0.85 (  0.84)	train_corr   0.00 (  0.00)	l1 7.7527 (7.7794)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.56it/s] 19%|#9        | 5/26 [00:00<00:00, 22.63it/s] 38%|###8      | 10/26 [00:00<00:00, 31.14it/s]                                                38%|###8      | 10/26 [00:00<00:00, 31.14it/s] 62%|######1   | 16/26 [00:00<00:00, 39.96it/s]                                                62%|######1   | 16/26 [00:00<00:00, 39.96it/s] 81%|########  | 21/26 [00:00<00:00, 41.66it/s]100%|##########| 26/26 [00:00<00:00, 43.56it/s]100%|##########| 26/26 [00:00<00:00, 33.46it/s]
Test: [   0/  26]	Loss 0.273 (0.273)	test_acc   0.86 (  0.86)	test_minacc   0.88 (  0.88)	test_majacc   0.86 (  0.86)	Loss_d 0.273 (0.273)	test_acc_d   0.86 (  0.86)	test_minacc_d   0.88 (  0.88)	test_majacc_d   0.86 (  0.86)	test_corr_d   0.72 (  0.72)
Test: [  10/  26]	Loss 0.269 (0.283)	test_acc   0.85 (  0.84)	test_minacc   0.89 (  0.87)	test_majacc   0.84 (  0.84)	Loss_d 0.269 (0.283)	test_acc_d   0.85 (  0.84)	test_minacc_d   0.89 (  0.87)	test_majacc_d   0.84 (  0.84)	test_corr_d   0.70 (  0.69)
Test: [  20/  26]	Loss 0.274 (0.284)	test_acc   0.84 (  0.84)	test_minacc   0.83 (  0.86)	test_majacc   0.85 (  0.84)	Loss_d 0.274 (0.284)	test_acc_d   0.84 (  0.84)	test_minacc_d   0.83 (  0.86)	test_majacc_d   0.85 (  0.84)	test_corr_d   0.73 (  0.69)
Test: [  26/  26]	Loss 0.280 (0.284)	test_acc   0.87 (  0.84)	test_minacc   0.93 (  0.87)	test_majacc   0.85 (  0.84)	Loss_d 0.280 (0.284)	test_acc_d   0.87 (  0.84)	test_minacc_d   0.93 (  0.87)	test_majacc_d   0.85 (  0.84)	test_corr_d   0.68 (  0.69)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.39it/s]
Test: [  0/  1]	Loss 2.139 (2.139)	test_acc   0.58 (  0.58)	test_minacc   0.55 (  0.55)	test_majacc   0.83 (  0.83)	Loss_d 2.139 (2.139)	test_acc_d   0.58 (  0.58)	test_minacc_d   0.55 (  0.55)	test_majacc_d   0.83 (  0.83)	test_corr_d   0.26 (  0.26)
Test: [  1/  1]	Loss 2.139 (2.139)	test_acc   0.58 (  0.58)	test_minacc   0.55 (  0.55)	test_majacc   0.83 (  0.83)	Loss_d 2.139 (2.139)	test_acc_d   0.58 (  0.58)	test_minacc_d   0.55 (  0.55)	test_majacc_d   0.83 (  0.83)	test_corr_d   0.26 (  0.26)
Overall Timing[ 31/  1]	epoch_time 0.0425 (0.0437)	validation_time 0.0004 (0.0006)	train_time 0.0421 (0.0428)
record: (train_acc, test_acc) (0.8291000253558158, 0.5960000157356262)
last accs (train_acc, test_acc) (0.8443000237941742, 0.578000009059906)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:06,  3.80it/s] 19%|#9        | 5/26 [00:00<00:01, 15.63it/s] 35%|###4      | 9/26 [00:00<00:00, 22.68it/s] 50%|#####     | 13/26 [00:00<00:00, 27.16it/s] 65%|######5   | 17/26 [00:00<00:00, 29.76it/s] 81%|########  | 21/26 [00:00<00:00, 31.19it/s] 96%|#########6| 25/26 [00:00<00:00, 32.30it/s]100%|##########| 26/26 [00:01<00:00, 25.22it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 832 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 833 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 834 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 835 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 836 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 837 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 838 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 839 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 840 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 841 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 842 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 843 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 844 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 845 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 846 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 847 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 848 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 849 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 850 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 851 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 852 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 853 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 854 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 855 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 856 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 857 400
penalty weights 10000.0
Epoch: [32][  26/  26]	Loss 0.000 (0.000)	train_nll   0.28 (  0.29)	train_penalty   0.00 (  0.00)	weight_norm  24.62 ( 24.62)	train_acc   0.87 (  0.84)	train_minacc   0.93 (  0.87)	train_majacc   0.85 (  0.84)	train_corr   0.00 (  0.00)	l1 7.7960 (7.7769)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.61it/s] 23%|##3       | 6/26 [00:00<00:00, 26.54it/s]                                               23%|##3       | 6/26 [00:00<00:00, 26.54it/s] 42%|####2     | 11/26 [00:00<00:00, 34.60it/s] 62%|######1   | 16/26 [00:00<00:00, 38.63it/s]                                                62%|######1   | 16/26 [00:00<00:00, 38.63it/s] 81%|########  | 21/26 [00:00<00:00, 37.76it/s]100%|##########| 26/26 [00:00<00:00, 40.61it/s]100%|##########| 26/26 [00:00<00:00, 32.92it/s]
Test: [   0/  26]	Loss 0.277 (0.277)	test_acc   0.86 (  0.86)	test_minacc   0.88 (  0.88)	test_majacc   0.85 (  0.85)	Loss_d 0.277 (0.277)	test_acc_d   0.86 (  0.86)	test_minacc_d   0.88 (  0.88)	test_majacc_d   0.85 (  0.85)	test_corr_d   0.72 (  0.72)
Test: [  10/  26]	Loss 0.272 (0.286)	test_acc   0.85 (  0.84)	test_minacc   0.89 (  0.87)	test_majacc   0.84 (  0.84)	Loss_d 0.272 (0.286)	test_acc_d   0.85 (  0.84)	test_minacc_d   0.89 (  0.87)	test_majacc_d   0.84 (  0.84)	test_corr_d   0.69 (  0.69)
Test: [  20/  26]	Loss 0.276 (0.286)	test_acc   0.84 (  0.84)	test_minacc   0.83 (  0.86)	test_majacc   0.84 (  0.84)	Loss_d 0.276 (0.286)	test_acc_d   0.84 (  0.84)	test_minacc_d   0.83 (  0.86)	test_majacc_d   0.84 (  0.84)	test_corr_d   0.72 (  0.69)
Test: [  26/  26]	Loss 0.281 (0.286)	test_acc   0.87 (  0.84)	test_minacc   0.93 (  0.87)	test_majacc   0.85 (  0.84)	Loss_d 0.281 (0.286)	test_acc_d   0.87 (  0.84)	test_minacc_d   0.93 (  0.87)	test_majacc_d   0.85 (  0.84)	test_corr_d   0.68 (  0.69)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.06it/s]
Test: [  0/  1]	Loss 2.144 (2.144)	test_acc   0.58 (  0.58)	test_minacc   0.56 (  0.56)	test_majacc   0.82 (  0.82)	Loss_d 2.144 (2.144)	test_acc_d   0.58 (  0.58)	test_minacc_d   0.56 (  0.56)	test_majacc_d   0.82 (  0.82)	test_corr_d   0.25 (  0.25)
Test: [  1/  1]	Loss 2.144 (2.144)	test_acc   0.58 (  0.58)	test_minacc   0.56 (  0.56)	test_majacc   0.82 (  0.82)	Loss_d 2.144 (2.144)	test_acc_d   0.58 (  0.58)	test_minacc_d   0.56 (  0.56)	test_majacc_d   0.82 (  0.82)	test_corr_d   0.25 (  0.25)
Overall Timing[ 32/  1]	epoch_time 0.0466 (0.0437)	validation_time 0.0005 (0.0006)	train_time 0.0461 (0.0429)
record: (train_acc, test_acc) (0.8291000253558158, 0.5960000157356262)
last accs (train_acc, test_acc) (0.8421000239253044, 0.5820000171661377)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.75it/s] 12%|#1        | 3/26 [00:00<00:01, 15.02it/s] 27%|##6       | 7/26 [00:00<00:00, 24.32it/s] 42%|####2     | 11/26 [00:00<00:00, 28.65it/s] 58%|#####7    | 15/26 [00:00<00:00, 30.10it/s] 73%|#######3  | 19/26 [00:00<00:00, 31.46it/s] 88%|########8 | 23/26 [00:00<00:00, 32.66it/s]100%|##########| 26/26 [00:00<00:00, 27.70it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 858 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 859 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 860 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 861 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 862 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 863 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 864 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 865 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 866 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 867 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 868 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 869 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 870 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 871 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 872 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 873 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 874 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 875 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 876 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 877 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 878 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 879 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 880 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 881 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 882 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 883 400
penalty weights 10000.0
Epoch: [33][  26/  26]	Loss 0.000 (0.000)	train_nll   0.28 (  0.29)	train_penalty   0.00 (  0.00)	weight_norm  24.62 ( 24.62)	train_acc   0.86 (  0.84)	train_minacc   0.93 (  0.87)	train_majacc   0.85 (  0.84)	train_corr   0.00 (  0.00)	l1 7.7901 (7.7702)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 17.98it/s] 27%|##6       | 7/26 [00:00<00:00, 34.35it/s]                                               27%|##6       | 7/26 [00:00<00:00, 34.35it/s] 46%|####6     | 12/26 [00:00<00:00, 39.45it/s] 65%|######5   | 17/26 [00:00<00:00, 42.18it/s]                                                65%|######5   | 17/26 [00:00<00:00, 42.18it/s] 85%|########4 | 22/26 [00:00<00:00, 40.36it/s]100%|##########| 26/26 [00:00<00:00, 36.98it/s]
Test: [   0/  26]	Loss 0.276 (0.276)	test_acc   0.86 (  0.86)	test_minacc   0.88 (  0.88)	test_majacc   0.86 (  0.86)	Loss_d 0.276 (0.276)	test_acc_d   0.86 (  0.86)	test_minacc_d   0.88 (  0.88)	test_majacc_d   0.86 (  0.86)	test_corr_d   0.71 (  0.71)
Test: [  10/  26]	Loss 0.274 (0.286)	test_acc   0.84 (  0.84)	test_minacc   0.89 (  0.87)	test_majacc   0.83 (  0.84)	Loss_d 0.274 (0.286)	test_acc_d   0.84 (  0.84)	test_minacc_d   0.89 (  0.87)	test_majacc_d   0.83 (  0.84)	test_corr_d   0.69 (  0.68)
Test: [  20/  26]	Loss 0.276 (0.287)	test_acc   0.84 (  0.84)	test_minacc   0.83 (  0.86)	test_majacc   0.85 (  0.84)	Loss_d 0.276 (0.287)	test_acc_d   0.84 (  0.84)	test_minacc_d   0.83 (  0.86)	test_majacc_d   0.85 (  0.84)	test_corr_d   0.72 (  0.69)
Test: [  26/  26]	Loss 0.279 (0.287)	test_acc   0.86 (  0.84)	test_minacc   0.93 (  0.87)	test_majacc   0.85 (  0.84)	Loss_d 0.279 (0.287)	test_acc_d   0.86 (  0.84)	test_minacc_d   0.93 (  0.87)	test_majacc_d   0.85 (  0.84)	test_corr_d   0.68 (  0.68)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.18it/s]
Test: [  0/  1]	Loss 2.136 (2.136)	test_acc   0.58 (  0.58)	test_minacc   0.56 (  0.56)	test_majacc   0.82 (  0.82)	Loss_d 2.136 (2.136)	test_acc_d   0.58 (  0.58)	test_minacc_d   0.56 (  0.56)	test_majacc_d   0.82 (  0.82)	test_corr_d   0.25 (  0.25)
Test: [  1/  1]	Loss 2.136 (2.136)	test_acc   0.58 (  0.58)	test_minacc   0.56 (  0.56)	test_majacc   0.82 (  0.82)	Loss_d 2.136 (2.136)	test_acc_d   0.58 (  0.58)	test_minacc_d   0.56 (  0.56)	test_majacc_d   0.82 (  0.82)	test_corr_d   0.25 (  0.25)
Overall Timing[ 33/  1]	epoch_time 0.0484 (0.0439)	validation_time 0.0005 (0.0006)	train_time 0.0480 (0.0431)
record: (train_acc, test_acc) (0.8291000253558158, 0.5960000157356262)
last accs (train_acc, test_acc) (0.8410000284314155, 0.5830000042915344)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 17.37it/s] 19%|#9        | 5/26 [00:00<00:00, 23.65it/s] 31%|###       | 8/26 [00:00<00:00, 26.16it/s] 46%|####6     | 12/26 [00:00<00:00, 28.82it/s] 62%|######1   | 16/26 [00:00<00:00, 30.40it/s] 77%|#######6  | 20/26 [00:00<00:00, 31.60it/s] 92%|#########2| 24/26 [00:00<00:00, 32.52it/s]100%|##########| 26/26 [00:00<00:00, 28.53it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 884 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 885 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 886 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 887 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 888 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 889 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 890 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 891 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 892 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 893 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 894 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 895 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 896 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 897 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 898 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 899 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 900 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 901 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 902 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 903 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 904 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 905 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 906 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 907 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 908 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 909 400
penalty weights 10000.0
Epoch: [34][  26/  26]	Loss 0.000 (0.000)	train_nll   0.28 (  0.29)	train_penalty   0.00 (  0.00)	weight_norm  24.62 ( 24.62)	train_acc   0.87 (  0.84)	train_minacc   0.93 (  0.87)	train_majacc   0.86 (  0.84)	train_corr   0.00 (  0.00)	l1 7.7715 (7.7769)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.87it/s] 15%|#5        | 4/26 [00:00<00:01, 20.96it/s] 35%|###4      | 9/26 [00:00<00:00, 32.35it/s]                                               35%|###4      | 9/26 [00:00<00:00, 32.35it/s] 54%|#####3    | 14/26 [00:00<00:00, 37.32it/s] 77%|#######6  | 20/26 [00:00<00:00, 40.29it/s]                                                77%|#######6  | 20/26 [00:00<00:00, 40.29it/s] 96%|#########6| 25/26 [00:00<00:00, 42.44it/s]100%|##########| 26/26 [00:00<00:00, 35.16it/s]
Test: [   0/  26]	Loss 0.273 (0.273)	test_acc   0.86 (  0.86)	test_minacc   0.88 (  0.88)	test_majacc   0.86 (  0.86)	Loss_d 0.273 (0.273)	test_acc_d   0.86 (  0.86)	test_minacc_d   0.88 (  0.88)	test_majacc_d   0.86 (  0.86)	test_corr_d   0.72 (  0.72)
Test: [  10/  26]	Loss 0.272 (0.284)	test_acc   0.84 (  0.84)	test_minacc   0.89 (  0.87)	test_majacc   0.83 (  0.84)	Loss_d 0.272 (0.284)	test_acc_d   0.84 (  0.84)	test_minacc_d   0.89 (  0.87)	test_majacc_d   0.83 (  0.84)	test_corr_d   0.70 (  0.69)
Test: [  20/  26]	Loss 0.275 (0.285)	test_acc   0.84 (  0.84)	test_minacc   0.83 (  0.86)	test_majacc   0.85 (  0.84)	Loss_d 0.275 (0.285)	test_acc_d   0.84 (  0.84)	test_minacc_d   0.83 (  0.86)	test_majacc_d   0.85 (  0.84)	test_corr_d   0.72 (  0.69)
Test: [  26/  26]	Loss 0.278 (0.285)	test_acc   0.87 (  0.84)	test_minacc   0.93 (  0.87)	test_majacc   0.86 (  0.84)	Loss_d 0.278 (0.285)	test_acc_d   0.87 (  0.84)	test_minacc_d   0.93 (  0.87)	test_majacc_d   0.86 (  0.84)	test_corr_d   0.68 (  0.69)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.03it/s]
Test: [  0/  1]	Loss 2.139 (2.139)	test_acc   0.58 (  0.58)	test_minacc   0.55 (  0.55)	test_majacc   0.83 (  0.83)	Loss_d 2.139 (2.139)	test_acc_d   0.58 (  0.58)	test_minacc_d   0.55 (  0.55)	test_majacc_d   0.83 (  0.83)	test_corr_d   0.25 (  0.25)
Test: [  1/  1]	Loss 2.139 (2.139)	test_acc   0.58 (  0.58)	test_minacc   0.55 (  0.55)	test_majacc   0.83 (  0.83)	Loss_d 2.139 (2.139)	test_acc_d   0.58 (  0.58)	test_minacc_d   0.55 (  0.55)	test_majacc_d   0.83 (  0.83)	test_corr_d   0.25 (  0.25)
Overall Timing[ 34/  1]	epoch_time 0.0434 (0.0439)	validation_time 0.0003 (0.0006)	train_time 0.0431 (0.0431)
record: (train_acc, test_acc) (0.8291000253558158, 0.5960000157356262)
last accs (train_acc, test_acc) (0.8425000275969505, 0.5820000171661377)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:07,  3.50it/s] 12%|#1        | 3/26 [00:00<00:02,  8.94it/s] 27%|##6       | 7/26 [00:00<00:01, 17.52it/s] 42%|####2     | 11/26 [00:00<00:00, 23.25it/s] 58%|#####7    | 15/26 [00:00<00:00, 26.99it/s] 73%|#######3  | 19/26 [00:00<00:00, 29.20it/s] 88%|########8 | 23/26 [00:00<00:00, 31.08it/s]100%|##########| 26/26 [00:01<00:00, 23.37it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 910 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 911 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 912 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 913 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 914 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 915 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 916 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 917 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 918 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 919 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 920 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 921 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 922 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 923 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 924 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 925 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 926 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 927 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 928 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 929 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 930 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 931 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 932 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 933 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 934 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 935 400
penalty weights 10000.0
Epoch: [35][  26/  26]	Loss 0.000 (0.000)	train_nll   0.28 (  0.29)	train_penalty   0.00 (  0.00)	weight_norm  24.62 ( 24.62)	train_acc   0.87 (  0.84)	train_minacc   0.93 (  0.87)	train_majacc   0.86 (  0.84)	train_corr   0.00 (  0.00)	l1 7.7767 (7.7893)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:02, 10.21it/s] 27%|##6       | 7/26 [00:00<00:00, 24.76it/s]                                               27%|##6       | 7/26 [00:00<00:00, 24.76it/s] 46%|####6     | 12/26 [00:00<00:00, 32.48it/s] 65%|######5   | 17/26 [00:00<00:00, 37.55it/s]                                                65%|######5   | 17/26 [00:00<00:00, 37.55it/s] 85%|########4 | 22/26 [00:00<00:00, 38.81it/s]100%|##########| 26/26 [00:00<00:00, 32.91it/s]
Test: [   0/  26]	Loss 0.273 (0.273)	test_acc   0.86 (  0.86)	test_minacc   0.88 (  0.88)	test_majacc   0.86 (  0.86)	Loss_d 0.273 (0.273)	test_acc_d   0.86 (  0.86)	test_minacc_d   0.88 (  0.88)	test_majacc_d   0.86 (  0.86)	test_corr_d   0.72 (  0.72)
Test: [  10/  26]	Loss 0.270 (0.283)	test_acc   0.85 (  0.84)	test_minacc   0.89 (  0.87)	test_majacc   0.84 (  0.84)	Loss_d 0.270 (0.283)	test_acc_d   0.85 (  0.84)	test_minacc_d   0.89 (  0.87)	test_majacc_d   0.84 (  0.84)	test_corr_d   0.70 (  0.69)
Test: [  20/  26]	Loss 0.274 (0.284)	test_acc   0.84 (  0.84)	test_minacc   0.83 (  0.86)	test_majacc   0.85 (  0.84)	Loss_d 0.274 (0.284)	test_acc_d   0.84 (  0.84)	test_minacc_d   0.83 (  0.86)	test_majacc_d   0.85 (  0.84)	test_corr_d   0.73 (  0.69)
Test: [  26/  26]	Loss 0.279 (0.284)	test_acc   0.87 (  0.84)	test_minacc   0.93 (  0.87)	test_majacc   0.85 (  0.84)	Loss_d 0.279 (0.284)	test_acc_d   0.87 (  0.84)	test_minacc_d   0.93 (  0.87)	test_majacc_d   0.85 (  0.84)	test_corr_d   0.68 (  0.69)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.48it/s]
Test: [  0/  1]	Loss 2.146 (2.146)	test_acc   0.58 (  0.58)	test_minacc   0.55 (  0.55)	test_majacc   0.83 (  0.83)	Loss_d 2.146 (2.146)	test_acc_d   0.58 (  0.58)	test_minacc_d   0.55 (  0.55)	test_majacc_d   0.83 (  0.83)	test_corr_d   0.26 (  0.26)
Test: [  1/  1]	Loss 2.146 (2.146)	test_acc   0.58 (  0.58)	test_minacc   0.55 (  0.55)	test_majacc   0.83 (  0.83)	Loss_d 2.146 (2.146)	test_acc_d   0.58 (  0.58)	test_minacc_d   0.55 (  0.55)	test_majacc_d   0.83 (  0.83)	test_corr_d   0.26 (  0.26)
Overall Timing[ 35/  1]	epoch_time 0.0427 (0.0438)	validation_time 0.0004 (0.0006)	train_time 0.0422 (0.0431)
record: (train_acc, test_acc) (0.8291000253558158, 0.5960000157356262)
last accs (train_acc, test_acc) (0.8442000249624252, 0.5790000557899475)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:01, 20.04it/s] 27%|##6       | 7/26 [00:00<00:00, 26.39it/s] 42%|####2     | 11/26 [00:00<00:00, 29.84it/s] 58%|#####7    | 15/26 [00:00<00:00, 31.62it/s] 73%|#######3  | 19/26 [00:00<00:00, 32.95it/s] 88%|########8 | 23/26 [00:00<00:00, 34.21it/s]100%|##########| 26/26 [00:00<00:00, 29.22it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 936 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 937 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 938 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 939 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 940 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 941 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 942 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 943 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 944 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 945 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 946 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 947 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 948 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 949 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 950 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 951 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 952 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 953 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 954 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 955 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 956 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 957 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 958 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 959 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 960 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 961 400
penalty weights 10000.0
Epoch: [36][  26/  26]	Loss 0.000 (0.000)	train_nll   0.28 (  0.28)	train_penalty   0.00 (  0.00)	weight_norm  24.62 ( 24.62)	train_acc   0.87 (  0.84)	train_minacc   0.93 (  0.87)	train_majacc   0.85 (  0.84)	train_corr   0.00 (  0.00)	l1 7.7980 (7.7906)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 16.93it/s] 27%|##6       | 7/26 [00:00<00:00, 33.16it/s]                                               27%|##6       | 7/26 [00:00<00:00, 33.16it/s] 46%|####6     | 12/26 [00:00<00:00, 38.72it/s] 62%|######1   | 16/26 [00:00<00:00, 39.12it/s]                                                62%|######1   | 16/26 [00:00<00:00, 39.12it/s] 81%|########  | 21/26 [00:00<00:00, 41.49it/s]100%|##########| 26/26 [00:00<00:00, 43.34it/s]100%|##########| 26/26 [00:00<00:00, 35.41it/s]
Test: [   0/  26]	Loss 0.274 (0.274)	test_acc   0.86 (  0.86)	test_minacc   0.88 (  0.88)	test_majacc   0.86 (  0.86)	Loss_d 0.274 (0.274)	test_acc_d   0.86 (  0.86)	test_minacc_d   0.88 (  0.88)	test_majacc_d   0.86 (  0.86)	test_corr_d   0.72 (  0.72)
Test: [  10/  26]	Loss 0.271 (0.284)	test_acc   0.85 (  0.84)	test_minacc   0.89 (  0.87)	test_majacc   0.84 (  0.84)	Loss_d 0.271 (0.284)	test_acc_d   0.85 (  0.84)	test_minacc_d   0.89 (  0.87)	test_majacc_d   0.84 (  0.84)	test_corr_d   0.70 (  0.69)
Test: [  20/  26]	Loss 0.275 (0.285)	test_acc   0.84 (  0.84)	test_minacc   0.83 (  0.86)	test_majacc   0.85 (  0.84)	Loss_d 0.275 (0.285)	test_acc_d   0.84 (  0.84)	test_minacc_d   0.83 (  0.86)	test_majacc_d   0.85 (  0.84)	test_corr_d   0.72 (  0.69)
Test: [  26/  26]	Loss 0.279 (0.285)	test_acc   0.87 (  0.84)	test_minacc   0.93 (  0.87)	test_majacc   0.85 (  0.84)	Loss_d 0.279 (0.285)	test_acc_d   0.87 (  0.84)	test_minacc_d   0.93 (  0.87)	test_majacc_d   0.85 (  0.84)	test_corr_d   0.68 (  0.69)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.80it/s]
Test: [  0/  1]	Loss 2.150 (2.150)	test_acc   0.58 (  0.58)	test_minacc   0.55 (  0.55)	test_majacc   0.83 (  0.83)	Loss_d 2.150 (2.150)	test_acc_d   0.58 (  0.58)	test_minacc_d   0.55 (  0.55)	test_majacc_d   0.83 (  0.83)	test_corr_d   0.26 (  0.26)
Test: [  1/  1]	Loss 2.150 (2.150)	test_acc   0.58 (  0.58)	test_minacc   0.55 (  0.55)	test_majacc   0.83 (  0.83)	Loss_d 2.150 (2.150)	test_acc_d   0.58 (  0.58)	test_minacc_d   0.55 (  0.55)	test_majacc_d   0.83 (  0.83)	test_corr_d   0.26 (  0.26)
Overall Timing[ 36/  1]	epoch_time 0.0444 (0.0438)	validation_time 0.0003 (0.0006)	train_time 0.0441 (0.0431)
record: (train_acc, test_acc) (0.8291000253558158, 0.5960000157356262)
last accs (train_acc, test_acc) (0.8433000238537789, 0.5820000171661377)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:06,  3.87it/s] 19%|#9        | 5/26 [00:00<00:01, 15.37it/s] 35%|###4      | 9/26 [00:00<00:00, 22.27it/s] 50%|#####     | 13/26 [00:00<00:00, 26.45it/s] 65%|######5   | 17/26 [00:00<00:00, 29.54it/s] 81%|########  | 21/26 [00:00<00:00, 31.54it/s] 96%|#########6| 25/26 [00:00<00:00, 32.92it/s]100%|##########| 26/26 [00:01<00:00, 25.23it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 962 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 963 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 964 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 965 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 966 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 967 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 968 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 969 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 970 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 971 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 972 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 973 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 974 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 975 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 976 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 977 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 978 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 979 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 980 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 981 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 982 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 983 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 984 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 985 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 986 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 987 400
penalty weights 10000.0
Epoch: [37][  26/  26]	Loss 0.000 (0.000)	train_nll   0.28 (  0.28)	train_penalty   0.00 (  0.00)	weight_norm  24.62 ( 24.62)	train_acc   0.87 (  0.84)	train_minacc   0.93 (  0.87)	train_majacc   0.85 (  0.84)	train_corr   0.00 (  0.00)	l1 7.7994 (7.7870)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.87it/s] 19%|#9        | 5/26 [00:00<00:01, 20.04it/s] 38%|###8      | 10/26 [00:00<00:00, 30.58it/s]                                                38%|###8      | 10/26 [00:00<00:00, 30.58it/s] 58%|#####7    | 15/26 [00:00<00:00, 35.72it/s] 77%|#######6  | 20/26 [00:00<00:00, 35.70it/s]                                                77%|#######6  | 20/26 [00:00<00:00, 35.70it/s] 96%|#########6| 25/26 [00:00<00:00, 39.30it/s]100%|##########| 26/26 [00:00<00:00, 31.47it/s]
Test: [   0/  26]	Loss 0.274 (0.274)	test_acc   0.86 (  0.86)	test_minacc   0.88 (  0.88)	test_majacc   0.86 (  0.86)	Loss_d 0.274 (0.274)	test_acc_d   0.86 (  0.86)	test_minacc_d   0.88 (  0.88)	test_majacc_d   0.86 (  0.86)	test_corr_d   0.72 (  0.72)
Test: [  10/  26]	Loss 0.273 (0.284)	test_acc   0.85 (  0.84)	test_minacc   0.89 (  0.87)	test_majacc   0.84 (  0.84)	Loss_d 0.273 (0.284)	test_acc_d   0.85 (  0.84)	test_minacc_d   0.89 (  0.87)	test_majacc_d   0.84 (  0.84)	test_corr_d   0.69 (  0.69)
Test: [  20/  26]	Loss 0.275 (0.286)	test_acc   0.84 (  0.84)	test_minacc   0.83 (  0.86)	test_majacc   0.85 (  0.84)	Loss_d 0.275 (0.286)	test_acc_d   0.84 (  0.84)	test_minacc_d   0.83 (  0.86)	test_majacc_d   0.85 (  0.84)	test_corr_d   0.72 (  0.69)
Test: [  26/  26]	Loss 0.278 (0.285)	test_acc   0.87 (  0.84)	test_minacc   0.93 (  0.87)	test_majacc   0.85 (  0.84)	Loss_d 0.278 (0.285)	test_acc_d   0.87 (  0.84)	test_minacc_d   0.93 (  0.87)	test_majacc_d   0.85 (  0.84)	test_corr_d   0.68 (  0.69)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.21it/s]
Test: [  0/  1]	Loss 2.145 (2.145)	test_acc   0.58 (  0.58)	test_minacc   0.56 (  0.56)	test_majacc   0.82 (  0.82)	Loss_d 2.145 (2.145)	test_acc_d   0.58 (  0.58)	test_minacc_d   0.56 (  0.56)	test_majacc_d   0.82 (  0.82)	test_corr_d   0.25 (  0.25)
Test: [  1/  1]	Loss 2.145 (2.145)	test_acc   0.58 (  0.58)	test_minacc   0.56 (  0.56)	test_majacc   0.82 (  0.82)	Loss_d 2.145 (2.145)	test_acc_d   0.58 (  0.58)	test_minacc_d   0.56 (  0.56)	test_majacc_d   0.82 (  0.82)	test_corr_d   0.25 (  0.25)
Overall Timing[ 37/  1]	epoch_time 0.0431 (0.0438)	validation_time 0.0004 (0.0006)	train_time 0.0427 (0.0431)
record: (train_acc, test_acc) (0.8291000253558158, 0.5960000157356262)
last accs (train_acc, test_acc) (0.8424000250697136, 0.5820000171661377)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:05,  4.60it/s] 19%|#9        | 5/26 [00:00<00:01, 16.53it/s] 35%|###4      | 9/26 [00:00<00:00, 23.13it/s] 50%|#####     | 13/26 [00:00<00:00, 27.10it/s] 65%|######5   | 17/26 [00:00<00:00, 28.89it/s] 81%|########  | 21/26 [00:00<00:00, 30.47it/s] 96%|#########6| 25/26 [00:00<00:00, 31.98it/s]100%|##########| 26/26 [00:01<00:00, 25.32it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 988 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 989 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 990 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 991 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 992 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 993 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 994 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 995 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 996 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 997 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 998 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 999 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1000 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1001 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1002 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1003 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1004 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1005 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1006 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1007 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1008 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1009 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1010 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1011 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1012 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1013 400
penalty weights 10000.0
Epoch: [38][  26/  26]	Loss 0.000 (0.000)	train_nll   0.28 (  0.28)	train_penalty   0.00 (  0.00)	weight_norm  24.62 ( 24.62)	train_acc   0.87 (  0.84)	train_minacc   0.93 (  0.87)	train_majacc   0.86 (  0.84)	train_corr   0.00 (  0.00)	l1 7.7916 (7.7914)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.15it/s] 23%|##3       | 6/26 [00:00<00:00, 28.62it/s]                                               23%|##3       | 6/26 [00:00<00:00, 28.62it/s] 42%|####2     | 11/26 [00:00<00:00, 35.87it/s] 62%|######1   | 16/26 [00:00<00:00, 40.33it/s]                                                62%|######1   | 16/26 [00:00<00:00, 40.33it/s] 81%|########  | 21/26 [00:00<00:00, 38.66it/s]100%|##########| 26/26 [00:00<00:00, 41.06it/s]100%|##########| 26/26 [00:00<00:00, 34.01it/s]
Test: [   0/  26]	Loss 0.272 (0.272)	test_acc   0.86 (  0.86)	test_minacc   0.88 (  0.88)	test_majacc   0.86 (  0.86)	Loss_d 0.272 (0.272)	test_acc_d   0.86 (  0.86)	test_minacc_d   0.88 (  0.88)	test_majacc_d   0.86 (  0.86)	test_corr_d   0.72 (  0.72)
Test: [  10/  26]	Loss 0.272 (0.283)	test_acc   0.85 (  0.84)	test_minacc   0.89 (  0.87)	test_majacc   0.84 (  0.84)	Loss_d 0.272 (0.283)	test_acc_d   0.85 (  0.84)	test_minacc_d   0.89 (  0.87)	test_majacc_d   0.84 (  0.84)	test_corr_d   0.70 (  0.69)
Test: [  20/  26]	Loss 0.274 (0.285)	test_acc   0.84 (  0.84)	test_minacc   0.83 (  0.86)	test_majacc   0.85 (  0.84)	Loss_d 0.274 (0.285)	test_acc_d   0.84 (  0.84)	test_minacc_d   0.83 (  0.86)	test_majacc_d   0.85 (  0.84)	test_corr_d   0.72 (  0.69)
Test: [  26/  26]	Loss 0.278 (0.284)	test_acc   0.87 (  0.84)	test_minacc   0.93 (  0.87)	test_majacc   0.86 (  0.84)	Loss_d 0.278 (0.284)	test_acc_d   0.87 (  0.84)	test_minacc_d   0.93 (  0.87)	test_majacc_d   0.86 (  0.84)	test_corr_d   0.68 (  0.69)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.44it/s]
Test: [  0/  1]	Loss 2.148 (2.148)	test_acc   0.58 (  0.58)	test_minacc   0.55 (  0.55)	test_majacc   0.83 (  0.83)	Loss_d 2.148 (2.148)	test_acc_d   0.58 (  0.58)	test_minacc_d   0.55 (  0.55)	test_majacc_d   0.83 (  0.83)	test_corr_d   0.25 (  0.25)
Test: [  1/  1]	Loss 2.148 (2.148)	test_acc   0.58 (  0.58)	test_minacc   0.55 (  0.55)	test_majacc   0.83 (  0.83)	Loss_d 2.148 (2.148)	test_acc_d   0.58 (  0.58)	test_minacc_d   0.55 (  0.55)	test_majacc_d   0.83 (  0.83)	test_corr_d   0.25 (  0.25)
Overall Timing[ 38/  1]	epoch_time 0.0423 (0.0438)	validation_time 0.0004 (0.0006)	train_time 0.0419 (0.0431)
record: (train_acc, test_acc) (0.8291000253558158, 0.5960000157356262)
last accs (train_acc, test_acc) (0.8429000275731087, 0.5820000171661377)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.37it/s] 19%|#9        | 5/26 [00:00<00:01, 19.13it/s] 35%|###4      | 9/26 [00:00<00:00, 25.24it/s] 50%|#####     | 13/26 [00:00<00:00, 28.65it/s] 65%|######5   | 17/26 [00:00<00:00, 30.55it/s] 81%|########  | 21/26 [00:00<00:00, 32.47it/s] 96%|#########6| 25/26 [00:00<00:00, 33.34it/s]100%|##########| 26/26 [00:00<00:00, 27.12it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1014 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1015 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1016 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1017 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1018 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1019 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1020 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1021 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1022 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1023 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1024 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1025 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1026 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1027 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1028 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1029 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1030 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1031 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1032 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1033 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1034 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1035 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1036 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1037 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1038 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1039 400
penalty weights 10000.0
Epoch: [39][  26/  26]	Loss 0.000 (0.000)	train_nll   0.28 (  0.28)	train_penalty   0.00 (  0.00)	weight_norm  24.62 ( 24.62)	train_acc   0.87 (  0.84)	train_minacc   0.93 (  0.87)	train_majacc   0.86 (  0.84)	train_corr   0.00 (  0.00)	l1 7.7923 (7.7985)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.70it/s] 23%|##3       | 6/26 [00:00<00:00, 29.79it/s]                                               23%|##3       | 6/26 [00:00<00:00, 29.79it/s] 42%|####2     | 11/26 [00:00<00:00, 36.96it/s] 62%|######1   | 16/26 [00:00<00:00, 40.87it/s]                                                62%|######1   | 16/26 [00:00<00:00, 40.87it/s] 81%|########  | 21/26 [00:00<00:00, 38.90it/s]100%|##########| 26/26 [00:00<00:00, 41.89it/s]100%|##########| 26/26 [00:00<00:00, 34.28it/s]
Test: [   0/  26]	Loss 0.272 (0.272)	test_acc   0.86 (  0.86)	test_minacc   0.88 (  0.88)	test_majacc   0.86 (  0.86)	Loss_d 0.272 (0.272)	test_acc_d   0.86 (  0.86)	test_minacc_d   0.88 (  0.88)	test_majacc_d   0.86 (  0.86)	test_corr_d   0.72 (  0.72)
Test: [  10/  26]	Loss 0.270 (0.282)	test_acc   0.85 (  0.84)	test_minacc   0.89 (  0.87)	test_majacc   0.84 (  0.84)	Loss_d 0.270 (0.282)	test_acc_d   0.85 (  0.84)	test_minacc_d   0.89 (  0.87)	test_majacc_d   0.84 (  0.84)	test_corr_d   0.70 (  0.69)
Test: [  20/  26]	Loss 0.273 (0.284)	test_acc   0.84 (  0.84)	test_minacc   0.83 (  0.86)	test_majacc   0.85 (  0.84)	Loss_d 0.273 (0.284)	test_acc_d   0.84 (  0.84)	test_minacc_d   0.83 (  0.86)	test_majacc_d   0.85 (  0.84)	test_corr_d   0.73 (  0.69)
Test: [  26/  26]	Loss 0.278 (0.283)	test_acc   0.87 (  0.84)	test_minacc   0.93 (  0.87)	test_majacc   0.86 (  0.84)	Loss_d 0.278 (0.283)	test_acc_d   0.87 (  0.84)	test_minacc_d   0.93 (  0.87)	test_majacc_d   0.86 (  0.84)	test_corr_d   0.68 (  0.69)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.47it/s]
Test: [  0/  1]	Loss 2.152 (2.152)	test_acc   0.58 (  0.58)	test_minacc   0.55 (  0.55)	test_majacc   0.83 (  0.83)	Loss_d 2.152 (2.152)	test_acc_d   0.58 (  0.58)	test_minacc_d   0.55 (  0.55)	test_majacc_d   0.83 (  0.83)	test_corr_d   0.26 (  0.26)
Test: [  1/  1]	Loss 2.152 (2.152)	test_acc   0.58 (  0.58)	test_minacc   0.55 (  0.55)	test_majacc   0.83 (  0.83)	Loss_d 2.152 (2.152)	test_acc_d   0.58 (  0.58)	test_minacc_d   0.55 (  0.55)	test_majacc_d   0.83 (  0.83)	test_corr_d   0.26 (  0.26)
Overall Timing[ 39/  1]	epoch_time 0.0393 (0.0437)	validation_time 0.0003 (0.0006)	train_time 0.0389 (0.0429)
record: (train_acc, test_acc) (0.8291000253558158, 0.5960000157356262)
last accs (train_acc, test_acc) (0.8447000251412392, 0.5800000429153442)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.47it/s] 19%|#9        | 5/26 [00:00<00:00, 22.99it/s] 35%|###4      | 9/26 [00:00<00:00, 27.64it/s] 50%|#####     | 13/26 [00:00<00:00, 30.52it/s] 65%|######5   | 17/26 [00:00<00:00, 32.47it/s] 81%|########  | 21/26 [00:00<00:00, 33.91it/s] 96%|#########6| 25/26 [00:00<00:00, 34.69it/s]100%|##########| 26/26 [00:00<00:00, 29.20it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1040 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1041 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1042 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1043 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1044 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1045 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1046 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1047 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1048 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1049 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1050 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1051 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1052 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1053 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1054 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1055 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1056 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1057 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1058 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1059 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1060 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1061 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1062 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1063 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1064 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1065 400
penalty weights 10000.0
Epoch: [40][  26/  26]	Loss 0.000 (0.000)	train_nll   0.28 (  0.28)	train_penalty   0.00 (  0.00)	weight_norm  24.62 ( 24.62)	train_acc   0.87 (  0.84)	train_minacc   0.93 (  0.87)	train_majacc   0.85 (  0.84)	train_corr   0.00 (  0.00)	l1 7.8031 (7.8032)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.80it/s]  8%|7         | 2/26 [00:00<00:03,  7.62it/s] 27%|##6       | 7/26 [00:00<00:00, 23.58it/s]                                               27%|##6       | 7/26 [00:00<00:00, 23.58it/s] 46%|####6     | 12/26 [00:00<00:00, 31.60it/s] 65%|######5   | 17/26 [00:00<00:00, 36.82it/s]                                                65%|######5   | 17/26 [00:00<00:00, 36.82it/s] 85%|########4 | 22/26 [00:00<00:00, 39.46it/s]100%|##########| 26/26 [00:00<00:00, 30.35it/s]
Test: [   0/  26]	Loss 0.272 (0.272)	test_acc   0.86 (  0.86)	test_minacc   0.88 (  0.88)	test_majacc   0.86 (  0.86)	Loss_d 0.272 (0.272)	test_acc_d   0.86 (  0.86)	test_minacc_d   0.88 (  0.88)	test_majacc_d   0.86 (  0.86)	test_corr_d   0.72 (  0.72)
Test: [  10/  26]	Loss 0.270 (0.282)	test_acc   0.85 (  0.84)	test_minacc   0.89 (  0.87)	test_majacc   0.84 (  0.84)	Loss_d 0.270 (0.282)	test_acc_d   0.85 (  0.84)	test_minacc_d   0.89 (  0.87)	test_majacc_d   0.84 (  0.84)	test_corr_d   0.70 (  0.69)
Test: [  20/  26]	Loss 0.273 (0.284)	test_acc   0.84 (  0.84)	test_minacc   0.83 (  0.86)	test_majacc   0.85 (  0.84)	Loss_d 0.273 (0.284)	test_acc_d   0.84 (  0.84)	test_minacc_d   0.83 (  0.86)	test_majacc_d   0.85 (  0.84)	test_corr_d   0.73 (  0.69)
Test: [  26/  26]	Loss 0.278 (0.283)	test_acc   0.87 (  0.84)	test_minacc   0.93 (  0.87)	test_majacc   0.85 (  0.84)	Loss_d 0.278 (0.283)	test_acc_d   0.87 (  0.84)	test_minacc_d   0.93 (  0.87)	test_majacc_d   0.85 (  0.84)	test_corr_d   0.68 (  0.69)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 59.61it/s]
Test: [  0/  1]	Loss 2.155 (2.155)	test_acc   0.58 (  0.58)	test_minacc   0.55 (  0.55)	test_majacc   0.83 (  0.83)	Loss_d 2.155 (2.155)	test_acc_d   0.58 (  0.58)	test_minacc_d   0.55 (  0.55)	test_majacc_d   0.83 (  0.83)	test_corr_d   0.26 (  0.26)
Test: [  1/  1]	Loss 2.155 (2.155)	test_acc   0.58 (  0.58)	test_minacc   0.55 (  0.55)	test_majacc   0.83 (  0.83)	Loss_d 2.155 (2.155)	test_acc_d   0.58 (  0.58)	test_minacc_d   0.55 (  0.55)	test_majacc_d   0.83 (  0.83)	test_corr_d   0.26 (  0.26)
Overall Timing[ 40/  1]	epoch_time 0.0421 (0.0436)	validation_time 0.0005 (0.0006)	train_time 0.0416 (0.0429)
record: (train_acc, test_acc) (0.8291000253558158, 0.5960000157356262)
last accs (train_acc, test_acc) (0.8442000249624252, 0.578000009059906)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:02,  9.40it/s] 19%|#9        | 5/26 [00:00<00:01, 17.66it/s] 35%|###4      | 9/26 [00:00<00:00, 24.58it/s] 50%|#####     | 13/26 [00:00<00:00, 28.51it/s] 65%|######5   | 17/26 [00:00<00:00, 30.36it/s] 81%|########  | 21/26 [00:00<00:00, 31.36it/s] 96%|#########6| 25/26 [00:00<00:00, 32.93it/s]100%|##########| 26/26 [00:00<00:00, 26.73it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1066 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1067 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1068 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1069 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1070 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1071 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1072 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1073 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1074 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1075 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1076 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1077 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1078 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1079 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1080 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1081 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1082 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1083 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1084 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1085 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1086 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1087 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1088 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1089 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1090 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1091 400
penalty weights 10000.0
Epoch: [41][  26/  26]	Loss 0.000 (0.000)	train_nll   0.28 (  0.28)	train_penalty   0.00 (  0.00)	weight_norm  24.62 ( 24.62)	train_acc   0.87 (  0.84)	train_minacc   0.93 (  0.87)	train_majacc   0.85 (  0.84)	train_corr   0.00 (  0.00)	l1 7.8100 (7.8018)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.30it/s] 15%|#5        | 4/26 [00:00<00:01, 17.01it/s] 35%|###4      | 9/26 [00:00<00:00, 29.93it/s]                                               35%|###4      | 9/26 [00:00<00:00, 29.93it/s] 54%|#####3    | 14/26 [00:00<00:00, 36.18it/s] 73%|#######3  | 19/26 [00:00<00:00, 38.79it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 38.79it/s] 92%|#########2| 24/26 [00:00<00:00, 38.71it/s]100%|##########| 26/26 [00:00<00:00, 31.53it/s]
Test: [   0/  26]	Loss 0.272 (0.272)	test_acc   0.86 (  0.86)	test_minacc   0.88 (  0.88)	test_majacc   0.86 (  0.86)	Loss_d 0.272 (0.272)	test_acc_d   0.86 (  0.86)	test_minacc_d   0.88 (  0.88)	test_majacc_d   0.86 (  0.86)	test_corr_d   0.72 (  0.72)
Test: [  10/  26]	Loss 0.271 (0.283)	test_acc   0.85 (  0.84)	test_minacc   0.89 (  0.87)	test_majacc   0.84 (  0.84)	Loss_d 0.271 (0.283)	test_acc_d   0.85 (  0.84)	test_minacc_d   0.89 (  0.87)	test_majacc_d   0.84 (  0.84)	test_corr_d   0.70 (  0.69)
Test: [  20/  26]	Loss 0.274 (0.284)	test_acc   0.84 (  0.84)	test_minacc   0.83 (  0.86)	test_majacc   0.85 (  0.84)	Loss_d 0.274 (0.284)	test_acc_d   0.84 (  0.84)	test_minacc_d   0.83 (  0.86)	test_majacc_d   0.85 (  0.84)	test_corr_d   0.72 (  0.69)
Test: [  26/  26]	Loss 0.277 (0.284)	test_acc   0.87 (  0.84)	test_minacc   0.93 (  0.87)	test_majacc   0.85 (  0.84)	Loss_d 0.277 (0.284)	test_acc_d   0.87 (  0.84)	test_minacc_d   0.93 (  0.87)	test_majacc_d   0.85 (  0.84)	test_corr_d   0.68 (  0.69)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 60.76it/s]
Test: [  0/  1]	Loss 2.154 (2.154)	test_acc   0.58 (  0.58)	test_minacc   0.55 (  0.55)	test_majacc   0.82 (  0.82)	Loss_d 2.154 (2.154)	test_acc_d   0.58 (  0.58)	test_minacc_d   0.55 (  0.55)	test_majacc_d   0.82 (  0.82)	test_corr_d   0.25 (  0.25)
Test: [  1/  1]	Loss 2.154 (2.154)	test_acc   0.58 (  0.58)	test_minacc   0.55 (  0.55)	test_majacc   0.82 (  0.82)	Loss_d 2.154 (2.154)	test_acc_d   0.58 (  0.58)	test_minacc_d   0.55 (  0.55)	test_majacc_d   0.82 (  0.82)	test_corr_d   0.25 (  0.25)
Overall Timing[ 41/  1]	epoch_time 0.0432 (0.0436)	validation_time 0.0005 (0.0006)	train_time 0.0427 (0.0429)
record: (train_acc, test_acc) (0.8291000253558158, 0.5960000157356262)
last accs (train_acc, test_acc) (0.843600024998188, 0.581000030040741)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.98it/s] 19%|#9        | 5/26 [00:00<00:01, 20.41it/s] 35%|###4      | 9/26 [00:00<00:00, 26.65it/s] 50%|#####     | 13/26 [00:00<00:00, 29.90it/s] 65%|######5   | 17/26 [00:00<00:00, 32.14it/s] 81%|########  | 21/26 [00:00<00:00, 33.46it/s] 96%|#########6| 25/26 [00:00<00:00, 34.39it/s]100%|##########| 26/26 [00:00<00:00, 28.35it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1092 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1093 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1094 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1095 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1096 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1097 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1098 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1099 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1100 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1101 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1102 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1103 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1104 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1105 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1106 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1107 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1108 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1109 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1110 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1111 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1112 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1113 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1114 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1115 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1116 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1117 400
penalty weights 10000.0
Epoch: [42][  26/  26]	Loss 0.000 (0.000)	train_nll   0.28 (  0.28)	train_penalty   0.00 (  0.00)	weight_norm  24.62 ( 24.62)	train_acc   0.87 (  0.84)	train_minacc   0.93 (  0.87)	train_majacc   0.86 (  0.84)	train_corr   0.00 (  0.00)	l1 7.8088 (7.8039)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.75it/s] 19%|#9        | 5/26 [00:00<00:01, 20.84it/s] 38%|###8      | 10/26 [00:00<00:00, 31.66it/s]                                                38%|###8      | 10/26 [00:00<00:00, 31.66it/s] 58%|#####7    | 15/26 [00:00<00:00, 37.19it/s] 77%|#######6  | 20/26 [00:00<00:00, 41.30it/s]                                                77%|#######6  | 20/26 [00:00<00:00, 41.30it/s] 96%|#########6| 25/26 [00:00<00:00, 38.65it/s]100%|##########| 26/26 [00:00<00:00, 32.03it/s]
Test: [   0/  26]	Loss 0.272 (0.272)	test_acc   0.86 (  0.86)	test_minacc   0.88 (  0.88)	test_majacc   0.86 (  0.86)	Loss_d 0.272 (0.272)	test_acc_d   0.86 (  0.86)	test_minacc_d   0.88 (  0.88)	test_majacc_d   0.86 (  0.86)	test_corr_d   0.72 (  0.72)
Test: [  10/  26]	Loss 0.271 (0.282)	test_acc   0.85 (  0.84)	test_minacc   0.89 (  0.87)	test_majacc   0.84 (  0.84)	Loss_d 0.271 (0.282)	test_acc_d   0.85 (  0.84)	test_minacc_d   0.89 (  0.87)	test_majacc_d   0.84 (  0.84)	test_corr_d   0.70 (  0.69)
Test: [  20/  26]	Loss 0.273 (0.284)	test_acc   0.84 (  0.84)	test_minacc   0.83 (  0.86)	test_majacc   0.85 (  0.84)	Loss_d 0.273 (0.284)	test_acc_d   0.84 (  0.84)	test_minacc_d   0.83 (  0.86)	test_majacc_d   0.85 (  0.84)	test_corr_d   0.72 (  0.69)
Test: [  26/  26]	Loss 0.277 (0.284)	test_acc   0.87 (  0.84)	test_minacc   0.93 (  0.87)	test_majacc   0.86 (  0.84)	Loss_d 0.277 (0.284)	test_acc_d   0.87 (  0.84)	test_minacc_d   0.93 (  0.87)	test_majacc_d   0.86 (  0.84)	test_corr_d   0.68 (  0.69)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 64.46it/s]
Test: [  0/  1]	Loss 2.155 (2.155)	test_acc   0.58 (  0.58)	test_minacc   0.55 (  0.55)	test_majacc   0.82 (  0.82)	Loss_d 2.155 (2.155)	test_acc_d   0.58 (  0.58)	test_minacc_d   0.55 (  0.55)	test_majacc_d   0.82 (  0.82)	test_corr_d   0.25 (  0.25)
Test: [  1/  1]	Loss 2.155 (2.155)	test_acc   0.58 (  0.58)	test_minacc   0.55 (  0.55)	test_majacc   0.82 (  0.82)	Loss_d 2.155 (2.155)	test_acc_d   0.58 (  0.58)	test_minacc_d   0.55 (  0.55)	test_majacc_d   0.82 (  0.82)	test_corr_d   0.25 (  0.25)
Overall Timing[ 42/  1]	epoch_time 0.0393 (0.0435)	validation_time 0.0003 (0.0006)	train_time 0.0390 (0.0428)
record: (train_acc, test_acc) (0.8291000253558158, 0.5960000157356262)
last accs (train_acc, test_acc) (0.8435000252127648, 0.5790000557899475)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.38it/s] 12%|#1        | 3/26 [00:00<00:02, 11.38it/s] 27%|##6       | 7/26 [00:00<00:00, 21.01it/s] 42%|####2     | 11/26 [00:00<00:00, 26.35it/s] 58%|#####7    | 15/26 [00:00<00:00, 29.63it/s] 73%|#######3  | 19/26 [00:00<00:00, 31.67it/s] 88%|########8 | 23/26 [00:00<00:00, 33.19it/s]100%|##########| 26/26 [00:00<00:00, 26.20it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1118 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1119 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1120 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1121 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1122 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1123 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1124 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1125 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1126 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1127 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1128 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1129 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1130 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1131 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1132 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1133 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1134 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1135 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1136 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1137 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1138 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1139 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1140 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1141 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1142 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1143 400
penalty weights 10000.0
Epoch: [43][  26/  26]	Loss 0.000 (0.000)	train_nll   0.28 (  0.28)	train_penalty   0.00 (  0.00)	weight_norm  24.62 ( 24.62)	train_acc   0.87 (  0.84)	train_minacc   0.93 (  0.87)	train_majacc   0.86 (  0.84)	train_corr   0.00 (  0.00)	l1 7.8076 (7.8085)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.88it/s] 23%|##3       | 6/26 [00:00<00:00, 30.53it/s]                                               23%|##3       | 6/26 [00:00<00:00, 30.53it/s] 42%|####2     | 11/26 [00:00<00:00, 37.37it/s] 62%|######1   | 16/26 [00:00<00:00, 41.21it/s]                                                62%|######1   | 16/26 [00:00<00:00, 41.21it/s] 81%|########  | 21/26 [00:00<00:00, 38.84it/s]100%|##########| 26/26 [00:00<00:00, 41.91it/s]100%|##########| 26/26 [00:00<00:00, 35.09it/s]
Test: [   0/  26]	Loss 0.271 (0.271)	test_acc   0.86 (  0.86)	test_minacc   0.88 (  0.88)	test_majacc   0.86 (  0.86)	Loss_d 0.271 (0.271)	test_acc_d   0.86 (  0.86)	test_minacc_d   0.88 (  0.88)	test_majacc_d   0.86 (  0.86)	test_corr_d   0.72 (  0.72)
Test: [  10/  26]	Loss 0.270 (0.281)	test_acc   0.85 (  0.84)	test_minacc   0.89 (  0.87)	test_majacc   0.84 (  0.84)	Loss_d 0.270 (0.281)	test_acc_d   0.85 (  0.84)	test_minacc_d   0.89 (  0.87)	test_majacc_d   0.84 (  0.84)	test_corr_d   0.70 (  0.69)
Test: [  20/  26]	Loss 0.273 (0.283)	test_acc   0.84 (  0.84)	test_minacc   0.83 (  0.86)	test_majacc   0.85 (  0.84)	Loss_d 0.273 (0.283)	test_acc_d   0.84 (  0.84)	test_minacc_d   0.83 (  0.86)	test_majacc_d   0.85 (  0.84)	test_corr_d   0.73 (  0.69)
Test: [  26/  26]	Loss 0.276 (0.283)	test_acc   0.87 (  0.85)	test_minacc   0.93 (  0.87)	test_majacc   0.86 (  0.84)	Loss_d 0.276 (0.283)	test_acc_d   0.87 (  0.85)	test_minacc_d   0.93 (  0.87)	test_majacc_d   0.86 (  0.84)	test_corr_d   0.68 (  0.69)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.31it/s]
Test: [  0/  1]	Loss 2.158 (2.158)	test_acc   0.58 (  0.58)	test_minacc   0.55 (  0.55)	test_majacc   0.83 (  0.83)	Loss_d 2.158 (2.158)	test_acc_d   0.58 (  0.58)	test_minacc_d   0.55 (  0.55)	test_majacc_d   0.83 (  0.83)	test_corr_d   0.26 (  0.26)
Test: [  1/  1]	Loss 2.158 (2.158)	test_acc   0.58 (  0.58)	test_minacc   0.55 (  0.55)	test_majacc   0.83 (  0.83)	Loss_d 2.158 (2.158)	test_acc_d   0.58 (  0.58)	test_minacc_d   0.55 (  0.55)	test_majacc_d   0.83 (  0.83)	test_corr_d   0.26 (  0.26)
Overall Timing[ 43/  1]	epoch_time 0.0402 (0.0435)	validation_time 0.0004 (0.0006)	train_time 0.0398 (0.0427)
record: (train_acc, test_acc) (0.8291000253558158, 0.5960000157356262)
last accs (train_acc, test_acc) (0.8450000262856483, 0.5790000557899475)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:06,  3.96it/s] 19%|#9        | 5/26 [00:00<00:01, 15.75it/s] 35%|###4      | 9/26 [00:00<00:00, 22.63it/s] 50%|#####     | 13/26 [00:00<00:00, 27.11it/s] 65%|######5   | 17/26 [00:00<00:00, 29.56it/s] 81%|########  | 21/26 [00:00<00:00, 31.36it/s] 96%|#########6| 25/26 [00:00<00:00, 33.09it/s]100%|##########| 26/26 [00:01<00:00, 25.50it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1144 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1145 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1146 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1147 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1148 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1149 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1150 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1151 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1152 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1153 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1154 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1155 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1156 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1157 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1158 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1159 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1160 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1161 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1162 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1163 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1164 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1165 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1166 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1167 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1168 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1169 400
penalty weights 10000.0
Epoch: [44][  26/  26]	Loss 0.000 (0.000)	train_nll   0.28 (  0.28)	train_penalty   0.00 (  0.00)	weight_norm  24.62 ( 24.62)	train_acc   0.87 (  0.84)	train_minacc   0.93 (  0.87)	train_majacc   0.86 (  0.84)	train_corr   0.00 (  0.00)	l1 7.8102 (7.8145)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:02, 11.92it/s] 23%|##3       | 6/26 [00:00<00:00, 23.93it/s]                                               23%|##3       | 6/26 [00:00<00:00, 23.93it/s] 42%|####2     | 11/26 [00:00<00:00, 29.66it/s] 62%|######1   | 16/26 [00:00<00:00, 35.30it/s]                                                62%|######1   | 16/26 [00:00<00:00, 35.30it/s] 81%|########  | 21/26 [00:00<00:00, 38.66it/s]100%|##########| 26/26 [00:00<00:00, 41.73it/s]100%|##########| 26/26 [00:00<00:00, 32.54it/s]
Test: [   0/  26]	Loss 0.270 (0.270)	test_acc   0.86 (  0.86)	test_minacc   0.88 (  0.88)	test_majacc   0.86 (  0.86)	Loss_d 0.270 (0.270)	test_acc_d   0.86 (  0.86)	test_minacc_d   0.88 (  0.88)	test_majacc_d   0.86 (  0.86)	test_corr_d   0.72 (  0.72)
Test: [  10/  26]	Loss 0.269 (0.281)	test_acc   0.85 (  0.85)	test_minacc   0.89 (  0.87)	test_majacc   0.84 (  0.84)	Loss_d 0.269 (0.281)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.89 (  0.87)	test_majacc_d   0.84 (  0.84)	test_corr_d   0.70 (  0.69)
Test: [  20/  26]	Loss 0.272 (0.282)	test_acc   0.84 (  0.84)	test_minacc   0.83 (  0.86)	test_majacc   0.85 (  0.84)	Loss_d 0.272 (0.282)	test_acc_d   0.84 (  0.84)	test_minacc_d   0.83 (  0.86)	test_majacc_d   0.85 (  0.84)	test_corr_d   0.73 (  0.69)
Test: [  26/  26]	Loss 0.277 (0.282)	test_acc   0.87 (  0.85)	test_minacc   0.93 (  0.87)	test_majacc   0.86 (  0.84)	Loss_d 0.277 (0.282)	test_acc_d   0.87 (  0.85)	test_minacc_d   0.93 (  0.87)	test_majacc_d   0.86 (  0.84)	test_corr_d   0.68 (  0.69)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 57.68it/s]
Test: [  0/  1]	Loss 2.160 (2.160)	test_acc   0.58 (  0.58)	test_minacc   0.55 (  0.55)	test_majacc   0.83 (  0.83)	Loss_d 2.160 (2.160)	test_acc_d   0.58 (  0.58)	test_minacc_d   0.55 (  0.55)	test_majacc_d   0.83 (  0.83)	test_corr_d   0.26 (  0.26)
Test: [  1/  1]	Loss 2.160 (2.160)	test_acc   0.58 (  0.58)	test_minacc   0.55 (  0.55)	test_majacc   0.83 (  0.83)	Loss_d 2.160 (2.160)	test_acc_d   0.58 (  0.58)	test_minacc_d   0.55 (  0.55)	test_majacc_d   0.83 (  0.83)	test_corr_d   0.26 (  0.26)
Overall Timing[ 44/  1]	epoch_time 0.0435 (0.0435)	validation_time 0.0005 (0.0006)	train_time 0.0430 (0.0428)
record: (train_acc, test_acc) (0.8291000253558158, 0.5960000157356262)
last accs (train_acc, test_acc) (0.8457000274062156, 0.578000009059906)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.60it/s]  8%|7         | 2/26 [00:00<00:03,  6.47it/s] 23%|##3       | 6/26 [00:00<00:01, 17.32it/s] 38%|###8      | 10/26 [00:00<00:00, 23.34it/s] 54%|#####3    | 14/26 [00:00<00:00, 27.14it/s] 69%|######9   | 18/26 [00:00<00:00, 29.65it/s] 85%|########4 | 22/26 [00:00<00:00, 31.65it/s]100%|##########| 26/26 [00:00<00:00, 33.21it/s]100%|##########| 26/26 [00:01<00:00, 24.78it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1170 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1171 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1172 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1173 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1174 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1175 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1176 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1177 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1178 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1179 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1180 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1181 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1182 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1183 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1184 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1185 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1186 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1187 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1188 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1189 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1190 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1191 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1192 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1193 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1194 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1195 400
penalty weights 10000.0
Epoch: [45][  26/  26]	Loss 0.000 (0.000)	train_nll   0.28 (  0.28)	train_penalty   0.00 (  0.00)	weight_norm  24.62 ( 24.62)	train_acc   0.87 (  0.85)	train_minacc   0.93 (  0.87)	train_majacc   0.86 (  0.84)	train_corr   0.00 (  0.00)	l1 7.8197 (7.8173)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s] 15%|#5        | 4/26 [00:00<00:01, 17.82it/s] 35%|###4      | 9/26 [00:00<00:00, 29.14it/s]                                               35%|###4      | 9/26 [00:00<00:00, 29.14it/s] 54%|#####3    | 14/26 [00:00<00:00, 35.40it/s] 73%|#######3  | 19/26 [00:00<00:00, 38.98it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 38.98it/s] 92%|#########2| 24/26 [00:00<00:00, 38.02it/s]100%|##########| 26/26 [00:00<00:00, 33.44it/s]
Test: [   0/  26]	Loss 0.271 (0.271)	test_acc   0.86 (  0.86)	test_minacc   0.88 (  0.88)	test_majacc   0.86 (  0.86)	Loss_d 0.271 (0.271)	test_acc_d   0.86 (  0.86)	test_minacc_d   0.88 (  0.88)	test_majacc_d   0.86 (  0.86)	test_corr_d   0.72 (  0.72)
Test: [  10/  26]	Loss 0.269 (0.281)	test_acc   0.85 (  0.84)	test_minacc   0.89 (  0.87)	test_majacc   0.84 (  0.84)	Loss_d 0.269 (0.281)	test_acc_d   0.85 (  0.84)	test_minacc_d   0.89 (  0.87)	test_majacc_d   0.84 (  0.84)	test_corr_d   0.70 (  0.69)
Test: [  20/  26]	Loss 0.272 (0.282)	test_acc   0.84 (  0.84)	test_minacc   0.83 (  0.86)	test_majacc   0.85 (  0.84)	Loss_d 0.272 (0.282)	test_acc_d   0.84 (  0.84)	test_minacc_d   0.83 (  0.86)	test_majacc_d   0.85 (  0.84)	test_corr_d   0.73 (  0.69)
Test: [  26/  26]	Loss 0.276 (0.282)	test_acc   0.87 (  0.85)	test_minacc   0.93 (  0.87)	test_majacc   0.86 (  0.84)	Loss_d 0.276 (0.282)	test_acc_d   0.87 (  0.85)	test_minacc_d   0.93 (  0.87)	test_majacc_d   0.86 (  0.84)	test_corr_d   0.68 (  0.69)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.01it/s]
Test: [  0/  1]	Loss 2.164 (2.164)	test_acc   0.58 (  0.58)	test_minacc   0.55 (  0.55)	test_majacc   0.83 (  0.83)	Loss_d 2.164 (2.164)	test_acc_d   0.58 (  0.58)	test_minacc_d   0.55 (  0.55)	test_majacc_d   0.83 (  0.83)	test_corr_d   0.26 (  0.26)
Test: [  1/  1]	Loss 2.164 (2.164)	test_acc   0.58 (  0.58)	test_minacc   0.55 (  0.55)	test_majacc   0.83 (  0.83)	Loss_d 2.164 (2.164)	test_acc_d   0.58 (  0.58)	test_minacc_d   0.55 (  0.55)	test_majacc_d   0.83 (  0.83)	test_corr_d   0.26 (  0.26)
Overall Timing[ 45/  1]	epoch_time 0.0439 (0.0435)	validation_time 0.0004 (0.0006)	train_time 0.0434 (0.0428)
record: (train_acc, test_acc) (0.8291000253558158, 0.5960000157356262)
last accs (train_acc, test_acc) (0.8453000274300575, 0.578000009059906)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.10it/s] 19%|#9        | 5/26 [00:00<00:00, 23.09it/s] 35%|###4      | 9/26 [00:00<00:00, 28.72it/s] 50%|#####     | 13/26 [00:00<00:00, 31.11it/s] 65%|######5   | 17/26 [00:00<00:00, 32.04it/s] 81%|########  | 21/26 [00:00<00:00, 33.00it/s] 96%|#########6| 25/26 [00:00<00:00, 34.11it/s]100%|##########| 26/26 [00:00<00:00, 29.05it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1196 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1197 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1198 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1199 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1200 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1201 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1202 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1203 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1204 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1205 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1206 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1207 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1208 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1209 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1210 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1211 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1212 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1213 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1214 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1215 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1216 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1217 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1218 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1219 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1220 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1221 400
penalty weights 10000.0
Epoch: [46][  26/  26]	Loss 0.000 (0.000)	train_nll   0.28 (  0.28)	train_penalty   0.00 (  0.00)	weight_norm  24.62 ( 24.62)	train_acc   0.87 (  0.85)	train_minacc   0.93 (  0.87)	train_majacc   0.86 (  0.84)	train_corr   0.00 (  0.00)	l1 7.8229 (7.8164)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:02,  8.53it/s] 19%|#9        | 5/26 [00:00<00:01, 16.64it/s] 38%|###8      | 10/26 [00:00<00:00, 27.63it/s]                                                38%|###8      | 10/26 [00:00<00:00, 27.63it/s] 58%|#####7    | 15/26 [00:00<00:00, 31.20it/s] 77%|#######6  | 20/26 [00:00<00:00, 36.48it/s]                                                77%|#######6  | 20/26 [00:00<00:00, 36.48it/s] 96%|#########6| 25/26 [00:00<00:00, 39.63it/s]100%|##########| 26/26 [00:00<00:00, 30.06it/s]
Test: [   0/  26]	Loss 0.271 (0.271)	test_acc   0.86 (  0.86)	test_minacc   0.88 (  0.88)	test_majacc   0.86 (  0.86)	Loss_d 0.271 (0.271)	test_acc_d   0.86 (  0.86)	test_minacc_d   0.88 (  0.88)	test_majacc_d   0.86 (  0.86)	test_corr_d   0.72 (  0.72)
Test: [  10/  26]	Loss 0.270 (0.281)	test_acc   0.85 (  0.84)	test_minacc   0.89 (  0.87)	test_majacc   0.84 (  0.84)	Loss_d 0.270 (0.281)	test_acc_d   0.85 (  0.84)	test_minacc_d   0.89 (  0.87)	test_majacc_d   0.84 (  0.84)	test_corr_d   0.70 (  0.69)
Test: [  20/  26]	Loss 0.272 (0.282)	test_acc   0.84 (  0.84)	test_minacc   0.83 (  0.86)	test_majacc   0.85 (  0.84)	Loss_d 0.272 (0.282)	test_acc_d   0.84 (  0.84)	test_minacc_d   0.83 (  0.86)	test_majacc_d   0.85 (  0.84)	test_corr_d   0.73 (  0.69)
Test: [  26/  26]	Loss 0.276 (0.282)	test_acc   0.87 (  0.84)	test_minacc   0.93 (  0.87)	test_majacc   0.86 (  0.84)	Loss_d 0.276 (0.282)	test_acc_d   0.87 (  0.84)	test_minacc_d   0.93 (  0.87)	test_majacc_d   0.86 (  0.84)	test_corr_d   0.68 (  0.69)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.61it/s]
Test: [  0/  1]	Loss 2.161 (2.161)	test_acc   0.58 (  0.58)	test_minacc   0.55 (  0.55)	test_majacc   0.82 (  0.82)	Loss_d 2.161 (2.161)	test_acc_d   0.58 (  0.58)	test_minacc_d   0.55 (  0.55)	test_majacc_d   0.82 (  0.82)	test_corr_d   0.26 (  0.26)
Test: [  1/  1]	Loss 2.161 (2.161)	test_acc   0.58 (  0.58)	test_minacc   0.55 (  0.55)	test_majacc   0.82 (  0.82)	Loss_d 2.161 (2.161)	test_acc_d   0.58 (  0.58)	test_minacc_d   0.55 (  0.55)	test_majacc_d   0.82 (  0.82)	test_corr_d   0.26 (  0.26)
Overall Timing[ 46/  1]	epoch_time 0.0413 (0.0434)	validation_time 0.0004 (0.0006)	train_time 0.0409 (0.0427)
record: (train_acc, test_acc) (0.8291000253558158, 0.5960000157356262)
last accs (train_acc, test_acc) (0.8445000251531601, 0.578000009059906)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.97it/s] 19%|#9        | 5/26 [00:00<00:00, 25.45it/s] 35%|###4      | 9/26 [00:00<00:00, 30.23it/s] 50%|#####     | 13/26 [00:00<00:00, 30.96it/s] 65%|######5   | 17/26 [00:00<00:00, 33.04it/s] 81%|########  | 21/26 [00:00<00:00, 34.45it/s] 96%|#########6| 25/26 [00:00<00:00, 35.71it/s]100%|##########| 26/26 [00:00<00:00, 30.07it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1222 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1223 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1224 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1225 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1226 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1227 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1228 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1229 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1230 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1231 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1232 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1233 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1234 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1235 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1236 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1237 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1238 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1239 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1240 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1241 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1242 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1243 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1244 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1245 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1246 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1247 400
penalty weights 10000.0
Epoch: [47][  26/  26]	Loss 0.000 (0.000)	train_nll   0.28 (  0.28)	train_penalty   0.00 (  0.00)	weight_norm  24.62 ( 24.62)	train_acc   0.87 (  0.84)	train_minacc   0.93 (  0.87)	train_majacc   0.86 (  0.84)	train_corr   0.00 (  0.00)	l1 7.8264 (7.8210)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.18it/s] 23%|##3       | 6/26 [00:00<00:00, 28.81it/s]                                               23%|##3       | 6/26 [00:00<00:00, 28.81it/s] 42%|####2     | 11/26 [00:00<00:00, 36.14it/s] 62%|######1   | 16/26 [00:00<00:00, 40.01it/s]                                                62%|######1   | 16/26 [00:00<00:00, 40.01it/s] 81%|########  | 21/26 [00:00<00:00, 38.51it/s]100%|##########| 26/26 [00:00<00:00, 41.62it/s]100%|##########| 26/26 [00:00<00:00, 33.92it/s]
Test: [   0/  26]	Loss 0.270 (0.270)	test_acc   0.86 (  0.86)	test_minacc   0.88 (  0.88)	test_majacc   0.86 (  0.86)	Loss_d 0.270 (0.270)	test_acc_d   0.86 (  0.86)	test_minacc_d   0.88 (  0.88)	test_majacc_d   0.86 (  0.86)	test_corr_d   0.72 (  0.72)
Test: [  10/  26]	Loss 0.269 (0.281)	test_acc   0.85 (  0.85)	test_minacc   0.89 (  0.87)	test_majacc   0.84 (  0.84)	Loss_d 0.269 (0.281)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.89 (  0.87)	test_majacc_d   0.84 (  0.84)	test_corr_d   0.70 (  0.69)
Test: [  20/  26]	Loss 0.272 (0.282)	test_acc   0.84 (  0.84)	test_minacc   0.83 (  0.86)	test_majacc   0.85 (  0.84)	Loss_d 0.272 (0.282)	test_acc_d   0.84 (  0.84)	test_minacc_d   0.83 (  0.86)	test_majacc_d   0.85 (  0.84)	test_corr_d   0.73 (  0.69)
Test: [  26/  26]	Loss 0.276 (0.282)	test_acc   0.87 (  0.85)	test_minacc   0.93 (  0.87)	test_majacc   0.86 (  0.84)	Loss_d 0.276 (0.282)	test_acc_d   0.87 (  0.85)	test_minacc_d   0.93 (  0.87)	test_majacc_d   0.86 (  0.84)	test_corr_d   0.68 (  0.69)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.17it/s]
Test: [  0/  1]	Loss 2.166 (2.166)	test_acc   0.58 (  0.58)	test_minacc   0.55 (  0.55)	test_majacc   0.83 (  0.83)	Loss_d 2.166 (2.166)	test_acc_d   0.58 (  0.58)	test_minacc_d   0.55 (  0.55)	test_majacc_d   0.83 (  0.83)	test_corr_d   0.26 (  0.26)
Test: [  1/  1]	Loss 2.166 (2.166)	test_acc   0.58 (  0.58)	test_minacc   0.55 (  0.55)	test_majacc   0.83 (  0.83)	Loss_d 2.166 (2.166)	test_acc_d   0.58 (  0.58)	test_minacc_d   0.55 (  0.55)	test_majacc_d   0.83 (  0.83)	test_corr_d   0.26 (  0.26)
Overall Timing[ 47/  1]	epoch_time 0.0435 (0.0434)	validation_time 0.0003 (0.0005)	train_time 0.0431 (0.0427)
record: (train_acc, test_acc) (0.8291000253558158, 0.5960000157356262)
last accs (train_acc, test_acc) (0.8452000309228898, 0.5770000219345093)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.05it/s] 15%|#5        | 4/26 [00:00<00:01, 18.11it/s] 31%|###       | 8/26 [00:00<00:00, 25.81it/s] 46%|####6     | 12/26 [00:00<00:00, 29.45it/s] 62%|######1   | 16/26 [00:00<00:00, 31.71it/s] 77%|#######6  | 20/26 [00:00<00:00, 33.37it/s] 92%|#########2| 24/26 [00:00<00:00, 34.57it/s]100%|##########| 26/26 [00:00<00:00, 28.72it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1248 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1249 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1250 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1251 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1252 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1253 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1254 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1255 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1256 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1257 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1258 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1259 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1260 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1261 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1262 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1263 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1264 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1265 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1266 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1267 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1268 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1269 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1270 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1271 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1272 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1273 400
penalty weights 10000.0
Epoch: [48][  26/  26]	Loss 0.000 (0.000)	train_nll   0.27 (  0.28)	train_penalty   0.00 (  0.00)	weight_norm  24.62 ( 24.62)	train_acc   0.87 (  0.85)	train_minacc   0.93 (  0.87)	train_majacc   0.86 (  0.84)	train_corr   0.00 (  0.00)	l1 7.8217 (7.8224)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.93it/s] 27%|##6       | 7/26 [00:00<00:00, 33.09it/s]                                               27%|##6       | 7/26 [00:00<00:00, 33.09it/s] 46%|####6     | 12/26 [00:00<00:00, 38.87it/s] 65%|######5   | 17/26 [00:00<00:00, 36.81it/s]                                                65%|######5   | 17/26 [00:00<00:00, 36.81it/s] 85%|########4 | 22/26 [00:00<00:00, 39.70it/s]100%|##########| 26/26 [00:00<00:00, 34.54it/s]
Test: [   0/  26]	Loss 0.270 (0.270)	test_acc   0.86 (  0.86)	test_minacc   0.88 (  0.88)	test_majacc   0.86 (  0.86)	Loss_d 0.270 (0.270)	test_acc_d   0.86 (  0.86)	test_minacc_d   0.88 (  0.88)	test_majacc_d   0.86 (  0.86)	test_corr_d   0.72 (  0.72)
Test: [  10/  26]	Loss 0.269 (0.280)	test_acc   0.85 (  0.84)	test_minacc   0.89 (  0.87)	test_majacc   0.84 (  0.84)	Loss_d 0.269 (0.280)	test_acc_d   0.85 (  0.84)	test_minacc_d   0.89 (  0.87)	test_majacc_d   0.84 (  0.84)	test_corr_d   0.70 (  0.69)
Test: [  20/  26]	Loss 0.271 (0.281)	test_acc   0.85 (  0.84)	test_minacc   0.83 (  0.86)	test_majacc   0.85 (  0.84)	Loss_d 0.271 (0.281)	test_acc_d   0.85 (  0.84)	test_minacc_d   0.83 (  0.86)	test_majacc_d   0.85 (  0.84)	test_corr_d   0.73 (  0.69)
Test: [  26/  26]	Loss 0.274 (0.281)	test_acc   0.87 (  0.85)	test_minacc   0.93 (  0.87)	test_majacc   0.86 (  0.84)	Loss_d 0.274 (0.281)	test_acc_d   0.87 (  0.85)	test_minacc_d   0.93 (  0.87)	test_majacc_d   0.86 (  0.84)	test_corr_d   0.68 (  0.69)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 64.23it/s]
Test: [  0/  1]	Loss 2.164 (2.164)	test_acc   0.58 (  0.58)	test_minacc   0.55 (  0.55)	test_majacc   0.83 (  0.83)	Loss_d 2.164 (2.164)	test_acc_d   0.58 (  0.58)	test_minacc_d   0.55 (  0.55)	test_majacc_d   0.83 (  0.83)	test_corr_d   0.26 (  0.26)
Test: [  1/  1]	Loss 2.164 (2.164)	test_acc   0.58 (  0.58)	test_minacc   0.55 (  0.55)	test_majacc   0.83 (  0.83)	Loss_d 2.164 (2.164)	test_acc_d   0.58 (  0.58)	test_minacc_d   0.55 (  0.55)	test_majacc_d   0.83 (  0.83)	test_corr_d   0.26 (  0.26)
Overall Timing[ 48/  1]	epoch_time 0.0400 (0.0434)	validation_time 0.0005 (0.0005)	train_time 0.0395 (0.0427)
record: (train_acc, test_acc) (0.8291000253558158, 0.5960000157356262)
last accs (train_acc, test_acc) (0.8456000239253044, 0.5770000219345093)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.15it/s] 19%|#9        | 5/26 [00:00<00:01, 17.98it/s] 35%|###4      | 9/26 [00:00<00:00, 24.15it/s] 50%|#####     | 13/26 [00:00<00:00, 27.74it/s] 65%|######5   | 17/26 [00:00<00:00, 30.20it/s] 81%|########  | 21/26 [00:00<00:00, 32.20it/s] 96%|#########6| 25/26 [00:00<00:00, 33.11it/s]100%|##########| 26/26 [00:00<00:00, 26.46it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1274 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1275 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1276 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1277 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1278 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1279 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1280 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1281 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1282 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1283 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1284 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1285 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1286 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1287 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1288 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1289 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1290 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1291 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1292 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1293 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1294 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1295 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1296 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1297 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1298 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1299 400
penalty weights 10000.0
Epoch: [49][  26/  26]	Loss 0.000 (0.000)	train_nll   0.28 (  0.28)	train_penalty   0.00 (  0.00)	weight_norm  24.62 ( 24.62)	train_acc   0.87 (  0.85)	train_minacc   0.93 (  0.87)	train_majacc   0.86 (  0.84)	train_corr   0.00 (  0.00)	l1 7.8284 (7.8323)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.99it/s] 23%|##3       | 6/26 [00:00<00:00, 29.76it/s]                                               23%|##3       | 6/26 [00:00<00:00, 29.76it/s] 42%|####2     | 11/26 [00:00<00:00, 36.00it/s] 62%|######1   | 16/26 [00:00<00:00, 40.55it/s]                                                62%|######1   | 16/26 [00:00<00:00, 40.55it/s] 81%|########  | 21/26 [00:00<00:00, 40.66it/s]100%|##########| 26/26 [00:00<00:00, 42.95it/s]100%|##########| 26/26 [00:00<00:00, 35.50it/s]
Test: [   0/  26]	Loss 0.268 (0.268)	test_acc   0.86 (  0.86)	test_minacc   0.88 (  0.88)	test_majacc   0.86 (  0.86)	Loss_d 0.268 (0.268)	test_acc_d   0.86 (  0.86)	test_minacc_d   0.88 (  0.88)	test_majacc_d   0.86 (  0.86)	test_corr_d   0.72 (  0.72)
Test: [  10/  26]	Loss 0.267 (0.279)	test_acc   0.85 (  0.85)	test_minacc   0.89 (  0.87)	test_majacc   0.84 (  0.84)	Loss_d 0.267 (0.279)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.89 (  0.87)	test_majacc_d   0.84 (  0.84)	test_corr_d   0.70 (  0.69)
Test: [  20/  26]	Loss 0.271 (0.280)	test_acc   0.85 (  0.85)	test_minacc   0.83 (  0.86)	test_majacc   0.85 (  0.84)	Loss_d 0.271 (0.280)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.83 (  0.86)	test_majacc_d   0.85 (  0.84)	test_corr_d   0.73 (  0.69)
Test: [  26/  26]	Loss 0.276 (0.280)	test_acc   0.87 (  0.85)	test_minacc   0.93 (  0.87)	test_majacc   0.86 (  0.84)	Loss_d 0.276 (0.280)	test_acc_d   0.87 (  0.85)	test_minacc_d   0.93 (  0.87)	test_majacc_d   0.86 (  0.84)	test_corr_d   0.68 (  0.69)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.10it/s]
Test: [  0/  1]	Loss 2.172 (2.172)	test_acc   0.58 (  0.58)	test_minacc   0.55 (  0.55)	test_majacc   0.83 (  0.83)	Loss_d 2.172 (2.172)	test_acc_d   0.58 (  0.58)	test_minacc_d   0.55 (  0.55)	test_majacc_d   0.83 (  0.83)	test_corr_d   0.26 (  0.26)
Test: [  1/  1]	Loss 2.172 (2.172)	test_acc   0.58 (  0.58)	test_minacc   0.55 (  0.55)	test_majacc   0.83 (  0.83)	Loss_d 2.172 (2.172)	test_acc_d   0.58 (  0.58)	test_minacc_d   0.55 (  0.55)	test_majacc_d   0.83 (  0.83)	test_corr_d   0.26 (  0.26)
Overall Timing[ 49/  1]	epoch_time 0.0430 (0.0433)	validation_time 0.0004 (0.0005)	train_time 0.0425 (0.0427)
record: (train_acc, test_acc) (0.8291000253558158, 0.5960000157356262)
last accs (train_acc, test_acc) (0.8459000273942947, 0.5750000476837158)
done saving aggregate.csv to ./aggregate.csv
wandb: - 0.163 MB of 0.163 MB uploadedwandb: \ 0.163 MB of 0.163 MB uploadedwandb: | 0.163 MB of 0.163 MB uploadedwandb: / 0.163 MB of 0.163 MB uploadedwandb: - 0.163 MB of 0.163 MB uploadedwandb: \ 0.163 MB of 0.163 MB uploadedwandb: | 0.163 MB of 0.163 MB uploadedwandb: / 0.163 MB of 0.163 MB uploadedwandb: - 0.163 MB of 0.163 MB uploadedwandb: \ 0.163 MB of 0.163 MB uploadedwandb: | 0.163 MB of 0.163 MB uploadedwandb: / 0.163 MB of 0.163 MB uploadedwandb: - 0.163 MB of 0.163 MB uploadedwandb: \ 0.186 MB of 0.194 MB uploaded (0.003 MB deduped)wandb: | 0.469 MB of 0.469 MB uploaded (0.003 MB deduped)wandb: 
wandb: Run history:
wandb:                                                                            global_step ▁▁▁▁▂▂▂▂▂▃▃▃▃▃▃▄▄▄▄▄▅▅▅▅▅▅▆▆▆▆▆▆▇▇▇▇▇███
wandb:      resnet18-usc-unsigned/baseline/prune_rate=1.0/151/logs/diagnostics/epoch_time_val █▁▁▂▁▂▂▁▂▂▂▂▂▁▁▂▂▂▂▂▃▁▁▂▁▂▂▃▂▂▂▂▂▂▁▁▂▁▂▂
wandb:      resnet18-usc-unsigned/baseline/prune_rate=1.0/151/logs/diagnostics/train_time_val █▁▂▂▂▃▂▂▂▂▂▂▃▂▂▂▂▃▂▂▃▁▁▂▁▂▃▃▂▂▂▂▂▂▁▁▂▂▂▂
wandb: resnet18-usc-unsigned/baseline/prune_rate=1.0/151/logs/diagnostics/validation_time_val █▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:                     resnet18-usc-unsigned/baseline/prune_rate=1.0/151/logs/global_step ▁▁▁▁▂▂▂▂▂▃▃▃▃▃▃▄▄▄▄▄▅▅▅▅▅▅▆▆▆▆▆▆▇▇▇▇▇███
wandb:                   resnet18-usc-unsigned/baseline/prune_rate=1.0/151/logs/test/Loss_avg ▁▁▂▂▂▂▃▃▅▆▇█▅▃▂▃▅▆▆▆▇▆▆▇▆▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇
wandb:                 resnet18-usc-unsigned/baseline/prune_rate=1.0/151/logs/test/Loss_d_avg ▁▁▂▂▂▂▃▃▅▆▇█▅▃▂▃▅▆▆▆▇▆▆▇▆▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇
wandb:                 resnet18-usc-unsigned/baseline/prune_rate=1.0/151/logs/test/Loss_d_val ▁▁▂▂▂▂▃▃▅▆▇█▅▃▂▃▅▆▆▆▇▆▆▇▆▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇
wandb:                   resnet18-usc-unsigned/baseline/prune_rate=1.0/151/logs/test/Loss_val ▁▁▂▂▂▂▃▃▅▆▇█▅▃▂▃▅▆▆▆▇▆▆▇▆▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇
wandb:               resnet18-usc-unsigned/baseline/prune_rate=1.0/151/logs/test/test_acc_avg ▁▂▂▂▃▃▃▄▄▄▅▆▆▇█▇▇███████████████████████
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/151/logs/test/test_acc_d_avg ▁▂▂▂▃▃▃▄▄▄▅▆▆▇█▇▇███████████████████████
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/151/logs/test/test_acc_d_val ▁▂▂▂▃▃▃▄▄▄▅▆▆▇█▇▇███████████████████████
wandb:               resnet18-usc-unsigned/baseline/prune_rate=1.0/151/logs/test/test_acc_val ▁▂▂▂▃▃▃▄▄▄▅▆▆▇█▇▇███████████████████████
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/151/logs/test/test_corr_d_avg █▇▇▇▆▇▆▆▆▅▃▂▃▁▁▂▂▁▁▂▁▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/151/logs/test/test_corr_d_val █▇▇▇▆▇▆▆▆▅▃▂▃▁▁▂▂▁▁▂▁▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/151/logs/test/test_majacc_avg ███▇▆▇▆▆▅▆▅▄▁▂▂▃▄▁▁▃▁▂▃▃▃▃▂▂▃▃▂▃▃▂▂▃▃▂▃▃
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/151/logs/test/test_majacc_d_avg ███▇▆▇▆▆▅▆▅▄▁▂▂▃▄▁▁▃▁▂▃▃▃▃▂▂▃▃▂▃▃▂▂▃▃▂▃▃
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/151/logs/test/test_majacc_d_val ███▇▆▇▆▆▅▆▅▄▁▂▂▃▄▁▁▃▁▂▃▃▃▃▂▂▃▃▂▃▃▂▂▃▃▂▃▃
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/151/logs/test/test_majacc_val ███▇▆▇▆▆▅▆▅▄▁▂▂▃▄▁▁▃▁▂▃▃▃▃▂▂▃▃▂▃▃▂▂▃▃▂▃▃
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/151/logs/test/test_minacc_avg ▁▂▂▂▃▃▃▄▄▄▅▆▆▇█▇▇███████████████████████
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/151/logs/test/test_minacc_d_avg ▁▂▂▂▃▃▃▄▄▄▅▆▆▇█▇▇███████████████████████
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/151/logs/test/test_minacc_d_val ▁▂▂▂▃▃▃▄▄▄▅▆▆▇█▇▇███████████████████████
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/151/logs/test/test_minacc_val ▁▂▂▂▃▃▃▄▄▄▅▆▆▇█▇▇███████████████████████
wandb:                  resnet18-usc-unsigned/baseline/prune_rate=1.0/151/logs/train/Loss_avg █▆▆▆▅▅▅▅▄▄▄▄▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:                  resnet18-usc-unsigned/baseline/prune_rate=1.0/151/logs/train/Loss_val ███▇▆▆▆▆▅▄▄▃▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:                    resnet18-usc-unsigned/baseline/prune_rate=1.0/151/logs/train/l1_avg █▇▆▅▆▆▆▅▆▆▆██▂▁▁▄▅▅▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇█████
wandb:                    resnet18-usc-unsigned/baseline/prune_rate=1.0/151/logs/train/l1_val ▆▆▄▄▄▃▄▃▃▄▆█▃▂▁▂▄▆▆▅▇▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/151/logs/train/train_acc_avg ▁▄▄▄▅▅▅▅▇▇▇█▇▅▃▃▄▅▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/151/logs/train/train_acc_val ▂▁▁▂▃▄▅▅▅▇██▇▃▃▃▃▃▃▄▄▅▄▃▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/151/logs/train/train_corr_avg ▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/151/logs/train/train_corr_val ▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/151/logs/train/train_majacc_avg ▅███▇▇▆▆▆▆▆▇▅▃▁▁▂▂▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/151/logs/train/train_majacc_val █▇██▇█▇▇▇▇▇▇▆▂▂▁▂▁▁▂▁▃▂▁▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/151/logs/train/train_minacc_avg ▂▁▁▂▃▃▄▄▅▅▆▆▇▇██████████████████████████
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/151/logs/train/train_minacc_val ▂▁▁▁▃▃▄▄▅▆▇▇▇▇▇▇▇███████████████████████
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/151/logs/train/train_nll_avg █▅▅▅▄▃▃▃▂▂▂▁▁▃▃▃▃▂▃▃▃▃▃▃▃▃▃▃▃▃▃▃▂▂▂▂▂▂▂▂
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/151/logs/train/train_nll_val ██▇▇▅▅▅▄▃▂▂▁▂▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄
wandb:         resnet18-usc-unsigned/baseline/prune_rate=1.0/151/logs/train/train_penalty_avg █▄▃▃▂▂▂▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:         resnet18-usc-unsigned/baseline/prune_rate=1.0/151/logs/train/train_penalty_val ▇██▇▄▃▃▃▂▂▁▁▂▁▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:           resnet18-usc-unsigned/baseline/prune_rate=1.0/151/logs/train/weight_norm_avg ▁▅▅▅▆▆▆▆▆▆▇▇████████████████████████████
wandb:           resnet18-usc-unsigned/baseline/prune_rate=1.0/151/logs/train/weight_norm_val ▁▃▃▃▄▄▄▄▅▅▆▆████████████████████████████
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/151/logs/train/zero_count_avg ▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/151/logs/train/zero_count_val ▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb: 
wandb: Run summary:
wandb:                                                                            global_step 49
wandb:      resnet18-usc-unsigned/baseline/prune_rate=1.0/151/logs/diagnostics/epoch_time_val 0.043
wandb:      resnet18-usc-unsigned/baseline/prune_rate=1.0/151/logs/diagnostics/train_time_val 0.04255
wandb: resnet18-usc-unsigned/baseline/prune_rate=1.0/151/logs/diagnostics/validation_time_val 0.00043
wandb:                     resnet18-usc-unsigned/baseline/prune_rate=1.0/151/logs/global_step 49
wandb:                   resnet18-usc-unsigned/baseline/prune_rate=1.0/151/logs/test/Loss_avg 2.17185
wandb:                 resnet18-usc-unsigned/baseline/prune_rate=1.0/151/logs/test/Loss_d_avg 2.17185
wandb:                 resnet18-usc-unsigned/baseline/prune_rate=1.0/151/logs/test/Loss_d_val 2.17185
wandb:                   resnet18-usc-unsigned/baseline/prune_rate=1.0/151/logs/test/Loss_val 2.17185
wandb:               resnet18-usc-unsigned/baseline/prune_rate=1.0/151/logs/test/test_acc_avg 0.575
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/151/logs/test/test_acc_d_avg 0.575
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/151/logs/test/test_acc_d_val 0.575
wandb:               resnet18-usc-unsigned/baseline/prune_rate=1.0/151/logs/test/test_acc_val 0.575
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/151/logs/test/test_corr_d_avg 0.26217
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/151/logs/test/test_corr_d_val 0.26217
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/151/logs/test/test_majacc_avg 0.83
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/151/logs/test/test_majacc_d_avg 0.83
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/151/logs/test/test_majacc_d_val 0.83
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/151/logs/test/test_majacc_val 0.83
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/151/logs/test/test_minacc_avg 0.54667
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/151/logs/test/test_minacc_d_avg 0.54667
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/151/logs/test/test_minacc_d_val 0.54667
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/151/logs/test/test_minacc_val 0.54667
wandb:                  resnet18-usc-unsigned/baseline/prune_rate=1.0/151/logs/train/Loss_avg 3e-05
wandb:                  resnet18-usc-unsigned/baseline/prune_rate=1.0/151/logs/train/Loss_val 3e-05
wandb:                    resnet18-usc-unsigned/baseline/prune_rate=1.0/151/logs/train/l1_avg 7.83234
wandb:                    resnet18-usc-unsigned/baseline/prune_rate=1.0/151/logs/train/l1_val 7.82841
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/151/logs/train/train_acc_avg 0.8458
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/151/logs/train/train_acc_val 0.872
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/151/logs/train/train_corr_avg 0.0
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/151/logs/train/train_corr_val 0.0
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/151/logs/train/train_majacc_avg 0.84192
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/151/logs/train/train_majacc_val 0.85854
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/151/logs/train/train_minacc_avg 0.8661
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/151/logs/train/train_minacc_val 0.93333
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/151/logs/train/train_nll_avg 0.28117
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/151/logs/train/train_nll_val 0.27633
wandb:         resnet18-usc-unsigned/baseline/prune_rate=1.0/151/logs/train/train_penalty_avg 0.0
wandb:         resnet18-usc-unsigned/baseline/prune_rate=1.0/151/logs/train/train_penalty_val 1e-05
wandb:           resnet18-usc-unsigned/baseline/prune_rate=1.0/151/logs/train/weight_norm_avg 24.61884
wandb:           resnet18-usc-unsigned/baseline/prune_rate=1.0/151/logs/train/weight_norm_val 24.61877
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/151/logs/train/zero_count_avg 0.0
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/151/logs/train/zero_count_val 0.0
wandb: 
wandb: 🚀 View run name_random at: https://wandb.ai/janezdu-uiuc/irm/runs/bkatsav5
wandb: ⭐️ View project at: https://wandb.ai/janezdu-uiuc/irm
wandb: Synced 5 W&B file(s), 0 media file(s), 2 artifact file(s) and 1 other file(s)
wandb: Find logs at: ./wandb/run-20240907_202839-bkatsav5/logs
wandb: WARNING The new W&B backend becomes opt-out in version 0.18.0; try it out with `wandb.require("core")`! See https://wandb.me/wandb-core for more information.
wandb: Currently logged in as: janezdu (janezdu-uiuc). Use `wandb login --relogin` to force relogin
wandb: wandb version 0.17.9 is available!  To upgrade, please run:
wandb:  $ pip install wandb --upgrade
wandb: Tracking run with wandb version 0.17.7
wandb: Run data is saved locally in /scratch/users/zd16/sparseIRM-resnet-ver/wandb/run-20240907_203144-8a1chfok
wandb: Run `wandb offline` to turn off syncing.
wandb: Syncing run name_random
wandb: ⭐️ View project at https://wandb.ai/janezdu-uiuc/irm
wandb: 🚀 View run at https://wandb.ai/janezdu-uiuc/irm/runs/8a1chfok
=> Reading YAML config from configs/smallscale/resnet18/resnet18-usc-unsigned.yaml
Namespace(data='dataset/', optimizer='adam', weight_opt='adam', set='mnistcifar', arch='ResNet18', config='configs/smallscale/resnet18/resnet18-usc-unsigned.yaml', log_dir=None, workers=4, epochs=50, start_epoch=None, batch_size=390, lr=0.006, warmup_length=0, momentum=0.9, weight_decay=0.0, print_freq=10, num_classes=1, resume='', resume_train_weights='', evaluate=False, pretrained=None, pretrained_distill=None, alpha_distill=0.95, T_distill=2, seed=0, multigpu=[0], lr_policy='cosine_lr', lr_adjust=30, lr_gamma=0.1, name='baseline', save_every=-1, prune_rate=1.0, param_prune_rate=0.0, pr_start=1.0, low_data=1, width_mult=1.0, nesterov=False, threetimes=False, random_subnet=False, one_batch=False, conv_type='DenseConv', freeze_weights=False, st=False, mode='fan_in', nonlinearity='relu', bn_type='LearnedBatchNorm', init='kaiming_normal', no_bn_decay=False, scale_fan=False, first_layer_dense=False, last_layer_dense=True, approx=False, zero=False, flip=False, bs=False, gumbel_sample=False, multiply_prob=False, no_multiply=False, multiply_cont=False, multiply_prob_bs=False, indiv=False, label_smoothing=None, first_layer_type=None, trainer='default', score_init_constant=1.0, K=1, update_freq=20, D=0.01, T=1, TA=True, TA2=False, TA_grow=False, center=False, straight_through=False, PLA_factor=0.1, PLA_patience=10, gradient_loss_para=0, abs_loss_para=0, thres=0.9, runs_name='name_random', resume_compare_loss1='', resume_compare_loss2='', init_weights='', trained_mask='', weight_rescaling=False, constrain_by_layer=False, weight_rescaling_data=False, use_running_stats=False, not_clipping=False, rescaling_para=False, lasso_para=0, dont_freeze_weights=False, iterative=True, prob_by_weight=False, rescale_at_fix_subnet=False, train_weights_at_the_same_time=False, sample_from_training_set=False, load_true_para=False, distill=False, finetune=False, stablize=False, prev_best=0, weight_opt_lr=0.0006, n=500, ts=0.28, te=0.6, d=20000, s=80, c=0.75, init_prob=False, thres_before=0.001, wide_ratio=0.001, noise=1, cal_p_q=False, just_finetune=False, snip=False, envs_num=2, l2_regularizer_weight=0.001, data_num=50000, env_type='linear', irm_type='irmv1', hidden_dim=390, penalty_anneal_iters=400, penalty_weight=10000.0, grayscale_model=0, weight_lr_schedule=False, fix_subnet=False, freeze_weight=False, step='ours', prior_sd_coef=0, dim_inv=2, variance_gamma=1.0, dim_spu=10, image_scale=32, cons_ratio='0.999_0.7_0.1', noise_ratio=0.2, step_gamma=0.1, step_round=3, inner_steps=1, use_pgd=False, z=15.0, pgd_anneal_iters=600, pgd_skip_steps=50, fraction_z=0.95)
=> Creating model 'ResNet18'
Here!!!!!!!!
==> Conv Type: DenseConv
==> BN Type: LearnedBatchNorm
<class 'torch.nn.modules.conv.Conv2d'>
<class 'torch.nn.modules.batchnorm.BatchNorm2d'>
==> Building first layer with <class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
ResNet(
  (conv1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
  (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (relu): ReLU(inplace=True)
  (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
  (layer1): Sequential(
    (0): BasicBlock(
      (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (1): BasicBlock(
      (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (layer2): Sequential(
    (0): BasicBlock(
      (conv1): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (downsample): Sequential(
        (0): Conv2d(64, 128, kernel_size=(1, 1), stride=(2, 2), bias=False)
        (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (1): BasicBlock(
      (conv1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (layer3): Sequential(
    (0): BasicBlock(
      (conv1): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (downsample): Sequential(
        (0): Conv2d(128, 256, kernel_size=(1, 1), stride=(2, 2), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (1): BasicBlock(
      (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (layer4): Sequential(
    (0): BasicBlock(
      (conv1): Conv2d(256, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (downsample): Sequential(
        (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (1): BasicBlock(
      (conv1): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (avgpool): AdaptiveAvgPool2d(output_size=1)
  (fc): Conv2d(512, 1, kernel_size=(1, 1), stride=(1, 1), bias=False)
)
=> Parallelizing on [0] gpus
<DEBUG> gradient to module.conv1.weight
<DEBUG> gradient to module.bn1.weight
<DEBUG> gradient to module.bn1.bias
<DEBUG> gradient to module.layer1.0.conv1.weight
<DEBUG> gradient to module.layer1.0.bn1.weight
<DEBUG> gradient to module.layer1.0.bn1.bias
<DEBUG> gradient to module.layer1.0.conv2.weight
<DEBUG> gradient to module.layer1.0.bn2.weight
<DEBUG> gradient to module.layer1.0.bn2.bias
<DEBUG> gradient to module.layer1.1.conv1.weight
<DEBUG> gradient to module.layer1.1.bn1.weight
<DEBUG> gradient to module.layer1.1.bn1.bias
<DEBUG> gradient to module.layer1.1.conv2.weight
<DEBUG> gradient to module.layer1.1.bn2.weight
<DEBUG> gradient to module.layer1.1.bn2.bias
<DEBUG> gradient to module.layer2.0.conv1.weight
<DEBUG> gradient to module.layer2.0.bn1.weight
<DEBUG> gradient to module.layer2.0.bn1.bias
<DEBUG> gradient to module.layer2.0.conv2.weight
<DEBUG> gradient to module.layer2.0.bn2.weight
<DEBUG> gradient to module.layer2.0.bn2.bias
<DEBUG> gradient to module.layer2.0.downsample.0.weight
<DEBUG> gradient to module.layer2.0.downsample.1.weight
<DEBUG> gradient to module.layer2.0.downsample.1.bias
<DEBUG> gradient to module.layer2.1.conv1.weight
<DEBUG> gradient to module.layer2.1.bn1.weight
<DEBUG> gradient to module.layer2.1.bn1.bias
<DEBUG> gradient to module.layer2.1.conv2.weight
<DEBUG> gradient to module.layer2.1.bn2.weight
<DEBUG> gradient to module.layer2.1.bn2.bias
<DEBUG> gradient to module.layer3.0.conv1.weight
<DEBUG> gradient to module.layer3.0.bn1.weight
<DEBUG> gradient to module.layer3.0.bn1.bias
<DEBUG> gradient to module.layer3.0.conv2.weight
<DEBUG> gradient to module.layer3.0.bn2.weight
<DEBUG> gradient to module.layer3.0.bn2.bias
<DEBUG> gradient to module.layer3.0.downsample.0.weight
<DEBUG> gradient to module.layer3.0.downsample.1.weight
<DEBUG> gradient to module.layer3.0.downsample.1.bias
<DEBUG> gradient to module.layer3.1.conv1.weight
<DEBUG> gradient to module.layer3.1.bn1.weight
<DEBUG> gradient to module.layer3.1.bn1.bias
<DEBUG> gradient to module.layer3.1.conv2.weight
<DEBUG> gradient to module.layer3.1.bn2.weight
<DEBUG> gradient to module.layer3.1.bn2.bias
<DEBUG> gradient to module.layer4.0.conv1.weight
<DEBUG> gradient to module.layer4.0.bn1.weight
<DEBUG> gradient to module.layer4.0.bn1.bias
<DEBUG> gradient to module.layer4.0.conv2.weight
<DEBUG> gradient to module.layer4.0.bn2.weight
<DEBUG> gradient to module.layer4.0.bn2.bias
<DEBUG> gradient to module.layer4.0.downsample.0.weight
<DEBUG> gradient to module.layer4.0.downsample.1.weight
<DEBUG> gradient to module.layer4.0.downsample.1.bias
<DEBUG> gradient to module.layer4.1.conv1.weight
<DEBUG> gradient to module.layer4.1.bn1.weight
<DEBUG> gradient to module.layer4.1.bn1.bias
<DEBUG> gradient to module.layer4.1.conv2.weight
<DEBUG> gradient to module.layer4.1.bn2.weight
<DEBUG> gradient to module.layer4.1.bn2.bias
<DEBUG> gradient to module.fc.weight
Files already downloaded and verified
Files already downloaded and verified
Adding Noise to Label, len(Y)=12000, Label_noise=1206
Xmp (7877, 3, 32, 32) (6903, 3, 32, 32)
Xcp (6012, 3, 32, 32) (5988, 3, 32, 32)
env=0 2497 2497 3 3
xn 2500 xp 2500
env=1 1750 1750 750 750
xn 2500 xp 2500
env=2 50 50 450 450
xn 500 xp 500
=> Creating model 'EBD'
EBD(
  (embedings): Embedding(2, 1)
)
=> Parallelizing on [0] gpus
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:01<00:41,  1.64s/it] 19%|#9        | 5/26 [00:01<00:05,  3.72it/s] 35%|###4      | 9/26 [00:01<00:02,  7.36it/s] 50%|#####     | 13/26 [00:01<00:01, 11.31it/s] 65%|######5   | 17/26 [00:02<00:00, 15.31it/s] 81%|########  | 21/26 [00:02<00:00, 19.23it/s] 96%|#########6| 25/26 [00:02<00:00, 22.67it/s]100%|##########| 26/26 [00:02<00:00,  9.60it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 0 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 2 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 3 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 4 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 5 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 6 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 7 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 8 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 9 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 10 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 11 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 12 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 13 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 14 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 15 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 16 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 17 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 18 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 19 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 20 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 21 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 22 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 23 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 24 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 25 400
penalty weights 0.0
Epoch: [0][  26/  26]	Loss 0.344 (0.557)	train_nll   0.34 (  0.56)	train_penalty   0.03 (  0.27)	weight_norm  20.94 ( 18.17)	train_acc   0.88 (  0.80)	train_minacc   0.00 (  0.08)	train_majacc   0.98 (  0.93)	train_corr   0.00 (  0.00)	l1 7.0433 (8.1550)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 17.08it/s] 27%|##6       | 7/26 [00:00<00:00, 32.97it/s]                                               27%|##6       | 7/26 [00:00<00:00, 32.97it/s] 46%|####6     | 12/26 [00:00<00:00, 39.92it/s] 65%|######5   | 17/26 [00:00<00:00, 42.81it/s]                                                65%|######5   | 17/26 [00:00<00:00, 42.81it/s] 85%|########4 | 22/26 [00:00<00:00, 42.22it/s]100%|##########| 26/26 [00:00<00:00, 37.50it/s]
Test: [   0/  26]	Loss 0.362 (0.362)	test_acc   0.88 (  0.88)	test_minacc   0.00 (  0.00)	test_majacc   0.99 (  0.99)	Loss_d 0.362 (0.362)	test_acc_d   0.88 (  0.88)	test_minacc_d   0.00 (  0.00)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.97 (  0.97)
Test: [  10/  26]	Loss 0.375 (0.404)	test_acc   0.86 (  0.85)	test_minacc   0.02 (  0.02)	test_majacc   0.99 (  0.99)	Loss_d 0.375 (0.404)	test_acc_d   0.86 (  0.85)	test_minacc_d   0.02 (  0.02)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.96 (  0.97)
Test: [  20/  26]	Loss 0.452 (0.409)	test_acc   0.82 (  0.85)	test_minacc   0.03 (  0.02)	test_majacc   0.99 (  0.99)	Loss_d 0.452 (0.409)	test_acc_d   0.82 (  0.85)	test_minacc_d   0.03 (  0.02)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.97 (  0.97)
Test: [  26/  26]	Loss 0.333 (0.405)	test_acc   0.89 (  0.85)	test_minacc   0.00 (  0.02)	test_majacc   0.99 (  0.99)	Loss_d 0.333 (0.405)	test_acc_d   0.89 (  0.85)	test_minacc_d   0.00 (  0.02)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.97 (  0.97)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00,  2.50it/s]100%|##########| 1/1 [00:00<00:00,  2.50it/s]
Test: [  0/  1]	Loss 1.757 (1.757)	test_acc   0.12 (  0.12)	test_minacc   0.02 (  0.02)	test_majacc   0.99 (  0.99)	Loss_d 1.757 (1.757)	test_acc_d   0.12 (  0.12)	test_minacc_d   0.02 (  0.02)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.95 (  0.95)
Test: [  1/  1]	Loss 1.757 (1.757)	test_acc   0.12 (  0.12)	test_minacc   0.02 (  0.02)	test_majacc   0.99 (  0.99)	Loss_d 1.757 (1.757)	test_acc_d   0.12 (  0.12)	test_minacc_d   0.02 (  0.02)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.95 (  0.95)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/153/checkpoints/model_best.pth
Overall Timing[  0/  1]	epoch_time 0.0797 (0.0797)	validation_time 0.0070 (0.0070)	train_time 0.0683 (0.0683)
record: (train_acc, test_acc) (0.8464000245928764, 0.11700000613927841)
last accs (train_acc, test_acc) (0.8464000245928764, 0.11700000613927841)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.70it/s] 15%|#5        | 4/26 [00:00<00:01, 19.65it/s] 31%|###       | 8/26 [00:00<00:00, 26.11it/s] 46%|####6     | 12/26 [00:00<00:00, 29.80it/s] 58%|#####7    | 15/26 [00:00<00:00, 28.30it/s] 73%|#######3  | 19/26 [00:00<00:00, 30.43it/s] 88%|########8 | 23/26 [00:00<00:00, 32.47it/s]100%|##########| 26/26 [00:00<00:00, 27.30it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 26 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 27 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 28 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 29 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 30 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 31 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 32 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 33 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 34 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 35 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 36 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 37 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 38 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 39 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 40 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 41 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 42 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 43 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 44 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 45 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 46 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 47 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 48 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 49 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 50 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 51 400
penalty weights 0.0
Epoch: [1][  26/  26]	Loss 0.322 (0.405)	train_nll   0.32 (  0.41)	train_penalty   0.03 (  0.05)	weight_norm  22.07 ( 21.72)	train_acc   0.89 (  0.85)	train_minacc   0.00 (  0.03)	train_majacc   0.99 (  0.99)	train_corr   0.00 (  0.00)	l1 7.1522 (7.0561)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 19.15it/s] 27%|##6       | 7/26 [00:00<00:00, 36.43it/s]                                               27%|##6       | 7/26 [00:00<00:00, 36.43it/s] 46%|####6     | 12/26 [00:00<00:00, 40.45it/s] 65%|######5   | 17/26 [00:00<00:00, 38.86it/s]                                                65%|######5   | 17/26 [00:00<00:00, 38.86it/s] 85%|########4 | 22/26 [00:00<00:00, 42.02it/s]100%|##########| 26/26 [00:00<00:00, 36.81it/s]
Test: [   0/  26]	Loss 0.346 (0.346)	test_acc   0.88 (  0.88)	test_minacc   0.00 (  0.00)	test_majacc   0.99 (  0.99)	Loss_d 0.346 (0.346)	test_acc_d   0.88 (  0.88)	test_minacc_d   0.00 (  0.00)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.98 (  0.98)
Test: [  10/  26]	Loss 0.366 (0.395)	test_acc   0.87 (  0.85)	test_minacc   0.02 (  0.01)	test_majacc   0.99 (  1.00)	Loss_d 0.366 (0.395)	test_acc_d   0.87 (  0.85)	test_minacc_d   0.02 (  0.01)	test_majacc_d   0.99 (  1.00)	test_corr_d   0.97 (  0.98)
Test: [  20/  26]	Loss 0.452 (0.399)	test_acc   0.82 (  0.85)	test_minacc   0.01 (  0.01)	test_majacc   0.99 (  1.00)	Loss_d 0.452 (0.399)	test_acc_d   0.82 (  0.85)	test_minacc_d   0.01 (  0.01)	test_majacc_d   0.99 (  1.00)	test_corr_d   0.98 (  0.98)
Test: [  26/  26]	Loss 0.312 (0.394)	test_acc   0.90 (  0.85)	test_minacc   0.00 (  0.01)	test_majacc   1.00 (  1.00)	Loss_d 0.312 (0.394)	test_acc_d   0.90 (  0.85)	test_minacc_d   0.00 (  0.01)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.98 (  0.98)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 59.20it/s]
Test: [  0/  1]	Loss 1.862 (1.862)	test_acc   0.11 (  0.11)	test_minacc   0.01 (  0.01)	test_majacc   1.00 (  1.00)	Loss_d 1.862 (1.862)	test_acc_d   0.11 (  0.11)	test_minacc_d   0.01 (  0.01)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.97 (  0.97)
Test: [  1/  1]	Loss 1.862 (1.862)	test_acc   0.11 (  0.11)	test_minacc   0.01 (  0.01)	test_majacc   1.00 (  1.00)	Loss_d 1.862 (1.862)	test_acc_d   0.11 (  0.11)	test_minacc_d   0.01 (  0.01)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.97 (  0.97)
Overall Timing[  1/  1]	epoch_time 0.0403 (0.0600)	validation_time 0.0004 (0.0037)	train_time 0.0399 (0.0541)
record: (train_acc, test_acc) (0.8464000245928764, 0.11700000613927841)
last accs (train_acc, test_acc) (0.8483000246882438, 0.1080000028014183)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.48it/s] 19%|#9        | 5/26 [00:00<00:00, 25.01it/s] 35%|###4      | 9/26 [00:00<00:00, 29.93it/s] 50%|#####     | 13/26 [00:00<00:00, 31.81it/s] 65%|######5   | 17/26 [00:00<00:00, 33.00it/s] 81%|########  | 21/26 [00:00<00:00, 33.96it/s] 96%|#########6| 25/26 [00:00<00:00, 34.19it/s]100%|##########| 26/26 [00:00<00:00, 29.67it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 52 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 53 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 54 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 55 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 56 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 57 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 58 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 59 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 60 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 61 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 62 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 63 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 64 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 65 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 66 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 67 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 68 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 69 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 70 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 71 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 72 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 73 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 74 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 75 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 76 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 77 400
penalty weights 0.0
Epoch: [2][  26/  26]	Loss 0.291 (0.386)	train_nll   0.29 (  0.39)	train_penalty   0.02 (  0.04)	weight_norm  22.20 ( 22.15)	train_acc   0.88 (  0.85)	train_minacc   0.00 (  0.10)	train_majacc   0.98 (  0.98)	train_corr   0.00 (  0.00)	l1 7.2244 (7.1524)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:05,  4.35it/s] 23%|##3       | 6/26 [00:00<00:00, 21.52it/s]                                               23%|##3       | 6/26 [00:00<00:00, 21.52it/s] 42%|####2     | 11/26 [00:00<00:00, 30.17it/s] 65%|######5   | 17/26 [00:00<00:00, 36.02it/s]                                                65%|######5   | 17/26 [00:00<00:00, 36.02it/s] 85%|########4 | 22/26 [00:00<00:00, 39.21it/s]100%|##########| 26/26 [00:00<00:00, 31.68it/s]
Test: [   0/  26]	Loss 0.324 (0.324)	test_acc   0.88 (  0.88)	test_minacc   0.07 (  0.07)	test_majacc   0.99 (  0.99)	Loss_d 0.324 (0.324)	test_acc_d   0.88 (  0.88)	test_minacc_d   0.07 (  0.07)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.95 (  0.95)
Test: [  10/  26]	Loss 0.354 (0.380)	test_acc   0.86 (  0.85)	test_minacc   0.04 (  0.04)	test_majacc   0.99 (  0.99)	Loss_d 0.354 (0.380)	test_acc_d   0.86 (  0.85)	test_minacc_d   0.04 (  0.04)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.95 (  0.96)
Test: [  20/  26]	Loss 0.442 (0.382)	test_acc   0.82 (  0.85)	test_minacc   0.03 (  0.05)	test_majacc   1.00 (  0.99)	Loss_d 0.442 (0.382)	test_acc_d   0.82 (  0.85)	test_minacc_d   0.03 (  0.05)	test_majacc_d   1.00 (  0.99)	test_corr_d   0.97 (  0.96)
Test: [  26/  26]	Loss 0.281 (0.377)	test_acc   0.89 (  0.85)	test_minacc   0.00 (  0.06)	test_majacc   0.99 (  0.99)	Loss_d 0.281 (0.377)	test_acc_d   0.89 (  0.85)	test_minacc_d   0.00 (  0.06)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.97 (  0.96)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.44it/s]
Test: [  0/  1]	Loss 1.876 (1.876)	test_acc   0.13 (  0.13)	test_minacc   0.03 (  0.03)	test_majacc   1.00 (  1.00)	Loss_d 1.876 (1.876)	test_acc_d   0.13 (  0.13)	test_minacc_d   0.03 (  0.03)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.93 (  0.93)
Test: [  1/  1]	Loss 1.876 (1.876)	test_acc   0.13 (  0.13)	test_minacc   0.03 (  0.03)	test_majacc   1.00 (  1.00)	Loss_d 1.876 (1.876)	test_acc_d   0.13 (  0.13)	test_minacc_d   0.03 (  0.03)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.93 (  0.93)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/153/checkpoints/model_best.pth
Overall Timing[  2/  1]	epoch_time 0.0478 (0.0560)	validation_time 0.0004 (0.0026)	train_time 0.0474 (0.0519)
record: (train_acc, test_acc) (0.8505000186562538, 0.12800000607967377)
last accs (train_acc, test_acc) (0.8505000186562538, 0.12800000607967377)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.01it/s] 19%|#9        | 5/26 [00:00<00:01, 17.97it/s] 35%|###4      | 9/26 [00:00<00:00, 24.35it/s] 50%|#####     | 13/26 [00:00<00:00, 27.63it/s] 65%|######5   | 17/26 [00:00<00:00, 30.01it/s] 81%|########  | 21/26 [00:00<00:00, 31.99it/s] 96%|#########6| 25/26 [00:00<00:00, 33.09it/s]100%|##########| 26/26 [00:00<00:00, 26.30it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 78 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 79 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 80 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 81 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 82 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 83 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 84 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 85 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 86 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 87 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 88 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 89 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 90 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 91 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 92 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 93 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 94 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 95 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 96 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 97 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 98 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 99 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 100 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 101 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 102 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 103 400
penalty weights 0.0
Epoch: [3][  26/  26]	Loss 0.276 (0.365)	train_nll   0.28 (  0.37)	train_penalty   0.02 (  0.04)	weight_norm  22.25 ( 22.23)	train_acc   0.89 (  0.85)	train_minacc   0.08 (  0.17)	train_majacc   0.98 (  0.97)	train_corr   0.00 (  0.00)	l1 7.2820 (7.1936)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.60it/s] 27%|##6       | 7/26 [00:00<00:00, 27.60it/s]                                               27%|##6       | 7/26 [00:00<00:00, 27.60it/s] 46%|####6     | 12/26 [00:00<00:00, 34.84it/s] 65%|######5   | 17/26 [00:00<00:00, 36.37it/s]                                                65%|######5   | 17/26 [00:00<00:00, 36.37it/s] 85%|########4 | 22/26 [00:00<00:00, 39.97it/s]100%|##########| 26/26 [00:00<00:00, 33.00it/s]
Test: [   0/  26]	Loss 0.319 (0.319)	test_acc   0.89 (  0.89)	test_minacc   0.13 (  0.13)	test_majacc   0.99 (  0.99)	Loss_d 0.319 (0.319)	test_acc_d   0.89 (  0.89)	test_minacc_d   0.13 (  0.13)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.95 (  0.95)
Test: [  10/  26]	Loss 0.333 (0.361)	test_acc   0.86 (  0.85)	test_minacc   0.14 (  0.10)	test_majacc   0.97 (  0.98)	Loss_d 0.333 (0.361)	test_acc_d   0.86 (  0.85)	test_minacc_d   0.14 (  0.10)	test_majacc_d   0.97 (  0.98)	test_corr_d   0.93 (  0.95)
Test: [  20/  26]	Loss 0.430 (0.364)	test_acc   0.82 (  0.85)	test_minacc   0.06 (  0.10)	test_majacc   0.99 (  0.99)	Loss_d 0.430 (0.364)	test_acc_d   0.82 (  0.85)	test_minacc_d   0.06 (  0.10)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.96 (  0.95)
Test: [  26/  26]	Loss 0.272 (0.360)	test_acc   0.90 (  0.85)	test_minacc   0.04 (  0.10)	test_majacc   0.99 (  0.99)	Loss_d 0.272 (0.360)	test_acc_d   0.90 (  0.85)	test_minacc_d   0.04 (  0.10)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.96 (  0.95)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.88it/s]
Test: [  0/  1]	Loss 1.852 (1.852)	test_acc   0.15 (  0.15)	test_minacc   0.05 (  0.05)	test_majacc   1.00 (  1.00)	Loss_d 1.852 (1.852)	test_acc_d   0.15 (  0.15)	test_minacc_d   0.05 (  0.05)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.91 (  0.91)
Test: [  1/  1]	Loss 1.852 (1.852)	test_acc   0.15 (  0.15)	test_minacc   0.05 (  0.05)	test_majacc   1.00 (  1.00)	Loss_d 1.852 (1.852)	test_acc_d   0.15 (  0.15)	test_minacc_d   0.05 (  0.05)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.91 (  0.91)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/153/checkpoints/model_best.pth
Overall Timing[  3/  1]	epoch_time 0.0405 (0.0521)	validation_time 0.0004 (0.0021)	train_time 0.0401 (0.0489)
record: (train_acc, test_acc) (0.8520000209808349, 0.14800000190734863)
last accs (train_acc, test_acc) (0.8520000209808349, 0.14800000190734863)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.48it/s] 15%|#5        | 4/26 [00:00<00:01, 18.47it/s] 31%|###       | 8/26 [00:00<00:00, 25.43it/s] 46%|####6     | 12/26 [00:00<00:00, 29.82it/s] 62%|######1   | 16/26 [00:00<00:00, 32.20it/s] 77%|#######6  | 20/26 [00:00<00:00, 33.22it/s] 92%|#########2| 24/26 [00:00<00:00, 33.18it/s]100%|##########| 26/26 [00:00<00:00, 27.85it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 104 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 105 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 106 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 107 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 108 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 109 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 110 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 111 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 112 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 113 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 114 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 115 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 116 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 117 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 118 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 119 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 120 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 121 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 122 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 123 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 124 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 125 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 126 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 127 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 128 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 129 400
penalty weights 0.0
Epoch: [4][  26/  26]	Loss 0.262 (0.349)	train_nll   0.26 (  0.35)	train_penalty   0.01 (  0.03)	weight_norm  22.31 ( 22.28)	train_acc   0.92 (  0.86)	train_minacc   0.36 (  0.22)	train_majacc   0.98 (  0.97)	train_corr   0.00 (  0.00)	l1 7.2717 (7.1209)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:06,  3.94it/s] 27%|##6       | 7/26 [00:00<00:00, 23.07it/s]                                               27%|##6       | 7/26 [00:00<00:00, 23.07it/s] 46%|####6     | 12/26 [00:00<00:00, 31.60it/s] 65%|######5   | 17/26 [00:00<00:00, 34.03it/s]                                                65%|######5   | 17/26 [00:00<00:00, 34.03it/s] 85%|########4 | 22/26 [00:00<00:00, 38.31it/s]100%|##########| 26/26 [00:00<00:00, 29.08it/s]
Test: [   0/  26]	Loss 0.317 (0.317)	test_acc   0.89 (  0.89)	test_minacc   0.28 (  0.28)	test_majacc   0.97 (  0.97)	Loss_d 0.317 (0.317)	test_acc_d   0.89 (  0.89)	test_minacc_d   0.28 (  0.28)	test_majacc_d   0.97 (  0.97)	test_corr_d   0.92 (  0.92)
Test: [  10/  26]	Loss 0.328 (0.342)	test_acc   0.85 (  0.86)	test_minacc   0.25 (  0.20)	test_majacc   0.94 (  0.97)	Loss_d 0.328 (0.342)	test_acc_d   0.85 (  0.86)	test_minacc_d   0.25 (  0.20)	test_majacc_d   0.94 (  0.97)	test_corr_d   0.89 (  0.92)
Test: [  20/  26]	Loss 0.407 (0.347)	test_acc   0.83 (  0.85)	test_minacc   0.13 (  0.19)	test_majacc   0.98 (  0.97)	Loss_d 0.407 (0.347)	test_acc_d   0.83 (  0.85)	test_minacc_d   0.13 (  0.19)	test_majacc_d   0.98 (  0.97)	test_corr_d   0.93 (  0.93)
Test: [  26/  26]	Loss 0.250 (0.342)	test_acc   0.90 (  0.86)	test_minacc   0.16 (  0.19)	test_majacc   0.98 (  0.98)	Loss_d 0.250 (0.342)	test_acc_d   0.90 (  0.86)	test_minacc_d   0.16 (  0.19)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.94 (  0.93)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.91it/s]
Test: [  0/  1]	Loss 1.885 (1.885)	test_acc   0.22 (  0.22)	test_minacc   0.14 (  0.14)	test_majacc   0.98 (  0.98)	Loss_d 1.885 (1.885)	test_acc_d   0.22 (  0.22)	test_minacc_d   0.14 (  0.14)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.82 (  0.82)
Test: [  1/  1]	Loss 1.885 (1.885)	test_acc   0.22 (  0.22)	test_minacc   0.14 (  0.14)	test_majacc   0.98 (  0.98)	Loss_d 1.885 (1.885)	test_acc_d   0.22 (  0.22)	test_minacc_d   0.14 (  0.14)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.82 (  0.82)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/153/checkpoints/model_best.pth
Overall Timing[  4/  1]	epoch_time 0.0397 (0.0496)	validation_time 0.0004 (0.0017)	train_time 0.0393 (0.0470)
record: (train_acc, test_acc) (0.8574000243544578, 0.2200000137090683)
last accs (train_acc, test_acc) (0.8574000243544578, 0.2200000137090683)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:06,  3.78it/s] 19%|#9        | 5/26 [00:00<00:01, 15.02it/s] 35%|###4      | 9/26 [00:00<00:00, 21.34it/s] 50%|#####     | 13/26 [00:00<00:00, 25.71it/s] 65%|######5   | 17/26 [00:00<00:00, 28.70it/s] 81%|########  | 21/26 [00:00<00:00, 30.96it/s] 96%|#########6| 25/26 [00:00<00:00, 32.55it/s]100%|##########| 26/26 [00:01<00:00, 24.86it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 130 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 131 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 132 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 133 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 134 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 135 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 136 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 137 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 138 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 139 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 140 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 141 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 142 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 143 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 144 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 145 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 146 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 147 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 148 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 149 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 150 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 151 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 152 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 153 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 154 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 155 400
penalty weights 0.0
Epoch: [5][  26/  26]	Loss 0.241 (0.335)	train_nll   0.24 (  0.34)	train_penalty   0.01 (  0.03)	weight_norm  22.39 ( 22.35)	train_acc   0.90 (  0.86)	train_minacc   0.28 (  0.27)	train_majacc   0.96 (  0.96)	train_corr   0.00 (  0.00)	l1 7.2255 (7.1011)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.84it/s] 23%|##3       | 6/26 [00:00<00:00, 31.43it/s]                                               23%|##3       | 6/26 [00:00<00:00, 31.43it/s] 42%|####2     | 11/26 [00:00<00:00, 39.42it/s] 62%|######1   | 16/26 [00:00<00:00, 42.44it/s]                                                62%|######1   | 16/26 [00:00<00:00, 42.44it/s] 81%|########  | 21/26 [00:00<00:00, 40.18it/s]100%|##########| 26/26 [00:00<00:00, 42.78it/s]100%|##########| 26/26 [00:00<00:00, 36.68it/s]
Test: [   0/  26]	Loss 0.288 (0.288)	test_acc   0.89 (  0.89)	test_minacc   0.24 (  0.24)	test_majacc   0.98 (  0.98)	Loss_d 0.288 (0.288)	test_acc_d   0.89 (  0.89)	test_minacc_d   0.24 (  0.24)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.92 (  0.92)
Test: [  10/  26]	Loss 0.293 (0.317)	test_acc   0.86 (  0.86)	test_minacc   0.25 (  0.22)	test_majacc   0.96 (  0.97)	Loss_d 0.293 (0.317)	test_acc_d   0.86 (  0.86)	test_minacc_d   0.25 (  0.22)	test_majacc_d   0.96 (  0.97)	test_corr_d   0.90 (  0.92)
Test: [  20/  26]	Loss 0.371 (0.323)	test_acc   0.85 (  0.86)	test_minacc   0.21 (  0.22)	test_majacc   0.98 (  0.97)	Loss_d 0.371 (0.323)	test_acc_d   0.85 (  0.86)	test_minacc_d   0.21 (  0.22)	test_majacc_d   0.98 (  0.97)	test_corr_d   0.92 (  0.92)
Test: [  26/  26]	Loss 0.228 (0.316)	test_acc   0.91 (  0.86)	test_minacc   0.24 (  0.23)	test_majacc   0.98 (  0.98)	Loss_d 0.228 (0.316)	test_acc_d   0.91 (  0.86)	test_minacc_d   0.24 (  0.23)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.94 (  0.92)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.34it/s]
Test: [  0/  1]	Loss 1.808 (1.808)	test_acc   0.25 (  0.25)	test_minacc   0.17 (  0.17)	test_majacc   0.97 (  0.97)	Loss_d 1.808 (1.808)	test_acc_d   0.25 (  0.25)	test_minacc_d   0.17 (  0.17)	test_majacc_d   0.97 (  0.97)	test_corr_d   0.77 (  0.77)
Test: [  1/  1]	Loss 1.808 (1.808)	test_acc   0.25 (  0.25)	test_minacc   0.17 (  0.17)	test_majacc   0.97 (  0.97)	Loss_d 1.808 (1.808)	test_acc_d   0.25 (  0.25)	test_minacc_d   0.17 (  0.17)	test_majacc_d   0.97 (  0.97)	test_corr_d   0.77 (  0.77)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/153/checkpoints/model_best.pth
Overall Timing[  5/  1]	epoch_time 0.0407 (0.0481)	validation_time 0.0004 (0.0015)	train_time 0.0403 (0.0459)
record: (train_acc, test_acc) (0.8634000220894813, 0.25200000405311584)
last accs (train_acc, test_acc) (0.8634000220894813, 0.25200000405311584)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:07,  3.17it/s] 19%|#9        | 5/26 [00:00<00:01, 13.99it/s] 35%|###4      | 9/26 [00:00<00:00, 20.87it/s] 50%|#####     | 13/26 [00:00<00:00, 25.67it/s] 65%|######5   | 17/26 [00:00<00:00, 28.25it/s] 81%|########  | 21/26 [00:00<00:00, 30.65it/s] 96%|#########6| 25/26 [00:00<00:00, 32.70it/s]100%|##########| 26/26 [00:01<00:00, 24.32it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 156 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 157 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 158 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 159 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 160 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 161 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 162 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 163 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 164 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 165 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 166 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 167 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 168 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 169 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 170 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 171 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 172 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 173 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 174 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 175 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 176 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 177 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 178 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 179 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 180 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 181 400
penalty weights 0.0
Epoch: [6][  26/  26]	Loss 0.218 (0.315)	train_nll   0.22 (  0.31)	train_penalty   0.01 (  0.02)	weight_norm  22.48 ( 22.44)	train_acc   0.92 (  0.87)	train_minacc   0.40 (  0.34)	train_majacc   0.97 (  0.96)	train_corr   0.00 (  0.00)	l1 7.3030 (7.0829)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:06,  3.89it/s] 23%|##3       | 6/26 [00:00<00:00, 20.33it/s]                                               23%|##3       | 6/26 [00:00<00:00, 20.33it/s] 42%|####2     | 11/26 [00:00<00:00, 29.60it/s] 62%|######1   | 16/26 [00:00<00:00, 36.03it/s]                                                62%|######1   | 16/26 [00:00<00:00, 36.03it/s] 81%|########  | 21/26 [00:00<00:00, 37.00it/s]100%|##########| 26/26 [00:00<00:00, 40.36it/s]100%|##########| 26/26 [00:00<00:00, 30.65it/s]
Test: [   0/  26]	Loss 0.271 (0.271)	test_acc   0.90 (  0.90)	test_minacc   0.37 (  0.37)	test_majacc   0.97 (  0.97)	Loss_d 0.271 (0.271)	test_acc_d   0.90 (  0.90)	test_minacc_d   0.37 (  0.37)	test_majacc_d   0.97 (  0.97)	test_corr_d   0.90 (  0.90)
Test: [  10/  26]	Loss 0.262 (0.283)	test_acc   0.87 (  0.88)	test_minacc   0.43 (  0.35)	test_majacc   0.94 (  0.97)	Loss_d 0.262 (0.283)	test_acc_d   0.87 (  0.88)	test_minacc_d   0.43 (  0.35)	test_majacc_d   0.94 (  0.97)	test_corr_d   0.87 (  0.89)
Test: [  20/  26]	Loss 0.321 (0.288)	test_acc   0.85 (  0.87)	test_minacc   0.30 (  0.34)	test_majacc   0.98 (  0.97)	Loss_d 0.321 (0.288)	test_acc_d   0.85 (  0.87)	test_minacc_d   0.30 (  0.34)	test_majacc_d   0.98 (  0.97)	test_corr_d   0.88 (  0.89)
Test: [  26/  26]	Loss 0.197 (0.282)	test_acc   0.93 (  0.88)	test_minacc   0.40 (  0.34)	test_majacc   0.99 (  0.97)	Loss_d 0.197 (0.282)	test_acc_d   0.93 (  0.88)	test_minacc_d   0.40 (  0.34)	test_majacc_d   0.99 (  0.97)	test_corr_d   0.92 (  0.89)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 60.36it/s]
Test: [  0/  1]	Loss 1.777 (1.777)	test_acc   0.32 (  0.32)	test_minacc   0.24 (  0.24)	test_majacc   0.98 (  0.98)	Loss_d 1.777 (1.777)	test_acc_d   0.32 (  0.32)	test_minacc_d   0.24 (  0.24)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.65 (  0.65)
Test: [  1/  1]	Loss 1.777 (1.777)	test_acc   0.32 (  0.32)	test_minacc   0.24 (  0.24)	test_majacc   0.98 (  0.98)	Loss_d 1.777 (1.777)	test_acc_d   0.32 (  0.32)	test_minacc_d   0.24 (  0.24)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.65 (  0.65)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/153/checkpoints/model_best.pth
Overall Timing[  6/  1]	epoch_time 0.0427 (0.0473)	validation_time 0.0004 (0.0013)	train_time 0.0422 (0.0454)
record: (train_acc, test_acc) (0.8767000162005425, 0.3150000274181366)
last accs (train_acc, test_acc) (0.8767000162005425, 0.3150000274181366)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.32it/s] 15%|#5        | 4/26 [00:00<00:01, 19.16it/s] 31%|###       | 8/26 [00:00<00:00, 26.42it/s] 46%|####6     | 12/26 [00:00<00:00, 29.95it/s] 62%|######1   | 16/26 [00:00<00:00, 32.01it/s] 77%|#######6  | 20/26 [00:00<00:00, 33.55it/s] 92%|#########2| 24/26 [00:00<00:00, 34.50it/s]100%|##########| 26/26 [00:00<00:00, 28.97it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 182 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 183 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 184 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 185 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 186 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 187 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 188 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 189 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 190 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 191 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 192 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 193 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 194 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 195 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 196 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 197 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 198 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 199 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 200 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 201 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 202 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 203 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 204 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 205 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 206 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 207 400
penalty weights 0.0
Epoch: [7][  26/  26]	Loss 0.206 (0.302)	train_nll   0.21 (  0.30)	train_penalty   0.01 (  0.02)	weight_norm  22.60 ( 22.54)	train_acc   0.92 (  0.87)	train_minacc   0.36 (  0.40)	train_majacc   0.98 (  0.96)	train_corr   0.00 (  0.00)	l1 7.2586 (7.1135)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.94it/s] 27%|##6       | 7/26 [00:00<00:00, 30.69it/s]                                               27%|##6       | 7/26 [00:00<00:00, 30.69it/s] 46%|####6     | 12/26 [00:00<00:00, 37.62it/s] 65%|######5   | 17/26 [00:00<00:00, 38.06it/s]                                                65%|######5   | 17/26 [00:00<00:00, 38.06it/s] 85%|########4 | 22/26 [00:00<00:00, 41.46it/s]100%|##########| 26/26 [00:00<00:00, 35.22it/s]
Test: [   0/  26]	Loss 0.249 (0.249)	test_acc   0.91 (  0.91)	test_minacc   0.41 (  0.41)	test_majacc   0.98 (  0.98)	Loss_d 0.249 (0.249)	test_acc_d   0.91 (  0.91)	test_minacc_d   0.41 (  0.41)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.91 (  0.91)
Test: [  10/  26]	Loss 0.268 (0.282)	test_acc   0.88 (  0.88)	test_minacc   0.35 (  0.35)	test_majacc   0.96 (  0.98)	Loss_d 0.268 (0.282)	test_acc_d   0.88 (  0.88)	test_minacc_d   0.35 (  0.35)	test_majacc_d   0.96 (  0.98)	test_corr_d   0.88 (  0.90)
Test: [  20/  26]	Loss 0.315 (0.285)	test_acc   0.86 (  0.88)	test_minacc   0.36 (  0.33)	test_majacc   0.98 (  0.98)	Loss_d 0.315 (0.285)	test_acc_d   0.86 (  0.88)	test_minacc_d   0.36 (  0.33)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.89 (  0.90)
Test: [  26/  26]	Loss 0.184 (0.278)	test_acc   0.94 (  0.88)	test_minacc   0.40 (  0.33)	test_majacc   1.00 (  0.98)	Loss_d 0.184 (0.278)	test_acc_d   0.94 (  0.88)	test_minacc_d   0.40 (  0.33)	test_majacc_d   1.00 (  0.98)	test_corr_d   0.94 (  0.90)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 60.98it/s]
Test: [  0/  1]	Loss 1.827 (1.827)	test_acc   0.28 (  0.28)	test_minacc   0.20 (  0.20)	test_majacc   0.98 (  0.98)	Loss_d 1.827 (1.827)	test_acc_d   0.28 (  0.28)	test_minacc_d   0.20 (  0.20)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.70 (  0.70)
Test: [  1/  1]	Loss 1.827 (1.827)	test_acc   0.28 (  0.28)	test_minacc   0.20 (  0.20)	test_majacc   0.98 (  0.98)	Loss_d 1.827 (1.827)	test_acc_d   0.28 (  0.28)	test_minacc_d   0.20 (  0.20)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.70 (  0.70)
Overall Timing[  7/  1]	epoch_time 0.0379 (0.0462)	validation_time 0.0004 (0.0012)	train_time 0.0375 (0.0444)
record: (train_acc, test_acc) (0.8767000162005425, 0.3150000274181366)
last accs (train_acc, test_acc) (0.8810000221729278, 0.2770000100135803)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:07,  3.30it/s] 19%|#9        | 5/26 [00:00<00:01, 14.62it/s] 35%|###4      | 9/26 [00:00<00:00, 21.72it/s] 50%|#####     | 13/26 [00:00<00:00, 25.84it/s] 65%|######5   | 17/26 [00:00<00:00, 28.74it/s] 81%|########  | 21/26 [00:00<00:00, 30.66it/s] 96%|#########6| 25/26 [00:00<00:00, 31.44it/s]100%|##########| 26/26 [00:01<00:00, 24.11it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 208 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 209 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 210 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 211 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 212 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 213 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 214 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 215 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 216 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 217 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 218 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 219 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 220 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 221 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 222 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 223 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 224 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 225 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 226 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 227 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 228 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 229 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 230 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 231 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 232 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 233 400
penalty weights 0.0
Epoch: [8][  26/  26]	Loss 0.194 (0.289)	train_nll   0.19 (  0.29)	train_penalty   0.01 (  0.02)	weight_norm  22.74 ( 22.67)	train_acc   0.92 (  0.88)	train_minacc   0.48 (  0.44)	train_majacc   0.97 (  0.96)	train_corr   0.00 (  0.00)	l1 7.3879 (7.2445)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.60it/s] 19%|#9        | 5/26 [00:00<00:01, 20.47it/s] 38%|###8      | 10/26 [00:00<00:00, 31.31it/s]                                                38%|###8      | 10/26 [00:00<00:00, 31.31it/s] 58%|#####7    | 15/26 [00:00<00:00, 35.95it/s] 77%|#######6  | 20/26 [00:00<00:00, 37.22it/s]                                                77%|#######6  | 20/26 [00:00<00:00, 37.22it/s] 96%|#########6| 25/26 [00:00<00:00, 40.38it/s]100%|##########| 26/26 [00:00<00:00, 32.04it/s]
Test: [   0/  26]	Loss 0.244 (0.244)	test_acc   0.90 (  0.90)	test_minacc   0.37 (  0.37)	test_majacc   0.97 (  0.97)	Loss_d 0.244 (0.244)	test_acc_d   0.90 (  0.90)	test_minacc_d   0.37 (  0.37)	test_majacc_d   0.97 (  0.97)	test_corr_d   0.88 (  0.88)
Test: [  10/  26]	Loss 0.237 (0.263)	test_acc   0.89 (  0.89)	test_minacc   0.41 (  0.36)	test_majacc   0.96 (  0.98)	Loss_d 0.237 (0.263)	test_acc_d   0.89 (  0.89)	test_minacc_d   0.41 (  0.36)	test_majacc_d   0.96 (  0.98)	test_corr_d   0.87 (  0.89)
Test: [  20/  26]	Loss 0.318 (0.273)	test_acc   0.85 (  0.88)	test_minacc   0.31 (  0.35)	test_majacc   0.97 (  0.98)	Loss_d 0.318 (0.273)	test_acc_d   0.85 (  0.88)	test_minacc_d   0.31 (  0.35)	test_majacc_d   0.97 (  0.98)	test_corr_d   0.88 (  0.89)
Test: [  26/  26]	Loss 0.170 (0.265)	test_acc   0.94 (  0.88)	test_minacc   0.44 (  0.36)	test_majacc   1.00 (  0.98)	Loss_d 0.170 (0.265)	test_acc_d   0.94 (  0.88)	test_minacc_d   0.44 (  0.36)	test_majacc_d   1.00 (  0.98)	test_corr_d   0.92 (  0.89)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.42it/s]
Test: [  0/  1]	Loss 1.917 (1.917)	test_acc   0.31 (  0.31)	test_minacc   0.23 (  0.23)	test_majacc   0.98 (  0.98)	Loss_d 1.917 (1.917)	test_acc_d   0.31 (  0.31)	test_minacc_d   0.23 (  0.23)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.65 (  0.65)
Test: [  1/  1]	Loss 1.917 (1.917)	test_acc   0.31 (  0.31)	test_minacc   0.23 (  0.23)	test_majacc   0.98 (  0.98)	Loss_d 1.917 (1.917)	test_acc_d   0.31 (  0.31)	test_minacc_d   0.23 (  0.23)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.65 (  0.65)
Overall Timing[  8/  1]	epoch_time 0.0469 (0.0463)	validation_time 0.0004 (0.0011)	train_time 0.0465 (0.0446)
record: (train_acc, test_acc) (0.8767000162005425, 0.3150000274181366)
last accs (train_acc, test_acc) (0.8841000198721886, 0.30900001525878906)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.83it/s] 19%|#9        | 5/26 [00:00<00:00, 22.37it/s] 35%|###4      | 9/26 [00:00<00:00, 27.18it/s] 50%|#####     | 13/26 [00:00<00:00, 30.03it/s] 65%|######5   | 17/26 [00:00<00:00, 31.15it/s] 81%|########  | 21/26 [00:00<00:00, 32.48it/s] 96%|#########6| 25/26 [00:00<00:00, 33.47it/s]100%|##########| 26/26 [00:00<00:00, 28.33it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 234 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 235 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 236 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 237 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 238 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 239 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 240 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 241 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 242 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 243 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 244 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 245 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 246 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 247 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 248 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 249 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 250 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 251 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 252 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 253 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 254 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 255 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 256 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 257 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 258 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 259 400
penalty weights 0.0
Epoch: [9][  26/  26]	Loss 0.187 (0.275)	train_nll   0.19 (  0.28)	train_penalty   0.01 (  0.01)	weight_norm  22.89 ( 22.82)	train_acc   0.92 (  0.88)	train_minacc   0.52 (  0.47)	train_majacc   0.97 (  0.96)	train_corr   0.00 (  0.00)	l1 7.2287 (7.3393)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.38it/s] 27%|##6       | 7/26 [00:00<00:00, 35.94it/s]                                               27%|##6       | 7/26 [00:00<00:00, 35.94it/s] 50%|#####     | 13/26 [00:00<00:00, 43.27it/s] 69%|######9   | 18/26 [00:00<00:00, 42.79it/s]                                                69%|######9   | 18/26 [00:00<00:00, 42.79it/s] 88%|########8 | 23/26 [00:00<00:00, 43.94it/s]100%|##########| 26/26 [00:00<00:00, 38.62it/s]
Test: [   0/  26]	Loss 0.260 (0.260)	test_acc   0.91 (  0.91)	test_minacc   0.41 (  0.41)	test_majacc   0.97 (  0.97)	Loss_d 0.260 (0.260)	test_acc_d   0.91 (  0.91)	test_minacc_d   0.41 (  0.41)	test_majacc_d   0.97 (  0.97)	test_corr_d   0.87 (  0.87)
Test: [  10/  26]	Loss 0.249 (0.259)	test_acc   0.89 (  0.89)	test_minacc   0.45 (  0.43)	test_majacc   0.96 (  0.97)	Loss_d 0.249 (0.259)	test_acc_d   0.89 (  0.89)	test_minacc_d   0.45 (  0.43)	test_majacc_d   0.96 (  0.97)	test_corr_d   0.86 (  0.87)
Test: [  20/  26]	Loss 0.312 (0.268)	test_acc   0.86 (  0.88)	test_minacc   0.34 (  0.40)	test_majacc   0.98 (  0.97)	Loss_d 0.312 (0.268)	test_acc_d   0.86 (  0.88)	test_minacc_d   0.34 (  0.40)	test_majacc_d   0.98 (  0.97)	test_corr_d   0.86 (  0.87)
Test: [  26/  26]	Loss 0.165 (0.261)	test_acc   0.95 (  0.89)	test_minacc   0.52 (  0.41)	test_majacc   1.00 (  0.97)	Loss_d 0.165 (0.261)	test_acc_d   0.95 (  0.89)	test_minacc_d   0.52 (  0.41)	test_majacc_d   1.00 (  0.97)	test_corr_d   0.90 (  0.87)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 60.72it/s]
Test: [  0/  1]	Loss 1.863 (1.863)	test_acc   0.30 (  0.30)	test_minacc   0.22 (  0.22)	test_majacc   0.99 (  0.99)	Loss_d 1.863 (1.863)	test_acc_d   0.30 (  0.30)	test_minacc_d   0.22 (  0.22)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.65 (  0.65)
Test: [  1/  1]	Loss 1.863 (1.863)	test_acc   0.30 (  0.30)	test_minacc   0.22 (  0.22)	test_majacc   0.99 (  0.99)	Loss_d 1.863 (1.863)	test_acc_d   0.30 (  0.30)	test_minacc_d   0.22 (  0.22)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.65 (  0.65)
Overall Timing[  9/  1]	epoch_time 0.0406 (0.0457)	validation_time 0.0007 (0.0011)	train_time 0.0399 (0.0441)
record: (train_acc, test_acc) (0.8767000162005425, 0.3150000274181366)
last accs (train_acc, test_acc) (0.8885000246763229, 0.2980000078678131)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 17.38it/s] 23%|##3       | 6/26 [00:00<00:00, 28.15it/s] 38%|###8      | 10/26 [00:00<00:00, 31.72it/s] 54%|#####3    | 14/26 [00:00<00:00, 32.75it/s] 69%|######9   | 18/26 [00:00<00:00, 33.40it/s] 85%|########4 | 22/26 [00:00<00:00, 34.64it/s]100%|##########| 26/26 [00:00<00:00, 35.26it/s]100%|##########| 26/26 [00:00<00:00, 30.84it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 260 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 261 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 262 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 263 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 264 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 265 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 266 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 267 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 268 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 269 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 270 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 271 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 272 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 273 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 274 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 275 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 276 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 277 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 278 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 279 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 280 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 281 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 282 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 283 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 284 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 285 400
penalty weights 0.0
Epoch: [10][  26/  26]	Loss 0.171 (0.256)	train_nll   0.17 (  0.26)	train_penalty   0.01 (  0.01)	weight_norm  23.08 ( 22.98)	train_acc   0.95 (  0.90)	train_minacc   0.68 (  0.54)	train_majacc   0.98 (  0.96)	train_corr   0.00 (  0.00)	l1 7.0738 (7.3224)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 18.30it/s] 31%|###       | 8/26 [00:00<00:00, 39.93it/s]                                               31%|###       | 8/26 [00:00<00:00, 39.93it/s] 50%|#####     | 13/26 [00:00<00:00, 43.25it/s] 69%|######9   | 18/26 [00:00<00:00, 45.05it/s]                                                69%|######9   | 18/26 [00:00<00:00, 45.05it/s] 88%|########8 | 23/26 [00:00<00:00, 42.73it/s]100%|##########| 26/26 [00:00<00:00, 39.28it/s]
Test: [   0/  26]	Loss 0.216 (0.216)	test_acc   0.92 (  0.92)	test_minacc   0.43 (  0.43)	test_majacc   0.99 (  0.99)	Loss_d 0.216 (0.216)	test_acc_d   0.92 (  0.92)	test_minacc_d   0.43 (  0.43)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.89 (  0.89)
Test: [  10/  26]	Loss 0.203 (0.231)	test_acc   0.91 (  0.91)	test_minacc   0.49 (  0.48)	test_majacc   0.97 (  0.98)	Loss_d 0.203 (0.231)	test_acc_d   0.91 (  0.91)	test_minacc_d   0.49 (  0.48)	test_majacc_d   0.97 (  0.98)	test_corr_d   0.88 (  0.88)
Test: [  20/  26]	Loss 0.260 (0.234)	test_acc   0.87 (  0.90)	test_minacc   0.41 (  0.48)	test_majacc   0.97 (  0.98)	Loss_d 0.260 (0.234)	test_acc_d   0.87 (  0.90)	test_minacc_d   0.41 (  0.48)	test_majacc_d   0.97 (  0.98)	test_corr_d   0.86 (  0.88)
Test: [  26/  26]	Loss 0.153 (0.229)	test_acc   0.95 (  0.91)	test_minacc   0.56 (  0.48)	test_majacc   1.00 (  0.98)	Loss_d 0.153 (0.229)	test_acc_d   0.95 (  0.91)	test_minacc_d   0.56 (  0.48)	test_majacc_d   1.00 (  0.98)	test_corr_d   0.91 (  0.88)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.25it/s]
Test: [  0/  1]	Loss 1.820 (1.820)	test_acc   0.31 (  0.31)	test_minacc   0.24 (  0.24)	test_majacc   0.98 (  0.98)	Loss_d 1.820 (1.820)	test_acc_d   0.31 (  0.31)	test_minacc_d   0.24 (  0.24)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.63 (  0.63)
Test: [  1/  1]	Loss 1.820 (1.820)	test_acc   0.31 (  0.31)	test_minacc   0.24 (  0.24)	test_majacc   0.98 (  0.98)	Loss_d 1.820 (1.820)	test_acc_d   0.31 (  0.31)	test_minacc_d   0.24 (  0.24)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.63 (  0.63)
Overall Timing[ 10/  1]	epoch_time 0.0362 (0.0448)	validation_time 0.0003 (0.0010)	train_time 0.0359 (0.0434)
record: (train_acc, test_acc) (0.8767000162005425, 0.3150000274181366)
last accs (train_acc, test_acc) (0.9060000200271606, 0.3140000104904175)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.58it/s] 19%|#9        | 5/26 [00:00<00:00, 23.16it/s] 35%|###4      | 9/26 [00:00<00:00, 28.22it/s] 50%|#####     | 13/26 [00:00<00:00, 31.11it/s] 65%|######5   | 17/26 [00:00<00:00, 32.47it/s] 81%|########  | 21/26 [00:00<00:00, 33.50it/s] 96%|#########6| 25/26 [00:00<00:00, 34.34it/s]100%|##########| 26/26 [00:00<00:00, 29.20it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 286 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 287 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 288 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 289 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 290 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 291 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 292 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 293 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 294 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 295 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 296 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 297 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 298 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 299 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 300 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 301 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 302 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 303 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 304 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 305 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 306 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 307 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 308 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 309 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 310 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 311 400
penalty weights 0.0
Epoch: [11][  26/  26]	Loss 0.172 (0.236)	train_nll   0.17 (  0.24)	train_penalty   0.01 (  0.01)	weight_norm  23.33 ( 23.19)	train_acc   0.94 (  0.90)	train_minacc   0.56 (  0.58)	train_majacc   0.98 (  0.96)	train_corr   0.00 (  0.00)	l1 7.1777 (7.5159)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:00, 25.31it/s] 35%|###4      | 9/26 [00:00<00:00, 40.33it/s]                                               35%|###4      | 9/26 [00:00<00:00, 40.33it/s] 54%|#####3    | 14/26 [00:00<00:00, 43.02it/s] 73%|#######3  | 19/26 [00:00<00:00, 42.00it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 42.00it/s] 92%|#########2| 24/26 [00:00<00:00, 44.23it/s]100%|##########| 26/26 [00:00<00:00, 39.33it/s]
Test: [   0/  26]	Loss 0.217 (0.217)	test_acc   0.91 (  0.91)	test_minacc   0.52 (  0.52)	test_majacc   0.96 (  0.96)	Loss_d 0.217 (0.217)	test_acc_d   0.91 (  0.91)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.96 (  0.96)	test_corr_d   0.86 (  0.86)
Test: [  10/  26]	Loss 0.207 (0.239)	test_acc   0.91 (  0.90)	test_minacc   0.49 (  0.45)	test_majacc   0.97 (  0.98)	Loss_d 0.207 (0.239)	test_acc_d   0.91 (  0.90)	test_minacc_d   0.49 (  0.45)	test_majacc_d   0.97 (  0.98)	test_corr_d   0.88 (  0.88)
Test: [  20/  26]	Loss 0.219 (0.234)	test_acc   0.91 (  0.90)	test_minacc   0.56 (  0.49)	test_majacc   0.99 (  0.98)	Loss_d 0.219 (0.234)	test_acc_d   0.91 (  0.90)	test_minacc_d   0.56 (  0.49)	test_majacc_d   0.99 (  0.98)	test_corr_d   0.83 (  0.87)
Test: [  26/  26]	Loss 0.136 (0.225)	test_acc   0.97 (  0.91)	test_minacc   0.72 (  0.50)	test_majacc   1.00 (  0.98)	Loss_d 0.136 (0.225)	test_acc_d   0.97 (  0.91)	test_minacc_d   0.72 (  0.50)	test_majacc_d   1.00 (  0.98)	test_corr_d   0.90 (  0.87)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.66it/s]
Test: [  0/  1]	Loss 1.897 (1.897)	test_acc   0.34 (  0.34)	test_minacc   0.27 (  0.27)	test_majacc   0.98 (  0.98)	Loss_d 1.897 (1.897)	test_acc_d   0.34 (  0.34)	test_minacc_d   0.27 (  0.27)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.62 (  0.62)
Test: [  1/  1]	Loss 1.897 (1.897)	test_acc   0.34 (  0.34)	test_minacc   0.27 (  0.27)	test_majacc   0.98 (  0.98)	Loss_d 1.897 (1.897)	test_acc_d   0.34 (  0.34)	test_minacc_d   0.27 (  0.27)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.62 (  0.62)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/153/checkpoints/model_best.pth
Overall Timing[ 11/  1]	epoch_time 0.0376 (0.0442)	validation_time 0.0004 (0.0010)	train_time 0.0372 (0.0429)
record: (train_acc, test_acc) (0.9077000265717506, 0.33800002932548523)
last accs (train_acc, test_acc) (0.9077000265717506, 0.33800002932548523)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.12it/s] 19%|#9        | 5/26 [00:00<00:00, 23.89it/s] 35%|###4      | 9/26 [00:00<00:00, 29.38it/s] 50%|#####     | 13/26 [00:00<00:00, 31.59it/s] 65%|######5   | 17/26 [00:00<00:00, 33.89it/s] 81%|########  | 21/26 [00:00<00:00, 34.90it/s] 96%|#########6| 25/26 [00:00<00:00, 36.21it/s]100%|##########| 26/26 [00:00<00:00, 30.25it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 312 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 313 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 314 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 315 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 316 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 317 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 318 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 319 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 320 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 321 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 322 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 323 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 324 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 325 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 326 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 327 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 328 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 329 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 330 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 331 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 332 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 333 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 334 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 335 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 336 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 337 400
penalty weights 0.0
Epoch: [12][  26/  26]	Loss 0.180 (0.231)	train_nll   0.18 (  0.23)	train_penalty   0.01 (  0.01)	weight_norm  23.62 ( 23.48)	train_acc   0.93 (  0.91)	train_minacc   0.56 (  0.60)	train_majacc   0.97 (  0.96)	train_corr   0.00 (  0.00)	l1 7.7555 (7.5321)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:05,  4.78it/s] 15%|#5        | 4/26 [00:00<00:01, 14.66it/s] 35%|###4      | 9/26 [00:00<00:00, 27.17it/s]                                               35%|###4      | 9/26 [00:00<00:00, 27.17it/s] 58%|#####7    | 15/26 [00:00<00:00, 35.90it/s]                                                58%|#####7    | 15/26 [00:00<00:00, 35.90it/s] 81%|########  | 21/26 [00:00<00:00, 39.87it/s]100%|##########| 26/26 [00:00<00:00, 42.48it/s]100%|##########| 26/26 [00:00<00:00, 31.29it/s]
Test: [   0/  26]	Loss 0.235 (0.235)	test_acc   0.92 (  0.92)	test_minacc   0.57 (  0.57)	test_majacc   0.97 (  0.97)	Loss_d 0.235 (0.235)	test_acc_d   0.92 (  0.92)	test_minacc_d   0.57 (  0.57)	test_majacc_d   0.97 (  0.97)	test_corr_d   0.86 (  0.86)
Test: [  10/  26]	Loss 0.261 (0.262)	test_acc   0.89 (  0.90)	test_minacc   0.49 (  0.49)	test_majacc   0.95 (  0.97)	Loss_d 0.261 (0.262)	test_acc_d   0.89 (  0.90)	test_minacc_d   0.49 (  0.49)	test_majacc_d   0.95 (  0.97)	test_corr_d   0.86 (  0.85)
Test: [  20/  26]	Loss 0.183 (0.242)	test_acc   0.93 (  0.91)	test_minacc   0.66 (  0.54)	test_majacc   0.98 (  0.97)	Loss_d 0.183 (0.242)	test_acc_d   0.93 (  0.91)	test_minacc_d   0.66 (  0.54)	test_majacc_d   0.98 (  0.97)	test_corr_d   0.79 (  0.84)
Test: [  26/  26]	Loss 0.131 (0.232)	test_acc   0.96 (  0.91)	test_minacc   0.64 (  0.55)	test_majacc   1.00 (  0.97)	Loss_d 0.131 (0.232)	test_acc_d   0.96 (  0.91)	test_minacc_d   0.64 (  0.55)	test_majacc_d   1.00 (  0.97)	test_corr_d   0.90 (  0.85)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 60.70it/s]
Test: [  0/  1]	Loss 2.313 (2.313)	test_acc   0.32 (  0.32)	test_minacc   0.25 (  0.25)	test_majacc   0.98 (  0.98)	Loss_d 2.313 (2.313)	test_acc_d   0.32 (  0.32)	test_minacc_d   0.25 (  0.25)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.62 (  0.62)
Test: [  1/  1]	Loss 2.313 (2.313)	test_acc   0.32 (  0.32)	test_minacc   0.25 (  0.25)	test_majacc   0.98 (  0.98)	Loss_d 2.313 (2.313)	test_acc_d   0.32 (  0.32)	test_minacc_d   0.25 (  0.25)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.62 (  0.62)
Overall Timing[ 12/  1]	epoch_time 0.0390 (0.0438)	validation_time 0.0004 (0.0009)	train_time 0.0385 (0.0425)
record: (train_acc, test_acc) (0.9077000265717506, 0.33800002932548523)
last accs (train_acc, test_acc) (0.9100000155568123, 0.32200002670288086)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.49it/s] 15%|#5        | 4/26 [00:00<00:01, 14.71it/s] 31%|###       | 8/26 [00:00<00:00, 22.40it/s] 46%|####6     | 12/26 [00:00<00:00, 26.59it/s] 62%|######1   | 16/26 [00:00<00:00, 29.52it/s] 77%|#######6  | 20/26 [00:00<00:00, 31.57it/s] 92%|#########2| 24/26 [00:00<00:00, 33.26it/s]100%|##########| 26/26 [00:00<00:00, 26.81it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 338 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 339 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 340 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 341 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 342 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 343 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 344 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 345 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 346 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 347 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 348 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 349 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 350 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 351 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 352 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 353 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 354 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 355 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 356 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 357 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 358 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 359 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 360 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 361 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 362 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 363 400
penalty weights 0.0
Epoch: [13][  26/  26]	Loss 0.177 (0.221)	train_nll   0.18 (  0.22)	train_penalty   0.00 (  0.01)	weight_norm  23.94 ( 23.79)	train_acc   0.92 (  0.91)	train_minacc   0.80 (  0.63)	train_majacc   0.93 (  0.96)	train_corr   0.00 (  0.00)	l1 7.9591 (7.5453)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.74it/s] 23%|##3       | 6/26 [00:00<00:00, 33.00it/s]                                               23%|##3       | 6/26 [00:00<00:00, 33.00it/s] 42%|####2     | 11/26 [00:00<00:00, 39.46it/s] 62%|######1   | 16/26 [00:00<00:00, 43.36it/s]                                                62%|######1   | 16/26 [00:00<00:00, 43.36it/s] 81%|########  | 21/26 [00:00<00:00, 44.71it/s]100%|##########| 26/26 [00:00<00:00, 46.20it/s]100%|##########| 26/26 [00:00<00:00, 38.30it/s]
Test: [   0/  26]	Loss 0.189 (0.189)	test_acc   0.93 (  0.93)	test_minacc   0.78 (  0.78)	test_majacc   0.95 (  0.95)	Loss_d 0.189 (0.189)	test_acc_d   0.93 (  0.93)	test_minacc_d   0.78 (  0.78)	test_majacc_d   0.95 (  0.95)	test_corr_d   0.76 (  0.76)
Test: [  10/  26]	Loss 0.226 (0.220)	test_acc   0.91 (  0.91)	test_minacc   0.73 (  0.71)	test_majacc   0.93 (  0.95)	Loss_d 0.226 (0.220)	test_acc_d   0.91 (  0.91)	test_minacc_d   0.73 (  0.71)	test_majacc_d   0.93 (  0.95)	test_corr_d   0.77 (  0.76)
Test: [  20/  26]	Loss 0.147 (0.202)	test_acc   0.93 (  0.92)	test_minacc   0.84 (  0.74)	test_majacc   0.95 (  0.95)	Loss_d 0.147 (0.202)	test_acc_d   0.93 (  0.92)	test_minacc_d   0.84 (  0.74)	test_majacc_d   0.95 (  0.95)	test_corr_d   0.67 (  0.75)
Test: [  26/  26]	Loss 0.087 (0.188)	test_acc   0.98 (  0.93)	test_minacc   0.88 (  0.76)	test_majacc   1.00 (  0.95)	Loss_d 0.087 (0.188)	test_acc_d   0.98 (  0.93)	test_minacc_d   0.88 (  0.76)	test_majacc_d   1.00 (  0.95)	test_corr_d   0.84 (  0.75)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.11it/s]
Test: [  0/  1]	Loss 2.125 (2.125)	test_acc   0.46 (  0.46)	test_minacc   0.41 (  0.41)	test_majacc   0.92 (  0.92)	Loss_d 2.125 (2.125)	test_acc_d   0.46 (  0.46)	test_minacc_d   0.41 (  0.41)	test_majacc_d   0.92 (  0.92)	test_corr_d   0.34 (  0.34)
Test: [  1/  1]	Loss 2.125 (2.125)	test_acc   0.46 (  0.46)	test_minacc   0.41 (  0.41)	test_majacc   0.92 (  0.92)	Loss_d 2.125 (2.125)	test_acc_d   0.46 (  0.46)	test_minacc_d   0.41 (  0.41)	test_majacc_d   0.92 (  0.92)	test_corr_d   0.34 (  0.34)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/153/checkpoints/model_best.pth
Overall Timing[ 13/  1]	epoch_time 0.0412 (0.0436)	validation_time 0.0004 (0.0009)	train_time 0.0408 (0.0424)
record: (train_acc, test_acc) (0.9252000167369843, 0.4580000340938568)
last accs (train_acc, test_acc) (0.9252000167369843, 0.4580000340938568)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.63it/s] 19%|#9        | 5/26 [00:00<00:01, 20.67it/s] 35%|###4      | 9/26 [00:00<00:00, 26.79it/s] 50%|#####     | 13/26 [00:00<00:00, 30.36it/s] 65%|######5   | 17/26 [00:00<00:00, 32.38it/s] 81%|########  | 21/26 [00:00<00:00, 33.87it/s] 96%|#########6| 25/26 [00:00<00:00, 35.03it/s]100%|##########| 26/26 [00:00<00:00, 28.88it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 364 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 365 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 366 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 367 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 368 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 369 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 370 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 371 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 372 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 373 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 374 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 375 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 376 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 377 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 378 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 379 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 380 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 381 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 382 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 383 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 384 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 385 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 386 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 387 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 388 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 389 400
penalty weights 0.0
Epoch: [14][  26/  26]	Loss 0.107 (0.216)	train_nll   0.11 (  0.22)	train_penalty   0.00 (  0.01)	weight_norm  24.27 ( 24.11)	train_acc   0.96 (  0.91)	train_minacc   0.80 (  0.64)	train_majacc   0.98 (  0.96)	train_corr   0.00 (  0.00)	l1 7.8557 (7.4531)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:00, 27.46it/s] 31%|###       | 8/26 [00:00<00:00, 35.47it/s]                                               31%|###       | 8/26 [00:00<00:00, 35.47it/s] 54%|#####3    | 14/26 [00:00<00:00, 41.82it/s] 77%|#######6  | 20/26 [00:00<00:00, 46.04it/s]                                                77%|#######6  | 20/26 [00:00<00:00, 46.04it/s] 96%|#########6| 25/26 [00:00<00:00, 43.12it/s]100%|##########| 26/26 [00:00<00:00, 38.51it/s]
Test: [   0/  26]	Loss 0.129 (0.129)	test_acc   0.94 (  0.94)	test_minacc   0.74 (  0.74)	test_majacc   0.96 (  0.96)	Loss_d 0.129 (0.129)	test_acc_d   0.94 (  0.94)	test_minacc_d   0.74 (  0.74)	test_majacc_d   0.96 (  0.96)	test_corr_d   0.80 (  0.80)
Test: [  10/  26]	Loss 0.122 (0.187)	test_acc   0.96 (  0.93)	test_minacc   0.82 (  0.72)	test_majacc   0.98 (  0.97)	Loss_d 0.122 (0.187)	test_acc_d   0.96 (  0.93)	test_minacc_d   0.82 (  0.72)	test_majacc_d   0.98 (  0.97)	test_corr_d   0.81 (  0.78)
Test: [  20/  26]	Loss 0.119 (0.172)	test_acc   0.96 (  0.93)	test_minacc   0.87 (  0.74)	test_majacc   0.98 (  0.97)	Loss_d 0.119 (0.172)	test_acc_d   0.96 (  0.93)	test_minacc_d   0.87 (  0.74)	test_majacc_d   0.98 (  0.97)	test_corr_d   0.70 (  0.77)
Test: [  26/  26]	Loss 0.062 (0.157)	test_acc   0.98 (  0.94)	test_minacc   0.92 (  0.77)	test_majacc   0.99 (  0.97)	Loss_d 0.062 (0.157)	test_acc_d   0.98 (  0.94)	test_minacc_d   0.92 (  0.77)	test_majacc_d   0.99 (  0.97)	test_corr_d   0.84 (  0.77)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 64.86it/s]
Test: [  0/  1]	Loss 2.269 (2.269)	test_acc   0.48 (  0.48)	test_minacc   0.42 (  0.42)	test_majacc   0.98 (  0.98)	Loss_d 2.269 (2.269)	test_acc_d   0.48 (  0.48)	test_minacc_d   0.42 (  0.42)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.31 (  0.31)
Test: [  1/  1]	Loss 2.269 (2.269)	test_acc   0.48 (  0.48)	test_minacc   0.42 (  0.42)	test_majacc   0.98 (  0.98)	Loss_d 2.269 (2.269)	test_acc_d   0.48 (  0.48)	test_minacc_d   0.42 (  0.42)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.31 (  0.31)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/153/checkpoints/model_best.pth
Overall Timing[ 14/  1]	epoch_time 0.0389 (0.0433)	validation_time 0.0003 (0.0009)	train_time 0.0385 (0.0421)
record: (train_acc, test_acc) (0.9406000227928162, 0.4780000150203705)
last accs (train_acc, test_acc) (0.9406000227928162, 0.4780000150203705)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.23it/s] 19%|#9        | 5/26 [00:00<00:00, 22.78it/s] 35%|###4      | 9/26 [00:00<00:00, 29.36it/s] 50%|#####     | 13/26 [00:00<00:00, 31.74it/s] 65%|######5   | 17/26 [00:00<00:00, 33.17it/s] 81%|########  | 21/26 [00:00<00:00, 34.01it/s] 96%|#########6| 25/26 [00:00<00:00, 34.97it/s]100%|##########| 26/26 [00:00<00:00, 29.30it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 390 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 391 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 392 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 393 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 394 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 395 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 396 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 397 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 398 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 399 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 400 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 401 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 402 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 403 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 404 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 405 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 406 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 407 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 408 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 409 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 410 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 411 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 412 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 413 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 414 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 415 400
penalty weights 10000.0
Epoch: [15][  26/  26]	Loss 0.008 (0.075)	train_nll   0.25 (  0.24)	train_penalty   0.01 (  0.01)	weight_norm  24.56 ( 24.43)	train_acc   0.90 (  0.90)	train_minacc   0.84 (  0.72)	train_majacc   0.90 (  0.93)	train_corr   0.00 (  0.00)	l1 6.1215 (7.4146)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:06,  3.65it/s] 23%|##3       | 6/26 [00:00<00:01, 19.29it/s]                                               23%|##3       | 6/26 [00:00<00:01, 19.29it/s] 50%|#####     | 13/26 [00:00<00:00, 33.14it/s] 73%|#######3  | 19/26 [00:00<00:00, 40.07it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 40.07it/s] 92%|#########2| 24/26 [00:00<00:00, 41.70it/s]100%|##########| 26/26 [00:00<00:00, 31.88it/s]
Test: [   0/  26]	Loss 0.324 (0.324)	test_acc   0.87 (  0.87)	test_minacc   0.78 (  0.78)	test_majacc   0.88 (  0.88)	Loss_d 0.324 (0.324)	test_acc_d   0.87 (  0.87)	test_minacc_d   0.78 (  0.78)	test_majacc_d   0.88 (  0.88)	test_corr_d   0.65 (  0.65)
Test: [  10/  26]	Loss 0.353 (0.362)	test_acc   0.83 (  0.83)	test_minacc   0.73 (  0.73)	test_majacc   0.85 (  0.85)	Loss_d 0.353 (0.362)	test_acc_d   0.83 (  0.83)	test_minacc_d   0.73 (  0.73)	test_majacc_d   0.85 (  0.85)	test_corr_d   0.61 (  0.59)
Test: [  20/  26]	Loss 0.376 (0.366)	test_acc   0.81 (  0.83)	test_minacc   0.69 (  0.73)	test_majacc   0.83 (  0.85)	Loss_d 0.376 (0.366)	test_acc_d   0.81 (  0.83)	test_minacc_d   0.69 (  0.73)	test_majacc_d   0.83 (  0.85)	test_corr_d   0.56 (  0.60)
Test: [  26/  26]	Loss 0.279 (0.366)	test_acc   0.87 (  0.83)	test_minacc   0.84 (  0.73)	test_majacc   0.87 (  0.85)	Loss_d 0.279 (0.366)	test_acc_d   0.87 (  0.83)	test_minacc_d   0.84 (  0.73)	test_majacc_d   0.87 (  0.85)	test_corr_d   0.68 (  0.60)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.62it/s]
Test: [  0/  1]	Loss 1.176 (1.176)	test_acc   0.54 (  0.54)	test_minacc   0.50 (  0.50)	test_majacc   0.83 (  0.83)	Loss_d 1.176 (1.176)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.83 (  0.83)	test_corr_d   0.12 (  0.12)
Test: [  1/  1]	Loss 1.176 (1.176)	test_acc   0.54 (  0.54)	test_minacc   0.50 (  0.50)	test_majacc   0.83 (  0.83)	Loss_d 1.176 (1.176)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.83 (  0.83)	test_corr_d   0.12 (  0.12)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/153/checkpoints/model_best.pth
Overall Timing[ 15/  1]	epoch_time 0.0398 (0.0431)	validation_time 0.0004 (0.0008)	train_time 0.0393 (0.0420)
record: (train_acc, test_acc) (0.8304000234603882, 0.5350000262260437)
last accs (train_acc, test_acc) (0.8304000234603882, 0.5350000262260437)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.63it/s] 19%|#9        | 5/26 [00:00<00:00, 23.68it/s] 35%|###4      | 9/26 [00:00<00:00, 28.69it/s] 50%|#####     | 13/26 [00:00<00:00, 31.10it/s] 65%|######5   | 17/26 [00:00<00:00, 32.68it/s] 81%|########  | 21/26 [00:00<00:00, 33.71it/s] 96%|#########6| 25/26 [00:00<00:00, 34.94it/s]100%|##########| 26/26 [00:00<00:00, 29.66it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 416 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 417 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 418 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 419 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 420 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 421 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 422 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 423 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 424 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 425 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 426 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 427 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 428 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 429 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 430 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 431 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 432 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 433 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 434 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 435 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 436 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 437 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 438 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 439 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 440 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 441 400
penalty weights 10000.0
Epoch: [16][  26/  26]	Loss 0.002 (0.002)	train_nll   0.39 (  0.40)	train_penalty   0.00 (  0.00)	weight_norm  24.62 ( 24.60)	train_acc   0.83 (  0.81)	train_minacc   0.84 (  0.76)	train_majacc   0.83 (  0.82)	train_corr   0.00 (  0.00)	l1 5.6046 (5.7493)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:01, 18.28it/s] 35%|###4      | 9/26 [00:00<00:00, 37.11it/s]                                               35%|###4      | 9/26 [00:00<00:00, 37.11it/s] 58%|#####7    | 15/26 [00:00<00:00, 42.05it/s]                                                58%|#####7    | 15/26 [00:00<00:00, 42.05it/s] 81%|########  | 21/26 [00:00<00:00, 46.57it/s]100%|##########| 26/26 [00:00<00:00, 39.99it/s]
Test: [   0/  26]	Loss 0.395 (0.395)	test_acc   0.81 (  0.81)	test_minacc   0.80 (  0.80)	test_majacc   0.81 (  0.81)	Loss_d 0.395 (0.395)	test_acc_d   0.81 (  0.81)	test_minacc_d   0.80 (  0.80)	test_majacc_d   0.81 (  0.81)	test_corr_d   0.57 (  0.57)
Test: [  10/  26]	Loss 0.413 (0.410)	test_acc   0.78 (  0.80)	test_minacc   0.80 (  0.80)	test_majacc   0.78 (  0.80)	Loss_d 0.413 (0.410)	test_acc_d   0.78 (  0.80)	test_minacc_d   0.80 (  0.80)	test_majacc_d   0.78 (  0.80)	test_corr_d   0.52 (  0.51)
Test: [  20/  26]	Loss 0.425 (0.412)	test_acc   0.79 (  0.80)	test_minacc   0.76 (  0.78)	test_majacc   0.79 (  0.80)	Loss_d 0.425 (0.412)	test_acc_d   0.79 (  0.80)	test_minacc_d   0.76 (  0.78)	test_majacc_d   0.79 (  0.80)	test_corr_d   0.49 (  0.52)
Test: [  26/  26]	Loss 0.384 (0.411)	test_acc   0.83 (  0.80)	test_minacc   0.88 (  0.78)	test_majacc   0.83 (  0.81)	Loss_d 0.384 (0.411)	test_acc_d   0.83 (  0.80)	test_minacc_d   0.88 (  0.78)	test_majacc_d   0.83 (  0.81)	test_corr_d   0.58 (  0.52)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.62it/s]
Test: [  0/  1]	Loss 0.946 (0.946)	test_acc   0.58 (  0.58)	test_minacc   0.55 (  0.55)	test_majacc   0.78 (  0.78)	Loss_d 0.946 (0.946)	test_acc_d   0.58 (  0.58)	test_minacc_d   0.55 (  0.55)	test_majacc_d   0.78 (  0.78)	test_corr_d   0.03 (  0.03)
Test: [  1/  1]	Loss 0.946 (0.946)	test_acc   0.58 (  0.58)	test_minacc   0.55 (  0.55)	test_majacc   0.78 (  0.78)	Loss_d 0.946 (0.946)	test_acc_d   0.58 (  0.58)	test_minacc_d   0.55 (  0.55)	test_majacc_d   0.78 (  0.78)	test_corr_d   0.03 (  0.03)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/153/checkpoints/model_best.pth
Overall Timing[ 16/  1]	epoch_time 0.0396 (0.0429)	validation_time 0.0003 (0.0008)	train_time 0.0392 (0.0418)
record: (train_acc, test_acc) (0.8036000235080719, 0.5770000219345093)
last accs (train_acc, test_acc) (0.8036000235080719, 0.5770000219345093)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.53it/s] 19%|#9        | 5/26 [00:00<00:01, 19.45it/s] 35%|###4      | 9/26 [00:00<00:00, 26.18it/s] 50%|#####     | 13/26 [00:00<00:00, 29.77it/s] 65%|######5   | 17/26 [00:00<00:00, 32.17it/s] 81%|########  | 21/26 [00:00<00:00, 33.68it/s] 96%|#########6| 25/26 [00:00<00:00, 34.09it/s]100%|##########| 26/26 [00:00<00:00, 27.78it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 442 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 443 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 444 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 445 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 446 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 447 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 448 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 449 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 450 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 451 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 452 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 453 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 454 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 455 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 456 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 457 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 458 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 459 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 460 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 461 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 462 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 463 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 464 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 465 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 466 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 467 400
penalty weights 10000.0
Epoch: [17][  26/  26]	Loss 0.001 (0.002)	train_nll   0.40 (  0.42)	train_penalty   0.00 (  0.00)	weight_norm  24.62 ( 24.62)	train_acc   0.81 (  0.80)	train_minacc   0.80 (  0.77)	train_majacc   0.81 (  0.80)	train_corr   0.00 (  0.00)	l1 5.5528 (5.6131)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.65it/s] 27%|##6       | 7/26 [00:00<00:00, 36.22it/s]                                               27%|##6       | 7/26 [00:00<00:00, 36.22it/s] 46%|####6     | 12/26 [00:00<00:00, 37.62it/s] 65%|######5   | 17/26 [00:00<00:00, 40.69it/s]                                                65%|######5   | 17/26 [00:00<00:00, 40.69it/s] 85%|########4 | 22/26 [00:00<00:00, 42.76it/s]100%|##########| 26/26 [00:00<00:00, 36.26it/s]
Test: [   0/  26]	Loss 0.433 (0.433)	test_acc   0.78 (  0.78)	test_minacc   0.80 (  0.80)	test_majacc   0.78 (  0.78)	Loss_d 0.433 (0.433)	test_acc_d   0.78 (  0.78)	test_minacc_d   0.80 (  0.80)	test_majacc_d   0.78 (  0.78)	test_corr_d   0.54 (  0.54)
Test: [  10/  26]	Loss 0.443 (0.422)	test_acc   0.75 (  0.79)	test_minacc   0.78 (  0.79)	test_majacc   0.75 (  0.79)	Loss_d 0.443 (0.422)	test_acc_d   0.75 (  0.79)	test_minacc_d   0.78 (  0.79)	test_majacc_d   0.75 (  0.79)	test_corr_d   0.48 (  0.50)
Test: [  20/  26]	Loss 0.429 (0.426)	test_acc   0.81 (  0.79)	test_minacc   0.77 (  0.78)	test_majacc   0.82 (  0.79)	Loss_d 0.429 (0.426)	test_acc_d   0.81 (  0.79)	test_minacc_d   0.77 (  0.78)	test_majacc_d   0.82 (  0.79)	test_corr_d   0.48 (  0.51)
Test: [  26/  26]	Loss 0.414 (0.424)	test_acc   0.80 (  0.79)	test_minacc   0.80 (  0.78)	test_majacc   0.80 (  0.79)	Loss_d 0.414 (0.424)	test_acc_d   0.80 (  0.79)	test_minacc_d   0.80 (  0.78)	test_majacc_d   0.80 (  0.79)	test_corr_d   0.57 (  0.51)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 60.92it/s]
Test: [  0/  1]	Loss 0.938 (0.938)	test_acc   0.60 (  0.60)	test_minacc   0.57 (  0.57)	test_majacc   0.81 (  0.81)	Loss_d 0.938 (0.938)	test_acc_d   0.60 (  0.60)	test_minacc_d   0.57 (  0.57)	test_majacc_d   0.81 (  0.81)	test_corr_d  -0.00 ( -0.00)
Test: [  1/  1]	Loss 0.938 (0.938)	test_acc   0.60 (  0.60)	test_minacc   0.57 (  0.57)	test_majacc   0.81 (  0.81)	Loss_d 0.938 (0.938)	test_acc_d   0.60 (  0.60)	test_minacc_d   0.57 (  0.57)	test_majacc_d   0.81 (  0.81)	test_corr_d  -0.00 ( -0.00)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/153/checkpoints/model_best.pth
Overall Timing[ 17/  1]	epoch_time 0.0406 (0.0428)	validation_time 0.0005 (0.0008)	train_time 0.0401 (0.0417)
record: (train_acc, test_acc) (0.791200031042099, 0.5960000157356262)
last accs (train_acc, test_acc) (0.791200031042099, 0.5960000157356262)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 13.90it/s] 23%|##3       | 6/26 [00:00<00:00, 24.91it/s] 38%|###8      | 10/26 [00:00<00:00, 28.80it/s] 54%|#####3    | 14/26 [00:00<00:00, 31.02it/s] 69%|######9   | 18/26 [00:00<00:00, 32.48it/s] 85%|########4 | 22/26 [00:00<00:00, 33.76it/s]100%|##########| 26/26 [00:00<00:00, 34.20it/s]100%|##########| 26/26 [00:00<00:00, 28.31it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 468 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 469 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 470 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 471 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 472 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 473 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 474 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 475 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 476 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 477 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 478 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 479 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 480 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 481 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 482 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 483 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 484 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 485 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 486 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 487 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 488 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 489 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 490 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 491 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 492 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 493 400
penalty weights 10000.0
Epoch: [18][  26/  26]	Loss 0.000 (0.001)	train_nll   0.41 (  0.43)	train_penalty   0.00 (  0.00)	weight_norm  24.63 ( 24.63)	train_acc   0.80 (  0.79)	train_minacc   0.80 (  0.79)	train_majacc   0.80 (  0.79)	train_corr   0.00 (  0.00)	l1 5.5995 (5.6306)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.31it/s] 19%|#9        | 5/26 [00:00<00:00, 24.52it/s] 38%|###8      | 10/26 [00:00<00:00, 31.95it/s]                                                38%|###8      | 10/26 [00:00<00:00, 31.95it/s] 58%|#####7    | 15/26 [00:00<00:00, 37.46it/s] 77%|#######6  | 20/26 [00:00<00:00, 41.36it/s]                                                77%|#######6  | 20/26 [00:00<00:00, 41.36it/s] 96%|#########6| 25/26 [00:00<00:00, 43.39it/s]100%|##########| 26/26 [00:00<00:00, 34.77it/s]
Test: [   0/  26]	Loss 0.408 (0.408)	test_acc   0.81 (  0.81)	test_minacc   0.83 (  0.83)	test_majacc   0.81 (  0.81)	Loss_d 0.408 (0.408)	test_acc_d   0.81 (  0.81)	test_minacc_d   0.83 (  0.83)	test_majacc_d   0.81 (  0.81)	test_corr_d   0.56 (  0.56)
Test: [  10/  26]	Loss 0.421 (0.394)	test_acc   0.77 (  0.81)	test_minacc   0.76 (  0.80)	test_majacc   0.77 (  0.81)	Loss_d 0.421 (0.394)	test_acc_d   0.77 (  0.81)	test_minacc_d   0.76 (  0.80)	test_majacc_d   0.77 (  0.81)	test_corr_d   0.51 (  0.53)
Test: [  20/  26]	Loss 0.395 (0.403)	test_acc   0.83 (  0.80)	test_minacc   0.80 (  0.79)	test_majacc   0.83 (  0.81)	Loss_d 0.395 (0.403)	test_acc_d   0.83 (  0.80)	test_minacc_d   0.80 (  0.79)	test_majacc_d   0.83 (  0.81)	test_corr_d   0.51 (  0.53)
Test: [  26/  26]	Loss 0.404 (0.403)	test_acc   0.81 (  0.80)	test_minacc   0.80 (  0.78)	test_majacc   0.81 (  0.81)	Loss_d 0.404 (0.403)	test_acc_d   0.81 (  0.80)	test_minacc_d   0.80 (  0.78)	test_majacc_d   0.81 (  0.81)	test_corr_d   0.59 (  0.54)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 65.34it/s]
Test: [  0/  1]	Loss 0.949 (0.949)	test_acc   0.59 (  0.59)	test_minacc   0.56 (  0.56)	test_majacc   0.82 (  0.82)	Loss_d 0.949 (0.949)	test_acc_d   0.59 (  0.59)	test_minacc_d   0.56 (  0.56)	test_majacc_d   0.82 (  0.82)	test_corr_d   0.02 (  0.02)
Test: [  1/  1]	Loss 0.949 (0.949)	test_acc   0.59 (  0.59)	test_minacc   0.56 (  0.56)	test_majacc   0.82 (  0.82)	Loss_d 0.949 (0.949)	test_acc_d   0.59 (  0.59)	test_minacc_d   0.56 (  0.56)	test_majacc_d   0.82 (  0.82)	test_corr_d   0.02 (  0.02)
Overall Timing[ 18/  1]	epoch_time 0.0440 (0.0428)	validation_time 0.0004 (0.0008)	train_time 0.0435 (0.0418)
record: (train_acc, test_acc) (0.791200031042099, 0.5960000157356262)
last accs (train_acc, test_acc) (0.8040000227689743, 0.5870000123977661)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:07,  3.40it/s] 19%|#9        | 5/26 [00:00<00:01, 14.56it/s] 35%|###4      | 9/26 [00:00<00:00, 21.54it/s] 50%|#####     | 13/26 [00:00<00:00, 26.30it/s] 65%|######5   | 17/26 [00:00<00:00, 29.34it/s] 81%|########  | 21/26 [00:00<00:00, 31.65it/s] 96%|#########6| 25/26 [00:00<00:00, 33.43it/s]100%|##########| 26/26 [00:01<00:00, 24.93it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 494 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 495 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 496 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 497 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 498 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 499 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 500 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 501 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 502 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 503 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 504 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 505 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 506 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 507 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 508 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 509 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 510 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 511 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 512 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 513 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 514 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 515 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 516 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 517 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 518 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 519 400
penalty weights 10000.0
Epoch: [19][  26/  26]	Loss 0.003 (0.003)	train_nll   0.42 (  0.41)	train_penalty   0.00 (  0.00)	weight_norm  24.64 ( 24.64)	train_acc   0.79 (  0.80)	train_minacc   0.80 (  0.79)	train_majacc   0.79 (  0.80)	train_corr   0.00 (  0.00)	l1 5.7276 (5.5716)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:05,  4.74it/s] 23%|##3       | 6/26 [00:00<00:00, 21.76it/s]                                               23%|##3       | 6/26 [00:00<00:00, 21.76it/s] 42%|####2     | 11/26 [00:00<00:00, 29.83it/s] 62%|######1   | 16/26 [00:00<00:00, 35.94it/s]                                                62%|######1   | 16/26 [00:00<00:00, 35.94it/s] 81%|########  | 21/26 [00:00<00:00, 39.60it/s]100%|##########| 26/26 [00:00<00:00, 31.97it/s]
Test: [   0/  26]	Loss 0.419 (0.419)	test_acc   0.78 (  0.78)	test_minacc   0.70 (  0.70)	test_majacc   0.80 (  0.80)	Loss_d 0.419 (0.419)	test_acc_d   0.78 (  0.78)	test_minacc_d   0.70 (  0.70)	test_majacc_d   0.80 (  0.80)	test_corr_d   0.55 (  0.55)
Test: [  10/  26]	Loss 0.400 (0.425)	test_acc   0.80 (  0.79)	test_minacc   0.78 (  0.76)	test_majacc   0.81 (  0.79)	Loss_d 0.400 (0.425)	test_acc_d   0.80 (  0.79)	test_minacc_d   0.78 (  0.76)	test_majacc_d   0.81 (  0.79)	test_corr_d   0.55 (  0.53)
Test: [  20/  26]	Loss 0.427 (0.437)	test_acc   0.79 (  0.78)	test_minacc   0.84 (  0.75)	test_majacc   0.78 (  0.79)	Loss_d 0.427 (0.437)	test_acc_d   0.79 (  0.78)	test_minacc_d   0.84 (  0.75)	test_majacc_d   0.78 (  0.79)	test_corr_d   0.48 (  0.52)
Test: [  26/  26]	Loss 0.405 (0.432)	test_acc   0.80 (  0.78)	test_minacc   0.80 (  0.75)	test_majacc   0.80 (  0.79)	Loss_d 0.405 (0.432)	test_acc_d   0.80 (  0.78)	test_minacc_d   0.80 (  0.75)	test_majacc_d   0.80 (  0.79)	test_corr_d   0.60 (  0.53)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.41it/s]
Test: [  0/  1]	Loss 0.976 (0.976)	test_acc   0.62 (  0.62)	test_minacc   0.60 (  0.60)	test_majacc   0.77 (  0.77)	Loss_d 0.976 (0.976)	test_acc_d   0.62 (  0.62)	test_minacc_d   0.60 (  0.60)	test_majacc_d   0.77 (  0.77)	test_corr_d  -0.04 ( -0.04)
Test: [  1/  1]	Loss 0.976 (0.976)	test_acc   0.62 (  0.62)	test_minacc   0.60 (  0.60)	test_majacc   0.77 (  0.77)	Loss_d 0.976 (0.976)	test_acc_d   0.62 (  0.62)	test_minacc_d   0.60 (  0.60)	test_majacc_d   0.77 (  0.77)	test_corr_d  -0.04 ( -0.04)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/153/checkpoints/model_best.pth
Overall Timing[ 19/  1]	epoch_time 0.0393 (0.0426)	validation_time 0.0003 (0.0007)	train_time 0.0389 (0.0417)
record: (train_acc, test_acc) (0.784200028181076, 0.6180000305175781)
last accs (train_acc, test_acc) (0.784200028181076, 0.6180000305175781)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:05,  4.71it/s] 19%|#9        | 5/26 [00:00<00:01, 17.96it/s] 35%|###4      | 9/26 [00:00<00:00, 24.60it/s] 50%|#####     | 13/26 [00:00<00:00, 28.71it/s] 65%|######5   | 17/26 [00:00<00:00, 31.27it/s] 81%|########  | 21/26 [00:00<00:00, 32.99it/s] 96%|#########6| 25/26 [00:00<00:00, 34.33it/s]100%|##########| 26/26 [00:00<00:00, 27.00it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 520 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 521 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 522 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 523 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 524 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 525 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 526 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 527 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 528 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 529 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 530 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 531 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 532 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 533 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 534 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 535 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 536 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 537 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 538 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 539 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 540 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 541 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 542 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 543 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 544 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 545 400
penalty weights 10000.0
Epoch: [20][  26/  26]	Loss 0.005 (0.003)	train_nll   0.33 (  0.40)	train_penalty   0.00 (  0.00)	weight_norm  24.65 ( 24.65)	train_acc   0.84 (  0.80)	train_minacc   0.80 (  0.77)	train_majacc   0.84 (  0.81)	train_corr   0.00 (  0.00)	l1 5.7744 (5.6945)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:07,  3.54it/s] 27%|##6       | 7/26 [00:00<00:00, 21.65it/s]                                               27%|##6       | 7/26 [00:00<00:00, 21.65it/s] 46%|####6     | 12/26 [00:00<00:00, 30.02it/s] 65%|######5   | 17/26 [00:00<00:00, 34.01it/s]                                                65%|######5   | 17/26 [00:00<00:00, 34.01it/s] 85%|########4 | 22/26 [00:00<00:00, 37.99it/s]100%|##########| 26/26 [00:00<00:00, 29.86it/s]
Test: [   0/  26]	Loss 0.395 (0.395)	test_acc   0.81 (  0.81)	test_minacc   0.83 (  0.83)	test_majacc   0.81 (  0.81)	Loss_d 0.395 (0.395)	test_acc_d   0.81 (  0.81)	test_minacc_d   0.83 (  0.83)	test_majacc_d   0.81 (  0.81)	test_corr_d   0.59 (  0.59)
Test: [  10/  26]	Loss 0.389 (0.391)	test_acc   0.78 (  0.80)	test_minacc   0.73 (  0.79)	test_majacc   0.79 (  0.81)	Loss_d 0.389 (0.391)	test_acc_d   0.78 (  0.80)	test_minacc_d   0.73 (  0.79)	test_majacc_d   0.79 (  0.81)	test_corr_d   0.58 (  0.56)
Test: [  20/  26]	Loss 0.396 (0.392)	test_acc   0.81 (  0.81)	test_minacc   0.80 (  0.78)	test_majacc   0.82 (  0.81)	Loss_d 0.396 (0.392)	test_acc_d   0.81 (  0.81)	test_minacc_d   0.80 (  0.78)	test_majacc_d   0.82 (  0.81)	test_corr_d   0.52 (  0.57)
Test: [  26/  26]	Loss 0.337 (0.388)	test_acc   0.83 (  0.81)	test_minacc   0.80 (  0.78)	test_majacc   0.83 (  0.82)	Loss_d 0.337 (0.388)	test_acc_d   0.83 (  0.81)	test_minacc_d   0.80 (  0.78)	test_majacc_d   0.83 (  0.82)	test_corr_d   0.66 (  0.58)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 64.93it/s]
Test: [  0/  1]	Loss 1.093 (1.093)	test_acc   0.59 (  0.59)	test_minacc   0.55 (  0.55)	test_majacc   0.90 (  0.90)	Loss_d 1.093 (1.093)	test_acc_d   0.59 (  0.59)	test_minacc_d   0.55 (  0.55)	test_majacc_d   0.90 (  0.90)	test_corr_d   0.07 (  0.07)
Test: [  1/  1]	Loss 1.093 (1.093)	test_acc   0.59 (  0.59)	test_minacc   0.55 (  0.55)	test_majacc   0.90 (  0.90)	Loss_d 1.093 (1.093)	test_acc_d   0.59 (  0.59)	test_minacc_d   0.55 (  0.55)	test_majacc_d   0.90 (  0.90)	test_corr_d   0.07 (  0.07)
Overall Timing[ 20/  1]	epoch_time 0.0445 (0.0427)	validation_time 0.0004 (0.0007)	train_time 0.0440 (0.0418)
record: (train_acc, test_acc) (0.784200028181076, 0.6180000305175781)
last accs (train_acc, test_acc) (0.810400030195713, 0.5850000381469727)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.61it/s] 19%|#9        | 5/26 [00:00<00:01, 18.99it/s] 35%|###4      | 9/26 [00:00<00:00, 25.66it/s] 50%|#####     | 13/26 [00:00<00:00, 29.38it/s] 65%|######5   | 17/26 [00:00<00:00, 31.50it/s] 81%|########  | 21/26 [00:00<00:00, 32.60it/s] 96%|#########6| 25/26 [00:00<00:00, 33.83it/s]100%|##########| 26/26 [00:00<00:00, 27.89it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 546 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 547 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 548 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 549 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 550 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 551 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 552 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 553 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 554 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 555 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 556 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 557 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 558 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 559 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 560 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 561 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 562 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 563 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 564 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 565 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 566 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 567 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 568 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 569 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 570 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 571 400
penalty weights 10000.0
Epoch: [21][  26/  26]	Loss 0.001 (0.002)	train_nll   0.36 (  0.39)	train_penalty   0.00 (  0.00)	weight_norm  24.67 ( 24.66)	train_acc   0.82 (  0.81)	train_minacc   0.80 (  0.78)	train_majacc   0.82 (  0.81)	train_corr   0.00 (  0.00)	l1 5.8079 (5.9970)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:05,  4.79it/s] 19%|#9        | 5/26 [00:00<00:01, 18.38it/s]                                               19%|#9        | 5/26 [00:00<00:01, 18.38it/s] 42%|####2     | 11/26 [00:00<00:00, 29.94it/s] 65%|######5   | 17/26 [00:00<00:00, 37.89it/s]                                                65%|######5   | 17/26 [00:00<00:00, 37.89it/s] 85%|########4 | 22/26 [00:00<00:00, 40.86it/s]100%|##########| 26/26 [00:00<00:00, 31.92it/s]
Test: [   0/  26]	Loss 0.388 (0.388)	test_acc   0.80 (  0.80)	test_minacc   0.76 (  0.76)	test_majacc   0.81 (  0.81)	Loss_d 0.388 (0.388)	test_acc_d   0.80 (  0.80)	test_minacc_d   0.76 (  0.76)	test_majacc_d   0.81 (  0.81)	test_corr_d   0.60 (  0.60)
Test: [  10/  26]	Loss 0.389 (0.379)	test_acc   0.78 (  0.81)	test_minacc   0.80 (  0.80)	test_majacc   0.78 (  0.81)	Loss_d 0.389 (0.379)	test_acc_d   0.78 (  0.81)	test_minacc_d   0.80 (  0.80)	test_majacc_d   0.78 (  0.81)	test_corr_d   0.58 (  0.57)
Test: [  20/  26]	Loss 0.393 (0.382)	test_acc   0.81 (  0.81)	test_minacc   0.77 (  0.79)	test_majacc   0.81 (  0.82)	Loss_d 0.393 (0.382)	test_acc_d   0.81 (  0.81)	test_minacc_d   0.77 (  0.79)	test_majacc_d   0.81 (  0.82)	test_corr_d   0.53 (  0.58)
Test: [  26/  26]	Loss 0.367 (0.383)	test_acc   0.82 (  0.81)	test_minacc   0.80 (  0.79)	test_majacc   0.82 (  0.82)	Loss_d 0.367 (0.383)	test_acc_d   0.82 (  0.81)	test_minacc_d   0.80 (  0.79)	test_majacc_d   0.82 (  0.82)	test_corr_d   0.64 (  0.58)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 60.30it/s]
Test: [  0/  1]	Loss 1.097 (1.097)	test_acc   0.57 (  0.57)	test_minacc   0.54 (  0.54)	test_majacc   0.82 (  0.82)	Loss_d 1.097 (1.097)	test_acc_d   0.57 (  0.57)	test_minacc_d   0.54 (  0.54)	test_majacc_d   0.82 (  0.82)	test_corr_d   0.10 (  0.10)
Test: [  1/  1]	Loss 1.097 (1.097)	test_acc   0.57 (  0.57)	test_minacc   0.54 (  0.54)	test_majacc   0.82 (  0.82)	Loss_d 1.097 (1.097)	test_acc_d   0.57 (  0.57)	test_minacc_d   0.54 (  0.54)	test_majacc_d   0.82 (  0.82)	test_corr_d   0.10 (  0.10)
Overall Timing[ 21/  1]	epoch_time 0.0412 (0.0427)	validation_time 0.0003 (0.0007)	train_time 0.0409 (0.0417)
record: (train_acc, test_acc) (0.784200028181076, 0.6180000305175781)
last accs (train_acc, test_acc) (0.8130000236034394, 0.5710000395774841)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.73it/s] 19%|#9        | 5/26 [00:00<00:00, 26.19it/s] 35%|###4      | 9/26 [00:00<00:00, 32.08it/s] 50%|#####     | 13/26 [00:00<00:00, 34.10it/s] 65%|######5   | 17/26 [00:00<00:00, 34.55it/s] 81%|########  | 21/26 [00:00<00:00, 34.42it/s] 96%|#########6| 25/26 [00:00<00:00, 34.38it/s]100%|##########| 26/26 [00:00<00:00, 30.55it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 572 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 573 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 574 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 575 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 576 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 577 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 578 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 579 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 580 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 581 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 582 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 583 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 584 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 585 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 586 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 587 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 588 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 589 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 590 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 591 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 592 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 593 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 594 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 595 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 596 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 597 400
penalty weights 10000.0
Epoch: [22][  26/  26]	Loss 0.001 (0.001)	train_nll   0.38 (  0.39)	train_penalty   0.00 (  0.00)	weight_norm  24.67 ( 24.67)	train_acc   0.81 (  0.80)	train_minacc   0.76 (  0.79)	train_majacc   0.81 (  0.81)	train_corr   0.00 (  0.00)	l1 6.0369 (5.9807)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.84it/s] 23%|##3       | 6/26 [00:00<00:00, 27.22it/s]                                               23%|##3       | 6/26 [00:00<00:00, 27.22it/s] 42%|####2     | 11/26 [00:00<00:00, 35.21it/s] 62%|######1   | 16/26 [00:00<00:00, 37.85it/s]                                                62%|######1   | 16/26 [00:00<00:00, 37.85it/s] 81%|########  | 21/26 [00:00<00:00, 41.01it/s]100%|##########| 26/26 [00:00<00:00, 34.76it/s]
Test: [   0/  26]	Loss 0.384 (0.384)	test_acc   0.82 (  0.82)	test_minacc   0.78 (  0.78)	test_majacc   0.82 (  0.82)	Loss_d 0.384 (0.384)	test_acc_d   0.82 (  0.82)	test_minacc_d   0.78 (  0.78)	test_majacc_d   0.82 (  0.82)	test_corr_d   0.59 (  0.59)
Test: [  10/  26]	Loss 0.367 (0.367)	test_acc   0.78 (  0.82)	test_minacc   0.80 (  0.80)	test_majacc   0.78 (  0.82)	Loss_d 0.367 (0.367)	test_acc_d   0.78 (  0.82)	test_minacc_d   0.80 (  0.80)	test_majacc_d   0.78 (  0.82)	test_corr_d   0.58 (  0.57)
Test: [  20/  26]	Loss 0.386 (0.376)	test_acc   0.82 (  0.81)	test_minacc   0.84 (  0.80)	test_majacc   0.81 (  0.82)	Loss_d 0.386 (0.376)	test_acc_d   0.82 (  0.81)	test_minacc_d   0.84 (  0.80)	test_majacc_d   0.81 (  0.82)	test_corr_d   0.52 (  0.57)
Test: [  26/  26]	Loss 0.373 (0.377)	test_acc   0.81 (  0.81)	test_minacc   0.76 (  0.79)	test_majacc   0.82 (  0.82)	Loss_d 0.373 (0.377)	test_acc_d   0.81 (  0.81)	test_minacc_d   0.76 (  0.79)	test_majacc_d   0.82 (  0.82)	test_corr_d   0.64 (  0.57)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 59.63it/s]
Test: [  0/  1]	Loss 1.109 (1.109)	test_acc   0.61 (  0.61)	test_minacc   0.58 (  0.58)	test_majacc   0.83 (  0.83)	Loss_d 1.109 (1.109)	test_acc_d   0.61 (  0.61)	test_minacc_d   0.58 (  0.58)	test_majacc_d   0.83 (  0.83)	test_corr_d   0.04 (  0.04)
Test: [  1/  1]	Loss 1.109 (1.109)	test_acc   0.61 (  0.61)	test_minacc   0.58 (  0.58)	test_majacc   0.83 (  0.83)	Loss_d 1.109 (1.109)	test_acc_d   0.61 (  0.61)	test_minacc_d   0.58 (  0.58)	test_majacc_d   0.83 (  0.83)	test_corr_d   0.04 (  0.04)
Overall Timing[ 22/  1]	epoch_time 0.0420 (0.0426)	validation_time 0.0004 (0.0007)	train_time 0.0415 (0.0417)
record: (train_acc, test_acc) (0.784200028181076, 0.6180000305175781)
last accs (train_acc, test_acc) (0.8123000280857087, 0.6080000400543213)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:07,  3.46it/s] 19%|#9        | 5/26 [00:00<00:01, 14.36it/s] 35%|###4      | 9/26 [00:00<00:00, 21.07it/s] 50%|#####     | 13/26 [00:00<00:00, 25.62it/s] 65%|######5   | 17/26 [00:00<00:00, 28.96it/s] 81%|########  | 21/26 [00:00<00:00, 31.18it/s] 96%|#########6| 25/26 [00:00<00:00, 32.44it/s]100%|##########| 26/26 [00:01<00:00, 24.52it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 598 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 599 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 600 400
penalty weights 10000.0
l1 at pgd_anneal_iters 5.886812210083008
set z to 5.592471599578857
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 601 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 602 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 603 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 604 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 605 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 606 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 607 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 608 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 609 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 610 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 611 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 612 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 613 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 614 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 615 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 616 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 617 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 618 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 619 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 620 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 621 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 622 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 623 400
penalty weights 10000.0
Epoch: [23][  26/  26]	Loss 0.000 (0.001)	train_nll   0.40 (  0.38)	train_penalty   0.00 (  0.00)	weight_norm  24.68 ( 24.68)	train_acc   0.78 (  0.81)	train_minacc   0.68 (  0.79)	train_majacc   0.80 (  0.81)	train_corr   0.00 (  0.00)	l1 5.9688 (5.9515)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:05,  4.70it/s] 27%|##6       | 7/26 [00:00<00:00, 25.56it/s]                                               27%|##6       | 7/26 [00:00<00:00, 25.56it/s] 46%|####6     | 12/26 [00:00<00:00, 32.25it/s] 65%|######5   | 17/26 [00:00<00:00, 35.22it/s]                                                65%|######5   | 17/26 [00:00<00:00, 35.22it/s] 85%|########4 | 22/26 [00:00<00:00, 38.46it/s]100%|##########| 26/26 [00:00<00:00, 31.60it/s]
Test: [   0/  26]	Loss 0.457 (0.457)	test_acc   0.75 (  0.75)	test_minacc   0.76 (  0.76)	test_majacc   0.74 (  0.74)	Loss_d 0.457 (0.457)	test_acc_d   0.75 (  0.75)	test_minacc_d   0.76 (  0.76)	test_majacc_d   0.74 (  0.74)	test_corr_d   0.55 (  0.55)
Test: [  10/  26]	Loss 0.451 (0.421)	test_acc   0.77 (  0.79)	test_minacc   0.78 (  0.79)	test_majacc   0.76 (  0.79)	Loss_d 0.451 (0.421)	test_acc_d   0.77 (  0.79)	test_minacc_d   0.78 (  0.79)	test_majacc_d   0.76 (  0.79)	test_corr_d   0.55 (  0.54)
Test: [  20/  26]	Loss 0.433 (0.421)	test_acc   0.80 (  0.79)	test_minacc   0.80 (  0.78)	test_majacc   0.80 (  0.79)	Loss_d 0.433 (0.421)	test_acc_d   0.80 (  0.79)	test_minacc_d   0.80 (  0.78)	test_majacc_d   0.80 (  0.79)	test_corr_d   0.50 (  0.55)
Test: [  26/  26]	Loss 0.400 (0.421)	test_acc   0.78 (  0.79)	test_minacc   0.68 (  0.77)	test_majacc   0.80 (  0.79)	Loss_d 0.400 (0.421)	test_acc_d   0.78 (  0.79)	test_minacc_d   0.68 (  0.77)	test_majacc_d   0.80 (  0.79)	test_corr_d   0.63 (  0.55)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.95it/s]
Test: [  0/  1]	Loss 1.114 (1.114)	test_acc   0.58 (  0.58)	test_minacc   0.55 (  0.55)	test_majacc   0.86 (  0.86)	Loss_d 1.114 (1.114)	test_acc_d   0.58 (  0.58)	test_minacc_d   0.55 (  0.55)	test_majacc_d   0.86 (  0.86)	test_corr_d   0.04 (  0.04)
Test: [  1/  1]	Loss 1.114 (1.114)	test_acc   0.58 (  0.58)	test_minacc   0.55 (  0.55)	test_majacc   0.86 (  0.86)	Loss_d 1.114 (1.114)	test_acc_d   0.58 (  0.58)	test_minacc_d   0.55 (  0.55)	test_majacc_d   0.86 (  0.86)	test_corr_d   0.04 (  0.04)
Overall Timing[ 23/  1]	epoch_time 0.0412 (0.0426)	validation_time 0.0004 (0.0007)	train_time 0.0408 (0.0417)
record: (train_acc, test_acc) (0.784200028181076, 0.6180000305175781)
last accs (train_acc, test_acc) (0.7911000328660012, 0.5830000042915344)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:02, 11.12it/s] 23%|##3       | 6/26 [00:00<00:00, 22.79it/s] 38%|###8      | 10/26 [00:00<00:00, 27.27it/s] 54%|#####3    | 14/26 [00:00<00:00, 29.78it/s] 69%|######9   | 18/26 [00:00<00:00, 32.13it/s] 85%|########4 | 22/26 [00:00<00:00, 33.66it/s]100%|##########| 26/26 [00:00<00:00, 34.56it/s]100%|##########| 26/26 [00:00<00:00, 28.36it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 624 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 625 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 626 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 627 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 628 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 629 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 630 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 631 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 632 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 633 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 634 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 635 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 636 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 637 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 638 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 639 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 640 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 641 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 642 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 643 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 644 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 645 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 646 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 647 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 648 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 649 400
penalty weights 10000.0
Epoch: [24][  26/  26]	Loss 0.001 (0.001)	train_nll   0.34 (  0.40)	train_penalty   0.00 (  0.00)	weight_norm  24.68 ( 24.68)	train_acc   0.82 (  0.80)	train_minacc   0.80 (  0.79)	train_majacc   0.83 (  0.80)	train_corr   0.00 (  0.00)	l1 5.9076 (5.9729)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  6.17it/s] 27%|##6       | 7/26 [00:00<00:00, 27.28it/s]                                               27%|##6       | 7/26 [00:00<00:00, 27.28it/s] 46%|####6     | 12/26 [00:00<00:00, 34.85it/s] 65%|######5   | 17/26 [00:00<00:00, 39.10it/s]                                                65%|######5   | 17/26 [00:00<00:00, 39.10it/s] 85%|########4 | 22/26 [00:00<00:00, 42.45it/s]100%|##########| 26/26 [00:00<00:00, 34.27it/s]
Test: [   0/  26]	Loss 0.362 (0.362)	test_acc   0.82 (  0.82)	test_minacc   0.80 (  0.80)	test_majacc   0.82 (  0.82)	Loss_d 0.362 (0.362)	test_acc_d   0.82 (  0.82)	test_minacc_d   0.80 (  0.80)	test_majacc_d   0.82 (  0.82)	test_corr_d   0.61 (  0.61)
Test: [  10/  26]	Loss 0.364 (0.373)	test_acc   0.80 (  0.81)	test_minacc   0.80 (  0.79)	test_majacc   0.80 (  0.81)	Loss_d 0.364 (0.373)	test_acc_d   0.80 (  0.81)	test_minacc_d   0.80 (  0.79)	test_majacc_d   0.80 (  0.81)	test_corr_d   0.60 (  0.58)
Test: [  20/  26]	Loss 0.387 (0.373)	test_acc   0.81 (  0.81)	test_minacc   0.79 (  0.79)	test_majacc   0.82 (  0.82)	Loss_d 0.387 (0.373)	test_acc_d   0.81 (  0.81)	test_minacc_d   0.79 (  0.79)	test_majacc_d   0.82 (  0.82)	test_corr_d   0.54 (  0.59)
Test: [  26/  26]	Loss 0.342 (0.373)	test_acc   0.82 (  0.81)	test_minacc   0.80 (  0.79)	test_majacc   0.82 (  0.82)	Loss_d 0.342 (0.373)	test_acc_d   0.82 (  0.81)	test_minacc_d   0.80 (  0.79)	test_majacc_d   0.82 (  0.82)	test_corr_d   0.66 (  0.59)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.25it/s]
Test: [  0/  1]	Loss 1.129 (1.129)	test_acc   0.59 (  0.59)	test_minacc   0.57 (  0.57)	test_majacc   0.84 (  0.84)	Loss_d 1.129 (1.129)	test_acc_d   0.59 (  0.59)	test_minacc_d   0.57 (  0.57)	test_majacc_d   0.84 (  0.84)	test_corr_d   0.09 (  0.09)
Test: [  1/  1]	Loss 1.129 (1.129)	test_acc   0.59 (  0.59)	test_minacc   0.57 (  0.57)	test_majacc   0.84 (  0.84)	Loss_d 1.129 (1.129)	test_acc_d   0.59 (  0.59)	test_minacc_d   0.57 (  0.57)	test_majacc_d   0.84 (  0.84)	test_corr_d   0.09 (  0.09)
Overall Timing[ 24/  1]	epoch_time 0.0407 (0.0425)	validation_time 0.0005 (0.0007)	train_time 0.0402 (0.0416)
record: (train_acc, test_acc) (0.784200028181076, 0.6180000305175781)
last accs (train_acc, test_acc) (0.8128000259399414, 0.593000054359436)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.68it/s] 15%|#5        | 4/26 [00:00<00:01, 19.34it/s] 31%|###       | 8/26 [00:00<00:00, 25.36it/s] 46%|####6     | 12/26 [00:00<00:00, 28.78it/s] 62%|######1   | 16/26 [00:00<00:00, 30.59it/s] 77%|#######6  | 20/26 [00:00<00:00, 32.17it/s] 92%|#########2| 24/26 [00:00<00:00, 33.48it/s]100%|##########| 26/26 [00:00<00:00, 28.14it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 650 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 651 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 652 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 653 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 654 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 655 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 656 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 657 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 658 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 659 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 660 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 661 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 662 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 663 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 664 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 665 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 666 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 667 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 668 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 669 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 670 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 671 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 672 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 673 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 674 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 675 400
penalty weights 10000.0
Epoch: [25][  26/  26]	Loss 0.000 (0.000)	train_nll   0.36 (  0.38)	train_penalty   0.00 (  0.00)	weight_norm  24.68 ( 24.68)	train_acc   0.80 (  0.80)	train_minacc   0.80 (  0.80)	train_majacc   0.80 (  0.81)	train_corr   0.00 (  0.00)	l1 5.9076 (6.0734)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.81it/s] 27%|##6       | 7/26 [00:00<00:00, 34.50it/s]                                               27%|##6       | 7/26 [00:00<00:00, 34.50it/s] 46%|####6     | 12/26 [00:00<00:00, 40.02it/s] 65%|######5   | 17/26 [00:00<00:00, 41.84it/s]                                                65%|######5   | 17/26 [00:00<00:00, 41.84it/s] 85%|########4 | 22/26 [00:00<00:00, 44.19it/s]100%|##########| 26/26 [00:00<00:00, 36.90it/s]
Test: [   0/  26]	Loss 0.373 (0.373)	test_acc   0.81 (  0.81)	test_minacc   0.78 (  0.78)	test_majacc   0.81 (  0.81)	Loss_d 0.373 (0.373)	test_acc_d   0.81 (  0.81)	test_minacc_d   0.78 (  0.78)	test_majacc_d   0.81 (  0.81)	test_corr_d   0.61 (  0.61)
Test: [  10/  26]	Loss 0.368 (0.372)	test_acc   0.78 (  0.81)	test_minacc   0.78 (  0.80)	test_majacc   0.78 (  0.81)	Loss_d 0.368 (0.372)	test_acc_d   0.78 (  0.81)	test_minacc_d   0.78 (  0.80)	test_majacc_d   0.78 (  0.81)	test_corr_d   0.60 (  0.58)
Test: [  20/  26]	Loss 0.384 (0.372)	test_acc   0.81 (  0.81)	test_minacc   0.77 (  0.80)	test_majacc   0.82 (  0.82)	Loss_d 0.384 (0.372)	test_acc_d   0.81 (  0.81)	test_minacc_d   0.77 (  0.80)	test_majacc_d   0.82 (  0.82)	test_corr_d   0.54 (  0.58)
Test: [  26/  26]	Loss 0.360 (0.374)	test_acc   0.80 (  0.81)	test_minacc   0.80 (  0.80)	test_majacc   0.80 (  0.82)	Loss_d 0.360 (0.374)	test_acc_d   0.80 (  0.81)	test_minacc_d   0.80 (  0.80)	test_majacc_d   0.80 (  0.82)	test_corr_d   0.65 (  0.59)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 64.12it/s]
Test: [  0/  1]	Loss 1.116 (1.116)	test_acc   0.59 (  0.59)	test_minacc   0.57 (  0.57)	test_majacc   0.83 (  0.83)	Loss_d 1.116 (1.116)	test_acc_d   0.59 (  0.59)	test_minacc_d   0.57 (  0.57)	test_majacc_d   0.83 (  0.83)	test_corr_d   0.09 (  0.09)
Test: [  1/  1]	Loss 1.116 (1.116)	test_acc   0.59 (  0.59)	test_minacc   0.57 (  0.57)	test_majacc   0.83 (  0.83)	Loss_d 1.116 (1.116)	test_acc_d   0.59 (  0.59)	test_minacc_d   0.57 (  0.57)	test_majacc_d   0.83 (  0.83)	test_corr_d   0.09 (  0.09)
Overall Timing[ 25/  1]	epoch_time 0.0398 (0.0424)	validation_time 0.0004 (0.0007)	train_time 0.0394 (0.0415)
record: (train_acc, test_acc) (0.784200028181076, 0.6180000305175781)
last accs (train_acc, test_acc) (0.8140000217556953, 0.5920000076293945)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:05,  4.80it/s] 15%|#5        | 4/26 [00:00<00:01, 14.15it/s] 31%|###       | 8/26 [00:00<00:00, 21.97it/s] 46%|####6     | 12/26 [00:00<00:00, 26.29it/s] 62%|######1   | 16/26 [00:00<00:00, 29.34it/s] 77%|#######6  | 20/26 [00:00<00:00, 31.45it/s] 92%|#########2| 24/26 [00:00<00:00, 33.00it/s]100%|##########| 26/26 [00:01<00:00, 25.51it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 676 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 677 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 678 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 679 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 680 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 681 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 682 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 683 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 684 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 685 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 686 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 687 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 688 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 689 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 690 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 691 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 692 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 693 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 694 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 695 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 696 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 697 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 698 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 699 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 700 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 701 400
penalty weights 10000.0
Epoch: [26][  26/  26]	Loss 0.000 (0.000)	train_nll   0.37 (  0.38)	train_penalty   0.00 (  0.00)	weight_norm  24.69 ( 24.68)	train_acc   0.81 (  0.81)	train_minacc   0.80 (  0.80)	train_majacc   0.81 (  0.81)	train_corr   0.00 (  0.00)	l1 5.9921 (6.0727)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.85it/s] 23%|##3       | 6/26 [00:00<00:00, 29.81it/s]                                               23%|##3       | 6/26 [00:00<00:00, 29.81it/s] 42%|####2     | 11/26 [00:00<00:00, 37.37it/s] 65%|######5   | 17/26 [00:00<00:00, 41.62it/s]                                                65%|######5   | 17/26 [00:00<00:00, 41.62it/s] 88%|########8 | 23/26 [00:00<00:00, 45.35it/s]100%|##########| 26/26 [00:00<00:00, 37.35it/s]
Test: [   0/  26]	Loss 0.379 (0.379)	test_acc   0.80 (  0.80)	test_minacc   0.78 (  0.78)	test_majacc   0.80 (  0.80)	Loss_d 0.379 (0.379)	test_acc_d   0.80 (  0.80)	test_minacc_d   0.78 (  0.78)	test_majacc_d   0.80 (  0.80)	test_corr_d   0.60 (  0.60)
Test: [  10/  26]	Loss 0.367 (0.376)	test_acc   0.78 (  0.81)	test_minacc   0.78 (  0.79)	test_majacc   0.78 (  0.81)	Loss_d 0.367 (0.376)	test_acc_d   0.78 (  0.81)	test_minacc_d   0.78 (  0.79)	test_majacc_d   0.78 (  0.81)	test_corr_d   0.60 (  0.58)
Test: [  20/  26]	Loss 0.376 (0.371)	test_acc   0.83 (  0.82)	test_minacc   0.81 (  0.80)	test_majacc   0.83 (  0.82)	Loss_d 0.376 (0.371)	test_acc_d   0.83 (  0.82)	test_minacc_d   0.81 (  0.80)	test_majacc_d   0.83 (  0.82)	test_corr_d   0.54 (  0.58)
Test: [  26/  26]	Loss 0.367 (0.372)	test_acc   0.80 (  0.81)	test_minacc   0.76 (  0.79)	test_majacc   0.81 (  0.82)	Loss_d 0.367 (0.372)	test_acc_d   0.80 (  0.81)	test_minacc_d   0.76 (  0.79)	test_majacc_d   0.81 (  0.82)	test_corr_d   0.65 (  0.59)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 60.83it/s]
Test: [  0/  1]	Loss 1.130 (1.130)	test_acc   0.60 (  0.60)	test_minacc   0.57 (  0.57)	test_majacc   0.82 (  0.82)	Loss_d 1.130 (1.130)	test_acc_d   0.60 (  0.60)	test_minacc_d   0.57 (  0.57)	test_majacc_d   0.82 (  0.82)	test_corr_d   0.08 (  0.08)
Test: [  1/  1]	Loss 1.130 (1.130)	test_acc   0.60 (  0.60)	test_minacc   0.57 (  0.57)	test_majacc   0.82 (  0.82)	Loss_d 1.130 (1.130)	test_acc_d   0.60 (  0.60)	test_minacc_d   0.57 (  0.57)	test_majacc_d   0.82 (  0.82)	test_corr_d   0.08 (  0.08)
Overall Timing[ 26/  1]	epoch_time 0.0399 (0.0423)	validation_time 0.0004 (0.0007)	train_time 0.0395 (0.0415)
record: (train_acc, test_acc) (0.784200028181076, 0.6180000305175781)
last accs (train_acc, test_acc) (0.8132000311017037, 0.5980000495910645)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 12.41it/s] 23%|##3       | 6/26 [00:00<00:00, 24.07it/s] 38%|###8      | 10/26 [00:00<00:00, 29.16it/s] 54%|#####3    | 14/26 [00:00<00:00, 31.61it/s] 69%|######9   | 18/26 [00:00<00:00, 33.05it/s] 85%|########4 | 22/26 [00:00<00:00, 34.07it/s]100%|##########| 26/26 [00:00<00:00, 34.85it/s]100%|##########| 26/26 [00:00<00:00, 29.52it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 702 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 703 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 704 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 705 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 706 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 707 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 708 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 709 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 710 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 711 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 712 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 713 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 714 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 715 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 716 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 717 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 718 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 719 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 720 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 721 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 722 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 723 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 724 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 725 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 726 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 727 400
penalty weights 10000.0
Epoch: [27][  26/  26]	Loss 0.000 (0.000)	train_nll   0.37 (  0.38)	train_penalty   0.00 (  0.00)	weight_norm  24.69 ( 24.69)	train_acc   0.80 (  0.81)	train_minacc   0.72 (  0.79)	train_majacc   0.80 (  0.81)	train_corr   0.00 (  0.00)	l1 5.9968 (6.1176)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.59it/s] 27%|##6       | 7/26 [00:00<00:00, 27.98it/s]                                               27%|##6       | 7/26 [00:00<00:00, 27.98it/s] 46%|####6     | 12/26 [00:00<00:00, 35.84it/s] 65%|######5   | 17/26 [00:00<00:00, 36.28it/s]                                                65%|######5   | 17/26 [00:00<00:00, 36.28it/s] 85%|########4 | 22/26 [00:00<00:00, 40.20it/s]100%|##########| 26/26 [00:00<00:00, 33.51it/s]
Test: [   0/  26]	Loss 0.376 (0.376)	test_acc   0.81 (  0.81)	test_minacc   0.78 (  0.78)	test_majacc   0.81 (  0.81)	Loss_d 0.376 (0.376)	test_acc_d   0.81 (  0.81)	test_minacc_d   0.78 (  0.78)	test_majacc_d   0.81 (  0.81)	test_corr_d   0.61 (  0.61)
Test: [  10/  26]	Loss 0.370 (0.381)	test_acc   0.78 (  0.81)	test_minacc   0.73 (  0.77)	test_majacc   0.78 (  0.81)	Loss_d 0.370 (0.381)	test_acc_d   0.78 (  0.81)	test_minacc_d   0.73 (  0.77)	test_majacc_d   0.78 (  0.81)	test_corr_d   0.61 (  0.58)
Test: [  20/  26]	Loss 0.369 (0.371)	test_acc   0.83 (  0.82)	test_minacc   0.79 (  0.78)	test_majacc   0.84 (  0.82)	Loss_d 0.369 (0.371)	test_acc_d   0.83 (  0.82)	test_minacc_d   0.79 (  0.78)	test_majacc_d   0.84 (  0.82)	test_corr_d   0.56 (  0.59)
Test: [  26/  26]	Loss 0.364 (0.371)	test_acc   0.80 (  0.82)	test_minacc   0.72 (  0.78)	test_majacc   0.80 (  0.82)	Loss_d 0.364 (0.371)	test_acc_d   0.80 (  0.82)	test_minacc_d   0.72 (  0.78)	test_majacc_d   0.80 (  0.82)	test_corr_d   0.66 (  0.60)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 64.56it/s]
Test: [  0/  1]	Loss 1.153 (1.153)	test_acc   0.59 (  0.59)	test_minacc   0.56 (  0.56)	test_majacc   0.83 (  0.83)	Loss_d 1.153 (1.153)	test_acc_d   0.59 (  0.59)	test_minacc_d   0.56 (  0.56)	test_majacc_d   0.83 (  0.83)	test_corr_d   0.11 (  0.11)
Test: [  1/  1]	Loss 1.153 (1.153)	test_acc   0.59 (  0.59)	test_minacc   0.56 (  0.56)	test_majacc   0.83 (  0.83)	Loss_d 1.153 (1.153)	test_acc_d   0.59 (  0.59)	test_minacc_d   0.56 (  0.56)	test_majacc_d   0.83 (  0.83)	test_corr_d   0.11 (  0.11)
Overall Timing[ 27/  1]	epoch_time 0.0416 (0.0423)	validation_time 0.0004 (0.0006)	train_time 0.0412 (0.0415)
record: (train_acc, test_acc) (0.784200028181076, 0.6180000305175781)
last accs (train_acc, test_acc) (0.8157000285387039, 0.5900000333786011)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:05,  4.71it/s] 19%|#9        | 5/26 [00:00<00:01, 17.89it/s] 35%|###4      | 9/26 [00:00<00:00, 24.54it/s] 50%|#####     | 13/26 [00:00<00:00, 28.31it/s] 65%|######5   | 17/26 [00:00<00:00, 30.34it/s] 81%|########  | 21/26 [00:00<00:00, 31.81it/s] 96%|#########6| 25/26 [00:00<00:00, 33.06it/s]100%|##########| 26/26 [00:00<00:00, 26.59it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 728 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 729 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 730 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 731 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 732 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 733 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 734 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 735 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 736 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 737 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 738 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 739 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 740 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 741 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 742 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 743 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 744 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 745 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 746 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 747 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 748 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 749 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 750 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 751 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 752 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 753 400
penalty weights 10000.0
Epoch: [28][  26/  26]	Loss 0.000 (0.000)	train_nll   0.38 (  0.38)	train_penalty   0.00 (  0.00)	weight_norm  24.69 ( 24.69)	train_acc   0.79 (  0.81)	train_minacc   0.72 (  0.79)	train_majacc   0.80 (  0.81)	train_corr   0.00 (  0.00)	l1 6.1051 (6.1332)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:02,  9.32it/s] 27%|##6       | 7/26 [00:00<00:00, 25.24it/s]                                               27%|##6       | 7/26 [00:00<00:00, 25.24it/s] 46%|####6     | 12/26 [00:00<00:00, 33.96it/s] 65%|######5   | 17/26 [00:00<00:00, 38.82it/s]                                                65%|######5   | 17/26 [00:00<00:00, 38.82it/s] 85%|########4 | 22/26 [00:00<00:00, 38.82it/s]100%|##########| 26/26 [00:00<00:00, 34.08it/s]
Test: [   0/  26]	Loss 0.380 (0.380)	test_acc   0.80 (  0.80)	test_minacc   0.76 (  0.76)	test_majacc   0.81 (  0.81)	Loss_d 0.380 (0.380)	test_acc_d   0.80 (  0.80)	test_minacc_d   0.76 (  0.76)	test_majacc_d   0.81 (  0.81)	test_corr_d   0.60 (  0.60)
Test: [  10/  26]	Loss 0.380 (0.392)	test_acc   0.78 (  0.80)	test_minacc   0.69 (  0.77)	test_majacc   0.79 (  0.80)	Loss_d 0.380 (0.392)	test_acc_d   0.78 (  0.80)	test_minacc_d   0.69 (  0.77)	test_majacc_d   0.79 (  0.80)	test_corr_d   0.60 (  0.57)
Test: [  20/  26]	Loss 0.360 (0.377)	test_acc   0.84 (  0.81)	test_minacc   0.80 (  0.78)	test_majacc   0.85 (  0.82)	Loss_d 0.360 (0.377)	test_acc_d   0.84 (  0.81)	test_minacc_d   0.80 (  0.78)	test_majacc_d   0.85 (  0.82)	test_corr_d   0.56 (  0.58)
Test: [  26/  26]	Loss 0.371 (0.376)	test_acc   0.79 (  0.81)	test_minacc   0.72 (  0.78)	test_majacc   0.80 (  0.82)	Loss_d 0.371 (0.376)	test_acc_d   0.79 (  0.81)	test_minacc_d   0.72 (  0.78)	test_majacc_d   0.80 (  0.82)	test_corr_d   0.65 (  0.59)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 57.50it/s]
Test: [  0/  1]	Loss 1.165 (1.165)	test_acc   0.59 (  0.59)	test_minacc   0.56 (  0.56)	test_majacc   0.85 (  0.85)	Loss_d 1.165 (1.165)	test_acc_d   0.59 (  0.59)	test_minacc_d   0.56 (  0.56)	test_majacc_d   0.85 (  0.85)	test_corr_d   0.10 (  0.10)
Test: [  1/  1]	Loss 1.165 (1.165)	test_acc   0.59 (  0.59)	test_minacc   0.56 (  0.56)	test_majacc   0.85 (  0.85)	Loss_d 1.165 (1.165)	test_acc_d   0.59 (  0.59)	test_minacc_d   0.56 (  0.56)	test_majacc_d   0.85 (  0.85)	test_corr_d   0.10 (  0.10)
Overall Timing[ 28/  1]	epoch_time 0.0387 (0.0422)	validation_time 0.0005 (0.0006)	train_time 0.0382 (0.0413)
record: (train_acc, test_acc) (0.784200028181076, 0.6180000305175781)
last accs (train_acc, test_acc) (0.8112000262737274, 0.5900000333786011)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.12it/s] 12%|#1        | 3/26 [00:00<00:01, 15.13it/s] 27%|##6       | 7/26 [00:00<00:00, 25.04it/s] 42%|####2     | 11/26 [00:00<00:00, 29.20it/s] 58%|#####7    | 15/26 [00:00<00:00, 31.30it/s] 73%|#######3  | 19/26 [00:00<00:00, 33.21it/s] 88%|########8 | 23/26 [00:00<00:00, 34.59it/s]100%|##########| 26/26 [00:00<00:00, 28.66it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 754 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 755 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 756 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 757 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 758 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 759 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 760 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 761 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 762 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 763 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 764 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 765 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 766 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 767 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 768 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 769 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 770 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 771 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 772 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 773 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 774 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 775 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 776 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 777 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 778 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 779 400
penalty weights 10000.0
Epoch: [29][  26/  26]	Loss 0.000 (0.001)	train_nll   0.38 (  0.38)	train_penalty   0.00 (  0.00)	weight_norm  24.70 ( 24.70)	train_acc   0.80 (  0.81)	train_minacc   0.80 (  0.78)	train_majacc   0.80 (  0.82)	train_corr   0.00 (  0.00)	l1 6.1917 (5.9835)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.70it/s] 27%|##6       | 7/26 [00:00<00:00, 30.78it/s]                                               27%|##6       | 7/26 [00:00<00:00, 30.78it/s] 46%|####6     | 12/26 [00:00<00:00, 37.42it/s] 65%|######5   | 17/26 [00:00<00:00, 38.04it/s]                                                65%|######5   | 17/26 [00:00<00:00, 38.04it/s] 85%|########4 | 22/26 [00:00<00:00, 41.73it/s]100%|##########| 26/26 [00:00<00:00, 35.43it/s]
Test: [   0/  26]	Loss 0.387 (0.387)	test_acc   0.80 (  0.80)	test_minacc   0.83 (  0.83)	test_majacc   0.80 (  0.80)	Loss_d 0.387 (0.387)	test_acc_d   0.80 (  0.80)	test_minacc_d   0.83 (  0.83)	test_majacc_d   0.80 (  0.80)	test_corr_d   0.58 (  0.58)
Test: [  10/  26]	Loss 0.400 (0.418)	test_acc   0.77 (  0.78)	test_minacc   0.73 (  0.78)	test_majacc   0.77 (  0.78)	Loss_d 0.400 (0.418)	test_acc_d   0.77 (  0.78)	test_minacc_d   0.73 (  0.78)	test_majacc_d   0.77 (  0.78)	test_corr_d   0.57 (  0.54)
Test: [  20/  26]	Loss 0.368 (0.398)	test_acc   0.83 (  0.80)	test_minacc   0.89 (  0.80)	test_majacc   0.82 (  0.80)	Loss_d 0.368 (0.398)	test_acc_d   0.83 (  0.80)	test_minacc_d   0.89 (  0.80)	test_majacc_d   0.82 (  0.80)	test_corr_d   0.52 (  0.55)
Test: [  26/  26]	Loss 0.374 (0.394)	test_acc   0.80 (  0.80)	test_minacc   0.80 (  0.80)	test_majacc   0.80 (  0.80)	Loss_d 0.374 (0.394)	test_acc_d   0.80 (  0.80)	test_minacc_d   0.80 (  0.80)	test_majacc_d   0.80 (  0.80)	test_corr_d   0.63 (  0.56)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.16it/s]
Test: [  0/  1]	Loss 1.151 (1.151)	test_acc   0.61 (  0.61)	test_minacc   0.59 (  0.59)	test_majacc   0.83 (  0.83)	Loss_d 1.151 (1.151)	test_acc_d   0.61 (  0.61)	test_minacc_d   0.59 (  0.59)	test_majacc_d   0.83 (  0.83)	test_corr_d   0.04 (  0.04)
Test: [  1/  1]	Loss 1.151 (1.151)	test_acc   0.61 (  0.61)	test_minacc   0.59 (  0.59)	test_majacc   0.83 (  0.83)	Loss_d 1.151 (1.151)	test_acc_d   0.61 (  0.61)	test_minacc_d   0.59 (  0.59)	test_majacc_d   0.83 (  0.83)	test_corr_d   0.04 (  0.04)
Overall Timing[ 29/  1]	epoch_time 0.0405 (0.0421)	validation_time 0.0003 (0.0006)	train_time 0.0402 (0.0413)
record: (train_acc, test_acc) (0.784200028181076, 0.6180000305175781)
last accs (train_acc, test_acc) (0.8027000245451927, 0.6100000143051147)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.18it/s] 19%|#9        | 5/26 [00:00<00:01, 18.36it/s] 35%|###4      | 9/26 [00:00<00:00, 24.11it/s] 50%|#####     | 13/26 [00:00<00:00, 27.31it/s] 65%|######5   | 17/26 [00:00<00:00, 28.90it/s] 81%|########  | 21/26 [00:00<00:00, 31.29it/s] 96%|#########6| 25/26 [00:00<00:00, 32.86it/s]100%|##########| 26/26 [00:00<00:00, 26.33it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 780 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 781 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 782 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 783 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 784 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 785 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 786 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 787 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 788 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 789 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 790 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 791 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 792 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 793 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 794 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 795 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 796 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 797 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 798 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 799 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 800 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 801 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 802 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 803 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 804 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 805 400
penalty weights 10000.0
Epoch: [30][  26/  26]	Loss 0.000 (0.001)	train_nll   0.36 (  0.40)	train_penalty   0.00 (  0.00)	weight_norm  24.71 ( 24.70)	train_acc   0.80 (  0.80)	train_minacc   0.76 (  0.78)	train_majacc   0.81 (  0.80)	train_corr   0.00 (  0.00)	l1 6.1333 (6.0790)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:06,  4.06it/s] 27%|##6       | 7/26 [00:00<00:00, 23.49it/s]                                               27%|##6       | 7/26 [00:00<00:00, 23.49it/s] 46%|####6     | 12/26 [00:00<00:00, 31.88it/s] 65%|######5   | 17/26 [00:00<00:00, 34.97it/s]                                                65%|######5   | 17/26 [00:00<00:00, 34.97it/s] 88%|########8 | 23/26 [00:00<00:00, 40.83it/s]100%|##########| 26/26 [00:00<00:00, 31.66it/s]
Test: [   0/  26]	Loss 0.362 (0.362)	test_acc   0.81 (  0.81)	test_minacc   0.80 (  0.80)	test_majacc   0.81 (  0.81)	Loss_d 0.362 (0.362)	test_acc_d   0.81 (  0.81)	test_minacc_d   0.80 (  0.80)	test_majacc_d   0.81 (  0.81)	test_corr_d   0.62 (  0.62)
Test: [  10/  26]	Loss 0.407 (0.408)	test_acc   0.76 (  0.79)	test_minacc   0.67 (  0.75)	test_majacc   0.77 (  0.79)	Loss_d 0.407 (0.408)	test_acc_d   0.76 (  0.79)	test_minacc_d   0.67 (  0.75)	test_majacc_d   0.77 (  0.79)	test_corr_d   0.60 (  0.58)
Test: [  20/  26]	Loss 0.348 (0.391)	test_acc   0.83 (  0.80)	test_minacc   0.80 (  0.76)	test_majacc   0.84 (  0.81)	Loss_d 0.348 (0.391)	test_acc_d   0.83 (  0.80)	test_minacc_d   0.80 (  0.76)	test_majacc_d   0.84 (  0.81)	test_corr_d   0.58 (  0.59)
Test: [  26/  26]	Loss 0.358 (0.386)	test_acc   0.80 (  0.81)	test_minacc   0.72 (  0.76)	test_majacc   0.80 (  0.81)	Loss_d 0.358 (0.386)	test_acc_d   0.80 (  0.81)	test_minacc_d   0.72 (  0.76)	test_majacc_d   0.80 (  0.81)	test_corr_d   0.66 (  0.60)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 60.56it/s]
Test: [  0/  1]	Loss 1.263 (1.263)	test_acc   0.56 (  0.56)	test_minacc   0.53 (  0.53)	test_majacc   0.81 (  0.81)	Loss_d 1.263 (1.263)	test_acc_d   0.56 (  0.56)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.81 (  0.81)	test_corr_d   0.17 (  0.17)
Test: [  1/  1]	Loss 1.263 (1.263)	test_acc   0.56 (  0.56)	test_minacc   0.53 (  0.53)	test_majacc   0.81 (  0.81)	Loss_d 1.263 (1.263)	test_acc_d   0.56 (  0.56)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.81 (  0.81)	test_corr_d   0.17 (  0.17)
Overall Timing[ 30/  1]	epoch_time 0.0416 (0.0421)	validation_time 0.0004 (0.0006)	train_time 0.0411 (0.0413)
record: (train_acc, test_acc) (0.784200028181076, 0.6180000305175781)
last accs (train_acc, test_acc) (0.8063000267744065, 0.5560000538825989)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 17.17it/s] 23%|##3       | 6/26 [00:00<00:00, 27.66it/s] 38%|###8      | 10/26 [00:00<00:00, 31.26it/s] 54%|#####3    | 14/26 [00:00<00:00, 32.94it/s] 69%|######9   | 18/26 [00:00<00:00, 33.85it/s] 85%|########4 | 22/26 [00:00<00:00, 34.49it/s]100%|##########| 26/26 [00:00<00:00, 34.56it/s]100%|##########| 26/26 [00:00<00:00, 30.45it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 806 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 807 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 808 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 809 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 810 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 811 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 812 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 813 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 814 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 815 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 816 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 817 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 818 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 819 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 820 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 821 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 822 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 823 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 824 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 825 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 826 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 827 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 828 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 829 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 830 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 831 400
penalty weights 10000.0
Epoch: [31][  26/  26]	Loss 0.001 (0.002)	train_nll   0.39 (  0.39)	train_penalty   0.00 (  0.00)	weight_norm  24.72 ( 24.71)	train_acc   0.79 (  0.81)	train_minacc   0.72 (  0.75)	train_majacc   0.80 (  0.82)	train_corr   0.00 (  0.00)	l1 6.2994 (5.8995)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:06,  3.60it/s] 27%|##6       | 7/26 [00:00<00:00, 21.59it/s]                                               27%|##6       | 7/26 [00:00<00:00, 21.59it/s] 46%|####6     | 12/26 [00:00<00:00, 30.12it/s] 65%|######5   | 17/26 [00:00<00:00, 33.21it/s]                                                65%|######5   | 17/26 [00:00<00:00, 33.21it/s] 88%|########8 | 23/26 [00:00<00:00, 39.69it/s]100%|##########| 26/26 [00:00<00:00, 30.72it/s]
Test: [   0/  26]	Loss 0.378 (0.378)	test_acc   0.81 (  0.81)	test_minacc   0.80 (  0.80)	test_majacc   0.81 (  0.81)	Loss_d 0.378 (0.378)	test_acc_d   0.81 (  0.81)	test_minacc_d   0.80 (  0.80)	test_majacc_d   0.81 (  0.81)	test_corr_d   0.59 (  0.59)
Test: [  10/  26]	Loss 0.422 (0.403)	test_acc   0.74 (  0.79)	test_minacc   0.69 (  0.79)	test_majacc   0.75 (  0.79)	Loss_d 0.422 (0.403)	test_acc_d   0.74 (  0.79)	test_minacc_d   0.69 (  0.79)	test_majacc_d   0.75 (  0.79)	test_corr_d   0.57 (  0.56)
Test: [  20/  26]	Loss 0.348 (0.399)	test_acc   0.83 (  0.80)	test_minacc   0.89 (  0.80)	test_majacc   0.82 (  0.80)	Loss_d 0.348 (0.399)	test_acc_d   0.83 (  0.80)	test_minacc_d   0.89 (  0.80)	test_majacc_d   0.82 (  0.80)	test_corr_d   0.54 (  0.57)
Test: [  26/  26]	Loss 0.366 (0.391)	test_acc   0.80 (  0.80)	test_minacc   0.72 (  0.80)	test_majacc   0.80 (  0.80)	Loss_d 0.366 (0.391)	test_acc_d   0.80 (  0.80)	test_minacc_d   0.72 (  0.80)	test_majacc_d   0.80 (  0.80)	test_corr_d   0.64 (  0.58)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.24it/s]
Test: [  0/  1]	Loss 1.261 (1.261)	test_acc   0.58 (  0.58)	test_minacc   0.56 (  0.56)	test_majacc   0.83 (  0.83)	Loss_d 1.261 (1.261)	test_acc_d   0.58 (  0.58)	test_minacc_d   0.56 (  0.56)	test_majacc_d   0.83 (  0.83)	test_corr_d   0.11 (  0.11)
Test: [  1/  1]	Loss 1.261 (1.261)	test_acc   0.58 (  0.58)	test_minacc   0.56 (  0.56)	test_majacc   0.83 (  0.83)	Loss_d 1.261 (1.261)	test_acc_d   0.58 (  0.58)	test_minacc_d   0.56 (  0.56)	test_majacc_d   0.83 (  0.83)	test_corr_d   0.11 (  0.11)
Overall Timing[ 31/  1]	epoch_time 0.0421 (0.0421)	validation_time 0.0004 (0.0006)	train_time 0.0417 (0.0413)
record: (train_acc, test_acc) (0.784200028181076, 0.6180000305175781)
last accs (train_acc, test_acc) (0.8038000327348709, 0.5830000042915344)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.39it/s] 19%|#9        | 5/26 [00:00<00:01, 18.22it/s] 35%|###4      | 9/26 [00:00<00:00, 25.00it/s] 50%|#####     | 13/26 [00:00<00:00, 28.81it/s] 65%|######5   | 17/26 [00:00<00:00, 30.66it/s] 81%|########  | 21/26 [00:00<00:00, 31.65it/s] 96%|#########6| 25/26 [00:00<00:00, 32.61it/s]100%|##########| 26/26 [00:00<00:00, 26.73it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 832 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 833 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 834 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 835 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 836 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 837 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 838 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 839 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 840 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 841 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 842 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 843 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 844 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 845 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 846 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 847 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 848 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 849 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 850 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 851 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 852 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 853 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 854 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 855 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 856 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 857 400
penalty weights 10000.0
Epoch: [32][  26/  26]	Loss 0.001 (0.001)	train_nll   0.40 (  0.40)	train_penalty   0.00 (  0.00)	weight_norm  24.73 ( 24.72)	train_acc   0.79 (  0.80)	train_minacc   0.80 (  0.78)	train_majacc   0.79 (  0.80)	train_corr   0.00 (  0.00)	l1 6.0510 (5.9243)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 17.86it/s] 27%|##6       | 7/26 [00:00<00:00, 35.05it/s]                                               27%|##6       | 7/26 [00:00<00:00, 35.05it/s] 46%|####6     | 12/26 [00:00<00:00, 40.76it/s] 65%|######5   | 17/26 [00:00<00:00, 42.78it/s]                                                65%|######5   | 17/26 [00:00<00:00, 42.78it/s] 85%|########4 | 22/26 [00:00<00:00, 41.35it/s]100%|##########| 26/26 [00:00<00:00, 38.72it/s]
Test: [   0/  26]	Loss 0.441 (0.441)	test_acc   0.77 (  0.77)	test_minacc   0.83 (  0.83)	test_majacc   0.76 (  0.76)	Loss_d 0.441 (0.441)	test_acc_d   0.77 (  0.77)	test_minacc_d   0.83 (  0.83)	test_majacc_d   0.76 (  0.76)	test_corr_d   0.54 (  0.54)
Test: [  10/  26]	Loss 0.461 (0.422)	test_acc   0.74 (  0.78)	test_minacc   0.71 (  0.80)	test_majacc   0.74 (  0.77)	Loss_d 0.461 (0.422)	test_acc_d   0.74 (  0.78)	test_minacc_d   0.71 (  0.80)	test_majacc_d   0.74 (  0.77)	test_corr_d   0.54 (  0.54)
Test: [  20/  26]	Loss 0.392 (0.423)	test_acc   0.82 (  0.78)	test_minacc   0.81 (  0.79)	test_majacc   0.82 (  0.78)	Loss_d 0.392 (0.423)	test_acc_d   0.82 (  0.78)	test_minacc_d   0.81 (  0.79)	test_majacc_d   0.82 (  0.78)	test_corr_d   0.51 (  0.54)
Test: [  26/  26]	Loss 0.375 (0.415)	test_acc   0.81 (  0.79)	test_minacc   0.80 (  0.80)	test_majacc   0.81 (  0.78)	Loss_d 0.375 (0.415)	test_acc_d   0.81 (  0.79)	test_minacc_d   0.80 (  0.80)	test_majacc_d   0.81 (  0.78)	test_corr_d   0.64 (  0.55)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.34it/s]
Test: [  0/  1]	Loss 1.141 (1.141)	test_acc   0.61 (  0.61)	test_minacc   0.59 (  0.59)	test_majacc   0.83 (  0.83)	Loss_d 1.141 (1.141)	test_acc_d   0.61 (  0.61)	test_minacc_d   0.59 (  0.59)	test_majacc_d   0.83 (  0.83)	test_corr_d   0.01 (  0.01)
Test: [  1/  1]	Loss 1.141 (1.141)	test_acc   0.61 (  0.61)	test_minacc   0.59 (  0.59)	test_majacc   0.83 (  0.83)	Loss_d 1.141 (1.141)	test_acc_d   0.61 (  0.61)	test_minacc_d   0.59 (  0.59)	test_majacc_d   0.83 (  0.83)	test_corr_d   0.01 (  0.01)
Overall Timing[ 32/  1]	epoch_time 0.0392 (0.0420)	validation_time 0.0003 (0.0006)	train_time 0.0389 (0.0412)
record: (train_acc, test_acc) (0.784200028181076, 0.6180000305175781)
last accs (train_acc, test_acc) (0.7850000271797181, 0.612000048160553)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 19.56it/s] 23%|##3       | 6/26 [00:00<00:00, 29.09it/s] 38%|###8      | 10/26 [00:00<00:00, 32.46it/s] 54%|#####3    | 14/26 [00:00<00:00, 34.03it/s] 69%|######9   | 18/26 [00:00<00:00, 34.74it/s] 85%|########4 | 22/26 [00:00<00:00, 35.53it/s]100%|##########| 26/26 [00:00<00:00, 36.35it/s]100%|##########| 26/26 [00:00<00:00, 31.75it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 858 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 859 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 860 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 861 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 862 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 863 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 864 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 865 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 866 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 867 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 868 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 869 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 870 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 871 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 872 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 873 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 874 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 875 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 876 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 877 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 878 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 879 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 880 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 881 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 882 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 883 400
penalty weights 10000.0
Epoch: [33][  26/  26]	Loss 0.000 (0.002)	train_nll   0.32 (  0.36)	train_penalty   0.00 (  0.00)	weight_norm  24.74 ( 24.73)	train_acc   0.84 (  0.82)	train_minacc   0.80 (  0.81)	train_majacc   0.84 (  0.82)	train_corr   0.00 (  0.00)	l1 6.2270 (5.8380)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.23it/s] 27%|##6       | 7/26 [00:00<00:00, 33.64it/s]                                               27%|##6       | 7/26 [00:00<00:00, 33.64it/s] 46%|####6     | 12/26 [00:00<00:00, 40.26it/s] 65%|######5   | 17/26 [00:00<00:00, 40.72it/s]                                                65%|######5   | 17/26 [00:00<00:00, 40.72it/s] 85%|########4 | 22/26 [00:00<00:00, 43.57it/s]100%|##########| 26/26 [00:00<00:00, 36.95it/s]
Test: [   0/  26]	Loss 0.404 (0.404)	test_acc   0.79 (  0.79)	test_minacc   0.85 (  0.85)	test_majacc   0.79 (  0.79)	Loss_d 0.404 (0.404)	test_acc_d   0.79 (  0.79)	test_minacc_d   0.85 (  0.85)	test_majacc_d   0.79 (  0.79)	test_corr_d   0.55 (  0.55)
Test: [  10/  26]	Loss 0.421 (0.407)	test_acc   0.77 (  0.79)	test_minacc   0.82 (  0.82)	test_majacc   0.76 (  0.78)	Loss_d 0.421 (0.407)	test_acc_d   0.77 (  0.79)	test_minacc_d   0.82 (  0.82)	test_majacc_d   0.76 (  0.78)	test_corr_d   0.53 (  0.52)
Test: [  20/  26]	Loss 0.398 (0.410)	test_acc   0.80 (  0.79)	test_minacc   0.81 (  0.82)	test_majacc   0.80 (  0.78)	Loss_d 0.398 (0.410)	test_acc_d   0.80 (  0.79)	test_minacc_d   0.81 (  0.82)	test_majacc_d   0.80 (  0.78)	test_corr_d   0.49 (  0.52)
Test: [  26/  26]	Loss 0.334 (0.400)	test_acc   0.84 (  0.79)	test_minacc   0.80 (  0.82)	test_majacc   0.84 (  0.79)	Loss_d 0.334 (0.400)	test_acc_d   0.84 (  0.79)	test_minacc_d   0.80 (  0.82)	test_majacc_d   0.84 (  0.79)	test_corr_d   0.65 (  0.53)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.78it/s]
Test: [  0/  1]	Loss 1.182 (1.182)	test_acc   0.64 (  0.64)	test_minacc   0.62 (  0.62)	test_majacc   0.82 (  0.82)	Loss_d 1.182 (1.182)	test_acc_d   0.64 (  0.64)	test_minacc_d   0.62 (  0.62)	test_majacc_d   0.82 (  0.82)	test_corr_d  -0.07 ( -0.07)
Test: [  1/  1]	Loss 1.182 (1.182)	test_acc   0.64 (  0.64)	test_minacc   0.62 (  0.62)	test_majacc   0.82 (  0.82)	Loss_d 1.182 (1.182)	test_acc_d   0.64 (  0.64)	test_minacc_d   0.62 (  0.62)	test_majacc_d   0.82 (  0.82)	test_corr_d  -0.07 ( -0.07)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/153/checkpoints/model_best.pth
Overall Timing[ 33/  1]	epoch_time 0.0407 (0.0420)	validation_time 0.0004 (0.0006)	train_time 0.0403 (0.0412)
record: (train_acc, test_acc) (0.7939000242948532, 0.6420000195503235)
last accs (train_acc, test_acc) (0.7939000242948532, 0.6420000195503235)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.84it/s] 19%|#9        | 5/26 [00:00<00:00, 21.96it/s] 35%|###4      | 9/26 [00:00<00:00, 27.85it/s] 50%|#####     | 13/26 [00:00<00:00, 30.68it/s] 65%|######5   | 17/26 [00:00<00:00, 32.06it/s] 81%|########  | 21/26 [00:00<00:00, 33.63it/s] 96%|#########6| 25/26 [00:00<00:00, 34.06it/s]100%|##########| 26/26 [00:00<00:00, 28.95it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 884 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 885 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 886 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 887 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 888 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 889 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 890 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 891 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 892 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 893 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 894 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 895 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 896 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 897 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 898 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 899 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 900 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 901 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 902 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 903 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 904 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 905 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 906 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 907 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 908 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 909 400
penalty weights 10000.0
Epoch: [34][  26/  26]	Loss 0.003 (0.002)	train_nll   0.29 (  0.36)	train_penalty   0.00 (  0.00)	weight_norm  24.76 ( 24.75)	train_acc   0.87 (  0.81)	train_minacc   0.88 (  0.80)	train_majacc   0.87 (  0.82)	train_corr   0.00 (  0.00)	l1 5.9236 (5.9954)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.35it/s] 27%|##6       | 7/26 [00:00<00:00, 28.10it/s]                                               27%|##6       | 7/26 [00:00<00:00, 28.10it/s] 46%|####6     | 12/26 [00:00<00:00, 36.04it/s] 65%|######5   | 17/26 [00:00<00:00, 39.38it/s]                                                65%|######5   | 17/26 [00:00<00:00, 39.38it/s] 85%|########4 | 22/26 [00:00<00:00, 40.13it/s]100%|##########| 26/26 [00:00<00:00, 34.50it/s]
Test: [   0/  26]	Loss 0.322 (0.322)	test_acc   0.83 (  0.83)	test_minacc   0.85 (  0.85)	test_majacc   0.82 (  0.82)	Loss_d 0.322 (0.322)	test_acc_d   0.83 (  0.83)	test_minacc_d   0.85 (  0.85)	test_majacc_d   0.82 (  0.82)	test_corr_d   0.63 (  0.63)
Test: [  10/  26]	Loss 0.377 (0.368)	test_acc   0.76 (  0.80)	test_minacc   0.76 (  0.82)	test_majacc   0.76 (  0.80)	Loss_d 0.377 (0.368)	test_acc_d   0.76 (  0.80)	test_minacc_d   0.76 (  0.82)	test_majacc_d   0.76 (  0.80)	test_corr_d   0.59 (  0.59)
Test: [  20/  26]	Loss 0.372 (0.373)	test_acc   0.79 (  0.80)	test_minacc   0.84 (  0.81)	test_majacc   0.78 (  0.80)	Loss_d 0.372 (0.373)	test_acc_d   0.79 (  0.80)	test_minacc_d   0.84 (  0.81)	test_majacc_d   0.78 (  0.80)	test_corr_d   0.55 (  0.59)
Test: [  26/  26]	Loss 0.297 (0.368)	test_acc   0.87 (  0.81)	test_minacc   0.88 (  0.82)	test_majacc   0.87 (  0.81)	Loss_d 0.297 (0.368)	test_acc_d   0.87 (  0.81)	test_minacc_d   0.88 (  0.82)	test_majacc_d   0.87 (  0.81)	test_corr_d   0.70 (  0.60)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 57.07it/s]
Test: [  0/  1]	Loss 1.222 (1.222)	test_acc   0.61 (  0.61)	test_minacc   0.58 (  0.58)	test_majacc   0.81 (  0.81)	Loss_d 1.222 (1.222)	test_acc_d   0.61 (  0.61)	test_minacc_d   0.58 (  0.58)	test_majacc_d   0.81 (  0.81)	test_corr_d   0.08 (  0.08)
Test: [  1/  1]	Loss 1.222 (1.222)	test_acc   0.61 (  0.61)	test_minacc   0.58 (  0.58)	test_majacc   0.81 (  0.81)	Loss_d 1.222 (1.222)	test_acc_d   0.61 (  0.61)	test_minacc_d   0.58 (  0.58)	test_majacc_d   0.81 (  0.81)	test_corr_d   0.08 (  0.08)
Overall Timing[ 34/  1]	epoch_time 0.0392 (0.0419)	validation_time 0.0004 (0.0006)	train_time 0.0389 (0.0411)
record: (train_acc, test_acc) (0.7939000242948532, 0.6420000195503235)
last accs (train_acc, test_acc) (0.8085000259280205, 0.6070000529289246)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 12.47it/s] 23%|##3       | 6/26 [00:00<00:00, 23.58it/s] 38%|###8      | 10/26 [00:00<00:00, 28.66it/s] 54%|#####3    | 14/26 [00:00<00:00, 31.29it/s] 69%|######9   | 18/26 [00:00<00:00, 32.67it/s] 85%|########4 | 22/26 [00:00<00:00, 33.14it/s]100%|##########| 26/26 [00:00<00:00, 33.63it/s]100%|##########| 26/26 [00:00<00:00, 28.51it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 910 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 911 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 912 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 913 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 914 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 915 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 916 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 917 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 918 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 919 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 920 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 921 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 922 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 923 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 924 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 925 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 926 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 927 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 928 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 929 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 930 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 931 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 932 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 933 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 934 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 935 400
penalty weights 10000.0
Epoch: [35][  26/  26]	Loss 0.001 (0.001)	train_nll   0.34 (  0.38)	train_penalty   0.00 (  0.00)	weight_norm  24.77 ( 24.77)	train_acc   0.82 (  0.80)	train_minacc   0.68 (  0.80)	train_majacc   0.83 (  0.80)	train_corr   0.00 (  0.00)	l1 5.9238 (6.0543)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.57it/s] 19%|#9        | 5/26 [00:00<00:00, 24.71it/s] 38%|###8      | 10/26 [00:00<00:00, 35.33it/s]                                                38%|###8      | 10/26 [00:00<00:00, 35.33it/s] 58%|#####7    | 15/26 [00:00<00:00, 39.71it/s] 77%|#######6  | 20/26 [00:00<00:00, 39.28it/s]                                                77%|#######6  | 20/26 [00:00<00:00, 39.28it/s] 96%|#########6| 25/26 [00:00<00:00, 41.98it/s]100%|##########| 26/26 [00:00<00:00, 35.20it/s]
Test: [   0/  26]	Loss 0.396 (0.396)	test_acc   0.78 (  0.78)	test_minacc   0.74 (  0.74)	test_majacc   0.78 (  0.78)	Loss_d 0.396 (0.396)	test_acc_d   0.78 (  0.78)	test_minacc_d   0.74 (  0.74)	test_majacc_d   0.78 (  0.78)	test_corr_d   0.63 (  0.63)
Test: [  10/  26]	Loss 0.426 (0.372)	test_acc   0.75 (  0.80)	test_minacc   0.73 (  0.78)	test_majacc   0.75 (  0.80)	Loss_d 0.426 (0.372)	test_acc_d   0.75 (  0.80)	test_minacc_d   0.73 (  0.78)	test_majacc_d   0.75 (  0.80)	test_corr_d   0.62 (  0.62)
Test: [  20/  26]	Loss 0.373 (0.381)	test_acc   0.82 (  0.80)	test_minacc   0.76 (  0.78)	test_majacc   0.84 (  0.80)	Loss_d 0.373 (0.381)	test_acc_d   0.82 (  0.80)	test_minacc_d   0.76 (  0.78)	test_majacc_d   0.84 (  0.80)	test_corr_d   0.59 (  0.62)
Test: [  26/  26]	Loss 0.343 (0.377)	test_acc   0.81 (  0.80)	test_minacc   0.68 (  0.77)	test_majacc   0.82 (  0.80)	Loss_d 0.343 (0.377)	test_acc_d   0.81 (  0.80)	test_minacc_d   0.68 (  0.77)	test_majacc_d   0.82 (  0.80)	test_corr_d   0.70 (  0.62)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.56it/s]
Test: [  0/  1]	Loss 1.308 (1.308)	test_acc   0.58 (  0.58)	test_minacc   0.55 (  0.55)	test_majacc   0.83 (  0.83)	Loss_d 1.308 (1.308)	test_acc_d   0.58 (  0.58)	test_minacc_d   0.55 (  0.55)	test_majacc_d   0.83 (  0.83)	test_corr_d   0.17 (  0.17)
Test: [  1/  1]	Loss 1.308 (1.308)	test_acc   0.58 (  0.58)	test_minacc   0.55 (  0.55)	test_majacc   0.83 (  0.83)	Loss_d 1.308 (1.308)	test_acc_d   0.58 (  0.58)	test_minacc_d   0.55 (  0.55)	test_majacc_d   0.83 (  0.83)	test_corr_d   0.17 (  0.17)
Overall Timing[ 35/  1]	epoch_time 0.0415 (0.0419)	validation_time 0.0006 (0.0006)	train_time 0.0408 (0.0411)
record: (train_acc, test_acc) (0.7939000242948532, 0.6420000195503235)
last accs (train_acc, test_acc) (0.7977000252604485, 0.5750000476837158)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.72it/s] 19%|#9        | 5/26 [00:00<00:00, 21.42it/s] 35%|###4      | 9/26 [00:00<00:00, 27.50it/s] 50%|#####     | 13/26 [00:00<00:00, 28.63it/s] 65%|######5   | 17/26 [00:00<00:00, 30.06it/s] 81%|########  | 21/26 [00:00<00:00, 31.31it/s] 96%|#########6| 25/26 [00:00<00:00, 33.31it/s]100%|##########| 26/26 [00:00<00:00, 27.80it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 936 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 937 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 938 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 939 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 940 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 941 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 942 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 943 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 944 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 945 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 946 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 947 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 948 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 949 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 950 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 951 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 952 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 953 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 954 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 955 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 956 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 957 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 958 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 959 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 960 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 961 400
penalty weights 10000.0
Epoch: [36][  26/  26]	Loss 0.000 (0.001)	train_nll   0.33 (  0.37)	train_penalty   0.00 (  0.00)	weight_norm  24.78 ( 24.77)	train_acc   0.83 (  0.80)	train_minacc   0.80 (  0.80)	train_majacc   0.84 (  0.80)	train_corr   0.00 (  0.00)	l1 6.4928 (5.9972)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:00, 26.04it/s] 31%|###       | 8/26 [00:00<00:00, 36.84it/s]                                               31%|###       | 8/26 [00:00<00:00, 36.84it/s] 50%|#####     | 13/26 [00:00<00:00, 39.92it/s] 69%|######9   | 18/26 [00:00<00:00, 42.32it/s]                                                69%|######9   | 18/26 [00:00<00:00, 42.32it/s] 88%|########8 | 23/26 [00:00<00:00, 42.27it/s]100%|##########| 26/26 [00:00<00:00, 38.18it/s]
Test: [   0/  26]	Loss 0.352 (0.352)	test_acc   0.80 (  0.80)	test_minacc   0.83 (  0.83)	test_majacc   0.80 (  0.80)	Loss_d 0.352 (0.352)	test_acc_d   0.80 (  0.80)	test_minacc_d   0.83 (  0.83)	test_majacc_d   0.80 (  0.80)	test_corr_d   0.61 (  0.61)
Test: [  10/  26]	Loss 0.376 (0.349)	test_acc   0.78 (  0.82)	test_minacc   0.86 (  0.85)	test_majacc   0.76 (  0.81)	Loss_d 0.376 (0.349)	test_acc_d   0.78 (  0.82)	test_minacc_d   0.86 (  0.85)	test_majacc_d   0.76 (  0.81)	test_corr_d   0.59 (  0.59)
Test: [  20/  26]	Loss 0.365 (0.367)	test_acc   0.81 (  0.80)	test_minacc   0.84 (  0.83)	test_majacc   0.80 (  0.80)	Loss_d 0.365 (0.367)	test_acc_d   0.81 (  0.80)	test_minacc_d   0.84 (  0.83)	test_majacc_d   0.80 (  0.80)	test_corr_d   0.54 (  0.58)
Test: [  26/  26]	Loss 0.332 (0.363)	test_acc   0.83 (  0.81)	test_minacc   0.80 (  0.84)	test_majacc   0.84 (  0.80)	Loss_d 0.332 (0.363)	test_acc_d   0.83 (  0.81)	test_minacc_d   0.80 (  0.84)	test_majacc_d   0.84 (  0.80)	test_corr_d   0.67 (  0.58)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 64.86it/s]
Test: [  0/  1]	Loss 1.325 (1.325)	test_acc   0.63 (  0.63)	test_minacc   0.61 (  0.61)	test_majacc   0.81 (  0.81)	Loss_d 1.325 (1.325)	test_acc_d   0.63 (  0.63)	test_minacc_d   0.61 (  0.61)	test_majacc_d   0.81 (  0.81)	test_corr_d   0.01 (  0.01)
Test: [  1/  1]	Loss 1.325 (1.325)	test_acc   0.63 (  0.63)	test_minacc   0.61 (  0.61)	test_majacc   0.81 (  0.81)	Loss_d 1.325 (1.325)	test_acc_d   0.63 (  0.63)	test_minacc_d   0.61 (  0.61)	test_majacc_d   0.81 (  0.81)	test_corr_d   0.01 (  0.01)
Overall Timing[ 36/  1]	epoch_time 0.0402 (0.0418)	validation_time 0.0004 (0.0006)	train_time 0.0398 (0.0411)
record: (train_acc, test_acc) (0.7939000242948532, 0.6420000195503235)
last accs (train_acc, test_acc) (0.8076000232696533, 0.6330000162124634)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:07,  3.24it/s] 19%|#9        | 5/26 [00:00<00:01, 14.09it/s] 35%|###4      | 9/26 [00:00<00:00, 21.08it/s] 50%|#####     | 13/26 [00:00<00:00, 25.25it/s] 65%|######5   | 17/26 [00:00<00:00, 28.21it/s] 81%|########  | 21/26 [00:00<00:00, 30.11it/s] 96%|#########6| 25/26 [00:01<00:00, 31.62it/s]100%|##########| 26/26 [00:01<00:00, 23.88it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 962 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 963 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 964 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 965 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 966 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 967 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 968 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 969 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 970 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 971 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 972 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 973 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 974 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 975 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 976 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 977 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 978 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 979 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 980 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 981 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 982 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 983 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 984 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 985 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 986 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 987 400
penalty weights 10000.0
Epoch: [37][  26/  26]	Loss 0.002 (0.001)	train_nll   0.29 (  0.35)	train_penalty   0.00 (  0.00)	weight_norm  24.78 ( 24.78)	train_acc   0.85 (  0.82)	train_minacc   0.80 (  0.83)	train_majacc   0.86 (  0.82)	train_corr   0.00 (  0.00)	l1 6.1769 (6.3110)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:05,  4.78it/s] 23%|##3       | 6/26 [00:00<00:00, 20.80it/s]                                               23%|##3       | 6/26 [00:00<00:00, 20.80it/s] 42%|####2     | 11/26 [00:00<00:00, 29.37it/s] 62%|######1   | 16/26 [00:00<00:00, 35.79it/s]                                                62%|######1   | 16/26 [00:00<00:00, 35.79it/s] 81%|########  | 21/26 [00:00<00:00, 38.97it/s]100%|##########| 26/26 [00:00<00:00, 42.20it/s]100%|##########| 26/26 [00:00<00:00, 30.36it/s]
Test: [   0/  26]	Loss 0.309 (0.309)	test_acc   0.83 (  0.83)	test_minacc   0.85 (  0.85)	test_majacc   0.83 (  0.83)	Loss_d 0.309 (0.309)	test_acc_d   0.83 (  0.83)	test_minacc_d   0.85 (  0.85)	test_majacc_d   0.83 (  0.83)	test_corr_d   0.65 (  0.65)
Test: [  10/  26]	Loss 0.336 (0.318)	test_acc   0.80 (  0.83)	test_minacc   0.86 (  0.85)	test_majacc   0.79 (  0.83)	Loss_d 0.336 (0.318)	test_acc_d   0.80 (  0.83)	test_minacc_d   0.86 (  0.85)	test_majacc_d   0.79 (  0.83)	test_corr_d   0.64 (  0.63)
Test: [  20/  26]	Loss 0.356 (0.337)	test_acc   0.82 (  0.82)	test_minacc   0.84 (  0.84)	test_majacc   0.81 (  0.82)	Loss_d 0.356 (0.337)	test_acc_d   0.82 (  0.82)	test_minacc_d   0.84 (  0.84)	test_majacc_d   0.81 (  0.82)	test_corr_d   0.57 (  0.62)
Test: [  26/  26]	Loss 0.296 (0.335)	test_acc   0.85 (  0.83)	test_minacc   0.80 (  0.84)	test_majacc   0.86 (  0.82)	Loss_d 0.296 (0.335)	test_acc_d   0.85 (  0.83)	test_minacc_d   0.80 (  0.84)	test_majacc_d   0.86 (  0.82)	test_corr_d   0.72 (  0.63)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 64.44it/s]
Test: [  0/  1]	Loss 1.281 (1.281)	test_acc   0.64 (  0.64)	test_minacc   0.62 (  0.62)	test_majacc   0.86 (  0.86)	Loss_d 1.281 (1.281)	test_acc_d   0.64 (  0.64)	test_minacc_d   0.62 (  0.62)	test_majacc_d   0.86 (  0.86)	test_corr_d   0.06 (  0.06)
Test: [  1/  1]	Loss 1.281 (1.281)	test_acc   0.64 (  0.64)	test_minacc   0.62 (  0.62)	test_majacc   0.86 (  0.86)	Loss_d 1.281 (1.281)	test_acc_d   0.64 (  0.64)	test_minacc_d   0.62 (  0.62)	test_majacc_d   0.86 (  0.86)	test_corr_d   0.06 (  0.06)
Overall Timing[ 37/  1]	epoch_time 0.0403 (0.0418)	validation_time 0.0004 (0.0006)	train_time 0.0399 (0.0411)
record: (train_acc, test_acc) (0.7939000242948532, 0.6420000195503235)
last accs (train_acc, test_acc) (0.8256000267267227, 0.6420000195503235)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 15.17it/s] 23%|##3       | 6/26 [00:00<00:00, 25.28it/s] 38%|###8      | 10/26 [00:00<00:00, 29.30it/s] 54%|#####3    | 14/26 [00:00<00:00, 30.73it/s] 69%|######9   | 18/26 [00:00<00:00, 31.28it/s] 85%|########4 | 22/26 [00:00<00:00, 32.43it/s]100%|##########| 26/26 [00:00<00:00, 33.35it/s]100%|##########| 26/26 [00:00<00:00, 28.49it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 988 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 989 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 990 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 991 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 992 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 993 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 994 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 995 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 996 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 997 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 998 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 999 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1000 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1001 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1002 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1003 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1004 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1005 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1006 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1007 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1008 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1009 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1010 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1011 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1012 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1013 400
penalty weights 10000.0
Epoch: [38][  26/  26]	Loss 0.002 (0.001)	train_nll   0.29 (  0.34)	train_penalty   0.00 (  0.00)	weight_norm  24.80 ( 24.79)	train_acc   0.85 (  0.83)	train_minacc   0.84 (  0.84)	train_majacc   0.85 (  0.82)	train_corr   0.00 (  0.00)	l1 6.0833 (6.5297)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:05,  4.74it/s] 27%|##6       | 7/26 [00:00<00:00, 25.57it/s]                                               27%|##6       | 7/26 [00:00<00:00, 25.57it/s] 46%|####6     | 12/26 [00:00<00:00, 33.02it/s] 65%|######5   | 17/26 [00:00<00:00, 35.87it/s]                                                65%|######5   | 17/26 [00:00<00:00, 35.87it/s] 85%|########4 | 22/26 [00:00<00:00, 38.77it/s]100%|##########| 26/26 [00:00<00:00, 32.21it/s]
Test: [   0/  26]	Loss 0.304 (0.304)	test_acc   0.84 (  0.84)	test_minacc   0.80 (  0.80)	test_majacc   0.84 (  0.84)	Loss_d 0.304 (0.304)	test_acc_d   0.84 (  0.84)	test_minacc_d   0.80 (  0.80)	test_majacc_d   0.84 (  0.84)	test_corr_d   0.69 (  0.69)
Test: [  10/  26]	Loss 0.305 (0.299)	test_acc   0.85 (  0.86)	test_minacc   0.86 (  0.86)	test_majacc   0.85 (  0.87)	Loss_d 0.305 (0.299)	test_acc_d   0.85 (  0.86)	test_minacc_d   0.86 (  0.86)	test_majacc_d   0.85 (  0.87)	test_corr_d   0.69 (  0.68)
Test: [  20/  26]	Loss 0.346 (0.314)	test_acc   0.82 (  0.85)	test_minacc   0.84 (  0.84)	test_majacc   0.82 (  0.85)	Loss_d 0.346 (0.314)	test_acc_d   0.82 (  0.85)	test_minacc_d   0.84 (  0.84)	test_majacc_d   0.82 (  0.85)	test_corr_d   0.62 (  0.67)
Test: [  26/  26]	Loss 0.293 (0.316)	test_acc   0.85 (  0.85)	test_minacc   0.84 (  0.84)	test_majacc   0.85 (  0.85)	Loss_d 0.293 (0.316)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.84 (  0.84)	test_majacc_d   0.85 (  0.85)	test_corr_d   0.74 (  0.67)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.65it/s]
Test: [  0/  1]	Loss 1.304 (1.304)	test_acc   0.62 (  0.62)	test_minacc   0.59 (  0.59)	test_majacc   0.87 (  0.87)	Loss_d 1.304 (1.304)	test_acc_d   0.62 (  0.62)	test_minacc_d   0.59 (  0.59)	test_majacc_d   0.87 (  0.87)	test_corr_d   0.15 (  0.15)
Test: [  1/  1]	Loss 1.304 (1.304)	test_acc   0.62 (  0.62)	test_minacc   0.59 (  0.59)	test_majacc   0.87 (  0.87)	Loss_d 1.304 (1.304)	test_acc_d   0.62 (  0.62)	test_minacc_d   0.59 (  0.59)	test_majacc_d   0.87 (  0.87)	test_corr_d   0.15 (  0.15)
Overall Timing[ 38/  1]	epoch_time 0.0465 (0.0419)	validation_time 0.0003 (0.0006)	train_time 0.0462 (0.0412)
record: (train_acc, test_acc) (0.7939000242948532, 0.6420000195503235)
last accs (train_acc, test_acc) (0.8499000241160393, 0.6150000095367432)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 19.13it/s] 23%|##3       | 6/26 [00:00<00:00, 28.70it/s] 38%|###8      | 10/26 [00:00<00:00, 30.64it/s] 54%|#####3    | 14/26 [00:00<00:00, 31.52it/s] 69%|######9   | 18/26 [00:00<00:00, 32.27it/s] 85%|########4 | 22/26 [00:00<00:00, 33.34it/s]100%|##########| 26/26 [00:00<00:00, 33.92it/s]100%|##########| 26/26 [00:00<00:00, 29.99it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1014 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1015 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1016 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1017 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1018 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1019 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1020 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1021 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1022 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1023 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1024 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1025 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1026 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1027 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1028 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1029 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1030 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1031 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1032 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1033 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1034 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1035 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1036 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1037 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1038 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1039 400
penalty weights 10000.0
Epoch: [39][  26/  26]	Loss 0.001 (0.001)	train_nll   0.32 (  0.33)	train_penalty   0.00 (  0.00)	weight_norm  24.81 ( 24.80)	train_acc   0.83 (  0.83)	train_minacc   0.80 (  0.83)	train_majacc   0.83 (  0.83)	train_corr   0.00 (  0.00)	l1 6.1914 (6.6851)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.30it/s] 12%|#1        | 3/26 [00:00<00:02, 10.80it/s] 35%|###4      | 9/26 [00:00<00:00, 27.76it/s]                                               35%|###4      | 9/26 [00:00<00:00, 27.76it/s] 58%|#####7    | 15/26 [00:00<00:00, 34.96it/s] 77%|#######6  | 20/26 [00:00<00:00, 39.24it/s]                                                77%|#######6  | 20/26 [00:00<00:00, 39.24it/s]100%|##########| 26/26 [00:00<00:00, 44.28it/s]100%|##########| 26/26 [00:00<00:00, 31.86it/s]
Test: [   0/  26]	Loss 0.369 (0.369)	test_acc   0.77 (  0.77)	test_minacc   0.74 (  0.74)	test_majacc   0.78 (  0.78)	Loss_d 0.369 (0.369)	test_acc_d   0.77 (  0.77)	test_minacc_d   0.74 (  0.74)	test_majacc_d   0.78 (  0.78)	test_corr_d   0.65 (  0.65)
Test: [  10/  26]	Loss 0.352 (0.341)	test_acc   0.79 (  0.82)	test_minacc   0.76 (  0.82)	test_majacc   0.80 (  0.82)	Loss_d 0.352 (0.341)	test_acc_d   0.79 (  0.82)	test_minacc_d   0.76 (  0.82)	test_majacc_d   0.80 (  0.82)	test_corr_d   0.67 (  0.65)
Test: [  20/  26]	Loss 0.360 (0.342)	test_acc   0.82 (  0.82)	test_minacc   0.79 (  0.81)	test_majacc   0.82 (  0.82)	Loss_d 0.360 (0.342)	test_acc_d   0.82 (  0.82)	test_minacc_d   0.79 (  0.81)	test_majacc_d   0.82 (  0.82)	test_corr_d   0.61 (  0.65)
Test: [  26/  26]	Loss 0.327 (0.344)	test_acc   0.82 (  0.82)	test_minacc   0.80 (  0.81)	test_majacc   0.83 (  0.82)	Loss_d 0.327 (0.344)	test_acc_d   0.82 (  0.82)	test_minacc_d   0.80 (  0.81)	test_majacc_d   0.83 (  0.82)	test_corr_d   0.72 (  0.65)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.99it/s]
Test: [  0/  1]	Loss 1.301 (1.301)	test_acc   0.61 (  0.61)	test_minacc   0.58 (  0.58)	test_majacc   0.90 (  0.90)	Loss_d 1.301 (1.301)	test_acc_d   0.61 (  0.61)	test_minacc_d   0.58 (  0.58)	test_majacc_d   0.90 (  0.90)	test_corr_d   0.14 (  0.14)
Test: [  1/  1]	Loss 1.301 (1.301)	test_acc   0.61 (  0.61)	test_minacc   0.58 (  0.58)	test_majacc   0.90 (  0.90)	Loss_d 1.301 (1.301)	test_acc_d   0.61 (  0.61)	test_minacc_d   0.58 (  0.58)	test_majacc_d   0.90 (  0.90)	test_corr_d   0.14 (  0.14)
Overall Timing[ 39/  1]	epoch_time 0.0416 (0.0419)	validation_time 0.0004 (0.0006)	train_time 0.0411 (0.0412)
record: (train_acc, test_acc) (0.7939000242948532, 0.6420000195503235)
last accs (train_acc, test_acc) (0.8201000317335129, 0.6140000224113464)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:00, 23.40it/s] 27%|##6       | 7/26 [00:00<00:00, 29.94it/s] 42%|####2     | 11/26 [00:00<00:00, 32.83it/s] 58%|#####7    | 15/26 [00:00<00:00, 33.77it/s] 73%|#######3  | 19/26 [00:00<00:00, 33.59it/s] 88%|########8 | 23/26 [00:00<00:00, 33.95it/s]100%|##########| 26/26 [00:00<00:00, 30.73it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1040 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1041 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1042 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1043 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1044 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1045 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1046 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1047 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1048 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1049 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1050 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1051 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1052 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1053 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1054 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1055 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1056 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1057 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1058 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1059 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1060 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1061 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1062 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1063 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1064 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1065 400
penalty weights 10000.0
Epoch: [40][  26/  26]	Loss 0.001 (0.001)	train_nll   0.34 (  0.38)	train_penalty   0.00 (  0.00)	weight_norm  24.82 ( 24.82)	train_acc   0.83 (  0.79)	train_minacc   0.80 (  0.76)	train_majacc   0.83 (  0.80)	train_corr   0.00 (  0.00)	l1 5.9745 (6.1272)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.49it/s] 27%|##6       | 7/26 [00:00<00:00, 27.62it/s]                                               27%|##6       | 7/26 [00:00<00:00, 27.62it/s] 46%|####6     | 12/26 [00:00<00:00, 35.59it/s] 65%|######5   | 17/26 [00:00<00:00, 39.42it/s]                                                65%|######5   | 17/26 [00:00<00:00, 39.42it/s] 85%|########4 | 22/26 [00:00<00:00, 39.70it/s]100%|##########| 26/26 [00:00<00:00, 34.28it/s]
Test: [   0/  26]	Loss 0.371 (0.371)	test_acc   0.77 (  0.77)	test_minacc   0.74 (  0.74)	test_majacc   0.77 (  0.77)	Loss_d 0.371 (0.371)	test_acc_d   0.77 (  0.77)	test_minacc_d   0.74 (  0.74)	test_majacc_d   0.77 (  0.77)	test_corr_d   0.66 (  0.66)
Test: [  10/  26]	Loss 0.343 (0.341)	test_acc   0.80 (  0.82)	test_minacc   0.78 (  0.81)	test_majacc   0.80 (  0.82)	Loss_d 0.343 (0.341)	test_acc_d   0.80 (  0.82)	test_minacc_d   0.78 (  0.81)	test_majacc_d   0.80 (  0.82)	test_corr_d   0.68 (  0.66)
Test: [  20/  26]	Loss 0.353 (0.342)	test_acc   0.82 (  0.82)	test_minacc   0.76 (  0.81)	test_majacc   0.83 (  0.82)	Loss_d 0.353 (0.342)	test_acc_d   0.82 (  0.82)	test_minacc_d   0.76 (  0.81)	test_majacc_d   0.83 (  0.82)	test_corr_d   0.62 (  0.66)
Test: [  26/  26]	Loss 0.335 (0.344)	test_acc   0.82 (  0.82)	test_minacc   0.80 (  0.80)	test_majacc   0.83 (  0.82)	Loss_d 0.335 (0.344)	test_acc_d   0.82 (  0.82)	test_minacc_d   0.80 (  0.80)	test_majacc_d   0.83 (  0.82)	test_corr_d   0.72 (  0.66)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 51.64it/s]
Test: [  0/  1]	Loss 1.278 (1.278)	test_acc   0.59 (  0.59)	test_minacc   0.56 (  0.56)	test_majacc   0.86 (  0.86)	Loss_d 1.278 (1.278)	test_acc_d   0.59 (  0.59)	test_minacc_d   0.56 (  0.56)	test_majacc_d   0.86 (  0.86)	test_corr_d   0.17 (  0.17)
Test: [  1/  1]	Loss 1.278 (1.278)	test_acc   0.59 (  0.59)	test_minacc   0.56 (  0.56)	test_majacc   0.86 (  0.86)	Loss_d 1.278 (1.278)	test_acc_d   0.59 (  0.59)	test_minacc_d   0.56 (  0.56)	test_majacc_d   0.86 (  0.86)	test_corr_d   0.17 (  0.17)
Overall Timing[ 40/  1]	epoch_time 0.0415 (0.0419)	validation_time 0.0004 (0.0006)	train_time 0.0410 (0.0412)
record: (train_acc, test_acc) (0.7939000242948532, 0.6420000195503235)
last accs (train_acc, test_acc) (0.8176000260710716, 0.5900000333786011)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:06,  3.96it/s] 19%|#9        | 5/26 [00:00<00:01, 15.75it/s] 35%|###4      | 9/26 [00:00<00:00, 23.24it/s] 50%|#####     | 13/26 [00:00<00:00, 28.05it/s] 65%|######5   | 17/26 [00:00<00:00, 30.71it/s] 81%|########  | 21/26 [00:00<00:00, 31.61it/s] 96%|#########6| 25/26 [00:00<00:00, 32.76it/s]100%|##########| 26/26 [00:01<00:00, 25.60it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1066 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1067 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1068 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1069 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1070 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1071 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1072 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1073 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1074 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1075 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1076 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1077 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1078 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1079 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1080 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1081 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1082 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1083 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1084 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1085 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1086 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1087 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1088 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1089 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1090 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1091 400
penalty weights 10000.0
Epoch: [41][  26/  26]	Loss 0.000 (0.001)	train_nll   0.32 (  0.35)	train_penalty   0.00 (  0.00)	weight_norm  24.83 ( 24.82)	train_acc   0.82 (  0.81)	train_minacc   0.80 (  0.81)	train_majacc   0.82 (  0.81)	train_corr   0.00 (  0.00)	l1 6.6693 (6.3060)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.71it/s] 23%|##3       | 6/26 [00:00<00:00, 32.90it/s] 38%|###8      | 10/26 [00:00<00:00, 35.53it/s]                                                38%|###8      | 10/26 [00:00<00:00, 35.53it/s] 58%|#####7    | 15/26 [00:00<00:00, 36.98it/s] 77%|#######6  | 20/26 [00:00<00:00, 40.74it/s]                                                77%|#######6  | 20/26 [00:00<00:00, 40.74it/s] 96%|#########6| 25/26 [00:00<00:00, 42.63it/s]100%|##########| 26/26 [00:00<00:00, 36.07it/s]
Test: [   0/  26]	Loss 0.350 (0.350)	test_acc   0.79 (  0.79)	test_minacc   0.78 (  0.78)	test_majacc   0.79 (  0.79)	Loss_d 0.350 (0.350)	test_acc_d   0.79 (  0.79)	test_minacc_d   0.78 (  0.78)	test_majacc_d   0.79 (  0.79)	test_corr_d   0.65 (  0.65)
Test: [  10/  26]	Loss 0.290 (0.327)	test_acc   0.83 (  0.82)	test_minacc   0.80 (  0.82)	test_majacc   0.83 (  0.82)	Loss_d 0.290 (0.327)	test_acc_d   0.83 (  0.82)	test_minacc_d   0.80 (  0.82)	test_majacc_d   0.83 (  0.82)	test_corr_d   0.68 (  0.65)
Test: [  20/  26]	Loss 0.337 (0.328)	test_acc   0.83 (  0.82)	test_minacc   0.84 (  0.82)	test_majacc   0.82 (  0.82)	Loss_d 0.337 (0.328)	test_acc_d   0.83 (  0.82)	test_minacc_d   0.84 (  0.82)	test_majacc_d   0.82 (  0.82)	test_corr_d   0.60 (  0.64)
Test: [  26/  26]	Loss 0.315 (0.329)	test_acc   0.82 (  0.82)	test_minacc   0.76 (  0.83)	test_majacc   0.82 (  0.82)	Loss_d 0.315 (0.329)	test_acc_d   0.82 (  0.82)	test_minacc_d   0.76 (  0.83)	test_majacc_d   0.82 (  0.82)	test_corr_d   0.72 (  0.65)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 64.52it/s]
Test: [  0/  1]	Loss 1.421 (1.421)	test_acc   0.63 (  0.63)	test_minacc   0.60 (  0.60)	test_majacc   0.85 (  0.85)	Loss_d 1.421 (1.421)	test_acc_d   0.63 (  0.63)	test_minacc_d   0.60 (  0.60)	test_majacc_d   0.85 (  0.85)	test_corr_d   0.09 (  0.09)
Test: [  1/  1]	Loss 1.421 (1.421)	test_acc   0.63 (  0.63)	test_minacc   0.60 (  0.60)	test_majacc   0.85 (  0.85)	Loss_d 1.421 (1.421)	test_acc_d   0.63 (  0.63)	test_minacc_d   0.60 (  0.60)	test_majacc_d   0.85 (  0.85)	test_corr_d   0.09 (  0.09)
Overall Timing[ 41/  1]	epoch_time 0.0403 (0.0419)	validation_time 0.0004 (0.0006)	train_time 0.0399 (0.0412)
record: (train_acc, test_acc) (0.7939000242948532, 0.6420000195503235)
last accs (train_acc, test_acc) (0.8193000267148018, 0.6290000081062317)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.98it/s] 19%|#9        | 5/26 [00:00<00:01, 20.08it/s] 35%|###4      | 9/26 [00:00<00:00, 26.55it/s] 50%|#####     | 13/26 [00:00<00:00, 29.40it/s] 65%|######5   | 17/26 [00:00<00:00, 31.25it/s] 81%|########  | 21/26 [00:00<00:00, 32.66it/s] 96%|#########6| 25/26 [00:00<00:00, 34.14it/s]100%|##########| 26/26 [00:00<00:00, 28.05it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1092 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1093 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1094 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1095 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1096 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1097 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1098 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1099 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1100 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1101 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1102 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1103 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1104 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1105 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1106 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1107 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1108 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1109 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1110 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1111 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1112 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1113 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1114 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1115 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1116 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1117 400
penalty weights 10000.0
Epoch: [42][  26/  26]	Loss 0.002 (0.001)	train_nll   0.29 (  0.33)	train_penalty   0.00 (  0.00)	weight_norm  24.83 ( 24.83)	train_acc   0.84 (  0.82)	train_minacc   0.80 (  0.84)	train_majacc   0.84 (  0.82)	train_corr   0.00 (  0.00)	l1 6.2492 (6.5869)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  6.19it/s] 19%|#9        | 5/26 [00:00<00:00, 21.20it/s] 38%|###8      | 10/26 [00:00<00:00, 31.72it/s]                                                38%|###8      | 10/26 [00:00<00:00, 31.72it/s] 58%|#####7    | 15/26 [00:00<00:00, 37.22it/s] 77%|#######6  | 20/26 [00:00<00:00, 37.57it/s]                                                77%|#######6  | 20/26 [00:00<00:00, 37.57it/s] 96%|#########6| 25/26 [00:00<00:00, 41.01it/s]100%|##########| 26/26 [00:00<00:00, 32.83it/s]
Test: [   0/  26]	Loss 0.300 (0.300)	test_acc   0.83 (  0.83)	test_minacc   0.83 (  0.83)	test_majacc   0.83 (  0.83)	Loss_d 0.300 (0.300)	test_acc_d   0.83 (  0.83)	test_minacc_d   0.83 (  0.83)	test_majacc_d   0.83 (  0.83)	test_corr_d   0.69 (  0.69)
Test: [  10/  26]	Loss 0.282 (0.311)	test_acc   0.84 (  0.83)	test_minacc   0.88 (  0.85)	test_majacc   0.83 (  0.83)	Loss_d 0.282 (0.311)	test_acc_d   0.84 (  0.83)	test_minacc_d   0.88 (  0.85)	test_majacc_d   0.83 (  0.83)	test_corr_d   0.70 (  0.67)
Test: [  20/  26]	Loss 0.329 (0.312)	test_acc   0.82 (  0.84)	test_minacc   0.86 (  0.86)	test_majacc   0.81 (  0.83)	Loss_d 0.329 (0.312)	test_acc_d   0.82 (  0.84)	test_minacc_d   0.86 (  0.86)	test_majacc_d   0.81 (  0.83)	test_corr_d   0.62 (  0.67)
Test: [  26/  26]	Loss 0.291 (0.313)	test_acc   0.83 (  0.84)	test_minacc   0.80 (  0.86)	test_majacc   0.84 (  0.83)	Loss_d 0.291 (0.313)	test_acc_d   0.83 (  0.84)	test_minacc_d   0.80 (  0.86)	test_majacc_d   0.84 (  0.83)	test_corr_d   0.73 (  0.67)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.26it/s]
Test: [  0/  1]	Loss 1.319 (1.319)	test_acc   0.64 (  0.64)	test_minacc   0.61 (  0.61)	test_majacc   0.86 (  0.86)	Loss_d 1.319 (1.319)	test_acc_d   0.64 (  0.64)	test_minacc_d   0.61 (  0.61)	test_majacc_d   0.86 (  0.86)	test_corr_d   0.14 (  0.14)
Test: [  1/  1]	Loss 1.319 (1.319)	test_acc   0.64 (  0.64)	test_minacc   0.61 (  0.61)	test_majacc   0.86 (  0.86)	Loss_d 1.319 (1.319)	test_acc_d   0.64 (  0.64)	test_minacc_d   0.61 (  0.61)	test_majacc_d   0.86 (  0.86)	test_corr_d   0.14 (  0.14)
Overall Timing[ 42/  1]	epoch_time 0.0401 (0.0418)	validation_time 0.0004 (0.0006)	train_time 0.0397 (0.0411)
record: (train_acc, test_acc) (0.7939000242948532, 0.6420000195503235)
last accs (train_acc, test_acc) (0.8353000320792198, 0.6390000581741333)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.64it/s] 19%|#9        | 5/26 [00:00<00:00, 24.66it/s] 35%|###4      | 9/26 [00:00<00:00, 29.77it/s] 50%|#####     | 13/26 [00:00<00:00, 32.04it/s] 65%|######5   | 17/26 [00:00<00:00, 33.07it/s] 81%|########  | 21/26 [00:00<00:00, 33.88it/s] 96%|#########6| 25/26 [00:00<00:00, 33.46it/s]100%|##########| 26/26 [00:00<00:00, 29.55it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1118 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1119 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1120 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1121 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1122 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1123 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1124 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1125 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1126 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1127 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1128 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1129 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1130 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1131 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1132 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1133 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1134 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1135 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1136 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1137 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1138 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1139 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1140 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1141 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1142 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1143 400
penalty weights 10000.0
Epoch: [43][  26/  26]	Loss 0.000 (0.001)	train_nll   0.32 (  0.33)	train_penalty   0.00 (  0.00)	weight_norm  24.84 ( 24.84)	train_acc   0.83 (  0.82)	train_minacc   0.84 (  0.87)	train_majacc   0.83 (  0.81)	train_corr   0.00 (  0.00)	l1 6.6778 (6.7955)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.10it/s] 27%|##6       | 7/26 [00:00<00:00, 35.93it/s]                                               27%|##6       | 7/26 [00:00<00:00, 35.93it/s] 46%|####6     | 12/26 [00:00<00:00, 42.03it/s] 65%|######5   | 17/26 [00:00<00:00, 44.56it/s]                                                65%|######5   | 17/26 [00:00<00:00, 44.56it/s] 85%|########4 | 22/26 [00:00<00:00, 42.50it/s]100%|##########| 26/26 [00:00<00:00, 38.87it/s]
Test: [   0/  26]	Loss 0.321 (0.321)	test_acc   0.81 (  0.81)	test_minacc   0.78 (  0.78)	test_majacc   0.81 (  0.81)	Loss_d 0.321 (0.321)	test_acc_d   0.81 (  0.81)	test_minacc_d   0.78 (  0.78)	test_majacc_d   0.81 (  0.81)	test_corr_d   0.67 (  0.67)
Test: [  10/  26]	Loss 0.301 (0.331)	test_acc   0.83 (  0.82)	test_minacc   0.84 (  0.84)	test_majacc   0.82 (  0.82)	Loss_d 0.301 (0.331)	test_acc_d   0.83 (  0.82)	test_minacc_d   0.84 (  0.84)	test_majacc_d   0.82 (  0.82)	test_corr_d   0.69 (  0.65)
Test: [  20/  26]	Loss 0.315 (0.322)	test_acc   0.83 (  0.83)	test_minacc   0.89 (  0.86)	test_majacc   0.82 (  0.82)	Loss_d 0.315 (0.322)	test_acc_d   0.83 (  0.83)	test_minacc_d   0.89 (  0.86)	test_majacc_d   0.82 (  0.82)	test_corr_d   0.62 (  0.66)
Test: [  26/  26]	Loss 0.320 (0.322)	test_acc   0.83 (  0.83)	test_minacc   0.84 (  0.86)	test_majacc   0.83 (  0.82)	Loss_d 0.320 (0.322)	test_acc_d   0.83 (  0.83)	test_minacc_d   0.84 (  0.86)	test_majacc_d   0.83 (  0.82)	test_corr_d   0.71 (  0.66)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 64.60it/s]
Test: [  0/  1]	Loss 1.401 (1.401)	test_acc   0.64 (  0.64)	test_minacc   0.62 (  0.62)	test_majacc   0.84 (  0.84)	Loss_d 1.401 (1.401)	test_acc_d   0.64 (  0.64)	test_minacc_d   0.62 (  0.62)	test_majacc_d   0.84 (  0.84)	test_corr_d   0.14 (  0.14)
Test: [  1/  1]	Loss 1.401 (1.401)	test_acc   0.64 (  0.64)	test_minacc   0.62 (  0.62)	test_majacc   0.84 (  0.84)	Loss_d 1.401 (1.401)	test_acc_d   0.64 (  0.64)	test_minacc_d   0.62 (  0.62)	test_majacc_d   0.84 (  0.84)	test_corr_d   0.14 (  0.14)
Overall Timing[ 43/  1]	epoch_time 0.0417 (0.0418)	validation_time 0.0003 (0.0006)	train_time 0.0414 (0.0411)
record: (train_acc, test_acc) (0.7939000242948532, 0.6420000195503235)
last accs (train_acc, test_acc) (0.8286000267863274, 0.6390000581741333)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  6.17it/s] 12%|#1        | 3/26 [00:00<00:01, 12.59it/s] 27%|##6       | 7/26 [00:00<00:00, 22.07it/s] 42%|####2     | 11/26 [00:00<00:00, 26.76it/s] 58%|#####7    | 15/26 [00:00<00:00, 29.04it/s] 73%|#######3  | 19/26 [00:00<00:00, 30.40it/s] 88%|########8 | 23/26 [00:00<00:00, 32.04it/s]100%|##########| 26/26 [00:00<00:00, 26.34it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1144 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1145 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1146 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1147 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1148 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1149 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1150 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1151 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1152 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1153 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1154 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1155 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1156 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1157 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1158 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1159 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1160 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1161 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1162 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1163 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1164 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1165 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1166 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1167 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1168 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1169 400
penalty weights 10000.0
Epoch: [44][  26/  26]	Loss 0.001 (0.001)	train_nll   0.35 (  0.34)	train_penalty   0.00 (  0.00)	weight_norm  24.85 ( 24.85)	train_acc   0.78 (  0.81)	train_minacc   0.76 (  0.83)	train_majacc   0.79 (  0.81)	train_corr   0.00 (  0.00)	l1 7.0179 (6.6567)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.35it/s] 19%|#9        | 5/26 [00:00<00:00, 24.51it/s] 38%|###8      | 10/26 [00:00<00:00, 34.81it/s]                                                38%|###8      | 10/26 [00:00<00:00, 34.81it/s] 58%|#####7    | 15/26 [00:00<00:00, 38.82it/s] 77%|#######6  | 20/26 [00:00<00:00, 38.95it/s]                                                77%|#######6  | 20/26 [00:00<00:00, 38.95it/s] 96%|#########6| 25/26 [00:00<00:00, 41.53it/s]100%|##########| 26/26 [00:00<00:00, 34.50it/s]
Test: [   0/  26]	Loss 0.363 (0.363)	test_acc   0.76 (  0.76)	test_minacc   0.76 (  0.76)	test_majacc   0.76 (  0.76)	Loss_d 0.363 (0.363)	test_acc_d   0.76 (  0.76)	test_minacc_d   0.76 (  0.76)	test_majacc_d   0.76 (  0.76)	test_corr_d   0.63 (  0.63)
Test: [  10/  26]	Loss 0.371 (0.378)	test_acc   0.77 (  0.79)	test_minacc   0.76 (  0.81)	test_majacc   0.78 (  0.78)	Loss_d 0.371 (0.378)	test_acc_d   0.77 (  0.79)	test_minacc_d   0.76 (  0.81)	test_majacc_d   0.78 (  0.78)	test_corr_d   0.64 (  0.62)
Test: [  20/  26]	Loss 0.326 (0.361)	test_acc   0.82 (  0.80)	test_minacc   0.86 (  0.82)	test_majacc   0.81 (  0.79)	Loss_d 0.326 (0.361)	test_acc_d   0.82 (  0.80)	test_minacc_d   0.86 (  0.82)	test_majacc_d   0.81 (  0.79)	test_corr_d   0.59 (  0.62)
Test: [  26/  26]	Loss 0.341 (0.356)	test_acc   0.79 (  0.80)	test_minacc   0.76 (  0.83)	test_majacc   0.79 (  0.79)	Loss_d 0.341 (0.356)	test_acc_d   0.79 (  0.80)	test_minacc_d   0.76 (  0.83)	test_majacc_d   0.79 (  0.79)	test_corr_d   0.69 (  0.63)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.39it/s]
Test: [  0/  1]	Loss 1.515 (1.515)	test_acc   0.63 (  0.63)	test_minacc   0.61 (  0.61)	test_majacc   0.84 (  0.84)	Loss_d 1.515 (1.515)	test_acc_d   0.63 (  0.63)	test_minacc_d   0.61 (  0.61)	test_majacc_d   0.84 (  0.84)	test_corr_d   0.14 (  0.14)
Test: [  1/  1]	Loss 1.515 (1.515)	test_acc   0.63 (  0.63)	test_minacc   0.61 (  0.61)	test_majacc   0.84 (  0.84)	Loss_d 1.515 (1.515)	test_acc_d   0.63 (  0.63)	test_minacc_d   0.61 (  0.61)	test_majacc_d   0.84 (  0.84)	test_corr_d   0.14 (  0.14)
Overall Timing[ 44/  1]	epoch_time 0.0401 (0.0418)	validation_time 0.0006 (0.0006)	train_time 0.0396 (0.0411)
record: (train_acc, test_acc) (0.7939000242948532, 0.6420000195503235)
last accs (train_acc, test_acc) (0.7990000256299973, 0.6290000081062317)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:01, 15.28it/s] 27%|##6       | 7/26 [00:00<00:00, 23.93it/s] 42%|####2     | 11/26 [00:00<00:00, 27.30it/s] 58%|#####7    | 15/26 [00:00<00:00, 29.23it/s] 73%|#######3  | 19/26 [00:00<00:00, 31.60it/s] 88%|########8 | 23/26 [00:00<00:00, 33.34it/s]100%|##########| 26/26 [00:00<00:00, 28.97it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1170 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1171 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1172 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1173 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1174 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1175 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1176 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1177 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1178 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1179 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1180 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1181 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1182 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1183 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1184 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1185 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1186 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1187 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1188 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1189 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1190 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1191 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1192 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1193 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1194 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1195 400
penalty weights 10000.0
Epoch: [45][  26/  26]	Loss 0.000 (0.001)	train_nll   0.33 (  0.35)	train_penalty   0.00 (  0.00)	weight_norm  24.87 ( 24.86)	train_acc   0.84 (  0.81)	train_minacc   0.76 (  0.73)	train_majacc   0.85 (  0.83)	train_corr   0.00 (  0.00)	l1 6.4463 (6.4971)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:01, 18.69it/s] 35%|###4      | 9/26 [00:00<00:00, 35.41it/s]                                               35%|###4      | 9/26 [00:00<00:00, 35.41it/s] 54%|#####3    | 14/26 [00:00<00:00, 40.21it/s] 73%|#######3  | 19/26 [00:00<00:00, 39.56it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 39.56it/s] 92%|#########2| 24/26 [00:00<00:00, 42.33it/s]100%|##########| 26/26 [00:00<00:00, 37.32it/s]
Test: [   0/  26]	Loss 0.320 (0.320)	test_acc   0.84 (  0.84)	test_minacc   0.80 (  0.80)	test_majacc   0.85 (  0.85)	Loss_d 0.320 (0.320)	test_acc_d   0.84 (  0.84)	test_minacc_d   0.80 (  0.80)	test_majacc_d   0.85 (  0.85)	test_corr_d   0.67 (  0.67)
Test: [  10/  26]	Loss 0.346 (0.358)	test_acc   0.83 (  0.82)	test_minacc   0.75 (  0.75)	test_majacc   0.84 (  0.84)	Loss_d 0.346 (0.358)	test_acc_d   0.83 (  0.82)	test_minacc_d   0.75 (  0.75)	test_majacc_d   0.84 (  0.84)	test_corr_d   0.67 (  0.64)
Test: [  20/  26]	Loss 0.327 (0.354)	test_acc   0.82 (  0.82)	test_minacc   0.83 (  0.76)	test_majacc   0.82 (  0.83)	Loss_d 0.327 (0.354)	test_acc_d   0.82 (  0.82)	test_minacc_d   0.83 (  0.76)	test_majacc_d   0.82 (  0.83)	test_corr_d   0.61 (  0.64)
Test: [  26/  26]	Loss 0.324 (0.350)	test_acc   0.85 (  0.82)	test_minacc   0.88 (  0.77)	test_majacc   0.85 (  0.83)	Loss_d 0.324 (0.350)	test_acc_d   0.85 (  0.82)	test_minacc_d   0.88 (  0.77)	test_majacc_d   0.85 (  0.83)	test_corr_d   0.69 (  0.64)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.95it/s]
Test: [  0/  1]	Loss 1.352 (1.352)	test_acc   0.60 (  0.60)	test_minacc   0.57 (  0.57)	test_majacc   0.85 (  0.85)	Loss_d 1.352 (1.352)	test_acc_d   0.60 (  0.60)	test_minacc_d   0.57 (  0.57)	test_majacc_d   0.85 (  0.85)	test_corr_d   0.14 (  0.14)
Test: [  1/  1]	Loss 1.352 (1.352)	test_acc   0.60 (  0.60)	test_minacc   0.57 (  0.57)	test_majacc   0.85 (  0.85)	Loss_d 1.352 (1.352)	test_acc_d   0.60 (  0.60)	test_minacc_d   0.57 (  0.57)	test_majacc_d   0.85 (  0.85)	test_corr_d   0.14 (  0.14)
Overall Timing[ 45/  1]	epoch_time 0.0393 (0.0417)	validation_time 0.0003 (0.0006)	train_time 0.0389 (0.0411)
record: (train_acc, test_acc) (0.7939000242948532, 0.6420000195503235)
last accs (train_acc, test_acc) (0.8221000280976295, 0.5960000157356262)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.47it/s] 19%|#9        | 5/26 [00:00<00:01, 20.99it/s] 35%|###4      | 9/26 [00:00<00:00, 27.08it/s] 50%|#####     | 13/26 [00:00<00:00, 30.37it/s] 65%|######5   | 17/26 [00:00<00:00, 32.04it/s] 81%|########  | 21/26 [00:00<00:00, 33.49it/s] 96%|#########6| 25/26 [00:00<00:00, 34.11it/s]100%|##########| 26/26 [00:00<00:00, 28.48it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1196 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1197 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1198 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1199 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1200 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1201 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1202 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1203 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1204 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1205 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1206 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1207 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1208 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1209 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1210 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1211 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1212 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1213 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1214 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1215 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1216 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1217 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1218 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1219 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1220 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1221 400
penalty weights 10000.0
Epoch: [46][  26/  26]	Loss 0.002 (0.001)	train_nll   0.37 (  0.35)	train_penalty   0.00 (  0.00)	weight_norm  24.87 ( 24.87)	train_acc   0.82 (  0.82)	train_minacc   0.72 (  0.82)	train_majacc   0.83 (  0.82)	train_corr   0.00 (  0.00)	l1 6.9276 (6.5327)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.33it/s] 23%|##3       | 6/26 [00:00<00:00, 30.92it/s]                                               23%|##3       | 6/26 [00:00<00:00, 30.92it/s] 42%|####2     | 11/26 [00:00<00:00, 37.83it/s] 65%|######5   | 17/26 [00:00<00:00, 41.08it/s]                                                65%|######5   | 17/26 [00:00<00:00, 41.08it/s] 88%|########8 | 23/26 [00:00<00:00, 46.17it/s]100%|##########| 26/26 [00:00<00:00, 38.16it/s]
Test: [   0/  26]	Loss 0.340 (0.340)	test_acc   0.83 (  0.83)	test_minacc   0.76 (  0.76)	test_majacc   0.84 (  0.84)	Loss_d 0.340 (0.340)	test_acc_d   0.83 (  0.83)	test_minacc_d   0.76 (  0.76)	test_majacc_d   0.84 (  0.84)	test_corr_d   0.64 (  0.64)
Test: [  10/  26]	Loss 0.371 (0.383)	test_acc   0.82 (  0.82)	test_minacc   0.69 (  0.69)	test_majacc   0.84 (  0.84)	Loss_d 0.371 (0.383)	test_acc_d   0.82 (  0.82)	test_minacc_d   0.69 (  0.69)	test_majacc_d   0.84 (  0.84)	test_corr_d   0.64 (  0.62)
Test: [  20/  26]	Loss 0.336 (0.379)	test_acc   0.83 (  0.81)	test_minacc   0.81 (  0.69)	test_majacc   0.83 (  0.83)	Loss_d 0.336 (0.379)	test_acc_d   0.83 (  0.81)	test_minacc_d   0.81 (  0.69)	test_majacc_d   0.83 (  0.83)	test_corr_d   0.59 (  0.62)
Test: [  26/  26]	Loss 0.353 (0.372)	test_acc   0.84 (  0.82)	test_minacc   0.76 (  0.70)	test_majacc   0.84 (  0.84)	Loss_d 0.353 (0.372)	test_acc_d   0.84 (  0.82)	test_minacc_d   0.76 (  0.70)	test_majacc_d   0.84 (  0.84)	test_corr_d   0.66 (  0.63)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 60.04it/s]
Test: [  0/  1]	Loss 1.459 (1.459)	test_acc   0.57 (  0.57)	test_minacc   0.53 (  0.53)	test_majacc   0.86 (  0.86)	Loss_d 1.459 (1.459)	test_acc_d   0.57 (  0.57)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.86 (  0.86)	test_corr_d   0.10 (  0.10)
Test: [  1/  1]	Loss 1.459 (1.459)	test_acc   0.57 (  0.57)	test_minacc   0.53 (  0.53)	test_majacc   0.86 (  0.86)	Loss_d 1.459 (1.459)	test_acc_d   0.57 (  0.57)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.86 (  0.86)	test_corr_d   0.10 (  0.10)
Overall Timing[ 46/  1]	epoch_time 0.0394 (0.0417)	validation_time 0.0004 (0.0006)	train_time 0.0389 (0.0410)
record: (train_acc, test_acc) (0.7939000242948532, 0.6420000195503235)
last accs (train_acc, test_acc) (0.8161000252962113, 0.5670000314712524)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.94it/s] 19%|#9        | 5/26 [00:00<00:00, 21.09it/s] 35%|###4      | 9/26 [00:00<00:00, 26.38it/s] 50%|#####     | 13/26 [00:00<00:00, 29.73it/s] 65%|######5   | 17/26 [00:00<00:00, 31.18it/s] 81%|########  | 21/26 [00:00<00:00, 33.00it/s] 96%|#########6| 25/26 [00:00<00:00, 34.61it/s]100%|##########| 26/26 [00:00<00:00, 28.34it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1222 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1223 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1224 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1225 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1226 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1227 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1228 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1229 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1230 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1231 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1232 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1233 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1234 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1235 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1236 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1237 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1238 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1239 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1240 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1241 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1242 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1243 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1244 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1245 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1246 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1247 400
penalty weights 10000.0
Epoch: [47][  26/  26]	Loss 0.000 (0.001)	train_nll   0.32 (  0.34)	train_penalty   0.00 (  0.00)	weight_norm  24.88 ( 24.87)	train_acc   0.81 (  0.82)	train_minacc   0.84 (  0.81)	train_majacc   0.81 (  0.82)	train_corr   0.00 (  0.00)	l1 6.9855 (6.7697)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.53it/s] 23%|##3       | 6/26 [00:00<00:00, 26.92it/s]                                               23%|##3       | 6/26 [00:00<00:00, 26.92it/s] 42%|####2     | 11/26 [00:00<00:00, 34.77it/s] 65%|######5   | 17/26 [00:00<00:00, 41.84it/s]                                                65%|######5   | 17/26 [00:00<00:00, 41.84it/s] 85%|########4 | 22/26 [00:00<00:00, 42.81it/s]100%|##########| 26/26 [00:00<00:00, 36.01it/s]
Test: [   0/  26]	Loss 0.380 (0.380)	test_acc   0.75 (  0.75)	test_minacc   0.70 (  0.70)	test_majacc   0.76 (  0.76)	Loss_d 0.380 (0.380)	test_acc_d   0.75 (  0.75)	test_minacc_d   0.70 (  0.70)	test_majacc_d   0.76 (  0.76)	test_corr_d   0.63 (  0.63)
Test: [  10/  26]	Loss 0.403 (0.374)	test_acc   0.78 (  0.79)	test_minacc   0.73 (  0.78)	test_majacc   0.78 (  0.80)	Loss_d 0.403 (0.374)	test_acc_d   0.78 (  0.79)	test_minacc_d   0.73 (  0.78)	test_majacc_d   0.78 (  0.80)	test_corr_d   0.63 (  0.62)
Test: [  20/  26]	Loss 0.350 (0.371)	test_acc   0.81 (  0.80)	test_minacc   0.77 (  0.77)	test_majacc   0.82 (  0.80)	Loss_d 0.350 (0.371)	test_acc_d   0.81 (  0.80)	test_minacc_d   0.77 (  0.77)	test_majacc_d   0.82 (  0.80)	test_corr_d   0.60 (  0.62)
Test: [  26/  26]	Loss 0.315 (0.364)	test_acc   0.83 (  0.80)	test_minacc   0.84 (  0.78)	test_majacc   0.83 (  0.81)	Loss_d 0.315 (0.364)	test_acc_d   0.83 (  0.80)	test_minacc_d   0.84 (  0.78)	test_majacc_d   0.83 (  0.81)	test_corr_d   0.70 (  0.63)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 57.67it/s]
Test: [  0/  1]	Loss 1.588 (1.588)	test_acc   0.59 (  0.59)	test_minacc   0.56 (  0.56)	test_majacc   0.85 (  0.85)	Loss_d 1.588 (1.588)	test_acc_d   0.59 (  0.59)	test_minacc_d   0.56 (  0.56)	test_majacc_d   0.85 (  0.85)	test_corr_d   0.14 (  0.14)
Test: [  1/  1]	Loss 1.588 (1.588)	test_acc   0.59 (  0.59)	test_minacc   0.56 (  0.56)	test_majacc   0.85 (  0.85)	Loss_d 1.588 (1.588)	test_acc_d   0.59 (  0.59)	test_minacc_d   0.56 (  0.56)	test_majacc_d   0.85 (  0.85)	test_corr_d   0.14 (  0.14)
Overall Timing[ 47/  1]	epoch_time 0.0389 (0.0416)	validation_time 0.0004 (0.0005)	train_time 0.0385 (0.0410)
record: (train_acc, test_acc) (0.7939000242948532, 0.6420000195503235)
last accs (train_acc, test_acc) (0.8033000271320343, 0.5879999995231628)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.65it/s] 19%|#9        | 5/26 [00:00<00:01, 19.44it/s] 35%|###4      | 9/26 [00:00<00:00, 25.73it/s] 50%|#####     | 13/26 [00:00<00:00, 29.25it/s] 65%|######5   | 17/26 [00:00<00:00, 31.54it/s] 81%|########  | 21/26 [00:00<00:00, 33.23it/s] 96%|#########6| 25/26 [00:00<00:00, 34.22it/s]100%|##########| 26/26 [00:00<00:00, 27.89it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1248 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1249 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1250 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1251 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1252 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1253 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1254 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1255 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1256 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1257 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1258 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1259 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1260 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1261 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1262 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1263 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1264 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1265 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1266 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1267 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1268 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1269 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1270 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1271 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1272 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1273 400
penalty weights 10000.0
Epoch: [48][  26/  26]	Loss 0.001 (0.001)	train_nll   0.25 (  0.32)	train_penalty   0.00 (  0.00)	weight_norm  24.88 ( 24.88)	train_acc   0.85 (  0.83)	train_minacc   0.92 (  0.84)	train_majacc   0.84 (  0.83)	train_corr   0.00 (  0.00)	l1 7.1875 (6.7318)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.05it/s] 27%|##6       | 7/26 [00:00<00:00, 36.46it/s]                                               27%|##6       | 7/26 [00:00<00:00, 36.46it/s] 50%|#####     | 13/26 [00:00<00:00, 42.68it/s] 69%|######9   | 18/26 [00:00<00:00, 44.98it/s]                                                69%|######9   | 18/26 [00:00<00:00, 44.98it/s] 88%|########8 | 23/26 [00:00<00:00, 43.83it/s]100%|##########| 26/26 [00:00<00:00, 39.26it/s]
Test: [   0/  26]	Loss 0.286 (0.286)	test_acc   0.83 (  0.83)	test_minacc   0.87 (  0.87)	test_majacc   0.83 (  0.83)	Loss_d 0.286 (0.286)	test_acc_d   0.83 (  0.83)	test_minacc_d   0.87 (  0.87)	test_majacc_d   0.83 (  0.83)	test_corr_d   0.67 (  0.67)
Test: [  10/  26]	Loss 0.349 (0.328)	test_acc   0.80 (  0.82)	test_minacc   0.80 (  0.85)	test_majacc   0.80 (  0.81)	Loss_d 0.349 (0.328)	test_acc_d   0.80 (  0.82)	test_minacc_d   0.80 (  0.85)	test_majacc_d   0.80 (  0.81)	test_corr_d   0.64 (  0.64)
Test: [  20/  26]	Loss 0.326 (0.333)	test_acc   0.82 (  0.81)	test_minacc   0.89 (  0.86)	test_majacc   0.81 (  0.81)	Loss_d 0.326 (0.333)	test_acc_d   0.82 (  0.81)	test_minacc_d   0.89 (  0.86)	test_majacc_d   0.81 (  0.81)	test_corr_d   0.59 (  0.63)
Test: [  26/  26]	Loss 0.253 (0.325)	test_acc   0.85 (  0.82)	test_minacc   0.92 (  0.86)	test_majacc   0.84 (  0.81)	Loss_d 0.253 (0.325)	test_acc_d   0.85 (  0.82)	test_minacc_d   0.92 (  0.86)	test_majacc_d   0.84 (  0.81)	test_corr_d   0.72 (  0.64)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.87it/s]
Test: [  0/  1]	Loss 1.620 (1.620)	test_acc   0.65 (  0.65)	test_minacc   0.63 (  0.63)	test_majacc   0.87 (  0.87)	Loss_d 1.620 (1.620)	test_acc_d   0.65 (  0.65)	test_minacc_d   0.63 (  0.63)	test_majacc_d   0.87 (  0.87)	test_corr_d   0.07 (  0.07)
Test: [  1/  1]	Loss 1.620 (1.620)	test_acc   0.65 (  0.65)	test_minacc   0.63 (  0.63)	test_majacc   0.87 (  0.87)	Loss_d 1.620 (1.620)	test_acc_d   0.65 (  0.65)	test_minacc_d   0.63 (  0.63)	test_majacc_d   0.87 (  0.87)	test_corr_d   0.07 (  0.07)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/153/checkpoints/model_best.pth
Overall Timing[ 48/  1]	epoch_time 0.0384 (0.0415)	validation_time 0.0004 (0.0005)	train_time 0.0379 (0.0409)
record: (train_acc, test_acc) (0.8171000270247459, 0.6520000100135803)
last accs (train_acc, test_acc) (0.8171000270247459, 0.6520000100135803)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:01, 16.78it/s] 27%|##6       | 7/26 [00:00<00:00, 25.54it/s] 42%|####2     | 11/26 [00:00<00:00, 29.55it/s] 58%|#####7    | 15/26 [00:00<00:00, 31.38it/s] 73%|#######3  | 19/26 [00:00<00:00, 31.80it/s] 88%|########8 | 23/26 [00:00<00:00, 32.95it/s]100%|##########| 26/26 [00:00<00:00, 29.04it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1274 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1275 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1276 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1277 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1278 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1279 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1280 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1281 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1282 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1283 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1284 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1285 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1286 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1287 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1288 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1289 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1290 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1291 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1292 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1293 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1294 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1295 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1296 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1297 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1298 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1299 400
penalty weights 10000.0
Epoch: [49][  26/  26]	Loss 0.001 (0.001)	train_nll   0.27 (  0.32)	train_penalty   0.00 (  0.00)	weight_norm  24.90 ( 24.89)	train_acc   0.86 (  0.83)	train_minacc   0.92 (  0.86)	train_majacc   0.85 (  0.82)	train_corr   0.00 (  0.00)	l1 6.9295 (6.9443)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 18.86it/s] 27%|##6       | 7/26 [00:00<00:00, 34.44it/s]                                               27%|##6       | 7/26 [00:00<00:00, 34.44it/s] 46%|####6     | 12/26 [00:00<00:00, 38.98it/s] 65%|######5   | 17/26 [00:00<00:00, 40.35it/s]                                                65%|######5   | 17/26 [00:00<00:00, 40.35it/s] 85%|########4 | 22/26 [00:00<00:00, 43.06it/s]100%|##########| 26/26 [00:00<00:00, 37.15it/s]
Test: [   0/  26]	Loss 0.305 (0.305)	test_acc   0.82 (  0.82)	test_minacc   0.80 (  0.80)	test_majacc   0.82 (  0.82)	Loss_d 0.305 (0.305)	test_acc_d   0.82 (  0.82)	test_minacc_d   0.80 (  0.80)	test_majacc_d   0.82 (  0.82)	test_corr_d   0.69 (  0.69)
Test: [  10/  26]	Loss 0.332 (0.296)	test_acc   0.82 (  0.84)	test_minacc   0.84 (  0.88)	test_majacc   0.82 (  0.83)	Loss_d 0.332 (0.296)	test_acc_d   0.82 (  0.84)	test_minacc_d   0.84 (  0.88)	test_majacc_d   0.82 (  0.83)	test_corr_d   0.69 (  0.68)
Test: [  20/  26]	Loss 0.328 (0.312)	test_acc   0.82 (  0.83)	test_minacc   0.83 (  0.87)	test_majacc   0.81 (  0.82)	Loss_d 0.328 (0.312)	test_acc_d   0.82 (  0.83)	test_minacc_d   0.83 (  0.87)	test_majacc_d   0.81 (  0.82)	test_corr_d   0.65 (  0.67)
Test: [  26/  26]	Loss 0.275 (0.310)	test_acc   0.86 (  0.83)	test_minacc   0.92 (  0.87)	test_majacc   0.85 (  0.82)	Loss_d 0.275 (0.310)	test_acc_d   0.86 (  0.83)	test_minacc_d   0.92 (  0.87)	test_majacc_d   0.85 (  0.82)	test_corr_d   0.74 (  0.68)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.62it/s]
Test: [  0/  1]	Loss 1.626 (1.626)	test_acc   0.62 (  0.62)	test_minacc   0.59 (  0.59)	test_majacc   0.89 (  0.89)	Loss_d 1.626 (1.626)	test_acc_d   0.62 (  0.62)	test_minacc_d   0.59 (  0.59)	test_majacc_d   0.89 (  0.89)	test_corr_d   0.19 (  0.19)
Test: [  1/  1]	Loss 1.626 (1.626)	test_acc   0.62 (  0.62)	test_minacc   0.59 (  0.59)	test_majacc   0.89 (  0.89)	Loss_d 1.626 (1.626)	test_acc_d   0.62 (  0.62)	test_minacc_d   0.59 (  0.59)	test_majacc_d   0.89 (  0.89)	test_corr_d   0.19 (  0.19)
Overall Timing[ 49/  1]	epoch_time 0.0444 (0.0416)	validation_time 0.0004 (0.0005)	train_time 0.0440 (0.0410)
record: (train_acc, test_acc) (0.8171000270247459, 0.6520000100135803)
last accs (train_acc, test_acc) (0.8304000208377839, 0.6220000386238098)
done saving aggregate.csv to ./aggregate.csv
wandb: - 0.171 MB of 0.171 MB uploadedwandb: \ 0.171 MB of 0.171 MB uploadedwandb: | 0.171 MB of 0.171 MB uploadedwandb: / 0.171 MB of 0.171 MB uploadedwandb: - 0.171 MB of 0.171 MB uploadedwandb: \ 0.171 MB of 0.171 MB uploadedwandb: | 0.171 MB of 0.171 MB uploadedwandb: / 0.037 MB of 0.470 MB uploaded (0.003 MB deduped)wandb: 
wandb: Run history:
wandb:                                                                            global_step ▁▁▁▁▂▂▂▂▂▃▃▃▃▃▃▄▄▄▄▄▅▅▅▅▅▅▆▆▆▆▆▆▇▇▇▇▇███
wandb:      resnet18-usc-unsigned/baseline/prune_rate=1.0/153/logs/diagnostics/epoch_time_val █▂▃▂▂▂▁▃▁▁▁▂▂▂▂▂▂▂▂▂▂▂▂▁▂▂▁▂▂▂▂▃▂▂▂▂▁▂▁▂
wandb:      resnet18-usc-unsigned/baseline/prune_rate=1.0/153/logs/diagnostics/train_time_val █▂▃▂▂▂▁▃▁▁▂▂▂▂▂▃▃▂▂▂▂▂▂▂▂▂▂▂▂▂▂▃▂▂▂▂▂▂▂▃
wandb: resnet18-usc-unsigned/baseline/prune_rate=1.0/153/logs/diagnostics/validation_time_val █▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:                     resnet18-usc-unsigned/baseline/prune_rate=1.0/153/logs/global_step ▁▁▁▁▂▂▂▂▂▃▃▃▃▃▃▄▄▄▄▄▅▅▅▅▅▅▆▆▆▆▆▆▇▇▇▇▇███
wandb:                   resnet18-usc-unsigned/baseline/prune_rate=1.0/153/logs/test/Loss_avg ▅▆▆▆▅▅▆▆▅▆█▇▂▁▁▁▂▂▂▂▂▂▂▂▃▃▂▂▃▃▃▃▃▃▃▃▃▄▄▅
wandb:                 resnet18-usc-unsigned/baseline/prune_rate=1.0/153/logs/test/Loss_d_avg ▅▆▆▆▅▅▆▆▅▆█▇▂▁▁▁▂▂▂▂▂▂▂▂▃▃▂▂▃▃▃▃▃▃▃▃▃▄▄▅
wandb:                 resnet18-usc-unsigned/baseline/prune_rate=1.0/153/logs/test/Loss_d_val ▅▆▆▆▅▅▆▆▅▆█▇▂▁▁▁▂▂▂▂▂▂▂▂▃▃▂▂▃▃▃▃▃▃▃▃▃▄▄▅
wandb:                   resnet18-usc-unsigned/baseline/prune_rate=1.0/153/logs/test/Loss_val ▅▆▆▆▅▅▆▆▅▆█▇▂▁▁▁▂▂▂▂▂▂▂▂▃▃▂▂▃▃▃▃▃▃▃▃▃▄▄▅
wandb:               resnet18-usc-unsigned/baseline/prune_rate=1.0/153/logs/test/test_acc_avg ▁▁▁▂▃▄▃▄▄▄▄▆▇▇▇▇▇▇█▇▇▇▇▇▇▇██▇███▇███▇▇▇█
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/153/logs/test/test_acc_d_avg ▁▁▁▂▃▄▃▄▄▄▄▆▇▇▇▇▇▇█▇▇▇▇▇▇▇██▇███▇███▇▇▇█
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/153/logs/test/test_acc_d_val ▁▁▁▂▃▄▃▄▄▄▄▆▇▇▇▇▇▇█▇▇▇▇▇▇▇██▇███▇███▇▇▇█
wandb:               resnet18-usc-unsigned/baseline/prune_rate=1.0/153/logs/test/test_acc_val ▁▁▁▂▃▄▃▄▄▄▄▆▇▇▇▇▇▇█▇▇▇▇▇▇▇██▇███▇███▇▇▇█
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/153/logs/test/test_corr_d_avg ████▇▆▆▆▆▆▆▄▂▂▁▂▂▂▂▂▂▂▂▂▃▂▂▁▃▁▂▂▃▂▂▂▂▂▂▃
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/153/logs/test/test_corr_d_val ████▇▆▆▆▆▆▆▄▂▂▁▂▂▂▂▂▂▂▂▂▃▂▂▁▃▁▂▂▃▂▂▂▂▂▂▃
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/153/logs/test/test_majacc_avg ████▇▇▇▇▇▇▇▅▃▁▂▂▅▂▃▄▃▂▃▃▂▃▃▂▃▂▄▄▄▃▄▃▃▄▃▅
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/153/logs/test/test_majacc_d_avg ████▇▇▇▇▇▇▇▅▃▁▂▂▅▂▃▄▃▂▃▃▂▃▃▂▃▂▄▄▄▃▄▃▃▄▃▅
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/153/logs/test/test_majacc_d_val ████▇▇▇▇▇▇▇▅▃▁▂▂▅▂▃▄▃▂▃▃▂▃▃▂▃▂▄▄▄▃▄▃▃▄▃▅
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/153/logs/test/test_majacc_val ████▇▇▇▇▇▇▇▅▃▁▂▂▅▂▃▄▃▂▃▃▂▃▃▂▃▂▄▄▄▃▄▃▃▄▃▅
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/153/logs/test/test_minacc_avg ▁▁▁▂▃▄▃▄▄▄▄▆▇▇▇▇▇▇█▇▇▇▇▇▇▇██▇███▇███▇▇▇█
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/153/logs/test/test_minacc_d_avg ▁▁▁▂▃▄▃▄▄▄▄▆▇▇▇▇▇▇█▇▇▇▇▇▇▇██▇███▇███▇▇▇█
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/153/logs/test/test_minacc_d_val ▁▁▁▂▃▄▃▄▄▄▄▆▇▇▇▇▇▇█▇▇▇▇▇▇▇██▇███▇███▇▇▇█
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/153/logs/test/test_minacc_val ▁▁▁▂▃▄▃▄▄▄▄▆▇▇▇▇▇▇█▇▇▇▇▇▇▇██▇███▇███▇▇▇█
wandb:                  resnet18-usc-unsigned/baseline/prune_rate=1.0/153/logs/train/Loss_avg █▆▆▆▅▅▅▅▄▄▄▄▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:                  resnet18-usc-unsigned/baseline/prune_rate=1.0/153/logs/train/Loss_val ██▇▇▆▅▅▅▄▄▅▅▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:                    resnet18-usc-unsigned/baseline/prune_rate=1.0/153/logs/train/l1_avg █▅▅▅▅▅▅▅▆▆▆▆▆▁▁▁▁▂▂▂▂▂▂▂▂▂▂▂▂▂▃▄▂▃▄▄▃▄▄▅
wandb:                    resnet18-usc-unsigned/baseline/prune_rate=1.0/153/logs/train/l1_val ▅▆▆▆▆▆▆▆▅▆▇█▃▁▁▁▂▂▂▂▂▂▂▃▃▃▂▃▂▄▃▃▂▄▃▄▄▅▅▅
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/153/logs/train/train_acc_avg ▂▄▄▅▅▅▆▆▇███▇▂▂▁▂▂▂▂▂▂▂▂▂▂▁▃▁▂▃▃▁▂▃▃▂▃▃▃
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/153/logs/train/train_acc_val ▅▅▅▅▆▇▇▇██▇▇▆▃▂▂▃▃▂▁▂▂▂▁▂▁▁▃▂▃▄▄▃▃▃▃▄▂▂▄
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/153/logs/train/train_corr_avg ▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/153/logs/train/train_corr_val ▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/153/logs/train/train_majacc_avg ▆██▇▇▇▇▇▇▇▇▇▆▂▂▁▂▂▂▂▂▂▂▂▁▂▁▂▁▁▂▂▁▂▂▂▂▂▂▂
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/153/logs/train/train_majacc_val ████▇█████▇▆▅▂▂▁▃▂▂▁▁▂▁▁▂▁▁▃▂▃▃▃▂▂▃▂▃▂▂▃
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/153/logs/train/train_minacc_avg ▁▁▂▂▃▄▄▄▅▆▆▆▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇█▇▇██▇███▇███
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/153/logs/train/train_minacc_val ▁▁▁▂▃▄▄▅▆▅▅▇▇▇▇▇▇▇▇▆▇▇▆▆▇▆▇▇▆▇▇▇▇▇▇▇▇▆▇█
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/153/logs/train/train_nll_avg █▅▄▄▃▃▃▂▂▁▁▁▁▅▅▅▅▄▅▄▄▄▄▄▅▄▅▄▄▄▄▃▄▄▃▃▄▄▃▃
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/153/logs/train/train_nll_val ▆▅▄▄▃▂▂▂▁▁▁▁▃▇██▅▆▇▇▆▇▇▇▆▇█▅▆▆▄▄▆▅▄▅▅▇▅▄
wandb:         resnet18-usc-unsigned/baseline/prune_rate=1.0/153/logs/train/train_penalty_avg █▂▂▂▂▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:         resnet18-usc-unsigned/baseline/prune_rate=1.0/153/logs/train/train_penalty_val ██▆▅▄▃▃▂▃▂▃▁▃▁▁▁▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:           resnet18-usc-unsigned/baseline/prune_rate=1.0/153/logs/train/weight_norm_avg ▁▅▅▅▅▅▆▆▆▆▇▇████████████████████████████
wandb:           resnet18-usc-unsigned/baseline/prune_rate=1.0/153/logs/train/weight_norm_val ▁▃▃▃▄▄▄▄▅▅▆▆▇███████████████████████████
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/153/logs/train/zero_count_avg ▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/153/logs/train/zero_count_val ▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb: 
wandb: Run summary:
wandb:                                                                            global_step 49
wandb:      resnet18-usc-unsigned/baseline/prune_rate=1.0/153/logs/diagnostics/epoch_time_val 0.04443
wandb:      resnet18-usc-unsigned/baseline/prune_rate=1.0/153/logs/diagnostics/train_time_val 0.04398
wandb: resnet18-usc-unsigned/baseline/prune_rate=1.0/153/logs/diagnostics/validation_time_val 0.00044
wandb:                     resnet18-usc-unsigned/baseline/prune_rate=1.0/153/logs/global_step 49
wandb:                   resnet18-usc-unsigned/baseline/prune_rate=1.0/153/logs/test/Loss_avg 1.62649
wandb:                 resnet18-usc-unsigned/baseline/prune_rate=1.0/153/logs/test/Loss_d_avg 1.62649
wandb:                 resnet18-usc-unsigned/baseline/prune_rate=1.0/153/logs/test/Loss_d_val 1.62649
wandb:                   resnet18-usc-unsigned/baseline/prune_rate=1.0/153/logs/test/Loss_val 1.62649
wandb:               resnet18-usc-unsigned/baseline/prune_rate=1.0/153/logs/test/test_acc_avg 0.622
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/153/logs/test/test_acc_d_avg 0.622
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/153/logs/test/test_acc_d_val 0.622
wandb:               resnet18-usc-unsigned/baseline/prune_rate=1.0/153/logs/test/test_acc_val 0.622
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/153/logs/test/test_corr_d_avg 0.18935
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/153/logs/test/test_corr_d_val 0.18935
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/153/logs/test/test_majacc_avg 0.89
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/153/logs/test/test_majacc_d_avg 0.89
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/153/logs/test/test_majacc_d_val 0.89
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/153/logs/test/test_majacc_val 0.89
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/153/logs/test/test_minacc_avg 0.59222
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/153/logs/test/test_minacc_d_avg 0.59222
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/153/logs/test/test_minacc_d_val 0.59222
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/153/logs/test/test_minacc_val 0.59222
wandb:                  resnet18-usc-unsigned/baseline/prune_rate=1.0/153/logs/train/Loss_avg 0.00134
wandb:                  resnet18-usc-unsigned/baseline/prune_rate=1.0/153/logs/train/Loss_val 0.00102
wandb:                    resnet18-usc-unsigned/baseline/prune_rate=1.0/153/logs/train/l1_avg 6.94427
wandb:                    resnet18-usc-unsigned/baseline/prune_rate=1.0/153/logs/train/l1_val 6.92953
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/153/logs/train/train_acc_avg 0.8268
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/153/logs/train/train_acc_val 0.856
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/153/logs/train/train_corr_avg 0.0
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/153/logs/train/train_corr_val 0.0
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/153/logs/train/train_majacc_avg 0.82103
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/153/logs/train/train_majacc_val 0.84889
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/153/logs/train/train_minacc_avg 0.85932
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/153/logs/train/train_minacc_val 0.92
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/153/logs/train/train_nll_avg 0.31574
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/153/logs/train/train_nll_val 0.26955
wandb:         resnet18-usc-unsigned/baseline/prune_rate=1.0/153/logs/train/train_penalty_avg 0.00131
wandb:         resnet18-usc-unsigned/baseline/prune_rate=1.0/153/logs/train/train_penalty_val 0.00099
wandb:           resnet18-usc-unsigned/baseline/prune_rate=1.0/153/logs/train/weight_norm_avg 24.8897
wandb:           resnet18-usc-unsigned/baseline/prune_rate=1.0/153/logs/train/weight_norm_val 24.89681
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/153/logs/train/zero_count_avg 0.0
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/153/logs/train/zero_count_val 0.0
wandb: 
wandb: 🚀 View run name_random at: https://wandb.ai/janezdu-uiuc/irm/runs/8a1chfok
wandb: ⭐️ View project at: https://wandb.ai/janezdu-uiuc/irm
wandb: Synced 5 W&B file(s), 0 media file(s), 2 artifact file(s) and 1 other file(s)
wandb: Find logs at: ./wandb/run-20240907_203144-8a1chfok/logs
wandb: WARNING The new W&B backend becomes opt-out in version 0.18.0; try it out with `wandb.require("core")`! See https://wandb.me/wandb-core for more information.
wandb: Currently logged in as: janezdu (janezdu-uiuc). Use `wandb login --relogin` to force relogin
wandb: wandb version 0.17.9 is available!  To upgrade, please run:
wandb:  $ pip install wandb --upgrade
wandb: Tracking run with wandb version 0.17.7
wandb: Run data is saved locally in /scratch/users/zd16/sparseIRM-resnet-ver/wandb/run-20240907_203438-5m3ihgu5
wandb: Run `wandb offline` to turn off syncing.
wandb: Syncing run name_random
wandb: ⭐️ View project at https://wandb.ai/janezdu-uiuc/irm
wandb: 🚀 View run at https://wandb.ai/janezdu-uiuc/irm/runs/5m3ihgu5
=> Reading YAML config from configs/smallscale/resnet18/resnet18-usc-unsigned.yaml
Namespace(data='dataset/', optimizer='adam', weight_opt='adam', set='mnistcifar', arch='ResNet18', config='configs/smallscale/resnet18/resnet18-usc-unsigned.yaml', log_dir=None, workers=4, epochs=50, start_epoch=None, batch_size=390, lr=0.006, warmup_length=0, momentum=0.9, weight_decay=0.0, print_freq=10, num_classes=1, resume='', resume_train_weights='', evaluate=False, pretrained=None, pretrained_distill=None, alpha_distill=0.95, T_distill=2, seed=0, multigpu=[0], lr_policy='cosine_lr', lr_adjust=30, lr_gamma=0.1, name='baseline', save_every=-1, prune_rate=1.0, param_prune_rate=0.0, pr_start=1.0, low_data=1, width_mult=1.0, nesterov=False, threetimes=False, random_subnet=False, one_batch=False, conv_type='DenseConv', freeze_weights=False, st=False, mode='fan_in', nonlinearity='relu', bn_type='LearnedBatchNorm', init='kaiming_normal', no_bn_decay=False, scale_fan=False, first_layer_dense=False, last_layer_dense=True, approx=False, zero=False, flip=False, bs=False, gumbel_sample=False, multiply_prob=False, no_multiply=False, multiply_cont=False, multiply_prob_bs=False, indiv=False, label_smoothing=None, first_layer_type=None, trainer='default', score_init_constant=1.0, K=1, update_freq=20, D=0.01, T=1, TA=True, TA2=False, TA_grow=False, center=False, straight_through=False, PLA_factor=0.1, PLA_patience=10, gradient_loss_para=0, abs_loss_para=0, thres=0.9, runs_name='name_random', resume_compare_loss1='', resume_compare_loss2='', init_weights='', trained_mask='', weight_rescaling=False, constrain_by_layer=False, weight_rescaling_data=False, use_running_stats=False, not_clipping=False, rescaling_para=False, lasso_para=0, dont_freeze_weights=False, iterative=True, prob_by_weight=False, rescale_at_fix_subnet=False, train_weights_at_the_same_time=False, sample_from_training_set=False, load_true_para=False, distill=False, finetune=False, stablize=False, prev_best=0, weight_opt_lr=0.0006, n=500, ts=0.28, te=0.6, d=20000, s=80, c=0.75, init_prob=False, thres_before=0.001, wide_ratio=0.001, noise=1, cal_p_q=False, just_finetune=False, snip=False, envs_num=2, l2_regularizer_weight=0.001, data_num=50000, env_type='linear', irm_type='irmv1', hidden_dim=390, penalty_anneal_iters=400, penalty_weight=10000.0, grayscale_model=0, weight_lr_schedule=False, fix_subnet=False, freeze_weight=False, step='ours', prior_sd_coef=0, dim_inv=2, variance_gamma=1.0, dim_spu=10, image_scale=32, cons_ratio='0.999_0.7_0.1', noise_ratio=0.2, step_gamma=0.1, step_round=3, inner_steps=1, use_pgd=False, z=15.0, pgd_anneal_iters=600, pgd_skip_steps=50, fraction_z=0.95)
=> Creating model 'ResNet18'
Here!!!!!!!!
==> Conv Type: DenseConv
==> BN Type: LearnedBatchNorm
<class 'torch.nn.modules.conv.Conv2d'>
<class 'torch.nn.modules.batchnorm.BatchNorm2d'>
==> Building first layer with <class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
ResNet(
  (conv1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
  (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (relu): ReLU(inplace=True)
  (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
  (layer1): Sequential(
    (0): BasicBlock(
      (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (1): BasicBlock(
      (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (layer2): Sequential(
    (0): BasicBlock(
      (conv1): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (downsample): Sequential(
        (0): Conv2d(64, 128, kernel_size=(1, 1), stride=(2, 2), bias=False)
        (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (1): BasicBlock(
      (conv1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (layer3): Sequential(
    (0): BasicBlock(
      (conv1): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (downsample): Sequential(
        (0): Conv2d(128, 256, kernel_size=(1, 1), stride=(2, 2), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (1): BasicBlock(
      (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (layer4): Sequential(
    (0): BasicBlock(
      (conv1): Conv2d(256, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (downsample): Sequential(
        (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (1): BasicBlock(
      (conv1): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (avgpool): AdaptiveAvgPool2d(output_size=1)
  (fc): Conv2d(512, 1, kernel_size=(1, 1), stride=(1, 1), bias=False)
)
=> Parallelizing on [0] gpus
<DEBUG> gradient to module.conv1.weight
<DEBUG> gradient to module.bn1.weight
<DEBUG> gradient to module.bn1.bias
<DEBUG> gradient to module.layer1.0.conv1.weight
<DEBUG> gradient to module.layer1.0.bn1.weight
<DEBUG> gradient to module.layer1.0.bn1.bias
<DEBUG> gradient to module.layer1.0.conv2.weight
<DEBUG> gradient to module.layer1.0.bn2.weight
<DEBUG> gradient to module.layer1.0.bn2.bias
<DEBUG> gradient to module.layer1.1.conv1.weight
<DEBUG> gradient to module.layer1.1.bn1.weight
<DEBUG> gradient to module.layer1.1.bn1.bias
<DEBUG> gradient to module.layer1.1.conv2.weight
<DEBUG> gradient to module.layer1.1.bn2.weight
<DEBUG> gradient to module.layer1.1.bn2.bias
<DEBUG> gradient to module.layer2.0.conv1.weight
<DEBUG> gradient to module.layer2.0.bn1.weight
<DEBUG> gradient to module.layer2.0.bn1.bias
<DEBUG> gradient to module.layer2.0.conv2.weight
<DEBUG> gradient to module.layer2.0.bn2.weight
<DEBUG> gradient to module.layer2.0.bn2.bias
<DEBUG> gradient to module.layer2.0.downsample.0.weight
<DEBUG> gradient to module.layer2.0.downsample.1.weight
<DEBUG> gradient to module.layer2.0.downsample.1.bias
<DEBUG> gradient to module.layer2.1.conv1.weight
<DEBUG> gradient to module.layer2.1.bn1.weight
<DEBUG> gradient to module.layer2.1.bn1.bias
<DEBUG> gradient to module.layer2.1.conv2.weight
<DEBUG> gradient to module.layer2.1.bn2.weight
<DEBUG> gradient to module.layer2.1.bn2.bias
<DEBUG> gradient to module.layer3.0.conv1.weight
<DEBUG> gradient to module.layer3.0.bn1.weight
<DEBUG> gradient to module.layer3.0.bn1.bias
<DEBUG> gradient to module.layer3.0.conv2.weight
<DEBUG> gradient to module.layer3.0.bn2.weight
<DEBUG> gradient to module.layer3.0.bn2.bias
<DEBUG> gradient to module.layer3.0.downsample.0.weight
<DEBUG> gradient to module.layer3.0.downsample.1.weight
<DEBUG> gradient to module.layer3.0.downsample.1.bias
<DEBUG> gradient to module.layer3.1.conv1.weight
<DEBUG> gradient to module.layer3.1.bn1.weight
<DEBUG> gradient to module.layer3.1.bn1.bias
<DEBUG> gradient to module.layer3.1.conv2.weight
<DEBUG> gradient to module.layer3.1.bn2.weight
<DEBUG> gradient to module.layer3.1.bn2.bias
<DEBUG> gradient to module.layer4.0.conv1.weight
<DEBUG> gradient to module.layer4.0.bn1.weight
<DEBUG> gradient to module.layer4.0.bn1.bias
<DEBUG> gradient to module.layer4.0.conv2.weight
<DEBUG> gradient to module.layer4.0.bn2.weight
<DEBUG> gradient to module.layer4.0.bn2.bias
<DEBUG> gradient to module.layer4.0.downsample.0.weight
<DEBUG> gradient to module.layer4.0.downsample.1.weight
<DEBUG> gradient to module.layer4.0.downsample.1.bias
<DEBUG> gradient to module.layer4.1.conv1.weight
<DEBUG> gradient to module.layer4.1.bn1.weight
<DEBUG> gradient to module.layer4.1.bn1.bias
<DEBUG> gradient to module.layer4.1.conv2.weight
<DEBUG> gradient to module.layer4.1.bn2.weight
<DEBUG> gradient to module.layer4.1.bn2.bias
<DEBUG> gradient to module.fc.weight
Files already downloaded and verified
Files already downloaded and verified
Adding Noise to Label, len(Y)=12000, Label_noise=1166
Xmp (7877, 3, 32, 32) (6903, 3, 32, 32)
Xcp (6002, 3, 32, 32) (5998, 3, 32, 32)
env=0 2497 2497 3 3
xn 2500 xp 2500
env=1 1750 1750 750 750
xn 2500 xp 2500
env=2 50 50 450 450
xn 500 xp 500
=> Creating model 'EBD'
EBD(
  (embedings): Embedding(2, 1)
)
=> Parallelizing on [0] gpus
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:01<00:32,  1.29s/it] 23%|##3       | 6/26 [00:01<00:03,  5.60it/s] 42%|####2     | 11/26 [00:01<00:01, 10.66it/s] 58%|#####7    | 15/26 [00:01<00:00, 14.49it/s] 73%|#######3  | 19/26 [00:01<00:00, 18.35it/s] 88%|########8 | 23/26 [00:01<00:00, 22.00it/s]100%|##########| 26/26 [00:02<00:00, 11.20it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 0 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 2 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 3 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 4 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 5 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 6 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 7 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 8 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 9 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 10 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 11 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 12 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 13 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 14 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 15 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 16 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 17 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 18 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 19 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 20 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 21 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 22 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 23 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 24 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 25 400
penalty weights 0.0
Epoch: [0][  26/  26]	Loss 0.390 (0.507)	train_nll   0.39 (  0.51)	train_penalty   0.05 (  0.20)	weight_norm  20.91 ( 18.18)	train_acc   0.86 (  0.82)	train_minacc   0.00 (  0.05)	train_majacc   0.99 (  0.96)	train_corr   0.00 (  0.00)	l1 6.6889 (7.7361)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 19.36it/s] 27%|##6       | 7/26 [00:00<00:00, 35.81it/s]                                               27%|##6       | 7/26 [00:00<00:00, 35.81it/s] 46%|####6     | 12/26 [00:00<00:00, 41.93it/s] 65%|######5   | 17/26 [00:00<00:00, 42.68it/s]                                                65%|######5   | 17/26 [00:00<00:00, 42.68it/s] 85%|########4 | 22/26 [00:00<00:00, 44.12it/s]100%|##########| 26/26 [00:00<00:00, 38.08it/s]
Test: [   0/  26]	Loss 0.354 (0.354)	test_acc   0.88 (  0.88)	test_minacc   0.00 (  0.00)	test_majacc   1.00 (  1.00)	Loss_d 0.354 (0.354)	test_acc_d   0.88 (  0.88)	test_minacc_d   0.00 (  0.00)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.99 (  0.99)
Test: [  10/  26]	Loss 0.409 (0.401)	test_acc   0.85 (  0.85)	test_minacc   0.00 (  0.00)	test_majacc   1.00 (  1.00)	Loss_d 0.409 (0.401)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.00 (  0.00)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.98 (  0.98)
Test: [  20/  26]	Loss 0.444 (0.408)	test_acc   0.82 (  0.85)	test_minacc   0.00 (  0.00)	test_majacc   1.00 (  1.00)	Loss_d 0.444 (0.408)	test_acc_d   0.82 (  0.85)	test_minacc_d   0.00 (  0.00)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.98 (  0.98)
Test: [  26/  26]	Loss 0.386 (0.407)	test_acc   0.86 (  0.85)	test_minacc   0.00 (  0.00)	test_majacc   0.99 (  1.00)	Loss_d 0.386 (0.407)	test_acc_d   0.86 (  0.85)	test_minacc_d   0.00 (  0.00)	test_majacc_d   0.99 (  1.00)	test_corr_d   0.98 (  0.98)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00,  2.52it/s]100%|##########| 1/1 [00:00<00:00,  2.52it/s]
Test: [  0/  1]	Loss 1.682 (1.682)	test_acc   0.10 (  0.10)	test_minacc   0.00 (  0.00)	test_majacc   1.00 (  1.00)	Loss_d 1.682 (1.682)	test_acc_d   0.10 (  0.10)	test_minacc_d   0.00 (  0.00)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.98 (  0.98)
Test: [  1/  1]	Loss 1.682 (1.682)	test_acc   0.10 (  0.10)	test_minacc   0.00 (  0.00)	test_majacc   1.00 (  1.00)	Loss_d 1.682 (1.682)	test_acc_d   0.10 (  0.10)	test_minacc_d   0.00 (  0.00)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.98 (  0.98)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/155/checkpoints/model_best.pth
Overall Timing[  0/  1]	epoch_time 0.0768 (0.0768)	validation_time 0.0069 (0.0069)	train_time 0.0669 (0.0669)
record: (train_acc, test_acc) (0.8484000233411789, 0.10100000351667404)
last accs (train_acc, test_acc) (0.8484000233411789, 0.10100000351667404)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.02it/s] 19%|#9        | 5/26 [00:00<00:01, 18.12it/s] 35%|###4      | 9/26 [00:00<00:00, 24.44it/s] 50%|#####     | 13/26 [00:00<00:00, 28.34it/s] 65%|######5   | 17/26 [00:00<00:00, 30.34it/s] 81%|########  | 21/26 [00:00<00:00, 31.76it/s] 96%|#########6| 25/26 [00:00<00:00, 33.12it/s]100%|##########| 26/26 [00:00<00:00, 26.51it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 26 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 27 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 28 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 29 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 30 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 31 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 32 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 33 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 34 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 35 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 36 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 37 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 38 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 39 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 40 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 41 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 42 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 43 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 44 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 45 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 46 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 47 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 48 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 49 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 50 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 51 400
penalty weights 0.0
Epoch: [1][  26/  26]	Loss 0.372 (0.398)	train_nll   0.37 (  0.40)	train_penalty   0.04 (  0.05)	weight_norm  22.00 ( 21.67)	train_acc   0.86 (  0.85)	train_minacc   0.03 (  0.03)	train_majacc   0.98 (  0.99)	train_corr   0.00 (  0.00)	l1 6.8287 (6.7763)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 19.40it/s] 27%|##6       | 7/26 [00:00<00:00, 30.41it/s]                                               27%|##6       | 7/26 [00:00<00:00, 30.41it/s] 46%|####6     | 12/26 [00:00<00:00, 37.30it/s] 65%|######5   | 17/26 [00:00<00:00, 40.83it/s]                                                65%|######5   | 17/26 [00:00<00:00, 40.83it/s] 85%|########4 | 22/26 [00:00<00:00, 42.64it/s]100%|##########| 26/26 [00:00<00:00, 36.53it/s]
Test: [   0/  26]	Loss 0.321 (0.321)	test_acc   0.88 (  0.88)	test_minacc   0.02 (  0.02)	test_majacc   1.00 (  1.00)	Loss_d 0.321 (0.321)	test_acc_d   0.88 (  0.88)	test_minacc_d   0.02 (  0.02)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.97 (  0.97)
Test: [  10/  26]	Loss 0.374 (0.375)	test_acc   0.85 (  0.85)	test_minacc   0.05 (  0.02)	test_majacc   1.00 (  1.00)	Loss_d 0.374 (0.375)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.05 (  0.02)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.96 (  0.96)
Test: [  20/  26]	Loss 0.420 (0.383)	test_acc   0.82 (  0.85)	test_minacc   0.00 (  0.02)	test_majacc   1.00 (  1.00)	Loss_d 0.420 (0.383)	test_acc_d   0.82 (  0.85)	test_minacc_d   0.00 (  0.02)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.96 (  0.96)
Test: [  26/  26]	Loss 0.360 (0.379)	test_acc   0.86 (  0.85)	test_minacc   0.00 (  0.02)	test_majacc   0.99 (  1.00)	Loss_d 0.360 (0.379)	test_acc_d   0.86 (  0.85)	test_minacc_d   0.00 (  0.02)	test_majacc_d   0.99 (  1.00)	test_corr_d   0.96 (  0.96)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 59.60it/s]
Test: [  0/  1]	Loss 1.752 (1.752)	test_acc   0.11 (  0.11)	test_minacc   0.01 (  0.01)	test_majacc   0.98 (  0.98)	Loss_d 1.752 (1.752)	test_acc_d   0.11 (  0.11)	test_minacc_d   0.01 (  0.01)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.94 (  0.94)
Test: [  1/  1]	Loss 1.752 (1.752)	test_acc   0.11 (  0.11)	test_minacc   0.01 (  0.01)	test_majacc   0.98 (  0.98)	Loss_d 1.752 (1.752)	test_acc_d   0.11 (  0.11)	test_minacc_d   0.01 (  0.01)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.94 (  0.94)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/155/checkpoints/model_best.pth
Overall Timing[  1/  1]	epoch_time 0.0406 (0.0587)	validation_time 0.0004 (0.0036)	train_time 0.0402 (0.0535)
record: (train_acc, test_acc) (0.8496000242233276, 0.1080000028014183)
last accs (train_acc, test_acc) (0.8496000242233276, 0.1080000028014183)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 14.18it/s] 23%|##3       | 6/26 [00:00<00:00, 27.03it/s] 38%|###8      | 10/26 [00:00<00:00, 32.32it/s] 54%|#####3    | 14/26 [00:00<00:00, 34.93it/s] 69%|######9   | 18/26 [00:00<00:00, 35.55it/s] 85%|########4 | 22/26 [00:00<00:00, 35.61it/s]100%|##########| 26/26 [00:00<00:00, 36.04it/s]100%|##########| 26/26 [00:00<00:00, 31.41it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 52 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 53 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 54 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 55 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 56 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 57 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 58 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 59 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 60 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 61 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 62 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 63 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 64 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 65 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 66 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 67 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 68 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 69 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 70 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 71 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 72 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 73 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 74 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 75 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 76 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 77 400
penalty weights 0.0
Epoch: [2][  26/  26]	Loss 0.367 (0.378)	train_nll   0.37 (  0.38)	train_penalty   0.04 (  0.04)	weight_norm  22.15 ( 22.10)	train_acc   0.86 (  0.85)	train_minacc   0.03 (  0.08)	train_majacc   0.99 (  0.98)	train_corr   0.00 (  0.00)	l1 6.7401 (6.8361)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:05,  4.83it/s] 15%|#5        | 4/26 [00:00<00:01, 12.69it/s] 35%|###4      | 9/26 [00:00<00:00, 24.55it/s]                                               35%|###4      | 9/26 [00:00<00:00, 24.55it/s] 54%|#####3    | 14/26 [00:00<00:00, 31.42it/s] 73%|#######3  | 19/26 [00:00<00:00, 36.31it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 36.31it/s] 92%|#########2| 24/26 [00:00<00:00, 37.05it/s]100%|##########| 26/26 [00:00<00:00, 29.03it/s]
Test: [   0/  26]	Loss 0.323 (0.323)	test_acc   0.89 (  0.89)	test_minacc   0.09 (  0.09)	test_majacc   1.00 (  1.00)	Loss_d 0.323 (0.323)	test_acc_d   0.89 (  0.89)	test_minacc_d   0.09 (  0.09)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.95 (  0.95)
Test: [  10/  26]	Loss 0.363 (0.359)	test_acc   0.86 (  0.86)	test_minacc   0.10 (  0.06)	test_majacc   0.99 (  0.99)	Loss_d 0.363 (0.359)	test_acc_d   0.86 (  0.86)	test_minacc_d   0.10 (  0.06)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.94 (  0.95)
Test: [  20/  26]	Loss 0.400 (0.367)	test_acc   0.83 (  0.85)	test_minacc   0.06 (  0.06)	test_majacc   0.99 (  0.99)	Loss_d 0.400 (0.367)	test_acc_d   0.83 (  0.85)	test_minacc_d   0.06 (  0.06)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.94 (  0.94)
Test: [  26/  26]	Loss 0.357 (0.364)	test_acc   0.87 (  0.85)	test_minacc   0.03 (  0.06)	test_majacc   0.99 (  0.99)	Loss_d 0.357 (0.364)	test_acc_d   0.87 (  0.85)	test_minacc_d   0.03 (  0.06)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.95 (  0.94)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 60.97it/s]
Test: [  0/  1]	Loss 1.682 (1.682)	test_acc   0.14 (  0.14)	test_minacc   0.04 (  0.04)	test_majacc   1.00 (  1.00)	Loss_d 1.682 (1.682)	test_acc_d   0.14 (  0.14)	test_minacc_d   0.04 (  0.04)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.90 (  0.90)
Test: [  1/  1]	Loss 1.682 (1.682)	test_acc   0.14 (  0.14)	test_minacc   0.04 (  0.04)	test_majacc   1.00 (  1.00)	Loss_d 1.682 (1.682)	test_acc_d   0.14 (  0.14)	test_minacc_d   0.04 (  0.04)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.90 (  0.90)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/155/checkpoints/model_best.pth
Overall Timing[  2/  1]	epoch_time 0.0481 (0.0552)	validation_time 0.0004 (0.0026)	train_time 0.0476 (0.0516)
record: (train_acc, test_acc) (0.851700025677681, 0.13500000536441803)
last accs (train_acc, test_acc) (0.851700025677681, 0.13500000536441803)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:00, 23.74it/s] 23%|##3       | 6/26 [00:00<00:01, 19.60it/s] 38%|###8      | 10/26 [00:00<00:00, 25.34it/s] 54%|#####3    | 14/26 [00:00<00:00, 27.98it/s] 69%|######9   | 18/26 [00:00<00:00, 30.10it/s] 85%|########4 | 22/26 [00:00<00:00, 31.76it/s]100%|##########| 26/26 [00:00<00:00, 32.83it/s]100%|##########| 26/26 [00:00<00:00, 27.93it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 78 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 79 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 80 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 81 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 82 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 83 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 84 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 85 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 86 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 87 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 88 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 89 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 90 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 91 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 92 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 93 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 94 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 95 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 96 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 97 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 98 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 99 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 100 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 101 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 102 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 103 400
penalty weights 0.0
Epoch: [3][  26/  26]	Loss 0.350 (0.358)	train_nll   0.35 (  0.36)	train_penalty   0.03 (  0.03)	weight_norm  22.24 ( 22.19)	train_acc   0.86 (  0.85)	train_minacc   0.12 (  0.14)	train_majacc   0.97 (  0.98)	train_corr   0.00 (  0.00)	l1 6.7764 (6.8664)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 14.17it/s] 35%|###4      | 9/26 [00:00<00:00, 38.89it/s]                                               35%|###4      | 9/26 [00:00<00:00, 38.89it/s] 54%|#####3    | 14/26 [00:00<00:00, 42.60it/s] 73%|#######3  | 19/26 [00:00<00:00, 41.77it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 41.77it/s] 92%|#########2| 24/26 [00:00<00:00, 43.61it/s]100%|##########| 26/26 [00:00<00:00, 37.89it/s]
Test: [   0/  26]	Loss 0.281 (0.281)	test_acc   0.89 (  0.89)	test_minacc   0.19 (  0.19)	test_majacc   0.98 (  0.98)	Loss_d 0.281 (0.281)	test_acc_d   0.89 (  0.89)	test_minacc_d   0.19 (  0.19)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.92 (  0.92)
Test: [  10/  26]	Loss 0.323 (0.327)	test_acc   0.87 (  0.87)	test_minacc   0.30 (  0.25)	test_majacc   0.98 (  0.97)	Loss_d 0.323 (0.327)	test_acc_d   0.87 (  0.87)	test_minacc_d   0.30 (  0.25)	test_majacc_d   0.98 (  0.97)	test_corr_d   0.90 (  0.90)
Test: [  20/  26]	Loss 0.376 (0.334)	test_acc   0.83 (  0.86)	test_minacc   0.16 (  0.24)	test_majacc   0.97 (  0.97)	Loss_d 0.376 (0.334)	test_acc_d   0.83 (  0.86)	test_minacc_d   0.16 (  0.24)	test_majacc_d   0.97 (  0.97)	test_corr_d   0.90 (  0.90)
Test: [  26/  26]	Loss 0.332 (0.332)	test_acc   0.85 (  0.86)	test_minacc   0.09 (  0.24)	test_majacc   0.96 (  0.97)	Loss_d 0.332 (0.332)	test_acc_d   0.85 (  0.86)	test_minacc_d   0.09 (  0.24)	test_majacc_d   0.96 (  0.97)	test_corr_d   0.91 (  0.90)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.21it/s]
Test: [  0/  1]	Loss 1.514 (1.514)	test_acc   0.27 (  0.27)	test_minacc   0.20 (  0.20)	test_majacc   0.97 (  0.97)	Loss_d 1.514 (1.514)	test_acc_d   0.27 (  0.27)	test_minacc_d   0.20 (  0.20)	test_majacc_d   0.97 (  0.97)	test_corr_d   0.74 (  0.74)
Test: [  1/  1]	Loss 1.514 (1.514)	test_acc   0.27 (  0.27)	test_minacc   0.20 (  0.20)	test_majacc   0.97 (  0.97)	Loss_d 1.514 (1.514)	test_acc_d   0.27 (  0.27)	test_minacc_d   0.20 (  0.20)	test_majacc_d   0.97 (  0.97)	test_corr_d   0.74 (  0.74)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/155/checkpoints/model_best.pth
Overall Timing[  3/  1]	epoch_time 0.0403 (0.0515)	validation_time 0.0004 (0.0020)	train_time 0.0399 (0.0486)
record: (train_acc, test_acc) (0.8598000246882439, 0.27400001883506775)
last accs (train_acc, test_acc) (0.8598000246882439, 0.27400001883506775)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.53it/s] 12%|#1        | 3/26 [00:00<00:01, 12.98it/s] 23%|##3       | 6/26 [00:00<00:01, 19.86it/s] 38%|###8      | 10/26 [00:00<00:00, 25.03it/s] 54%|#####3    | 14/26 [00:00<00:00, 27.53it/s] 69%|######9   | 18/26 [00:00<00:00, 30.15it/s] 85%|########4 | 22/26 [00:00<00:00, 31.93it/s]100%|##########| 26/26 [00:00<00:00, 32.15it/s]100%|##########| 26/26 [00:01<00:00, 25.94it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 104 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 105 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 106 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 107 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 108 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 109 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 110 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 111 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 112 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 113 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 114 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 115 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 116 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 117 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 118 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 119 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 120 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 121 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 122 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 123 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 124 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 125 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 126 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 127 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 128 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 129 400
penalty weights 0.0
Epoch: [4][  26/  26]	Loss 0.325 (0.332)	train_nll   0.33 (  0.33)	train_penalty   0.02 (  0.02)	weight_norm  22.34 ( 22.29)	train_acc   0.86 (  0.86)	train_minacc   0.16 (  0.24)	train_majacc   0.96 (  0.97)	train_corr   0.00 (  0.00)	l1 6.7251 (6.9393)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:05,  4.82it/s] 27%|##6       | 7/26 [00:00<00:00, 26.88it/s]                                               27%|##6       | 7/26 [00:00<00:00, 26.88it/s] 46%|####6     | 12/26 [00:00<00:00, 34.04it/s] 65%|######5   | 17/26 [00:00<00:00, 38.27it/s]                                                65%|######5   | 17/26 [00:00<00:00, 38.27it/s] 85%|########4 | 22/26 [00:00<00:00, 40.61it/s]100%|##########| 26/26 [00:00<00:00, 32.99it/s]
Test: [   0/  26]	Loss 0.273 (0.273)	test_acc   0.89 (  0.89)	test_minacc   0.30 (  0.30)	test_majacc   0.98 (  0.98)	Loss_d 0.273 (0.273)	test_acc_d   0.89 (  0.89)	test_minacc_d   0.30 (  0.30)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.91 (  0.91)
Test: [  10/  26]	Loss 0.318 (0.321)	test_acc   0.87 (  0.86)	test_minacc   0.33 (  0.30)	test_majacc   0.97 (  0.96)	Loss_d 0.318 (0.321)	test_acc_d   0.87 (  0.86)	test_minacc_d   0.33 (  0.30)	test_majacc_d   0.97 (  0.96)	test_corr_d   0.90 (  0.89)
Test: [  20/  26]	Loss 0.356 (0.323)	test_acc   0.84 (  0.86)	test_minacc   0.26 (  0.29)	test_majacc   0.96 (  0.96)	Loss_d 0.356 (0.323)	test_acc_d   0.84 (  0.86)	test_minacc_d   0.26 (  0.29)	test_majacc_d   0.96 (  0.96)	test_corr_d   0.89 (  0.89)
Test: [  26/  26]	Loss 0.311 (0.321)	test_acc   0.88 (  0.86)	test_minacc   0.25 (  0.29)	test_majacc   0.97 (  0.96)	Loss_d 0.311 (0.321)	test_acc_d   0.88 (  0.86)	test_minacc_d   0.25 (  0.29)	test_majacc_d   0.97 (  0.96)	test_corr_d   0.91 (  0.89)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 64.25it/s]
Test: [  0/  1]	Loss 1.512 (1.512)	test_acc   0.32 (  0.32)	test_minacc   0.25 (  0.25)	test_majacc   0.97 (  0.97)	Loss_d 1.512 (1.512)	test_acc_d   0.32 (  0.32)	test_minacc_d   0.25 (  0.25)	test_majacc_d   0.97 (  0.97)	test_corr_d   0.68 (  0.68)
Test: [  1/  1]	Loss 1.512 (1.512)	test_acc   0.32 (  0.32)	test_minacc   0.25 (  0.25)	test_majacc   0.97 (  0.97)	Loss_d 1.512 (1.512)	test_acc_d   0.32 (  0.32)	test_minacc_d   0.25 (  0.25)	test_majacc_d   0.97 (  0.97)	test_corr_d   0.68 (  0.68)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/155/checkpoints/model_best.pth
Overall Timing[  4/  1]	epoch_time 0.0408 (0.0493)	validation_time 0.0003 (0.0017)	train_time 0.0405 (0.0470)
record: (train_acc, test_acc) (0.8617000231742858, 0.32100000977516174)
last accs (train_acc, test_acc) (0.8617000231742858, 0.32100000977516174)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.16it/s] 19%|#9        | 5/26 [00:00<00:00, 23.71it/s] 35%|###4      | 9/26 [00:00<00:00, 28.64it/s] 50%|#####     | 13/26 [00:00<00:00, 31.34it/s] 65%|######5   | 17/26 [00:00<00:00, 32.73it/s] 81%|########  | 21/26 [00:00<00:00, 33.68it/s] 96%|#########6| 25/26 [00:00<00:00, 34.40it/s]100%|##########| 26/26 [00:00<00:00, 29.36it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 130 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 131 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 132 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 133 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 134 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 135 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 136 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 137 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 138 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 139 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 140 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 141 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 142 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 143 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 144 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 145 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 146 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 147 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 148 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 149 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 150 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 151 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 152 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 153 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 154 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 155 400
penalty weights 0.0
Epoch: [5][  26/  26]	Loss 0.309 (0.313)	train_nll   0.31 (  0.31)	train_penalty   0.01 (  0.02)	weight_norm  22.45 ( 22.39)	train_acc   0.86 (  0.86)	train_minacc   0.28 (  0.31)	train_majacc   0.94 (  0.96)	train_corr   0.00 (  0.00)	l1 6.9371 (7.0407)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.57it/s] 15%|#5        | 4/26 [00:00<00:02, 10.61it/s] 38%|###8      | 10/26 [00:00<00:00, 24.43it/s]                                                38%|###8      | 10/26 [00:00<00:00, 24.43it/s] 62%|######1   | 16/26 [00:00<00:00, 31.69it/s]                                                62%|######1   | 16/26 [00:00<00:00, 31.69it/s] 81%|########  | 21/26 [00:00<00:00, 36.61it/s]100%|##########| 26/26 [00:00<00:00, 39.89it/s]100%|##########| 26/26 [00:00<00:00, 29.33it/s]
Test: [   0/  26]	Loss 0.264 (0.264)	test_acc   0.89 (  0.89)	test_minacc   0.36 (  0.36)	test_majacc   0.96 (  0.96)	Loss_d 0.264 (0.264)	test_acc_d   0.89 (  0.89)	test_minacc_d   0.36 (  0.36)	test_majacc_d   0.96 (  0.96)	test_corr_d   0.90 (  0.90)
Test: [  10/  26]	Loss 0.272 (0.291)	test_acc   0.88 (  0.88)	test_minacc   0.45 (  0.44)	test_majacc   0.96 (  0.95)	Loss_d 0.272 (0.291)	test_acc_d   0.88 (  0.88)	test_minacc_d   0.45 (  0.44)	test_majacc_d   0.96 (  0.95)	test_corr_d   0.87 (  0.86)
Test: [  20/  26]	Loss 0.318 (0.290)	test_acc   0.88 (  0.88)	test_minacc   0.44 (  0.45)	test_majacc   0.97 (  0.95)	Loss_d 0.318 (0.290)	test_acc_d   0.88 (  0.88)	test_minacc_d   0.44 (  0.45)	test_majacc_d   0.97 (  0.95)	test_corr_d   0.86 (  0.86)
Test: [  26/  26]	Loss 0.279 (0.287)	test_acc   0.88 (  0.88)	test_minacc   0.38 (  0.45)	test_majacc   0.96 (  0.96)	Loss_d 0.279 (0.287)	test_acc_d   0.88 (  0.88)	test_minacc_d   0.38 (  0.45)	test_majacc_d   0.96 (  0.96)	test_corr_d   0.88 (  0.86)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.70it/s]
Test: [  0/  1]	Loss 1.493 (1.493)	test_acc   0.42 (  0.42)	test_minacc   0.35 (  0.35)	test_majacc   0.96 (  0.96)	Loss_d 1.493 (1.493)	test_acc_d   0.42 (  0.42)	test_minacc_d   0.35 (  0.35)	test_majacc_d   0.96 (  0.96)	test_corr_d   0.53 (  0.53)
Test: [  1/  1]	Loss 1.493 (1.493)	test_acc   0.42 (  0.42)	test_minacc   0.35 (  0.35)	test_majacc   0.96 (  0.96)	Loss_d 1.493 (1.493)	test_acc_d   0.42 (  0.42)	test_minacc_d   0.35 (  0.35)	test_majacc_d   0.96 (  0.96)	test_corr_d   0.53 (  0.53)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/155/checkpoints/model_best.pth
Overall Timing[  5/  1]	epoch_time 0.0412 (0.0480)	validation_time 0.0004 (0.0015)	train_time 0.0407 (0.0460)
record: (train_acc, test_acc) (0.8793000248670578, 0.4150000214576721)
last accs (train_acc, test_acc) (0.8793000248670578, 0.4150000214576721)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.80it/s] 15%|#5        | 4/26 [00:00<00:01, 17.84it/s] 31%|###       | 8/26 [00:00<00:00, 24.76it/s] 46%|####6     | 12/26 [00:00<00:00, 27.87it/s] 62%|######1   | 16/26 [00:00<00:00, 30.20it/s] 81%|########  | 21/26 [00:00<00:00, 33.60it/s] 96%|#########6| 25/26 [00:00<00:00, 34.49it/s]100%|##########| 26/26 [00:00<00:00, 27.94it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 156 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 157 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 158 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 159 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 160 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 161 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 162 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 163 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 164 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 165 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 166 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 167 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 168 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 169 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 170 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 171 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 172 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 173 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 174 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 175 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 176 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 177 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 178 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 179 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 180 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 181 400
penalty weights 0.0
Epoch: [6][  26/  26]	Loss 0.283 (0.299)	train_nll   0.28 (  0.30)	train_penalty   0.02 (  0.02)	weight_norm  22.59 ( 22.52)	train_acc   0.88 (  0.87)	train_minacc   0.31 (  0.38)	train_majacc   0.96 (  0.96)	train_corr   0.00 (  0.00)	l1 7.1640 (7.2208)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.76it/s] 12%|#1        | 3/26 [00:00<00:01, 12.81it/s] 31%|###       | 8/26 [00:00<00:00, 26.71it/s]                                               31%|###       | 8/26 [00:00<00:00, 26.71it/s] 50%|#####     | 13/26 [00:00<00:00, 34.78it/s] 69%|######9   | 18/26 [00:00<00:00, 39.24it/s]                                                69%|######9   | 18/26 [00:00<00:00, 39.24it/s] 88%|########8 | 23/26 [00:00<00:00, 42.20it/s]100%|##########| 26/26 [00:00<00:00, 32.03it/s]
Test: [   0/  26]	Loss 0.254 (0.254)	test_acc   0.88 (  0.88)	test_minacc   0.26 (  0.26)	test_majacc   0.97 (  0.97)	Loss_d 0.254 (0.254)	test_acc_d   0.88 (  0.88)	test_minacc_d   0.26 (  0.26)	test_majacc_d   0.97 (  0.97)	test_corr_d   0.92 (  0.92)
Test: [  10/  26]	Loss 0.291 (0.295)	test_acc   0.88 (  0.88)	test_minacc   0.38 (  0.38)	test_majacc   0.98 (  0.96)	Loss_d 0.291 (0.295)	test_acc_d   0.88 (  0.88)	test_minacc_d   0.38 (  0.38)	test_majacc_d   0.98 (  0.96)	test_corr_d   0.89 (  0.89)
Test: [  20/  26]	Loss 0.335 (0.292)	test_acc   0.86 (  0.88)	test_minacc   0.34 (  0.38)	test_majacc   0.97 (  0.97)	Loss_d 0.335 (0.292)	test_acc_d   0.86 (  0.88)	test_minacc_d   0.34 (  0.38)	test_majacc_d   0.97 (  0.97)	test_corr_d   0.88 (  0.89)
Test: [  26/  26]	Loss 0.261 (0.288)	test_acc   0.90 (  0.88)	test_minacc   0.41 (  0.38)	test_majacc   0.97 (  0.97)	Loss_d 0.261 (0.288)	test_acc_d   0.90 (  0.88)	test_minacc_d   0.41 (  0.38)	test_majacc_d   0.97 (  0.97)	test_corr_d   0.91 (  0.89)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 60.97it/s]
Test: [  0/  1]	Loss 1.739 (1.739)	test_acc   0.34 (  0.34)	test_minacc   0.27 (  0.27)	test_majacc   0.96 (  0.96)	Loss_d 1.739 (1.739)	test_acc_d   0.34 (  0.34)	test_minacc_d   0.27 (  0.27)	test_majacc_d   0.96 (  0.96)	test_corr_d   0.65 (  0.65)
Test: [  1/  1]	Loss 1.739 (1.739)	test_acc   0.34 (  0.34)	test_minacc   0.27 (  0.27)	test_majacc   0.96 (  0.96)	Loss_d 1.739 (1.739)	test_acc_d   0.34 (  0.34)	test_minacc_d   0.27 (  0.27)	test_majacc_d   0.96 (  0.96)	test_corr_d   0.65 (  0.65)
Overall Timing[  6/  1]	epoch_time 0.0402 (0.0469)	validation_time 0.0004 (0.0013)	train_time 0.0397 (0.0451)
record: (train_acc, test_acc) (0.8793000248670578, 0.4150000214576721)
last accs (train_acc, test_acc) (0.8779000219702721, 0.3360000252723694)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:01, 22.68it/s] 27%|##6       | 7/26 [00:00<00:00, 30.91it/s] 42%|####2     | 11/26 [00:00<00:00, 33.69it/s] 58%|#####7    | 15/26 [00:00<00:00, 34.20it/s] 73%|#######3  | 19/26 [00:00<00:00, 35.26it/s] 88%|########8 | 23/26 [00:00<00:00, 36.41it/s]100%|##########| 26/26 [00:00<00:00, 32.08it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 182 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 183 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 184 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 185 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 186 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 187 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 188 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 189 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 190 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 191 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 192 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 193 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 194 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 195 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 196 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 197 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 198 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 199 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 200 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 201 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 202 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 203 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 204 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 205 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 206 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 207 400
penalty weights 0.0
Epoch: [7][  26/  26]	Loss 0.271 (0.292)	train_nll   0.27 (  0.29)	train_penalty   0.01 (  0.02)	weight_norm  22.75 ( 22.67)	train_acc   0.90 (  0.87)	train_minacc   0.41 (  0.41)	train_majacc   0.97 (  0.95)	train_corr   0.00 (  0.00)	l1 7.1298 (7.2709)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.52it/s] 23%|##3       | 6/26 [00:00<00:00, 29.51it/s]                                               23%|##3       | 6/26 [00:00<00:00, 29.51it/s] 42%|####2     | 11/26 [00:00<00:00, 37.47it/s] 62%|######1   | 16/26 [00:00<00:00, 40.81it/s]                                                62%|######1   | 16/26 [00:00<00:00, 40.81it/s] 81%|########  | 21/26 [00:00<00:00, 39.53it/s]100%|##########| 26/26 [00:00<00:00, 42.38it/s]100%|##########| 26/26 [00:00<00:00, 34.85it/s]
Test: [   0/  26]	Loss 0.247 (0.247)	test_acc   0.89 (  0.89)	test_minacc   0.32 (  0.32)	test_majacc   0.97 (  0.97)	Loss_d 0.247 (0.247)	test_acc_d   0.89 (  0.89)	test_minacc_d   0.32 (  0.32)	test_majacc_d   0.97 (  0.97)	test_corr_d   0.90 (  0.90)
Test: [  10/  26]	Loss 0.269 (0.276)	test_acc   0.89 (  0.88)	test_minacc   0.43 (  0.41)	test_majacc   0.97 (  0.96)	Loss_d 0.269 (0.276)	test_acc_d   0.89 (  0.88)	test_minacc_d   0.43 (  0.41)	test_majacc_d   0.97 (  0.96)	test_corr_d   0.89 (  0.88)
Test: [  20/  26]	Loss 0.305 (0.273)	test_acc   0.88 (  0.88)	test_minacc   0.44 (  0.42)	test_majacc   0.97 (  0.96)	Loss_d 0.305 (0.273)	test_acc_d   0.88 (  0.88)	test_minacc_d   0.44 (  0.42)	test_majacc_d   0.97 (  0.96)	test_corr_d   0.87 (  0.87)
Test: [  26/  26]	Loss 0.250 (0.270)	test_acc   0.89 (  0.88)	test_minacc   0.34 (  0.42)	test_majacc   0.97 (  0.96)	Loss_d 0.250 (0.270)	test_acc_d   0.89 (  0.88)	test_minacc_d   0.34 (  0.42)	test_majacc_d   0.97 (  0.96)	test_corr_d   0.90 (  0.87)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 60.76it/s]
Test: [  0/  1]	Loss 1.687 (1.687)	test_acc   0.36 (  0.36)	test_minacc   0.29 (  0.29)	test_majacc   0.96 (  0.96)	Loss_d 1.687 (1.687)	test_acc_d   0.36 (  0.36)	test_minacc_d   0.29 (  0.29)	test_majacc_d   0.96 (  0.96)	test_corr_d   0.63 (  0.63)
Test: [  1/  1]	Loss 1.687 (1.687)	test_acc   0.36 (  0.36)	test_minacc   0.29 (  0.29)	test_majacc   0.96 (  0.96)	Loss_d 1.687 (1.687)	test_acc_d   0.36 (  0.36)	test_minacc_d   0.29 (  0.29)	test_majacc_d   0.96 (  0.96)	test_corr_d   0.63 (  0.63)
Overall Timing[  7/  1]	epoch_time 0.0401 (0.0460)	validation_time 0.0004 (0.0012)	train_time 0.0397 (0.0444)
record: (train_acc, test_acc) (0.8793000248670578, 0.4150000214576721)
last accs (train_acc, test_acc) (0.8829000213742256, 0.35600000619888306)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.09it/s] 19%|#9        | 5/26 [00:00<00:00, 22.99it/s] 35%|###4      | 9/26 [00:00<00:00, 27.98it/s] 50%|#####     | 13/26 [00:00<00:00, 30.85it/s] 65%|######5   | 17/26 [00:00<00:00, 32.64it/s] 81%|########  | 21/26 [00:00<00:00, 33.28it/s] 96%|#########6| 25/26 [00:00<00:00, 33.82it/s]100%|##########| 26/26 [00:00<00:00, 28.95it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 208 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 209 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 210 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 211 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 212 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 213 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 214 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 215 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 216 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 217 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 218 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 219 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 220 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 221 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 222 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 223 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 224 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 225 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 226 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 227 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 228 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 229 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 230 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 231 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 232 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 233 400
penalty weights 0.0
Epoch: [8][  26/  26]	Loss 0.249 (0.271)	train_nll   0.25 (  0.27)	train_penalty   0.01 (  0.01)	weight_norm  22.95 ( 22.86)	train_acc   0.90 (  0.89)	train_minacc   0.50 (  0.50)	train_majacc   0.96 (  0.95)	train_corr   0.00 (  0.00)	l1 7.4143 (7.3891)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.22it/s] 15%|#5        | 4/26 [00:00<00:01, 11.36it/s] 35%|###4      | 9/26 [00:00<00:00, 22.54it/s]                                               35%|###4      | 9/26 [00:00<00:00, 22.54it/s] 54%|#####3    | 14/26 [00:00<00:00, 30.21it/s] 73%|#######3  | 19/26 [00:00<00:00, 35.36it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 35.36it/s] 92%|#########2| 24/26 [00:00<00:00, 36.61it/s]100%|##########| 26/26 [00:00<00:00, 29.10it/s]
Test: [   0/  26]	Loss 0.230 (0.230)	test_acc   0.90 (  0.90)	test_minacc   0.62 (  0.62)	test_majacc   0.94 (  0.94)	Loss_d 0.230 (0.230)	test_acc_d   0.90 (  0.90)	test_minacc_d   0.62 (  0.62)	test_majacc_d   0.94 (  0.94)	test_corr_d   0.84 (  0.84)
Test: [  10/  26]	Loss 0.279 (0.275)	test_acc   0.89 (  0.88)	test_minacc   0.52 (  0.57)	test_majacc   0.96 (  0.93)	Loss_d 0.279 (0.275)	test_acc_d   0.89 (  0.88)	test_minacc_d   0.52 (  0.57)	test_majacc_d   0.96 (  0.93)	test_corr_d   0.85 (  0.82)
Test: [  20/  26]	Loss 0.298 (0.270)	test_acc   0.89 (  0.88)	test_minacc   0.68 (  0.60)	test_majacc   0.93 (  0.94)	Loss_d 0.298 (0.270)	test_acc_d   0.89 (  0.88)	test_minacc_d   0.68 (  0.60)	test_majacc_d   0.93 (  0.94)	test_corr_d   0.78 (  0.81)
Test: [  26/  26]	Loss 0.217 (0.265)	test_acc   0.92 (  0.89)	test_minacc   0.66 (  0.61)	test_majacc   0.95 (  0.94)	Loss_d 0.217 (0.265)	test_acc_d   0.92 (  0.89)	test_minacc_d   0.66 (  0.61)	test_majacc_d   0.95 (  0.94)	test_corr_d   0.85 (  0.81)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.39it/s]
Test: [  0/  1]	Loss 1.774 (1.774)	test_acc   0.46 (  0.46)	test_minacc   0.41 (  0.41)	test_majacc   0.92 (  0.92)	Loss_d 1.774 (1.774)	test_acc_d   0.46 (  0.46)	test_minacc_d   0.41 (  0.41)	test_majacc_d   0.92 (  0.92)	test_corr_d   0.40 (  0.40)
Test: [  1/  1]	Loss 1.774 (1.774)	test_acc   0.46 (  0.46)	test_minacc   0.41 (  0.41)	test_majacc   0.92 (  0.92)	Loss_d 1.774 (1.774)	test_acc_d   0.46 (  0.46)	test_minacc_d   0.41 (  0.41)	test_majacc_d   0.92 (  0.92)	test_corr_d   0.40 (  0.40)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/155/checkpoints/model_best.pth
Overall Timing[  8/  1]	epoch_time 0.0492 (0.0464)	validation_time 0.0004 (0.0011)	train_time 0.0488 (0.0449)
record: (train_acc, test_acc) (0.887900026857853, 0.46000000834465027)
last accs (train_acc, test_acc) (0.887900026857853, 0.46000000834465027)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 15.09it/s] 19%|#9        | 5/26 [00:00<00:01, 20.69it/s] 35%|###4      | 9/26 [00:00<00:00, 26.98it/s] 50%|#####     | 13/26 [00:00<00:00, 30.21it/s] 65%|######5   | 17/26 [00:00<00:00, 31.13it/s] 81%|########  | 21/26 [00:00<00:00, 32.47it/s] 96%|#########6| 25/26 [00:00<00:00, 33.79it/s]100%|##########| 26/26 [00:00<00:00, 28.70it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 234 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 235 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 236 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 237 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 238 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 239 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 240 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 241 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 242 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 243 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 244 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 245 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 246 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 247 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 248 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 249 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 250 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 251 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 252 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 253 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 254 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 255 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 256 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 257 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 258 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 259 400
penalty weights 0.0
Epoch: [9][  26/  26]	Loss 0.229 (0.256)	train_nll   0.23 (  0.26)	train_penalty   0.01 (  0.01)	weight_norm  23.18 ( 23.06)	train_acc   0.89 (  0.89)	train_minacc   0.34 (  0.55)	train_majacc   0.97 (  0.95)	train_corr   0.00 (  0.00)	l1 7.5050 (7.4860)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.51it/s] 23%|##3       | 6/26 [00:00<00:00, 27.31it/s]                                               23%|##3       | 6/26 [00:00<00:00, 27.31it/s] 42%|####2     | 11/26 [00:00<00:00, 35.26it/s] 62%|######1   | 16/26 [00:00<00:00, 39.15it/s]                                                62%|######1   | 16/26 [00:00<00:00, 39.15it/s] 81%|########  | 21/26 [00:00<00:00, 40.38it/s]100%|##########| 26/26 [00:00<00:00, 42.96it/s]100%|##########| 26/26 [00:00<00:00, 34.85it/s]
Test: [   0/  26]	Loss 0.273 (0.273)	test_acc   0.88 (  0.88)	test_minacc   0.51 (  0.51)	test_majacc   0.93 (  0.93)	Loss_d 0.273 (0.273)	test_acc_d   0.88 (  0.88)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.93 (  0.93)	test_corr_d   0.84 (  0.84)
Test: [  10/  26]	Loss 0.276 (0.288)	test_acc   0.90 (  0.88)	test_minacc   0.55 (  0.55)	test_majacc   0.96 (  0.93)	Loss_d 0.276 (0.288)	test_acc_d   0.90 (  0.88)	test_minacc_d   0.55 (  0.55)	test_majacc_d   0.96 (  0.93)	test_corr_d   0.84 (  0.81)
Test: [  20/  26]	Loss 0.254 (0.277)	test_acc   0.90 (  0.88)	test_minacc   0.65 (  0.57)	test_majacc   0.95 (  0.94)	Loss_d 0.254 (0.277)	test_acc_d   0.90 (  0.88)	test_minacc_d   0.65 (  0.57)	test_majacc_d   0.95 (  0.94)	test_corr_d   0.78 (  0.81)
Test: [  26/  26]	Loss 0.177 (0.266)	test_acc   0.92 (  0.89)	test_minacc   0.56 (  0.59)	test_majacc   0.98 (  0.94)	Loss_d 0.177 (0.266)	test_acc_d   0.92 (  0.89)	test_minacc_d   0.56 (  0.59)	test_majacc_d   0.98 (  0.94)	test_corr_d   0.86 (  0.81)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.13it/s]
Test: [  0/  1]	Loss 1.910 (1.910)	test_acc   0.43 (  0.43)	test_minacc   0.38 (  0.38)	test_majacc   0.88 (  0.88)	Loss_d 1.910 (1.910)	test_acc_d   0.43 (  0.43)	test_minacc_d   0.38 (  0.38)	test_majacc_d   0.88 (  0.88)	test_corr_d   0.45 (  0.45)
Test: [  1/  1]	Loss 1.910 (1.910)	test_acc   0.43 (  0.43)	test_minacc   0.38 (  0.38)	test_majacc   0.88 (  0.88)	Loss_d 1.910 (1.910)	test_acc_d   0.43 (  0.43)	test_minacc_d   0.38 (  0.38)	test_majacc_d   0.88 (  0.88)	test_corr_d   0.45 (  0.45)
Overall Timing[  9/  1]	epoch_time 0.0425 (0.0460)	validation_time 0.0005 (0.0011)	train_time 0.0420 (0.0446)
record: (train_acc, test_acc) (0.887900026857853, 0.46000000834465027)
last accs (train_acc, test_acc) (0.888400017619133, 0.4310000240802765)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:00, 24.61it/s] 27%|##6       | 7/26 [00:00<00:00, 28.45it/s] 42%|####2     | 11/26 [00:00<00:00, 30.06it/s] 58%|#####7    | 15/26 [00:00<00:00, 31.51it/s] 73%|#######3  | 19/26 [00:00<00:00, 31.97it/s] 88%|########8 | 23/26 [00:00<00:00, 32.47it/s]100%|##########| 26/26 [00:00<00:00, 29.67it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 260 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 261 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 262 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 263 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 264 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 265 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 266 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 267 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 268 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 269 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 270 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 271 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 272 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 273 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 274 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 275 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 276 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 277 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 278 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 279 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 280 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 281 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 282 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 283 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 284 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 285 400
penalty weights 0.0
Epoch: [10][  26/  26]	Loss 0.131 (0.242)	train_nll   0.13 (  0.24)	train_penalty   0.00 (  0.01)	weight_norm  23.46 ( 23.33)	train_acc   0.95 (  0.90)	train_minacc   0.75 (  0.59)	train_majacc   0.98 (  0.95)	train_corr   0.00 (  0.00)	l1 7.5660 (7.5055)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.26it/s] 19%|#9        | 5/26 [00:00<00:00, 24.70it/s]                                               19%|#9        | 5/26 [00:00<00:00, 24.70it/s] 42%|####2     | 11/26 [00:00<00:00, 37.13it/s] 62%|######1   | 16/26 [00:00<00:00, 39.99it/s]                                                62%|######1   | 16/26 [00:00<00:00, 39.99it/s] 81%|########  | 21/26 [00:00<00:00, 40.74it/s]100%|##########| 26/26 [00:00<00:00, 35.75it/s]
Test: [   0/  26]	Loss 0.200 (0.200)	test_acc   0.92 (  0.92)	test_minacc   0.55 (  0.55)	test_majacc   0.97 (  0.97)	Loss_d 0.200 (0.200)	test_acc_d   0.92 (  0.92)	test_minacc_d   0.55 (  0.55)	test_majacc_d   0.97 (  0.97)	test_corr_d   0.86 (  0.86)
Test: [  10/  26]	Loss 0.217 (0.230)	test_acc   0.91 (  0.91)	test_minacc   0.67 (  0.62)	test_majacc   0.95 (  0.96)	Loss_d 0.217 (0.230)	test_acc_d   0.91 (  0.91)	test_minacc_d   0.67 (  0.62)	test_majacc_d   0.95 (  0.96)	test_corr_d   0.82 (  0.82)
Test: [  20/  26]	Loss 0.230 (0.220)	test_acc   0.91 (  0.91)	test_minacc   0.65 (  0.64)	test_majacc   0.97 (  0.96)	Loss_d 0.230 (0.220)	test_acc_d   0.91 (  0.91)	test_minacc_d   0.65 (  0.64)	test_majacc_d   0.97 (  0.96)	test_corr_d   0.79 (  0.82)
Test: [  26/  26]	Loss 0.098 (0.212)	test_acc   0.98 (  0.91)	test_minacc   0.94 (  0.65)	test_majacc   0.99 (  0.96)	Loss_d 0.098 (0.212)	test_acc_d   0.98 (  0.91)	test_minacc_d   0.94 (  0.65)	test_majacc_d   0.99 (  0.96)	test_corr_d   0.83 (  0.81)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.38it/s]
Test: [  0/  1]	Loss 2.215 (2.215)	test_acc   0.41 (  0.41)	test_minacc   0.36 (  0.36)	test_majacc   0.88 (  0.88)	Loss_d 2.215 (2.215)	test_acc_d   0.41 (  0.41)	test_minacc_d   0.36 (  0.36)	test_majacc_d   0.88 (  0.88)	test_corr_d   0.45 (  0.45)
Test: [  1/  1]	Loss 2.215 (2.215)	test_acc   0.41 (  0.41)	test_minacc   0.36 (  0.36)	test_majacc   0.88 (  0.88)	Loss_d 2.215 (2.215)	test_acc_d   0.41 (  0.41)	test_minacc_d   0.36 (  0.36)	test_majacc_d   0.88 (  0.88)	test_corr_d   0.45 (  0.45)
Overall Timing[ 10/  1]	epoch_time 0.0392 (0.0454)	validation_time 0.0004 (0.0010)	train_time 0.0388 (0.0441)
record: (train_acc, test_acc) (0.887900026857853, 0.46000000834465027)
last accs (train_acc, test_acc) (0.9147000218033791, 0.4100000262260437)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.79it/s] 19%|#9        | 5/26 [00:00<00:00, 21.60it/s] 35%|###4      | 9/26 [00:00<00:00, 26.94it/s] 50%|#####     | 13/26 [00:00<00:00, 31.36it/s] 65%|######5   | 17/26 [00:00<00:00, 33.76it/s] 81%|########  | 21/26 [00:00<00:00, 33.42it/s] 96%|#########6| 25/26 [00:00<00:00, 33.79it/s]100%|##########| 26/26 [00:00<00:00, 29.12it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 286 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 287 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 288 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 289 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 290 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 291 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 292 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 293 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 294 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 295 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 296 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 297 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 298 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 299 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 300 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 301 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 302 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 303 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 304 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 305 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 306 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 307 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 308 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 309 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 310 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 311 400
penalty weights 0.0
Epoch: [11][  26/  26]	Loss 0.134 (0.235)	train_nll   0.13 (  0.24)	train_penalty   0.00 (  0.01)	weight_norm  23.80 ( 23.63)	train_acc   0.95 (  0.90)	train_minacc   0.78 (  0.59)	train_majacc   0.98 (  0.96)	train_corr   0.00 (  0.00)	l1 7.7097 (7.4218)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.30it/s] 23%|##3       | 6/26 [00:00<00:00, 31.84it/s]                                               23%|##3       | 6/26 [00:00<00:00, 31.84it/s] 42%|####2     | 11/26 [00:00<00:00, 38.27it/s] 62%|######1   | 16/26 [00:00<00:00, 42.11it/s]                                                62%|######1   | 16/26 [00:00<00:00, 42.11it/s] 81%|########  | 21/26 [00:00<00:00, 39.84it/s]100%|##########| 26/26 [00:00<00:00, 42.44it/s]100%|##########| 26/26 [00:00<00:00, 35.98it/s]
Test: [   0/  26]	Loss 0.183 (0.183)	test_acc   0.93 (  0.93)	test_minacc   0.81 (  0.81)	test_majacc   0.94 (  0.94)	Loss_d 0.183 (0.183)	test_acc_d   0.93 (  0.93)	test_minacc_d   0.81 (  0.81)	test_majacc_d   0.94 (  0.94)	test_corr_d   0.78 (  0.78)
Test: [  10/  26]	Loss 0.191 (0.211)	test_acc   0.92 (  0.91)	test_minacc   0.73 (  0.73)	test_majacc   0.95 (  0.94)	Loss_d 0.191 (0.211)	test_acc_d   0.92 (  0.91)	test_minacc_d   0.73 (  0.73)	test_majacc_d   0.95 (  0.94)	test_corr_d   0.76 (  0.76)
Test: [  20/  26]	Loss 0.211 (0.205)	test_acc   0.92 (  0.91)	test_minacc   0.74 (  0.74)	test_majacc   0.95 (  0.95)	Loss_d 0.211 (0.205)	test_acc_d   0.92 (  0.91)	test_minacc_d   0.74 (  0.74)	test_majacc_d   0.95 (  0.95)	test_corr_d   0.74 (  0.76)
Test: [  26/  26]	Loss 0.076 (0.194)	test_acc   0.99 (  0.92)	test_minacc   0.97 (  0.76)	test_majacc   0.99 (  0.95)	Loss_d 0.076 (0.194)	test_acc_d   0.99 (  0.92)	test_minacc_d   0.97 (  0.76)	test_majacc_d   0.99 (  0.95)	test_corr_d   0.80 (  0.76)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.17it/s]
Test: [  0/  1]	Loss 2.153 (2.153)	test_acc   0.46 (  0.46)	test_minacc   0.41 (  0.41)	test_majacc   0.89 (  0.89)	Loss_d 2.153 (2.153)	test_acc_d   0.46 (  0.46)	test_minacc_d   0.41 (  0.41)	test_majacc_d   0.89 (  0.89)	test_corr_d   0.33 (  0.33)
Test: [  1/  1]	Loss 2.153 (2.153)	test_acc   0.46 (  0.46)	test_minacc   0.41 (  0.41)	test_majacc   0.89 (  0.89)	Loss_d 2.153 (2.153)	test_acc_d   0.46 (  0.46)	test_minacc_d   0.41 (  0.41)	test_majacc_d   0.89 (  0.89)	test_corr_d   0.33 (  0.33)
Overall Timing[ 11/  1]	epoch_time 0.0402 (0.0449)	validation_time 0.0003 (0.0009)	train_time 0.0399 (0.0437)
record: (train_acc, test_acc) (0.887900026857853, 0.46000000834465027)
last accs (train_acc, test_acc) (0.9205000195503235, 0.45900002121925354)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.47it/s] 15%|#5        | 4/26 [00:00<00:01, 18.53it/s] 31%|###       | 8/26 [00:00<00:00, 25.47it/s] 46%|####6     | 12/26 [00:00<00:00, 29.27it/s] 62%|######1   | 16/26 [00:00<00:00, 31.55it/s] 77%|#######6  | 20/26 [00:00<00:00, 32.88it/s] 92%|#########2| 24/26 [00:00<00:00, 33.54it/s]100%|##########| 26/26 [00:00<00:00, 28.32it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 312 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 313 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 314 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 315 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 316 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 317 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 318 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 319 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 320 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 321 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 322 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 323 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 324 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 325 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 326 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 327 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 328 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 329 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 330 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 331 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 332 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 333 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 334 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 335 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 336 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 337 400
penalty weights 0.0
Epoch: [12][  26/  26]	Loss 0.138 (0.223)	train_nll   0.14 (  0.22)	train_penalty   0.00 (  0.01)	weight_norm  24.18 ( 24.00)	train_acc   0.94 (  0.91)	train_minacc   0.88 (  0.64)	train_majacc   0.94 (  0.96)	train_corr   0.00 (  0.00)	l1 7.6317 (7.6580)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.63it/s] 23%|##3       | 6/26 [00:00<00:00, 25.30it/s]                                               23%|##3       | 6/26 [00:00<00:00, 25.30it/s] 42%|####2     | 11/26 [00:00<00:00, 33.75it/s] 62%|######1   | 16/26 [00:00<00:00, 38.90it/s]                                                62%|######1   | 16/26 [00:00<00:00, 38.90it/s] 81%|########  | 21/26 [00:00<00:00, 38.36it/s]100%|##########| 26/26 [00:00<00:00, 41.71it/s]100%|##########| 26/26 [00:00<00:00, 33.17it/s]
Test: [   0/  26]	Loss 0.152 (0.152)	test_acc   0.95 (  0.95)	test_minacc   0.77 (  0.77)	test_majacc   0.97 (  0.97)	Loss_d 0.152 (0.152)	test_acc_d   0.95 (  0.95)	test_minacc_d   0.77 (  0.77)	test_majacc_d   0.97 (  0.97)	test_corr_d   0.83 (  0.83)
Test: [  10/  26]	Loss 0.180 (0.170)	test_acc   0.93 (  0.94)	test_minacc   0.78 (  0.78)	test_majacc   0.95 (  0.96)	Loss_d 0.180 (0.170)	test_acc_d   0.93 (  0.94)	test_minacc_d   0.78 (  0.78)	test_majacc_d   0.95 (  0.96)	test_corr_d   0.76 (  0.77)
Test: [  20/  26]	Loss 0.166 (0.173)	test_acc   0.95 (  0.93)	test_minacc   0.84 (  0.78)	test_majacc   0.97 (  0.96)	Loss_d 0.166 (0.173)	test_acc_d   0.95 (  0.93)	test_minacc_d   0.84 (  0.78)	test_majacc_d   0.97 (  0.96)	test_corr_d   0.73 (  0.76)
Test: [  26/  26]	Loss 0.090 (0.165)	test_acc   0.97 (  0.94)	test_minacc   0.94 (  0.79)	test_majacc   0.98 (  0.96)	Loss_d 0.090 (0.165)	test_acc_d   0.97 (  0.94)	test_minacc_d   0.94 (  0.79)	test_majacc_d   0.98 (  0.96)	test_corr_d   0.79 (  0.76)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.40it/s]
Test: [  0/  1]	Loss 2.037 (2.037)	test_acc   0.46 (  0.46)	test_minacc   0.41 (  0.41)	test_majacc   0.94 (  0.94)	Loss_d 2.037 (2.037)	test_acc_d   0.46 (  0.46)	test_minacc_d   0.41 (  0.41)	test_majacc_d   0.94 (  0.94)	test_corr_d   0.34 (  0.34)
Test: [  1/  1]	Loss 2.037 (2.037)	test_acc   0.46 (  0.46)	test_minacc   0.41 (  0.41)	test_majacc   0.94 (  0.94)	Loss_d 2.037 (2.037)	test_acc_d   0.46 (  0.46)	test_minacc_d   0.41 (  0.41)	test_majacc_d   0.94 (  0.94)	test_corr_d   0.34 (  0.34)
Overall Timing[ 12/  1]	epoch_time 0.0404 (0.0446)	validation_time 0.0004 (0.0009)	train_time 0.0400 (0.0434)
record: (train_acc, test_acc) (0.887900026857853, 0.46000000834465027)
last accs (train_acc, test_acc) (0.9375000215172767, 0.45900002121925354)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.55it/s] 19%|#9        | 5/26 [00:00<00:01, 19.52it/s] 35%|###4      | 9/26 [00:00<00:00, 26.19it/s] 50%|#####     | 13/26 [00:00<00:00, 29.00it/s] 65%|######5   | 17/26 [00:00<00:00, 31.93it/s] 81%|########  | 21/26 [00:00<00:00, 33.02it/s] 96%|#########6| 25/26 [00:00<00:00, 33.35it/s]100%|##########| 26/26 [00:00<00:00, 27.63it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 338 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 339 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 340 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 341 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 342 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 343 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 344 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 345 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 346 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 347 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 348 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 349 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 350 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 351 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 352 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 353 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 354 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 355 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 356 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 357 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 358 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 359 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 360 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 361 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 362 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 363 400
penalty weights 0.0
Epoch: [13][  26/  26]	Loss 0.142 (0.206)	train_nll   0.14 (  0.21)	train_penalty   0.00 (  0.01)	weight_norm  24.55 ( 24.37)	train_acc   0.94 (  0.92)	train_minacc   0.84 (  0.67)	train_majacc   0.95 (  0.96)	train_corr   0.00 (  0.00)	l1 7.5653 (7.8346)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 17.84it/s] 27%|##6       | 7/26 [00:00<00:00, 33.78it/s]                                               27%|##6       | 7/26 [00:00<00:00, 33.78it/s] 46%|####6     | 12/26 [00:00<00:00, 39.39it/s] 65%|######5   | 17/26 [00:00<00:00, 40.85it/s]                                                65%|######5   | 17/26 [00:00<00:00, 40.85it/s] 85%|########4 | 22/26 [00:00<00:00, 40.86it/s]100%|##########| 26/26 [00:00<00:00, 36.94it/s]
Test: [   0/  26]	Loss 0.123 (0.123)	test_acc   0.97 (  0.97)	test_minacc   0.85 (  0.85)	test_majacc   0.98 (  0.98)	Loss_d 0.123 (0.123)	test_acc_d   0.97 (  0.97)	test_minacc_d   0.85 (  0.85)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.80 (  0.80)
Test: [  10/  26]	Loss 0.167 (0.151)	test_acc   0.93 (  0.94)	test_minacc   0.85 (  0.84)	test_majacc   0.95 (  0.96)	Loss_d 0.167 (0.151)	test_acc_d   0.93 (  0.94)	test_minacc_d   0.85 (  0.84)	test_majacc_d   0.95 (  0.96)	test_corr_d   0.73 (  0.75)
Test: [  20/  26]	Loss 0.167 (0.156)	test_acc   0.94 (  0.94)	test_minacc   0.81 (  0.82)	test_majacc   0.97 (  0.96)	Loss_d 0.167 (0.156)	test_acc_d   0.94 (  0.94)	test_minacc_d   0.81 (  0.82)	test_majacc_d   0.97 (  0.96)	test_corr_d   0.70 (  0.75)
Test: [  26/  26]	Loss 0.086 (0.149)	test_acc   0.97 (  0.94)	test_minacc   0.88 (  0.83)	test_majacc   0.99 (  0.96)	Loss_d 0.086 (0.149)	test_acc_d   0.97 (  0.94)	test_minacc_d   0.88 (  0.83)	test_majacc_d   0.99 (  0.96)	test_corr_d   0.79 (  0.75)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 60.81it/s]
Test: [  0/  1]	Loss 2.104 (2.104)	test_acc   0.48 (  0.48)	test_minacc   0.43 (  0.43)	test_majacc   0.94 (  0.94)	Loss_d 2.104 (2.104)	test_acc_d   0.48 (  0.48)	test_minacc_d   0.43 (  0.43)	test_majacc_d   0.94 (  0.94)	test_corr_d   0.30 (  0.30)
Test: [  1/  1]	Loss 2.104 (2.104)	test_acc   0.48 (  0.48)	test_minacc   0.43 (  0.43)	test_majacc   0.94 (  0.94)	Loss_d 2.104 (2.104)	test_acc_d   0.48 (  0.48)	test_minacc_d   0.43 (  0.43)	test_majacc_d   0.94 (  0.94)	test_corr_d   0.30 (  0.30)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/155/checkpoints/model_best.pth
Overall Timing[ 13/  1]	epoch_time 0.0409 (0.0443)	validation_time 0.0003 (0.0009)	train_time 0.0405 (0.0432)
record: (train_acc, test_acc) (0.9432000200152397, 0.48100003600120544)
last accs (train_acc, test_acc) (0.9432000200152397, 0.48100003600120544)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.12it/s] 19%|#9        | 5/26 [00:00<00:00, 22.12it/s] 35%|###4      | 9/26 [00:00<00:00, 28.01it/s] 50%|#####     | 13/26 [00:00<00:00, 30.93it/s] 65%|######5   | 17/26 [00:00<00:00, 32.82it/s] 81%|########  | 21/26 [00:00<00:00, 34.04it/s] 96%|#########6| 25/26 [00:00<00:00, 34.29it/s]100%|##########| 26/26 [00:00<00:00, 29.01it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 364 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 365 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 366 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 367 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 368 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 369 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 370 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 371 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 372 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 373 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 374 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 375 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 376 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 377 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 378 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 379 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 380 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 381 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 382 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 383 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 384 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 385 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 386 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 387 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 388 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 389 400
penalty weights 0.0
Epoch: [14][  26/  26]	Loss 0.148 (0.168)	train_nll   0.15 (  0.17)	train_penalty   0.01 (  0.01)	weight_norm  24.99 ( 24.76)	train_acc   0.94 (  0.94)	train_minacc   0.69 (  0.77)	train_majacc   0.98 (  0.96)	train_corr   0.00 (  0.00)	l1 7.2410 (8.8823)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.03it/s] 23%|##3       | 6/26 [00:00<00:00, 30.21it/s]                                               23%|##3       | 6/26 [00:00<00:00, 30.21it/s] 42%|####2     | 11/26 [00:00<00:00, 36.00it/s] 62%|######1   | 16/26 [00:00<00:00, 40.57it/s]                                                62%|######1   | 16/26 [00:00<00:00, 40.57it/s] 81%|########  | 21/26 [00:00<00:00, 39.79it/s]100%|##########| 26/26 [00:00<00:00, 35.60it/s]
Test: [   0/  26]	Loss 0.152 (0.152)	test_acc   0.93 (  0.93)	test_minacc   0.60 (  0.60)	test_majacc   0.98 (  0.98)	Loss_d 0.152 (0.152)	test_acc_d   0.93 (  0.93)	test_minacc_d   0.60 (  0.60)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.88 (  0.88)
Test: [  10/  26]	Loss 0.143 (0.154)	test_acc   0.95 (  0.94)	test_minacc   0.77 (  0.69)	test_majacc   0.98 (  0.98)	Loss_d 0.143 (0.154)	test_acc_d   0.95 (  0.94)	test_minacc_d   0.77 (  0.69)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.81 (  0.84)
Test: [  20/  26]	Loss 0.148 (0.156)	test_acc   0.96 (  0.94)	test_minacc   0.82 (  0.72)	test_majacc   0.99 (  0.98)	Loss_d 0.148 (0.156)	test_acc_d   0.96 (  0.94)	test_minacc_d   0.82 (  0.72)	test_majacc_d   0.99 (  0.98)	test_corr_d   0.79 (  0.83)
Test: [  26/  26]	Loss 0.110 (0.151)	test_acc   0.97 (  0.95)	test_minacc   0.84 (  0.73)	test_majacc   0.99 (  0.99)	Loss_d 0.110 (0.151)	test_acc_d   0.97 (  0.95)	test_minacc_d   0.84 (  0.73)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.85 (  0.83)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.59it/s]
Test: [  0/  1]	Loss 2.298 (2.298)	test_acc   0.37 (  0.37)	test_minacc   0.30 (  0.30)	test_majacc   0.94 (  0.94)	Loss_d 2.298 (2.298)	test_acc_d   0.37 (  0.37)	test_minacc_d   0.30 (  0.30)	test_majacc_d   0.94 (  0.94)	test_corr_d   0.57 (  0.57)
Test: [  1/  1]	Loss 2.298 (2.298)	test_acc   0.37 (  0.37)	test_minacc   0.30 (  0.30)	test_majacc   0.94 (  0.94)	Loss_d 2.298 (2.298)	test_acc_d   0.37 (  0.37)	test_minacc_d   0.30 (  0.30)	test_majacc_d   0.94 (  0.94)	test_corr_d   0.57 (  0.57)
Overall Timing[ 14/  1]	epoch_time 0.0411 (0.0441)	validation_time 0.0004 (0.0008)	train_time 0.0407 (0.0431)
record: (train_acc, test_acc) (0.9432000200152397, 0.48100003600120544)
last accs (train_acc, test_acc) (0.947100018620491, 0.36500000953674316)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:02, 10.14it/s] 23%|##3       | 6/26 [00:00<00:00, 21.29it/s] 38%|###8      | 10/26 [00:00<00:00, 26.76it/s] 54%|#####3    | 14/26 [00:00<00:00, 29.83it/s] 69%|######9   | 18/26 [00:00<00:00, 31.74it/s] 85%|########4 | 22/26 [00:00<00:00, 33.07it/s]100%|##########| 26/26 [00:00<00:00, 34.14it/s]100%|##########| 26/26 [00:00<00:00, 28.03it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 390 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 391 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 392 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 393 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 394 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 395 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 396 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 397 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 398 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 399 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 400 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 401 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 402 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 403 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 404 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 405 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 406 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 407 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 408 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 409 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 410 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 411 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 412 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 413 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 414 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 415 400
penalty weights 10000.0
Epoch: [15][  26/  26]	Loss 0.004 (0.062)	train_nll   0.21 (  0.19)	train_penalty   0.00 (  0.01)	weight_norm  25.35 ( 25.20)	train_acc   0.90 (  0.93)	train_minacc   0.91 (  0.79)	train_majacc   0.90 (  0.95)	train_corr   0.00 (  0.00)	l1 7.1598 (8.5754)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.71it/s] 15%|#5        | 4/26 [00:00<00:01, 15.34it/s] 35%|###4      | 9/26 [00:00<00:00, 27.38it/s]                                               35%|###4      | 9/26 [00:00<00:00, 27.38it/s] 54%|#####3    | 14/26 [00:00<00:00, 34.32it/s] 73%|#######3  | 19/26 [00:00<00:00, 38.22it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 38.22it/s] 92%|#########2| 24/26 [00:00<00:00, 38.04it/s]100%|##########| 26/26 [00:00<00:00, 31.17it/s]
Test: [   0/  26]	Loss 0.227 (0.227)	test_acc   0.91 (  0.91)	test_minacc   0.83 (  0.83)	test_majacc   0.92 (  0.92)	Loss_d 0.227 (0.227)	test_acc_d   0.91 (  0.91)	test_minacc_d   0.83 (  0.83)	test_majacc_d   0.92 (  0.92)	test_corr_d   0.73 (  0.73)
Test: [  10/  26]	Loss 0.275 (0.224)	test_acc   0.89 (  0.91)	test_minacc   0.82 (  0.85)	test_majacc   0.90 (  0.92)	Loss_d 0.275 (0.224)	test_acc_d   0.89 (  0.91)	test_minacc_d   0.82 (  0.85)	test_majacc_d   0.90 (  0.92)	test_corr_d   0.70 (  0.68)
Test: [  20/  26]	Loss 0.274 (0.243)	test_acc   0.88 (  0.89)	test_minacc   0.84 (  0.82)	test_majacc   0.89 (  0.91)	Loss_d 0.274 (0.243)	test_acc_d   0.88 (  0.89)	test_minacc_d   0.84 (  0.82)	test_majacc_d   0.89 (  0.91)	test_corr_d   0.62 (  0.67)
Test: [  26/  26]	Loss 0.233 (0.246)	test_acc   0.88 (  0.89)	test_minacc   0.88 (  0.82)	test_majacc   0.89 (  0.91)	Loss_d 0.233 (0.246)	test_acc_d   0.88 (  0.89)	test_minacc_d   0.88 (  0.82)	test_majacc_d   0.89 (  0.91)	test_corr_d   0.68 (  0.67)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.38it/s]
Test: [  0/  1]	Loss 1.607 (1.607)	test_acc   0.52 (  0.52)	test_minacc   0.48 (  0.48)	test_majacc   0.87 (  0.87)	Loss_d 1.607 (1.607)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.48 (  0.48)	test_majacc_d   0.87 (  0.87)	test_corr_d   0.22 (  0.22)
Test: [  1/  1]	Loss 1.607 (1.607)	test_acc   0.52 (  0.52)	test_minacc   0.48 (  0.48)	test_majacc   0.87 (  0.87)	Loss_d 1.607 (1.607)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.48 (  0.48)	test_majacc_d   0.87 (  0.87)	test_corr_d   0.22 (  0.22)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/155/checkpoints/model_best.pth
Overall Timing[ 15/  1]	epoch_time 0.0412 (0.0439)	validation_time 0.0004 (0.0008)	train_time 0.0408 (0.0429)
record: (train_acc, test_acc) (0.8920000229477882, 0.5170000195503235)
last accs (train_acc, test_acc) (0.8920000229477882, 0.5170000195503235)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:06,  3.93it/s] 19%|#9        | 5/26 [00:00<00:01, 16.05it/s] 35%|###4      | 9/26 [00:00<00:00, 23.72it/s] 50%|#####     | 13/26 [00:00<00:00, 28.78it/s] 69%|######9   | 18/26 [00:00<00:00, 32.81it/s] 85%|########4 | 22/26 [00:00<00:00, 34.53it/s]100%|##########| 26/26 [00:00<00:00, 34.71it/s]100%|##########| 26/26 [00:00<00:00, 26.76it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 416 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 417 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 418 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 419 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 420 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 421 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 422 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 423 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 424 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 425 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 426 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 427 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 428 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 429 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 430 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 431 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 432 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 433 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 434 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 435 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 436 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 437 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 438 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 439 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 440 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 441 400
penalty weights 10000.0
Epoch: [16][  26/  26]	Loss 0.002 (0.002)	train_nll   0.45 (  0.38)	train_penalty   0.00 (  0.00)	weight_norm  25.47 ( 25.43)	train_acc   0.77 (  0.81)	train_minacc   0.84 (  0.83)	train_majacc   0.76 (  0.80)	train_corr   0.00 (  0.00)	l1 5.3339 (5.8499)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:06,  3.57it/s] 23%|##3       | 6/26 [00:00<00:01, 19.03it/s]                                               23%|##3       | 6/26 [00:00<00:01, 19.03it/s] 42%|####2     | 11/26 [00:00<00:00, 28.00it/s] 62%|######1   | 16/26 [00:00<00:00, 34.01it/s]                                                62%|######1   | 16/26 [00:00<00:00, 34.01it/s] 81%|########  | 21/26 [00:00<00:00, 34.74it/s]100%|##########| 26/26 [00:00<00:00, 38.62it/s]100%|##########| 26/26 [00:00<00:00, 28.82it/s]
Test: [   0/  26]	Loss 0.438 (0.438)	test_acc   0.75 (  0.75)	test_minacc   0.79 (  0.79)	test_majacc   0.75 (  0.75)	Loss_d 0.438 (0.438)	test_acc_d   0.75 (  0.75)	test_minacc_d   0.79 (  0.79)	test_majacc_d   0.75 (  0.75)	test_corr_d   0.54 (  0.54)
Test: [  10/  26]	Loss 0.447 (0.410)	test_acc   0.76 (  0.78)	test_minacc   0.80 (  0.83)	test_majacc   0.76 (  0.77)	Loss_d 0.447 (0.410)	test_acc_d   0.76 (  0.78)	test_minacc_d   0.80 (  0.83)	test_majacc_d   0.76 (  0.77)	test_corr_d   0.54 (  0.51)
Test: [  20/  26]	Loss 0.446 (0.424)	test_acc   0.76 (  0.77)	test_minacc   0.79 (  0.82)	test_majacc   0.75 (  0.76)	Loss_d 0.446 (0.424)	test_acc_d   0.76 (  0.77)	test_minacc_d   0.79 (  0.82)	test_majacc_d   0.75 (  0.76)	test_corr_d   0.44 (  0.49)
Test: [  26/  26]	Loss 0.447 (0.426)	test_acc   0.77 (  0.77)	test_minacc   0.84 (  0.82)	test_majacc   0.76 (  0.76)	Loss_d 0.447 (0.426)	test_acc_d   0.77 (  0.77)	test_minacc_d   0.84 (  0.82)	test_majacc_d   0.76 (  0.76)	test_corr_d   0.50 (  0.50)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 54.15it/s]
Test: [  0/  1]	Loss 1.069 (1.069)	test_acc   0.60 (  0.60)	test_minacc   0.58 (  0.58)	test_majacc   0.79 (  0.79)	Loss_d 1.069 (1.069)	test_acc_d   0.60 (  0.60)	test_minacc_d   0.58 (  0.58)	test_majacc_d   0.79 (  0.79)	test_corr_d   0.05 (  0.05)
Test: [  1/  1]	Loss 1.069 (1.069)	test_acc   0.60 (  0.60)	test_minacc   0.58 (  0.58)	test_majacc   0.79 (  0.79)	Loss_d 1.069 (1.069)	test_acc_d   0.60 (  0.60)	test_minacc_d   0.58 (  0.58)	test_majacc_d   0.79 (  0.79)	test_corr_d   0.05 (  0.05)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/155/checkpoints/model_best.pth
Overall Timing[ 16/  1]	epoch_time 0.0408 (0.0438)	validation_time 0.0007 (0.0008)	train_time 0.0402 (0.0428)
record: (train_acc, test_acc) (0.767500025510788, 0.597000002861023)
last accs (train_acc, test_acc) (0.767500025510788, 0.597000002861023)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.72it/s] 19%|#9        | 5/26 [00:00<00:00, 25.03it/s] 35%|###4      | 9/26 [00:00<00:00, 29.70it/s] 50%|#####     | 13/26 [00:00<00:00, 31.66it/s] 65%|######5   | 17/26 [00:00<00:00, 33.07it/s] 81%|########  | 21/26 [00:00<00:00, 34.12it/s] 96%|#########6| 25/26 [00:00<00:00, 34.33it/s]100%|##########| 26/26 [00:00<00:00, 29.92it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 442 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 443 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 444 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 445 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 446 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 447 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 448 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 449 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 450 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 451 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 452 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 453 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 454 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 455 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 456 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 457 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 458 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 459 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 460 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 461 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 462 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 463 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 464 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 465 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 466 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 467 400
penalty weights 10000.0
Epoch: [17][  26/  26]	Loss 0.000 (0.002)	train_nll   0.41 (  0.42)	train_penalty   0.00 (  0.00)	weight_norm  25.49 ( 25.48)	train_acc   0.78 (  0.77)	train_minacc   0.78 (  0.80)	train_majacc   0.78 (  0.76)	train_corr   0.00 (  0.00)	l1 5.3686 (5.2784)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:05,  4.70it/s] 31%|###       | 8/26 [00:00<00:00, 30.25it/s]                                               31%|###       | 8/26 [00:00<00:00, 30.25it/s] 50%|#####     | 13/26 [00:00<00:00, 36.62it/s] 69%|######9   | 18/26 [00:00<00:00, 40.04it/s]                                                69%|######9   | 18/26 [00:00<00:00, 40.04it/s] 88%|########8 | 23/26 [00:00<00:00, 41.45it/s]100%|##########| 26/26 [00:00<00:00, 33.61it/s]
Test: [   0/  26]	Loss 0.408 (0.408)	test_acc   0.77 (  0.77)	test_minacc   0.74 (  0.74)	test_majacc   0.77 (  0.77)	Loss_d 0.408 (0.408)	test_acc_d   0.77 (  0.77)	test_minacc_d   0.74 (  0.74)	test_majacc_d   0.77 (  0.77)	test_corr_d   0.60 (  0.60)
Test: [  10/  26]	Loss 0.405 (0.389)	test_acc   0.79 (  0.79)	test_minacc   0.77 (  0.79)	test_majacc   0.79 (  0.79)	Loss_d 0.405 (0.389)	test_acc_d   0.79 (  0.79)	test_minacc_d   0.77 (  0.79)	test_majacc_d   0.79 (  0.79)	test_corr_d   0.59 (  0.56)
Test: [  20/  26]	Loss 0.418 (0.404)	test_acc   0.76 (  0.78)	test_minacc   0.79 (  0.78)	test_majacc   0.75 (  0.78)	Loss_d 0.418 (0.404)	test_acc_d   0.76 (  0.78)	test_minacc_d   0.79 (  0.78)	test_majacc_d   0.75 (  0.78)	test_corr_d   0.49 (  0.55)
Test: [  26/  26]	Loss 0.406 (0.403)	test_acc   0.79 (  0.78)	test_minacc   0.78 (  0.78)	test_majacc   0.79 (  0.78)	Loss_d 0.406 (0.403)	test_acc_d   0.79 (  0.78)	test_minacc_d   0.78 (  0.78)	test_majacc_d   0.79 (  0.78)	test_corr_d   0.56 (  0.55)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 59.29it/s]
Test: [  0/  1]	Loss 1.153 (1.153)	test_acc   0.57 (  0.57)	test_minacc   0.55 (  0.55)	test_majacc   0.80 (  0.80)	Loss_d 1.153 (1.153)	test_acc_d   0.57 (  0.57)	test_minacc_d   0.55 (  0.55)	test_majacc_d   0.80 (  0.80)	test_corr_d   0.14 (  0.14)
Test: [  1/  1]	Loss 1.153 (1.153)	test_acc   0.57 (  0.57)	test_minacc   0.55 (  0.55)	test_majacc   0.80 (  0.80)	Loss_d 1.153 (1.153)	test_acc_d   0.57 (  0.57)	test_minacc_d   0.55 (  0.55)	test_majacc_d   0.80 (  0.80)	test_corr_d   0.14 (  0.14)
Overall Timing[ 17/  1]	epoch_time 0.0394 (0.0435)	validation_time 0.0004 (0.0008)	train_time 0.0390 (0.0425)
record: (train_acc, test_acc) (0.767500025510788, 0.597000002861023)
last accs (train_acc, test_acc) (0.7804000313878059, 0.5720000267028809)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:07,  3.30it/s] 12%|#1        | 3/26 [00:00<00:02,  8.20it/s] 27%|##6       | 7/26 [00:00<00:01, 16.88it/s] 42%|####2     | 11/26 [00:00<00:00, 22.82it/s] 58%|#####7    | 15/26 [00:00<00:00, 27.07it/s] 73%|#######3  | 19/26 [00:00<00:00, 29.74it/s] 88%|########8 | 23/26 [00:00<00:00, 31.80it/s]100%|##########| 26/26 [00:01<00:00, 23.14it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 468 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 469 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 470 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 471 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 472 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 473 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 474 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 475 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 476 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 477 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 478 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 479 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 480 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 481 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 482 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 483 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 484 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 485 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 486 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 487 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 488 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 489 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 490 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 491 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 492 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 493 400
penalty weights 10000.0
Epoch: [18][  26/  26]	Loss 0.004 (0.002)	train_nll   0.44 (  0.40)	train_penalty   0.00 (  0.00)	weight_norm  25.51 ( 25.50)	train_acc   0.74 (  0.78)	train_minacc   0.81 (  0.79)	train_majacc   0.73 (  0.78)	train_corr   0.00 (  0.00)	l1 5.7974 (5.3807)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.56it/s] 23%|##3       | 6/26 [00:00<00:00, 25.13it/s]                                               23%|##3       | 6/26 [00:00<00:00, 25.13it/s] 42%|####2     | 11/26 [00:00<00:00, 33.19it/s] 62%|######1   | 16/26 [00:00<00:00, 38.12it/s]                                                62%|######1   | 16/26 [00:00<00:00, 38.12it/s] 81%|########  | 21/26 [00:00<00:00, 37.27it/s]100%|##########| 26/26 [00:00<00:00, 40.60it/s]100%|##########| 26/26 [00:00<00:00, 32.52it/s]
Test: [   0/  26]	Loss 0.434 (0.434)	test_acc   0.76 (  0.76)	test_minacc   0.79 (  0.79)	test_majacc   0.76 (  0.76)	Loss_d 0.434 (0.434)	test_acc_d   0.76 (  0.76)	test_minacc_d   0.79 (  0.79)	test_majacc_d   0.76 (  0.76)	test_corr_d   0.56 (  0.56)
Test: [  10/  26]	Loss 0.402 (0.406)	test_acc   0.76 (  0.77)	test_minacc   0.78 (  0.80)	test_majacc   0.76 (  0.76)	Loss_d 0.402 (0.406)	test_acc_d   0.76 (  0.77)	test_minacc_d   0.78 (  0.80)	test_majacc_d   0.76 (  0.76)	test_corr_d   0.57 (  0.53)
Test: [  20/  26]	Loss 0.434 (0.425)	test_acc   0.76 (  0.76)	test_minacc   0.79 (  0.79)	test_majacc   0.75 (  0.75)	Loss_d 0.434 (0.425)	test_acc_d   0.76 (  0.76)	test_minacc_d   0.79 (  0.79)	test_majacc_d   0.75 (  0.75)	test_corr_d   0.47 (  0.51)
Test: [  26/  26]	Loss 0.418 (0.423)	test_acc   0.76 (  0.76)	test_minacc   0.78 (  0.79)	test_majacc   0.75 (  0.75)	Loss_d 0.418 (0.423)	test_acc_d   0.76 (  0.76)	test_minacc_d   0.78 (  0.79)	test_majacc_d   0.75 (  0.75)	test_corr_d   0.53 (  0.51)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 60.64it/s]
Test: [  0/  1]	Loss 1.249 (1.249)	test_acc   0.59 (  0.59)	test_minacc   0.57 (  0.57)	test_majacc   0.79 (  0.79)	Loss_d 1.249 (1.249)	test_acc_d   0.59 (  0.59)	test_minacc_d   0.57 (  0.57)	test_majacc_d   0.79 (  0.79)	test_corr_d   0.08 (  0.08)
Test: [  1/  1]	Loss 1.249 (1.249)	test_acc   0.59 (  0.59)	test_minacc   0.57 (  0.57)	test_majacc   0.79 (  0.79)	Loss_d 1.249 (1.249)	test_acc_d   0.59 (  0.59)	test_minacc_d   0.57 (  0.57)	test_majacc_d   0.79 (  0.79)	test_corr_d   0.08 (  0.08)
Overall Timing[ 18/  1]	epoch_time 0.0417 (0.0434)	validation_time 0.0004 (0.0008)	train_time 0.0413 (0.0425)
record: (train_acc, test_acc) (0.767500025510788, 0.597000002861023)
last accs (train_acc, test_acc) (0.758600027859211, 0.5890000462532043)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:06,  3.65it/s] 15%|#5        | 4/26 [00:00<00:01, 12.27it/s] 31%|###       | 8/26 [00:00<00:00, 19.70it/s] 46%|####6     | 12/26 [00:00<00:00, 24.47it/s] 62%|######1   | 16/26 [00:00<00:00, 27.22it/s] 77%|#######6  | 20/26 [00:00<00:00, 29.21it/s] 92%|#########2| 24/26 [00:00<00:00, 31.18it/s]100%|##########| 26/26 [00:01<00:00, 23.56it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 494 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 495 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 496 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 497 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 498 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 499 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 500 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 501 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 502 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 503 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 504 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 505 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 506 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 507 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 508 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 509 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 510 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 511 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 512 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 513 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 514 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 515 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 516 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 517 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 518 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 519 400
penalty weights 10000.0
Epoch: [19][  26/  26]	Loss 0.001 (0.004)	train_nll   0.33 (  0.36)	train_penalty   0.00 (  0.00)	weight_norm  25.54 ( 25.52)	train_acc   0.81 (  0.81)	train_minacc   0.72 (  0.76)	train_majacc   0.82 (  0.82)	train_corr   0.00 (  0.00)	l1 5.8021 (5.6869)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:05,  4.51it/s] 23%|##3       | 6/26 [00:00<00:00, 21.60it/s]                                               23%|##3       | 6/26 [00:00<00:00, 21.60it/s] 42%|####2     | 11/26 [00:00<00:00, 30.27it/s] 62%|######1   | 16/26 [00:00<00:00, 36.14it/s]                                                62%|######1   | 16/26 [00:00<00:00, 36.14it/s] 81%|########  | 21/26 [00:00<00:00, 35.94it/s]100%|##########| 26/26 [00:00<00:00, 31.35it/s]
Test: [   0/  26]	Loss 0.352 (0.352)	test_acc   0.82 (  0.82)	test_minacc   0.74 (  0.74)	test_majacc   0.83 (  0.83)	Loss_d 0.352 (0.352)	test_acc_d   0.82 (  0.82)	test_minacc_d   0.74 (  0.74)	test_majacc_d   0.83 (  0.83)	test_corr_d   0.72 (  0.72)
Test: [  10/  26]	Loss 0.364 (0.350)	test_acc   0.80 (  0.81)	test_minacc   0.68 (  0.71)	test_majacc   0.82 (  0.83)	Loss_d 0.364 (0.350)	test_acc_d   0.80 (  0.81)	test_minacc_d   0.68 (  0.71)	test_majacc_d   0.82 (  0.83)	test_corr_d   0.69 (  0.68)
Test: [  20/  26]	Loss 0.385 (0.363)	test_acc   0.80 (  0.81)	test_minacc   0.68 (  0.70)	test_majacc   0.82 (  0.83)	Loss_d 0.385 (0.363)	test_acc_d   0.80 (  0.81)	test_minacc_d   0.68 (  0.70)	test_majacc_d   0.82 (  0.83)	test_corr_d   0.64 (  0.67)
Test: [  26/  26]	Loss 0.345 (0.364)	test_acc   0.80 (  0.80)	test_minacc   0.72 (  0.70)	test_majacc   0.81 (  0.82)	Loss_d 0.345 (0.364)	test_acc_d   0.80 (  0.80)	test_minacc_d   0.72 (  0.70)	test_majacc_d   0.81 (  0.82)	test_corr_d   0.68 (  0.67)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.98it/s]
Test: [  0/  1]	Loss 1.569 (1.569)	test_acc   0.51 (  0.51)	test_minacc   0.47 (  0.47)	test_majacc   0.84 (  0.84)	Loss_d 1.569 (1.569)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.47 (  0.47)	test_majacc_d   0.84 (  0.84)	test_corr_d   0.28 (  0.28)
Test: [  1/  1]	Loss 1.569 (1.569)	test_acc   0.51 (  0.51)	test_minacc   0.47 (  0.47)	test_majacc   0.84 (  0.84)	Loss_d 1.569 (1.569)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.47 (  0.47)	test_majacc_d   0.84 (  0.84)	test_corr_d   0.28 (  0.28)
Overall Timing[ 19/  1]	epoch_time 0.0396 (0.0432)	validation_time 0.0003 (0.0007)	train_time 0.0393 (0.0423)
record: (train_acc, test_acc) (0.767500025510788, 0.597000002861023)
last accs (train_acc, test_acc) (0.8045000290870666, 0.5090000033378601)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.46it/s] 19%|#9        | 5/26 [00:00<00:01, 20.65it/s] 35%|###4      | 9/26 [00:00<00:00, 26.16it/s] 50%|#####     | 13/26 [00:00<00:00, 28.52it/s] 65%|######5   | 17/26 [00:00<00:00, 30.04it/s] 81%|########  | 21/26 [00:00<00:00, 31.02it/s] 96%|#########6| 25/26 [00:00<00:00, 31.99it/s]100%|##########| 26/26 [00:00<00:00, 27.41it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 520 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 521 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 522 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 523 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 524 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 525 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 526 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 527 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 528 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 529 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 530 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 531 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 532 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 533 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 534 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 535 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 536 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 537 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 538 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 539 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 540 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 541 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 542 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 543 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 544 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 545 400
penalty weights 10000.0
Epoch: [20][  26/  26]	Loss 0.003 (0.003)	train_nll   0.31 (  0.35)	train_penalty   0.00 (  0.00)	weight_norm  25.56 ( 25.55)	train_acc   0.84 (  0.82)	train_minacc   0.88 (  0.81)	train_majacc   0.83 (  0.82)	train_corr   0.00 (  0.00)	l1 5.9178 (6.0437)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:05,  4.86it/s] 23%|##3       | 6/26 [00:00<00:00, 22.87it/s]                                               23%|##3       | 6/26 [00:00<00:00, 22.87it/s] 42%|####2     | 11/26 [00:00<00:00, 30.78it/s] 62%|######1   | 16/26 [00:00<00:00, 36.95it/s]                                                62%|######1   | 16/26 [00:00<00:00, 36.95it/s] 81%|########  | 21/26 [00:00<00:00, 37.02it/s]100%|##########| 26/26 [00:00<00:00, 40.41it/s]100%|##########| 26/26 [00:00<00:00, 31.68it/s]
Test: [   0/  26]	Loss 0.299 (0.299)	test_acc   0.86 (  0.86)	test_minacc   0.89 (  0.89)	test_majacc   0.86 (  0.86)	Loss_d 0.299 (0.299)	test_acc_d   0.86 (  0.86)	test_minacc_d   0.89 (  0.89)	test_majacc_d   0.86 (  0.86)	test_corr_d   0.67 (  0.67)
Test: [  10/  26]	Loss 0.317 (0.311)	test_acc   0.84 (  0.84)	test_minacc   0.82 (  0.86)	test_majacc   0.85 (  0.84)	Loss_d 0.317 (0.311)	test_acc_d   0.84 (  0.84)	test_minacc_d   0.82 (  0.86)	test_majacc_d   0.85 (  0.84)	test_corr_d   0.66 (  0.63)
Test: [  20/  26]	Loss 0.345 (0.317)	test_acc   0.84 (  0.84)	test_minacc   0.76 (  0.85)	test_majacc   0.86 (  0.84)	Loss_d 0.345 (0.317)	test_acc_d   0.84 (  0.84)	test_minacc_d   0.76 (  0.85)	test_majacc_d   0.86 (  0.84)	test_corr_d   0.60 (  0.62)
Test: [  26/  26]	Loss 0.318 (0.318)	test_acc   0.83 (  0.84)	test_minacc   0.88 (  0.86)	test_majacc   0.82 (  0.84)	Loss_d 0.318 (0.318)	test_acc_d   0.83 (  0.84)	test_minacc_d   0.88 (  0.86)	test_majacc_d   0.82 (  0.84)	test_corr_d   0.64 (  0.62)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.90it/s]
Test: [  0/  1]	Loss 1.336 (1.336)	test_acc   0.59 (  0.59)	test_minacc   0.56 (  0.56)	test_majacc   0.86 (  0.86)	Loss_d 1.336 (1.336)	test_acc_d   0.59 (  0.59)	test_minacc_d   0.56 (  0.56)	test_majacc_d   0.86 (  0.86)	test_corr_d   0.14 (  0.14)
Test: [  1/  1]	Loss 1.336 (1.336)	test_acc   0.59 (  0.59)	test_minacc   0.56 (  0.56)	test_majacc   0.86 (  0.86)	Loss_d 1.336 (1.336)	test_acc_d   0.59 (  0.59)	test_minacc_d   0.56 (  0.56)	test_majacc_d   0.86 (  0.86)	test_corr_d   0.14 (  0.14)
Overall Timing[ 20/  1]	epoch_time 0.0409 (0.0431)	validation_time 0.0004 (0.0007)	train_time 0.0404 (0.0422)
record: (train_acc, test_acc) (0.767500025510788, 0.597000002861023)
last accs (train_acc, test_acc) (0.8403000226020813, 0.5860000252723694)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.56it/s] 19%|#9        | 5/26 [00:00<00:00, 23.27it/s] 31%|###       | 8/26 [00:00<00:00, 25.75it/s] 42%|####2     | 11/26 [00:00<00:00, 27.11it/s] 58%|#####7    | 15/26 [00:00<00:00, 28.54it/s] 73%|#######3  | 19/26 [00:00<00:00, 29.73it/s] 88%|########8 | 23/26 [00:00<00:00, 31.44it/s]100%|##########| 26/26 [00:00<00:00, 27.39it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 546 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 547 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 548 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 549 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 550 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 551 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 552 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 553 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 554 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 555 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 556 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 557 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 558 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 559 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 560 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 561 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 562 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 563 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 564 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 565 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 566 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 567 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 568 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 569 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 570 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 571 400
penalty weights 10000.0
Epoch: [21][  26/  26]	Loss 0.000 (0.001)	train_nll   0.35 (  0.34)	train_penalty   0.00 (  0.00)	weight_norm  25.58 ( 25.57)	train_acc   0.81 (  0.82)	train_minacc   0.88 (  0.83)	train_majacc   0.80 (  0.82)	train_corr   0.00 (  0.00)	l1 6.3526 (6.3388)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.44it/s] 23%|##3       | 6/26 [00:00<00:00, 26.92it/s]                                               23%|##3       | 6/26 [00:00<00:00, 26.92it/s] 42%|####2     | 11/26 [00:00<00:00, 34.65it/s] 62%|######1   | 16/26 [00:00<00:00, 39.63it/s]                                                62%|######1   | 16/26 [00:00<00:00, 39.63it/s] 81%|########  | 21/26 [00:00<00:00, 38.36it/s]100%|##########| 26/26 [00:00<00:00, 41.39it/s]100%|##########| 26/26 [00:00<00:00, 33.79it/s]
Test: [   0/  26]	Loss 0.320 (0.320)	test_acc   0.84 (  0.84)	test_minacc   0.83 (  0.83)	test_majacc   0.84 (  0.84)	Loss_d 0.320 (0.320)	test_acc_d   0.84 (  0.84)	test_minacc_d   0.83 (  0.83)	test_majacc_d   0.84 (  0.84)	test_corr_d   0.67 (  0.67)
Test: [  10/  26]	Loss 0.330 (0.314)	test_acc   0.82 (  0.83)	test_minacc   0.78 (  0.84)	test_majacc   0.82 (  0.83)	Loss_d 0.330 (0.314)	test_acc_d   0.82 (  0.83)	test_minacc_d   0.78 (  0.84)	test_majacc_d   0.82 (  0.83)	test_corr_d   0.65 (  0.63)
Test: [  20/  26]	Loss 0.346 (0.323)	test_acc   0.83 (  0.83)	test_minacc   0.75 (  0.83)	test_majacc   0.84 (  0.83)	Loss_d 0.346 (0.323)	test_acc_d   0.83 (  0.83)	test_minacc_d   0.75 (  0.83)	test_majacc_d   0.84 (  0.83)	test_corr_d   0.61 (  0.62)
Test: [  26/  26]	Loss 0.345 (0.327)	test_acc   0.81 (  0.82)	test_minacc   0.88 (  0.82)	test_majacc   0.80 (  0.82)	Loss_d 0.345 (0.327)	test_acc_d   0.81 (  0.82)	test_minacc_d   0.88 (  0.82)	test_majacc_d   0.80 (  0.82)	test_corr_d   0.63 (  0.62)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.88it/s]
Test: [  0/  1]	Loss 1.464 (1.464)	test_acc   0.57 (  0.57)	test_minacc   0.53 (  0.53)	test_majacc   0.87 (  0.87)	Loss_d 1.464 (1.464)	test_acc_d   0.57 (  0.57)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.87 (  0.87)	test_corr_d   0.17 (  0.17)
Test: [  1/  1]	Loss 1.464 (1.464)	test_acc   0.57 (  0.57)	test_minacc   0.53 (  0.53)	test_majacc   0.87 (  0.87)	Loss_d 1.464 (1.464)	test_acc_d   0.57 (  0.57)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.87 (  0.87)	test_corr_d   0.17 (  0.17)
Overall Timing[ 21/  1]	epoch_time 0.0417 (0.0431)	validation_time 0.0003 (0.0007)	train_time 0.0414 (0.0422)
record: (train_acc, test_acc) (0.767500025510788, 0.597000002861023)
last accs (train_acc, test_acc) (0.824000027179718, 0.5680000185966492)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.57it/s] 19%|#9        | 5/26 [00:00<00:01, 18.71it/s] 35%|###4      | 9/26 [00:00<00:00, 25.43it/s] 50%|#####     | 13/26 [00:00<00:00, 29.19it/s] 65%|######5   | 17/26 [00:00<00:00, 31.48it/s] 81%|########  | 21/26 [00:00<00:00, 32.83it/s] 96%|#########6| 25/26 [00:00<00:00, 33.83it/s]100%|##########| 26/26 [00:00<00:00, 27.92it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 572 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 573 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 574 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 575 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 576 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 577 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 578 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 579 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 580 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 581 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 582 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 583 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 584 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 585 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 586 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 587 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 588 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 589 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 590 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 591 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 592 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 593 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 594 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 595 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 596 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 597 400
penalty weights 10000.0
Epoch: [22][  26/  26]	Loss 0.000 (0.001)	train_nll   0.33 (  0.34)	train_penalty   0.00 (  0.00)	weight_norm  25.58 ( 25.58)	train_acc   0.82 (  0.82)	train_minacc   0.84 (  0.84)	train_majacc   0.81 (  0.81)	train_corr   0.00 (  0.00)	l1 6.4383 (6.4733)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.78it/s] 27%|##6       | 7/26 [00:00<00:00, 31.52it/s]                                               27%|##6       | 7/26 [00:00<00:00, 31.52it/s] 46%|####6     | 12/26 [00:00<00:00, 37.65it/s] 65%|######5   | 17/26 [00:00<00:00, 40.40it/s]                                                65%|######5   | 17/26 [00:00<00:00, 40.40it/s] 88%|########8 | 23/26 [00:00<00:00, 40.36it/s]100%|##########| 26/26 [00:00<00:00, 36.23it/s]
Test: [   0/  26]	Loss 0.323 (0.323)	test_acc   0.82 (  0.82)	test_minacc   0.79 (  0.79)	test_majacc   0.83 (  0.83)	Loss_d 0.323 (0.323)	test_acc_d   0.82 (  0.82)	test_minacc_d   0.79 (  0.79)	test_majacc_d   0.83 (  0.83)	test_corr_d   0.68 (  0.68)
Test: [  10/  26]	Loss 0.310 (0.315)	test_acc   0.85 (  0.83)	test_minacc   0.85 (  0.83)	test_majacc   0.85 (  0.84)	Loss_d 0.310 (0.315)	test_acc_d   0.85 (  0.83)	test_minacc_d   0.85 (  0.83)	test_majacc_d   0.85 (  0.84)	test_corr_d   0.67 (  0.65)
Test: [  20/  26]	Loss 0.339 (0.321)	test_acc   0.84 (  0.83)	test_minacc   0.79 (  0.83)	test_majacc   0.85 (  0.83)	Loss_d 0.339 (0.321)	test_acc_d   0.84 (  0.83)	test_minacc_d   0.79 (  0.83)	test_majacc_d   0.85 (  0.83)	test_corr_d   0.62 (  0.64)
Test: [  26/  26]	Loss 0.328 (0.323)	test_acc   0.82 (  0.83)	test_minacc   0.84 (  0.83)	test_majacc   0.81 (  0.83)	Loss_d 0.328 (0.323)	test_acc_d   0.82 (  0.83)	test_minacc_d   0.84 (  0.83)	test_majacc_d   0.81 (  0.83)	test_corr_d   0.65 (  0.64)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.50it/s]
Test: [  0/  1]	Loss 1.529 (1.529)	test_acc   0.57 (  0.57)	test_minacc   0.54 (  0.54)	test_majacc   0.86 (  0.86)	Loss_d 1.529 (1.529)	test_acc_d   0.57 (  0.57)	test_minacc_d   0.54 (  0.54)	test_majacc_d   0.86 (  0.86)	test_corr_d   0.19 (  0.19)
Test: [  1/  1]	Loss 1.529 (1.529)	test_acc   0.57 (  0.57)	test_minacc   0.54 (  0.54)	test_majacc   0.86 (  0.86)	Loss_d 1.529 (1.529)	test_acc_d   0.57 (  0.57)	test_minacc_d   0.54 (  0.54)	test_majacc_d   0.86 (  0.86)	test_corr_d   0.19 (  0.19)
Overall Timing[ 22/  1]	epoch_time 0.0387 (0.0429)	validation_time 0.0005 (0.0007)	train_time 0.0382 (0.0420)
record: (train_acc, test_acc) (0.767500025510788, 0.597000002861023)
last accs (train_acc, test_acc) (0.8272000274062157, 0.5690000057220459)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 15.40it/s] 23%|##3       | 6/26 [00:00<00:00, 25.87it/s] 38%|###8      | 10/26 [00:00<00:00, 29.80it/s] 54%|#####3    | 14/26 [00:00<00:00, 31.78it/s] 69%|######9   | 18/26 [00:00<00:00, 32.85it/s] 85%|########4 | 22/26 [00:00<00:00, 33.46it/s]100%|##########| 26/26 [00:00<00:00, 34.02it/s]100%|##########| 26/26 [00:00<00:00, 29.54it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 598 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 599 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 600 400
penalty weights 10000.0
l1 at pgd_anneal_iters 6.548455238342285
set z to 6.2210324764251705
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 601 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 602 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 603 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 604 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 605 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 606 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 607 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 608 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 609 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 610 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 611 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 612 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 613 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 614 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 615 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 616 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 617 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 618 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 619 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 620 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 621 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 622 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 623 400
penalty weights 10000.0
Epoch: [23][  26/  26]	Loss 0.000 (0.000)	train_nll   0.31 (  0.33)	train_penalty   0.00 (  0.00)	weight_norm  25.59 ( 25.58)	train_acc   0.83 (  0.82)	train_minacc   0.84 (  0.84)	train_majacc   0.83 (  0.81)	train_corr   0.00 (  0.00)	l1 6.4353 (6.6373)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 14.44it/s] 27%|##6       | 7/26 [00:00<00:00, 31.23it/s]                                               27%|##6       | 7/26 [00:00<00:00, 31.23it/s] 46%|####6     | 12/26 [00:00<00:00, 38.18it/s] 65%|######5   | 17/26 [00:00<00:00, 41.54it/s]                                                65%|######5   | 17/26 [00:00<00:00, 41.54it/s] 85%|########4 | 22/26 [00:00<00:00, 40.29it/s]100%|##########| 26/26 [00:00<00:00, 37.41it/s]
Test: [   0/  26]	Loss 0.315 (0.315)	test_acc   0.82 (  0.82)	test_minacc   0.81 (  0.81)	test_majacc   0.82 (  0.82)	Loss_d 0.315 (0.315)	test_acc_d   0.82 (  0.82)	test_minacc_d   0.81 (  0.81)	test_majacc_d   0.82 (  0.82)	test_corr_d   0.69 (  0.69)
Test: [  10/  26]	Loss 0.296 (0.304)	test_acc   0.85 (  0.84)	test_minacc   0.83 (  0.83)	test_majacc   0.85 (  0.84)	Loss_d 0.296 (0.304)	test_acc_d   0.85 (  0.84)	test_minacc_d   0.83 (  0.83)	test_majacc_d   0.85 (  0.84)	test_corr_d   0.69 (  0.66)
Test: [  20/  26]	Loss 0.329 (0.308)	test_acc   0.84 (  0.84)	test_minacc   0.79 (  0.83)	test_majacc   0.85 (  0.84)	Loss_d 0.329 (0.308)	test_acc_d   0.84 (  0.84)	test_minacc_d   0.79 (  0.83)	test_majacc_d   0.85 (  0.84)	test_corr_d   0.63 (  0.65)
Test: [  26/  26]	Loss 0.314 (0.311)	test_acc   0.82 (  0.83)	test_minacc   0.84 (  0.83)	test_majacc   0.82 (  0.84)	Loss_d 0.314 (0.311)	test_acc_d   0.82 (  0.83)	test_minacc_d   0.84 (  0.83)	test_majacc_d   0.82 (  0.84)	test_corr_d   0.66 (  0.65)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 65.21it/s]
Test: [  0/  1]	Loss 1.542 (1.542)	test_acc   0.56 (  0.56)	test_minacc   0.53 (  0.53)	test_majacc   0.86 (  0.86)	Loss_d 1.542 (1.542)	test_acc_d   0.56 (  0.56)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.86 (  0.86)	test_corr_d   0.21 (  0.21)
Test: [  1/  1]	Loss 1.542 (1.542)	test_acc   0.56 (  0.56)	test_minacc   0.53 (  0.53)	test_majacc   0.86 (  0.86)	Loss_d 1.542 (1.542)	test_acc_d   0.56 (  0.56)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.86 (  0.86)	test_corr_d   0.21 (  0.21)
Overall Timing[ 23/  1]	epoch_time 0.0386 (0.0427)	validation_time 0.0003 (0.0007)	train_time 0.0383 (0.0419)
record: (train_acc, test_acc) (0.767500025510788, 0.597000002861023)
last accs (train_acc, test_acc) (0.8349000262022018, 0.5649999976158142)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.79it/s] 19%|#9        | 5/26 [00:00<00:01, 20.00it/s] 35%|###4      | 9/26 [00:00<00:00, 26.27it/s] 50%|#####     | 13/26 [00:00<00:00, 29.78it/s] 65%|######5   | 17/26 [00:00<00:00, 31.69it/s] 81%|########  | 21/26 [00:00<00:00, 32.75it/s] 96%|#########6| 25/26 [00:00<00:00, 33.26it/s]100%|##########| 26/26 [00:00<00:00, 27.63it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 624 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 625 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 626 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 627 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 628 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 629 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 630 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 631 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 632 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 633 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 634 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 635 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 636 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 637 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 638 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 639 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 640 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 641 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 642 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 643 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 644 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 645 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 646 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 647 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 648 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 649 400
penalty weights 10000.0
Epoch: [24][  26/  26]	Loss 0.000 (0.000)	train_nll   0.31 (  0.33)	train_penalty   0.00 (  0.00)	weight_norm  25.59 ( 25.59)	train_acc   0.83 (  0.82)	train_minacc   0.84 (  0.84)	train_majacc   0.83 (  0.82)	train_corr   0.00 (  0.00)	l1 6.5393 (6.7433)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.78it/s] 23%|##3       | 6/26 [00:00<00:00, 27.76it/s]                                               23%|##3       | 6/26 [00:00<00:00, 27.76it/s] 42%|####2     | 11/26 [00:00<00:00, 34.91it/s] 62%|######1   | 16/26 [00:00<00:00, 40.02it/s]                                                62%|######1   | 16/26 [00:00<00:00, 40.02it/s] 81%|########  | 21/26 [00:00<00:00, 38.77it/s]100%|##########| 26/26 [00:00<00:00, 41.94it/s]100%|##########| 26/26 [00:00<00:00, 34.40it/s]
Test: [   0/  26]	Loss 0.310 (0.310)	test_acc   0.83 (  0.83)	test_minacc   0.77 (  0.77)	test_majacc   0.84 (  0.84)	Loss_d 0.310 (0.310)	test_acc_d   0.83 (  0.83)	test_minacc_d   0.77 (  0.77)	test_majacc_d   0.84 (  0.84)	test_corr_d   0.70 (  0.70)
Test: [  10/  26]	Loss 0.284 (0.296)	test_acc   0.84 (  0.85)	test_minacc   0.75 (  0.82)	test_majacc   0.86 (  0.85)	Loss_d 0.284 (0.296)	test_acc_d   0.84 (  0.85)	test_minacc_d   0.75 (  0.82)	test_majacc_d   0.86 (  0.85)	test_corr_d   0.71 (  0.68)
Test: [  20/  26]	Loss 0.317 (0.297)	test_acc   0.84 (  0.85)	test_minacc   0.78 (  0.82)	test_majacc   0.86 (  0.85)	Loss_d 0.317 (0.297)	test_acc_d   0.84 (  0.85)	test_minacc_d   0.78 (  0.82)	test_majacc_d   0.86 (  0.85)	test_corr_d   0.66 (  0.67)
Test: [  26/  26]	Loss 0.312 (0.301)	test_acc   0.83 (  0.84)	test_minacc   0.84 (  0.82)	test_majacc   0.83 (  0.85)	Loss_d 0.312 (0.301)	test_acc_d   0.83 (  0.84)	test_minacc_d   0.84 (  0.82)	test_majacc_d   0.83 (  0.85)	test_corr_d   0.68 (  0.67)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.50it/s]
Test: [  0/  1]	Loss 1.609 (1.609)	test_acc   0.55 (  0.55)	test_minacc   0.52 (  0.52)	test_majacc   0.86 (  0.86)	Loss_d 1.609 (1.609)	test_acc_d   0.55 (  0.55)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.86 (  0.86)	test_corr_d   0.25 (  0.25)
Test: [  1/  1]	Loss 1.609 (1.609)	test_acc   0.55 (  0.55)	test_minacc   0.52 (  0.52)	test_majacc   0.86 (  0.86)	Loss_d 1.609 (1.609)	test_acc_d   0.55 (  0.55)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.86 (  0.86)	test_corr_d   0.25 (  0.25)
Overall Timing[ 24/  1]	epoch_time 0.0391 (0.0425)	validation_time 0.0004 (0.0007)	train_time 0.0387 (0.0417)
record: (train_acc, test_acc) (0.767500025510788, 0.597000002861023)
last accs (train_acc, test_acc) (0.8443000199198722, 0.550000011920929)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.51it/s] 19%|#9        | 5/26 [00:00<00:00, 22.63it/s] 35%|###4      | 9/26 [00:00<00:00, 28.18it/s] 50%|#####     | 13/26 [00:00<00:00, 30.95it/s] 65%|######5   | 17/26 [00:00<00:00, 32.48it/s] 81%|########  | 21/26 [00:00<00:00, 33.78it/s] 96%|#########6| 25/26 [00:00<00:00, 34.55it/s]100%|##########| 26/26 [00:00<00:00, 29.27it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 650 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 651 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 652 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 653 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 654 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 655 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 656 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 657 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 658 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 659 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 660 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 661 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 662 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 663 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 664 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 665 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 666 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 667 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 668 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 669 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 670 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 671 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 672 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 673 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 674 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 675 400
penalty weights 10000.0
Epoch: [25][  26/  26]	Loss 0.000 (0.000)	train_nll   0.30 (  0.32)	train_penalty   0.00 (  0.00)	weight_norm  25.60 ( 25.59)	train_acc   0.83 (  0.82)	train_minacc   0.81 (  0.84)	train_majacc   0.83 (  0.82)	train_corr   0.00 (  0.00)	l1 6.6730 (6.8993)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.77it/s] 27%|##6       | 7/26 [00:00<00:00, 33.13it/s]                                               27%|##6       | 7/26 [00:00<00:00, 33.13it/s] 46%|####6     | 12/26 [00:00<00:00, 38.70it/s] 65%|######5   | 17/26 [00:00<00:00, 41.27it/s]                                                65%|######5   | 17/26 [00:00<00:00, 41.27it/s] 85%|########4 | 22/26 [00:00<00:00, 40.01it/s]100%|##########| 26/26 [00:00<00:00, 36.92it/s]
Test: [   0/  26]	Loss 0.304 (0.304)	test_acc   0.83 (  0.83)	test_minacc   0.77 (  0.77)	test_majacc   0.84 (  0.84)	Loss_d 0.304 (0.304)	test_acc_d   0.83 (  0.83)	test_minacc_d   0.77 (  0.77)	test_majacc_d   0.84 (  0.84)	test_corr_d   0.72 (  0.72)
Test: [  10/  26]	Loss 0.275 (0.290)	test_acc   0.85 (  0.85)	test_minacc   0.77 (  0.81)	test_majacc   0.86 (  0.86)	Loss_d 0.275 (0.290)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.77 (  0.81)	test_majacc_d   0.86 (  0.86)	test_corr_d   0.73 (  0.70)
Test: [  20/  26]	Loss 0.302 (0.286)	test_acc   0.85 (  0.86)	test_minacc   0.78 (  0.81)	test_majacc   0.86 (  0.86)	Loss_d 0.302 (0.286)	test_acc_d   0.85 (  0.86)	test_minacc_d   0.78 (  0.81)	test_majacc_d   0.86 (  0.86)	test_corr_d   0.68 (  0.70)
Test: [  26/  26]	Loss 0.301 (0.289)	test_acc   0.83 (  0.85)	test_minacc   0.81 (  0.82)	test_majacc   0.83 (  0.86)	Loss_d 0.301 (0.289)	test_acc_d   0.83 (  0.85)	test_minacc_d   0.81 (  0.82)	test_majacc_d   0.83 (  0.86)	test_corr_d   0.70 (  0.70)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.51it/s]
Test: [  0/  1]	Loss 1.684 (1.684)	test_acc   0.53 (  0.53)	test_minacc   0.49 (  0.49)	test_majacc   0.86 (  0.86)	Loss_d 1.684 (1.684)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.49 (  0.49)	test_majacc_d   0.86 (  0.86)	test_corr_d   0.29 (  0.29)
Test: [  1/  1]	Loss 1.684 (1.684)	test_acc   0.53 (  0.53)	test_minacc   0.49 (  0.49)	test_majacc   0.86 (  0.86)	Loss_d 1.684 (1.684)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.49 (  0.49)	test_majacc_d   0.86 (  0.86)	test_corr_d   0.29 (  0.29)
Overall Timing[ 25/  1]	epoch_time 0.0400 (0.0424)	validation_time 0.0003 (0.0007)	train_time 0.0396 (0.0417)
record: (train_acc, test_acc) (0.767500025510788, 0.597000002861023)
last accs (train_acc, test_acc) (0.8531000217199326, 0.527999997138977)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  6.24it/s] 12%|#1        | 3/26 [00:00<00:02, 11.42it/s] 27%|##6       | 7/26 [00:00<00:00, 21.11it/s] 42%|####2     | 11/26 [00:00<00:00, 26.45it/s] 58%|#####7    | 15/26 [00:00<00:00, 29.73it/s] 73%|#######3  | 19/26 [00:00<00:00, 31.83it/s] 88%|########8 | 23/26 [00:00<00:00, 33.16it/s]100%|##########| 26/26 [00:00<00:00, 26.88it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 676 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 677 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 678 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 679 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 680 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 681 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 682 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 683 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 684 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 685 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 686 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 687 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 688 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 689 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 690 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 691 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 692 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 693 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 694 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 695 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 696 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 697 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 698 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 699 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 700 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 701 400
penalty weights 10000.0
Epoch: [26][  26/  26]	Loss 0.000 (0.001)	train_nll   0.30 (  0.31)	train_penalty   0.00 (  0.00)	weight_norm  25.61 ( 25.60)	train_acc   0.83 (  0.83)	train_minacc   0.78 (  0.83)	train_majacc   0.84 (  0.83)	train_corr   0.00 (  0.00)	l1 6.9220 (7.1056)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.56it/s] 27%|##6       | 7/26 [00:00<00:00, 31.24it/s]                                               27%|##6       | 7/26 [00:00<00:00, 31.24it/s] 46%|####6     | 12/26 [00:00<00:00, 36.19it/s] 65%|######5   | 17/26 [00:00<00:00, 39.03it/s]                                                65%|######5   | 17/26 [00:00<00:00, 39.03it/s] 85%|########4 | 22/26 [00:00<00:00, 41.14it/s]100%|##########| 26/26 [00:00<00:00, 34.95it/s]
Test: [   0/  26]	Loss 0.300 (0.300)	test_acc   0.83 (  0.83)	test_minacc   0.79 (  0.79)	test_majacc   0.84 (  0.84)	Loss_d 0.300 (0.300)	test_acc_d   0.83 (  0.83)	test_minacc_d   0.79 (  0.79)	test_majacc_d   0.84 (  0.84)	test_corr_d   0.73 (  0.73)
Test: [  10/  26]	Loss 0.271 (0.286)	test_acc   0.86 (  0.86)	test_minacc   0.73 (  0.80)	test_majacc   0.88 (  0.86)	Loss_d 0.271 (0.286)	test_acc_d   0.86 (  0.86)	test_minacc_d   0.73 (  0.80)	test_majacc_d   0.88 (  0.86)	test_corr_d   0.75 (  0.71)
Test: [  20/  26]	Loss 0.279 (0.276)	test_acc   0.86 (  0.86)	test_minacc   0.79 (  0.81)	test_majacc   0.88 (  0.87)	Loss_d 0.279 (0.276)	test_acc_d   0.86 (  0.86)	test_minacc_d   0.79 (  0.81)	test_majacc_d   0.88 (  0.87)	test_corr_d   0.70 (  0.71)
Test: [  26/  26]	Loss 0.293 (0.279)	test_acc   0.84 (  0.86)	test_minacc   0.78 (  0.81)	test_majacc   0.85 (  0.87)	Loss_d 0.293 (0.279)	test_acc_d   0.84 (  0.86)	test_minacc_d   0.78 (  0.81)	test_majacc_d   0.85 (  0.87)	test_corr_d   0.72 (  0.71)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.35it/s]
Test: [  0/  1]	Loss 1.783 (1.783)	test_acc   0.52 (  0.52)	test_minacc   0.48 (  0.48)	test_majacc   0.86 (  0.86)	Loss_d 1.783 (1.783)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.48 (  0.48)	test_majacc_d   0.86 (  0.86)	test_corr_d   0.33 (  0.33)
Test: [  1/  1]	Loss 1.783 (1.783)	test_acc   0.52 (  0.52)	test_minacc   0.48 (  0.48)	test_majacc   0.86 (  0.86)	Loss_d 1.783 (1.783)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.48 (  0.48)	test_majacc_d   0.86 (  0.86)	test_corr_d   0.33 (  0.33)
Overall Timing[ 26/  1]	epoch_time 0.0373 (0.0423)	validation_time 0.0007 (0.0007)	train_time 0.0366 (0.0415)
record: (train_acc, test_acc) (0.767500025510788, 0.597000002861023)
last accs (train_acc, test_acc) (0.8599000231027604, 0.5190000534057617)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.43it/s]  8%|7         | 2/26 [00:00<00:04,  4.87it/s] 23%|##3       | 6/26 [00:00<00:01, 14.29it/s] 38%|###8      | 10/26 [00:00<00:00, 20.97it/s] 54%|#####3    | 14/26 [00:00<00:00, 25.65it/s] 69%|######9   | 18/26 [00:00<00:00, 28.70it/s] 85%|########4 | 22/26 [00:00<00:00, 30.67it/s]100%|##########| 26/26 [00:01<00:00, 32.32it/s]100%|##########| 26/26 [00:01<00:00, 23.22it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 702 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 703 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 704 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 705 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 706 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 707 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 708 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 709 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 710 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 711 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 712 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 713 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 714 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 715 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 716 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 717 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 718 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 719 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 720 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 721 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 722 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 723 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 724 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 725 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 726 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 727 400
penalty weights 10000.0
Epoch: [27][  26/  26]	Loss 0.001 (0.001)	train_nll   0.30 (  0.30)	train_penalty   0.00 (  0.00)	weight_norm  25.63 ( 25.62)	train_acc   0.82 (  0.84)	train_minacc   0.75 (  0.83)	train_majacc   0.83 (  0.84)	train_corr   0.00 (  0.00)	l1 7.5124 (7.3789)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  6.18it/s] 23%|##3       | 6/26 [00:00<00:00, 26.39it/s]                                               23%|##3       | 6/26 [00:00<00:00, 26.39it/s] 42%|####2     | 11/26 [00:00<00:00, 34.15it/s] 62%|######1   | 16/26 [00:00<00:00, 39.51it/s]                                                62%|######1   | 16/26 [00:00<00:00, 39.51it/s] 81%|########  | 21/26 [00:00<00:00, 39.77it/s]100%|##########| 26/26 [00:00<00:00, 34.69it/s]
Test: [   0/  26]	Loss 0.304 (0.304)	test_acc   0.84 (  0.84)	test_minacc   0.81 (  0.81)	test_majacc   0.84 (  0.84)	Loss_d 0.304 (0.304)	test_acc_d   0.84 (  0.84)	test_minacc_d   0.81 (  0.81)	test_majacc_d   0.84 (  0.84)	test_corr_d   0.74 (  0.74)
Test: [  10/  26]	Loss 0.278 (0.295)	test_acc   0.87 (  0.85)	test_minacc   0.73 (  0.77)	test_majacc   0.89 (  0.86)	Loss_d 0.278 (0.295)	test_acc_d   0.87 (  0.85)	test_minacc_d   0.73 (  0.77)	test_majacc_d   0.89 (  0.86)	test_corr_d   0.76 (  0.72)
Test: [  20/  26]	Loss 0.253 (0.277)	test_acc   0.88 (  0.86)	test_minacc   0.81 (  0.79)	test_majacc   0.89 (  0.87)	Loss_d 0.253 (0.277)	test_acc_d   0.88 (  0.86)	test_minacc_d   0.81 (  0.79)	test_majacc_d   0.89 (  0.87)	test_corr_d   0.72 (  0.73)
Test: [  26/  26]	Loss 0.286 (0.278)	test_acc   0.83 (  0.86)	test_minacc   0.75 (  0.79)	test_majacc   0.84 (  0.87)	Loss_d 0.286 (0.278)	test_acc_d   0.83 (  0.86)	test_minacc_d   0.75 (  0.79)	test_majacc_d   0.84 (  0.87)	test_corr_d   0.73 (  0.73)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 60.58it/s]
Test: [  0/  1]	Loss 1.993 (1.993)	test_acc   0.51 (  0.51)	test_minacc   0.47 (  0.47)	test_majacc   0.87 (  0.87)	Loss_d 1.993 (1.993)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.47 (  0.47)	test_majacc_d   0.87 (  0.87)	test_corr_d   0.35 (  0.35)
Test: [  1/  1]	Loss 1.993 (1.993)	test_acc   0.51 (  0.51)	test_minacc   0.47 (  0.47)	test_majacc   0.87 (  0.87)	Loss_d 1.993 (1.993)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.47 (  0.47)	test_majacc_d   0.87 (  0.87)	test_corr_d   0.35 (  0.35)
Overall Timing[ 27/  1]	epoch_time 0.0436 (0.0423)	validation_time 0.0004 (0.0006)	train_time 0.0431 (0.0415)
record: (train_acc, test_acc) (0.767500025510788, 0.597000002861023)
last accs (train_acc, test_acc) (0.8602000247836114, 0.5100000500679016)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:05,  4.80it/s] 12%|#1        | 3/26 [00:00<00:02, 10.57it/s] 27%|##6       | 7/26 [00:00<00:00, 19.97it/s] 42%|####2     | 11/26 [00:00<00:00, 25.77it/s] 58%|#####7    | 15/26 [00:00<00:00, 29.27it/s] 73%|#######3  | 19/26 [00:00<00:00, 32.11it/s] 88%|########8 | 23/26 [00:00<00:00, 33.86it/s]100%|##########| 26/26 [00:00<00:00, 26.23it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 728 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 729 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 730 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 731 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 732 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 733 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 734 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 735 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 736 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 737 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 738 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 739 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 740 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 741 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 742 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 743 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 744 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 745 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 746 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 747 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 748 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 749 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 750 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 751 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 752 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 753 400
penalty weights 10000.0
Epoch: [28][  26/  26]	Loss 0.002 (0.002)	train_nll   0.28 (  0.27)	train_penalty   0.00 (  0.00)	weight_norm  25.67 ( 25.65)	train_acc   0.82 (  0.87)	train_minacc   0.84 (  0.79)	train_majacc   0.82 (  0.88)	train_corr   0.00 (  0.00)	l1 8.5488 (7.5571)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 18.82it/s] 27%|##6       | 7/26 [00:00<00:00, 35.65it/s]                                               27%|##6       | 7/26 [00:00<00:00, 35.65it/s] 46%|####6     | 12/26 [00:00<00:00, 41.15it/s] 65%|######5   | 17/26 [00:00<00:00, 39.36it/s]                                                65%|######5   | 17/26 [00:00<00:00, 39.36it/s] 85%|########4 | 22/26 [00:00<00:00, 42.19it/s]100%|##########| 26/26 [00:00<00:00, 37.16it/s]
Test: [   0/  26]	Loss 0.341 (0.341)	test_acc   0.80 (  0.80)	test_minacc   0.74 (  0.74)	test_majacc   0.81 (  0.81)	Loss_d 0.341 (0.341)	test_acc_d   0.80 (  0.80)	test_minacc_d   0.74 (  0.74)	test_majacc_d   0.81 (  0.81)	test_corr_d   0.71 (  0.71)
Test: [  10/  26]	Loss 0.334 (0.326)	test_acc   0.83 (  0.82)	test_minacc   0.78 (  0.78)	test_majacc   0.84 (  0.83)	Loss_d 0.334 (0.326)	test_acc_d   0.83 (  0.82)	test_minacc_d   0.78 (  0.78)	test_majacc_d   0.84 (  0.83)	test_corr_d   0.71 (  0.68)
Test: [  20/  26]	Loss 0.273 (0.311)	test_acc   0.85 (  0.83)	test_minacc   0.82 (  0.78)	test_majacc   0.86 (  0.84)	Loss_d 0.273 (0.311)	test_acc_d   0.85 (  0.83)	test_minacc_d   0.82 (  0.78)	test_majacc_d   0.86 (  0.84)	test_corr_d   0.68 (  0.69)
Test: [  26/  26]	Loss 0.273 (0.306)	test_acc   0.83 (  0.83)	test_minacc   0.84 (  0.79)	test_majacc   0.83 (  0.84)	Loss_d 0.273 (0.306)	test_acc_d   0.83 (  0.83)	test_minacc_d   0.84 (  0.79)	test_majacc_d   0.83 (  0.84)	test_corr_d   0.69 (  0.69)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 58.71it/s]
Test: [  0/  1]	Loss 2.372 (2.372)	test_acc   0.52 (  0.52)	test_minacc   0.49 (  0.49)	test_majacc   0.82 (  0.82)	Loss_d 2.372 (2.372)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.49 (  0.49)	test_majacc_d   0.82 (  0.82)	test_corr_d   0.29 (  0.29)
Test: [  1/  1]	Loss 2.372 (2.372)	test_acc   0.52 (  0.52)	test_minacc   0.49 (  0.49)	test_majacc   0.82 (  0.82)	Loss_d 2.372 (2.372)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.49 (  0.49)	test_majacc_d   0.82 (  0.82)	test_corr_d   0.29 (  0.29)
Overall Timing[ 28/  1]	epoch_time 0.0370 (0.0421)	validation_time 0.0004 (0.0006)	train_time 0.0366 (0.0414)
record: (train_acc, test_acc) (0.767500025510788, 0.597000002861023)
last accs (train_acc, test_acc) (0.8316000219583511, 0.5230000019073486)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 19.94it/s] 23%|##3       | 6/26 [00:00<00:00, 29.29it/s] 38%|###8      | 10/26 [00:00<00:00, 31.87it/s] 54%|#####3    | 14/26 [00:00<00:00, 33.23it/s] 69%|######9   | 18/26 [00:00<00:00, 33.84it/s] 85%|########4 | 22/26 [00:00<00:00, 34.10it/s]100%|##########| 26/26 [00:00<00:00, 34.75it/s]100%|##########| 26/26 [00:00<00:00, 31.31it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 754 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 755 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 756 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 757 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 758 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 759 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 760 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 761 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 762 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 763 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 764 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 765 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 766 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 767 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 768 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 769 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 770 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 771 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 772 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 773 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 774 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 775 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 776 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 777 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 778 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 779 400
penalty weights 10000.0
Epoch: [29][  26/  26]	Loss 0.000 (0.002)	train_nll   0.28 (  0.29)	train_penalty   0.00 (  0.00)	weight_norm  25.68 ( 25.67)	train_acc   0.86 (  0.86)	train_minacc   0.69 (  0.74)	train_majacc   0.89 (  0.89)	train_corr   0.00 (  0.00)	l1 7.8372 (7.9033)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.78it/s] 12%|#1        | 3/26 [00:00<00:03,  7.19it/s] 27%|##6       | 7/26 [00:00<00:01, 16.20it/s]                                               27%|##6       | 7/26 [00:00<00:01, 16.20it/s] 50%|#####     | 13/26 [00:00<00:00, 28.22it/s] 73%|#######3  | 19/26 [00:00<00:00, 34.92it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 34.92it/s] 96%|#########6| 25/26 [00:00<00:00, 40.49it/s]100%|##########| 26/26 [00:00<00:00, 27.96it/s]
Test: [   0/  26]	Loss 0.303 (0.303)	test_acc   0.83 (  0.83)	test_minacc   0.62 (  0.62)	test_majacc   0.86 (  0.86)	Loss_d 0.303 (0.303)	test_acc_d   0.83 (  0.83)	test_minacc_d   0.62 (  0.62)	test_majacc_d   0.86 (  0.86)	test_corr_d   0.70 (  0.70)
Test: [  10/  26]	Loss 0.309 (0.318)	test_acc   0.86 (  0.83)	test_minacc   0.57 (  0.63)	test_majacc   0.91 (  0.87)	Loss_d 0.309 (0.318)	test_acc_d   0.86 (  0.83)	test_minacc_d   0.57 (  0.63)	test_majacc_d   0.91 (  0.87)	test_corr_d   0.72 (  0.67)
Test: [  20/  26]	Loss 0.290 (0.314)	test_acc   0.84 (  0.84)	test_minacc   0.68 (  0.65)	test_majacc   0.88 (  0.87)	Loss_d 0.290 (0.314)	test_acc_d   0.84 (  0.84)	test_minacc_d   0.68 (  0.65)	test_majacc_d   0.88 (  0.87)	test_corr_d   0.66 (  0.67)
Test: [  26/  26]	Loss 0.277 (0.306)	test_acc   0.87 (  0.84)	test_minacc   0.69 (  0.65)	test_majacc   0.90 (  0.87)	Loss_d 0.277 (0.306)	test_acc_d   0.87 (  0.84)	test_minacc_d   0.69 (  0.65)	test_majacc_d   0.90 (  0.87)	test_corr_d   0.70 (  0.67)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 60.42it/s]
Test: [  0/  1]	Loss 1.932 (1.932)	test_acc   0.51 (  0.51)	test_minacc   0.47 (  0.47)	test_majacc   0.84 (  0.84)	Loss_d 1.932 (1.932)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.47 (  0.47)	test_majacc_d   0.84 (  0.84)	test_corr_d   0.23 (  0.23)
Test: [  1/  1]	Loss 1.932 (1.932)	test_acc   0.51 (  0.51)	test_minacc   0.47 (  0.47)	test_majacc   0.84 (  0.84)	Loss_d 1.932 (1.932)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.47 (  0.47)	test_majacc_d   0.84 (  0.84)	test_corr_d   0.23 (  0.23)
Overall Timing[ 29/  1]	epoch_time 0.0397 (0.0420)	validation_time 0.0005 (0.0006)	train_time 0.0392 (0.0413)
record: (train_acc, test_acc) (0.767500025510788, 0.597000002861023)
last accs (train_acc, test_acc) (0.8416000264883041, 0.5060000419616699)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.57it/s] 19%|#9        | 5/26 [00:00<00:00, 21.88it/s] 35%|###4      | 9/26 [00:00<00:00, 27.07it/s] 50%|#####     | 13/26 [00:00<00:00, 29.10it/s] 65%|######5   | 17/26 [00:00<00:00, 30.36it/s] 81%|########  | 21/26 [00:00<00:00, 31.61it/s] 96%|#########6| 25/26 [00:00<00:00, 32.53it/s]100%|##########| 26/26 [00:00<00:00, 27.71it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 780 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 781 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 782 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 783 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 784 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 785 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 786 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 787 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 788 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 789 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 790 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 791 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 792 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 793 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 794 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 795 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 796 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 797 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 798 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 799 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 800 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 801 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 802 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 803 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 804 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 805 400
penalty weights 10000.0
Epoch: [30][  26/  26]	Loss 0.003 (0.001)	train_nll   0.32 (  0.28)	train_penalty   0.00 (  0.00)	weight_norm  25.69 ( 25.69)	train_acc   0.82 (  0.86)	train_minacc   0.50 (  0.65)	train_majacc   0.87 (  0.89)	train_corr   0.00 (  0.00)	l1 8.2071 (7.7601)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.30it/s] 23%|##3       | 6/26 [00:00<00:00, 28.74it/s]                                               23%|##3       | 6/26 [00:00<00:00, 28.74it/s] 42%|####2     | 11/26 [00:00<00:00, 36.33it/s] 62%|######1   | 16/26 [00:00<00:00, 40.81it/s]                                                62%|######1   | 16/26 [00:00<00:00, 40.81it/s] 81%|########  | 21/26 [00:00<00:00, 38.73it/s]100%|##########| 26/26 [00:00<00:00, 41.82it/s]100%|##########| 26/26 [00:00<00:00, 34.53it/s]
Test: [   0/  26]	Loss 0.326 (0.326)	test_acc   0.82 (  0.82)	test_minacc   0.60 (  0.60)	test_majacc   0.85 (  0.85)	Loss_d 0.326 (0.326)	test_acc_d   0.82 (  0.82)	test_minacc_d   0.60 (  0.60)	test_majacc_d   0.85 (  0.85)	test_corr_d   0.68 (  0.68)
Test: [  10/  26]	Loss 0.325 (0.353)	test_acc   0.85 (  0.82)	test_minacc   0.57 (  0.61)	test_majacc   0.90 (  0.85)	Loss_d 0.325 (0.353)	test_acc_d   0.85 (  0.82)	test_minacc_d   0.57 (  0.61)	test_majacc_d   0.90 (  0.85)	test_corr_d   0.70 (  0.65)
Test: [  20/  26]	Loss 0.314 (0.347)	test_acc   0.83 (  0.82)	test_minacc   0.65 (  0.63)	test_majacc   0.87 (  0.86)	Loss_d 0.314 (0.347)	test_acc_d   0.83 (  0.82)	test_minacc_d   0.65 (  0.63)	test_majacc_d   0.87 (  0.86)	test_corr_d   0.64 (  0.65)
Test: [  26/  26]	Loss 0.311 (0.337)	test_acc   0.82 (  0.83)	test_minacc   0.50 (  0.63)	test_majacc   0.87 (  0.86)	Loss_d 0.311 (0.337)	test_acc_d   0.82 (  0.83)	test_minacc_d   0.50 (  0.63)	test_majacc_d   0.87 (  0.86)	test_corr_d   0.68 (  0.65)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.22it/s]
Test: [  0/  1]	Loss 2.016 (2.016)	test_acc   0.49 (  0.49)	test_minacc   0.45 (  0.45)	test_majacc   0.86 (  0.86)	Loss_d 2.016 (2.016)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.45 (  0.45)	test_majacc_d   0.86 (  0.86)	test_corr_d   0.19 (  0.19)
Test: [  1/  1]	Loss 2.016 (2.016)	test_acc   0.49 (  0.49)	test_minacc   0.45 (  0.45)	test_majacc   0.86 (  0.86)	Loss_d 2.016 (2.016)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.45 (  0.45)	test_majacc_d   0.86 (  0.86)	test_corr_d   0.19 (  0.19)
Overall Timing[ 30/  1]	epoch_time 0.0474 (0.0422)	validation_time 0.0004 (0.0006)	train_time 0.0470 (0.0415)
record: (train_acc, test_acc) (0.767500025510788, 0.597000002861023)
last accs (train_acc, test_acc) (0.8267000313401223, 0.49000000953674316)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  6.03it/s] 19%|#9        | 5/26 [00:00<00:01, 20.47it/s] 35%|###4      | 9/26 [00:00<00:00, 27.17it/s] 50%|#####     | 13/26 [00:00<00:00, 30.86it/s] 65%|######5   | 17/26 [00:00<00:00, 33.18it/s] 81%|########  | 21/26 [00:00<00:00, 33.82it/s] 96%|#########6| 25/26 [00:00<00:00, 34.19it/s]100%|##########| 26/26 [00:00<00:00, 28.54it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 806 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 807 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 808 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 809 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 810 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 811 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 812 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 813 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 814 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 815 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 816 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 817 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 818 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 819 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 820 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 821 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 822 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 823 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 824 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 825 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 826 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 827 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 828 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 829 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 830 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 831 400
penalty weights 10000.0
Epoch: [31][  26/  26]	Loss 0.000 (0.001)	train_nll   0.24 (  0.26)	train_penalty   0.00 (  0.00)	weight_norm  25.71 ( 25.71)	train_acc   0.90 (  0.88)	train_minacc   0.81 (  0.77)	train_majacc   0.91 (  0.90)	train_corr   0.00 (  0.00)	l1 8.6490 (8.0251)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 18.99it/s] 27%|##6       | 7/26 [00:00<00:00, 35.54it/s]                                               27%|##6       | 7/26 [00:00<00:00, 35.54it/s] 46%|####6     | 12/26 [00:00<00:00, 40.15it/s] 65%|######5   | 17/26 [00:00<00:00, 40.79it/s]                                                65%|######5   | 17/26 [00:00<00:00, 40.79it/s] 88%|########8 | 23/26 [00:00<00:00, 44.05it/s]100%|##########| 26/26 [00:00<00:00, 39.16it/s]
Test: [   0/  26]	Loss 0.245 (0.245)	test_acc   0.88 (  0.88)	test_minacc   0.79 (  0.79)	test_majacc   0.89 (  0.89)	Loss_d 0.245 (0.245)	test_acc_d   0.88 (  0.88)	test_minacc_d   0.79 (  0.79)	test_majacc_d   0.89 (  0.89)	test_corr_d   0.72 (  0.72)
Test: [  10/  26]	Loss 0.328 (0.306)	test_acc   0.86 (  0.86)	test_minacc   0.67 (  0.76)	test_majacc   0.89 (  0.88)	Loss_d 0.328 (0.306)	test_acc_d   0.86 (  0.86)	test_minacc_d   0.67 (  0.76)	test_majacc_d   0.89 (  0.88)	test_corr_d   0.70 (  0.67)
Test: [  20/  26]	Loss 0.301 (0.310)	test_acc   0.85 (  0.86)	test_minacc   0.74 (  0.76)	test_majacc   0.87 (  0.87)	Loss_d 0.301 (0.310)	test_acc_d   0.85 (  0.86)	test_minacc_d   0.74 (  0.76)	test_majacc_d   0.87 (  0.87)	test_corr_d   0.64 (  0.66)
Test: [  26/  26]	Loss 0.248 (0.301)	test_acc   0.89 (  0.86)	test_minacc   0.81 (  0.76)	test_majacc   0.90 (  0.88)	Loss_d 0.248 (0.301)	test_acc_d   0.89 (  0.86)	test_minacc_d   0.81 (  0.76)	test_majacc_d   0.90 (  0.88)	test_corr_d   0.70 (  0.67)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.91it/s]
Test: [  0/  1]	Loss 2.280 (2.280)	test_acc   0.54 (  0.54)	test_minacc   0.51 (  0.51)	test_majacc   0.83 (  0.83)	Loss_d 2.280 (2.280)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.83 (  0.83)	test_corr_d   0.18 (  0.18)
Test: [  1/  1]	Loss 2.280 (2.280)	test_acc   0.54 (  0.54)	test_minacc   0.51 (  0.51)	test_majacc   0.83 (  0.83)	Loss_d 2.280 (2.280)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.83 (  0.83)	test_corr_d   0.18 (  0.18)
Overall Timing[ 31/  1]	epoch_time 0.0379 (0.0421)	validation_time 0.0003 (0.0006)	train_time 0.0376 (0.0413)
record: (train_acc, test_acc) (0.767500025510788, 0.597000002861023)
last accs (train_acc, test_acc) (0.8607000225782394, 0.5440000295639038)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:11,  2.23it/s] 12%|#1        | 3/26 [00:00<00:03,  6.12it/s] 27%|##6       | 7/26 [00:00<00:01, 13.74it/s] 42%|####2     | 11/26 [00:00<00:00, 19.71it/s] 58%|#####7    | 15/26 [00:00<00:00, 23.72it/s] 73%|#######3  | 19/26 [00:01<00:00, 27.16it/s] 88%|########8 | 23/26 [00:01<00:00, 29.59it/s]100%|##########| 26/26 [00:01<00:00, 20.22it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 832 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 833 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 834 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 835 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 836 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 837 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 838 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 839 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 840 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 841 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 842 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 843 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 844 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 845 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 846 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 847 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 848 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 849 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 850 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 851 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 852 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 853 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 854 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 855 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 856 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 857 400
penalty weights 10000.0
Epoch: [32][  26/  26]	Loss 0.001 (0.001)	train_nll   0.25 (  0.27)	train_penalty   0.00 (  0.00)	weight_norm  25.76 ( 25.73)	train_acc   0.84 (  0.86)	train_minacc   0.81 (  0.76)	train_majacc   0.84 (  0.88)	train_corr   0.00 (  0.00)	l1 7.6725 (8.1253)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 19.50it/s] 31%|###       | 8/26 [00:00<00:00, 42.72it/s]                                               31%|###       | 8/26 [00:00<00:00, 42.72it/s] 50%|#####     | 13/26 [00:00<00:00, 43.63it/s] 69%|######9   | 18/26 [00:00<00:00, 45.01it/s]                                                69%|######9   | 18/26 [00:00<00:00, 45.01it/s] 88%|########8 | 23/26 [00:00<00:00, 45.03it/s]100%|##########| 26/26 [00:00<00:00, 40.66it/s]
Test: [   0/  26]	Loss 0.248 (0.248)	test_acc   0.86 (  0.86)	test_minacc   0.70 (  0.70)	test_majacc   0.88 (  0.88)	Loss_d 0.248 (0.248)	test_acc_d   0.86 (  0.86)	test_minacc_d   0.70 (  0.70)	test_majacc_d   0.88 (  0.88)	test_corr_d   0.76 (  0.76)
Test: [  10/  26]	Loss 0.297 (0.253)	test_acc   0.82 (  0.86)	test_minacc   0.77 (  0.80)	test_majacc   0.83 (  0.87)	Loss_d 0.297 (0.253)	test_acc_d   0.82 (  0.86)	test_minacc_d   0.77 (  0.80)	test_majacc_d   0.83 (  0.87)	test_corr_d   0.71 (  0.73)
Test: [  20/  26]	Loss 0.288 (0.270)	test_acc   0.85 (  0.85)	test_minacc   0.72 (  0.75)	test_majacc   0.87 (  0.87)	Loss_d 0.288 (0.270)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.72 (  0.75)	test_majacc_d   0.87 (  0.87)	test_corr_d   0.70 (  0.72)
Test: [  26/  26]	Loss 0.255 (0.273)	test_acc   0.84 (  0.85)	test_minacc   0.81 (  0.75)	test_majacc   0.84 (  0.86)	Loss_d 0.255 (0.273)	test_acc_d   0.84 (  0.85)	test_minacc_d   0.81 (  0.75)	test_majacc_d   0.84 (  0.86)	test_corr_d   0.71 (  0.72)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.87it/s]
Test: [  0/  1]	Loss 2.121 (2.121)	test_acc   0.52 (  0.52)	test_minacc   0.48 (  0.48)	test_majacc   0.88 (  0.88)	Loss_d 2.121 (2.121)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.48 (  0.48)	test_majacc_d   0.88 (  0.88)	test_corr_d   0.31 (  0.31)
Test: [  1/  1]	Loss 2.121 (2.121)	test_acc   0.52 (  0.52)	test_minacc   0.48 (  0.48)	test_majacc   0.88 (  0.88)	Loss_d 2.121 (2.121)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.48 (  0.48)	test_majacc_d   0.88 (  0.88)	test_corr_d   0.31 (  0.31)
Overall Timing[ 32/  1]	epoch_time 0.0435 (0.0421)	validation_time 0.0004 (0.0006)	train_time 0.0431 (0.0414)
record: (train_acc, test_acc) (0.767500025510788, 0.597000002861023)
last accs (train_acc, test_acc) (0.8465000248551369, 0.5190000534057617)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:00, 23.27it/s] 27%|##6       | 7/26 [00:00<00:00, 28.77it/s] 42%|####2     | 11/26 [00:00<00:00, 31.70it/s] 58%|#####7    | 15/26 [00:00<00:00, 32.95it/s] 73%|#######3  | 19/26 [00:00<00:00, 33.80it/s] 88%|########8 | 23/26 [00:00<00:00, 34.75it/s]100%|##########| 26/26 [00:00<00:00, 31.51it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 858 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 859 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 860 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 861 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 862 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 863 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 864 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 865 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 866 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 867 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 868 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 869 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 870 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 871 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 872 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 873 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 874 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 875 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 876 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 877 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 878 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 879 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 880 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 881 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 882 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 883 400
penalty weights 10000.0
Epoch: [33][  26/  26]	Loss 0.001 (0.001)	train_nll   0.25 (  0.28)	train_penalty   0.00 (  0.00)	weight_norm  25.78 ( 25.77)	train_acc   0.85 (  0.84)	train_minacc   0.84 (  0.73)	train_majacc   0.85 (  0.86)	train_corr   0.00 (  0.00)	l1 7.6206 (7.5681)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.51it/s] 15%|#5        | 4/26 [00:00<00:01, 14.32it/s] 35%|###4      | 9/26 [00:00<00:00, 26.29it/s]                                               35%|###4      | 9/26 [00:00<00:00, 26.29it/s] 54%|#####3    | 14/26 [00:00<00:00, 33.74it/s] 77%|#######6  | 20/26 [00:00<00:00, 39.12it/s]                                                77%|#######6  | 20/26 [00:00<00:00, 39.12it/s] 96%|#########6| 25/26 [00:00<00:00, 40.73it/s]100%|##########| 26/26 [00:00<00:00, 31.96it/s]
Test: [   0/  26]	Loss 0.256 (0.256)	test_acc   0.87 (  0.87)	test_minacc   0.68 (  0.68)	test_majacc   0.89 (  0.89)	Loss_d 0.256 (0.256)	test_acc_d   0.87 (  0.87)	test_minacc_d   0.68 (  0.68)	test_majacc_d   0.89 (  0.89)	test_corr_d   0.76 (  0.76)
Test: [  10/  26]	Loss 0.263 (0.254)	test_acc   0.85 (  0.87)	test_minacc   0.72 (  0.78)	test_majacc   0.87 (  0.88)	Loss_d 0.263 (0.254)	test_acc_d   0.85 (  0.87)	test_minacc_d   0.72 (  0.78)	test_majacc_d   0.87 (  0.88)	test_corr_d   0.72 (  0.73)
Test: [  20/  26]	Loss 0.306 (0.271)	test_acc   0.83 (  0.85)	test_minacc   0.74 (  0.73)	test_majacc   0.85 (  0.88)	Loss_d 0.306 (0.271)	test_acc_d   0.83 (  0.85)	test_minacc_d   0.74 (  0.73)	test_majacc_d   0.85 (  0.88)	test_corr_d   0.70 (  0.72)
Test: [  26/  26]	Loss 0.255 (0.275)	test_acc   0.84 (  0.85)	test_minacc   0.84 (  0.73)	test_majacc   0.84 (  0.87)	Loss_d 0.255 (0.275)	test_acc_d   0.84 (  0.85)	test_minacc_d   0.84 (  0.73)	test_majacc_d   0.84 (  0.87)	test_corr_d   0.72 (  0.72)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.04it/s]
Test: [  0/  1]	Loss 2.117 (2.117)	test_acc   0.50 (  0.50)	test_minacc   0.46 (  0.46)	test_majacc   0.89 (  0.89)	Loss_d 2.117 (2.117)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.46 (  0.46)	test_majacc_d   0.89 (  0.89)	test_corr_d   0.31 (  0.31)
Test: [  1/  1]	Loss 2.117 (2.117)	test_acc   0.50 (  0.50)	test_minacc   0.46 (  0.46)	test_majacc   0.89 (  0.89)	Loss_d 2.117 (2.117)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.46 (  0.46)	test_majacc_d   0.89 (  0.89)	test_corr_d   0.31 (  0.31)
Overall Timing[ 33/  1]	epoch_time 0.0406 (0.0421)	validation_time 0.0006 (0.0006)	train_time 0.0399 (0.0414)
record: (train_acc, test_acc) (0.767500025510788, 0.597000002861023)
last accs (train_acc, test_acc) (0.8487000223994255, 0.5010000467300415)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:07,  3.57it/s] 19%|#9        | 5/26 [00:00<00:01, 14.76it/s] 35%|###4      | 9/26 [00:00<00:00, 21.31it/s] 50%|#####     | 13/26 [00:00<00:00, 25.80it/s] 65%|######5   | 17/26 [00:00<00:00, 28.91it/s] 81%|########  | 21/26 [00:00<00:00, 30.91it/s] 96%|#########6| 25/26 [00:00<00:00, 32.05it/s]100%|##########| 26/26 [00:01<00:00, 24.82it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 884 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 885 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 886 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 887 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 888 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 889 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 890 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 891 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 892 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 893 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 894 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 895 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 896 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 897 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 898 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 899 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 900 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 901 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 902 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 903 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 904 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 905 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 906 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 907 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 908 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 909 400
penalty weights 10000.0
Epoch: [34][  26/  26]	Loss 0.003 (0.001)	train_nll   0.23 (  0.28)	train_penalty   0.00 (  0.00)	weight_norm  25.78 ( 25.78)	train_acc   0.88 (  0.85)	train_minacc   0.88 (  0.74)	train_majacc   0.88 (  0.86)	train_corr   0.00 (  0.00)	l1 7.4634 (7.7872)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.48it/s] 23%|##3       | 6/26 [00:00<00:00, 24.88it/s]                                               23%|##3       | 6/26 [00:00<00:00, 24.88it/s] 42%|####2     | 11/26 [00:00<00:00, 33.02it/s] 62%|######1   | 16/26 [00:00<00:00, 35.90it/s]                                                62%|######1   | 16/26 [00:00<00:00, 35.90it/s] 81%|########  | 21/26 [00:00<00:00, 38.16it/s]100%|##########| 26/26 [00:00<00:00, 41.46it/s]100%|##########| 26/26 [00:00<00:00, 32.61it/s]
Test: [   0/  26]	Loss 0.230 (0.230)	test_acc   0.89 (  0.89)	test_minacc   0.87 (  0.87)	test_majacc   0.90 (  0.90)	Loss_d 0.230 (0.230)	test_acc_d   0.89 (  0.89)	test_minacc_d   0.87 (  0.87)	test_majacc_d   0.90 (  0.90)	test_corr_d   0.77 (  0.77)
Test: [  10/  26]	Loss 0.228 (0.227)	test_acc   0.88 (  0.89)	test_minacc   0.93 (  0.92)	test_majacc   0.88 (  0.89)	Loss_d 0.228 (0.227)	test_acc_d   0.88 (  0.89)	test_minacc_d   0.93 (  0.92)	test_majacc_d   0.88 (  0.89)	test_corr_d   0.75 (  0.74)
Test: [  20/  26]	Loss 0.271 (0.240)	test_acc   0.88 (  0.88)	test_minacc   0.90 (  0.90)	test_majacc   0.88 (  0.88)	Loss_d 0.271 (0.240)	test_acc_d   0.88 (  0.88)	test_minacc_d   0.90 (  0.90)	test_majacc_d   0.88 (  0.88)	test_corr_d   0.71 (  0.74)
Test: [  26/  26]	Loss 0.232 (0.244)	test_acc   0.87 (  0.88)	test_minacc   0.88 (  0.90)	test_majacc   0.87 (  0.87)	Loss_d 0.232 (0.244)	test_acc_d   0.87 (  0.88)	test_minacc_d   0.88 (  0.90)	test_majacc_d   0.87 (  0.87)	test_corr_d   0.74 (  0.73)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.34it/s]
Test: [  0/  1]	Loss 2.018 (2.018)	test_acc   0.58 (  0.58)	test_minacc   0.54 (  0.54)	test_majacc   0.87 (  0.87)	Loss_d 2.018 (2.018)	test_acc_d   0.58 (  0.58)	test_minacc_d   0.54 (  0.54)	test_majacc_d   0.87 (  0.87)	test_corr_d   0.29 (  0.29)
Test: [  1/  1]	Loss 2.018 (2.018)	test_acc   0.58 (  0.58)	test_minacc   0.54 (  0.54)	test_majacc   0.87 (  0.87)	Loss_d 2.018 (2.018)	test_acc_d   0.58 (  0.58)	test_minacc_d   0.54 (  0.54)	test_majacc_d   0.87 (  0.87)	test_corr_d   0.29 (  0.29)
Overall Timing[ 34/  1]	epoch_time 0.0404 (0.0420)	validation_time 0.0004 (0.0006)	train_time 0.0400 (0.0413)
record: (train_acc, test_acc) (0.767500025510788, 0.597000002861023)
last accs (train_acc, test_acc) (0.8778000229597092, 0.5760000348091125)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 16.17it/s] 23%|##3       | 6/26 [00:00<00:00, 27.49it/s] 38%|###8      | 10/26 [00:00<00:00, 31.01it/s] 54%|#####3    | 14/26 [00:00<00:00, 33.03it/s] 69%|######9   | 18/26 [00:00<00:00, 33.85it/s] 85%|########4 | 22/26 [00:00<00:00, 34.78it/s]100%|##########| 26/26 [00:00<00:00, 34.98it/s]100%|##########| 26/26 [00:00<00:00, 30.46it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 910 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 911 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 912 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 913 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 914 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 915 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 916 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 917 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 918 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 919 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 920 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 921 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 922 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 923 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 924 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 925 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 926 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 927 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 928 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 929 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 930 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 931 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 932 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 933 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 934 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 935 400
penalty weights 10000.0
Epoch: [35][  26/  26]	Loss 0.002 (0.001)	train_nll   0.24 (  0.28)	train_penalty   0.00 (  0.00)	weight_norm  25.80 ( 25.80)	train_acc   0.86 (  0.85)	train_minacc   0.91 (  0.86)	train_majacc   0.85 (  0.85)	train_corr   0.00 (  0.00)	l1 7.7893 (8.1284)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 18.55it/s] 23%|##3       | 6/26 [00:00<00:00, 30.63it/s]                                               23%|##3       | 6/26 [00:00<00:00, 30.63it/s] 42%|####2     | 11/26 [00:00<00:00, 37.40it/s] 62%|######1   | 16/26 [00:00<00:00, 37.40it/s]                                                62%|######1   | 16/26 [00:00<00:00, 37.40it/s] 81%|########  | 21/26 [00:00<00:00, 40.49it/s]100%|##########| 26/26 [00:00<00:00, 43.33it/s]100%|##########| 26/26 [00:00<00:00, 36.25it/s]
Test: [   0/  26]	Loss 0.249 (0.249)	test_acc   0.86 (  0.86)	test_minacc   0.89 (  0.89)	test_majacc   0.86 (  0.86)	Loss_d 0.249 (0.249)	test_acc_d   0.86 (  0.86)	test_minacc_d   0.89 (  0.89)	test_majacc_d   0.86 (  0.86)	test_corr_d   0.77 (  0.77)
Test: [  10/  26]	Loss 0.227 (0.245)	test_acc   0.91 (  0.87)	test_minacc   0.93 (  0.91)	test_majacc   0.90 (  0.86)	Loss_d 0.227 (0.245)	test_acc_d   0.91 (  0.87)	test_minacc_d   0.93 (  0.91)	test_majacc_d   0.90 (  0.86)	test_corr_d   0.78 (  0.75)
Test: [  20/  26]	Loss 0.253 (0.244)	test_acc   0.87 (  0.87)	test_minacc   0.88 (  0.92)	test_majacc   0.87 (  0.87)	Loss_d 0.253 (0.244)	test_acc_d   0.87 (  0.87)	test_minacc_d   0.88 (  0.92)	test_majacc_d   0.87 (  0.87)	test_corr_d   0.73 (  0.75)
Test: [  26/  26]	Loss 0.243 (0.247)	test_acc   0.85 (  0.87)	test_minacc   0.91 (  0.92)	test_majacc   0.84 (  0.86)	Loss_d 0.243 (0.247)	test_acc_d   0.85 (  0.87)	test_minacc_d   0.91 (  0.92)	test_majacc_d   0.84 (  0.86)	test_corr_d   0.75 (  0.75)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.23it/s]
Test: [  0/  1]	Loss 2.159 (2.159)	test_acc   0.58 (  0.58)	test_minacc   0.55 (  0.55)	test_majacc   0.83 (  0.83)	Loss_d 2.159 (2.159)	test_acc_d   0.58 (  0.58)	test_minacc_d   0.55 (  0.55)	test_majacc_d   0.83 (  0.83)	test_corr_d   0.34 (  0.34)
Test: [  1/  1]	Loss 2.159 (2.159)	test_acc   0.58 (  0.58)	test_minacc   0.55 (  0.55)	test_majacc   0.83 (  0.83)	Loss_d 2.159 (2.159)	test_acc_d   0.58 (  0.58)	test_minacc_d   0.55 (  0.55)	test_majacc_d   0.83 (  0.83)	test_corr_d   0.34 (  0.34)
Overall Timing[ 35/  1]	epoch_time 0.0406 (0.0420)	validation_time 0.0003 (0.0006)	train_time 0.0402 (0.0413)
record: (train_acc, test_acc) (0.767500025510788, 0.597000002861023)
last accs (train_acc, test_acc) (0.8718000262975693, 0.581000030040741)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.39it/s] 19%|#9        | 5/26 [00:00<00:00, 22.15it/s] 35%|###4      | 9/26 [00:00<00:00, 27.98it/s] 50%|#####     | 13/26 [00:00<00:00, 31.10it/s] 65%|######5   | 17/26 [00:00<00:00, 33.29it/s] 81%|########  | 21/26 [00:00<00:00, 34.05it/s] 96%|#########6| 25/26 [00:00<00:00, 34.02it/s]100%|##########| 26/26 [00:00<00:00, 29.05it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 936 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 937 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 938 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 939 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 940 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 941 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 942 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 943 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 944 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 945 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 946 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 947 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 948 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 949 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 950 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 951 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 952 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 953 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 954 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 955 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 956 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 957 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 958 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 959 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 960 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 961 400
penalty weights 10000.0
Epoch: [36][  26/  26]	Loss 0.001 (0.001)	train_nll   0.29 (  0.28)	train_penalty   0.00 (  0.00)	weight_norm  25.82 ( 25.82)	train_acc   0.82 (  0.84)	train_minacc   0.72 (  0.88)	train_majacc   0.83 (  0.84)	train_corr   0.00 (  0.00)	l1 8.6183 (8.2872)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.09it/s] 23%|##3       | 6/26 [00:00<00:00, 30.32it/s]                                               23%|##3       | 6/26 [00:00<00:00, 30.32it/s] 42%|####2     | 11/26 [00:00<00:00, 37.43it/s] 62%|######1   | 16/26 [00:00<00:00, 40.60it/s]                                                62%|######1   | 16/26 [00:00<00:00, 40.60it/s] 81%|########  | 21/26 [00:00<00:00, 38.89it/s]100%|##########| 26/26 [00:00<00:00, 35.40it/s]
Test: [   0/  26]	Loss 0.312 (0.312)	test_acc   0.84 (  0.84)	test_minacc   0.89 (  0.89)	test_majacc   0.83 (  0.83)	Loss_d 0.312 (0.312)	test_acc_d   0.84 (  0.84)	test_minacc_d   0.89 (  0.89)	test_majacc_d   0.83 (  0.83)	test_corr_d   0.74 (  0.74)
Test: [  10/  26]	Loss 0.277 (0.307)	test_acc   0.86 (  0.83)	test_minacc   0.83 (  0.84)	test_majacc   0.87 (  0.82)	Loss_d 0.277 (0.307)	test_acc_d   0.86 (  0.83)	test_minacc_d   0.83 (  0.84)	test_majacc_d   0.87 (  0.82)	test_corr_d   0.76 (  0.72)
Test: [  20/  26]	Loss 0.271 (0.294)	test_acc   0.84 (  0.83)	test_minacc   0.85 (  0.86)	test_majacc   0.84 (  0.83)	Loss_d 0.271 (0.294)	test_acc_d   0.84 (  0.83)	test_minacc_d   0.85 (  0.86)	test_majacc_d   0.84 (  0.83)	test_corr_d   0.70 (  0.72)
Test: [  26/  26]	Loss 0.281 (0.291)	test_acc   0.82 (  0.83)	test_minacc   0.72 (  0.86)	test_majacc   0.83 (  0.83)	Loss_d 0.281 (0.291)	test_acc_d   0.82 (  0.83)	test_minacc_d   0.72 (  0.86)	test_majacc_d   0.83 (  0.83)	test_corr_d   0.74 (  0.72)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.58it/s]
Test: [  0/  1]	Loss 2.398 (2.398)	test_acc   0.59 (  0.59)	test_minacc   0.56 (  0.56)	test_majacc   0.80 (  0.80)	Loss_d 2.398 (2.398)	test_acc_d   0.59 (  0.59)	test_minacc_d   0.56 (  0.56)	test_majacc_d   0.80 (  0.80)	test_corr_d   0.32 (  0.32)
Test: [  1/  1]	Loss 2.398 (2.398)	test_acc   0.59 (  0.59)	test_minacc   0.56 (  0.56)	test_majacc   0.80 (  0.80)	Loss_d 2.398 (2.398)	test_acc_d   0.59 (  0.59)	test_minacc_d   0.56 (  0.56)	test_majacc_d   0.80 (  0.80)	test_corr_d   0.32 (  0.32)
Overall Timing[ 36/  1]	epoch_time 0.0412 (0.0420)	validation_time 0.0004 (0.0006)	train_time 0.0407 (0.0413)
record: (train_acc, test_acc) (0.767500025510788, 0.597000002861023)
last accs (train_acc, test_acc) (0.8349000234603882, 0.5870000123977661)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.25it/s] 15%|#5        | 4/26 [00:00<00:01, 17.16it/s] 31%|###       | 8/26 [00:00<00:00, 25.35it/s] 46%|####6     | 12/26 [00:00<00:00, 30.08it/s] 62%|######1   | 16/26 [00:00<00:00, 32.66it/s] 77%|#######6  | 20/26 [00:00<00:00, 33.84it/s] 92%|#########2| 24/26 [00:00<00:00, 34.67it/s]100%|##########| 26/26 [00:00<00:00, 28.65it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 962 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 963 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 964 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 965 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 966 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 967 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 968 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 969 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 970 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 971 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 972 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 973 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 974 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 975 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 976 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 977 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 978 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 979 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 980 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 981 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 982 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 983 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 984 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 985 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 986 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 987 400
penalty weights 10000.0
Epoch: [37][  26/  26]	Loss 0.001 (0.001)	train_nll   0.29 (  0.29)	train_penalty   0.00 (  0.00)	weight_norm  25.85 ( 25.84)	train_acc   0.80 (  0.83)	train_minacc   0.94 (  0.92)	train_majacc   0.78 (  0.82)	train_corr   0.00 (  0.00)	l1 8.3907 (8.1606)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.30it/s] 23%|##3       | 6/26 [00:00<00:00, 30.28it/s]                                               23%|##3       | 6/26 [00:00<00:00, 30.28it/s] 42%|####2     | 11/26 [00:00<00:00, 36.72it/s] 65%|######5   | 17/26 [00:00<00:00, 39.89it/s]                                                65%|######5   | 17/26 [00:00<00:00, 39.89it/s] 85%|########4 | 22/26 [00:00<00:00, 41.27it/s]100%|##########| 26/26 [00:00<00:00, 36.45it/s]
Test: [   0/  26]	Loss 0.317 (0.317)	test_acc   0.80 (  0.80)	test_minacc   0.94 (  0.94)	test_majacc   0.78 (  0.78)	Loss_d 0.317 (0.317)	test_acc_d   0.80 (  0.80)	test_minacc_d   0.94 (  0.94)	test_majacc_d   0.78 (  0.78)	test_corr_d   0.66 (  0.66)
Test: [  10/  26]	Loss 0.329 (0.312)	test_acc   0.82 (  0.81)	test_minacc   0.90 (  0.92)	test_majacc   0.80 (  0.79)	Loss_d 0.329 (0.312)	test_acc_d   0.82 (  0.81)	test_minacc_d   0.90 (  0.92)	test_majacc_d   0.80 (  0.79)	test_corr_d   0.67 (  0.65)
Test: [  20/  26]	Loss 0.296 (0.317)	test_acc   0.83 (  0.81)	test_minacc   0.97 (  0.93)	test_majacc   0.80 (  0.79)	Loss_d 0.296 (0.317)	test_acc_d   0.83 (  0.81)	test_minacc_d   0.97 (  0.93)	test_majacc_d   0.80 (  0.79)	test_corr_d   0.62 (  0.64)
Test: [  26/  26]	Loss 0.289 (0.314)	test_acc   0.80 (  0.81)	test_minacc   0.91 (  0.93)	test_majacc   0.78 (  0.79)	Loss_d 0.289 (0.314)	test_acc_d   0.80 (  0.81)	test_minacc_d   0.91 (  0.93)	test_majacc_d   0.78 (  0.79)	test_corr_d   0.66 (  0.64)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 60.05it/s]
Test: [  0/  1]	Loss 2.094 (2.094)	test_acc   0.64 (  0.64)	test_minacc   0.61 (  0.61)	test_majacc   0.82 (  0.82)	Loss_d 2.094 (2.094)	test_acc_d   0.64 (  0.64)	test_minacc_d   0.61 (  0.61)	test_majacc_d   0.82 (  0.82)	test_corr_d   0.16 (  0.16)
Test: [  1/  1]	Loss 2.094 (2.094)	test_acc   0.64 (  0.64)	test_minacc   0.61 (  0.61)	test_majacc   0.82 (  0.82)	Loss_d 2.094 (2.094)	test_acc_d   0.64 (  0.64)	test_minacc_d   0.61 (  0.61)	test_majacc_d   0.82 (  0.82)	test_corr_d   0.16 (  0.16)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/155/checkpoints/model_best.pth
Overall Timing[ 37/  1]	epoch_time 0.0392 (0.0419)	validation_time 0.0004 (0.0006)	train_time 0.0388 (0.0412)
record: (train_acc, test_acc) (0.8114000251889228, 0.6350000500679016)
last accs (train_acc, test_acc) (0.8114000251889228, 0.6350000500679016)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.59it/s] 19%|#9        | 5/26 [00:00<00:01, 20.10it/s] 35%|###4      | 9/26 [00:00<00:00, 25.31it/s] 50%|#####     | 13/26 [00:00<00:00, 28.73it/s] 65%|######5   | 17/26 [00:00<00:00, 31.25it/s] 85%|########4 | 22/26 [00:00<00:00, 34.68it/s]100%|##########| 26/26 [00:00<00:00, 35.75it/s]100%|##########| 26/26 [00:00<00:00, 28.92it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 988 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 989 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 990 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 991 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 992 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 993 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 994 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 995 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 996 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 997 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 998 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 999 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1000 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1001 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1002 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1003 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1004 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1005 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1006 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1007 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1008 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1009 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1010 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1011 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1012 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1013 400
penalty weights 10000.0
Epoch: [38][  26/  26]	Loss 0.001 (0.001)	train_nll   0.27 (  0.29)	train_penalty   0.00 (  0.00)	weight_norm  25.85 ( 25.85)	train_acc   0.82 (  0.83)	train_minacc   0.94 (  0.92)	train_majacc   0.80 (  0.81)	train_corr   0.00 (  0.00)	l1 8.0765 (8.2117)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.98it/s] 27%|##6       | 7/26 [00:00<00:00, 31.23it/s]                                               27%|##6       | 7/26 [00:00<00:00, 31.23it/s] 50%|#####     | 13/26 [00:00<00:00, 38.08it/s] 69%|######9   | 18/26 [00:00<00:00, 41.57it/s]                                                69%|######9   | 18/26 [00:00<00:00, 41.57it/s] 88%|########8 | 23/26 [00:00<00:00, 43.13it/s]100%|##########| 26/26 [00:00<00:00, 35.76it/s]
Test: [   0/  26]	Loss 0.301 (0.301)	test_acc   0.79 (  0.79)	test_minacc   0.89 (  0.89)	test_majacc   0.78 (  0.78)	Loss_d 0.301 (0.301)	test_acc_d   0.79 (  0.79)	test_minacc_d   0.89 (  0.89)	test_majacc_d   0.78 (  0.78)	test_corr_d   0.70 (  0.70)
Test: [  10/  26]	Loss 0.299 (0.293)	test_acc   0.83 (  0.82)	test_minacc   0.92 (  0.92)	test_majacc   0.82 (  0.80)	Loss_d 0.299 (0.293)	test_acc_d   0.83 (  0.82)	test_minacc_d   0.92 (  0.92)	test_majacc_d   0.82 (  0.80)	test_corr_d   0.70 (  0.68)
Test: [  20/  26]	Loss 0.291 (0.295)	test_acc   0.83 (  0.82)	test_minacc   0.99 (  0.94)	test_majacc   0.80 (  0.80)	Loss_d 0.291 (0.295)	test_acc_d   0.83 (  0.82)	test_minacc_d   0.99 (  0.94)	test_majacc_d   0.80 (  0.80)	test_corr_d   0.65 (  0.67)
Test: [  26/  26]	Loss 0.272 (0.295)	test_acc   0.82 (  0.82)	test_minacc   0.94 (  0.94)	test_majacc   0.80 (  0.80)	Loss_d 0.272 (0.295)	test_acc_d   0.82 (  0.82)	test_minacc_d   0.94 (  0.94)	test_majacc_d   0.80 (  0.80)	test_corr_d   0.70 (  0.68)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.89it/s]
Test: [  0/  1]	Loss 2.041 (2.041)	test_acc   0.63 (  0.63)	test_minacc   0.61 (  0.61)	test_majacc   0.84 (  0.84)	Loss_d 2.041 (2.041)	test_acc_d   0.63 (  0.63)	test_minacc_d   0.61 (  0.61)	test_majacc_d   0.84 (  0.84)	test_corr_d   0.20 (  0.20)
Test: [  1/  1]	Loss 2.041 (2.041)	test_acc   0.63 (  0.63)	test_minacc   0.61 (  0.61)	test_majacc   0.84 (  0.84)	Loss_d 2.041 (2.041)	test_acc_d   0.63 (  0.63)	test_minacc_d   0.61 (  0.61)	test_majacc_d   0.84 (  0.84)	test_corr_d   0.20 (  0.20)
Overall Timing[ 38/  1]	epoch_time 0.0394 (0.0418)	validation_time 0.0003 (0.0006)	train_time 0.0391 (0.0411)
record: (train_acc, test_acc) (0.8114000251889228, 0.6350000500679016)
last accs (train_acc, test_acc) (0.817600023329258, 0.6320000290870667)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.07it/s] 19%|#9        | 5/26 [00:00<00:00, 24.85it/s] 38%|###8      | 10/26 [00:00<00:00, 32.59it/s] 54%|#####3    | 14/26 [00:00<00:00, 35.22it/s] 69%|######9   | 18/26 [00:00<00:00, 36.58it/s] 85%|########4 | 22/26 [00:00<00:00, 35.60it/s]100%|##########| 26/26 [00:00<00:00, 35.60it/s]100%|##########| 26/26 [00:00<00:00, 31.33it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1014 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1015 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1016 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1017 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1018 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1019 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1020 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1021 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1022 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1023 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1024 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1025 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1026 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1027 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1028 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1029 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1030 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1031 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1032 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1033 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1034 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1035 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1036 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1037 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1038 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1039 400
penalty weights 10000.0
Epoch: [39][  26/  26]	Loss 0.000 (0.000)	train_nll   0.27 (  0.29)	train_penalty   0.00 (  0.00)	weight_norm  25.86 ( 25.86)	train_acc   0.82 (  0.82)	train_minacc   0.88 (  0.93)	train_majacc   0.81 (  0.80)	train_corr   0.00 (  0.00)	l1 8.3187 (8.2939)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 14.06it/s] 27%|##6       | 7/26 [00:00<00:00, 30.11it/s]                                               27%|##6       | 7/26 [00:00<00:00, 30.11it/s] 46%|####6     | 12/26 [00:00<00:00, 37.15it/s] 65%|######5   | 17/26 [00:00<00:00, 40.27it/s]                                                65%|######5   | 17/26 [00:00<00:00, 40.27it/s] 85%|########4 | 22/26 [00:00<00:00, 39.78it/s]100%|##########| 26/26 [00:00<00:00, 36.60it/s]
Test: [   0/  26]	Loss 0.281 (0.281)	test_acc   0.83 (  0.83)	test_minacc   0.89 (  0.89)	test_majacc   0.83 (  0.83)	Loss_d 0.281 (0.281)	test_acc_d   0.83 (  0.83)	test_minacc_d   0.89 (  0.89)	test_majacc_d   0.83 (  0.83)	test_corr_d   0.75 (  0.75)
Test: [  10/  26]	Loss 0.264 (0.273)	test_acc   0.86 (  0.84)	test_minacc   0.90 (  0.90)	test_majacc   0.85 (  0.83)	Loss_d 0.264 (0.273)	test_acc_d   0.86 (  0.84)	test_minacc_d   0.90 (  0.90)	test_majacc_d   0.85 (  0.83)	test_corr_d   0.76 (  0.74)
Test: [  20/  26]	Loss 0.275 (0.276)	test_acc   0.86 (  0.84)	test_minacc   0.96 (  0.92)	test_majacc   0.84 (  0.83)	Loss_d 0.275 (0.276)	test_acc_d   0.86 (  0.84)	test_minacc_d   0.96 (  0.92)	test_majacc_d   0.84 (  0.83)	test_corr_d   0.71 (  0.73)
Test: [  26/  26]	Loss 0.268 (0.277)	test_acc   0.82 (  0.84)	test_minacc   0.88 (  0.92)	test_majacc   0.81 (  0.82)	Loss_d 0.268 (0.277)	test_acc_d   0.82 (  0.84)	test_minacc_d   0.88 (  0.92)	test_majacc_d   0.81 (  0.82)	test_corr_d   0.75 (  0.73)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 60.92it/s]
Test: [  0/  1]	Loss 2.249 (2.249)	test_acc   0.61 (  0.61)	test_minacc   0.58 (  0.58)	test_majacc   0.86 (  0.86)	Loss_d 2.249 (2.249)	test_acc_d   0.61 (  0.61)	test_minacc_d   0.58 (  0.58)	test_majacc_d   0.86 (  0.86)	test_corr_d   0.30 (  0.30)
Test: [  1/  1]	Loss 2.249 (2.249)	test_acc   0.61 (  0.61)	test_minacc   0.58 (  0.58)	test_majacc   0.86 (  0.86)	Loss_d 2.249 (2.249)	test_acc_d   0.61 (  0.61)	test_minacc_d   0.58 (  0.58)	test_majacc_d   0.86 (  0.86)	test_corr_d   0.30 (  0.30)
Overall Timing[ 39/  1]	epoch_time 0.0429 (0.0419)	validation_time 0.0004 (0.0006)	train_time 0.0424 (0.0412)
record: (train_acc, test_acc) (0.8114000251889228, 0.6350000500679016)
last accs (train_acc, test_acc) (0.8387000269293785, 0.6080000400543213)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.44it/s] 15%|#5        | 4/26 [00:00<00:01, 18.40it/s] 31%|###       | 8/26 [00:00<00:00, 25.85it/s] 46%|####6     | 12/26 [00:00<00:00, 29.20it/s] 62%|######1   | 16/26 [00:00<00:00, 31.17it/s] 77%|#######6  | 20/26 [00:00<00:00, 32.06it/s] 92%|#########2| 24/26 [00:00<00:00, 33.40it/s]100%|##########| 26/26 [00:00<00:00, 27.96it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1040 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1041 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1042 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1043 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1044 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1045 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1046 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1047 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1048 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1049 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1050 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1051 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1052 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1053 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1054 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1055 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1056 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1057 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1058 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1059 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1060 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1061 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1062 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1063 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1064 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1065 400
penalty weights 10000.0
Epoch: [40][  26/  26]	Loss 0.000 (0.000)	train_nll   0.26 (  0.28)	train_penalty   0.00 (  0.00)	weight_norm  25.86 ( 25.86)	train_acc   0.81 (  0.83)	train_minacc   0.88 (  0.93)	train_majacc   0.80 (  0.81)	train_corr   0.00 (  0.00)	l1 8.3779 (8.4345)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.77it/s] 23%|##3       | 6/26 [00:00<00:00, 32.57it/s]                                               23%|##3       | 6/26 [00:00<00:00, 32.57it/s] 42%|####2     | 11/26 [00:00<00:00, 38.36it/s] 65%|######5   | 17/26 [00:00<00:00, 41.85it/s]                                                65%|######5   | 17/26 [00:00<00:00, 41.85it/s] 85%|########4 | 22/26 [00:00<00:00, 44.27it/s]100%|##########| 26/26 [00:00<00:00, 38.88it/s]
Test: [   0/  26]	Loss 0.286 (0.286)	test_acc   0.81 (  0.81)	test_minacc   0.89 (  0.89)	test_majacc   0.80 (  0.80)	Loss_d 0.286 (0.286)	test_acc_d   0.81 (  0.81)	test_minacc_d   0.89 (  0.89)	test_majacc_d   0.80 (  0.80)	test_corr_d   0.72 (  0.72)
Test: [  10/  26]	Loss 0.267 (0.280)	test_acc   0.85 (  0.83)	test_minacc   0.90 (  0.92)	test_majacc   0.84 (  0.81)	Loss_d 0.267 (0.280)	test_acc_d   0.85 (  0.83)	test_minacc_d   0.90 (  0.92)	test_majacc_d   0.84 (  0.81)	test_corr_d   0.74 (  0.71)
Test: [  20/  26]	Loss 0.284 (0.282)	test_acc   0.85 (  0.83)	test_minacc   0.96 (  0.93)	test_majacc   0.82 (  0.81)	Loss_d 0.284 (0.282)	test_acc_d   0.85 (  0.83)	test_minacc_d   0.96 (  0.93)	test_majacc_d   0.82 (  0.81)	test_corr_d   0.68 (  0.70)
Test: [  26/  26]	Loss 0.267 (0.282)	test_acc   0.81 (  0.83)	test_minacc   0.88 (  0.93)	test_majacc   0.80 (  0.81)	Loss_d 0.267 (0.282)	test_acc_d   0.81 (  0.83)	test_minacc_d   0.88 (  0.93)	test_majacc_d   0.80 (  0.81)	test_corr_d   0.72 (  0.70)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.86it/s]
Test: [  0/  1]	Loss 2.178 (2.178)	test_acc   0.62 (  0.62)	test_minacc   0.60 (  0.60)	test_majacc   0.84 (  0.84)	Loss_d 2.178 (2.178)	test_acc_d   0.62 (  0.62)	test_minacc_d   0.60 (  0.60)	test_majacc_d   0.84 (  0.84)	test_corr_d   0.24 (  0.24)
Test: [  1/  1]	Loss 2.178 (2.178)	test_acc   0.62 (  0.62)	test_minacc   0.60 (  0.60)	test_majacc   0.84 (  0.84)	Loss_d 2.178 (2.178)	test_acc_d   0.62 (  0.62)	test_minacc_d   0.60 (  0.60)	test_majacc_d   0.84 (  0.84)	test_corr_d   0.24 (  0.24)
Overall Timing[ 40/  1]	epoch_time 0.0386 (0.0418)	validation_time 0.0004 (0.0006)	train_time 0.0382 (0.0411)
record: (train_acc, test_acc) (0.8114000251889228, 0.6350000500679016)
last accs (train_acc, test_acc) (0.8322000266909599, 0.6240000128746033)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:05,  4.76it/s] 19%|#9        | 5/26 [00:00<00:01, 17.68it/s] 35%|###4      | 9/26 [00:00<00:00, 23.88it/s] 50%|#####     | 13/26 [00:00<00:00, 27.06it/s] 65%|######5   | 17/26 [00:00<00:00, 29.22it/s] 81%|########  | 21/26 [00:00<00:00, 30.91it/s] 96%|#########6| 25/26 [00:00<00:00, 31.59it/s]100%|##########| 26/26 [00:01<00:00, 25.77it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1066 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1067 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1068 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1069 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1070 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1071 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1072 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1073 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1074 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1075 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1076 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1077 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1078 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1079 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1080 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1081 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1082 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1083 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1084 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1085 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1086 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1087 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1088 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1089 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1090 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1091 400
penalty weights 10000.0
Epoch: [41][  26/  26]	Loss 0.001 (0.000)	train_nll   0.29 (  0.28)	train_penalty   0.00 (  0.00)	weight_norm  25.86 ( 25.86)	train_acc   0.80 (  0.83)	train_minacc   0.91 (  0.93)	train_majacc   0.79 (  0.81)	train_corr   0.00 (  0.00)	l1 8.4958 (8.4208)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.88it/s] 23%|##3       | 6/26 [00:00<00:00, 28.62it/s]                                               23%|##3       | 6/26 [00:00<00:00, 28.62it/s] 42%|####2     | 11/26 [00:00<00:00, 35.31it/s] 62%|######1   | 16/26 [00:00<00:00, 39.32it/s]                                                62%|######1   | 16/26 [00:00<00:00, 39.32it/s] 81%|########  | 21/26 [00:00<00:00, 42.01it/s]100%|##########| 26/26 [00:00<00:00, 43.91it/s]100%|##########| 26/26 [00:00<00:00, 35.98it/s]
Test: [   0/  26]	Loss 0.295 (0.295)	test_acc   0.81 (  0.81)	test_minacc   0.89 (  0.89)	test_majacc   0.79 (  0.79)	Loss_d 0.295 (0.295)	test_acc_d   0.81 (  0.81)	test_minacc_d   0.89 (  0.89)	test_majacc_d   0.79 (  0.79)	test_corr_d   0.72 (  0.72)
Test: [  10/  26]	Loss 0.273 (0.284)	test_acc   0.84 (  0.82)	test_minacc   0.90 (  0.91)	test_majacc   0.83 (  0.81)	Loss_d 0.273 (0.284)	test_acc_d   0.84 (  0.82)	test_minacc_d   0.90 (  0.91)	test_majacc_d   0.83 (  0.81)	test_corr_d   0.73 (  0.70)
Test: [  20/  26]	Loss 0.289 (0.285)	test_acc   0.83 (  0.83)	test_minacc   0.96 (  0.93)	test_majacc   0.80 (  0.81)	Loss_d 0.289 (0.285)	test_acc_d   0.83 (  0.83)	test_minacc_d   0.96 (  0.93)	test_majacc_d   0.80 (  0.81)	test_corr_d   0.67 (  0.70)
Test: [  26/  26]	Loss 0.287 (0.285)	test_acc   0.81 (  0.83)	test_minacc   0.91 (  0.93)	test_majacc   0.79 (  0.81)	Loss_d 0.287 (0.285)	test_acc_d   0.81 (  0.83)	test_minacc_d   0.91 (  0.93)	test_majacc_d   0.79 (  0.81)	test_corr_d   0.71 (  0.70)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.16it/s]
Test: [  0/  1]	Loss 2.203 (2.203)	test_acc   0.62 (  0.62)	test_minacc   0.60 (  0.60)	test_majacc   0.84 (  0.84)	Loss_d 2.203 (2.203)	test_acc_d   0.62 (  0.62)	test_minacc_d   0.60 (  0.60)	test_majacc_d   0.84 (  0.84)	test_corr_d   0.22 (  0.22)
Test: [  1/  1]	Loss 2.203 (2.203)	test_acc   0.62 (  0.62)	test_minacc   0.60 (  0.60)	test_majacc   0.84 (  0.84)	Loss_d 2.203 (2.203)	test_acc_d   0.62 (  0.62)	test_minacc_d   0.60 (  0.60)	test_majacc_d   0.84 (  0.84)	test_corr_d   0.22 (  0.22)
Overall Timing[ 41/  1]	epoch_time 0.0415 (0.0418)	validation_time 0.0003 (0.0006)	train_time 0.0412 (0.0411)
record: (train_acc, test_acc) (0.8114000251889228, 0.6350000500679016)
last accs (train_acc, test_acc) (0.8269000304937363, 0.6240000128746033)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.08it/s] 19%|#9        | 5/26 [00:00<00:01, 18.38it/s] 35%|###4      | 9/26 [00:00<00:00, 24.27it/s] 50%|#####     | 13/26 [00:00<00:00, 27.62it/s] 65%|######5   | 17/26 [00:00<00:00, 30.45it/s] 81%|########  | 21/26 [00:00<00:00, 31.93it/s] 96%|#########6| 25/26 [00:00<00:00, 33.04it/s]100%|##########| 26/26 [00:00<00:00, 26.70it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1092 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1093 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1094 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1095 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1096 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1097 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1098 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1099 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1100 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1101 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1102 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1103 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1104 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1105 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1106 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1107 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1108 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1109 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1110 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1111 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1112 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1113 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1114 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1115 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1116 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1117 400
penalty weights 10000.0
Epoch: [42][  26/  26]	Loss 0.000 (0.000)	train_nll   0.27 (  0.28)	train_penalty   0.00 (  0.00)	weight_norm  25.86 ( 25.86)	train_acc   0.82 (  0.83)	train_minacc   0.94 (  0.93)	train_majacc   0.80 (  0.81)	train_corr   0.00 (  0.00)	l1 8.5358 (8.3983)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.52it/s] 23%|##3       | 6/26 [00:00<00:00, 27.40it/s]                                               23%|##3       | 6/26 [00:00<00:00, 27.40it/s] 42%|####2     | 11/26 [00:00<00:00, 34.88it/s] 62%|######1   | 16/26 [00:00<00:00, 36.92it/s]                                                62%|######1   | 16/26 [00:00<00:00, 36.92it/s] 81%|########  | 21/26 [00:00<00:00, 38.60it/s]100%|##########| 26/26 [00:00<00:00, 33.99it/s]
Test: [   0/  26]	Loss 0.299 (0.299)	test_acc   0.80 (  0.80)	test_minacc   0.89 (  0.89)	test_majacc   0.78 (  0.78)	Loss_d 0.299 (0.299)	test_acc_d   0.80 (  0.80)	test_minacc_d   0.89 (  0.89)	test_majacc_d   0.78 (  0.78)	test_corr_d   0.70 (  0.70)
Test: [  10/  26]	Loss 0.284 (0.293)	test_acc   0.84 (  0.82)	test_minacc   0.90 (  0.92)	test_majacc   0.83 (  0.80)	Loss_d 0.284 (0.293)	test_acc_d   0.84 (  0.82)	test_minacc_d   0.90 (  0.92)	test_majacc_d   0.83 (  0.80)	test_corr_d   0.72 (  0.69)
Test: [  20/  26]	Loss 0.296 (0.294)	test_acc   0.82 (  0.82)	test_minacc   0.96 (  0.93)	test_majacc   0.79 (  0.80)	Loss_d 0.296 (0.294)	test_acc_d   0.82 (  0.82)	test_minacc_d   0.96 (  0.93)	test_majacc_d   0.79 (  0.80)	test_corr_d   0.65 (  0.68)
Test: [  26/  26]	Loss 0.268 (0.293)	test_acc   0.82 (  0.82)	test_minacc   0.94 (  0.93)	test_majacc   0.80 (  0.80)	Loss_d 0.268 (0.293)	test_acc_d   0.82 (  0.82)	test_minacc_d   0.94 (  0.93)	test_majacc_d   0.80 (  0.80)	test_corr_d   0.70 (  0.68)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 60.78it/s]
Test: [  0/  1]	Loss 2.186 (2.186)	test_acc   0.64 (  0.64)	test_minacc   0.61 (  0.61)	test_majacc   0.83 (  0.83)	Loss_d 2.186 (2.186)	test_acc_d   0.64 (  0.64)	test_minacc_d   0.61 (  0.61)	test_majacc_d   0.83 (  0.83)	test_corr_d   0.19 (  0.19)
Test: [  1/  1]	Loss 2.186 (2.186)	test_acc   0.64 (  0.64)	test_minacc   0.61 (  0.61)	test_majacc   0.83 (  0.83)	Loss_d 2.186 (2.186)	test_acc_d   0.64 (  0.64)	test_minacc_d   0.61 (  0.61)	test_majacc_d   0.83 (  0.83)	test_corr_d   0.19 (  0.19)
Overall Timing[ 42/  1]	epoch_time 0.0424 (0.0418)	validation_time 0.0007 (0.0006)	train_time 0.0417 (0.0411)
record: (train_acc, test_acc) (0.8114000251889228, 0.6350000500679016)
last accs (train_acc, test_acc) (0.8200000268816948, 0.6350000500679016)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.50it/s] 15%|#5        | 4/26 [00:00<00:01, 18.87it/s] 31%|###       | 8/26 [00:00<00:00, 26.20it/s] 46%|####6     | 12/26 [00:00<00:00, 29.24it/s] 62%|######1   | 16/26 [00:00<00:00, 31.52it/s] 77%|#######6  | 20/26 [00:00<00:00, 32.74it/s] 92%|#########2| 24/26 [00:00<00:00, 33.44it/s]100%|##########| 26/26 [00:00<00:00, 28.80it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1118 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1119 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1120 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1121 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1122 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1123 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1124 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1125 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1126 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1127 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1128 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1129 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1130 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1131 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1132 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1133 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1134 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1135 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1136 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1137 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1138 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1139 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1140 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1141 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1142 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1143 400
penalty weights 10000.0
Epoch: [43][  26/  26]	Loss 0.000 (0.000)	train_nll   0.27 (  0.29)	train_penalty   0.00 (  0.00)	weight_norm  25.86 ( 25.86)	train_acc   0.82 (  0.82)	train_minacc   0.94 (  0.93)	train_majacc   0.80 (  0.80)	train_corr   0.00 (  0.00)	l1 8.3068 (8.4510)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.66it/s] 23%|##3       | 6/26 [00:00<00:00, 29.58it/s]                                               23%|##3       | 6/26 [00:00<00:00, 29.58it/s] 42%|####2     | 11/26 [00:00<00:00, 36.46it/s] 62%|######1   | 16/26 [00:00<00:00, 40.81it/s]                                                62%|######1   | 16/26 [00:00<00:00, 40.81it/s] 81%|########  | 21/26 [00:00<00:00, 39.64it/s]100%|##########| 26/26 [00:00<00:00, 42.36it/s]100%|##########| 26/26 [00:00<00:00, 34.87it/s]
Test: [   0/  26]	Loss 0.277 (0.277)	test_acc   0.81 (  0.81)	test_minacc   0.91 (  0.91)	test_majacc   0.80 (  0.80)	Loss_d 0.277 (0.277)	test_acc_d   0.81 (  0.81)	test_minacc_d   0.91 (  0.91)	test_majacc_d   0.80 (  0.80)	test_corr_d   0.73 (  0.73)
Test: [  10/  26]	Loss 0.272 (0.273)	test_acc   0.85 (  0.83)	test_minacc   0.92 (  0.92)	test_majacc   0.84 (  0.82)	Loss_d 0.272 (0.273)	test_acc_d   0.85 (  0.83)	test_minacc_d   0.92 (  0.92)	test_majacc_d   0.84 (  0.82)	test_corr_d   0.74 (  0.71)
Test: [  20/  26]	Loss 0.293 (0.280)	test_acc   0.82 (  0.83)	test_minacc   0.96 (  0.93)	test_majacc   0.79 (  0.81)	Loss_d 0.293 (0.280)	test_acc_d   0.82 (  0.83)	test_minacc_d   0.96 (  0.93)	test_majacc_d   0.79 (  0.81)	test_corr_d   0.68 (  0.71)
Test: [  26/  26]	Loss 0.269 (0.280)	test_acc   0.82 (  0.83)	test_minacc   0.94 (  0.94)	test_majacc   0.80 (  0.81)	Loss_d 0.269 (0.280)	test_acc_d   0.82 (  0.83)	test_minacc_d   0.94 (  0.94)	test_majacc_d   0.80 (  0.81)	test_corr_d   0.72 (  0.71)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 60.04it/s]
Test: [  0/  1]	Loss 2.164 (2.164)	test_acc   0.63 (  0.63)	test_minacc   0.61 (  0.61)	test_majacc   0.84 (  0.84)	Loss_d 2.164 (2.164)	test_acc_d   0.63 (  0.63)	test_minacc_d   0.61 (  0.61)	test_majacc_d   0.84 (  0.84)	test_corr_d   0.22 (  0.22)
Test: [  1/  1]	Loss 2.164 (2.164)	test_acc   0.63 (  0.63)	test_minacc   0.61 (  0.61)	test_majacc   0.84 (  0.84)	Loss_d 2.164 (2.164)	test_acc_d   0.63 (  0.63)	test_minacc_d   0.61 (  0.61)	test_majacc_d   0.84 (  0.84)	test_corr_d   0.22 (  0.22)
Overall Timing[ 43/  1]	epoch_time 0.0389 (0.0417)	validation_time 0.0004 (0.0006)	train_time 0.0384 (0.0411)
record: (train_acc, test_acc) (0.8114000251889228, 0.6350000500679016)
last accs (train_acc, test_acc) (0.8279000238776207, 0.6320000290870667)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.45it/s] 19%|#9        | 5/26 [00:00<00:01, 19.00it/s] 35%|###4      | 9/26 [00:00<00:00, 24.82it/s] 50%|#####     | 13/26 [00:00<00:00, 27.86it/s] 65%|######5   | 17/26 [00:00<00:00, 30.07it/s] 81%|########  | 21/26 [00:00<00:00, 31.49it/s] 96%|#########6| 25/26 [00:00<00:00, 32.50it/s]100%|##########| 26/26 [00:00<00:00, 26.76it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1144 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1145 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1146 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1147 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1148 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1149 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1150 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1151 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1152 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1153 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1154 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1155 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1156 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1157 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1158 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1159 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1160 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1161 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1162 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1163 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1164 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1165 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1166 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1167 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1168 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1169 400
penalty weights 10000.0
Epoch: [44][  26/  26]	Loss 0.000 (0.000)	train_nll   0.27 (  0.29)	train_penalty   0.00 (  0.00)	weight_norm  25.86 ( 25.87)	train_acc   0.82 (  0.83)	train_minacc   0.91 (  0.93)	train_majacc   0.81 (  0.81)	train_corr   0.00 (  0.00)	l1 8.3804 (8.4881)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 14.13it/s] 15%|#5        | 4/26 [00:00<00:01, 16.29it/s] 35%|###4      | 9/26 [00:00<00:00, 28.69it/s]                                               35%|###4      | 9/26 [00:00<00:00, 28.69it/s] 54%|#####3    | 14/26 [00:00<00:00, 35.57it/s] 73%|#######3  | 19/26 [00:00<00:00, 38.90it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 38.90it/s] 92%|#########2| 24/26 [00:00<00:00, 39.11it/s]100%|##########| 26/26 [00:00<00:00, 32.69it/s]
Test: [   0/  26]	Loss 0.290 (0.290)	test_acc   0.81 (  0.81)	test_minacc   0.89 (  0.89)	test_majacc   0.80 (  0.80)	Loss_d 0.290 (0.290)	test_acc_d   0.81 (  0.81)	test_minacc_d   0.89 (  0.89)	test_majacc_d   0.80 (  0.80)	test_corr_d   0.74 (  0.74)
Test: [  10/  26]	Loss 0.263 (0.280)	test_acc   0.85 (  0.83)	test_minacc   0.90 (  0.91)	test_majacc   0.85 (  0.82)	Loss_d 0.263 (0.280)	test_acc_d   0.85 (  0.83)	test_minacc_d   0.90 (  0.91)	test_majacc_d   0.85 (  0.82)	test_corr_d   0.75 (  0.72)
Test: [  20/  26]	Loss 0.286 (0.279)	test_acc   0.83 (  0.83)	test_minacc   0.96 (  0.93)	test_majacc   0.80 (  0.82)	Loss_d 0.286 (0.279)	test_acc_d   0.83 (  0.83)	test_minacc_d   0.96 (  0.93)	test_majacc_d   0.80 (  0.82)	test_corr_d   0.69 (  0.72)
Test: [  26/  26]	Loss 0.267 (0.279)	test_acc   0.82 (  0.83)	test_minacc   0.91 (  0.93)	test_majacc   0.81 (  0.82)	Loss_d 0.267 (0.279)	test_acc_d   0.82 (  0.83)	test_minacc_d   0.91 (  0.93)	test_majacc_d   0.81 (  0.82)	test_corr_d   0.74 (  0.72)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.74it/s]
Test: [  0/  1]	Loss 2.236 (2.236)	test_acc   0.62 (  0.62)	test_minacc   0.60 (  0.60)	test_majacc   0.84 (  0.84)	Loss_d 2.236 (2.236)	test_acc_d   0.62 (  0.62)	test_minacc_d   0.60 (  0.60)	test_majacc_d   0.84 (  0.84)	test_corr_d   0.25 (  0.25)
Test: [  1/  1]	Loss 2.236 (2.236)	test_acc   0.62 (  0.62)	test_minacc   0.60 (  0.60)	test_majacc   0.84 (  0.84)	Loss_d 2.236 (2.236)	test_acc_d   0.62 (  0.62)	test_minacc_d   0.60 (  0.60)	test_majacc_d   0.84 (  0.84)	test_corr_d   0.25 (  0.25)
Overall Timing[ 44/  1]	epoch_time 0.0445 (0.0418)	validation_time 0.0003 (0.0006)	train_time 0.0441 (0.0411)
record: (train_acc, test_acc) (0.8114000251889228, 0.6350000500679016)
last accs (train_acc, test_acc) (0.8320000228881836, 0.6220000386238098)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.55it/s] 12%|#1        | 3/26 [00:00<00:01, 15.06it/s] 27%|##6       | 7/26 [00:00<00:00, 24.04it/s] 42%|####2     | 11/26 [00:00<00:00, 28.27it/s] 58%|#####7    | 15/26 [00:00<00:00, 30.21it/s] 73%|#######3  | 19/26 [00:00<00:00, 31.99it/s] 88%|########8 | 23/26 [00:00<00:00, 32.77it/s]100%|##########| 26/26 [00:00<00:00, 28.06it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1170 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1171 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1172 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1173 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1174 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1175 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1176 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1177 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1178 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1179 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1180 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1181 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1182 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1183 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1184 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1185 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1186 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1187 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1188 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1189 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1190 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1191 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1192 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1193 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1194 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1195 400
penalty weights 10000.0
Epoch: [45][  26/  26]	Loss 0.000 (0.000)	train_nll   0.28 (  0.28)	train_penalty   0.00 (  0.00)	weight_norm  25.87 ( 25.86)	train_acc   0.81 (  0.83)	train_minacc   0.94 (  0.93)	train_majacc   0.79 (  0.81)	train_corr   0.00 (  0.00)	l1 8.5645 (8.3887)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.88it/s] 23%|##3       | 6/26 [00:00<00:00, 27.60it/s]                                               23%|##3       | 6/26 [00:00<00:00, 27.60it/s] 42%|####2     | 11/26 [00:00<00:00, 35.34it/s] 62%|######1   | 16/26 [00:00<00:00, 40.30it/s]                                                62%|######1   | 16/26 [00:00<00:00, 40.30it/s] 81%|########  | 21/26 [00:00<00:00, 38.06it/s]100%|##########| 26/26 [00:00<00:00, 41.11it/s]100%|##########| 26/26 [00:00<00:00, 33.81it/s]
Test: [   0/  26]	Loss 0.289 (0.289)	test_acc   0.80 (  0.80)	test_minacc   0.89 (  0.89)	test_majacc   0.78 (  0.78)	Loss_d 0.289 (0.289)	test_acc_d   0.80 (  0.80)	test_minacc_d   0.89 (  0.89)	test_majacc_d   0.78 (  0.78)	test_corr_d   0.71 (  0.71)
Test: [  10/  26]	Loss 0.277 (0.286)	test_acc   0.85 (  0.82)	test_minacc   0.92 (  0.93)	test_majacc   0.84 (  0.80)	Loss_d 0.277 (0.286)	test_acc_d   0.85 (  0.82)	test_minacc_d   0.92 (  0.93)	test_majacc_d   0.84 (  0.80)	test_corr_d   0.72 (  0.69)
Test: [  20/  26]	Loss 0.291 (0.286)	test_acc   0.83 (  0.82)	test_minacc   0.96 (  0.94)	test_majacc   0.80 (  0.80)	Loss_d 0.291 (0.286)	test_acc_d   0.83 (  0.82)	test_minacc_d   0.96 (  0.94)	test_majacc_d   0.80 (  0.80)	test_corr_d   0.65 (  0.68)
Test: [  26/  26]	Loss 0.276 (0.286)	test_acc   0.81 (  0.83)	test_minacc   0.94 (  0.94)	test_majacc   0.79 (  0.80)	Loss_d 0.276 (0.286)	test_acc_d   0.81 (  0.83)	test_minacc_d   0.94 (  0.94)	test_majacc_d   0.79 (  0.80)	test_corr_d   0.70 (  0.68)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.51it/s]
Test: [  0/  1]	Loss 2.200 (2.200)	test_acc   0.64 (  0.64)	test_minacc   0.62 (  0.62)	test_majacc   0.82 (  0.82)	Loss_d 2.200 (2.200)	test_acc_d   0.64 (  0.64)	test_minacc_d   0.62 (  0.62)	test_majacc_d   0.82 (  0.82)	test_corr_d   0.18 (  0.18)
Test: [  1/  1]	Loss 2.200 (2.200)	test_acc   0.64 (  0.64)	test_minacc   0.62 (  0.62)	test_majacc   0.82 (  0.82)	Loss_d 2.200 (2.200)	test_acc_d   0.64 (  0.64)	test_minacc_d   0.62 (  0.62)	test_majacc_d   0.82 (  0.82)	test_corr_d   0.18 (  0.18)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/155/checkpoints/model_best.pth
Overall Timing[ 45/  1]	epoch_time 0.0457 (0.0419)	validation_time 0.0005 (0.0006)	train_time 0.0452 (0.0412)
record: (train_acc, test_acc) (0.8255000236034393, 0.6360000371932983)
last accs (train_acc, test_acc) (0.8255000236034393, 0.6360000371932983)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 16.74it/s] 23%|##3       | 6/26 [00:00<00:00, 27.13it/s] 38%|###8      | 10/26 [00:00<00:00, 30.36it/s] 54%|#####3    | 14/26 [00:00<00:00, 30.81it/s] 69%|######9   | 18/26 [00:00<00:00, 31.81it/s] 85%|########4 | 22/26 [00:00<00:00, 32.31it/s]100%|##########| 26/26 [00:00<00:00, 33.52it/s]100%|##########| 26/26 [00:00<00:00, 29.32it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1196 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1197 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1198 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1199 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1200 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1201 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1202 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1203 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1204 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1205 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1206 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1207 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1208 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1209 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1210 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1211 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1212 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1213 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1214 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1215 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1216 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1217 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1218 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1219 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1220 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1221 400
penalty weights 10000.0
Epoch: [46][  26/  26]	Loss 0.000 (0.000)	train_nll   0.27 (  0.28)	train_penalty   0.00 (  0.00)	weight_norm  25.87 ( 25.87)	train_acc   0.82 (  0.83)	train_minacc   0.94 (  0.94)	train_majacc   0.81 (  0.81)	train_corr   0.00 (  0.00)	l1 8.4860 (8.4874)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:01, 19.82it/s] 31%|###       | 8/26 [00:00<00:00, 33.70it/s]                                               31%|###       | 8/26 [00:00<00:00, 33.70it/s] 50%|#####     | 13/26 [00:00<00:00, 38.01it/s] 69%|######9   | 18/26 [00:00<00:00, 41.42it/s]                                                69%|######9   | 18/26 [00:00<00:00, 41.42it/s] 88%|########8 | 23/26 [00:00<00:00, 39.34it/s]100%|##########| 26/26 [00:00<00:00, 36.00it/s]
Test: [   0/  26]	Loss 0.284 (0.284)	test_acc   0.82 (  0.82)	test_minacc   0.91 (  0.91)	test_majacc   0.80 (  0.80)	Loss_d 0.284 (0.284)	test_acc_d   0.82 (  0.82)	test_minacc_d   0.91 (  0.91)	test_majacc_d   0.80 (  0.80)	test_corr_d   0.72 (  0.72)
Test: [  10/  26]	Loss 0.272 (0.279)	test_acc   0.85 (  0.83)	test_minacc   0.92 (  0.93)	test_majacc   0.84 (  0.81)	Loss_d 0.272 (0.279)	test_acc_d   0.85 (  0.83)	test_minacc_d   0.92 (  0.93)	test_majacc_d   0.84 (  0.81)	test_corr_d   0.73 (  0.70)
Test: [  20/  26]	Loss 0.290 (0.282)	test_acc   0.83 (  0.83)	test_minacc   0.96 (  0.94)	test_majacc   0.80 (  0.81)	Loss_d 0.290 (0.282)	test_acc_d   0.83 (  0.83)	test_minacc_d   0.96 (  0.94)	test_majacc_d   0.80 (  0.81)	test_corr_d   0.67 (  0.70)
Test: [  26/  26]	Loss 0.270 (0.282)	test_acc   0.82 (  0.83)	test_minacc   0.94 (  0.94)	test_majacc   0.81 (  0.81)	Loss_d 0.270 (0.282)	test_acc_d   0.82 (  0.83)	test_minacc_d   0.94 (  0.94)	test_majacc_d   0.81 (  0.81)	test_corr_d   0.72 (  0.70)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 58.74it/s]
Test: [  0/  1]	Loss 2.217 (2.217)	test_acc   0.63 (  0.63)	test_minacc   0.61 (  0.61)	test_majacc   0.82 (  0.82)	Loss_d 2.217 (2.217)	test_acc_d   0.63 (  0.63)	test_minacc_d   0.61 (  0.61)	test_majacc_d   0.82 (  0.82)	test_corr_d   0.20 (  0.20)
Test: [  1/  1]	Loss 2.217 (2.217)	test_acc   0.63 (  0.63)	test_minacc   0.61 (  0.61)	test_majacc   0.82 (  0.82)	Loss_d 2.217 (2.217)	test_acc_d   0.63 (  0.63)	test_minacc_d   0.61 (  0.61)	test_majacc_d   0.82 (  0.82)	test_corr_d   0.20 (  0.20)
Overall Timing[ 46/  1]	epoch_time 0.0432 (0.0419)	validation_time 0.0003 (0.0006)	train_time 0.0428 (0.0413)
record: (train_acc, test_acc) (0.8255000236034393, 0.6360000371932983)
last accs (train_acc, test_acc) (0.8283000265955925, 0.6340000033378601)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 19.00it/s] 23%|##3       | 6/26 [00:00<00:00, 29.03it/s] 38%|###8      | 10/26 [00:00<00:00, 31.86it/s] 54%|#####3    | 14/26 [00:00<00:00, 33.40it/s] 69%|######9   | 18/26 [00:00<00:00, 33.00it/s] 85%|########4 | 22/26 [00:00<00:00, 33.97it/s]100%|##########| 26/26 [00:00<00:00, 34.29it/s]100%|##########| 26/26 [00:00<00:00, 30.57it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1222 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1223 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1224 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1225 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1226 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1227 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1228 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1229 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1230 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1231 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1232 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1233 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1234 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1235 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1236 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1237 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1238 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1239 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1240 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1241 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1242 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1243 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1244 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1245 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1246 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1247 400
penalty weights 10000.0
Epoch: [47][  26/  26]	Loss 0.000 (0.000)	train_nll   0.27 (  0.28)	train_penalty   0.00 (  0.00)	weight_norm  25.87 ( 25.87)	train_acc   0.82 (  0.83)	train_minacc   0.94 (  0.94)	train_majacc   0.81 (  0.81)	train_corr   0.00 (  0.00)	l1 8.4185 (8.5177)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.28it/s] 23%|##3       | 6/26 [00:00<00:00, 30.31it/s]                                               23%|##3       | 6/26 [00:00<00:00, 30.31it/s] 42%|####2     | 11/26 [00:00<00:00, 37.28it/s] 62%|######1   | 16/26 [00:00<00:00, 40.69it/s]                                                62%|######1   | 16/26 [00:00<00:00, 40.69it/s] 81%|########  | 21/26 [00:00<00:00, 39.57it/s]100%|##########| 26/26 [00:00<00:00, 42.50it/s]100%|##########| 26/26 [00:00<00:00, 35.37it/s]
Test: [   0/  26]	Loss 0.281 (0.281)	test_acc   0.82 (  0.82)	test_minacc   0.91 (  0.91)	test_majacc   0.80 (  0.80)	Loss_d 0.281 (0.281)	test_acc_d   0.82 (  0.82)	test_minacc_d   0.91 (  0.91)	test_majacc_d   0.80 (  0.80)	test_corr_d   0.73 (  0.73)
Test: [  10/  26]	Loss 0.265 (0.275)	test_acc   0.85 (  0.83)	test_minacc   0.92 (  0.93)	test_majacc   0.84 (  0.82)	Loss_d 0.265 (0.275)	test_acc_d   0.85 (  0.83)	test_minacc_d   0.92 (  0.93)	test_majacc_d   0.84 (  0.82)	test_corr_d   0.75 (  0.72)
Test: [  20/  26]	Loss 0.287 (0.277)	test_acc   0.83 (  0.83)	test_minacc   0.96 (  0.94)	test_majacc   0.80 (  0.81)	Loss_d 0.287 (0.277)	test_acc_d   0.83 (  0.83)	test_minacc_d   0.96 (  0.94)	test_majacc_d   0.80 (  0.81)	test_corr_d   0.68 (  0.71)
Test: [  26/  26]	Loss 0.266 (0.277)	test_acc   0.82 (  0.83)	test_minacc   0.94 (  0.94)	test_majacc   0.81 (  0.81)	Loss_d 0.266 (0.277)	test_acc_d   0.82 (  0.83)	test_minacc_d   0.94 (  0.94)	test_majacc_d   0.81 (  0.81)	test_corr_d   0.73 (  0.71)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 52.14it/s]
Test: [  0/  1]	Loss 2.225 (2.225)	test_acc   0.63 (  0.63)	test_minacc   0.61 (  0.61)	test_majacc   0.83 (  0.83)	Loss_d 2.225 (2.225)	test_acc_d   0.63 (  0.63)	test_minacc_d   0.61 (  0.61)	test_majacc_d   0.83 (  0.83)	test_corr_d   0.23 (  0.23)
Test: [  1/  1]	Loss 2.225 (2.225)	test_acc   0.63 (  0.63)	test_minacc   0.61 (  0.61)	test_majacc   0.83 (  0.83)	Loss_d 2.225 (2.225)	test_acc_d   0.63 (  0.63)	test_minacc_d   0.61 (  0.61)	test_majacc_d   0.83 (  0.83)	test_corr_d   0.23 (  0.23)
Overall Timing[ 47/  1]	epoch_time 0.0429 (0.0419)	validation_time 0.0005 (0.0006)	train_time 0.0424 (0.0413)
record: (train_acc, test_acc) (0.8255000236034393, 0.6360000371932983)
last accs (train_acc, test_acc) (0.8315000310540199, 0.6290000081062317)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:05,  4.54it/s] 19%|#9        | 5/26 [00:00<00:01, 17.32it/s] 35%|###4      | 9/26 [00:00<00:00, 24.04it/s] 50%|#####     | 13/26 [00:00<00:00, 27.95it/s] 65%|######5   | 17/26 [00:00<00:00, 30.36it/s] 81%|########  | 21/26 [00:00<00:00, 31.82it/s] 96%|#########6| 25/26 [00:00<00:00, 33.21it/s]100%|##########| 26/26 [00:00<00:00, 26.53it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1248 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1249 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1250 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1251 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1252 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1253 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1254 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1255 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1256 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1257 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1258 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1259 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1260 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1261 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1262 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1263 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1264 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1265 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1266 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1267 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1268 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1269 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1270 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1271 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1272 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1273 400
penalty weights 10000.0
Epoch: [48][  26/  26]	Loss 0.000 (0.000)	train_nll   0.27 (  0.28)	train_penalty   0.00 (  0.00)	weight_norm  25.87 ( 25.87)	train_acc   0.81 (  0.83)	train_minacc   0.94 (  0.94)	train_majacc   0.79 (  0.81)	train_corr   0.00 (  0.00)	l1 8.5209 (8.4881)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 16.12it/s] 27%|##6       | 7/26 [00:00<00:00, 32.62it/s]                                               27%|##6       | 7/26 [00:00<00:00, 32.62it/s] 46%|####6     | 12/26 [00:00<00:00, 38.42it/s] 65%|######5   | 17/26 [00:00<00:00, 42.39it/s]                                                65%|######5   | 17/26 [00:00<00:00, 42.39it/s] 85%|########4 | 22/26 [00:00<00:00, 40.55it/s]100%|##########| 26/26 [00:00<00:00, 37.85it/s]
Test: [   0/  26]	Loss 0.287 (0.287)	test_acc   0.81 (  0.81)	test_minacc   0.89 (  0.89)	test_majacc   0.80 (  0.80)	Loss_d 0.287 (0.287)	test_acc_d   0.81 (  0.81)	test_minacc_d   0.89 (  0.89)	test_majacc_d   0.80 (  0.80)	test_corr_d   0.72 (  0.72)
Test: [  10/  26]	Loss 0.269 (0.280)	test_acc   0.85 (  0.83)	test_minacc   0.92 (  0.93)	test_majacc   0.84 (  0.81)	Loss_d 0.269 (0.280)	test_acc_d   0.85 (  0.83)	test_minacc_d   0.92 (  0.93)	test_majacc_d   0.84 (  0.81)	test_corr_d   0.74 (  0.71)
Test: [  20/  26]	Loss 0.287 (0.281)	test_acc   0.83 (  0.83)	test_minacc   0.96 (  0.94)	test_majacc   0.80 (  0.81)	Loss_d 0.287 (0.281)	test_acc_d   0.83 (  0.83)	test_minacc_d   0.96 (  0.94)	test_majacc_d   0.80 (  0.81)	test_corr_d   0.67 (  0.70)
Test: [  26/  26]	Loss 0.271 (0.280)	test_acc   0.81 (  0.83)	test_minacc   0.94 (  0.94)	test_majacc   0.79 (  0.81)	Loss_d 0.271 (0.280)	test_acc_d   0.81 (  0.83)	test_minacc_d   0.94 (  0.94)	test_majacc_d   0.79 (  0.81)	test_corr_d   0.72 (  0.70)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 65.15it/s]
Test: [  0/  1]	Loss 2.236 (2.236)	test_acc   0.63 (  0.63)	test_minacc   0.61 (  0.61)	test_majacc   0.83 (  0.83)	Loss_d 2.236 (2.236)	test_acc_d   0.63 (  0.63)	test_minacc_d   0.61 (  0.61)	test_majacc_d   0.83 (  0.83)	test_corr_d   0.21 (  0.21)
Test: [  1/  1]	Loss 2.236 (2.236)	test_acc   0.63 (  0.63)	test_minacc   0.61 (  0.61)	test_majacc   0.83 (  0.83)	Loss_d 2.236 (2.236)	test_acc_d   0.63 (  0.63)	test_minacc_d   0.61 (  0.61)	test_majacc_d   0.83 (  0.83)	test_corr_d   0.21 (  0.21)
Overall Timing[ 48/  1]	epoch_time 0.0376 (0.0418)	validation_time 0.0003 (0.0006)	train_time 0.0373 (0.0412)
record: (train_acc, test_acc) (0.8255000236034393, 0.6360000371932983)
last accs (train_acc, test_acc) (0.8297000247240066, 0.6330000162124634)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.90it/s] 19%|#9        | 5/26 [00:00<00:00, 22.20it/s] 35%|###4      | 9/26 [00:00<00:00, 27.46it/s] 50%|#####     | 13/26 [00:00<00:00, 30.92it/s] 65%|######5   | 17/26 [00:00<00:00, 32.95it/s] 81%|########  | 21/26 [00:00<00:00, 34.33it/s] 96%|#########6| 25/26 [00:00<00:00, 34.34it/s]100%|##########| 26/26 [00:00<00:00, 29.15it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1274 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1275 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1276 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1277 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1278 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1279 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1280 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1281 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1282 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1283 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1284 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1285 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1286 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1287 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1288 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1289 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1290 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1291 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1292 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1293 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1294 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1295 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1296 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1297 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1298 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1299 400
penalty weights 10000.0
Epoch: [49][  26/  26]	Loss 0.000 (0.000)	train_nll   0.27 (  0.28)	train_penalty   0.00 (  0.00)	weight_norm  25.87 ( 25.87)	train_acc   0.81 (  0.83)	train_minacc   0.94 (  0.94)	train_majacc   0.79 (  0.81)	train_corr   0.00 (  0.00)	l1 8.5441 (8.4707)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.15it/s] 23%|##3       | 6/26 [00:00<00:00, 28.26it/s]                                               23%|##3       | 6/26 [00:00<00:00, 28.26it/s] 42%|####2     | 11/26 [00:00<00:00, 35.76it/s] 62%|######1   | 16/26 [00:00<00:00, 40.55it/s]                                                62%|######1   | 16/26 [00:00<00:00, 40.55it/s] 81%|########  | 21/26 [00:00<00:00, 39.36it/s]100%|##########| 26/26 [00:00<00:00, 42.24it/s]100%|##########| 26/26 [00:00<00:00, 34.80it/s]
Test: [   0/  26]	Loss 0.285 (0.285)	test_acc   0.81 (  0.81)	test_minacc   0.89 (  0.89)	test_majacc   0.80 (  0.80)	Loss_d 0.285 (0.285)	test_acc_d   0.81 (  0.81)	test_minacc_d   0.89 (  0.89)	test_majacc_d   0.80 (  0.80)	test_corr_d   0.72 (  0.72)
Test: [  10/  26]	Loss 0.272 (0.280)	test_acc   0.85 (  0.83)	test_minacc   0.92 (  0.93)	test_majacc   0.84 (  0.81)	Loss_d 0.272 (0.280)	test_acc_d   0.85 (  0.83)	test_minacc_d   0.92 (  0.93)	test_majacc_d   0.84 (  0.81)	test_corr_d   0.73 (  0.70)
Test: [  20/  26]	Loss 0.288 (0.282)	test_acc   0.83 (  0.83)	test_minacc   0.96 (  0.94)	test_majacc   0.81 (  0.81)	Loss_d 0.288 (0.282)	test_acc_d   0.83 (  0.83)	test_minacc_d   0.96 (  0.94)	test_majacc_d   0.81 (  0.81)	test_corr_d   0.67 (  0.69)
Test: [  26/  26]	Loss 0.271 (0.281)	test_acc   0.81 (  0.83)	test_minacc   0.94 (  0.94)	test_majacc   0.79 (  0.81)	Loss_d 0.271 (0.281)	test_acc_d   0.81 (  0.83)	test_minacc_d   0.94 (  0.94)	test_majacc_d   0.79 (  0.81)	test_corr_d   0.71 (  0.69)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 56.15it/s]
Test: [  0/  1]	Loss 2.235 (2.235)	test_acc   0.63 (  0.63)	test_minacc   0.61 (  0.61)	test_majacc   0.82 (  0.82)	Loss_d 2.235 (2.235)	test_acc_d   0.63 (  0.63)	test_minacc_d   0.61 (  0.61)	test_majacc_d   0.82 (  0.82)	test_corr_d   0.20 (  0.20)
Test: [  1/  1]	Loss 2.235 (2.235)	test_acc   0.63 (  0.63)	test_minacc   0.61 (  0.61)	test_majacc   0.82 (  0.82)	Loss_d 2.235 (2.235)	test_acc_d   0.63 (  0.63)	test_minacc_d   0.61 (  0.61)	test_majacc_d   0.82 (  0.82)	test_corr_d   0.20 (  0.20)
Overall Timing[ 49/  1]	epoch_time 0.0373 (0.0417)	validation_time 0.0005 (0.0005)	train_time 0.0369 (0.0411)
record: (train_acc, test_acc) (0.8255000236034393, 0.6360000371932983)
last accs (train_acc, test_acc) (0.8285000224709511, 0.6330000162124634)
done saving aggregate.csv to ./aggregate.csv
wandb: - 0.170 MB of 0.170 MB uploadedwandb: \ 0.170 MB of 0.170 MB uploadedThread SenderThread:
Traceback (most recent call last):
  File "/home/zd16/scratch/mypython3/wandb/sdk/internal/internal_util.py", line 48, in run
    self._run()
  File "/home/zd16/scratch/mypython3/wandb/sdk/internal/internal_util.py", line 99, in _run
    self._process(record)
  File "/home/zd16/scratch/mypython3/wandb/sdk/internal/internal.py", line 327, in _process
    self._sm.send(record)
  File "/home/zd16/scratch/mypython3/wandb/sdk/internal/sender.py", line 398, in send
    send_handler(record)
  File "/home/zd16/scratch/mypython3/wandb/sdk/internal/sender.py", line 420, in send_request
    send_handler(record)
  File "/home/zd16/scratch/mypython3/wandb/sdk/internal/sender.py", line 654, in send_request_defer
    self._flush_job()
  File "/home/zd16/scratch/mypython3/wandb/sdk/internal/sender.py", line 1706, in _flush_job
    artifact = self._job_builder.build(api=self._api)
  File "/home/zd16/scratch/mypython3/wandb/sdk/internal/job_builder.py", line 552, in build
    artifact.add_file(
  File "/home/zd16/scratch/mypython3/wandb/sdk/artifacts/artifact.py", line 1196, in add_file
    return self._add_local_file(
  File "/home/zd16/scratch/mypython3/wandb/sdk/artifacts/artifact.py", line 1459, in _add_local_file
    with tempfile.NamedTemporaryFile(dir=get_staging_dir(), delete=False) as f:
  File "/usr/local/python/3.9.16/lib/python3.9/tempfile.py", line 545, in NamedTemporaryFile
    (fd, name) = _mkstemp_inner(dir, prefix, suffix, flags, output_type)
  File "/usr/local/python/3.9.16/lib/python3.9/tempfile.py", line 255, in _mkstemp_inner
    fd = _os.open(file, flags, 0o600)
OSError: [Errno 122] Disk quota exceeded: '/home/zd16/.local/share/wandb/artifacts/staging/tmpi0dv57ws'
wandb: ERROR Internal wandb error: file data was not synced
wandb: Currently logged in as: janezdu (janezdu-uiuc). Use `wandb login --relogin` to force relogin
wandb: wandb version 0.17.9 is available!  To upgrade, please run:
wandb:  $ pip install wandb --upgrade
wandb: Tracking run with wandb version 0.17.7
wandb: Run data is saved locally in /scratch/users/zd16/sparseIRM-resnet-ver/wandb/run-20240907_203715-qo82rq31
wandb: Run `wandb offline` to turn off syncing.
wandb: Syncing run name_random
wandb: ⭐️ View project at https://wandb.ai/janezdu-uiuc/irm
wandb: 🚀 View run at https://wandb.ai/janezdu-uiuc/irm/runs/qo82rq31
=> Reading YAML config from configs/smallscale/resnet18/resnet18-usc-unsigned.yaml
Namespace(data='dataset/', optimizer='adam', weight_opt='adam', set='mnistcifar', arch='ResNet18', config='configs/smallscale/resnet18/resnet18-usc-unsigned.yaml', log_dir=None, workers=4, epochs=50, start_epoch=None, batch_size=390, lr=0.006, warmup_length=0, momentum=0.9, weight_decay=0.0, print_freq=10, num_classes=1, resume='', resume_train_weights='', evaluate=False, pretrained=None, pretrained_distill=None, alpha_distill=0.95, T_distill=2, seed=0, multigpu=[0], lr_policy='cosine_lr', lr_adjust=30, lr_gamma=0.1, name='baseline', save_every=-1, prune_rate=1.0, param_prune_rate=0.0, pr_start=1.0, low_data=1, width_mult=1.0, nesterov=False, threetimes=False, random_subnet=False, one_batch=False, conv_type='DenseConv', freeze_weights=False, st=False, mode='fan_in', nonlinearity='relu', bn_type='LearnedBatchNorm', init='kaiming_normal', no_bn_decay=False, scale_fan=False, first_layer_dense=False, last_layer_dense=True, approx=False, zero=False, flip=False, bs=False, gumbel_sample=False, multiply_prob=False, no_multiply=False, multiply_cont=False, multiply_prob_bs=False, indiv=False, label_smoothing=None, first_layer_type=None, trainer='default', score_init_constant=1.0, K=1, update_freq=20, D=0.01, T=1, TA=True, TA2=False, TA_grow=False, center=False, straight_through=False, PLA_factor=0.1, PLA_patience=10, gradient_loss_para=0, abs_loss_para=0, thres=0.9, runs_name='name_random', resume_compare_loss1='', resume_compare_loss2='', init_weights='', trained_mask='', weight_rescaling=False, constrain_by_layer=False, weight_rescaling_data=False, use_running_stats=False, not_clipping=False, rescaling_para=False, lasso_para=0, dont_freeze_weights=False, iterative=True, prob_by_weight=False, rescale_at_fix_subnet=False, train_weights_at_the_same_time=False, sample_from_training_set=False, load_true_para=False, distill=False, finetune=False, stablize=False, prev_best=0, weight_opt_lr=0.0006, n=500, ts=0.28, te=0.6, d=20000, s=80, c=0.75, init_prob=False, thres_before=0.001, wide_ratio=0.001, noise=1, cal_p_q=False, just_finetune=False, snip=False, envs_num=2, l2_regularizer_weight=0.001, data_num=50000, env_type='linear', irm_type='irmv1', hidden_dim=390, penalty_anneal_iters=400, penalty_weight=10000.0, grayscale_model=0, weight_lr_schedule=False, fix_subnet=False, freeze_weight=False, step='ours', prior_sd_coef=0, dim_inv=2, variance_gamma=1.0, dim_spu=10, image_scale=32, cons_ratio='0.999_0.7_0.1', noise_ratio=0.2, step_gamma=0.1, step_round=3, inner_steps=1, use_pgd=False, z=15.0, pgd_anneal_iters=600, pgd_skip_steps=50, fraction_z=0.95)
=> Creating model 'ResNet18'
Here!!!!!!!!
==> Conv Type: DenseConv
==> BN Type: LearnedBatchNorm
<class 'torch.nn.modules.conv.Conv2d'>
<class 'torch.nn.modules.batchnorm.BatchNorm2d'>
==> Building first layer with <class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
ResNet(
  (conv1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
  (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (relu): ReLU(inplace=True)
  (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
  (layer1): Sequential(
    (0): BasicBlock(
      (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (1): BasicBlock(
      (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (layer2): Sequential(
    (0): BasicBlock(
      (conv1): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (downsample): Sequential(
        (0): Conv2d(64, 128, kernel_size=(1, 1), stride=(2, 2), bias=False)
        (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (1): BasicBlock(
      (conv1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (layer3): Sequential(
    (0): BasicBlock(
      (conv1): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (downsample): Sequential(
        (0): Conv2d(128, 256, kernel_size=(1, 1), stride=(2, 2), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (1): BasicBlock(
      (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (layer4): Sequential(
    (0): BasicBlock(
      (conv1): Conv2d(256, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (downsample): Sequential(
        (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (1): BasicBlock(
      (conv1): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (avgpool): AdaptiveAvgPool2d(output_size=1)
  (fc): Conv2d(512, 1, kernel_size=(1, 1), stride=(1, 1), bias=False)
)
=> Parallelizing on [0] gpus
<DEBUG> gradient to module.conv1.weight
<DEBUG> gradient to module.bn1.weight
<DEBUG> gradient to module.bn1.bias
<DEBUG> gradient to module.layer1.0.conv1.weight
<DEBUG> gradient to module.layer1.0.bn1.weight
<DEBUG> gradient to module.layer1.0.bn1.bias
<DEBUG> gradient to module.layer1.0.conv2.weight
<DEBUG> gradient to module.layer1.0.bn2.weight
<DEBUG> gradient to module.layer1.0.bn2.bias
<DEBUG> gradient to module.layer1.1.conv1.weight
<DEBUG> gradient to module.layer1.1.bn1.weight
<DEBUG> gradient to module.layer1.1.bn1.bias
<DEBUG> gradient to module.layer1.1.conv2.weight
<DEBUG> gradient to module.layer1.1.bn2.weight
<DEBUG> gradient to module.layer1.1.bn2.bias
<DEBUG> gradient to module.layer2.0.conv1.weight
<DEBUG> gradient to module.layer2.0.bn1.weight
<DEBUG> gradient to module.layer2.0.bn1.bias
<DEBUG> gradient to module.layer2.0.conv2.weight
<DEBUG> gradient to module.layer2.0.bn2.weight
<DEBUG> gradient to module.layer2.0.bn2.bias
<DEBUG> gradient to module.layer2.0.downsample.0.weight
<DEBUG> gradient to module.layer2.0.downsample.1.weight
<DEBUG> gradient to module.layer2.0.downsample.1.bias
<DEBUG> gradient to module.layer2.1.conv1.weight
<DEBUG> gradient to module.layer2.1.bn1.weight
<DEBUG> gradient to module.layer2.1.bn1.bias
<DEBUG> gradient to module.layer2.1.conv2.weight
<DEBUG> gradient to module.layer2.1.bn2.weight
<DEBUG> gradient to module.layer2.1.bn2.bias
<DEBUG> gradient to module.layer3.0.conv1.weight
<DEBUG> gradient to module.layer3.0.bn1.weight
<DEBUG> gradient to module.layer3.0.bn1.bias
<DEBUG> gradient to module.layer3.0.conv2.weight
<DEBUG> gradient to module.layer3.0.bn2.weight
<DEBUG> gradient to module.layer3.0.bn2.bias
<DEBUG> gradient to module.layer3.0.downsample.0.weight
<DEBUG> gradient to module.layer3.0.downsample.1.weight
<DEBUG> gradient to module.layer3.0.downsample.1.bias
<DEBUG> gradient to module.layer3.1.conv1.weight
<DEBUG> gradient to module.layer3.1.bn1.weight
<DEBUG> gradient to module.layer3.1.bn1.bias
<DEBUG> gradient to module.layer3.1.conv2.weight
<DEBUG> gradient to module.layer3.1.bn2.weight
<DEBUG> gradient to module.layer3.1.bn2.bias
<DEBUG> gradient to module.layer4.0.conv1.weight
<DEBUG> gradient to module.layer4.0.bn1.weight
<DEBUG> gradient to module.layer4.0.bn1.bias
<DEBUG> gradient to module.layer4.0.conv2.weight
<DEBUG> gradient to module.layer4.0.bn2.weight
<DEBUG> gradient to module.layer4.0.bn2.bias
<DEBUG> gradient to module.layer4.0.downsample.0.weight
<DEBUG> gradient to module.layer4.0.downsample.1.weight
<DEBUG> gradient to module.layer4.0.downsample.1.bias
<DEBUG> gradient to module.layer4.1.conv1.weight
<DEBUG> gradient to module.layer4.1.bn1.weight
<DEBUG> gradient to module.layer4.1.bn1.bias
<DEBUG> gradient to module.layer4.1.conv2.weight
<DEBUG> gradient to module.layer4.1.bn2.weight
<DEBUG> gradient to module.layer4.1.bn2.bias
<DEBUG> gradient to module.fc.weight
Files already downloaded and verified
Files already downloaded and verified
Adding Noise to Label, len(Y)=12000, Label_noise=1196
Xmp (7877, 3, 32, 32) (6903, 3, 32, 32)
Xcp (6014, 3, 32, 32) (5986, 3, 32, 32)
env=0 2497 2497 3 3
xn 2500 xp 2500
env=1 1750 1750 750 750
xn 2500 xp 2500
env=2 50 50 450 450
xn 500 xp 500
=> Creating model 'EBD'
EBD(
  (embedings): Embedding(2, 1)
)
=> Parallelizing on [0] gpus
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:01<00:38,  1.55s/it] 19%|#9        | 5/26 [00:01<00:05,  3.92it/s] 35%|###4      | 9/26 [00:01<00:02,  7.66it/s] 50%|#####     | 13/26 [00:01<00:01, 11.71it/s] 65%|######5   | 17/26 [00:01<00:00, 15.84it/s] 81%|########  | 21/26 [00:02<00:00, 19.88it/s] 96%|#########6| 25/26 [00:02<00:00, 23.54it/s]100%|##########| 26/26 [00:02<00:00,  9.95it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 0 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 2 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 3 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 4 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 5 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 6 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 7 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 8 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 9 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 10 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 11 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 12 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 13 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 14 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 15 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 16 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 17 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 18 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 19 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 20 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 21 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 22 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 23 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 24 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 25 400
penalty weights 0.0
Epoch: [0][  26/  26]	Loss 0.377 (0.502)	train_nll   0.38 (  0.50)	train_penalty   0.03 (  0.14)	weight_norm  20.92 ( 18.15)	train_acc   0.88 (  0.81)	train_minacc   0.03 (  0.07)	train_majacc   0.99 (  0.94)	train_corr   0.00 (  0.00)	l1 7.0300 (7.9379)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:00, 24.97it/s] 31%|###       | 8/26 [00:00<00:00, 37.55it/s]                                               31%|###       | 8/26 [00:00<00:00, 37.55it/s] 50%|#####     | 13/26 [00:00<00:00, 38.55it/s] 69%|######9   | 18/26 [00:00<00:00, 41.72it/s]                                                69%|######9   | 18/26 [00:00<00:00, 41.72it/s] 88%|########8 | 23/26 [00:00<00:00, 41.66it/s]100%|##########| 26/26 [00:00<00:00, 37.01it/s]
Test: [   0/  26]	Loss 0.421 (0.421)	test_acc   0.85 (  0.85)	test_minacc   0.05 (  0.05)	test_majacc   0.99 (  0.99)	Loss_d 0.421 (0.421)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.05 (  0.05)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.95 (  0.95)
Test: [  10/  26]	Loss 0.450 (0.406)	test_acc   0.82 (  0.85)	test_minacc   0.00 (  0.03)	test_majacc   0.99 (  0.99)	Loss_d 0.450 (0.406)	test_acc_d   0.82 (  0.85)	test_minacc_d   0.00 (  0.03)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.96 (  0.95)
Test: [  20/  26]	Loss 0.423 (0.413)	test_acc   0.84 (  0.85)	test_minacc   0.03 (  0.03)	test_majacc   0.99 (  0.99)	Loss_d 0.423 (0.413)	test_acc_d   0.84 (  0.85)	test_minacc_d   0.03 (  0.03)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.96 (  0.95)
Test: [  26/  26]	Loss 0.377 (0.418)	test_acc   0.87 (  0.84)	test_minacc   0.03 (  0.03)	test_majacc   0.98 (  0.99)	Loss_d 0.377 (0.418)	test_acc_d   0.87 (  0.84)	test_minacc_d   0.03 (  0.03)	test_majacc_d   0.98 (  0.99)	test_corr_d   0.95 (  0.95)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00,  2.49it/s]100%|##########| 1/1 [00:00<00:00,  2.49it/s]
Test: [  0/  1]	Loss 1.546 (1.546)	test_acc   0.12 (  0.12)	test_minacc   0.02 (  0.02)	test_majacc   0.99 (  0.99)	Loss_d 1.546 (1.546)	test_acc_d   0.12 (  0.12)	test_minacc_d   0.02 (  0.02)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.94 (  0.94)
Test: [  1/  1]	Loss 1.546 (1.546)	test_acc   0.12 (  0.12)	test_minacc   0.02 (  0.02)	test_majacc   0.99 (  0.99)	Loss_d 1.546 (1.546)	test_acc_d   0.12 (  0.12)	test_minacc_d   0.02 (  0.02)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.94 (  0.94)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/157/checkpoints/model_best.pth
Overall Timing[  0/  1]	epoch_time 0.0763 (0.0763)	validation_time 0.0068 (0.0068)	train_time 0.0661 (0.0661)
record: (train_acc, test_acc) (0.8435000252127648, 0.11700000613927841)
last accs (train_acc, test_acc) (0.8435000252127648, 0.11700000613927841)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.32it/s] 19%|#9        | 5/26 [00:00<00:00, 21.18it/s] 35%|###4      | 9/26 [00:00<00:00, 27.20it/s] 50%|#####     | 13/26 [00:00<00:00, 30.31it/s] 65%|######5   | 17/26 [00:00<00:00, 32.21it/s] 81%|########  | 21/26 [00:00<00:00, 33.24it/s] 96%|#########6| 25/26 [00:00<00:00, 33.98it/s]100%|##########| 26/26 [00:00<00:00, 28.39it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 26 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 27 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 28 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 29 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 30 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 31 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 32 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 33 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 34 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 35 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 36 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 37 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 38 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 39 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 40 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 41 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 42 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 43 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 44 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 45 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 46 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 47 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 48 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 49 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 50 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 51 400
penalty weights 0.0
Epoch: [1][  26/  26]	Loss 0.352 (0.402)	train_nll   0.35 (  0.40)	train_penalty   0.03 (  0.05)	weight_norm  22.04 ( 21.70)	train_acc   0.87 (  0.85)	train_minacc   0.00 (  0.02)	train_majacc   0.99 (  0.99)	train_corr   0.00 (  0.00)	l1 6.8909 (7.0023)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.34it/s]  8%|7         | 2/26 [00:00<00:03,  7.15it/s] 27%|##6       | 7/26 [00:00<00:00, 22.67it/s]                                               27%|##6       | 7/26 [00:00<00:00, 22.67it/s] 46%|####6     | 12/26 [00:00<00:00, 31.25it/s] 65%|######5   | 17/26 [00:00<00:00, 36.21it/s]                                                65%|######5   | 17/26 [00:00<00:00, 36.21it/s] 85%|########4 | 22/26 [00:00<00:00, 37.62it/s]100%|##########| 26/26 [00:00<00:00, 30.49it/s]
Test: [   0/  26]	Loss 0.398 (0.398)	test_acc   0.85 (  0.85)	test_minacc   0.03 (  0.03)	test_majacc   1.00 (  1.00)	Loss_d 0.398 (0.398)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.03 (  0.03)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.96 (  0.96)
Test: [  10/  26]	Loss 0.415 (0.374)	test_acc   0.82 (  0.86)	test_minacc   0.03 (  0.04)	test_majacc   0.99 (  0.99)	Loss_d 0.415 (0.374)	test_acc_d   0.82 (  0.86)	test_minacc_d   0.03 (  0.04)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.96 (  0.95)
Test: [  20/  26]	Loss 0.387 (0.382)	test_acc   0.84 (  0.85)	test_minacc   0.02 (  0.03)	test_majacc   0.99 (  0.99)	Loss_d 0.387 (0.382)	test_acc_d   0.84 (  0.85)	test_minacc_d   0.02 (  0.03)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.96 (  0.95)
Test: [  26/  26]	Loss 0.345 (0.387)	test_acc   0.87 (  0.85)	test_minacc   0.00 (  0.03)	test_majacc   0.99 (  0.99)	Loss_d 0.345 (0.387)	test_acc_d   0.87 (  0.85)	test_minacc_d   0.00 (  0.03)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.96 (  0.95)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 65.31it/s]
Test: [  0/  1]	Loss 1.612 (1.612)	test_acc   0.11 (  0.11)	test_minacc   0.02 (  0.02)	test_majacc   0.99 (  0.99)	Loss_d 1.612 (1.612)	test_acc_d   0.11 (  0.11)	test_minacc_d   0.02 (  0.02)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.92 (  0.92)
Test: [  1/  1]	Loss 1.612 (1.612)	test_acc   0.11 (  0.11)	test_minacc   0.02 (  0.02)	test_majacc   0.99 (  0.99)	Loss_d 1.612 (1.612)	test_acc_d   0.11 (  0.11)	test_minacc_d   0.02 (  0.02)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.92 (  0.92)
Overall Timing[  1/  1]	epoch_time 0.0441 (0.0602)	validation_time 0.0004 (0.0036)	train_time 0.0437 (0.0549)
record: (train_acc, test_acc) (0.8435000252127648, 0.11700000613927841)
last accs (train_acc, test_acc) (0.8477000272870063, 0.11400000751018524)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.54it/s] 19%|#9        | 5/26 [00:00<00:00, 22.87it/s] 35%|###4      | 9/26 [00:00<00:00, 28.03it/s] 50%|#####     | 13/26 [00:00<00:00, 30.19it/s] 65%|######5   | 17/26 [00:00<00:00, 31.97it/s] 81%|########  | 21/26 [00:00<00:00, 33.19it/s] 96%|#########6| 25/26 [00:00<00:00, 33.67it/s]100%|##########| 26/26 [00:00<00:00, 28.50it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 52 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 53 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 54 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 55 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 56 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 57 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 58 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 59 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 60 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 61 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 62 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 63 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 64 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 65 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 66 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 67 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 68 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 69 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 70 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 71 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 72 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 73 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 74 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 75 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 76 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 77 400
penalty weights 0.0
Epoch: [2][  26/  26]	Loss 0.322 (0.382)	train_nll   0.32 (  0.38)	train_penalty   0.02 (  0.04)	weight_norm  22.18 ( 22.13)	train_acc   0.87 (  0.85)	train_minacc   0.14 (  0.05)	train_majacc   0.97 (  0.99)	train_corr   0.00 (  0.00)	l1 6.9467 (6.9663)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.32it/s] 23%|##3       | 6/26 [00:00<00:00, 24.22it/s]                                               23%|##3       | 6/26 [00:00<00:00, 24.22it/s] 42%|####2     | 11/26 [00:00<00:00, 32.80it/s] 62%|######1   | 16/26 [00:00<00:00, 37.84it/s]                                                62%|######1   | 16/26 [00:00<00:00, 37.84it/s] 81%|########  | 21/26 [00:00<00:00, 35.45it/s]100%|##########| 26/26 [00:00<00:00, 31.91it/s]
Test: [   0/  26]	Loss 0.367 (0.367)	test_acc   0.84 (  0.84)	test_minacc   0.15 (  0.15)	test_majacc   0.97 (  0.97)	Loss_d 0.367 (0.367)	test_acc_d   0.84 (  0.84)	test_minacc_d   0.15 (  0.15)	test_majacc_d   0.97 (  0.97)	test_corr_d   0.90 (  0.90)
Test: [  10/  26]	Loss 0.372 (0.355)	test_acc   0.84 (  0.86)	test_minacc   0.16 (  0.18)	test_majacc   0.98 (  0.97)	Loss_d 0.372 (0.355)	test_acc_d   0.84 (  0.86)	test_minacc_d   0.16 (  0.18)	test_majacc_d   0.98 (  0.97)	test_corr_d   0.92 (  0.91)
Test: [  20/  26]	Loss 0.369 (0.362)	test_acc   0.84 (  0.85)	test_minacc   0.18 (  0.17)	test_majacc   0.97 (  0.97)	Loss_d 0.369 (0.362)	test_acc_d   0.84 (  0.85)	test_minacc_d   0.18 (  0.17)	test_majacc_d   0.97 (  0.97)	test_corr_d   0.90 (  0.91)
Test: [  26/  26]	Loss 0.319 (0.365)	test_acc   0.86 (  0.85)	test_minacc   0.10 (  0.16)	test_majacc   0.96 (  0.97)	Loss_d 0.319 (0.365)	test_acc_d   0.86 (  0.85)	test_minacc_d   0.10 (  0.16)	test_majacc_d   0.96 (  0.97)	test_corr_d   0.92 (  0.91)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.22it/s]
Test: [  0/  1]	Loss 1.516 (1.516)	test_acc   0.23 (  0.23)	test_minacc   0.15 (  0.15)	test_majacc   0.95 (  0.95)	Loss_d 1.516 (1.516)	test_acc_d   0.23 (  0.23)	test_minacc_d   0.15 (  0.15)	test_majacc_d   0.95 (  0.95)	test_corr_d   0.78 (  0.78)
Test: [  1/  1]	Loss 1.516 (1.516)	test_acc   0.23 (  0.23)	test_minacc   0.15 (  0.15)	test_majacc   0.95 (  0.95)	Loss_d 1.516 (1.516)	test_acc_d   0.23 (  0.23)	test_minacc_d   0.15 (  0.15)	test_majacc_d   0.95 (  0.95)	test_corr_d   0.78 (  0.78)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/157/checkpoints/model_best.pth
Overall Timing[  2/  1]	epoch_time 0.0439 (0.0548)	validation_time 0.0004 (0.0025)	train_time 0.0435 (0.0511)
record: (train_acc, test_acc) (0.8461000199913978, 0.22600001096725464)
last accs (train_acc, test_acc) (0.8461000199913978, 0.22600001096725464)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:06,  4.07it/s] 15%|#5        | 4/26 [00:00<00:01, 13.02it/s] 31%|###       | 8/26 [00:00<00:00, 21.48it/s] 42%|####2     | 11/26 [00:00<00:00, 23.67it/s] 58%|#####7    | 15/26 [00:00<00:00, 28.21it/s] 73%|#######3  | 19/26 [00:00<00:00, 30.40it/s] 88%|########8 | 23/26 [00:00<00:00, 31.86it/s]100%|##########| 26/26 [00:01<00:00, 24.81it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 78 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 79 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 80 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 81 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 82 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 83 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 84 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 85 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 86 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 87 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 88 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 89 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 90 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 91 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 92 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 93 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 94 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 95 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 96 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 97 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 98 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 99 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 100 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 101 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 102 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 103 400
penalty weights 0.0
Epoch: [3][  26/  26]	Loss 0.309 (0.361)	train_nll   0.31 (  0.36)	train_penalty   0.02 (  0.04)	weight_norm  22.23 ( 22.20)	train_acc   0.88 (  0.85)	train_minacc   0.10 (  0.13)	train_majacc   0.98 (  0.98)	train_corr   0.00 (  0.00)	l1 6.8438 (7.0322)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.17it/s] 19%|#9        | 5/26 [00:00<00:00, 24.93it/s] 38%|###8      | 10/26 [00:00<00:00, 33.21it/s]                                                38%|###8      | 10/26 [00:00<00:00, 33.21it/s] 62%|######1   | 16/26 [00:00<00:00, 37.11it/s]                                                62%|######1   | 16/26 [00:00<00:00, 37.11it/s] 81%|########  | 21/26 [00:00<00:00, 40.10it/s]100%|##########| 26/26 [00:00<00:00, 42.25it/s]100%|##########| 26/26 [00:00<00:00, 34.02it/s]
Test: [   0/  26]	Loss 0.352 (0.352)	test_acc   0.85 (  0.85)	test_minacc   0.02 (  0.02)	test_majacc   1.00 (  1.00)	Loss_d 0.352 (0.352)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.02 (  0.02)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.95 (  0.95)
Test: [  10/  26]	Loss 0.359 (0.335)	test_acc   0.84 (  0.86)	test_minacc   0.09 (  0.07)	test_majacc   1.00 (  1.00)	Loss_d 0.359 (0.335)	test_acc_d   0.84 (  0.86)	test_minacc_d   0.09 (  0.07)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.95 (  0.95)
Test: [  20/  26]	Loss 0.360 (0.341)	test_acc   0.85 (  0.86)	test_minacc   0.05 (  0.07)	test_majacc   1.00 (  1.00)	Loss_d 0.360 (0.341)	test_acc_d   0.85 (  0.86)	test_minacc_d   0.05 (  0.07)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.95 (  0.95)
Test: [  26/  26]	Loss 0.299 (0.345)	test_acc   0.89 (  0.86)	test_minacc   0.07 (  0.07)	test_majacc   1.00 (  0.99)	Loss_d 0.299 (0.345)	test_acc_d   0.89 (  0.86)	test_minacc_d   0.07 (  0.07)	test_majacc_d   1.00 (  0.99)	test_corr_d   0.95 (  0.95)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 64.92it/s]
Test: [  0/  1]	Loss 1.507 (1.507)	test_acc   0.15 (  0.15)	test_minacc   0.06 (  0.06)	test_majacc   1.00 (  1.00)	Loss_d 1.507 (1.507)	test_acc_d   0.15 (  0.15)	test_minacc_d   0.06 (  0.06)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.88 (  0.88)
Test: [  1/  1]	Loss 1.507 (1.507)	test_acc   0.15 (  0.15)	test_minacc   0.06 (  0.06)	test_majacc   1.00 (  1.00)	Loss_d 1.507 (1.507)	test_acc_d   0.15 (  0.15)	test_minacc_d   0.06 (  0.06)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.88 (  0.88)
Overall Timing[  3/  1]	epoch_time 0.0404 (0.0512)	validation_time 0.0004 (0.0020)	train_time 0.0400 (0.0483)
record: (train_acc, test_acc) (0.8461000199913978, 0.22600001096725464)
last accs (train_acc, test_acc) (0.8555000206828117, 0.15200001001358032)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.32it/s] 15%|#5        | 4/26 [00:00<00:01, 19.61it/s] 31%|###       | 8/26 [00:00<00:00, 26.94it/s] 46%|####6     | 12/26 [00:00<00:00, 30.37it/s] 62%|######1   | 16/26 [00:00<00:00, 32.46it/s] 77%|#######6  | 20/26 [00:00<00:00, 33.01it/s] 92%|#########2| 24/26 [00:00<00:00, 33.86it/s]100%|##########| 26/26 [00:00<00:00, 28.12it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 104 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 105 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 106 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 107 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 108 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 109 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 110 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 111 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 112 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 113 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 114 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 115 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 116 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 117 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 118 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 119 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 120 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 121 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 122 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 123 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 124 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 125 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 126 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 127 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 128 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 129 400
penalty weights 0.0
Epoch: [4][  26/  26]	Loss 0.302 (0.346)	train_nll   0.30 (  0.35)	train_penalty   0.01 (  0.03)	weight_norm  22.29 ( 22.26)	train_acc   0.86 (  0.86)	train_minacc   0.41 (  0.19)	train_majacc   0.92 (  0.97)	train_corr   0.00 (  0.00)	l1 6.8879 (7.0465)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.66it/s] 23%|##3       | 6/26 [00:00<00:00, 30.83it/s]                                               23%|##3       | 6/26 [00:00<00:00, 30.83it/s] 42%|####2     | 11/26 [00:00<00:00, 36.85it/s] 62%|######1   | 16/26 [00:00<00:00, 41.47it/s]                                                62%|######1   | 16/26 [00:00<00:00, 41.47it/s] 81%|########  | 21/26 [00:00<00:00, 38.21it/s]100%|##########| 26/26 [00:00<00:00, 41.16it/s]100%|##########| 26/26 [00:00<00:00, 34.79it/s]
Test: [   0/  26]	Loss 0.328 (0.328)	test_acc   0.85 (  0.85)	test_minacc   0.38 (  0.38)	test_majacc   0.93 (  0.93)	Loss_d 0.328 (0.328)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.38 (  0.38)	test_majacc_d   0.93 (  0.93)	test_corr_d   0.84 (  0.84)
Test: [  10/  26]	Loss 0.314 (0.315)	test_acc   0.85 (  0.87)	test_minacc   0.38 (  0.37)	test_majacc   0.95 (  0.95)	Loss_d 0.314 (0.315)	test_acc_d   0.85 (  0.87)	test_minacc_d   0.38 (  0.37)	test_majacc_d   0.95 (  0.95)	test_corr_d   0.85 (  0.86)
Test: [  20/  26]	Loss 0.342 (0.322)	test_acc   0.85 (  0.86)	test_minacc   0.40 (  0.37)	test_majacc   0.94 (  0.95)	Loss_d 0.342 (0.322)	test_acc_d   0.85 (  0.86)	test_minacc_d   0.40 (  0.37)	test_majacc_d   0.94 (  0.95)	test_corr_d   0.85 (  0.85)
Test: [  26/  26]	Loss 0.282 (0.324)	test_acc   0.88 (  0.86)	test_minacc   0.45 (  0.37)	test_majacc   0.94 (  0.95)	Loss_d 0.282 (0.324)	test_acc_d   0.88 (  0.86)	test_minacc_d   0.45 (  0.37)	test_majacc_d   0.94 (  0.95)	test_corr_d   0.87 (  0.85)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 60.87it/s]
Test: [  0/  1]	Loss 1.399 (1.399)	test_acc   0.37 (  0.37)	test_minacc   0.31 (  0.31)	test_majacc   0.90 (  0.90)	Loss_d 1.399 (1.399)	test_acc_d   0.37 (  0.37)	test_minacc_d   0.31 (  0.31)	test_majacc_d   0.90 (  0.90)	test_corr_d   0.57 (  0.57)
Test: [  1/  1]	Loss 1.399 (1.399)	test_acc   0.37 (  0.37)	test_minacc   0.31 (  0.31)	test_majacc   0.90 (  0.90)	Loss_d 1.399 (1.399)	test_acc_d   0.37 (  0.37)	test_minacc_d   0.31 (  0.31)	test_majacc_d   0.90 (  0.90)	test_corr_d   0.57 (  0.57)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/157/checkpoints/model_best.pth
Overall Timing[  4/  1]	epoch_time 0.0416 (0.0493)	validation_time 0.0003 (0.0017)	train_time 0.0413 (0.0469)
record: (train_acc, test_acc) (0.8594000235199928, 0.36900001764297485)
last accs (train_acc, test_acc) (0.8594000235199928, 0.36900001764297485)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.79it/s] 19%|#9        | 5/26 [00:00<00:01, 19.65it/s] 35%|###4      | 9/26 [00:00<00:00, 25.77it/s] 50%|#####     | 13/26 [00:00<00:00, 29.32it/s] 65%|######5   | 17/26 [00:00<00:00, 31.27it/s] 81%|########  | 21/26 [00:00<00:00, 32.37it/s] 96%|#########6| 25/26 [00:00<00:00, 33.48it/s]100%|##########| 26/26 [00:00<00:00, 27.63it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 130 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 131 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 132 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 133 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 134 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 135 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 136 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 137 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 138 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 139 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 140 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 141 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 142 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 143 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 144 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 145 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 146 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 147 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 148 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 149 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 150 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 151 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 152 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 153 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 154 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 155 400
penalty weights 0.0
Epoch: [5][  26/  26]	Loss 0.281 (0.325)	train_nll   0.28 (  0.32)	train_penalty   0.01 (  0.02)	weight_norm  22.35 ( 22.32)	train_acc   0.89 (  0.86)	train_minacc   0.41 (  0.27)	train_majacc   0.95 (  0.97)	train_corr   0.00 (  0.00)	l1 6.9596 (7.0949)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.97it/s] 23%|##3       | 6/26 [00:00<00:00, 25.90it/s]                                               23%|##3       | 6/26 [00:00<00:00, 25.90it/s] 42%|####2     | 11/26 [00:00<00:00, 34.37it/s] 62%|######1   | 16/26 [00:00<00:00, 39.03it/s]                                                62%|######1   | 16/26 [00:00<00:00, 39.03it/s] 81%|########  | 21/26 [00:00<00:00, 37.21it/s]100%|##########| 26/26 [00:00<00:00, 40.63it/s]100%|##########| 26/26 [00:00<00:00, 32.86it/s]
Test: [   0/  26]	Loss 0.321 (0.321)	test_acc   0.85 (  0.85)	test_minacc   0.32 (  0.32)	test_majacc   0.95 (  0.95)	Loss_d 0.321 (0.321)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.32 (  0.32)	test_majacc_d   0.95 (  0.95)	test_corr_d   0.87 (  0.87)
Test: [  10/  26]	Loss 0.311 (0.302)	test_acc   0.86 (  0.87)	test_minacc   0.31 (  0.32)	test_majacc   0.98 (  0.97)	Loss_d 0.311 (0.302)	test_acc_d   0.86 (  0.87)	test_minacc_d   0.31 (  0.32)	test_majacc_d   0.98 (  0.97)	test_corr_d   0.89 (  0.89)
Test: [  20/  26]	Loss 0.325 (0.307)	test_acc   0.85 (  0.87)	test_minacc   0.26 (  0.32)	test_majacc   0.97 (  0.97)	Loss_d 0.325 (0.307)	test_acc_d   0.85 (  0.87)	test_minacc_d   0.26 (  0.32)	test_majacc_d   0.97 (  0.97)	test_corr_d   0.88 (  0.89)
Test: [  26/  26]	Loss 0.277 (0.309)	test_acc   0.89 (  0.87)	test_minacc   0.38 (  0.32)	test_majacc   0.95 (  0.97)	Loss_d 0.277 (0.309)	test_acc_d   0.89 (  0.87)	test_minacc_d   0.38 (  0.32)	test_majacc_d   0.95 (  0.97)	test_corr_d   0.89 (  0.89)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.39it/s]
Test: [  0/  1]	Loss 1.447 (1.447)	test_acc   0.29 (  0.29)	test_minacc   0.22 (  0.22)	test_majacc   0.92 (  0.92)	Loss_d 1.447 (1.447)	test_acc_d   0.29 (  0.29)	test_minacc_d   0.22 (  0.22)	test_majacc_d   0.92 (  0.92)	test_corr_d   0.69 (  0.69)
Test: [  1/  1]	Loss 1.447 (1.447)	test_acc   0.29 (  0.29)	test_minacc   0.22 (  0.22)	test_majacc   0.92 (  0.92)	Loss_d 1.447 (1.447)	test_acc_d   0.29 (  0.29)	test_minacc_d   0.22 (  0.22)	test_majacc_d   0.92 (  0.92)	test_corr_d   0.69 (  0.69)
Overall Timing[  5/  1]	epoch_time 0.0433 (0.0483)	validation_time 0.0007 (0.0015)	train_time 0.0425 (0.0462)
record: (train_acc, test_acc) (0.8594000235199928, 0.36900001764297485)
last accs (train_acc, test_acc) (0.8686000233888627, 0.2939999997615814)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.96it/s] 19%|#9        | 5/26 [00:00<00:01, 20.56it/s] 35%|###4      | 9/26 [00:00<00:00, 26.41it/s] 50%|#####     | 13/26 [00:00<00:00, 29.47it/s] 65%|######5   | 17/26 [00:00<00:00, 31.67it/s] 81%|########  | 21/26 [00:00<00:00, 33.11it/s] 96%|#########6| 25/26 [00:00<00:00, 34.27it/s]100%|##########| 26/26 [00:00<00:00, 28.62it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 156 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 157 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 158 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 159 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 160 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 161 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 162 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 163 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 164 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 165 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 166 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 167 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 168 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 169 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 170 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 171 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 172 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 173 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 174 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 175 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 176 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 177 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 178 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 179 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 180 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 181 400
penalty weights 0.0
Epoch: [6][  26/  26]	Loss 0.261 (0.312)	train_nll   0.26 (  0.31)	train_penalty   0.01 (  0.02)	weight_norm  22.43 ( 22.39)	train_acc   0.88 (  0.87)	train_minacc   0.45 (  0.33)	train_majacc   0.93 (  0.96)	train_corr   0.00 (  0.00)	l1 6.9536 (7.1451)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.98it/s] 23%|##3       | 6/26 [00:00<00:00, 29.91it/s]                                               23%|##3       | 6/26 [00:00<00:00, 29.91it/s] 42%|####2     | 11/26 [00:00<00:00, 37.21it/s] 62%|######1   | 16/26 [00:00<00:00, 40.77it/s]                                                62%|######1   | 16/26 [00:00<00:00, 40.77it/s] 81%|########  | 21/26 [00:00<00:00, 39.01it/s]100%|##########| 26/26 [00:00<00:00, 41.96it/s]100%|##########| 26/26 [00:00<00:00, 34.92it/s]
Test: [   0/  26]	Loss 0.290 (0.290)	test_acc   0.87 (  0.87)	test_minacc   0.43 (  0.43)	test_majacc   0.95 (  0.95)	Loss_d 0.290 (0.290)	test_acc_d   0.87 (  0.87)	test_minacc_d   0.43 (  0.43)	test_majacc_d   0.95 (  0.95)	test_corr_d   0.86 (  0.86)
Test: [  10/  26]	Loss 0.281 (0.283)	test_acc   0.86 (  0.88)	test_minacc   0.38 (  0.39)	test_majacc   0.97 (  0.96)	Loss_d 0.281 (0.283)	test_acc_d   0.86 (  0.88)	test_minacc_d   0.38 (  0.39)	test_majacc_d   0.97 (  0.96)	test_corr_d   0.86 (  0.88)
Test: [  20/  26]	Loss 0.306 (0.286)	test_acc   0.85 (  0.88)	test_minacc   0.32 (  0.39)	test_majacc   0.95 (  0.96)	Loss_d 0.306 (0.286)	test_acc_d   0.85 (  0.88)	test_minacc_d   0.32 (  0.39)	test_majacc_d   0.95 (  0.96)	test_corr_d   0.88 (  0.87)
Test: [  26/  26]	Loss 0.247 (0.288)	test_acc   0.89 (  0.88)	test_minacc   0.41 (  0.39)	test_majacc   0.95 (  0.96)	Loss_d 0.247 (0.288)	test_acc_d   0.89 (  0.88)	test_minacc_d   0.41 (  0.39)	test_majacc_d   0.95 (  0.96)	test_corr_d   0.88 (  0.87)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 64.02it/s]
Test: [  0/  1]	Loss 1.545 (1.545)	test_acc   0.34 (  0.34)	test_minacc   0.27 (  0.27)	test_majacc   0.89 (  0.89)	Loss_d 1.545 (1.545)	test_acc_d   0.34 (  0.34)	test_minacc_d   0.27 (  0.27)	test_majacc_d   0.89 (  0.89)	test_corr_d   0.63 (  0.63)
Test: [  1/  1]	Loss 1.545 (1.545)	test_acc   0.34 (  0.34)	test_minacc   0.27 (  0.27)	test_majacc   0.89 (  0.89)	Loss_d 1.545 (1.545)	test_acc_d   0.34 (  0.34)	test_minacc_d   0.27 (  0.27)	test_majacc_d   0.89 (  0.89)	test_corr_d   0.63 (  0.63)
Overall Timing[  6/  1]	epoch_time 0.0407 (0.0472)	validation_time 0.0003 (0.0013)	train_time 0.0403 (0.0453)
record: (train_acc, test_acc) (0.8594000235199928, 0.36900001764297485)
last accs (train_acc, test_acc) (0.8753000241518021, 0.3360000252723694)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.81it/s] 19%|#9        | 5/26 [00:00<00:01, 19.86it/s] 35%|###4      | 9/26 [00:00<00:00, 25.92it/s] 50%|#####     | 13/26 [00:00<00:00, 29.12it/s] 65%|######5   | 17/26 [00:00<00:00, 31.49it/s] 81%|########  | 21/26 [00:00<00:00, 32.94it/s] 96%|#########6| 25/26 [00:00<00:00, 34.52it/s]100%|##########| 26/26 [00:00<00:00, 27.92it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 182 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 183 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 184 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 185 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 186 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 187 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 188 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 189 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 190 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 191 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 192 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 193 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 194 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 195 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 196 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 197 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 198 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 199 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 200 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 201 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 202 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 203 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 204 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 205 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 206 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 207 400
penalty weights 0.0
Epoch: [7][  26/  26]	Loss 0.255 (0.296)	train_nll   0.26 (  0.30)	train_penalty   0.00 (  0.02)	weight_norm  22.54 ( 22.49)	train_acc   0.88 (  0.87)	train_minacc   0.52 (  0.40)	train_majacc   0.93 (  0.96)	train_corr   0.00 (  0.00)	l1 7.0660 (7.2624)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.83it/s] 27%|##6       | 7/26 [00:00<00:00, 30.62it/s]                                               27%|##6       | 7/26 [00:00<00:00, 30.62it/s] 46%|####6     | 12/26 [00:00<00:00, 37.16it/s] 65%|######5   | 17/26 [00:00<00:00, 36.74it/s]                                                65%|######5   | 17/26 [00:00<00:00, 36.74it/s] 85%|########4 | 22/26 [00:00<00:00, 39.46it/s]100%|##########| 26/26 [00:00<00:00, 34.16it/s]
Test: [   0/  26]	Loss 0.292 (0.292)	test_acc   0.86 (  0.86)	test_minacc   0.47 (  0.47)	test_majacc   0.94 (  0.94)	Loss_d 0.292 (0.292)	test_acc_d   0.86 (  0.86)	test_minacc_d   0.47 (  0.47)	test_majacc_d   0.94 (  0.94)	test_corr_d   0.85 (  0.85)
Test: [  10/  26]	Loss 0.303 (0.279)	test_acc   0.86 (  0.88)	test_minacc   0.40 (  0.45)	test_majacc   0.96 (  0.96)	Loss_d 0.303 (0.279)	test_acc_d   0.86 (  0.88)	test_minacc_d   0.40 (  0.45)	test_majacc_d   0.96 (  0.96)	test_corr_d   0.86 (  0.87)
Test: [  20/  26]	Loss 0.288 (0.281)	test_acc   0.86 (  0.88)	test_minacc   0.42 (  0.45)	test_majacc   0.95 (  0.96)	Loss_d 0.288 (0.281)	test_acc_d   0.86 (  0.88)	test_minacc_d   0.42 (  0.45)	test_majacc_d   0.95 (  0.96)	test_corr_d   0.85 (  0.86)
Test: [  26/  26]	Loss 0.239 (0.282)	test_acc   0.90 (  0.88)	test_minacc   0.48 (  0.46)	test_majacc   0.95 (  0.96)	Loss_d 0.239 (0.282)	test_acc_d   0.90 (  0.88)	test_minacc_d   0.48 (  0.46)	test_majacc_d   0.95 (  0.96)	test_corr_d   0.88 (  0.86)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 60.82it/s]
Test: [  0/  1]	Loss 1.565 (1.565)	test_acc   0.36 (  0.36)	test_minacc   0.30 (  0.30)	test_majacc   0.90 (  0.90)	Loss_d 1.565 (1.565)	test_acc_d   0.36 (  0.36)	test_minacc_d   0.30 (  0.30)	test_majacc_d   0.90 (  0.90)	test_corr_d   0.60 (  0.60)
Test: [  1/  1]	Loss 1.565 (1.565)	test_acc   0.36 (  0.36)	test_minacc   0.30 (  0.30)	test_majacc   0.90 (  0.90)	Loss_d 1.565 (1.565)	test_acc_d   0.36 (  0.36)	test_minacc_d   0.30 (  0.30)	test_majacc_d   0.90 (  0.90)	test_corr_d   0.60 (  0.60)
Overall Timing[  7/  1]	epoch_time 0.0439 (0.0468)	validation_time 0.0005 (0.0012)	train_time 0.0434 (0.0451)
record: (train_acc, test_acc) (0.8594000235199928, 0.36900001764297485)
last accs (train_acc, test_acc) (0.8811000273823738, 0.3620000183582306)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.36it/s] 12%|#1        | 3/26 [00:00<00:01, 13.50it/s] 27%|##6       | 7/26 [00:00<00:00, 22.70it/s] 42%|####2     | 11/26 [00:00<00:00, 27.49it/s] 58%|#####7    | 15/26 [00:00<00:00, 30.50it/s] 73%|#######3  | 19/26 [00:00<00:00, 31.50it/s] 88%|########8 | 23/26 [00:00<00:00, 33.10it/s]100%|##########| 26/26 [00:00<00:00, 27.42it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 208 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 209 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 210 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 211 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 212 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 213 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 214 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 215 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 216 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 217 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 218 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 219 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 220 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 221 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 222 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 223 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 224 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 225 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 226 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 227 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 228 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 229 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 230 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 231 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 232 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 233 400
penalty weights 0.0
Epoch: [8][  26/  26]	Loss 0.249 (0.287)	train_nll   0.25 (  0.29)	train_penalty   0.00 (  0.01)	weight_norm  22.69 ( 22.61)	train_acc   0.88 (  0.88)	train_minacc   0.62 (  0.41)	train_majacc   0.91 (  0.96)	train_corr   0.00 (  0.00)	l1 7.2519 (7.2905)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.34it/s] 23%|##3       | 6/26 [00:00<00:00, 26.51it/s]                                               23%|##3       | 6/26 [00:00<00:00, 26.51it/s] 42%|####2     | 11/26 [00:00<00:00, 35.14it/s] 62%|######1   | 16/26 [00:00<00:00, 39.57it/s]                                                62%|######1   | 16/26 [00:00<00:00, 39.57it/s] 81%|########  | 21/26 [00:00<00:00, 39.04it/s]100%|##########| 26/26 [00:00<00:00, 34.34it/s]
Test: [   0/  26]	Loss 0.277 (0.277)	test_acc   0.87 (  0.87)	test_minacc   0.60 (  0.60)	test_majacc   0.92 (  0.92)	Loss_d 0.277 (0.277)	test_acc_d   0.87 (  0.87)	test_minacc_d   0.60 (  0.60)	test_majacc_d   0.92 (  0.92)	test_corr_d   0.80 (  0.80)
Test: [  10/  26]	Loss 0.250 (0.264)	test_acc   0.88 (  0.88)	test_minacc   0.63 (  0.61)	test_majacc   0.93 (  0.93)	Loss_d 0.250 (0.264)	test_acc_d   0.88 (  0.88)	test_minacc_d   0.63 (  0.61)	test_majacc_d   0.93 (  0.93)	test_corr_d   0.80 (  0.82)
Test: [  20/  26]	Loss 0.273 (0.266)	test_acc   0.87 (  0.88)	test_minacc   0.63 (  0.62)	test_majacc   0.91 (  0.93)	Loss_d 0.273 (0.266)	test_acc_d   0.87 (  0.88)	test_minacc_d   0.63 (  0.62)	test_majacc_d   0.91 (  0.93)	test_corr_d   0.79 (  0.81)
Test: [  26/  26]	Loss 0.224 (0.265)	test_acc   0.89 (  0.88)	test_minacc   0.62 (  0.63)	test_majacc   0.92 (  0.93)	Loss_d 0.224 (0.265)	test_acc_d   0.89 (  0.88)	test_minacc_d   0.62 (  0.63)	test_majacc_d   0.92 (  0.93)	test_corr_d   0.84 (  0.81)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.72it/s]
Test: [  0/  1]	Loss 1.533 (1.533)	test_acc   0.46 (  0.46)	test_minacc   0.42 (  0.42)	test_majacc   0.87 (  0.87)	Loss_d 1.533 (1.533)	test_acc_d   0.46 (  0.46)	test_minacc_d   0.42 (  0.42)	test_majacc_d   0.87 (  0.87)	test_corr_d   0.44 (  0.44)
Test: [  1/  1]	Loss 1.533 (1.533)	test_acc   0.46 (  0.46)	test_minacc   0.42 (  0.42)	test_majacc   0.87 (  0.87)	Loss_d 1.533 (1.533)	test_acc_d   0.46 (  0.46)	test_minacc_d   0.42 (  0.42)	test_majacc_d   0.87 (  0.87)	test_corr_d   0.44 (  0.44)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/157/checkpoints/model_best.pth
Overall Timing[  8/  1]	epoch_time 0.0436 (0.0464)	validation_time 0.0003 (0.0011)	train_time 0.0433 (0.0449)
record: (train_acc, test_acc) (0.8848000200986862, 0.46300002932548523)
last accs (train_acc, test_acc) (0.8848000200986862, 0.46300002932548523)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.79it/s] 15%|#5        | 4/26 [00:00<00:01, 17.52it/s] 31%|###       | 8/26 [00:00<00:00, 25.70it/s] 46%|####6     | 12/26 [00:00<00:00, 29.53it/s] 62%|######1   | 16/26 [00:00<00:00, 32.01it/s] 77%|#######6  | 20/26 [00:00<00:00, 33.59it/s] 92%|#########2| 24/26 [00:00<00:00, 34.80it/s]100%|##########| 26/26 [00:00<00:00, 28.77it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 234 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 235 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 236 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 237 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 238 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 239 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 240 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 241 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 242 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 243 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 244 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 245 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 246 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 247 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 248 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 249 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 250 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 251 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 252 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 253 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 254 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 255 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 256 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 257 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 258 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 259 400
penalty weights 0.0
Epoch: [9][  26/  26]	Loss 0.206 (0.270)	train_nll   0.21 (  0.27)	train_penalty   0.00 (  0.01)	weight_norm  22.87 ( 22.78)	train_acc   0.91 (  0.88)	train_minacc   0.55 (  0.49)	train_majacc   0.96 (  0.95)	train_corr   0.00 (  0.00)	l1 7.3172 (7.4814)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 19.50it/s] 27%|##6       | 7/26 [00:00<00:00, 35.03it/s]                                               27%|##6       | 7/26 [00:00<00:00, 35.03it/s] 46%|####6     | 12/26 [00:00<00:00, 39.39it/s] 65%|######5   | 17/26 [00:00<00:00, 42.39it/s]                                                65%|######5   | 17/26 [00:00<00:00, 42.39it/s] 85%|########4 | 22/26 [00:00<00:00, 41.27it/s]100%|##########| 26/26 [00:00<00:00, 37.79it/s]
Test: [   0/  26]	Loss 0.285 (0.285)	test_acc   0.87 (  0.87)	test_minacc   0.52 (  0.52)	test_majacc   0.93 (  0.93)	Loss_d 0.285 (0.285)	test_acc_d   0.87 (  0.87)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.93 (  0.93)	test_corr_d   0.82 (  0.82)
Test: [  10/  26]	Loss 0.281 (0.269)	test_acc   0.87 (  0.88)	test_minacc   0.59 (  0.57)	test_majacc   0.93 (  0.94)	Loss_d 0.281 (0.269)	test_acc_d   0.87 (  0.88)	test_minacc_d   0.59 (  0.57)	test_majacc_d   0.93 (  0.94)	test_corr_d   0.79 (  0.83)
Test: [  20/  26]	Loss 0.280 (0.266)	test_acc   0.87 (  0.89)	test_minacc   0.58 (  0.59)	test_majacc   0.93 (  0.94)	Loss_d 0.280 (0.266)	test_acc_d   0.87 (  0.89)	test_minacc_d   0.58 (  0.59)	test_majacc_d   0.93 (  0.94)	test_corr_d   0.81 (  0.82)
Test: [  26/  26]	Loss 0.196 (0.263)	test_acc   0.90 (  0.89)	test_minacc   0.48 (  0.59)	test_majacc   0.96 (  0.94)	Loss_d 0.196 (0.263)	test_acc_d   0.90 (  0.89)	test_minacc_d   0.48 (  0.59)	test_majacc_d   0.96 (  0.94)	test_corr_d   0.87 (  0.82)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.46it/s]
Test: [  0/  1]	Loss 1.733 (1.733)	test_acc   0.42 (  0.42)	test_minacc   0.36 (  0.36)	test_majacc   0.90 (  0.90)	Loss_d 1.733 (1.733)	test_acc_d   0.42 (  0.42)	test_minacc_d   0.36 (  0.36)	test_majacc_d   0.90 (  0.90)	test_corr_d   0.47 (  0.47)
Test: [  1/  1]	Loss 1.733 (1.733)	test_acc   0.42 (  0.42)	test_minacc   0.36 (  0.36)	test_majacc   0.90 (  0.90)	Loss_d 1.733 (1.733)	test_acc_d   0.42 (  0.42)	test_minacc_d   0.36 (  0.36)	test_majacc_d   0.90 (  0.90)	test_corr_d   0.47 (  0.47)
Overall Timing[  9/  1]	epoch_time 0.0428 (0.0461)	validation_time 0.0008 (0.0011)	train_time 0.0420 (0.0446)
record: (train_acc, test_acc) (0.8848000200986862, 0.46300002932548523)
last accs (train_acc, test_acc) (0.8901000226140022, 0.4150000214576721)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:07,  3.27it/s] 19%|#9        | 5/26 [00:00<00:01, 14.12it/s] 35%|###4      | 9/26 [00:00<00:00, 20.61it/s] 50%|#####     | 13/26 [00:00<00:00, 24.85it/s] 65%|######5   | 17/26 [00:00<00:00, 28.01it/s] 81%|########  | 21/26 [00:00<00:00, 30.38it/s] 96%|#########6| 25/26 [00:01<00:00, 32.02it/s]100%|##########| 26/26 [00:01<00:00, 23.90it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 260 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 261 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 262 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 263 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 264 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 265 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 266 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 267 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 268 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 269 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 270 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 271 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 272 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 273 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 274 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 275 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 276 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 277 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 278 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 279 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 280 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 281 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 282 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 283 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 284 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 285 400
penalty weights 0.0
Epoch: [10][  26/  26]	Loss 0.208 (0.258)	train_nll   0.21 (  0.26)	train_penalty   0.00 (  0.01)	weight_norm  23.06 ( 22.96)	train_acc   0.90 (  0.89)	train_minacc   0.66 (  0.51)	train_majacc   0.93 (  0.96)	train_corr   0.00 (  0.00)	l1 7.5075 (7.3993)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:05,  4.43it/s] 15%|#5        | 4/26 [00:00<00:01, 14.30it/s] 35%|###4      | 9/26 [00:00<00:00, 25.81it/s]                                               35%|###4      | 9/26 [00:00<00:00, 25.81it/s] 54%|#####3    | 14/26 [00:00<00:00, 33.32it/s] 73%|#######3  | 19/26 [00:00<00:00, 34.88it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 34.88it/s] 92%|#########2| 24/26 [00:00<00:00, 38.68it/s]100%|##########| 26/26 [00:00<00:00, 29.91it/s]
Test: [   0/  26]	Loss 0.246 (0.246)	test_acc   0.90 (  0.90)	test_minacc   0.72 (  0.72)	test_majacc   0.93 (  0.93)	Loss_d 0.246 (0.246)	test_acc_d   0.90 (  0.90)	test_minacc_d   0.72 (  0.72)	test_majacc_d   0.93 (  0.93)	test_corr_d   0.76 (  0.76)
Test: [  10/  26]	Loss 0.239 (0.253)	test_acc   0.89 (  0.90)	test_minacc   0.71 (  0.69)	test_majacc   0.93 (  0.93)	Loss_d 0.239 (0.253)	test_acc_d   0.89 (  0.90)	test_minacc_d   0.71 (  0.69)	test_majacc_d   0.93 (  0.93)	test_corr_d   0.74 (  0.78)
Test: [  20/  26]	Loss 0.219 (0.242)	test_acc   0.91 (  0.90)	test_minacc   0.73 (  0.70)	test_majacc   0.95 (  0.93)	Loss_d 0.219 (0.242)	test_acc_d   0.91 (  0.90)	test_minacc_d   0.73 (  0.70)	test_majacc_d   0.95 (  0.93)	test_corr_d   0.75 (  0.77)
Test: [  26/  26]	Loss 0.164 (0.236)	test_acc   0.93 (  0.90)	test_minacc   0.83 (  0.71)	test_majacc   0.94 (  0.94)	Loss_d 0.164 (0.236)	test_acc_d   0.93 (  0.90)	test_minacc_d   0.83 (  0.71)	test_majacc_d   0.94 (  0.94)	test_corr_d   0.82 (  0.77)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 60.11it/s]
Test: [  0/  1]	Loss 1.699 (1.699)	test_acc   0.48 (  0.48)	test_minacc   0.44 (  0.44)	test_majacc   0.85 (  0.85)	Loss_d 1.699 (1.699)	test_acc_d   0.48 (  0.48)	test_minacc_d   0.44 (  0.44)	test_majacc_d   0.85 (  0.85)	test_corr_d   0.32 (  0.32)
Test: [  1/  1]	Loss 1.699 (1.699)	test_acc   0.48 (  0.48)	test_minacc   0.44 (  0.44)	test_majacc   0.85 (  0.85)	Loss_d 1.699 (1.699)	test_acc_d   0.48 (  0.48)	test_minacc_d   0.44 (  0.44)	test_majacc_d   0.85 (  0.85)	test_corr_d   0.32 (  0.32)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/157/checkpoints/model_best.pth
Overall Timing[ 10/  1]	epoch_time 0.0425 (0.0457)	validation_time 0.0003 (0.0010)	train_time 0.0422 (0.0444)
record: (train_acc, test_acc) (0.9024000181555748, 0.48000001907348633)
last accs (train_acc, test_acc) (0.9024000181555748, 0.48000001907348633)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:07,  3.32it/s] 19%|#9        | 5/26 [00:00<00:01, 14.29it/s] 35%|###4      | 9/26 [00:00<00:00, 20.69it/s] 50%|#####     | 13/26 [00:00<00:00, 25.33it/s] 65%|######5   | 17/26 [00:00<00:00, 28.30it/s] 81%|########  | 21/26 [00:00<00:00, 30.45it/s] 96%|#########6| 25/26 [00:00<00:00, 31.80it/s]100%|##########| 26/26 [00:01<00:00, 24.05it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 286 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 287 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 288 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 289 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 290 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 291 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 292 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 293 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 294 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 295 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 296 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 297 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 298 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 299 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 300 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 301 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 302 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 303 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 304 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 305 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 306 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 307 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 308 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 309 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 310 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 311 400
penalty weights 0.0
Epoch: [11][  26/  26]	Loss 0.154 (0.252)	train_nll   0.15 (  0.25)	train_penalty   0.00 (  0.01)	weight_norm  23.30 ( 23.18)	train_acc   0.92 (  0.90)	train_minacc   0.83 (  0.54)	train_majacc   0.94 (  0.96)	train_corr   0.00 (  0.00)	l1 8.2041 (7.5233)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.95it/s] 23%|##3       | 6/26 [00:00<00:00, 25.64it/s]                                               23%|##3       | 6/26 [00:00<00:00, 25.64it/s] 42%|####2     | 11/26 [00:00<00:00, 33.25it/s] 62%|######1   | 16/26 [00:00<00:00, 38.11it/s]                                                62%|######1   | 16/26 [00:00<00:00, 38.11it/s] 81%|########  | 21/26 [00:00<00:00, 37.51it/s]100%|##########| 26/26 [00:00<00:00, 40.44it/s]100%|##########| 26/26 [00:00<00:00, 32.67it/s]
Test: [   0/  26]	Loss 0.225 (0.225)	test_acc   0.89 (  0.89)	test_minacc   0.62 (  0.62)	test_majacc   0.94 (  0.94)	Loss_d 0.225 (0.225)	test_acc_d   0.89 (  0.89)	test_minacc_d   0.62 (  0.62)	test_majacc_d   0.94 (  0.94)	test_corr_d   0.78 (  0.78)
Test: [  10/  26]	Loss 0.227 (0.244)	test_acc   0.91 (  0.90)	test_minacc   0.63 (  0.62)	test_majacc   0.96 (  0.94)	Loss_d 0.227 (0.244)	test_acc_d   0.91 (  0.90)	test_minacc_d   0.63 (  0.62)	test_majacc_d   0.96 (  0.94)	test_corr_d   0.76 (  0.79)
Test: [  20/  26]	Loss 0.224 (0.233)	test_acc   0.89 (  0.90)	test_minacc   0.68 (  0.64)	test_majacc   0.93 (  0.94)	Loss_d 0.224 (0.233)	test_acc_d   0.89 (  0.90)	test_minacc_d   0.68 (  0.64)	test_majacc_d   0.93 (  0.94)	test_corr_d   0.76 (  0.79)
Test: [  26/  26]	Loss 0.110 (0.225)	test_acc   0.96 (  0.91)	test_minacc   0.76 (  0.65)	test_majacc   0.98 (  0.95)	Loss_d 0.110 (0.225)	test_acc_d   0.96 (  0.91)	test_minacc_d   0.76 (  0.65)	test_majacc_d   0.98 (  0.95)	test_corr_d   0.83 (  0.79)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.43it/s]
Test: [  0/  1]	Loss 2.169 (2.169)	test_acc   0.43 (  0.43)	test_minacc   0.38 (  0.38)	test_majacc   0.86 (  0.86)	Loss_d 2.169 (2.169)	test_acc_d   0.43 (  0.43)	test_minacc_d   0.38 (  0.38)	test_majacc_d   0.86 (  0.86)	test_corr_d   0.39 (  0.39)
Test: [  1/  1]	Loss 2.169 (2.169)	test_acc   0.43 (  0.43)	test_minacc   0.38 (  0.38)	test_majacc   0.86 (  0.86)	Loss_d 2.169 (2.169)	test_acc_d   0.43 (  0.43)	test_minacc_d   0.38 (  0.38)	test_majacc_d   0.86 (  0.86)	test_corr_d   0.39 (  0.39)
Overall Timing[ 11/  1]	epoch_time 0.0452 (0.0457)	validation_time 0.0004 (0.0010)	train_time 0.0447 (0.0444)
record: (train_acc, test_acc) (0.9024000181555748, 0.48000001907348633)
last accs (train_acc, test_acc) (0.9052000284194947, 0.42900002002716064)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:04,  5.74it/s] 23%|##3       | 6/26 [00:00<00:01, 15.13it/s] 38%|###8      | 10/26 [00:00<00:00, 21.41it/s] 54%|#####3    | 14/26 [00:00<00:00, 25.80it/s] 69%|######9   | 18/26 [00:00<00:00, 28.82it/s] 85%|########4 | 22/26 [00:00<00:00, 31.20it/s]100%|##########| 26/26 [00:01<00:00, 32.75it/s]100%|##########| 26/26 [00:01<00:00, 24.32it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 312 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 313 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 314 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 315 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 316 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 317 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 318 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 319 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 320 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 321 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 322 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 323 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 324 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 325 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 326 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 327 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 328 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 329 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 330 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 331 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 332 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 333 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 334 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 335 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 336 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 337 400
penalty weights 0.0
Epoch: [12][  26/  26]	Loss 0.156 (0.236)	train_nll   0.16 (  0.24)	train_penalty   0.00 (  0.01)	weight_norm  23.59 ( 23.44)	train_acc   0.94 (  0.90)	train_minacc   0.72 (  0.58)	train_majacc   0.97 (  0.96)	train_corr   0.00 (  0.00)	l1 7.9814 (7.5426)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.38it/s] 12%|#1        | 3/26 [00:00<00:01, 14.80it/s] 31%|###       | 8/26 [00:00<00:00, 29.49it/s]                                               31%|###       | 8/26 [00:00<00:00, 29.49it/s] 50%|#####     | 13/26 [00:00<00:00, 36.04it/s] 69%|######9   | 18/26 [00:00<00:00, 36.77it/s]                                                69%|######9   | 18/26 [00:00<00:00, 36.77it/s] 88%|########8 | 23/26 [00:00<00:00, 39.38it/s]100%|##########| 26/26 [00:00<00:00, 33.49it/s]
Test: [   0/  26]	Loss 0.199 (0.199)	test_acc   0.91 (  0.91)	test_minacc   0.68 (  0.68)	test_majacc   0.95 (  0.95)	Loss_d 0.199 (0.199)	test_acc_d   0.91 (  0.91)	test_minacc_d   0.68 (  0.68)	test_majacc_d   0.95 (  0.95)	test_corr_d   0.76 (  0.76)
Test: [  10/  26]	Loss 0.193 (0.231)	test_acc   0.91 (  0.90)	test_minacc   0.75 (  0.68)	test_majacc   0.95 (  0.94)	Loss_d 0.193 (0.231)	test_acc_d   0.91 (  0.90)	test_minacc_d   0.75 (  0.68)	test_majacc_d   0.95 (  0.94)	test_corr_d   0.73 (  0.76)
Test: [  20/  26]	Loss 0.215 (0.221)	test_acc   0.90 (  0.91)	test_minacc   0.69 (  0.70)	test_majacc   0.94 (  0.94)	Loss_d 0.215 (0.221)	test_acc_d   0.90 (  0.91)	test_minacc_d   0.69 (  0.70)	test_majacc_d   0.94 (  0.94)	test_corr_d   0.74 (  0.76)
Test: [  26/  26]	Loss 0.101 (0.210)	test_acc   0.96 (  0.91)	test_minacc   0.86 (  0.72)	test_majacc   0.97 (  0.95)	Loss_d 0.101 (0.210)	test_acc_d   0.96 (  0.91)	test_minacc_d   0.86 (  0.72)	test_majacc_d   0.97 (  0.95)	test_corr_d   0.83 (  0.76)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 60.30it/s]
Test: [  0/  1]	Loss 2.124 (2.124)	test_acc   0.46 (  0.46)	test_minacc   0.42 (  0.42)	test_majacc   0.86 (  0.86)	Loss_d 2.124 (2.124)	test_acc_d   0.46 (  0.46)	test_minacc_d   0.42 (  0.42)	test_majacc_d   0.86 (  0.86)	test_corr_d   0.30 (  0.30)
Test: [  1/  1]	Loss 2.124 (2.124)	test_acc   0.46 (  0.46)	test_minacc   0.42 (  0.42)	test_majacc   0.86 (  0.86)	Loss_d 2.124 (2.124)	test_acc_d   0.46 (  0.46)	test_minacc_d   0.42 (  0.42)	test_majacc_d   0.86 (  0.86)	test_corr_d   0.30 (  0.30)
Overall Timing[ 12/  1]	epoch_time 0.0443 (0.0456)	validation_time 0.0005 (0.0009)	train_time 0.0438 (0.0444)
record: (train_acc, test_acc) (0.9024000181555748, 0.48000001907348633)
last accs (train_acc, test_acc) (0.911700016617775, 0.4610000252723694)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:09,  2.59it/s] 19%|#9        | 5/26 [00:00<00:01, 12.29it/s] 35%|###4      | 9/26 [00:00<00:00, 18.90it/s] 50%|#####     | 13/26 [00:00<00:00, 23.61it/s] 65%|######5   | 17/26 [00:00<00:00, 27.24it/s] 81%|########  | 21/26 [00:00<00:00, 29.72it/s] 96%|#########6| 25/26 [00:01<00:00, 31.42it/s]100%|##########| 26/26 [00:01<00:00, 22.55it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 338 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 339 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 340 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 341 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 342 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 343 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 344 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 345 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 346 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 347 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 348 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 349 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 350 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 351 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 352 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 353 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 354 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 355 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 356 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 357 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 358 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 359 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 360 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 361 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 362 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 363 400
penalty weights 0.0
Epoch: [13][  26/  26]	Loss 0.140 (0.221)	train_nll   0.14 (  0.22)	train_penalty   0.00 (  0.01)	weight_norm  23.92 ( 23.76)	train_acc   0.94 (  0.91)	train_minacc   0.90 (  0.63)	train_majacc   0.95 (  0.96)	train_corr   0.00 (  0.00)	l1 8.4425 (7.6773)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 18.19it/s] 23%|##3       | 6/26 [00:00<00:00, 29.66it/s]                                               23%|##3       | 6/26 [00:00<00:00, 29.66it/s] 42%|####2     | 11/26 [00:00<00:00, 36.19it/s] 62%|######1   | 16/26 [00:00<00:00, 40.56it/s]                                                62%|######1   | 16/26 [00:00<00:00, 40.56it/s] 81%|########  | 21/26 [00:00<00:00, 41.04it/s]100%|##########| 26/26 [00:00<00:00, 43.50it/s]100%|##########| 26/26 [00:00<00:00, 35.75it/s]
Test: [   0/  26]	Loss 0.152 (0.152)	test_acc   0.95 (  0.95)	test_minacc   0.87 (  0.87)	test_majacc   0.97 (  0.97)	Loss_d 0.152 (0.152)	test_acc_d   0.95 (  0.95)	test_minacc_d   0.87 (  0.87)	test_majacc_d   0.97 (  0.97)	test_corr_d   0.74 (  0.74)
Test: [  10/  26]	Loss 0.217 (0.225)	test_acc   0.92 (  0.91)	test_minacc   0.78 (  0.73)	test_majacc   0.95 (  0.94)	Loss_d 0.217 (0.225)	test_acc_d   0.92 (  0.91)	test_minacc_d   0.78 (  0.73)	test_majacc_d   0.95 (  0.94)	test_corr_d   0.70 (  0.74)
Test: [  20/  26]	Loss 0.218 (0.218)	test_acc   0.90 (  0.91)	test_minacc   0.74 (  0.75)	test_majacc   0.93 (  0.94)	Loss_d 0.218 (0.218)	test_acc_d   0.90 (  0.91)	test_minacc_d   0.74 (  0.75)	test_majacc_d   0.93 (  0.94)	test_corr_d   0.70 (  0.73)
Test: [  26/  26]	Loss 0.063 (0.203)	test_acc   1.00 (  0.92)	test_minacc   1.00 (  0.77)	test_majacc   1.00 (  0.94)	Loss_d 0.063 (0.203)	test_acc_d   1.00 (  0.92)	test_minacc_d   1.00 (  0.77)	test_majacc_d   1.00 (  0.94)	test_corr_d   0.79 (  0.73)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 60.62it/s]
Test: [  0/  1]	Loss 2.326 (2.326)	test_acc   0.46 (  0.46)	test_minacc   0.41 (  0.41)	test_majacc   0.88 (  0.88)	Loss_d 2.326 (2.326)	test_acc_d   0.46 (  0.46)	test_minacc_d   0.41 (  0.41)	test_majacc_d   0.88 (  0.88)	test_corr_d   0.31 (  0.31)
Test: [  1/  1]	Loss 2.326 (2.326)	test_acc   0.46 (  0.46)	test_minacc   0.41 (  0.41)	test_majacc   0.88 (  0.88)	Loss_d 2.326 (2.326)	test_acc_d   0.46 (  0.46)	test_minacc_d   0.41 (  0.41)	test_majacc_d   0.88 (  0.88)	test_corr_d   0.31 (  0.31)
Overall Timing[ 13/  1]	epoch_time 0.0418 (0.0453)	validation_time 0.0004 (0.0009)	train_time 0.0414 (0.0442)
record: (train_acc, test_acc) (0.9024000181555748, 0.48000001907348633)
last accs (train_acc, test_acc) (0.9186000165939331, 0.45600003004074097)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:06,  3.81it/s] 19%|#9        | 5/26 [00:00<00:01, 15.85it/s] 35%|###4      | 9/26 [00:00<00:00, 22.86it/s] 50%|#####     | 13/26 [00:00<00:00, 27.14it/s] 65%|######5   | 17/26 [00:00<00:00, 30.11it/s] 81%|########  | 21/26 [00:00<00:00, 31.85it/s] 96%|#########6| 25/26 [00:00<00:00, 32.63it/s]100%|##########| 26/26 [00:01<00:00, 25.43it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 364 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 365 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 366 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 367 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 368 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 369 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 370 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 371 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 372 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 373 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 374 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 375 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 376 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 377 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 378 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 379 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 380 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 381 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 382 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 383 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 384 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 385 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 386 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 387 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 388 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 389 400
penalty weights 0.0
Epoch: [14][  26/  26]	Loss 0.148 (0.215)	train_nll   0.15 (  0.21)	train_penalty   0.00 (  0.01)	weight_norm  24.32 ( 24.13)	train_acc   0.95 (  0.91)	train_minacc   0.79 (  0.64)	train_majacc   0.97 (  0.96)	train_corr   0.00 (  0.00)	l1 7.6951 (7.6940)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.80it/s] 19%|#9        | 5/26 [00:00<00:01, 20.96it/s] 38%|###8      | 10/26 [00:00<00:00, 30.35it/s]                                                38%|###8      | 10/26 [00:00<00:00, 30.35it/s] 62%|######1   | 16/26 [00:00<00:00, 39.29it/s]                                                62%|######1   | 16/26 [00:00<00:00, 39.29it/s] 81%|########  | 21/26 [00:00<00:00, 38.59it/s]100%|##########| 26/26 [00:00<00:00, 41.13it/s]100%|##########| 26/26 [00:00<00:00, 32.51it/s]
Test: [   0/  26]	Loss 0.153 (0.153)	test_acc   0.93 (  0.93)	test_minacc   0.80 (  0.80)	test_majacc   0.95 (  0.95)	Loss_d 0.153 (0.153)	test_acc_d   0.93 (  0.93)	test_minacc_d   0.80 (  0.80)	test_majacc_d   0.95 (  0.95)	test_corr_d   0.73 (  0.73)
Test: [  10/  26]	Loss 0.186 (0.185)	test_acc   0.93 (  0.92)	test_minacc   0.76 (  0.78)	test_majacc   0.96 (  0.95)	Loss_d 0.186 (0.185)	test_acc_d   0.93 (  0.92)	test_minacc_d   0.76 (  0.78)	test_majacc_d   0.96 (  0.95)	test_corr_d   0.72 (  0.74)
Test: [  20/  26]	Loss 0.147 (0.183)	test_acc   0.94 (  0.92)	test_minacc   0.92 (  0.79)	test_majacc   0.95 (  0.95)	Loss_d 0.147 (0.183)	test_acc_d   0.94 (  0.92)	test_minacc_d   0.92 (  0.79)	test_majacc_d   0.95 (  0.95)	test_corr_d   0.70 (  0.74)
Test: [  26/  26]	Loss 0.099 (0.174)	test_acc   0.96 (  0.93)	test_minacc   0.83 (  0.80)	test_majacc   0.98 (  0.95)	Loss_d 0.099 (0.174)	test_acc_d   0.96 (  0.93)	test_minacc_d   0.83 (  0.80)	test_majacc_d   0.98 (  0.95)	test_corr_d   0.82 (  0.74)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 60.52it/s]
Test: [  0/  1]	Loss 1.945 (1.945)	test_acc   0.48 (  0.48)	test_minacc   0.44 (  0.44)	test_majacc   0.87 (  0.87)	Loss_d 1.945 (1.945)	test_acc_d   0.48 (  0.48)	test_minacc_d   0.44 (  0.44)	test_majacc_d   0.87 (  0.87)	test_corr_d   0.25 (  0.25)
Test: [  1/  1]	Loss 1.945 (1.945)	test_acc   0.48 (  0.48)	test_minacc   0.44 (  0.44)	test_majacc   0.87 (  0.87)	Loss_d 1.945 (1.945)	test_acc_d   0.48 (  0.48)	test_minacc_d   0.44 (  0.44)	test_majacc_d   0.87 (  0.87)	test_corr_d   0.25 (  0.25)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/157/checkpoints/model_best.pth
Overall Timing[ 14/  1]	epoch_time 0.0406 (0.0450)	validation_time 0.0004 (0.0009)	train_time 0.0401 (0.0439)
record: (train_acc, test_acc) (0.9287000239491463, 0.48100003600120544)
last accs (train_acc, test_acc) (0.9287000239491463, 0.48100003600120544)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.81it/s] 15%|#5        | 4/26 [00:00<00:01, 18.90it/s] 31%|###       | 8/26 [00:00<00:00, 26.36it/s] 46%|####6     | 12/26 [00:00<00:00, 30.02it/s] 62%|######1   | 16/26 [00:00<00:00, 31.83it/s] 77%|#######6  | 20/26 [00:00<00:00, 33.55it/s] 92%|#########2| 24/26 [00:00<00:00, 34.47it/s]100%|##########| 26/26 [00:00<00:00, 28.73it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 390 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 391 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 392 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 393 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 394 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 395 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 396 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 397 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 398 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 399 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 400 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 401 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 402 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 403 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 404 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 405 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 406 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 407 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 408 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 409 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 410 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 411 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 412 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 413 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 414 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 415 400
penalty weights 10000.0
Epoch: [15][  26/  26]	Loss 0.004 (0.075)	train_nll   0.34 (  0.25)	train_penalty   0.00 (  0.01)	weight_norm  24.66 ( 24.51)	train_acc   0.84 (  0.90)	train_minacc   0.72 (  0.69)	train_majacc   0.86 (  0.93)	train_corr   0.00 (  0.00)	l1 6.4285 (7.5831)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.16it/s] 27%|##6       | 7/26 [00:00<00:00, 27.27it/s]                                               27%|##6       | 7/26 [00:00<00:00, 27.27it/s] 50%|#####     | 13/26 [00:00<00:00, 34.94it/s] 69%|######9   | 18/26 [00:00<00:00, 39.22it/s]                                                69%|######9   | 18/26 [00:00<00:00, 39.22it/s] 88%|########8 | 23/26 [00:00<00:00, 40.95it/s]100%|##########| 26/26 [00:00<00:00, 33.36it/s]
Test: [   0/  26]	Loss 0.439 (0.439)	test_acc   0.78 (  0.78)	test_minacc   0.78 (  0.78)	test_majacc   0.78 (  0.78)	Loss_d 0.439 (0.439)	test_acc_d   0.78 (  0.78)	test_minacc_d   0.78 (  0.78)	test_majacc_d   0.78 (  0.78)	test_corr_d   0.50 (  0.50)
Test: [  10/  26]	Loss 0.376 (0.399)	test_acc   0.84 (  0.81)	test_minacc   0.87 (  0.81)	test_majacc   0.83 (  0.81)	Loss_d 0.376 (0.399)	test_acc_d   0.84 (  0.81)	test_minacc_d   0.87 (  0.81)	test_majacc_d   0.83 (  0.81)	test_corr_d   0.52 (  0.55)
Test: [  20/  26]	Loss 0.415 (0.405)	test_acc   0.81 (  0.81)	test_minacc   0.77 (  0.81)	test_majacc   0.82 (  0.81)	Loss_d 0.415 (0.405)	test_acc_d   0.81 (  0.81)	test_minacc_d   0.77 (  0.81)	test_majacc_d   0.82 (  0.81)	test_corr_d   0.53 (  0.53)
Test: [  26/  26]	Loss 0.381 (0.409)	test_acc   0.82 (  0.81)	test_minacc   0.76 (  0.80)	test_majacc   0.83 (  0.81)	Loss_d 0.381 (0.409)	test_acc_d   0.82 (  0.81)	test_minacc_d   0.76 (  0.80)	test_majacc_d   0.83 (  0.81)	test_corr_d   0.59 (  0.53)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.95it/s]
Test: [  0/  1]	Loss 1.085 (1.085)	test_acc   0.62 (  0.62)	test_minacc   0.61 (  0.61)	test_majacc   0.73 (  0.73)	Loss_d 1.085 (1.085)	test_acc_d   0.62 (  0.62)	test_minacc_d   0.61 (  0.61)	test_majacc_d   0.73 (  0.73)	test_corr_d  -0.08 ( -0.08)
Test: [  1/  1]	Loss 1.085 (1.085)	test_acc   0.62 (  0.62)	test_minacc   0.61 (  0.61)	test_majacc   0.73 (  0.73)	Loss_d 1.085 (1.085)	test_acc_d   0.62 (  0.62)	test_minacc_d   0.61 (  0.61)	test_majacc_d   0.73 (  0.73)	test_corr_d  -0.08 ( -0.08)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/157/checkpoints/model_best.pth
Overall Timing[ 15/  1]	epoch_time 0.0437 (0.0449)	validation_time 0.0004 (0.0008)	train_time 0.0433 (0.0439)
record: (train_acc, test_acc) (0.8064000230431557, 0.6200000047683716)
last accs (train_acc, test_acc) (0.8064000230431557, 0.6200000047683716)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.87it/s] 19%|#9        | 5/26 [00:00<00:00, 21.42it/s] 35%|###4      | 9/26 [00:00<00:00, 27.30it/s] 50%|#####     | 13/26 [00:00<00:00, 30.70it/s] 65%|######5   | 17/26 [00:00<00:00, 32.55it/s] 81%|########  | 21/26 [00:00<00:00, 33.95it/s] 96%|#########6| 25/26 [00:00<00:00, 34.95it/s]100%|##########| 26/26 [00:00<00:00, 29.00it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 416 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 417 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 418 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 419 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 420 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 421 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 422 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 423 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 424 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 425 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 426 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 427 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 428 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 429 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 430 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 431 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 432 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 433 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 434 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 435 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 436 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 437 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 438 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 439 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 440 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 441 400
penalty weights 10000.0
Epoch: [16][  26/  26]	Loss 0.002 (0.003)	train_nll   0.43 (  0.42)	train_penalty   0.00 (  0.00)	weight_norm  24.75 ( 24.72)	train_acc   0.79 (  0.80)	train_minacc   0.79 (  0.82)	train_majacc   0.79 (  0.80)	train_corr   0.00 (  0.00)	l1 5.7667 (5.8820)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.04it/s] 15%|#5        | 4/26 [00:00<00:01, 17.89it/s] 35%|###4      | 9/26 [00:00<00:00, 29.88it/s]                                               35%|###4      | 9/26 [00:00<00:00, 29.88it/s] 54%|#####3    | 14/26 [00:00<00:00, 36.10it/s] 73%|#######3  | 19/26 [00:00<00:00, 39.80it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 39.80it/s] 92%|#########2| 24/26 [00:00<00:00, 38.61it/s]100%|##########| 26/26 [00:00<00:00, 32.89it/s]
Test: [   0/  26]	Loss 0.445 (0.445)	test_acc   0.78 (  0.78)	test_minacc   0.83 (  0.83)	test_majacc   0.77 (  0.77)	Loss_d 0.445 (0.445)	test_acc_d   0.78 (  0.78)	test_minacc_d   0.83 (  0.83)	test_majacc_d   0.77 (  0.77)	test_corr_d   0.46 (  0.46)
Test: [  10/  26]	Loss 0.408 (0.428)	test_acc   0.82 (  0.80)	test_minacc   0.82 (  0.80)	test_majacc   0.81 (  0.79)	Loss_d 0.408 (0.428)	test_acc_d   0.82 (  0.80)	test_minacc_d   0.82 (  0.80)	test_majacc_d   0.81 (  0.79)	test_corr_d   0.51 (  0.52)
Test: [  20/  26]	Loss 0.470 (0.436)	test_acc   0.76 (  0.79)	test_minacc   0.74 (  0.79)	test_majacc   0.77 (  0.79)	Loss_d 0.470 (0.436)	test_acc_d   0.76 (  0.79)	test_minacc_d   0.74 (  0.79)	test_majacc_d   0.77 (  0.79)	test_corr_d   0.47 (  0.51)
Test: [  26/  26]	Loss 0.437 (0.440)	test_acc   0.79 (  0.79)	test_minacc   0.79 (  0.79)	test_majacc   0.79 (  0.79)	Loss_d 0.437 (0.440)	test_acc_d   0.79 (  0.79)	test_minacc_d   0.79 (  0.79)	test_majacc_d   0.79 (  0.79)	test_corr_d   0.54 (  0.50)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.36it/s]
Test: [  0/  1]	Loss 0.926 (0.926)	test_acc   0.64 (  0.64)	test_minacc   0.63 (  0.63)	test_majacc   0.75 (  0.75)	Loss_d 0.926 (0.926)	test_acc_d   0.64 (  0.64)	test_minacc_d   0.63 (  0.63)	test_majacc_d   0.75 (  0.75)	test_corr_d  -0.10 ( -0.10)
Test: [  1/  1]	Loss 0.926 (0.926)	test_acc   0.64 (  0.64)	test_minacc   0.63 (  0.63)	test_majacc   0.75 (  0.75)	Loss_d 0.926 (0.926)	test_acc_d   0.64 (  0.64)	test_minacc_d   0.63 (  0.63)	test_majacc_d   0.75 (  0.75)	test_corr_d  -0.10 ( -0.10)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/157/checkpoints/model_best.pth
Overall Timing[ 16/  1]	epoch_time 0.0407 (0.0447)	validation_time 0.0005 (0.0008)	train_time 0.0402 (0.0436)
record: (train_acc, test_acc) (0.7872000286579132, 0.6390000581741333)
last accs (train_acc, test_acc) (0.7872000286579132, 0.6390000581741333)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.39it/s] 15%|#5        | 4/26 [00:00<00:01, 19.84it/s] 31%|###       | 8/26 [00:00<00:00, 27.27it/s] 46%|####6     | 12/26 [00:00<00:00, 30.67it/s] 62%|######1   | 16/26 [00:00<00:00, 32.20it/s] 77%|#######6  | 20/26 [00:00<00:00, 33.53it/s] 92%|#########2| 24/26 [00:00<00:00, 34.36it/s]100%|##########| 26/26 [00:00<00:00, 29.19it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 442 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 443 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 444 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 445 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 446 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 447 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 448 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 449 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 450 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 451 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 452 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 453 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 454 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 455 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 456 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 457 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 458 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 459 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 460 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 461 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 462 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 463 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 464 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 465 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 466 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 467 400
penalty weights 10000.0
Epoch: [17][  26/  26]	Loss 0.005 (0.003)	train_nll   0.42 (  0.43)	train_penalty   0.01 (  0.00)	weight_norm  24.77 ( 24.76)	train_acc   0.80 (  0.78)	train_minacc   0.72 (  0.78)	train_majacc   0.81 (  0.79)	train_corr   0.00 (  0.00)	l1 5.5166 (5.7655)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 18.10it/s] 23%|##3       | 6/26 [00:00<00:00, 28.82it/s]                                               23%|##3       | 6/26 [00:00<00:00, 28.82it/s] 42%|####2     | 11/26 [00:00<00:00, 33.20it/s] 62%|######1   | 16/26 [00:00<00:00, 38.29it/s]                                                62%|######1   | 16/26 [00:00<00:00, 38.29it/s] 81%|########  | 21/26 [00:00<00:00, 41.05it/s]100%|##########| 26/26 [00:00<00:00, 43.40it/s]100%|##########| 26/26 [00:00<00:00, 35.65it/s]
Test: [   0/  26]	Loss 0.431 (0.431)	test_acc   0.76 (  0.76)	test_minacc   0.82 (  0.82)	test_majacc   0.75 (  0.75)	Loss_d 0.431 (0.431)	test_acc_d   0.76 (  0.76)	test_minacc_d   0.82 (  0.82)	test_majacc_d   0.75 (  0.75)	test_corr_d   0.54 (  0.54)
Test: [  10/  26]	Loss 0.428 (0.426)	test_acc   0.79 (  0.78)	test_minacc   0.84 (  0.79)	test_majacc   0.78 (  0.78)	Loss_d 0.428 (0.426)	test_acc_d   0.79 (  0.78)	test_minacc_d   0.84 (  0.79)	test_majacc_d   0.78 (  0.78)	test_corr_d   0.58 (  0.58)
Test: [  20/  26]	Loss 0.462 (0.428)	test_acc   0.78 (  0.79)	test_minacc   0.77 (  0.79)	test_majacc   0.78 (  0.78)	Loss_d 0.462 (0.428)	test_acc_d   0.78 (  0.79)	test_minacc_d   0.77 (  0.79)	test_majacc_d   0.78 (  0.78)	test_corr_d   0.55 (  0.57)
Test: [  26/  26]	Loss 0.432 (0.432)	test_acc   0.80 (  0.78)	test_minacc   0.76 (  0.79)	test_majacc   0.80 (  0.78)	Loss_d 0.432 (0.432)	test_acc_d   0.80 (  0.78)	test_minacc_d   0.76 (  0.79)	test_majacc_d   0.80 (  0.78)	test_corr_d   0.60 (  0.57)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.69it/s]
Test: [  0/  1]	Loss 0.983 (0.983)	test_acc   0.62 (  0.62)	test_minacc   0.60 (  0.60)	test_majacc   0.76 (  0.76)	Loss_d 0.983 (0.983)	test_acc_d   0.62 (  0.62)	test_minacc_d   0.60 (  0.60)	test_majacc_d   0.76 (  0.76)	test_corr_d   0.06 (  0.06)
Test: [  1/  1]	Loss 0.983 (0.983)	test_acc   0.62 (  0.62)	test_minacc   0.60 (  0.60)	test_majacc   0.76 (  0.76)	Loss_d 0.983 (0.983)	test_acc_d   0.62 (  0.62)	test_minacc_d   0.60 (  0.60)	test_majacc_d   0.76 (  0.76)	test_corr_d   0.06 (  0.06)
Overall Timing[ 17/  1]	epoch_time 0.0443 (0.0447)	validation_time 0.0004 (0.0008)	train_time 0.0439 (0.0437)
record: (train_acc, test_acc) (0.7872000286579132, 0.6390000581741333)
last accs (train_acc, test_acc) (0.7841000304222107, 0.6170000433921814)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:06,  3.80it/s] 19%|#9        | 5/26 [00:00<00:01, 15.57it/s] 35%|###4      | 9/26 [00:00<00:00, 22.03it/s] 50%|#####     | 13/26 [00:00<00:00, 26.41it/s] 65%|######5   | 17/26 [00:00<00:00, 29.40it/s] 81%|########  | 21/26 [00:00<00:00, 30.86it/s] 96%|#########6| 25/26 [00:00<00:00, 31.67it/s]100%|##########| 26/26 [00:01<00:00, 24.87it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 468 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 469 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 470 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 471 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 472 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 473 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 474 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 475 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 476 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 477 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 478 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 479 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 480 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 481 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 482 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 483 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 484 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 485 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 486 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 487 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 488 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 489 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 490 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 491 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 492 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 493 400
penalty weights 10000.0
Epoch: [18][  26/  26]	Loss 0.002 (0.001)	train_nll   0.43 (  0.45)	train_penalty   0.00 (  0.00)	weight_norm  24.78 ( 24.78)	train_acc   0.78 (  0.76)	train_minacc   0.76 (  0.81)	train_majacc   0.78 (  0.75)	train_corr   0.00 (  0.00)	l1 5.4839 (5.7511)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.91it/s] 19%|#9        | 5/26 [00:00<00:00, 25.35it/s] 38%|###8      | 10/26 [00:00<00:00, 30.42it/s]                                                38%|###8      | 10/26 [00:00<00:00, 30.42it/s] 58%|#####7    | 15/26 [00:00<00:00, 36.05it/s] 77%|#######6  | 20/26 [00:00<00:00, 40.12it/s]                                                77%|#######6  | 20/26 [00:00<00:00, 40.12it/s] 96%|#########6| 25/26 [00:00<00:00, 41.35it/s]100%|##########| 26/26 [00:00<00:00, 34.25it/s]
Test: [   0/  26]	Loss 0.429 (0.429)	test_acc   0.76 (  0.76)	test_minacc   0.82 (  0.82)	test_majacc   0.75 (  0.75)	Loss_d 0.429 (0.429)	test_acc_d   0.76 (  0.76)	test_minacc_d   0.82 (  0.82)	test_majacc_d   0.75 (  0.75)	test_corr_d   0.56 (  0.56)
Test: [  10/  26]	Loss 0.414 (0.410)	test_acc   0.79 (  0.79)	test_minacc   0.82 (  0.79)	test_majacc   0.79 (  0.79)	Loss_d 0.414 (0.410)	test_acc_d   0.79 (  0.79)	test_minacc_d   0.82 (  0.79)	test_majacc_d   0.79 (  0.79)	test_corr_d   0.59 (  0.59)
Test: [  20/  26]	Loss 0.439 (0.410)	test_acc   0.77 (  0.79)	test_minacc   0.77 (  0.80)	test_majacc   0.77 (  0.79)	Loss_d 0.439 (0.410)	test_acc_d   0.77 (  0.79)	test_minacc_d   0.77 (  0.80)	test_majacc_d   0.77 (  0.79)	test_corr_d   0.56 (  0.59)
Test: [  26/  26]	Loss 0.433 (0.415)	test_acc   0.77 (  0.79)	test_minacc   0.76 (  0.80)	test_majacc   0.77 (  0.78)	Loss_d 0.433 (0.415)	test_acc_d   0.77 (  0.79)	test_minacc_d   0.76 (  0.80)	test_majacc_d   0.77 (  0.78)	test_corr_d   0.60 (  0.58)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.42it/s]
Test: [  0/  1]	Loss 1.025 (1.025)	test_acc   0.62 (  0.62)	test_minacc   0.60 (  0.60)	test_majacc   0.76 (  0.76)	Loss_d 1.025 (1.025)	test_acc_d   0.62 (  0.62)	test_minacc_d   0.60 (  0.60)	test_majacc_d   0.76 (  0.76)	test_corr_d   0.09 (  0.09)
Test: [  1/  1]	Loss 1.025 (1.025)	test_acc   0.62 (  0.62)	test_minacc   0.60 (  0.60)	test_majacc   0.76 (  0.76)	Loss_d 1.025 (1.025)	test_acc_d   0.62 (  0.62)	test_minacc_d   0.60 (  0.60)	test_majacc_d   0.76 (  0.76)	test_corr_d   0.09 (  0.09)
Overall Timing[ 18/  1]	epoch_time 0.0436 (0.0446)	validation_time 0.0005 (0.0008)	train_time 0.0431 (0.0436)
record: (train_acc, test_acc) (0.7872000286579132, 0.6390000581741333)
last accs (train_acc, test_acc) (0.7873000252842903, 0.6180000305175781)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.72it/s] 19%|#9        | 5/26 [00:00<00:00, 22.92it/s] 35%|###4      | 9/26 [00:00<00:00, 28.24it/s] 50%|#####     | 13/26 [00:00<00:00, 31.02it/s] 65%|######5   | 17/26 [00:00<00:00, 32.32it/s] 81%|########  | 21/26 [00:00<00:00, 33.36it/s] 96%|#########6| 25/26 [00:00<00:00, 33.60it/s]100%|##########| 26/26 [00:00<00:00, 28.73it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 494 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 495 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 496 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 497 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 498 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 499 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 500 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 501 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 502 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 503 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 504 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 505 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 506 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 507 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 508 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 509 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 510 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 511 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 512 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 513 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 514 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 515 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 516 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 517 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 518 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 519 400
penalty weights 10000.0
Epoch: [19][  26/  26]	Loss 0.001 (0.002)	train_nll   0.42 (  0.43)	train_penalty   0.00 (  0.00)	weight_norm  24.79 ( 24.79)	train_acc   0.77 (  0.77)	train_minacc   0.72 (  0.80)	train_majacc   0.77 (  0.77)	train_corr   0.00 (  0.00)	l1 5.5444 (5.7863)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.80it/s] 15%|#5        | 4/26 [00:00<00:01, 16.59it/s] 35%|###4      | 9/26 [00:00<00:00, 28.69it/s]                                               35%|###4      | 9/26 [00:00<00:00, 28.69it/s] 54%|#####3    | 14/26 [00:00<00:00, 34.99it/s] 77%|#######6  | 20/26 [00:00<00:00, 37.46it/s]                                                77%|#######6  | 20/26 [00:00<00:00, 37.46it/s] 96%|#########6| 25/26 [00:00<00:00, 40.39it/s]100%|##########| 26/26 [00:00<00:00, 32.10it/s]
Test: [   0/  26]	Loss 0.428 (0.428)	test_acc   0.77 (  0.77)	test_minacc   0.85 (  0.85)	test_majacc   0.76 (  0.76)	Loss_d 0.428 (0.428)	test_acc_d   0.77 (  0.77)	test_minacc_d   0.85 (  0.85)	test_majacc_d   0.76 (  0.76)	test_corr_d   0.58 (  0.58)
Test: [  10/  26]	Loss 0.412 (0.401)	test_acc   0.78 (  0.79)	test_minacc   0.82 (  0.80)	test_majacc   0.77 (  0.79)	Loss_d 0.412 (0.401)	test_acc_d   0.78 (  0.79)	test_minacc_d   0.82 (  0.80)	test_majacc_d   0.77 (  0.79)	test_corr_d   0.60 (  0.61)
Test: [  20/  26]	Loss 0.416 (0.400)	test_acc   0.78 (  0.79)	test_minacc   0.82 (  0.81)	test_majacc   0.78 (  0.79)	Loss_d 0.416 (0.400)	test_acc_d   0.78 (  0.79)	test_minacc_d   0.82 (  0.81)	test_majacc_d   0.78 (  0.79)	test_corr_d   0.60 (  0.61)
Test: [  26/  26]	Loss 0.427 (0.405)	test_acc   0.76 (  0.79)	test_minacc   0.72 (  0.80)	test_majacc   0.76 (  0.78)	Loss_d 0.427 (0.405)	test_acc_d   0.76 (  0.79)	test_minacc_d   0.72 (  0.80)	test_majacc_d   0.76 (  0.78)	test_corr_d   0.61 (  0.61)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.22it/s]
Test: [  0/  1]	Loss 1.082 (1.082)	test_acc   0.60 (  0.60)	test_minacc   0.59 (  0.59)	test_majacc   0.71 (  0.71)	Loss_d 1.082 (1.082)	test_acc_d   0.60 (  0.60)	test_minacc_d   0.59 (  0.59)	test_majacc_d   0.71 (  0.71)	test_corr_d   0.14 (  0.14)
Test: [  1/  1]	Loss 1.082 (1.082)	test_acc   0.60 (  0.60)	test_minacc   0.59 (  0.59)	test_majacc   0.71 (  0.71)	Loss_d 1.082 (1.082)	test_acc_d   0.60 (  0.60)	test_minacc_d   0.59 (  0.59)	test_majacc_d   0.71 (  0.71)	test_corr_d   0.14 (  0.14)
Overall Timing[ 19/  1]	epoch_time 0.0424 (0.0445)	validation_time 0.0003 (0.0008)	train_time 0.0420 (0.0436)
record: (train_acc, test_acc) (0.7872000286579132, 0.6390000581741333)
last accs (train_acc, test_acc) (0.7876000261306763, 0.6030000448226929)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:00, 27.33it/s] 27%|##6       | 7/26 [00:00<00:00, 30.69it/s] 42%|####2     | 11/26 [00:00<00:00, 32.01it/s] 58%|#####7    | 15/26 [00:00<00:00, 32.85it/s] 73%|#######3  | 19/26 [00:00<00:00, 33.97it/s] 88%|########8 | 23/26 [00:00<00:00, 34.93it/s]100%|##########| 26/26 [00:00<00:00, 31.25it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 520 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 521 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 522 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 523 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 524 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 525 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 526 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 527 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 528 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 529 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 530 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 531 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 532 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 533 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 534 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 535 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 536 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 537 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 538 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 539 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 540 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 541 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 542 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 543 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 544 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 545 400
penalty weights 10000.0
Epoch: [20][  26/  26]	Loss 0.001 (0.001)	train_nll   0.47 (  0.47)	train_penalty   0.00 (  0.00)	weight_norm  24.80 ( 24.79)	train_acc   0.73 (  0.74)	train_minacc   0.79 (  0.78)	train_majacc   0.72 (  0.74)	train_corr   0.00 (  0.00)	l1 5.6224 (5.6125)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.93it/s] 23%|##3       | 6/26 [00:00<00:00, 31.16it/s]                                               23%|##3       | 6/26 [00:00<00:00, 31.16it/s] 42%|####2     | 11/26 [00:00<00:00, 37.44it/s] 62%|######1   | 16/26 [00:00<00:00, 41.31it/s]                                                62%|######1   | 16/26 [00:00<00:00, 41.31it/s] 81%|########  | 21/26 [00:00<00:00, 39.07it/s]100%|##########| 26/26 [00:00<00:00, 35.44it/s]
Test: [   0/  26]	Loss 0.453 (0.453)	test_acc   0.75 (  0.75)	test_minacc   0.82 (  0.82)	test_majacc   0.74 (  0.74)	Loss_d 0.453 (0.453)	test_acc_d   0.75 (  0.75)	test_minacc_d   0.82 (  0.82)	test_majacc_d   0.74 (  0.74)	test_corr_d   0.55 (  0.55)
Test: [  10/  26]	Loss 0.431 (0.417)	test_acc   0.76 (  0.78)	test_minacc   0.82 (  0.81)	test_majacc   0.75 (  0.77)	Loss_d 0.431 (0.417)	test_acc_d   0.76 (  0.78)	test_minacc_d   0.82 (  0.81)	test_majacc_d   0.75 (  0.77)	test_corr_d   0.58 (  0.59)
Test: [  20/  26]	Loss 0.416 (0.414)	test_acc   0.78 (  0.78)	test_minacc   0.81 (  0.82)	test_majacc   0.77 (  0.77)	Loss_d 0.416 (0.414)	test_acc_d   0.78 (  0.78)	test_minacc_d   0.81 (  0.82)	test_majacc_d   0.77 (  0.77)	test_corr_d   0.58 (  0.59)
Test: [  26/  26]	Loss 0.451 (0.418)	test_acc   0.74 (  0.77)	test_minacc   0.76 (  0.81)	test_majacc   0.73 (  0.77)	Loss_d 0.451 (0.418)	test_acc_d   0.74 (  0.77)	test_minacc_d   0.76 (  0.81)	test_majacc_d   0.73 (  0.77)	test_corr_d   0.58 (  0.59)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.08it/s]
Test: [  0/  1]	Loss 1.093 (1.093)	test_acc   0.61 (  0.61)	test_minacc   0.59 (  0.59)	test_majacc   0.73 (  0.73)	Loss_d 1.093 (1.093)	test_acc_d   0.61 (  0.61)	test_minacc_d   0.59 (  0.59)	test_majacc_d   0.73 (  0.73)	test_corr_d   0.10 (  0.10)
Test: [  1/  1]	Loss 1.093 (1.093)	test_acc   0.61 (  0.61)	test_minacc   0.59 (  0.59)	test_majacc   0.73 (  0.73)	Loss_d 1.093 (1.093)	test_acc_d   0.61 (  0.61)	test_minacc_d   0.59 (  0.59)	test_majacc_d   0.73 (  0.73)	test_corr_d   0.10 (  0.10)
Overall Timing[ 20/  1]	epoch_time 0.0428 (0.0444)	validation_time 0.0004 (0.0007)	train_time 0.0424 (0.0435)
record: (train_acc, test_acc) (0.7872000286579132, 0.6390000581741333)
last accs (train_acc, test_acc) (0.7745000320076942, 0.6070000529289246)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 13.87it/s] 23%|##3       | 6/26 [00:00<00:00, 25.14it/s] 38%|###8      | 10/26 [00:00<00:00, 28.34it/s] 54%|#####3    | 14/26 [00:00<00:00, 30.73it/s] 69%|######9   | 18/26 [00:00<00:00, 32.48it/s] 85%|########4 | 22/26 [00:00<00:00, 34.76it/s]100%|##########| 26/26 [00:00<00:00, 35.75it/s]100%|##########| 26/26 [00:00<00:00, 29.30it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 546 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 547 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 548 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 549 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 550 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 551 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 552 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 553 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 554 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 555 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 556 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 557 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 558 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 559 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 560 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 561 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 562 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 563 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 564 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 565 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 566 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 567 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 568 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 569 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 570 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 571 400
penalty weights 10000.0
Epoch: [21][  26/  26]	Loss 0.000 (0.001)	train_nll   0.39 (  0.41)	train_penalty   0.00 (  0.00)	weight_norm  24.81 ( 24.81)	train_acc   0.76 (  0.78)	train_minacc   0.79 (  0.83)	train_majacc   0.75 (  0.77)	train_corr   0.00 (  0.00)	l1 5.8892 (5.8488)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.16it/s] 23%|##3       | 6/26 [00:00<00:00, 30.40it/s]                                               23%|##3       | 6/26 [00:00<00:00, 30.40it/s] 42%|####2     | 11/26 [00:00<00:00, 37.63it/s] 62%|######1   | 16/26 [00:00<00:00, 41.70it/s]                                                62%|######1   | 16/26 [00:00<00:00, 41.70it/s] 81%|########  | 21/26 [00:00<00:00, 39.44it/s]100%|##########| 26/26 [00:00<00:00, 42.22it/s]100%|##########| 26/26 [00:00<00:00, 35.18it/s]
Test: [   0/  26]	Loss 0.371 (0.371)	test_acc   0.79 (  0.79)	test_minacc   0.87 (  0.87)	test_majacc   0.78 (  0.78)	Loss_d 0.371 (0.371)	test_acc_d   0.79 (  0.79)	test_minacc_d   0.87 (  0.87)	test_majacc_d   0.78 (  0.78)	test_corr_d   0.55 (  0.55)
Test: [  10/  26]	Loss 0.335 (0.355)	test_acc   0.84 (  0.81)	test_minacc   0.85 (  0.84)	test_majacc   0.83 (  0.80)	Loss_d 0.335 (0.355)	test_acc_d   0.84 (  0.81)	test_minacc_d   0.85 (  0.84)	test_majacc_d   0.83 (  0.80)	test_corr_d   0.58 (  0.60)
Test: [  20/  26]	Loss 0.378 (0.360)	test_acc   0.82 (  0.81)	test_minacc   0.85 (  0.83)	test_majacc   0.82 (  0.80)	Loss_d 0.378 (0.360)	test_acc_d   0.82 (  0.81)	test_minacc_d   0.85 (  0.83)	test_majacc_d   0.82 (  0.80)	test_corr_d   0.59 (  0.59)
Test: [  26/  26]	Loss 0.384 (0.363)	test_acc   0.75 (  0.81)	test_minacc   0.76 (  0.83)	test_majacc   0.75 (  0.80)	Loss_d 0.384 (0.363)	test_acc_d   0.75 (  0.81)	test_minacc_d   0.76 (  0.83)	test_majacc_d   0.75 (  0.80)	test_corr_d   0.59 (  0.59)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 60.85it/s]
Test: [  0/  1]	Loss 1.141 (1.141)	test_acc   0.62 (  0.62)	test_minacc   0.61 (  0.61)	test_majacc   0.77 (  0.77)	Loss_d 1.141 (1.141)	test_acc_d   0.62 (  0.62)	test_minacc_d   0.61 (  0.61)	test_majacc_d   0.77 (  0.77)	test_corr_d   0.04 (  0.04)
Test: [  1/  1]	Loss 1.141 (1.141)	test_acc   0.62 (  0.62)	test_minacc   0.61 (  0.61)	test_majacc   0.77 (  0.77)	Loss_d 1.141 (1.141)	test_acc_d   0.62 (  0.62)	test_minacc_d   0.61 (  0.61)	test_majacc_d   0.77 (  0.77)	test_corr_d   0.04 (  0.04)
Overall Timing[ 21/  1]	epoch_time 0.0429 (0.0443)	validation_time 0.0005 (0.0007)	train_time 0.0424 (0.0434)
record: (train_acc, test_acc) (0.7872000286579132, 0.6390000581741333)
last accs (train_acc, test_acc) (0.8071000247597694, 0.6240000128746033)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  6.12it/s] 12%|#1        | 3/26 [00:00<00:01, 12.52it/s] 27%|##6       | 7/26 [00:00<00:00, 22.69it/s] 42%|####2     | 11/26 [00:00<00:00, 27.75it/s] 58%|#####7    | 15/26 [00:00<00:00, 30.02it/s] 73%|#######3  | 19/26 [00:00<00:00, 31.45it/s] 88%|########8 | 23/26 [00:00<00:00, 33.76it/s]100%|##########| 26/26 [00:00<00:00, 26.79it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 572 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 573 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 574 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 575 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 576 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 577 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 578 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 579 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 580 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 581 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 582 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 583 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 584 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 585 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 586 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 587 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 588 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 589 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 590 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 591 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 592 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 593 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 594 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 595 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 596 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 597 400
penalty weights 10000.0
Epoch: [22][  26/  26]	Loss 0.000 (0.001)	train_nll   0.38 (  0.36)	train_penalty   0.00 (  0.00)	weight_norm  24.82 ( 24.82)	train_acc   0.79 (  0.81)	train_minacc   0.79 (  0.83)	train_majacc   0.79 (  0.80)	train_corr   0.00 (  0.00)	l1 6.0030 (6.0379)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:02, 10.65it/s] 27%|##6       | 7/26 [00:00<00:00, 26.31it/s]                                               27%|##6       | 7/26 [00:00<00:00, 26.31it/s] 46%|####6     | 12/26 [00:00<00:00, 34.35it/s] 65%|######5   | 17/26 [00:00<00:00, 38.59it/s]                                                65%|######5   | 17/26 [00:00<00:00, 38.59it/s] 85%|########4 | 22/26 [00:00<00:00, 37.41it/s]100%|##########| 26/26 [00:00<00:00, 33.63it/s]
Test: [   0/  26]	Loss 0.404 (0.404)	test_acc   0.76 (  0.76)	test_minacc   0.83 (  0.83)	test_majacc   0.75 (  0.75)	Loss_d 0.404 (0.404)	test_acc_d   0.76 (  0.76)	test_minacc_d   0.83 (  0.83)	test_majacc_d   0.75 (  0.75)	test_corr_d   0.57 (  0.57)
Test: [  10/  26]	Loss 0.358 (0.368)	test_acc   0.81 (  0.79)	test_minacc   0.82 (  0.81)	test_majacc   0.80 (  0.79)	Loss_d 0.358 (0.368)	test_acc_d   0.81 (  0.79)	test_minacc_d   0.82 (  0.81)	test_majacc_d   0.80 (  0.79)	test_corr_d   0.59 (  0.61)
Test: [  20/  26]	Loss 0.374 (0.362)	test_acc   0.80 (  0.80)	test_minacc   0.79 (  0.82)	test_majacc   0.80 (  0.80)	Loss_d 0.374 (0.362)	test_acc_d   0.80 (  0.80)	test_minacc_d   0.79 (  0.82)	test_majacc_d   0.80 (  0.80)	test_corr_d   0.60 (  0.61)
Test: [  26/  26]	Loss 0.382 (0.365)	test_acc   0.80 (  0.80)	test_minacc   0.79 (  0.82)	test_majacc   0.80 (  0.80)	Loss_d 0.382 (0.365)	test_acc_d   0.80 (  0.80)	test_minacc_d   0.79 (  0.82)	test_majacc_d   0.80 (  0.80)	test_corr_d   0.62 (  0.61)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.46it/s]
Test: [  0/  1]	Loss 1.204 (1.204)	test_acc   0.65 (  0.65)	test_minacc   0.63 (  0.63)	test_majacc   0.78 (  0.78)	Loss_d 1.204 (1.204)	test_acc_d   0.65 (  0.65)	test_minacc_d   0.63 (  0.63)	test_majacc_d   0.78 (  0.78)	test_corr_d   0.04 (  0.04)
Test: [  1/  1]	Loss 1.204 (1.204)	test_acc   0.65 (  0.65)	test_minacc   0.63 (  0.63)	test_majacc   0.78 (  0.78)	Loss_d 1.204 (1.204)	test_acc_d   0.65 (  0.65)	test_minacc_d   0.63 (  0.63)	test_majacc_d   0.78 (  0.78)	test_corr_d   0.04 (  0.04)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/157/checkpoints/model_best.pth
Overall Timing[ 22/  1]	epoch_time 0.0418 (0.0442)	validation_time 0.0003 (0.0007)	train_time 0.0415 (0.0434)
record: (train_acc, test_acc) (0.8021000293493271, 0.6460000276565552)
last accs (train_acc, test_acc) (0.8021000293493271, 0.6460000276565552)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.09it/s] 19%|#9        | 5/26 [00:00<00:01, 18.16it/s] 35%|###4      | 9/26 [00:00<00:00, 24.50it/s] 50%|#####     | 13/26 [00:00<00:00, 28.39it/s] 65%|######5   | 17/26 [00:00<00:00, 30.88it/s] 81%|########  | 21/26 [00:00<00:00, 32.64it/s] 96%|#########6| 25/26 [00:00<00:00, 33.49it/s]100%|##########| 26/26 [00:00<00:00, 26.98it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 598 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 599 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 600 400
penalty weights 10000.0
l1 at pgd_anneal_iters 6.007153034210205
set z to 5.706795382499695
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 601 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 602 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 603 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 604 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 605 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 606 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 607 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 608 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 609 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 610 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 611 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 612 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 613 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 614 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 615 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 616 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 617 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 618 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 619 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 620 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 621 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 622 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 623 400
penalty weights 10000.0
Epoch: [23][  26/  26]	Loss 0.000 (0.001)	train_nll   0.37 (  0.38)	train_penalty   0.00 (  0.00)	weight_norm  24.83 ( 24.83)	train_acc   0.77 (  0.79)	train_minacc   0.76 (  0.83)	train_majacc   0.77 (  0.78)	train_corr   0.00 (  0.00)	l1 5.8737 (6.1149)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.38it/s] 23%|##3       | 6/26 [00:00<00:00, 28.83it/s]                                               23%|##3       | 6/26 [00:00<00:00, 28.83it/s] 42%|####2     | 11/26 [00:00<00:00, 36.44it/s] 62%|######1   | 16/26 [00:00<00:00, 40.86it/s]                                                62%|######1   | 16/26 [00:00<00:00, 40.86it/s] 81%|########  | 21/26 [00:00<00:00, 39.21it/s]100%|##########| 26/26 [00:00<00:00, 41.84it/s]100%|##########| 26/26 [00:00<00:00, 34.84it/s]
Test: [   0/  26]	Loss 0.372 (0.372)	test_acc   0.79 (  0.79)	test_minacc   0.80 (  0.80)	test_majacc   0.79 (  0.79)	Loss_d 0.372 (0.372)	test_acc_d   0.79 (  0.79)	test_minacc_d   0.80 (  0.80)	test_majacc_d   0.79 (  0.79)	test_corr_d   0.60 (  0.60)
Test: [  10/  26]	Loss 0.341 (0.355)	test_acc   0.83 (  0.81)	test_minacc   0.84 (  0.81)	test_majacc   0.83 (  0.81)	Loss_d 0.341 (0.355)	test_acc_d   0.83 (  0.81)	test_minacc_d   0.84 (  0.81)	test_majacc_d   0.83 (  0.81)	test_corr_d   0.60 (  0.62)
Test: [  20/  26]	Loss 0.367 (0.349)	test_acc   0.80 (  0.82)	test_minacc   0.81 (  0.82)	test_majacc   0.80 (  0.82)	Loss_d 0.367 (0.349)	test_acc_d   0.80 (  0.82)	test_minacc_d   0.81 (  0.82)	test_majacc_d   0.80 (  0.82)	test_corr_d   0.61 (  0.62)
Test: [  26/  26]	Loss 0.368 (0.353)	test_acc   0.76 (  0.81)	test_minacc   0.76 (  0.81)	test_majacc   0.76 (  0.81)	Loss_d 0.368 (0.353)	test_acc_d   0.76 (  0.81)	test_minacc_d   0.76 (  0.81)	test_majacc_d   0.76 (  0.81)	test_corr_d   0.63 (  0.62)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.58it/s]
Test: [  0/  1]	Loss 1.181 (1.181)	test_acc   0.63 (  0.63)	test_minacc   0.61 (  0.61)	test_majacc   0.80 (  0.80)	Loss_d 1.181 (1.181)	test_acc_d   0.63 (  0.63)	test_minacc_d   0.61 (  0.61)	test_majacc_d   0.80 (  0.80)	test_corr_d   0.08 (  0.08)
Test: [  1/  1]	Loss 1.181 (1.181)	test_acc   0.63 (  0.63)	test_minacc   0.61 (  0.61)	test_majacc   0.80 (  0.80)	Loss_d 1.181 (1.181)	test_acc_d   0.63 (  0.63)	test_minacc_d   0.61 (  0.61)	test_majacc_d   0.80 (  0.80)	test_corr_d   0.08 (  0.08)
Overall Timing[ 23/  1]	epoch_time 0.0448 (0.0443)	validation_time 0.0005 (0.0007)	train_time 0.0443 (0.0434)
record: (train_acc, test_acc) (0.8021000293493271, 0.6460000276565552)
last accs (train_acc, test_acc) (0.8132000259757042, 0.6300000548362732)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.37it/s] 19%|#9        | 5/26 [00:00<00:01, 18.21it/s] 35%|###4      | 9/26 [00:00<00:00, 23.76it/s] 50%|#####     | 13/26 [00:00<00:00, 27.16it/s] 65%|######5   | 17/26 [00:00<00:00, 29.31it/s] 81%|########  | 21/26 [00:00<00:00, 31.14it/s] 96%|#########6| 25/26 [00:00<00:00, 32.14it/s]100%|##########| 26/26 [00:01<00:00, 25.96it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 624 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 625 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 626 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 627 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 628 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 629 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 630 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 631 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 632 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 633 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 634 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 635 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 636 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 637 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 638 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 639 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 640 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 641 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 642 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 643 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 644 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 645 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 646 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 647 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 648 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 649 400
penalty weights 10000.0
Epoch: [24][  26/  26]	Loss 0.000 (0.000)	train_nll   0.38 (  0.37)	train_penalty   0.00 (  0.00)	weight_norm  24.83 ( 24.83)	train_acc   0.75 (  0.80)	train_minacc   0.76 (  0.82)	train_majacc   0.75 (  0.80)	train_corr   0.00 (  0.00)	l1 5.9589 (6.1357)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.76it/s] 23%|##3       | 6/26 [00:00<00:00, 25.08it/s] 38%|###8      | 10/26 [00:00<00:00, 30.10it/s]                                                38%|###8      | 10/26 [00:00<00:00, 30.10it/s] 62%|######1   | 16/26 [00:00<00:00, 38.92it/s]                                                62%|######1   | 16/26 [00:00<00:00, 38.92it/s] 81%|########  | 21/26 [00:00<00:00, 37.65it/s]100%|##########| 26/26 [00:00<00:00, 40.96it/s]100%|##########| 26/26 [00:00<00:00, 32.47it/s]
Test: [   0/  26]	Loss 0.399 (0.399)	test_acc   0.77 (  0.77)	test_minacc   0.83 (  0.83)	test_majacc   0.76 (  0.76)	Loss_d 0.399 (0.399)	test_acc_d   0.77 (  0.77)	test_minacc_d   0.83 (  0.83)	test_majacc_d   0.76 (  0.76)	test_corr_d   0.58 (  0.58)
Test: [  10/  26]	Loss 0.366 (0.374)	test_acc   0.80 (  0.79)	test_minacc   0.82 (  0.82)	test_majacc   0.80 (  0.79)	Loss_d 0.366 (0.374)	test_acc_d   0.80 (  0.79)	test_minacc_d   0.82 (  0.82)	test_majacc_d   0.80 (  0.79)	test_corr_d   0.59 (  0.61)
Test: [  20/  26]	Loss 0.369 (0.363)	test_acc   0.80 (  0.80)	test_minacc   0.84 (  0.84)	test_majacc   0.80 (  0.80)	Loss_d 0.369 (0.363)	test_acc_d   0.80 (  0.80)	test_minacc_d   0.84 (  0.84)	test_majacc_d   0.80 (  0.80)	test_corr_d   0.61 (  0.61)
Test: [  26/  26]	Loss 0.383 (0.367)	test_acc   0.76 (  0.80)	test_minacc   0.76 (  0.84)	test_majacc   0.76 (  0.79)	Loss_d 0.383 (0.367)	test_acc_d   0.76 (  0.80)	test_minacc_d   0.76 (  0.84)	test_majacc_d   0.76 (  0.79)	test_corr_d   0.62 (  0.61)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 60.23it/s]
Test: [  0/  1]	Loss 1.185 (1.185)	test_acc   0.63 (  0.63)	test_minacc   0.62 (  0.62)	test_majacc   0.77 (  0.77)	Loss_d 1.185 (1.185)	test_acc_d   0.63 (  0.63)	test_minacc_d   0.62 (  0.62)	test_majacc_d   0.77 (  0.77)	test_corr_d   0.09 (  0.09)
Test: [  1/  1]	Loss 1.185 (1.185)	test_acc   0.63 (  0.63)	test_minacc   0.62 (  0.62)	test_majacc   0.77 (  0.77)	Loss_d 1.185 (1.185)	test_acc_d   0.63 (  0.63)	test_minacc_d   0.62 (  0.62)	test_majacc_d   0.77 (  0.77)	test_corr_d   0.09 (  0.09)
Overall Timing[ 24/  1]	epoch_time 0.0407 (0.0441)	validation_time 0.0004 (0.0007)	train_time 0.0402 (0.0433)
record: (train_acc, test_acc) (0.8021000293493271, 0.6460000276565552)
last accs (train_acc, test_acc) (0.8012000290155411, 0.6310000419616699)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:06,  3.62it/s] 19%|#9        | 5/26 [00:00<00:01, 15.21it/s] 35%|###4      | 9/26 [00:00<00:00, 22.40it/s] 50%|#####     | 13/26 [00:00<00:00, 27.07it/s] 65%|######5   | 17/26 [00:00<00:00, 27.81it/s] 81%|########  | 21/26 [00:00<00:00, 29.89it/s] 96%|#########6| 25/26 [00:00<00:00, 31.79it/s]100%|##########| 26/26 [00:01<00:00, 24.61it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 650 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 651 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 652 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 653 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 654 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 655 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 656 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 657 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 658 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 659 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 660 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 661 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 662 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 663 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 664 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 665 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 666 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 667 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 668 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 669 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 670 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 671 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 672 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 673 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 674 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 675 400
penalty weights 10000.0
Epoch: [25][  26/  26]	Loss 0.000 (0.000)	train_nll   0.41 (  0.41)	train_penalty   0.00 (  0.00)	weight_norm  24.84 ( 24.84)	train_acc   0.76 (  0.78)	train_minacc   0.79 (  0.83)	train_majacc   0.76 (  0.77)	train_corr   0.00 (  0.00)	l1 6.1522 (6.1104)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:01, 17.15it/s] 31%|###       | 8/26 [00:00<00:00, 27.45it/s]                                               31%|###       | 8/26 [00:00<00:00, 27.45it/s] 54%|#####3    | 14/26 [00:00<00:00, 37.52it/s] 77%|#######6  | 20/26 [00:00<00:00, 40.34it/s]                                                77%|#######6  | 20/26 [00:00<00:00, 40.34it/s] 96%|#########6| 25/26 [00:00<00:00, 42.78it/s]100%|##########| 26/26 [00:00<00:00, 35.38it/s]
Test: [   0/  26]	Loss 0.422 (0.422)	test_acc   0.75 (  0.75)	test_minacc   0.83 (  0.83)	test_majacc   0.73 (  0.73)	Loss_d 0.422 (0.422)	test_acc_d   0.75 (  0.75)	test_minacc_d   0.83 (  0.83)	test_majacc_d   0.73 (  0.73)	test_corr_d   0.55 (  0.55)
Test: [  10/  26]	Loss 0.371 (0.393)	test_acc   0.79 (  0.78)	test_minacc   0.84 (  0.82)	test_majacc   0.78 (  0.77)	Loss_d 0.371 (0.393)	test_acc_d   0.79 (  0.78)	test_minacc_d   0.84 (  0.82)	test_majacc_d   0.78 (  0.77)	test_corr_d   0.57 (  0.59)
Test: [  20/  26]	Loss 0.381 (0.379)	test_acc   0.80 (  0.79)	test_minacc   0.87 (  0.85)	test_majacc   0.79 (  0.78)	Loss_d 0.381 (0.379)	test_acc_d   0.80 (  0.79)	test_minacc_d   0.87 (  0.85)	test_majacc_d   0.79 (  0.78)	test_corr_d   0.59 (  0.59)
Test: [  26/  26]	Loss 0.403 (0.382)	test_acc   0.75 (  0.79)	test_minacc   0.79 (  0.84)	test_majacc   0.75 (  0.78)	Loss_d 0.403 (0.382)	test_acc_d   0.75 (  0.79)	test_minacc_d   0.79 (  0.84)	test_majacc_d   0.75 (  0.78)	test_corr_d   0.60 (  0.59)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 60.02it/s]
Test: [  0/  1]	Loss 1.192 (1.192)	test_acc   0.64 (  0.64)	test_minacc   0.63 (  0.63)	test_majacc   0.75 (  0.75)	Loss_d 1.192 (1.192)	test_acc_d   0.64 (  0.64)	test_minacc_d   0.63 (  0.63)	test_majacc_d   0.75 (  0.75)	test_corr_d   0.05 (  0.05)
Test: [  1/  1]	Loss 1.192 (1.192)	test_acc   0.64 (  0.64)	test_minacc   0.63 (  0.63)	test_majacc   0.75 (  0.75)	Loss_d 1.192 (1.192)	test_acc_d   0.64 (  0.64)	test_minacc_d   0.63 (  0.63)	test_majacc_d   0.75 (  0.75)	test_corr_d   0.05 (  0.05)
Overall Timing[ 25/  1]	epoch_time 0.0433 (0.0441)	validation_time 0.0004 (0.0007)	train_time 0.0429 (0.0433)
record: (train_acc, test_acc) (0.8021000293493271, 0.6460000276565552)
last accs (train_acc, test_acc) (0.7908000268936157, 0.6420000195503235)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.92it/s] 19%|#9        | 5/26 [00:00<00:00, 22.32it/s] 35%|###4      | 9/26 [00:00<00:00, 28.20it/s] 50%|#####     | 13/26 [00:00<00:00, 30.63it/s] 65%|######5   | 17/26 [00:00<00:00, 32.14it/s] 81%|########  | 21/26 [00:00<00:00, 32.92it/s] 96%|#########6| 25/26 [00:00<00:00, 33.55it/s]100%|##########| 26/26 [00:00<00:00, 28.51it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 676 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 677 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 678 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 679 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 680 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 681 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 682 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 683 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 684 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 685 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 686 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 687 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 688 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 689 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 690 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 691 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 692 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 693 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 694 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 695 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 696 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 697 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 698 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 699 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 700 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 701 400
penalty weights 10000.0
Epoch: [26][  26/  26]	Loss 0.000 (0.001)	train_nll   0.36 (  0.37)	train_penalty   0.00 (  0.00)	weight_norm  24.85 ( 24.85)	train_acc   0.77 (  0.80)	train_minacc   0.72 (  0.83)	train_majacc   0.78 (  0.80)	train_corr   0.00 (  0.00)	l1 6.1296 (6.2862)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.78it/s] 19%|#9        | 5/26 [00:00<00:00, 21.05it/s] 38%|###8      | 10/26 [00:00<00:00, 31.75it/s]                                                38%|###8      | 10/26 [00:00<00:00, 31.75it/s] 58%|#####7    | 15/26 [00:00<00:00, 35.18it/s] 77%|#######6  | 20/26 [00:00<00:00, 37.65it/s]                                                77%|#######6  | 20/26 [00:00<00:00, 37.65it/s] 96%|#########6| 25/26 [00:00<00:00, 40.39it/s]100%|##########| 26/26 [00:00<00:00, 32.36it/s]
Test: [   0/  26]	Loss 0.380 (0.380)	test_acc   0.78 (  0.78)	test_minacc   0.83 (  0.83)	test_majacc   0.77 (  0.77)	Loss_d 0.380 (0.380)	test_acc_d   0.78 (  0.78)	test_minacc_d   0.83 (  0.83)	test_majacc_d   0.77 (  0.77)	test_corr_d   0.61 (  0.61)
Test: [  10/  26]	Loss 0.358 (0.372)	test_acc   0.82 (  0.79)	test_minacc   0.84 (  0.81)	test_majacc   0.81 (  0.79)	Loss_d 0.358 (0.372)	test_acc_d   0.82 (  0.79)	test_minacc_d   0.84 (  0.81)	test_majacc_d   0.81 (  0.79)	test_corr_d   0.62 (  0.63)
Test: [  20/  26]	Loss 0.345 (0.355)	test_acc   0.82 (  0.81)	test_minacc   0.84 (  0.83)	test_majacc   0.82 (  0.80)	Loss_d 0.345 (0.355)	test_acc_d   0.82 (  0.81)	test_minacc_d   0.84 (  0.83)	test_majacc_d   0.82 (  0.80)	test_corr_d   0.64 (  0.64)
Test: [  26/  26]	Loss 0.363 (0.356)	test_acc   0.77 (  0.81)	test_minacc   0.76 (  0.82)	test_majacc   0.77 (  0.80)	Loss_d 0.363 (0.356)	test_acc_d   0.77 (  0.81)	test_minacc_d   0.76 (  0.82)	test_majacc_d   0.77 (  0.80)	test_corr_d   0.65 (  0.64)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.55it/s]
Test: [  0/  1]	Loss 1.289 (1.289)	test_acc   0.62 (  0.62)	test_minacc   0.60 (  0.60)	test_majacc   0.80 (  0.80)	Loss_d 1.289 (1.289)	test_acc_d   0.62 (  0.62)	test_minacc_d   0.60 (  0.60)	test_majacc_d   0.80 (  0.80)	test_corr_d   0.15 (  0.15)
Test: [  1/  1]	Loss 1.289 (1.289)	test_acc   0.62 (  0.62)	test_minacc   0.60 (  0.60)	test_majacc   0.80 (  0.80)	Loss_d 1.289 (1.289)	test_acc_d   0.62 (  0.62)	test_minacc_d   0.60 (  0.60)	test_majacc_d   0.80 (  0.80)	test_corr_d   0.15 (  0.15)
Overall Timing[ 26/  1]	epoch_time 0.0419 (0.0440)	validation_time 0.0006 (0.0007)	train_time 0.0412 (0.0432)
record: (train_acc, test_acc) (0.8021000293493271, 0.6460000276565552)
last accs (train_acc, test_acc) (0.8070000289678574, 0.6210000514984131)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.06it/s] 19%|#9        | 5/26 [00:00<00:01, 18.46it/s] 35%|###4      | 9/26 [00:00<00:00, 24.77it/s] 50%|#####     | 13/26 [00:00<00:00, 28.67it/s] 65%|######5   | 17/26 [00:00<00:00, 30.95it/s] 81%|########  | 21/26 [00:00<00:00, 32.12it/s] 96%|#########6| 25/26 [00:00<00:00, 33.37it/s]100%|##########| 26/26 [00:00<00:00, 26.72it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 702 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 703 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 704 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 705 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 706 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 707 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 708 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 709 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 710 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 711 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 712 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 713 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 714 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 715 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 716 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 717 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 718 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 719 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 720 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 721 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 722 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 723 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 724 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 725 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 726 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 727 400
penalty weights 10000.0
Epoch: [27][  26/  26]	Loss 0.000 (0.001)	train_nll   0.43 (  0.42)	train_penalty   0.00 (  0.00)	weight_norm  24.87 ( 24.86)	train_acc   0.78 (  0.77)	train_minacc   0.79 (  0.80)	train_majacc   0.78 (  0.77)	train_corr   0.00 (  0.00)	l1 6.0973 (6.0759)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:00, 27.51it/s] 31%|###       | 8/26 [00:00<00:00, 40.22it/s]                                               31%|###       | 8/26 [00:00<00:00, 40.22it/s] 50%|#####     | 13/26 [00:00<00:00, 36.79it/s] 69%|######9   | 18/26 [00:00<00:00, 40.61it/s]                                                69%|######9   | 18/26 [00:00<00:00, 40.61it/s] 88%|########8 | 23/26 [00:00<00:00, 42.31it/s]100%|##########| 26/26 [00:00<00:00, 36.89it/s]
Test: [   0/  26]	Loss 0.427 (0.427)	test_acc   0.74 (  0.74)	test_minacc   0.78 (  0.78)	test_majacc   0.73 (  0.73)	Loss_d 0.427 (0.427)	test_acc_d   0.74 (  0.74)	test_minacc_d   0.78 (  0.78)	test_majacc_d   0.73 (  0.73)	test_corr_d   0.58 (  0.58)
Test: [  10/  26]	Loss 0.395 (0.414)	test_acc   0.78 (  0.77)	test_minacc   0.81 (  0.80)	test_majacc   0.78 (  0.77)	Loss_d 0.395 (0.414)	test_acc_d   0.78 (  0.77)	test_minacc_d   0.81 (  0.80)	test_majacc_d   0.78 (  0.77)	test_corr_d   0.59 (  0.60)
Test: [  20/  26]	Loss 0.384 (0.397)	test_acc   0.80 (  0.78)	test_minacc   0.82 (  0.83)	test_majacc   0.80 (  0.78)	Loss_d 0.384 (0.397)	test_acc_d   0.80 (  0.78)	test_minacc_d   0.82 (  0.83)	test_majacc_d   0.80 (  0.78)	test_corr_d   0.61 (  0.61)
Test: [  26/  26]	Loss 0.408 (0.397)	test_acc   0.78 (  0.79)	test_minacc   0.83 (  0.83)	test_majacc   0.78 (  0.78)	Loss_d 0.408 (0.397)	test_acc_d   0.78 (  0.79)	test_minacc_d   0.83 (  0.83)	test_majacc_d   0.78 (  0.78)	test_corr_d   0.62 (  0.60)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.31it/s]
Test: [  0/  1]	Loss 1.204 (1.204)	test_acc   0.63 (  0.63)	test_minacc   0.61 (  0.61)	test_majacc   0.79 (  0.79)	Loss_d 1.204 (1.204)	test_acc_d   0.63 (  0.63)	test_minacc_d   0.61 (  0.61)	test_majacc_d   0.79 (  0.79)	test_corr_d   0.13 (  0.13)
Test: [  1/  1]	Loss 1.204 (1.204)	test_acc   0.63 (  0.63)	test_minacc   0.61 (  0.61)	test_majacc   0.79 (  0.79)	Loss_d 1.204 (1.204)	test_acc_d   0.63 (  0.63)	test_minacc_d   0.61 (  0.61)	test_majacc_d   0.79 (  0.79)	test_corr_d   0.13 (  0.13)
Overall Timing[ 27/  1]	epoch_time 0.0401 (0.0439)	validation_time 0.0004 (0.0007)	train_time 0.0397 (0.0431)
record: (train_acc, test_acc) (0.8021000293493271, 0.6460000276565552)
last accs (train_acc, test_acc) (0.7863000308275223, 0.6270000338554382)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:05,  4.89it/s] 19%|#9        | 5/26 [00:00<00:01, 18.28it/s] 35%|###4      | 9/26 [00:00<00:00, 24.72it/s] 50%|#####     | 13/26 [00:00<00:00, 28.51it/s] 65%|######5   | 17/26 [00:00<00:00, 30.49it/s] 81%|########  | 21/26 [00:00<00:00, 31.64it/s] 96%|#########6| 25/26 [00:00<00:00, 32.49it/s]100%|##########| 26/26 [00:00<00:00, 26.54it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 728 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 729 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 730 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 731 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 732 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 733 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 734 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 735 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 736 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 737 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 738 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 739 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 740 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 741 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 742 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 743 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 744 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 745 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 746 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 747 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 748 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 749 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 750 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 751 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 752 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 753 400
penalty weights 10000.0
Epoch: [28][  26/  26]	Loss 0.001 (0.001)	train_nll   0.36 (  0.37)	train_penalty   0.00 (  0.00)	weight_norm  24.89 ( 24.88)	train_acc   0.76 (  0.79)	train_minacc   0.69 (  0.85)	train_majacc   0.77 (  0.78)	train_corr   0.00 (  0.00)	l1 6.7373 (6.4865)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.87it/s] 23%|##3       | 6/26 [00:00<00:00, 32.48it/s]                                               23%|##3       | 6/26 [00:00<00:00, 32.48it/s] 42%|####2     | 11/26 [00:00<00:00, 38.54it/s] 62%|######1   | 16/26 [00:00<00:00, 42.14it/s]                                                62%|######1   | 16/26 [00:00<00:00, 42.14it/s] 81%|########  | 21/26 [00:00<00:00, 39.58it/s]100%|##########| 26/26 [00:00<00:00, 41.89it/s]100%|##########| 26/26 [00:00<00:00, 35.88it/s]
Test: [   0/  26]	Loss 0.365 (0.365)	test_acc   0.78 (  0.78)	test_minacc   0.82 (  0.82)	test_majacc   0.78 (  0.78)	Loss_d 0.365 (0.365)	test_acc_d   0.78 (  0.78)	test_minacc_d   0.82 (  0.82)	test_majacc_d   0.78 (  0.78)	test_corr_d   0.61 (  0.61)
Test: [  10/  26]	Loss 0.360 (0.373)	test_acc   0.81 (  0.78)	test_minacc   0.87 (  0.81)	test_majacc   0.80 (  0.78)	Loss_d 0.360 (0.373)	test_acc_d   0.81 (  0.78)	test_minacc_d   0.87 (  0.81)	test_majacc_d   0.80 (  0.78)	test_corr_d   0.61 (  0.62)
Test: [  20/  26]	Loss 0.325 (0.349)	test_acc   0.83 (  0.81)	test_minacc   0.85 (  0.83)	test_majacc   0.83 (  0.80)	Loss_d 0.325 (0.349)	test_acc_d   0.83 (  0.81)	test_minacc_d   0.85 (  0.83)	test_majacc_d   0.83 (  0.80)	test_corr_d   0.65 (  0.64)
Test: [  26/  26]	Loss 0.349 (0.348)	test_acc   0.77 (  0.81)	test_minacc   0.72 (  0.82)	test_majacc   0.78 (  0.81)	Loss_d 0.349 (0.348)	test_acc_d   0.77 (  0.81)	test_minacc_d   0.72 (  0.82)	test_majacc_d   0.78 (  0.81)	test_corr_d   0.66 (  0.64)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 58.45it/s]
Test: [  0/  1]	Loss 1.491 (1.491)	test_acc   0.62 (  0.62)	test_minacc   0.60 (  0.60)	test_majacc   0.80 (  0.80)	Loss_d 1.491 (1.491)	test_acc_d   0.62 (  0.62)	test_minacc_d   0.60 (  0.60)	test_majacc_d   0.80 (  0.80)	test_corr_d   0.13 (  0.13)
Test: [  1/  1]	Loss 1.491 (1.491)	test_acc   0.62 (  0.62)	test_minacc   0.60 (  0.60)	test_majacc   0.80 (  0.80)	Loss_d 1.491 (1.491)	test_acc_d   0.62 (  0.62)	test_minacc_d   0.60 (  0.60)	test_majacc_d   0.80 (  0.80)	test_corr_d   0.13 (  0.13)
Overall Timing[ 28/  1]	epoch_time 0.0424 (0.0438)	validation_time 0.0003 (0.0007)	train_time 0.0421 (0.0430)
record: (train_acc, test_acc) (0.8021000293493271, 0.6460000276565552)
last accs (train_acc, test_acc) (0.8079000324010849, 0.6170000433921814)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.68it/s] 15%|#5        | 4/26 [00:00<00:01, 16.35it/s] 31%|###       | 8/26 [00:00<00:00, 23.59it/s] 46%|####6     | 12/26 [00:00<00:00, 27.38it/s] 62%|######1   | 16/26 [00:00<00:00, 29.71it/s] 77%|#######6  | 20/26 [00:00<00:00, 31.18it/s] 92%|#########2| 24/26 [00:00<00:00, 32.75it/s]100%|##########| 26/26 [00:00<00:00, 27.02it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 754 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 755 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 756 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 757 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 758 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 759 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 760 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 761 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 762 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 763 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 764 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 765 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 766 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 767 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 768 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 769 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 770 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 771 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 772 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 773 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 774 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 775 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 776 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 777 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 778 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 779 400
penalty weights 10000.0
Epoch: [29][  26/  26]	Loss 0.001 (0.001)	train_nll   0.35 (  0.35)	train_penalty   0.00 (  0.00)	weight_norm  24.91 ( 24.90)	train_acc   0.78 (  0.81)	train_minacc   0.90 (  0.82)	train_majacc   0.77 (  0.81)	train_corr   0.00 (  0.00)	l1 6.5847 (6.3948)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.21it/s] 15%|#5        | 4/26 [00:00<00:01, 19.13it/s] 35%|###4      | 9/26 [00:00<00:00, 30.76it/s]                                               35%|###4      | 9/26 [00:00<00:00, 30.76it/s] 54%|#####3    | 14/26 [00:00<00:00, 37.22it/s] 73%|#######3  | 19/26 [00:00<00:00, 40.11it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 40.11it/s] 92%|#########2| 24/26 [00:00<00:00, 39.01it/s]100%|##########| 26/26 [00:00<00:00, 33.42it/s]
Test: [   0/  26]	Loss 0.393 (0.393)	test_acc   0.76 (  0.76)	test_minacc   0.83 (  0.83)	test_majacc   0.74 (  0.74)	Loss_d 0.393 (0.393)	test_acc_d   0.76 (  0.76)	test_minacc_d   0.83 (  0.83)	test_majacc_d   0.74 (  0.74)	test_corr_d   0.57 (  0.57)
Test: [  10/  26]	Loss 0.374 (0.382)	test_acc   0.79 (  0.77)	test_minacc   0.88 (  0.84)	test_majacc   0.77 (  0.76)	Loss_d 0.374 (0.382)	test_acc_d   0.79 (  0.77)	test_minacc_d   0.88 (  0.84)	test_majacc_d   0.77 (  0.76)	test_corr_d   0.58 (  0.59)
Test: [  20/  26]	Loss 0.329 (0.361)	test_acc   0.81 (  0.79)	test_minacc   0.84 (  0.85)	test_majacc   0.80 (  0.78)	Loss_d 0.329 (0.361)	test_acc_d   0.81 (  0.79)	test_minacc_d   0.84 (  0.85)	test_majacc_d   0.80 (  0.78)	test_corr_d   0.62 (  0.61)
Test: [  26/  26]	Loss 0.349 (0.358)	test_acc   0.78 (  0.80)	test_minacc   0.90 (  0.86)	test_majacc   0.77 (  0.78)	Loss_d 0.349 (0.358)	test_acc_d   0.78 (  0.80)	test_minacc_d   0.90 (  0.86)	test_majacc_d   0.77 (  0.78)	test_corr_d   0.62 (  0.61)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.87it/s]
Test: [  0/  1]	Loss 1.412 (1.412)	test_acc   0.64 (  0.64)	test_minacc   0.63 (  0.63)	test_majacc   0.72 (  0.72)	Loss_d 1.412 (1.412)	test_acc_d   0.64 (  0.64)	test_minacc_d   0.63 (  0.63)	test_majacc_d   0.72 (  0.72)	test_corr_d   0.06 (  0.06)
Test: [  1/  1]	Loss 1.412 (1.412)	test_acc   0.64 (  0.64)	test_minacc   0.63 (  0.63)	test_majacc   0.72 (  0.72)	Loss_d 1.412 (1.412)	test_acc_d   0.64 (  0.64)	test_minacc_d   0.63 (  0.63)	test_majacc_d   0.72 (  0.72)	test_corr_d   0.06 (  0.06)
Overall Timing[ 29/  1]	epoch_time 0.0428 (0.0438)	validation_time 0.0004 (0.0007)	train_time 0.0423 (0.0430)
record: (train_acc, test_acc) (0.8021000293493271, 0.6460000276565552)
last accs (train_acc, test_acc) (0.7953000256419182, 0.64000004529953)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.25it/s] 19%|#9        | 5/26 [00:00<00:00, 23.18it/s] 35%|###4      | 9/26 [00:00<00:00, 29.18it/s] 50%|#####     | 13/26 [00:00<00:00, 31.64it/s] 65%|######5   | 17/26 [00:00<00:00, 33.53it/s] 81%|########  | 21/26 [00:00<00:00, 34.58it/s] 96%|#########6| 25/26 [00:00<00:00, 35.24it/s]100%|##########| 26/26 [00:00<00:00, 30.04it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 780 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 781 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 782 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 783 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 784 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 785 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 786 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 787 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 788 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 789 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 790 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 791 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 792 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 793 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 794 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 795 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 796 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 797 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 798 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 799 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 800 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 801 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 802 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 803 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 804 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 805 400
penalty weights 10000.0
Epoch: [30][  26/  26]	Loss 0.000 (0.001)	train_nll   0.38 (  0.38)	train_penalty   0.00 (  0.00)	weight_norm  24.92 ( 24.91)	train_acc   0.78 (  0.78)	train_minacc   0.76 (  0.80)	train_majacc   0.78 (  0.77)	train_corr   0.00 (  0.00)	l1 6.5093 (6.4208)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.78it/s] 23%|##3       | 6/26 [00:00<00:00, 28.29it/s]                                               23%|##3       | 6/26 [00:00<00:00, 28.29it/s] 42%|####2     | 11/26 [00:00<00:00, 35.57it/s] 62%|######1   | 16/26 [00:00<00:00, 39.22it/s]                                                62%|######1   | 16/26 [00:00<00:00, 39.22it/s] 81%|########  | 21/26 [00:00<00:00, 39.43it/s]100%|##########| 26/26 [00:00<00:00, 42.30it/s]100%|##########| 26/26 [00:00<00:00, 34.30it/s]
Test: [   0/  26]	Loss 0.393 (0.393)	test_acc   0.77 (  0.77)	test_minacc   0.85 (  0.85)	test_majacc   0.75 (  0.75)	Loss_d 0.393 (0.393)	test_acc_d   0.77 (  0.77)	test_minacc_d   0.85 (  0.85)	test_majacc_d   0.75 (  0.75)	test_corr_d   0.59 (  0.59)
Test: [  10/  26]	Loss 0.413 (0.395)	test_acc   0.76 (  0.77)	test_minacc   0.84 (  0.83)	test_majacc   0.75 (  0.76)	Loss_d 0.413 (0.395)	test_acc_d   0.76 (  0.77)	test_minacc_d   0.84 (  0.83)	test_majacc_d   0.75 (  0.76)	test_corr_d   0.56 (  0.60)
Test: [  20/  26]	Loss 0.344 (0.381)	test_acc   0.82 (  0.79)	test_minacc   0.87 (  0.85)	test_majacc   0.81 (  0.78)	Loss_d 0.344 (0.381)	test_acc_d   0.82 (  0.79)	test_minacc_d   0.87 (  0.85)	test_majacc_d   0.81 (  0.78)	test_corr_d   0.62 (  0.61)
Test: [  26/  26]	Loss 0.369 (0.377)	test_acc   0.79 (  0.79)	test_minacc   0.86 (  0.85)	test_majacc   0.78 (  0.78)	Loss_d 0.369 (0.377)	test_acc_d   0.79 (  0.79)	test_minacc_d   0.86 (  0.85)	test_majacc_d   0.78 (  0.78)	test_corr_d   0.63 (  0.61)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.83it/s]
Test: [  0/  1]	Loss 1.360 (1.360)	test_acc   0.63 (  0.63)	test_minacc   0.62 (  0.62)	test_majacc   0.73 (  0.73)	Loss_d 1.360 (1.360)	test_acc_d   0.63 (  0.63)	test_minacc_d   0.62 (  0.62)	test_majacc_d   0.73 (  0.73)	test_corr_d   0.09 (  0.09)
Test: [  1/  1]	Loss 1.360 (1.360)	test_acc   0.63 (  0.63)	test_minacc   0.62 (  0.62)	test_majacc   0.73 (  0.73)	Loss_d 1.360 (1.360)	test_acc_d   0.63 (  0.63)	test_minacc_d   0.62 (  0.62)	test_majacc_d   0.73 (  0.73)	test_corr_d   0.09 (  0.09)
Overall Timing[ 30/  1]	epoch_time 0.0375 (0.0436)	validation_time 0.0004 (0.0006)	train_time 0.0370 (0.0428)
record: (train_acc, test_acc) (0.8021000293493271, 0.6460000276565552)
last accs (train_acc, test_acc) (0.7924000283479691, 0.6340000033378601)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:06,  3.61it/s] 19%|#9        | 5/26 [00:00<00:01, 15.37it/s] 35%|###4      | 9/26 [00:00<00:00, 21.76it/s] 50%|#####     | 13/26 [00:00<00:00, 26.16it/s] 65%|######5   | 17/26 [00:00<00:00, 29.87it/s] 81%|########  | 21/26 [00:00<00:00, 32.40it/s] 96%|#########6| 25/26 [00:00<00:00, 34.16it/s]100%|##########| 26/26 [00:01<00:00, 25.90it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 806 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 807 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 808 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 809 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 810 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 811 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 812 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 813 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 814 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 815 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 816 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 817 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 818 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 819 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 820 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 821 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 822 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 823 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 824 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 825 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 826 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 827 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 828 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 829 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 830 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 831 400
penalty weights 10000.0
Epoch: [31][  26/  26]	Loss 0.003 (0.001)	train_nll   0.37 (  0.36)	train_penalty   0.00 (  0.00)	weight_norm  24.93 ( 24.93)	train_acc   0.77 (  0.79)	train_minacc   0.79 (  0.84)	train_majacc   0.76 (  0.79)	train_corr   0.00 (  0.00)	l1 6.7798 (6.4751)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 19.23it/s] 27%|##6       | 7/26 [00:00<00:00, 34.30it/s]                                               27%|##6       | 7/26 [00:00<00:00, 34.30it/s] 46%|####6     | 12/26 [00:00<00:00, 40.19it/s] 65%|######5   | 17/26 [00:00<00:00, 41.24it/s]                                                65%|######5   | 17/26 [00:00<00:00, 41.24it/s] 85%|########4 | 22/26 [00:00<00:00, 40.58it/s]100%|##########| 26/26 [00:00<00:00, 37.33it/s]
Test: [   0/  26]	Loss 0.356 (0.356)	test_acc   0.78 (  0.78)	test_minacc   0.87 (  0.87)	test_majacc   0.77 (  0.77)	Loss_d 0.356 (0.356)	test_acc_d   0.78 (  0.78)	test_minacc_d   0.87 (  0.87)	test_majacc_d   0.77 (  0.77)	test_corr_d   0.58 (  0.58)
Test: [  10/  26]	Loss 0.389 (0.379)	test_acc   0.78 (  0.77)	test_minacc   0.84 (  0.84)	test_majacc   0.77 (  0.76)	Loss_d 0.389 (0.379)	test_acc_d   0.78 (  0.77)	test_minacc_d   0.84 (  0.84)	test_majacc_d   0.77 (  0.76)	test_corr_d   0.54 (  0.58)
Test: [  20/  26]	Loss 0.328 (0.366)	test_acc   0.81 (  0.79)	test_minacc   0.89 (  0.85)	test_majacc   0.80 (  0.78)	Loss_d 0.328 (0.366)	test_acc_d   0.81 (  0.79)	test_minacc_d   0.89 (  0.85)	test_majacc_d   0.80 (  0.78)	test_corr_d   0.60 (  0.59)
Test: [  26/  26]	Loss 0.354 (0.359)	test_acc   0.77 (  0.79)	test_minacc   0.79 (  0.85)	test_majacc   0.76 (  0.78)	Loss_d 0.354 (0.359)	test_acc_d   0.77 (  0.79)	test_minacc_d   0.79 (  0.85)	test_majacc_d   0.76 (  0.78)	test_corr_d   0.62 (  0.59)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 60.81it/s]
Test: [  0/  1]	Loss 1.504 (1.504)	test_acc   0.63 (  0.63)	test_minacc   0.62 (  0.62)	test_majacc   0.75 (  0.75)	Loss_d 1.504 (1.504)	test_acc_d   0.63 (  0.63)	test_minacc_d   0.62 (  0.62)	test_majacc_d   0.75 (  0.75)	test_corr_d   0.03 (  0.03)
Test: [  1/  1]	Loss 1.504 (1.504)	test_acc   0.63 (  0.63)	test_minacc   0.62 (  0.62)	test_majacc   0.75 (  0.75)	Loss_d 1.504 (1.504)	test_acc_d   0.63 (  0.63)	test_minacc_d   0.62 (  0.62)	test_majacc_d   0.75 (  0.75)	test_corr_d   0.03 (  0.03)
Overall Timing[ 31/  1]	epoch_time 0.0419 (0.0435)	validation_time 0.0003 (0.0006)	train_time 0.0415 (0.0428)
record: (train_acc, test_acc) (0.8021000293493271, 0.6460000276565552)
last accs (train_acc, test_acc) (0.7945000295042992, 0.6290000081062317)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.47it/s] 19%|#9        | 5/26 [00:00<00:00, 24.29it/s] 35%|###4      | 9/26 [00:00<00:00, 29.83it/s] 50%|#####     | 13/26 [00:00<00:00, 32.35it/s] 65%|######5   | 17/26 [00:00<00:00, 33.12it/s] 81%|########  | 21/26 [00:00<00:00, 33.41it/s] 96%|#########6| 25/26 [00:00<00:00, 34.15it/s]100%|##########| 26/26 [00:00<00:00, 29.80it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 832 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 833 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 834 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 835 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 836 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 837 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 838 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 839 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 840 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 841 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 842 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 843 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 844 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 845 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 846 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 847 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 848 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 849 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 850 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 851 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 852 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 853 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 854 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 855 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 856 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 857 400
penalty weights 10000.0
Epoch: [32][  26/  26]	Loss 0.000 (0.001)	train_nll   0.34 (  0.35)	train_penalty   0.00 (  0.00)	weight_norm  24.94 ( 24.93)	train_acc   0.82 (  0.80)	train_minacc   0.66 (  0.81)	train_majacc   0.84 (  0.80)	train_corr   0.00 (  0.00)	l1 6.7171 (6.4830)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.85it/s] 15%|#5        | 4/26 [00:00<00:01, 15.57it/s] 35%|###4      | 9/26 [00:00<00:00, 27.16it/s]                                               35%|###4      | 9/26 [00:00<00:00, 27.16it/s] 54%|#####3    | 14/26 [00:00<00:00, 34.33it/s] 73%|#######3  | 19/26 [00:00<00:00, 38.13it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 38.13it/s] 92%|#########2| 24/26 [00:00<00:00, 38.13it/s]100%|##########| 26/26 [00:00<00:00, 31.17it/s]
Test: [   0/  26]	Loss 0.402 (0.402)	test_acc   0.77 (  0.77)	test_minacc   0.77 (  0.77)	test_majacc   0.78 (  0.78)	Loss_d 0.402 (0.402)	test_acc_d   0.77 (  0.77)	test_minacc_d   0.77 (  0.77)	test_majacc_d   0.78 (  0.78)	test_corr_d   0.62 (  0.62)
Test: [  10/  26]	Loss 0.408 (0.393)	test_acc   0.78 (  0.79)	test_minacc   0.79 (  0.78)	test_majacc   0.78 (  0.79)	Loss_d 0.408 (0.393)	test_acc_d   0.78 (  0.79)	test_minacc_d   0.79 (  0.78)	test_majacc_d   0.78 (  0.79)	test_corr_d   0.58 (  0.62)
Test: [  20/  26]	Loss 0.342 (0.380)	test_acc   0.82 (  0.79)	test_minacc   0.79 (  0.79)	test_majacc   0.82 (  0.79)	Loss_d 0.342 (0.380)	test_acc_d   0.82 (  0.79)	test_minacc_d   0.79 (  0.79)	test_majacc_d   0.82 (  0.79)	test_corr_d   0.64 (  0.62)
Test: [  26/  26]	Loss 0.330 (0.372)	test_acc   0.82 (  0.80)	test_minacc   0.72 (  0.79)	test_majacc   0.83 (  0.80)	Loss_d 0.330 (0.372)	test_acc_d   0.82 (  0.80)	test_minacc_d   0.72 (  0.79)	test_majacc_d   0.83 (  0.80)	test_corr_d   0.68 (  0.63)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.21it/s]
Test: [  0/  1]	Loss 1.482 (1.482)	test_acc   0.61 (  0.61)	test_minacc   0.59 (  0.59)	test_majacc   0.77 (  0.77)	Loss_d 1.482 (1.482)	test_acc_d   0.61 (  0.61)	test_minacc_d   0.59 (  0.59)	test_majacc_d   0.77 (  0.77)	test_corr_d   0.10 (  0.10)
Test: [  1/  1]	Loss 1.482 (1.482)	test_acc   0.61 (  0.61)	test_minacc   0.59 (  0.59)	test_majacc   0.77 (  0.77)	Loss_d 1.482 (1.482)	test_acc_d   0.61 (  0.61)	test_minacc_d   0.59 (  0.59)	test_majacc_d   0.77 (  0.77)	test_corr_d   0.10 (  0.10)
Overall Timing[ 32/  1]	epoch_time 0.0420 (0.0435)	validation_time 0.0007 (0.0006)	train_time 0.0414 (0.0427)
record: (train_acc, test_acc) (0.8021000293493271, 0.6460000276565552)
last accs (train_acc, test_acc) (0.7991000269651413, 0.6100000143051147)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:00, 23.46it/s] 27%|##6       | 7/26 [00:00<00:00, 30.17it/s] 42%|####2     | 11/26 [00:00<00:00, 32.51it/s] 58%|#####7    | 15/26 [00:00<00:00, 34.01it/s] 73%|#######3  | 19/26 [00:00<00:00, 35.18it/s] 88%|########8 | 23/26 [00:00<00:00, 36.10it/s]100%|##########| 26/26 [00:00<00:00, 31.62it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 858 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 859 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 860 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 861 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 862 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 863 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 864 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 865 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 866 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 867 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 868 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 869 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 870 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 871 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 872 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 873 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 874 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 875 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 876 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 877 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 878 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 879 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 880 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 881 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 882 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 883 400
penalty weights 10000.0
Epoch: [33][  26/  26]	Loss 0.001 (0.001)	train_nll   0.35 (  0.35)	train_penalty   0.00 (  0.00)	weight_norm  24.96 ( 24.95)	train_acc   0.78 (  0.80)	train_minacc   0.90 (  0.83)	train_majacc   0.77 (  0.79)	train_corr   0.00 (  0.00)	l1 6.4162 (6.3169)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.29it/s] 27%|##6       | 7/26 [00:00<00:00, 28.26it/s]                                               27%|##6       | 7/26 [00:00<00:00, 28.26it/s] 50%|#####     | 13/26 [00:00<00:00, 36.80it/s] 69%|######9   | 18/26 [00:00<00:00, 38.49it/s]                                                69%|######9   | 18/26 [00:00<00:00, 38.49it/s] 88%|########8 | 23/26 [00:00<00:00, 40.68it/s]100%|##########| 26/26 [00:00<00:00, 34.75it/s]
Test: [   0/  26]	Loss 0.350 (0.350)	test_acc   0.80 (  0.80)	test_minacc   0.92 (  0.92)	test_majacc   0.78 (  0.78)	Loss_d 0.350 (0.350)	test_acc_d   0.80 (  0.80)	test_minacc_d   0.92 (  0.92)	test_majacc_d   0.78 (  0.78)	test_corr_d   0.57 (  0.57)
Test: [  10/  26]	Loss 0.411 (0.399)	test_acc   0.79 (  0.77)	test_minacc   0.81 (  0.82)	test_majacc   0.79 (  0.76)	Loss_d 0.411 (0.399)	test_acc_d   0.79 (  0.77)	test_minacc_d   0.81 (  0.82)	test_majacc_d   0.79 (  0.76)	test_corr_d   0.54 (  0.56)
Test: [  20/  26]	Loss 0.374 (0.392)	test_acc   0.78 (  0.77)	test_minacc   0.82 (  0.82)	test_majacc   0.77 (  0.76)	Loss_d 0.374 (0.392)	test_acc_d   0.78 (  0.77)	test_minacc_d   0.82 (  0.82)	test_majacc_d   0.77 (  0.76)	test_corr_d   0.59 (  0.56)
Test: [  26/  26]	Loss 0.355 (0.386)	test_acc   0.78 (  0.78)	test_minacc   0.90 (  0.83)	test_majacc   0.76 (  0.77)	Loss_d 0.355 (0.386)	test_acc_d   0.78 (  0.78)	test_minacc_d   0.90 (  0.83)	test_majacc_d   0.76 (  0.77)	test_corr_d   0.61 (  0.57)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.73it/s]
Test: [  0/  1]	Loss 1.447 (1.447)	test_acc   0.62 (  0.62)	test_minacc   0.61 (  0.61)	test_majacc   0.74 (  0.74)	Loss_d 1.447 (1.447)	test_acc_d   0.62 (  0.62)	test_minacc_d   0.61 (  0.61)	test_majacc_d   0.74 (  0.74)	test_corr_d   0.01 (  0.01)
Test: [  1/  1]	Loss 1.447 (1.447)	test_acc   0.62 (  0.62)	test_minacc   0.61 (  0.61)	test_majacc   0.74 (  0.74)	Loss_d 1.447 (1.447)	test_acc_d   0.62 (  0.62)	test_minacc_d   0.61 (  0.61)	test_majacc_d   0.74 (  0.74)	test_corr_d   0.01 (  0.01)
Overall Timing[ 33/  1]	epoch_time 0.0410 (0.0434)	validation_time 0.0004 (0.0006)	train_time 0.0406 (0.0427)
record: (train_acc, test_acc) (0.8021000293493271, 0.6460000276565552)
last accs (train_acc, test_acc) (0.777100027680397, 0.6220000386238098)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.69it/s] 19%|#9        | 5/26 [00:00<00:00, 21.75it/s] 35%|###4      | 9/26 [00:00<00:00, 27.44it/s] 50%|#####     | 13/26 [00:00<00:00, 29.54it/s] 65%|######5   | 17/26 [00:00<00:00, 31.00it/s] 81%|########  | 21/26 [00:00<00:00, 32.03it/s] 96%|#########6| 25/26 [00:00<00:00, 33.11it/s]100%|##########| 26/26 [00:00<00:00, 28.00it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 884 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 885 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 886 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 887 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 888 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 889 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 890 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 891 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 892 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 893 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 894 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 895 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 896 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 897 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 898 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 899 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 900 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 901 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 902 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 903 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 904 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 905 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 906 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 907 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 908 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 909 400
penalty weights 10000.0
Epoch: [34][  26/  26]	Loss 0.000 (0.001)	train_nll   0.32 (  0.35)	train_penalty   0.00 (  0.00)	weight_norm  24.98 ( 24.96)	train_acc   0.82 (  0.80)	train_minacc   0.79 (  0.84)	train_majacc   0.82 (  0.79)	train_corr   0.00 (  0.00)	l1 6.8662 (6.3223)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.27it/s] 27%|##6       | 7/26 [00:00<00:00, 30.08it/s]                                               27%|##6       | 7/26 [00:00<00:00, 30.08it/s] 46%|####6     | 12/26 [00:00<00:00, 34.62it/s] 65%|######5   | 17/26 [00:00<00:00, 37.59it/s]                                                65%|######5   | 17/26 [00:00<00:00, 37.59it/s] 85%|########4 | 22/26 [00:00<00:00, 39.82it/s]100%|##########| 26/26 [00:00<00:00, 32.21it/s]
Test: [   0/  26]	Loss 0.373 (0.373)	test_acc   0.77 (  0.77)	test_minacc   0.85 (  0.85)	test_majacc   0.76 (  0.76)	Loss_d 0.373 (0.373)	test_acc_d   0.77 (  0.77)	test_minacc_d   0.85 (  0.85)	test_majacc_d   0.76 (  0.76)	test_corr_d   0.60 (  0.60)
Test: [  10/  26]	Loss 0.393 (0.379)	test_acc   0.78 (  0.77)	test_minacc   0.84 (  0.81)	test_majacc   0.76 (  0.76)	Loss_d 0.393 (0.379)	test_acc_d   0.78 (  0.77)	test_minacc_d   0.84 (  0.81)	test_majacc_d   0.76 (  0.76)	test_corr_d   0.58 (  0.61)
Test: [  20/  26]	Loss 0.340 (0.373)	test_acc   0.79 (  0.78)	test_minacc   0.81 (  0.83)	test_majacc   0.79 (  0.77)	Loss_d 0.340 (0.373)	test_acc_d   0.79 (  0.78)	test_minacc_d   0.81 (  0.83)	test_majacc_d   0.79 (  0.77)	test_corr_d   0.62 (  0.61)
Test: [  26/  26]	Loss 0.319 (0.366)	test_acc   0.81 (  0.78)	test_minacc   0.86 (  0.83)	test_majacc   0.80 (  0.78)	Loss_d 0.319 (0.366)	test_acc_d   0.81 (  0.78)	test_minacc_d   0.86 (  0.83)	test_majacc_d   0.80 (  0.78)	test_corr_d   0.66 (  0.62)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.23it/s]
Test: [  0/  1]	Loss 1.585 (1.585)	test_acc   0.65 (  0.65)	test_minacc   0.64 (  0.64)	test_majacc   0.74 (  0.74)	Loss_d 1.585 (1.585)	test_acc_d   0.65 (  0.65)	test_minacc_d   0.64 (  0.64)	test_majacc_d   0.74 (  0.74)	test_corr_d   0.05 (  0.05)
Test: [  1/  1]	Loss 1.585 (1.585)	test_acc   0.65 (  0.65)	test_minacc   0.64 (  0.64)	test_majacc   0.74 (  0.74)	Loss_d 1.585 (1.585)	test_acc_d   0.65 (  0.65)	test_minacc_d   0.64 (  0.64)	test_majacc_d   0.74 (  0.74)	test_corr_d   0.05 (  0.05)
Overall Timing[ 34/  1]	epoch_time 0.0407 (0.0433)	validation_time 0.0007 (0.0006)	train_time 0.0400 (0.0426)
record: (train_acc, test_acc) (0.8021000293493271, 0.6460000276565552)
last accs (train_acc, test_acc) (0.783900033056736, 0.6460000276565552)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:05,  4.21it/s] 19%|#9        | 5/26 [00:00<00:01, 16.63it/s] 35%|###4      | 9/26 [00:00<00:00, 22.83it/s] 50%|#####     | 13/26 [00:00<00:00, 27.19it/s] 65%|######5   | 17/26 [00:00<00:00, 30.07it/s] 81%|########  | 21/26 [00:00<00:00, 31.91it/s] 96%|#########6| 25/26 [00:00<00:00, 32.80it/s]100%|##########| 26/26 [00:01<00:00, 25.90it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 910 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 911 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 912 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 913 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 914 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 915 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 916 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 917 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 918 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 919 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 920 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 921 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 922 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 923 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 924 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 925 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 926 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 927 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 928 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 929 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 930 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 931 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 932 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 933 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 934 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 935 400
penalty weights 10000.0
Epoch: [35][  26/  26]	Loss 0.001 (0.000)	train_nll   0.34 (  0.34)	train_penalty   0.00 (  0.00)	weight_norm  24.99 ( 24.98)	train_acc   0.77 (  0.80)	train_minacc   0.83 (  0.85)	train_majacc   0.76 (  0.79)	train_corr   0.00 (  0.00)	l1 6.8789 (6.5704)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.98it/s] 15%|#5        | 4/26 [00:00<00:01, 18.82it/s] 35%|###4      | 9/26 [00:00<00:00, 30.88it/s]                                               35%|###4      | 9/26 [00:00<00:00, 30.88it/s] 58%|#####7    | 15/26 [00:00<00:00, 40.24it/s] 77%|#######6  | 20/26 [00:00<00:00, 42.94it/s]                                                77%|#######6  | 20/26 [00:00<00:00, 42.94it/s]100%|##########| 26/26 [00:00<00:00, 47.37it/s]100%|##########| 26/26 [00:00<00:00, 36.30it/s]
Test: [   0/  26]	Loss 0.355 (0.355)	test_acc   0.78 (  0.78)	test_minacc   0.88 (  0.88)	test_majacc   0.77 (  0.77)	Loss_d 0.355 (0.355)	test_acc_d   0.78 (  0.78)	test_minacc_d   0.88 (  0.88)	test_majacc_d   0.77 (  0.77)	test_corr_d   0.58 (  0.58)
Test: [  10/  26]	Loss 0.392 (0.372)	test_acc   0.79 (  0.77)	test_minacc   0.84 (  0.84)	test_majacc   0.79 (  0.76)	Loss_d 0.392 (0.372)	test_acc_d   0.79 (  0.77)	test_minacc_d   0.84 (  0.84)	test_majacc_d   0.79 (  0.76)	test_corr_d   0.55 (  0.58)
Test: [  20/  26]	Loss 0.371 (0.378)	test_acc   0.80 (  0.77)	test_minacc   0.84 (  0.84)	test_majacc   0.79 (  0.76)	Loss_d 0.371 (0.378)	test_acc_d   0.80 (  0.77)	test_minacc_d   0.84 (  0.84)	test_majacc_d   0.79 (  0.76)	test_corr_d   0.59 (  0.58)
Test: [  26/  26]	Loss 0.341 (0.371)	test_acc   0.76 (  0.78)	test_minacc   0.83 (  0.84)	test_majacc   0.76 (  0.77)	Loss_d 0.341 (0.371)	test_acc_d   0.76 (  0.78)	test_minacc_d   0.83 (  0.84)	test_majacc_d   0.76 (  0.77)	test_corr_d   0.62 (  0.59)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 65.30it/s]
Test: [  0/  1]	Loss 1.665 (1.665)	test_acc   0.63 (  0.63)	test_minacc   0.61 (  0.61)	test_majacc   0.77 (  0.77)	Loss_d 1.665 (1.665)	test_acc_d   0.63 (  0.63)	test_minacc_d   0.61 (  0.61)	test_majacc_d   0.77 (  0.77)	test_corr_d   0.06 (  0.06)
Test: [  1/  1]	Loss 1.665 (1.665)	test_acc   0.63 (  0.63)	test_minacc   0.61 (  0.61)	test_majacc   0.77 (  0.77)	Loss_d 1.665 (1.665)	test_acc_d   0.63 (  0.63)	test_minacc_d   0.61 (  0.61)	test_majacc_d   0.77 (  0.77)	test_corr_d   0.06 (  0.06)
Overall Timing[ 35/  1]	epoch_time 0.0435 (0.0433)	validation_time 0.0004 (0.0006)	train_time 0.0431 (0.0426)
record: (train_acc, test_acc) (0.8021000293493271, 0.6460000276565552)
last accs (train_acc, test_acc) (0.778800031721592, 0.628000020980835)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.60it/s] 19%|#9        | 5/26 [00:00<00:00, 22.82it/s] 35%|###4      | 9/26 [00:00<00:00, 28.40it/s] 50%|#####     | 13/26 [00:00<00:00, 31.32it/s] 65%|######5   | 17/26 [00:00<00:00, 32.68it/s] 81%|########  | 21/26 [00:00<00:00, 33.82it/s] 96%|#########6| 25/26 [00:00<00:00, 34.36it/s]100%|##########| 26/26 [00:00<00:00, 29.40it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 936 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 937 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 938 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 939 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 940 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 941 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 942 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 943 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 944 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 945 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 946 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 947 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 948 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 949 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 950 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 951 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 952 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 953 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 954 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 955 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 956 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 957 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 958 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 959 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 960 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 961 400
penalty weights 10000.0
Epoch: [36][  26/  26]	Loss 0.000 (0.001)	train_nll   0.32 (  0.34)	train_penalty   0.00 (  0.00)	weight_norm  25.01 ( 25.00)	train_acc   0.82 (  0.81)	train_minacc   0.62 (  0.82)	train_majacc   0.85 (  0.80)	train_corr   0.00 (  0.00)	l1 7.0115 (6.6628)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 17.51it/s] 27%|##6       | 7/26 [00:00<00:00, 30.79it/s]                                               27%|##6       | 7/26 [00:00<00:00, 30.79it/s] 46%|####6     | 12/26 [00:00<00:00, 37.23it/s] 65%|######5   | 17/26 [00:00<00:00, 40.42it/s]                                                65%|######5   | 17/26 [00:00<00:00, 40.42it/s] 85%|########4 | 22/26 [00:00<00:00, 43.38it/s]100%|##########| 26/26 [00:00<00:00, 37.19it/s]
Test: [   0/  26]	Loss 0.379 (0.379)	test_acc   0.77 (  0.77)	test_minacc   0.60 (  0.60)	test_majacc   0.80 (  0.80)	Loss_d 0.379 (0.379)	test_acc_d   0.77 (  0.77)	test_minacc_d   0.60 (  0.60)	test_majacc_d   0.80 (  0.80)	test_corr_d   0.63 (  0.63)
Test: [  10/  26]	Loss 0.412 (0.376)	test_acc   0.75 (  0.79)	test_minacc   0.68 (  0.65)	test_majacc   0.77 (  0.81)	Loss_d 0.412 (0.376)	test_acc_d   0.75 (  0.79)	test_minacc_d   0.68 (  0.65)	test_majacc_d   0.77 (  0.81)	test_corr_d   0.60 (  0.63)
Test: [  20/  26]	Loss 0.361 (0.382)	test_acc   0.78 (  0.79)	test_minacc   0.61 (  0.66)	test_majacc   0.81 (  0.81)	Loss_d 0.361 (0.382)	test_acc_d   0.78 (  0.79)	test_minacc_d   0.61 (  0.66)	test_majacc_d   0.81 (  0.81)	test_corr_d   0.63 (  0.63)
Test: [  26/  26]	Loss 0.334 (0.376)	test_acc   0.82 (  0.79)	test_minacc   0.59 (  0.65)	test_majacc   0.85 (  0.81)	Loss_d 0.334 (0.376)	test_acc_d   0.82 (  0.79)	test_minacc_d   0.59 (  0.65)	test_majacc_d   0.85 (  0.81)	test_corr_d   0.67 (  0.63)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.94it/s]
Test: [  0/  1]	Loss 1.625 (1.625)	test_acc   0.56 (  0.56)	test_minacc   0.53 (  0.53)	test_majacc   0.83 (  0.83)	Loss_d 1.625 (1.625)	test_acc_d   0.56 (  0.56)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.83 (  0.83)	test_corr_d   0.11 (  0.11)
Test: [  1/  1]	Loss 1.625 (1.625)	test_acc   0.56 (  0.56)	test_minacc   0.53 (  0.53)	test_majacc   0.83 (  0.83)	Loss_d 1.625 (1.625)	test_acc_d   0.56 (  0.56)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.83 (  0.83)	test_corr_d   0.11 (  0.11)
Overall Timing[ 36/  1]	epoch_time 0.0442 (0.0434)	validation_time 0.0004 (0.0006)	train_time 0.0437 (0.0426)
record: (train_acc, test_acc) (0.8021000293493271, 0.6460000276565552)
last accs (train_acc, test_acc) (0.7901000331044197, 0.5600000023841858)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.97it/s] 19%|#9        | 5/26 [00:00<00:00, 22.14it/s] 35%|###4      | 9/26 [00:00<00:00, 27.70it/s] 50%|#####     | 13/26 [00:00<00:00, 30.37it/s] 65%|######5   | 17/26 [00:00<00:00, 32.44it/s] 81%|########  | 21/26 [00:00<00:00, 33.65it/s] 96%|#########6| 25/26 [00:00<00:00, 34.27it/s]100%|##########| 26/26 [00:00<00:00, 28.91it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 962 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 963 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 964 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 965 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 966 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 967 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 968 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 969 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 970 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 971 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 972 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 973 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 974 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 975 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 976 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 977 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 978 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 979 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 980 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 981 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 982 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 983 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 984 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 985 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 986 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 987 400
penalty weights 10000.0
Epoch: [37][  26/  26]	Loss 0.002 (0.001)	train_nll   0.29 (  0.33)	train_penalty   0.00 (  0.00)	weight_norm  25.03 ( 25.02)	train_acc   0.82 (  0.81)	train_minacc   1.00 (  0.82)	train_majacc   0.80 (  0.81)	train_corr   0.00 (  0.00)	l1 6.7516 (6.8546)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.67it/s] 23%|##3       | 6/26 [00:00<00:00, 26.62it/s]                                               23%|##3       | 6/26 [00:00<00:00, 26.62it/s] 42%|####2     | 11/26 [00:00<00:00, 35.45it/s] 65%|######5   | 17/26 [00:00<00:00, 37.49it/s]                                                65%|######5   | 17/26 [00:00<00:00, 37.49it/s] 85%|########4 | 22/26 [00:00<00:00, 41.03it/s]100%|##########| 26/26 [00:00<00:00, 34.40it/s]
Test: [   0/  26]	Loss 0.288 (0.288)	test_acc   0.85 (  0.85)	test_minacc   0.95 (  0.95)	test_majacc   0.84 (  0.84)	Loss_d 0.288 (0.288)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.95 (  0.95)	test_majacc_d   0.84 (  0.84)	test_corr_d   0.65 (  0.65)
Test: [  10/  26]	Loss 0.337 (0.312)	test_acc   0.81 (  0.81)	test_minacc   0.90 (  0.91)	test_majacc   0.79 (  0.80)	Loss_d 0.337 (0.312)	test_acc_d   0.81 (  0.81)	test_minacc_d   0.90 (  0.91)	test_majacc_d   0.79 (  0.80)	test_corr_d   0.59 (  0.64)
Test: [  20/  26]	Loss 0.343 (0.327)	test_acc   0.79 (  0.80)	test_minacc   0.90 (  0.89)	test_majacc   0.77 (  0.79)	Loss_d 0.343 (0.327)	test_acc_d   0.79 (  0.80)	test_minacc_d   0.90 (  0.89)	test_majacc_d   0.77 (  0.79)	test_corr_d   0.61 (  0.63)
Test: [  26/  26]	Loss 0.300 (0.324)	test_acc   0.81 (  0.81)	test_minacc   1.00 (  0.90)	test_majacc   0.78 (  0.79)	Loss_d 0.300 (0.324)	test_acc_d   0.81 (  0.81)	test_minacc_d   1.00 (  0.90)	test_majacc_d   0.78 (  0.79)	test_corr_d   0.67 (  0.63)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.55it/s]
Test: [  0/  1]	Loss 1.582 (1.582)	test_acc   0.65 (  0.65)	test_minacc   0.64 (  0.64)	test_majacc   0.76 (  0.76)	Loss_d 1.582 (1.582)	test_acc_d   0.65 (  0.65)	test_minacc_d   0.64 (  0.64)	test_majacc_d   0.76 (  0.76)	test_corr_d   0.06 (  0.06)
Test: [  1/  1]	Loss 1.582 (1.582)	test_acc   0.65 (  0.65)	test_minacc   0.64 (  0.64)	test_majacc   0.76 (  0.76)	Loss_d 1.582 (1.582)	test_acc_d   0.65 (  0.65)	test_minacc_d   0.64 (  0.64)	test_majacc_d   0.76 (  0.76)	test_corr_d   0.06 (  0.06)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/157/checkpoints/model_best.pth
Overall Timing[ 37/  1]	epoch_time 0.0381 (0.0432)	validation_time 0.0004 (0.0006)	train_time 0.0377 (0.0425)
record: (train_acc, test_acc) (0.8079000269770622, 0.6520000100135803)
last accs (train_acc, test_acc) (0.8079000269770622, 0.6520000100135803)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.41it/s] 19%|#9        | 5/26 [00:00<00:00, 21.09it/s] 35%|###4      | 9/26 [00:00<00:00, 27.18it/s] 50%|#####     | 13/26 [00:00<00:00, 30.29it/s] 65%|######5   | 17/26 [00:00<00:00, 32.47it/s] 81%|########  | 21/26 [00:00<00:00, 33.81it/s] 96%|#########6| 25/26 [00:00<00:00, 34.83it/s]100%|##########| 26/26 [00:00<00:00, 28.82it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 988 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 989 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 990 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 991 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 992 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 993 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 994 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 995 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 996 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 997 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 998 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 999 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1000 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1001 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1002 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1003 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1004 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1005 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1006 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1007 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1008 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1009 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1010 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1011 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1012 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1013 400
penalty weights 10000.0
Epoch: [38][  26/  26]	Loss 0.002 (0.001)	train_nll   0.29 (  0.32)	train_penalty   0.00 (  0.00)	weight_norm  25.05 ( 25.04)	train_acc   0.81 (  0.81)	train_minacc   0.90 (  0.89)	train_majacc   0.80 (  0.79)	train_corr   0.00 (  0.00)	l1 6.9082 (6.9430)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 17.75it/s] 15%|#5        | 4/26 [00:00<00:01, 18.34it/s] 35%|###4      | 9/26 [00:00<00:00, 31.16it/s]                                               35%|###4      | 9/26 [00:00<00:00, 31.16it/s] 54%|#####3    | 14/26 [00:00<00:00, 37.05it/s] 73%|#######3  | 19/26 [00:00<00:00, 36.60it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 36.60it/s] 92%|#########2| 24/26 [00:00<00:00, 40.21it/s]100%|##########| 26/26 [00:00<00:00, 34.08it/s]
Test: [   0/  26]	Loss 0.311 (0.311)	test_acc   0.84 (  0.84)	test_minacc   0.90 (  0.90)	test_majacc   0.82 (  0.82)	Loss_d 0.311 (0.311)	test_acc_d   0.84 (  0.84)	test_minacc_d   0.90 (  0.90)	test_majacc_d   0.82 (  0.82)	test_corr_d   0.68 (  0.68)
Test: [  10/  26]	Loss 0.328 (0.298)	test_acc   0.83 (  0.83)	test_minacc   0.87 (  0.87)	test_majacc   0.82 (  0.82)	Loss_d 0.328 (0.298)	test_acc_d   0.83 (  0.83)	test_minacc_d   0.87 (  0.87)	test_majacc_d   0.82 (  0.82)	test_corr_d   0.66 (  0.70)
Test: [  20/  26]	Loss 0.331 (0.314)	test_acc   0.81 (  0.82)	test_minacc   0.87 (  0.86)	test_majacc   0.80 (  0.81)	Loss_d 0.331 (0.314)	test_acc_d   0.81 (  0.82)	test_minacc_d   0.87 (  0.86)	test_majacc_d   0.80 (  0.81)	test_corr_d   0.68 (  0.69)
Test: [  26/  26]	Loss 0.293 (0.313)	test_acc   0.81 (  0.82)	test_minacc   0.90 (  0.85)	test_majacc   0.80 (  0.81)	Loss_d 0.293 (0.313)	test_acc_d   0.81 (  0.82)	test_minacc_d   0.90 (  0.85)	test_majacc_d   0.80 (  0.81)	test_corr_d   0.70 (  0.69)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 60.29it/s]
Test: [  0/  1]	Loss 1.747 (1.747)	test_acc   0.63 (  0.63)	test_minacc   0.62 (  0.62)	test_majacc   0.76 (  0.76)	Loss_d 1.747 (1.747)	test_acc_d   0.63 (  0.63)	test_minacc_d   0.62 (  0.62)	test_majacc_d   0.76 (  0.76)	test_corr_d   0.20 (  0.20)
Test: [  1/  1]	Loss 1.747 (1.747)	test_acc   0.63 (  0.63)	test_minacc   0.62 (  0.62)	test_majacc   0.76 (  0.76)	Loss_d 1.747 (1.747)	test_acc_d   0.63 (  0.63)	test_minacc_d   0.62 (  0.62)	test_majacc_d   0.76 (  0.76)	test_corr_d   0.20 (  0.20)
Overall Timing[ 38/  1]	epoch_time 0.0452 (0.0433)	validation_time 0.0007 (0.0006)	train_time 0.0445 (0.0426)
record: (train_acc, test_acc) (0.8079000269770622, 0.6520000100135803)
last accs (train_acc, test_acc) (0.8203000262379646, 0.6300000548362732)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  6.05it/s] 19%|#9        | 5/26 [00:00<00:01, 20.64it/s] 35%|###4      | 9/26 [00:00<00:00, 27.50it/s] 50%|#####     | 13/26 [00:00<00:00, 31.22it/s] 65%|######5   | 17/26 [00:00<00:00, 33.35it/s] 81%|########  | 21/26 [00:00<00:00, 35.08it/s] 96%|#########6| 25/26 [00:00<00:00, 35.97it/s]100%|##########| 26/26 [00:00<00:00, 29.45it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1014 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1015 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1016 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1017 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1018 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1019 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1020 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1021 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1022 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1023 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1024 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1025 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1026 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1027 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1028 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1029 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1030 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1031 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1032 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1033 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1034 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1035 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1036 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1037 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1038 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1039 400
penalty weights 10000.0
Epoch: [39][  26/  26]	Loss 0.002 (0.001)	train_nll   0.31 (  0.33)	train_penalty   0.00 (  0.00)	weight_norm  25.07 ( 25.06)	train_acc   0.76 (  0.81)	train_minacc   0.90 (  0.86)	train_majacc   0.75 (  0.80)	train_corr   0.00 (  0.00)	l1 6.6848 (7.2325)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:05,  4.34it/s] 23%|##3       | 6/26 [00:00<00:00, 21.63it/s]                                               23%|##3       | 6/26 [00:00<00:00, 21.63it/s] 42%|####2     | 11/26 [00:00<00:00, 30.61it/s] 62%|######1   | 16/26 [00:00<00:00, 36.07it/s]                                                62%|######1   | 16/26 [00:00<00:00, 36.07it/s] 81%|########  | 21/26 [00:00<00:00, 36.78it/s]100%|##########| 26/26 [00:00<00:00, 40.19it/s]100%|##########| 26/26 [00:00<00:00, 30.88it/s]
Test: [   0/  26]	Loss 0.316 (0.316)	test_acc   0.83 (  0.83)	test_minacc   0.92 (  0.92)	test_majacc   0.81 (  0.81)	Loss_d 0.316 (0.316)	test_acc_d   0.83 (  0.83)	test_minacc_d   0.92 (  0.92)	test_majacc_d   0.81 (  0.81)	test_corr_d   0.69 (  0.69)
Test: [  10/  26]	Loss 0.309 (0.309)	test_acc   0.83 (  0.82)	test_minacc   0.91 (  0.92)	test_majacc   0.82 (  0.80)	Loss_d 0.309 (0.309)	test_acc_d   0.83 (  0.82)	test_minacc_d   0.91 (  0.92)	test_majacc_d   0.82 (  0.80)	test_corr_d   0.66 (  0.69)
Test: [  20/  26]	Loss 0.357 (0.322)	test_acc   0.80 (  0.81)	test_minacc   0.90 (  0.90)	test_majacc   0.78 (  0.79)	Loss_d 0.357 (0.322)	test_acc_d   0.80 (  0.81)	test_minacc_d   0.90 (  0.90)	test_majacc_d   0.78 (  0.79)	test_corr_d   0.66 (  0.68)
Test: [  26/  26]	Loss 0.315 (0.323)	test_acc   0.76 (  0.81)	test_minacc   0.90 (  0.90)	test_majacc   0.74 (  0.79)	Loss_d 0.315 (0.323)	test_acc_d   0.76 (  0.81)	test_minacc_d   0.90 (  0.90)	test_majacc_d   0.74 (  0.79)	test_corr_d   0.69 (  0.68)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.09it/s]
Test: [  0/  1]	Loss 1.657 (1.657)	test_acc   0.64 (  0.64)	test_minacc   0.62 (  0.62)	test_majacc   0.81 (  0.81)	Loss_d 1.657 (1.657)	test_acc_d   0.64 (  0.64)	test_minacc_d   0.62 (  0.62)	test_majacc_d   0.81 (  0.81)	test_corr_d   0.22 (  0.22)
Test: [  1/  1]	Loss 1.657 (1.657)	test_acc   0.64 (  0.64)	test_minacc   0.62 (  0.62)	test_majacc   0.81 (  0.81)	Loss_d 1.657 (1.657)	test_acc_d   0.64 (  0.64)	test_minacc_d   0.62 (  0.62)	test_majacc_d   0.81 (  0.81)	test_corr_d   0.22 (  0.22)
Overall Timing[ 39/  1]	epoch_time 0.0377 (0.0431)	validation_time 0.0004 (0.0006)	train_time 0.0373 (0.0424)
record: (train_acc, test_acc) (0.8079000269770622, 0.6520000100135803)
last accs (train_acc, test_acc) (0.8058000287413597, 0.6350000500679016)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:09,  2.55it/s] 19%|#9        | 5/26 [00:00<00:01, 11.95it/s] 35%|###4      | 9/26 [00:00<00:00, 18.42it/s] 50%|#####     | 13/26 [00:00<00:00, 22.88it/s] 65%|######5   | 17/26 [00:00<00:00, 26.53it/s] 81%|########  | 21/26 [00:00<00:00, 29.22it/s] 96%|#########6| 25/26 [00:01<00:00, 31.02it/s]100%|##########| 26/26 [00:01<00:00, 22.25it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1040 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1041 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1042 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1043 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1044 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1045 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1046 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1047 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1048 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1049 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1050 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1051 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1052 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1053 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1054 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1055 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1056 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1057 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1058 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1059 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1060 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1061 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1062 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1063 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1064 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1065 400
penalty weights 10000.0
Epoch: [40][  26/  26]	Loss 0.001 (0.001)	train_nll   0.32 (  0.35)	train_penalty   0.00 (  0.00)	weight_norm  25.09 ( 25.09)	train_acc   0.76 (  0.78)	train_minacc   1.00 (  0.89)	train_majacc   0.73 (  0.76)	train_corr   0.00 (  0.00)	l1 6.7017 (6.8245)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.02it/s] 23%|##3       | 6/26 [00:00<00:00, 31.73it/s]                                               23%|##3       | 6/26 [00:00<00:00, 31.73it/s] 42%|####2     | 11/26 [00:00<00:00, 37.55it/s] 62%|######1   | 16/26 [00:00<00:00, 39.42it/s]                                                62%|######1   | 16/26 [00:00<00:00, 39.42it/s] 81%|########  | 21/26 [00:00<00:00, 41.29it/s]100%|##########| 26/26 [00:00<00:00, 43.47it/s]100%|##########| 26/26 [00:00<00:00, 36.13it/s]
Test: [   0/  26]	Loss 0.322 (0.322)	test_acc   0.80 (  0.80)	test_minacc   0.92 (  0.92)	test_majacc   0.78 (  0.78)	Loss_d 0.322 (0.322)	test_acc_d   0.80 (  0.80)	test_minacc_d   0.92 (  0.92)	test_majacc_d   0.78 (  0.78)	test_corr_d   0.66 (  0.66)
Test: [  10/  26]	Loss 0.318 (0.318)	test_acc   0.82 (  0.79)	test_minacc   0.96 (  0.93)	test_majacc   0.79 (  0.77)	Loss_d 0.318 (0.318)	test_acc_d   0.82 (  0.79)	test_minacc_d   0.96 (  0.93)	test_majacc_d   0.79 (  0.77)	test_corr_d   0.65 (  0.67)
Test: [  20/  26]	Loss 0.355 (0.323)	test_acc   0.77 (  0.79)	test_minacc   0.92 (  0.93)	test_majacc   0.75 (  0.77)	Loss_d 0.355 (0.323)	test_acc_d   0.77 (  0.79)	test_minacc_d   0.92 (  0.93)	test_majacc_d   0.75 (  0.77)	test_corr_d   0.63 (  0.67)
Test: [  26/  26]	Loss 0.321 (0.325)	test_acc   0.76 (  0.79)	test_minacc   1.00 (  0.93)	test_majacc   0.73 (  0.77)	Loss_d 0.321 (0.325)	test_acc_d   0.76 (  0.79)	test_minacc_d   1.00 (  0.93)	test_majacc_d   0.73 (  0.77)	test_corr_d   0.67 (  0.67)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.42it/s]
Test: [  0/  1]	Loss 1.570 (1.570)	test_acc   0.68 (  0.68)	test_minacc   0.67 (  0.67)	test_majacc   0.77 (  0.77)	Loss_d 1.570 (1.570)	test_acc_d   0.68 (  0.68)	test_minacc_d   0.67 (  0.67)	test_majacc_d   0.77 (  0.77)	test_corr_d   0.13 (  0.13)
Test: [  1/  1]	Loss 1.570 (1.570)	test_acc   0.68 (  0.68)	test_minacc   0.67 (  0.67)	test_majacc   0.77 (  0.77)	Loss_d 1.570 (1.570)	test_acc_d   0.68 (  0.68)	test_minacc_d   0.67 (  0.67)	test_majacc_d   0.77 (  0.77)	test_corr_d   0.13 (  0.13)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/157/checkpoints/model_best.pth
Overall Timing[ 40/  1]	epoch_time 0.0435 (0.0431)	validation_time 0.0003 (0.0006)	train_time 0.0431 (0.0424)
record: (train_acc, test_acc) (0.7929000306725502, 0.6780000329017639)
last accs (train_acc, test_acc) (0.7929000306725502, 0.6780000329017639)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.49it/s] 19%|#9        | 5/26 [00:00<00:00, 23.90it/s] 35%|###4      | 9/26 [00:00<00:00, 29.07it/s] 50%|#####     | 13/26 [00:00<00:00, 31.13it/s] 65%|######5   | 17/26 [00:00<00:00, 32.68it/s] 81%|########  | 21/26 [00:00<00:00, 33.63it/s] 96%|#########6| 25/26 [00:00<00:00, 34.54it/s]100%|##########| 26/26 [00:00<00:00, 29.68it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1066 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1067 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1068 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1069 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1070 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1071 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1072 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1073 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1074 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1075 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1076 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1077 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1078 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1079 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1080 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1081 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1082 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1083 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1084 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1085 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1086 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1087 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1088 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1089 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1090 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1091 400
penalty weights 10000.0
Epoch: [41][  26/  26]	Loss 0.000 (0.001)	train_nll   0.33 (  0.34)	train_penalty   0.00 (  0.00)	weight_norm  25.11 ( 25.11)	train_acc   0.76 (  0.78)	train_minacc   0.93 (  0.92)	train_majacc   0.73 (  0.75)	train_corr   0.00 (  0.00)	l1 7.0488 (7.2764)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  6.11it/s] 23%|##3       | 6/26 [00:00<00:00, 25.99it/s]                                               23%|##3       | 6/26 [00:00<00:00, 25.99it/s] 42%|####2     | 11/26 [00:00<00:00, 32.56it/s] 62%|######1   | 16/26 [00:00<00:00, 38.27it/s]                                                62%|######1   | 16/26 [00:00<00:00, 38.27it/s] 81%|########  | 21/26 [00:00<00:00, 37.64it/s]100%|##########| 26/26 [00:00<00:00, 40.90it/s]100%|##########| 26/26 [00:00<00:00, 33.01it/s]
Test: [   0/  26]	Loss 0.334 (0.334)	test_acc   0.78 (  0.78)	test_minacc   0.92 (  0.92)	test_majacc   0.76 (  0.76)	Loss_d 0.334 (0.334)	test_acc_d   0.78 (  0.78)	test_minacc_d   0.92 (  0.92)	test_majacc_d   0.76 (  0.76)	test_corr_d   0.68 (  0.68)
Test: [  10/  26]	Loss 0.335 (0.333)	test_acc   0.83 (  0.79)	test_minacc   0.94 (  0.91)	test_majacc   0.80 (  0.77)	Loss_d 0.335 (0.333)	test_acc_d   0.83 (  0.79)	test_minacc_d   0.94 (  0.91)	test_majacc_d   0.80 (  0.77)	test_corr_d   0.66 (  0.68)
Test: [  20/  26]	Loss 0.340 (0.330)	test_acc   0.80 (  0.79)	test_minacc   0.92 (  0.92)	test_majacc   0.77 (  0.77)	Loss_d 0.340 (0.330)	test_acc_d   0.80 (  0.79)	test_minacc_d   0.92 (  0.92)	test_majacc_d   0.77 (  0.77)	test_corr_d   0.66 (  0.68)
Test: [  26/  26]	Loss 0.331 (0.332)	test_acc   0.75 (  0.79)	test_minacc   0.93 (  0.92)	test_majacc   0.73 (  0.77)	Loss_d 0.331 (0.332)	test_acc_d   0.75 (  0.79)	test_minacc_d   0.93 (  0.92)	test_majacc_d   0.73 (  0.77)	test_corr_d   0.68 (  0.68)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.41it/s]
Test: [  0/  1]	Loss 1.683 (1.683)	test_acc   0.67 (  0.67)	test_minacc   0.66 (  0.66)	test_majacc   0.74 (  0.74)	Loss_d 1.683 (1.683)	test_acc_d   0.67 (  0.67)	test_minacc_d   0.66 (  0.66)	test_majacc_d   0.74 (  0.74)	test_corr_d   0.17 (  0.17)
Test: [  1/  1]	Loss 1.683 (1.683)	test_acc   0.67 (  0.67)	test_minacc   0.66 (  0.66)	test_majacc   0.74 (  0.74)	Loss_d 1.683 (1.683)	test_acc_d   0.67 (  0.67)	test_minacc_d   0.66 (  0.66)	test_majacc_d   0.74 (  0.74)	test_corr_d   0.17 (  0.17)
Overall Timing[ 41/  1]	epoch_time 0.0382 (0.0430)	validation_time 0.0003 (0.0006)	train_time 0.0379 (0.0423)
record: (train_acc, test_acc) (0.7929000306725502, 0.6780000329017639)
last accs (train_acc, test_acc) (0.7937000278830528, 0.6650000214576721)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.73it/s] 19%|#9        | 5/26 [00:00<00:00, 24.86it/s] 35%|###4      | 9/26 [00:00<00:00, 29.55it/s] 50%|#####     | 13/26 [00:00<00:00, 31.73it/s] 65%|######5   | 17/26 [00:00<00:00, 32.71it/s] 81%|########  | 21/26 [00:00<00:00, 33.46it/s] 96%|#########6| 25/26 [00:00<00:00, 34.18it/s]100%|##########| 26/26 [00:00<00:00, 29.59it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1092 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1093 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1094 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1095 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1096 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1097 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1098 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1099 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1100 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1101 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1102 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1103 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1104 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1105 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1106 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1107 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1108 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1109 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1110 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1111 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1112 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1113 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1114 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1115 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1116 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1117 400
penalty weights 10000.0
Epoch: [42][  26/  26]	Loss 0.000 (0.001)	train_nll   0.35 (  0.35)	train_penalty   0.00 (  0.00)	weight_norm  25.13 ( 25.12)	train_acc   0.75 (  0.77)	train_minacc   0.93 (  0.92)	train_majacc   0.72 (  0.75)	train_corr   0.00 (  0.00)	l1 7.4365 (7.1029)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:00, 23.21it/s] 35%|###4      | 9/26 [00:00<00:00, 40.54it/s]                                               35%|###4      | 9/26 [00:00<00:00, 40.54it/s] 54%|#####3    | 14/26 [00:00<00:00, 35.27it/s] 77%|#######6  | 20/26 [00:00<00:00, 41.93it/s]                                                77%|#######6  | 20/26 [00:00<00:00, 41.93it/s]100%|##########| 26/26 [00:00<00:00, 46.20it/s]100%|##########| 26/26 [00:00<00:00, 38.14it/s]
Test: [   0/  26]	Loss 0.354 (0.354)	test_acc   0.76 (  0.76)	test_minacc   0.88 (  0.88)	test_majacc   0.74 (  0.74)	Loss_d 0.354 (0.354)	test_acc_d   0.76 (  0.76)	test_minacc_d   0.88 (  0.88)	test_majacc_d   0.74 (  0.74)	test_corr_d   0.65 (  0.65)
Test: [  10/  26]	Loss 0.375 (0.370)	test_acc   0.77 (  0.76)	test_minacc   0.96 (  0.90)	test_majacc   0.74 (  0.74)	Loss_d 0.375 (0.370)	test_acc_d   0.77 (  0.76)	test_minacc_d   0.96 (  0.90)	test_majacc_d   0.74 (  0.74)	test_corr_d   0.62 (  0.64)
Test: [  20/  26]	Loss 0.355 (0.364)	test_acc   0.78 (  0.77)	test_minacc   0.95 (  0.91)	test_majacc   0.75 (  0.74)	Loss_d 0.355 (0.364)	test_acc_d   0.78 (  0.77)	test_minacc_d   0.95 (  0.91)	test_majacc_d   0.75 (  0.74)	test_corr_d   0.62 (  0.63)
Test: [  26/  26]	Loss 0.348 (0.362)	test_acc   0.77 (  0.77)	test_minacc   0.93 (  0.91)	test_majacc   0.75 (  0.74)	Loss_d 0.348 (0.362)	test_acc_d   0.77 (  0.77)	test_minacc_d   0.93 (  0.91)	test_majacc_d   0.75 (  0.74)	test_corr_d   0.66 (  0.64)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 64.92it/s]
Test: [  0/  1]	Loss 1.735 (1.735)	test_acc   0.68 (  0.68)	test_minacc   0.67 (  0.67)	test_majacc   0.75 (  0.75)	Loss_d 1.735 (1.735)	test_acc_d   0.68 (  0.68)	test_minacc_d   0.67 (  0.67)	test_majacc_d   0.75 (  0.75)	test_corr_d   0.13 (  0.13)
Test: [  1/  1]	Loss 1.735 (1.735)	test_acc   0.68 (  0.68)	test_minacc   0.67 (  0.67)	test_majacc   0.75 (  0.75)	Loss_d 1.735 (1.735)	test_acc_d   0.68 (  0.68)	test_minacc_d   0.67 (  0.67)	test_majacc_d   0.75 (  0.75)	test_corr_d   0.13 (  0.13)
Overall Timing[ 42/  1]	epoch_time 0.0418 (0.0430)	validation_time 0.0004 (0.0006)	train_time 0.0413 (0.0423)
record: (train_acc, test_acc) (0.7929000306725502, 0.6780000329017639)
last accs (train_acc, test_acc) (0.7675000301599503, 0.6760000586509705)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.20it/s] 15%|#5        | 4/26 [00:00<00:01, 15.35it/s] 31%|###       | 8/26 [00:00<00:00, 23.32it/s] 46%|####6     | 12/26 [00:00<00:00, 27.79it/s] 62%|######1   | 16/26 [00:00<00:00, 30.45it/s] 77%|#######6  | 20/26 [00:00<00:00, 32.28it/s] 92%|#########2| 24/26 [00:00<00:00, 33.65it/s]100%|##########| 26/26 [00:00<00:00, 26.99it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1118 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1119 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1120 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1121 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1122 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1123 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1124 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1125 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1126 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1127 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1128 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1129 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1130 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1131 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1132 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1133 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1134 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1135 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1136 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1137 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1138 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1139 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1140 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1141 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1142 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1143 400
penalty weights 10000.0
Epoch: [43][  26/  26]	Loss 0.000 (0.000)	train_nll   0.34 (  0.35)	train_penalty   0.00 (  0.00)	weight_norm  25.13 ( 25.13)	train_acc   0.74 (  0.77)	train_minacc   0.93 (  0.92)	train_majacc   0.72 (  0.75)	train_corr   0.00 (  0.00)	l1 7.3401 (7.1789)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.33it/s] 27%|##6       | 7/26 [00:00<00:00, 35.12it/s]                                               27%|##6       | 7/26 [00:00<00:00, 35.12it/s] 46%|####6     | 12/26 [00:00<00:00, 39.84it/s] 65%|######5   | 17/26 [00:00<00:00, 39.40it/s]                                                65%|######5   | 17/26 [00:00<00:00, 39.40it/s] 85%|########4 | 22/26 [00:00<00:00, 41.92it/s]100%|##########| 26/26 [00:00<00:00, 36.35it/s]
Test: [   0/  26]	Loss 0.356 (0.356)	test_acc   0.76 (  0.76)	test_minacc   0.92 (  0.92)	test_majacc   0.73 (  0.73)	Loss_d 0.356 (0.356)	test_acc_d   0.76 (  0.76)	test_minacc_d   0.92 (  0.92)	test_majacc_d   0.73 (  0.73)	test_corr_d   0.64 (  0.64)
Test: [  10/  26]	Loss 0.369 (0.357)	test_acc   0.76 (  0.75)	test_minacc   0.96 (  0.93)	test_majacc   0.72 (  0.72)	Loss_d 0.369 (0.357)	test_acc_d   0.76 (  0.75)	test_minacc_d   0.96 (  0.93)	test_majacc_d   0.72 (  0.72)	test_corr_d   0.62 (  0.64)
Test: [  20/  26]	Loss 0.350 (0.357)	test_acc   0.76 (  0.75)	test_minacc   0.97 (  0.93)	test_majacc   0.72 (  0.72)	Loss_d 0.350 (0.357)	test_acc_d   0.76 (  0.75)	test_minacc_d   0.97 (  0.93)	test_majacc_d   0.72 (  0.72)	test_corr_d   0.62 (  0.63)
Test: [  26/  26]	Loss 0.342 (0.356)	test_acc   0.74 (  0.76)	test_minacc   0.93 (  0.93)	test_majacc   0.72 (  0.73)	Loss_d 0.342 (0.356)	test_acc_d   0.74 (  0.76)	test_minacc_d   0.93 (  0.93)	test_majacc_d   0.72 (  0.73)	test_corr_d   0.66 (  0.63)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.97it/s]
Test: [  0/  1]	Loss 1.703 (1.703)	test_acc   0.70 (  0.70)	test_minacc   0.70 (  0.70)	test_majacc   0.75 (  0.75)	Loss_d 1.703 (1.703)	test_acc_d   0.70 (  0.70)	test_minacc_d   0.70 (  0.70)	test_majacc_d   0.75 (  0.75)	test_corr_d   0.10 (  0.10)
Test: [  1/  1]	Loss 1.703 (1.703)	test_acc   0.70 (  0.70)	test_minacc   0.70 (  0.70)	test_majacc   0.75 (  0.75)	Loss_d 1.703 (1.703)	test_acc_d   0.70 (  0.70)	test_minacc_d   0.70 (  0.70)	test_majacc_d   0.75 (  0.75)	test_corr_d   0.10 (  0.10)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/157/checkpoints/model_best.pth
Overall Timing[ 43/  1]	epoch_time 0.0384 (0.0429)	validation_time 0.0003 (0.0006)	train_time 0.0380 (0.0422)
record: (train_acc, test_acc) (0.7576000261306762, 0.7040000557899475)
last accs (train_acc, test_acc) (0.7576000261306762, 0.7040000557899475)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:08,  2.86it/s] 19%|#9        | 5/26 [00:00<00:01, 13.03it/s] 35%|###4      | 9/26 [00:00<00:00, 19.83it/s] 50%|#####     | 13/26 [00:00<00:00, 24.66it/s] 65%|######5   | 17/26 [00:00<00:00, 27.97it/s] 81%|########  | 21/26 [00:00<00:00, 30.47it/s] 96%|#########6| 25/26 [00:01<00:00, 31.23it/s]100%|##########| 26/26 [00:01<00:00, 23.38it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1144 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1145 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1146 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1147 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1148 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1149 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1150 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1151 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1152 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1153 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1154 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1155 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1156 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1157 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1158 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1159 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1160 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1161 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1162 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1163 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1164 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1165 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1166 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1167 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1168 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1169 400
penalty weights 10000.0
Epoch: [44][  26/  26]	Loss 0.000 (0.000)	train_nll   0.34 (  0.35)	train_penalty   0.00 (  0.00)	weight_norm  25.14 ( 25.14)	train_acc   0.74 (  0.76)	train_minacc   0.93 (  0.93)	train_majacc   0.71 (  0.73)	train_corr   0.00 (  0.00)	l1 7.2322 (7.3424)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:00, 27.44it/s] 31%|###       | 8/26 [00:00<00:00, 37.45it/s]                                               31%|###       | 8/26 [00:00<00:00, 37.45it/s] 50%|#####     | 13/26 [00:00<00:00, 38.31it/s] 69%|######9   | 18/26 [00:00<00:00, 41.71it/s]                                                69%|######9   | 18/26 [00:00<00:00, 41.71it/s] 88%|########8 | 23/26 [00:00<00:00, 42.51it/s]100%|##########| 26/26 [00:00<00:00, 37.01it/s]
Test: [   0/  26]	Loss 0.339 (0.339)	test_acc   0.77 (  0.77)	test_minacc   0.92 (  0.92)	test_majacc   0.75 (  0.75)	Loss_d 0.339 (0.339)	test_acc_d   0.77 (  0.77)	test_minacc_d   0.92 (  0.92)	test_majacc_d   0.75 (  0.75)	test_corr_d   0.66 (  0.66)
Test: [  10/  26]	Loss 0.343 (0.337)	test_acc   0.78 (  0.77)	test_minacc   0.96 (  0.94)	test_majacc   0.75 (  0.74)	Loss_d 0.343 (0.337)	test_acc_d   0.78 (  0.77)	test_minacc_d   0.96 (  0.94)	test_majacc_d   0.75 (  0.74)	test_corr_d   0.65 (  0.66)
Test: [  20/  26]	Loss 0.345 (0.339)	test_acc   0.77 (  0.77)	test_minacc   0.97 (  0.94)	test_majacc   0.73 (  0.74)	Loss_d 0.345 (0.339)	test_acc_d   0.77 (  0.77)	test_minacc_d   0.97 (  0.94)	test_majacc_d   0.73 (  0.74)	test_corr_d   0.64 (  0.66)
Test: [  26/  26]	Loss 0.336 (0.339)	test_acc   0.74 (  0.77)	test_minacc   0.93 (  0.94)	test_majacc   0.71 (  0.74)	Loss_d 0.336 (0.339)	test_acc_d   0.74 (  0.77)	test_minacc_d   0.93 (  0.94)	test_majacc_d   0.71 (  0.74)	test_corr_d   0.68 (  0.66)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.08it/s]
Test: [  0/  1]	Loss 1.686 (1.686)	test_acc   0.70 (  0.70)	test_minacc   0.69 (  0.69)	test_majacc   0.75 (  0.75)	Loss_d 1.686 (1.686)	test_acc_d   0.70 (  0.70)	test_minacc_d   0.69 (  0.69)	test_majacc_d   0.75 (  0.75)	test_corr_d   0.13 (  0.13)
Test: [  1/  1]	Loss 1.686 (1.686)	test_acc   0.70 (  0.70)	test_minacc   0.69 (  0.69)	test_majacc   0.75 (  0.75)	Loss_d 1.686 (1.686)	test_acc_d   0.70 (  0.70)	test_minacc_d   0.69 (  0.69)	test_majacc_d   0.75 (  0.75)	test_corr_d   0.13 (  0.13)
Overall Timing[ 44/  1]	epoch_time 0.0431 (0.0429)	validation_time 0.0005 (0.0006)	train_time 0.0426 (0.0422)
record: (train_acc, test_acc) (0.7576000261306762, 0.7040000557899475)
last accs (train_acc, test_acc) (0.7680000265836716, 0.6960000395774841)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.06it/s] 19%|#9        | 5/26 [00:00<00:00, 22.91it/s] 35%|###4      | 9/26 [00:00<00:00, 27.98it/s] 50%|#####     | 13/26 [00:00<00:00, 30.86it/s] 65%|######5   | 17/26 [00:00<00:00, 32.06it/s] 81%|########  | 21/26 [00:00<00:00, 33.50it/s] 96%|#########6| 25/26 [00:00<00:00, 34.00it/s]100%|##########| 26/26 [00:00<00:00, 29.27it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1170 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1171 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1172 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1173 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1174 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1175 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1176 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1177 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1178 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1179 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1180 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1181 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1182 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1183 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1184 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1185 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1186 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1187 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1188 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1189 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1190 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1191 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1192 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1193 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1194 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1195 400
penalty weights 10000.0
Epoch: [45][  26/  26]	Loss 0.000 (0.000)	train_nll   0.34 (  0.34)	train_penalty   0.00 (  0.00)	weight_norm  25.14 ( 25.14)	train_acc   0.74 (  0.76)	train_minacc   0.93 (  0.94)	train_majacc   0.71 (  0.73)	train_corr   0.00 (  0.00)	l1 7.4162 (7.4184)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.83it/s]  8%|7         | 2/26 [00:00<00:03,  7.95it/s] 27%|##6       | 7/26 [00:00<00:00, 24.02it/s]                                               27%|##6       | 7/26 [00:00<00:00, 24.02it/s] 46%|####6     | 12/26 [00:00<00:00, 30.44it/s] 65%|######5   | 17/26 [00:00<00:00, 35.69it/s]                                                65%|######5   | 17/26 [00:00<00:00, 35.69it/s] 85%|########4 | 22/26 [00:00<00:00, 38.81it/s]100%|##########| 26/26 [00:00<00:00, 30.13it/s]
Test: [   0/  26]	Loss 0.344 (0.344)	test_acc   0.77 (  0.77)	test_minacc   0.92 (  0.92)	test_majacc   0.74 (  0.74)	Loss_d 0.344 (0.344)	test_acc_d   0.77 (  0.77)	test_minacc_d   0.92 (  0.92)	test_majacc_d   0.74 (  0.74)	test_corr_d   0.66 (  0.66)
Test: [  10/  26]	Loss 0.348 (0.343)	test_acc   0.79 (  0.76)	test_minacc   0.96 (  0.94)	test_majacc   0.75 (  0.73)	Loss_d 0.348 (0.343)	test_acc_d   0.79 (  0.76)	test_minacc_d   0.96 (  0.94)	test_majacc_d   0.75 (  0.73)	test_corr_d   0.64 (  0.66)
Test: [  20/  26]	Loss 0.348 (0.342)	test_acc   0.76 (  0.76)	test_minacc   0.94 (  0.94)	test_majacc   0.73 (  0.73)	Loss_d 0.348 (0.342)	test_acc_d   0.76 (  0.76)	test_minacc_d   0.94 (  0.94)	test_majacc_d   0.73 (  0.73)	test_corr_d   0.64 (  0.66)
Test: [  26/  26]	Loss 0.339 (0.342)	test_acc   0.74 (  0.76)	test_minacc   0.93 (  0.94)	test_majacc   0.71 (  0.73)	Loss_d 0.339 (0.342)	test_acc_d   0.74 (  0.76)	test_minacc_d   0.93 (  0.94)	test_majacc_d   0.71 (  0.73)	test_corr_d   0.67 (  0.66)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.17it/s]
Test: [  0/  1]	Loss 1.724 (1.724)	test_acc   0.70 (  0.70)	test_minacc   0.69 (  0.69)	test_majacc   0.75 (  0.75)	Loss_d 1.724 (1.724)	test_acc_d   0.70 (  0.70)	test_minacc_d   0.69 (  0.69)	test_majacc_d   0.75 (  0.75)	test_corr_d   0.13 (  0.13)
Test: [  1/  1]	Loss 1.724 (1.724)	test_acc   0.70 (  0.70)	test_minacc   0.69 (  0.69)	test_majacc   0.75 (  0.75)	Loss_d 1.724 (1.724)	test_acc_d   0.70 (  0.70)	test_minacc_d   0.69 (  0.69)	test_majacc_d   0.75 (  0.75)	test_corr_d   0.13 (  0.13)
Overall Timing[ 45/  1]	epoch_time 0.0482 (0.0430)	validation_time 0.0004 (0.0006)	train_time 0.0478 (0.0423)
record: (train_acc, test_acc) (0.7576000261306762, 0.7040000557899475)
last accs (train_acc, test_acc) (0.7649000231623649, 0.7000000476837158)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:05,  4.23it/s] 19%|#9        | 5/26 [00:00<00:01, 16.72it/s] 35%|###4      | 9/26 [00:00<00:00, 22.78it/s] 50%|#####     | 13/26 [00:00<00:00, 26.91it/s] 65%|######5   | 17/26 [00:00<00:00, 29.91it/s] 81%|########  | 21/26 [00:00<00:00, 32.07it/s] 96%|#########6| 25/26 [00:00<00:00, 34.15it/s]100%|##########| 26/26 [00:00<00:00, 26.57it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1196 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1197 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1198 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1199 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1200 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1201 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1202 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1203 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1204 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1205 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1206 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1207 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1208 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1209 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1210 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1211 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1212 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1213 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1214 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1215 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1216 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1217 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1218 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1219 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1220 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1221 400
penalty weights 10000.0
Epoch: [46][  26/  26]	Loss 0.000 (0.000)	train_nll   0.33 (  0.34)	train_penalty   0.00 (  0.00)	weight_norm  25.14 ( 25.14)	train_acc   0.74 (  0.76)	train_minacc   0.93 (  0.94)	train_majacc   0.71 (  0.73)	train_corr   0.00 (  0.00)	l1 7.4651 (7.3512)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 12.85it/s] 27%|##6       | 7/26 [00:00<00:00, 26.82it/s]                                               27%|##6       | 7/26 [00:00<00:00, 26.82it/s] 46%|####6     | 12/26 [00:00<00:00, 34.51it/s] 65%|######5   | 17/26 [00:00<00:00, 38.44it/s]                                                65%|######5   | 17/26 [00:00<00:00, 38.44it/s] 85%|########4 | 22/26 [00:00<00:00, 39.74it/s]100%|##########| 26/26 [00:00<00:00, 34.22it/s]
Test: [   0/  26]	Loss 0.343 (0.343)	test_acc   0.77 (  0.77)	test_minacc   0.92 (  0.92)	test_majacc   0.75 (  0.75)	Loss_d 0.343 (0.343)	test_acc_d   0.77 (  0.77)	test_minacc_d   0.92 (  0.92)	test_majacc_d   0.75 (  0.75)	test_corr_d   0.65 (  0.65)
Test: [  10/  26]	Loss 0.356 (0.345)	test_acc   0.77 (  0.76)	test_minacc   0.96 (  0.94)	test_majacc   0.73 (  0.73)	Loss_d 0.356 (0.345)	test_acc_d   0.77 (  0.76)	test_minacc_d   0.96 (  0.94)	test_majacc_d   0.73 (  0.73)	test_corr_d   0.63 (  0.65)
Test: [  20/  26]	Loss 0.350 (0.345)	test_acc   0.76 (  0.76)	test_minacc   0.95 (  0.94)	test_majacc   0.72 (  0.73)	Loss_d 0.350 (0.345)	test_acc_d   0.76 (  0.76)	test_minacc_d   0.95 (  0.94)	test_majacc_d   0.72 (  0.73)	test_corr_d   0.63 (  0.65)
Test: [  26/  26]	Loss 0.332 (0.345)	test_acc   0.74 (  0.76)	test_minacc   0.93 (  0.94)	test_majacc   0.71 (  0.73)	Loss_d 0.332 (0.345)	test_acc_d   0.74 (  0.76)	test_minacc_d   0.93 (  0.94)	test_majacc_d   0.71 (  0.73)	test_corr_d   0.67 (  0.65)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.84it/s]
Test: [  0/  1]	Loss 1.727 (1.727)	test_acc   0.70 (  0.70)	test_minacc   0.70 (  0.70)	test_majacc   0.75 (  0.75)	Loss_d 1.727 (1.727)	test_acc_d   0.70 (  0.70)	test_minacc_d   0.70 (  0.70)	test_majacc_d   0.75 (  0.75)	test_corr_d   0.11 (  0.11)
Test: [  1/  1]	Loss 1.727 (1.727)	test_acc   0.70 (  0.70)	test_minacc   0.70 (  0.70)	test_majacc   0.75 (  0.75)	Loss_d 1.727 (1.727)	test_acc_d   0.70 (  0.70)	test_minacc_d   0.70 (  0.70)	test_majacc_d   0.75 (  0.75)	test_corr_d   0.11 (  0.11)
Overall Timing[ 46/  1]	epoch_time 0.0383 (0.0429)	validation_time 0.0004 (0.0006)	train_time 0.0379 (0.0422)
record: (train_acc, test_acc) (0.7576000261306762, 0.7040000557899475)
last accs (train_acc, test_acc) (0.7613000303506852, 0.7010000348091125)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s] 15%|#5        | 4/26 [00:00<00:00, 27.68it/s] 31%|###       | 8/26 [00:00<00:00, 31.77it/s] 46%|####6     | 12/26 [00:00<00:00, 33.99it/s] 62%|######1   | 16/26 [00:00<00:00, 34.86it/s] 77%|#######6  | 20/26 [00:00<00:00, 35.52it/s] 92%|#########2| 24/26 [00:00<00:00, 35.55it/s]100%|##########| 26/26 [00:00<00:00, 32.11it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1222 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1223 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1224 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1225 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1226 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1227 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1228 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1229 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1230 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1231 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1232 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1233 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1234 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1235 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1236 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1237 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1238 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1239 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1240 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1241 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1242 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1243 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1244 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1245 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1246 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1247 400
penalty weights 10000.0
Epoch: [47][  26/  26]	Loss 0.000 (0.000)	train_nll   0.34 (  0.34)	train_penalty   0.00 (  0.00)	weight_norm  25.14 ( 25.14)	train_acc   0.74 (  0.77)	train_minacc   0.93 (  0.94)	train_majacc   0.71 (  0.73)	train_corr   0.00 (  0.00)	l1 7.3549 (7.4094)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:10,  2.29it/s] 23%|##3       | 6/26 [00:00<00:01, 13.75it/s]                                               23%|##3       | 6/26 [00:00<00:01, 13.75it/s] 42%|####2     | 11/26 [00:00<00:00, 22.23it/s] 65%|######5   | 17/26 [00:00<00:00, 28.76it/s]                                                65%|######5   | 17/26 [00:00<00:00, 28.76it/s] 85%|########4 | 22/26 [00:00<00:00, 33.53it/s]100%|##########| 26/26 [00:01<00:00, 24.57it/s]
Test: [   0/  26]	Loss 0.337 (0.337)	test_acc   0.78 (  0.78)	test_minacc   0.92 (  0.92)	test_majacc   0.76 (  0.76)	Loss_d 0.337 (0.337)	test_acc_d   0.78 (  0.78)	test_minacc_d   0.92 (  0.92)	test_majacc_d   0.76 (  0.76)	test_corr_d   0.66 (  0.66)
Test: [  10/  26]	Loss 0.347 (0.338)	test_acc   0.77 (  0.76)	test_minacc   0.96 (  0.94)	test_majacc   0.74 (  0.73)	Loss_d 0.347 (0.338)	test_acc_d   0.77 (  0.76)	test_minacc_d   0.96 (  0.94)	test_majacc_d   0.74 (  0.73)	test_corr_d   0.64 (  0.66)
Test: [  20/  26]	Loss 0.346 (0.339)	test_acc   0.76 (  0.76)	test_minacc   0.95 (  0.94)	test_majacc   0.73 (  0.73)	Loss_d 0.346 (0.339)	test_acc_d   0.76 (  0.76)	test_minacc_d   0.95 (  0.94)	test_majacc_d   0.73 (  0.73)	test_corr_d   0.64 (  0.66)
Test: [  26/  26]	Loss 0.334 (0.339)	test_acc   0.74 (  0.77)	test_minacc   0.93 (  0.94)	test_majacc   0.71 (  0.74)	Loss_d 0.334 (0.339)	test_acc_d   0.74 (  0.77)	test_minacc_d   0.93 (  0.94)	test_majacc_d   0.71 (  0.74)	test_corr_d   0.68 (  0.66)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 60.81it/s]
Test: [  0/  1]	Loss 1.722 (1.722)	test_acc   0.70 (  0.70)	test_minacc   0.69 (  0.69)	test_majacc   0.75 (  0.75)	Loss_d 1.722 (1.722)	test_acc_d   0.70 (  0.70)	test_minacc_d   0.69 (  0.69)	test_majacc_d   0.75 (  0.75)	test_corr_d   0.12 (  0.12)
Test: [  1/  1]	Loss 1.722 (1.722)	test_acc   0.70 (  0.70)	test_minacc   0.69 (  0.69)	test_majacc   0.75 (  0.75)	Loss_d 1.722 (1.722)	test_acc_d   0.70 (  0.70)	test_minacc_d   0.69 (  0.69)	test_majacc_d   0.75 (  0.75)	test_corr_d   0.12 (  0.12)
Overall Timing[ 47/  1]	epoch_time 0.0550 (0.0432)	validation_time 0.0005 (0.0006)	train_time 0.0545 (0.0425)
record: (train_acc, test_acc) (0.7576000261306762, 0.7040000557899475)
last accs (train_acc, test_acc) (0.766600026667118, 0.6980000138282776)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 13.06it/s] 15%|#5        | 4/26 [00:00<00:01, 14.00it/s] 31%|###       | 8/26 [00:00<00:00, 22.23it/s] 46%|####6     | 12/26 [00:00<00:00, 26.63it/s] 62%|######1   | 16/26 [00:00<00:00, 29.79it/s] 77%|#######6  | 20/26 [00:00<00:00, 32.03it/s] 92%|#########2| 24/26 [00:00<00:00, 33.43it/s]100%|##########| 26/26 [00:00<00:00, 26.82it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1248 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1249 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1250 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1251 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1252 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1253 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1254 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1255 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1256 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1257 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1258 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1259 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1260 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1261 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1262 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1263 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1264 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1265 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1266 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1267 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1268 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1269 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1270 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1271 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1272 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1273 400
penalty weights 10000.0
Epoch: [48][  26/  26]	Loss 0.000 (0.000)	train_nll   0.33 (  0.34)	train_penalty   0.00 (  0.00)	weight_norm  25.14 ( 25.14)	train_acc   0.74 (  0.76)	train_minacc   0.93 (  0.94)	train_majacc   0.71 (  0.73)	train_corr   0.00 (  0.00)	l1 7.3850 (7.4135)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:09,  2.58it/s] 27%|##6       | 7/26 [00:00<00:01, 17.38it/s]                                               27%|##6       | 7/26 [00:00<00:01, 17.38it/s] 46%|####6     | 12/26 [00:00<00:00, 25.46it/s] 65%|######5   | 17/26 [00:00<00:00, 30.08it/s]                                                65%|######5   | 17/26 [00:00<00:00, 30.08it/s] 85%|########4 | 22/26 [00:00<00:00, 35.03it/s]100%|##########| 26/26 [00:00<00:00, 26.51it/s]
Test: [   0/  26]	Loss 0.340 (0.340)	test_acc   0.77 (  0.77)	test_minacc   0.92 (  0.92)	test_majacc   0.75 (  0.75)	Loss_d 0.340 (0.340)	test_acc_d   0.77 (  0.77)	test_minacc_d   0.92 (  0.92)	test_majacc_d   0.75 (  0.75)	test_corr_d   0.66 (  0.66)
Test: [  10/  26]	Loss 0.348 (0.340)	test_acc   0.78 (  0.76)	test_minacc   0.96 (  0.94)	test_majacc   0.74 (  0.73)	Loss_d 0.348 (0.340)	test_acc_d   0.78 (  0.76)	test_minacc_d   0.96 (  0.94)	test_majacc_d   0.74 (  0.73)	test_corr_d   0.64 (  0.66)
Test: [  20/  26]	Loss 0.348 (0.340)	test_acc   0.76 (  0.76)	test_minacc   0.94 (  0.94)	test_majacc   0.73 (  0.73)	Loss_d 0.348 (0.340)	test_acc_d   0.76 (  0.76)	test_minacc_d   0.94 (  0.94)	test_majacc_d   0.73 (  0.73)	test_corr_d   0.64 (  0.66)
Test: [  26/  26]	Loss 0.331 (0.340)	test_acc   0.74 (  0.77)	test_minacc   0.93 (  0.94)	test_majacc   0.71 (  0.73)	Loss_d 0.331 (0.340)	test_acc_d   0.74 (  0.77)	test_minacc_d   0.93 (  0.94)	test_majacc_d   0.71 (  0.73)	test_corr_d   0.68 (  0.66)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.00it/s]
Test: [  0/  1]	Loss 1.725 (1.725)	test_acc   0.70 (  0.70)	test_minacc   0.69 (  0.69)	test_majacc   0.75 (  0.75)	Loss_d 1.725 (1.725)	test_acc_d   0.70 (  0.70)	test_minacc_d   0.69 (  0.69)	test_majacc_d   0.75 (  0.75)	test_corr_d   0.12 (  0.12)
Test: [  1/  1]	Loss 1.725 (1.725)	test_acc   0.70 (  0.70)	test_minacc   0.69 (  0.69)	test_majacc   0.75 (  0.75)	Loss_d 1.725 (1.725)	test_acc_d   0.70 (  0.70)	test_minacc_d   0.69 (  0.69)	test_majacc_d   0.75 (  0.75)	test_corr_d   0.12 (  0.12)
Overall Timing[ 48/  1]	epoch_time 0.0536 (0.0434)	validation_time 0.0005 (0.0006)	train_time 0.0531 (0.0427)
record: (train_acc, test_acc) (0.7576000261306762, 0.7040000557899475)
last accs (train_acc, test_acc) (0.7657000300884247, 0.6990000605583191)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.59it/s] 19%|#9        | 5/26 [00:00<00:01, 19.33it/s] 35%|###4      | 9/26 [00:00<00:00, 25.44it/s] 50%|#####     | 13/26 [00:00<00:00, 28.87it/s] 65%|######5   | 17/26 [00:00<00:00, 30.88it/s] 81%|########  | 21/26 [00:00<00:00, 32.01it/s] 96%|#########6| 25/26 [00:00<00:00, 32.97it/s]100%|##########| 26/26 [00:00<00:00, 26.93it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1274 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1275 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1276 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1277 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1278 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1279 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1280 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1281 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1282 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1283 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1284 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1285 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1286 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1287 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1288 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1289 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1290 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1291 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1292 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1293 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1294 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1295 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1296 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1297 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1298 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1299 400
penalty weights 10000.0
Epoch: [49][  26/  26]	Loss 0.000 (0.000)	train_nll   0.34 (  0.34)	train_penalty   0.00 (  0.00)	weight_norm  25.14 ( 25.14)	train_acc   0.74 (  0.77)	train_minacc   0.93 (  0.94)	train_majacc   0.71 (  0.74)	train_corr   0.00 (  0.00)	l1 7.4365 (7.3948)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  6.00it/s] 23%|##3       | 6/26 [00:00<00:00, 25.77it/s]                                               23%|##3       | 6/26 [00:00<00:00, 25.77it/s] 42%|####2     | 11/26 [00:00<00:00, 33.35it/s] 62%|######1   | 16/26 [00:00<00:00, 38.11it/s]                                                62%|######1   | 16/26 [00:00<00:00, 38.11it/s] 81%|########  | 21/26 [00:00<00:00, 37.69it/s]100%|##########| 26/26 [00:00<00:00, 41.14it/s]100%|##########| 26/26 [00:00<00:00, 32.78it/s]
Test: [   0/  26]	Loss 0.341 (0.341)	test_acc   0.78 (  0.78)	test_minacc   0.92 (  0.92)	test_majacc   0.75 (  0.75)	Loss_d 0.341 (0.341)	test_acc_d   0.78 (  0.78)	test_minacc_d   0.92 (  0.92)	test_majacc_d   0.75 (  0.75)	test_corr_d   0.66 (  0.66)
Test: [  10/  26]	Loss 0.351 (0.341)	test_acc   0.77 (  0.76)	test_minacc   0.96 (  0.94)	test_majacc   0.73 (  0.73)	Loss_d 0.351 (0.341)	test_acc_d   0.77 (  0.76)	test_minacc_d   0.96 (  0.94)	test_majacc_d   0.73 (  0.73)	test_corr_d   0.63 (  0.66)
Test: [  20/  26]	Loss 0.348 (0.341)	test_acc   0.76 (  0.76)	test_minacc   0.95 (  0.94)	test_majacc   0.73 (  0.73)	Loss_d 0.348 (0.341)	test_acc_d   0.76 (  0.76)	test_minacc_d   0.95 (  0.94)	test_majacc_d   0.73 (  0.73)	test_corr_d   0.64 (  0.65)
Test: [  26/  26]	Loss 0.335 (0.341)	test_acc   0.74 (  0.77)	test_minacc   0.93 (  0.94)	test_majacc   0.71 (  0.73)	Loss_d 0.335 (0.341)	test_acc_d   0.74 (  0.77)	test_minacc_d   0.93 (  0.94)	test_majacc_d   0.71 (  0.73)	test_corr_d   0.67 (  0.65)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 60.58it/s]
Test: [  0/  1]	Loss 1.733 (1.733)	test_acc   0.70 (  0.70)	test_minacc   0.69 (  0.69)	test_majacc   0.75 (  0.75)	Loss_d 1.733 (1.733)	test_acc_d   0.70 (  0.70)	test_minacc_d   0.69 (  0.69)	test_majacc_d   0.75 (  0.75)	test_corr_d   0.12 (  0.12)
Test: [  1/  1]	Loss 1.733 (1.733)	test_acc   0.70 (  0.70)	test_minacc   0.69 (  0.69)	test_majacc   0.75 (  0.75)	Loss_d 1.733 (1.733)	test_acc_d   0.70 (  0.70)	test_minacc_d   0.69 (  0.69)	test_majacc_d   0.75 (  0.75)	test_corr_d   0.12 (  0.12)
Overall Timing[ 49/  1]	epoch_time 0.0414 (0.0433)	validation_time 0.0003 (0.0006)	train_time 0.0410 (0.0427)
record: (train_acc, test_acc) (0.7576000261306762, 0.7040000557899475)
last accs (train_acc, test_acc) (0.7652000289559364, 0.6980000138282776)
done saving aggregate.csv to ./aggregate.csv
wandb: - 0.166 MB of 0.166 MB uploadedwandb: \ 0.166 MB of 0.166 MB uploadedwandb: | 0.166 MB of 0.166 MB uploadedThread SenderThread:
Traceback (most recent call last):
  File "/home/zd16/scratch/mypython3/wandb/sdk/internal/internal_util.py", line 48, in run
    self._run()
  File "/home/zd16/scratch/mypython3/wandb/sdk/internal/internal_util.py", line 99, in _run
    self._process(record)
  File "/home/zd16/scratch/mypython3/wandb/sdk/internal/internal.py", line 327, in _process
    self._sm.send(record)
  File "/home/zd16/scratch/mypython3/wandb/sdk/internal/sender.py", line 398, in send
    send_handler(record)
  File "/home/zd16/scratch/mypython3/wandb/sdk/internal/sender.py", line 420, in send_request
    send_handler(record)
  File "/home/zd16/scratch/mypython3/wandb/sdk/internal/sender.py", line 654, in send_request_defer
    self._flush_job()
  File "/home/zd16/scratch/mypython3/wandb/sdk/internal/sender.py", line 1706, in _flush_job
    artifact = self._job_builder.build(api=self._api)
  File "/home/zd16/scratch/mypython3/wandb/sdk/internal/job_builder.py", line 552, in build
    artifact.add_file(
  File "/home/zd16/scratch/mypython3/wandb/sdk/artifacts/artifact.py", line 1196, in add_file
    return self._add_local_file(
  File "/home/zd16/scratch/mypython3/wandb/sdk/artifacts/artifact.py", line 1459, in _add_local_file
    with tempfile.NamedTemporaryFile(dir=get_staging_dir(), delete=False) as f:
  File "/usr/local/python/3.9.16/lib/python3.9/tempfile.py", line 545, in NamedTemporaryFile
    (fd, name) = _mkstemp_inner(dir, prefix, suffix, flags, output_type)
  File "/usr/local/python/3.9.16/lib/python3.9/tempfile.py", line 255, in _mkstemp_inner
    fd = _os.open(file, flags, 0o600)
OSError: [Errno 122] Disk quota exceeded: '/home/zd16/.local/share/wandb/artifacts/staging/tmpztq3l6cu'
wandb: ERROR Internal wandb error: file data was not synced
